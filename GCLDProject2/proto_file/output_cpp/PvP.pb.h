// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PvP.proto

#ifndef PROTOBUF_PvP_2eproto__INCLUDED
#define PROTOBUF_PvP_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Social.pb.h"
#include "InterServer.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PvP_2eproto();
void protobuf_AssignDesc_PvP_2eproto();
void protobuf_ShutdownFile_PvP_2eproto();

class PvPEntryArena;
class PvPEntryArenaRet;
class PvPGetArenaPlayerInfo;
class ArenaAttackListPlayerInfo;
class PvPGetArenaPlayerInfoRet;
class PvPGetRankingList;
class RankingInfo;
class PvPGetRankingListRet;
class PvPArenaFinghtInfo;
class PvPArenaFinghtInfoRet;
class PvPArenaFightRecordInfo;
class PvPArenaFightRecordInfoRet;
class SG2D_PvPCreatePlayer;
class SG2D_PvPCreatePlayerRet;
class SG2D_PvPGetRank;
class SG2D_PvPGetRankList;
class SG2D_PvPGetRankRet;
class SG2D_PvPGetRankListRet;
class PvpMarkFight;
class PvpMarkFightRet;

enum ArenaResult {
  PVP_ARENA_RESULT_SUCCESS = 0,
  PVP_ARENA_RESULT_HAD_ENTRY = 1,
  PVP_ARENA_RESULT_DB_DISCONNECT = 2,
  PVP_ARENA_RESULT_CAN_NOT_FIND_PLAYER = 3,
  PVP_ARENA_RESULT_OTHER_ERROR = 4,
  PVP_ARENA_RESULT_FIGHT_MARK_ERROR = 5,
  PVP_ARENA_RESULT_SELF_IS_FIGHTING = 6,
  PVP_ARENA_RESULT_TARGET_IS_FIGHTING = 7,
  PVP_ARENA_RESULT_TARGET_RANK_IS_CHANGE = 8
};
bool ArenaResult_IsValid(int value);
const ArenaResult ArenaResult_MIN = PVP_ARENA_RESULT_SUCCESS;
const ArenaResult ArenaResult_MAX = PVP_ARENA_RESULT_TARGET_RANK_IS_CHANGE;
const int ArenaResult_ARRAYSIZE = ArenaResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* ArenaResult_descriptor();
inline const ::std::string& ArenaResult_Name(ArenaResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    ArenaResult_descriptor(), value);
}
inline bool ArenaResult_Parse(
    const ::std::string& name, ArenaResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ArenaResult>(
    ArenaResult_descriptor(), name, value);
}
// ===================================================================

class PvPEntryArena : public ::google::protobuf::Message {
 public:
  PvPEntryArena();
  virtual ~PvPEntryArena();

  PvPEntryArena(const PvPEntryArena& from);

  inline PvPEntryArena& operator=(const PvPEntryArena& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvPEntryArena& default_instance();

  void Swap(PvPEntryArena* other);

  // implements Message ----------------------------------------------

  PvPEntryArena* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvPEntryArena& from);
  void MergeFrom(const PvPEntryArena& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 player_id() const;
  inline void set_player_id(::google::protobuf::uint64 value);

  // optional uint64 account_id = 2;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 2;
  inline ::google::protobuf::uint64 account_id() const;
  inline void set_account_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.PvPEntryArena)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_account_id();
  inline void clear_has_account_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_id_;
  ::google::protobuf::uint64 account_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PvP_2eproto();
  friend void protobuf_AssignDesc_PvP_2eproto();
  friend void protobuf_ShutdownFile_PvP_2eproto();

  void InitAsDefaultInstance();
  static PvPEntryArena* default_instance_;
};
// -------------------------------------------------------------------

class PvPEntryArenaRet : public ::google::protobuf::Message {
 public:
  PvPEntryArenaRet();
  virtual ~PvPEntryArenaRet();

  PvPEntryArenaRet(const PvPEntryArenaRet& from);

  inline PvPEntryArenaRet& operator=(const PvPEntryArenaRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvPEntryArenaRet& default_instance();

  void Swap(PvPEntryArenaRet* other);

  // implements Message ----------------------------------------------

  PvPEntryArenaRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvPEntryArenaRet& from);
  void MergeFrom(const PvPEntryArenaRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.ArenaResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::pb::ArenaResult result() const;
  inline void set_result(::pb::ArenaResult value);

  // optional uint32 rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.PvPEntryArenaRet)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PvP_2eproto();
  friend void protobuf_AssignDesc_PvP_2eproto();
  friend void protobuf_ShutdownFile_PvP_2eproto();

  void InitAsDefaultInstance();
  static PvPEntryArenaRet* default_instance_;
};
// -------------------------------------------------------------------

class PvPGetArenaPlayerInfo : public ::google::protobuf::Message {
 public:
  PvPGetArenaPlayerInfo();
  virtual ~PvPGetArenaPlayerInfo();

  PvPGetArenaPlayerInfo(const PvPGetArenaPlayerInfo& from);

  inline PvPGetArenaPlayerInfo& operator=(const PvPGetArenaPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvPGetArenaPlayerInfo& default_instance();

  void Swap(PvPGetArenaPlayerInfo* other);

  // implements Message ----------------------------------------------

  PvPGetArenaPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvPGetArenaPlayerInfo& from);
  void MergeFrom(const PvPGetArenaPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 rank = 1;
  inline int rank_size() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::uint32 rank(int index) const;
  inline void set_rank(int index, ::google::protobuf::uint32 value);
  inline void add_rank(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rank() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rank();

  // @@protoc_insertion_point(class_scope:pb.PvPGetArenaPlayerInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PvP_2eproto();
  friend void protobuf_AssignDesc_PvP_2eproto();
  friend void protobuf_ShutdownFile_PvP_2eproto();

  void InitAsDefaultInstance();
  static PvPGetArenaPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class ArenaAttackListPlayerInfo : public ::google::protobuf::Message {
 public:
  ArenaAttackListPlayerInfo();
  virtual ~ArenaAttackListPlayerInfo();

  ArenaAttackListPlayerInfo(const ArenaAttackListPlayerInfo& from);

  inline ArenaAttackListPlayerInfo& operator=(const ArenaAttackListPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaAttackListPlayerInfo& default_instance();

  void Swap(ArenaAttackListPlayerInfo* other);

  // implements Message ----------------------------------------------

  ArenaAttackListPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaAttackListPlayerInfo& from);
  void MergeFrom(const ArenaAttackListPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional .pb.MsgPlayerBaseData player_info = 2;
  inline bool has_player_info() const;
  inline void clear_player_info();
  static const int kPlayerInfoFieldNumber = 2;
  inline const ::pb::MsgPlayerBaseData& player_info() const;
  inline ::pb::MsgPlayerBaseData* mutable_player_info();
  inline ::pb::MsgPlayerBaseData* release_player_info();
  inline void set_allocated_player_info(::pb::MsgPlayerBaseData* player_info);

  // @@protoc_insertion_point(class_scope:pb.ArenaAttackListPlayerInfo)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_player_info();
  inline void clear_has_player_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::MsgPlayerBaseData* player_info_;
  ::google::protobuf::uint32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PvP_2eproto();
  friend void protobuf_AssignDesc_PvP_2eproto();
  friend void protobuf_ShutdownFile_PvP_2eproto();

  void InitAsDefaultInstance();
  static ArenaAttackListPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class PvPGetArenaPlayerInfoRet : public ::google::protobuf::Message {
 public:
  PvPGetArenaPlayerInfoRet();
  virtual ~PvPGetArenaPlayerInfoRet();

  PvPGetArenaPlayerInfoRet(const PvPGetArenaPlayerInfoRet& from);

  inline PvPGetArenaPlayerInfoRet& operator=(const PvPGetArenaPlayerInfoRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvPGetArenaPlayerInfoRet& default_instance();

  void Swap(PvPGetArenaPlayerInfoRet* other);

  // implements Message ----------------------------------------------

  PvPGetArenaPlayerInfoRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvPGetArenaPlayerInfoRet& from);
  void MergeFrom(const PvPGetArenaPlayerInfoRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.ArenaResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::pb::ArenaResult result() const;
  inline void set_result(::pb::ArenaResult value);

  // repeated .pb.ArenaAttackListPlayerInfo infos = 2;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 2;
  inline const ::pb::ArenaAttackListPlayerInfo& infos(int index) const;
  inline ::pb::ArenaAttackListPlayerInfo* mutable_infos(int index);
  inline ::pb::ArenaAttackListPlayerInfo* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::ArenaAttackListPlayerInfo >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::ArenaAttackListPlayerInfo >*
      mutable_infos();

  // @@protoc_insertion_point(class_scope:pb.PvPGetArenaPlayerInfoRet)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::ArenaAttackListPlayerInfo > infos_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PvP_2eproto();
  friend void protobuf_AssignDesc_PvP_2eproto();
  friend void protobuf_ShutdownFile_PvP_2eproto();

  void InitAsDefaultInstance();
  static PvPGetArenaPlayerInfoRet* default_instance_;
};
// -------------------------------------------------------------------

class PvPGetRankingList : public ::google::protobuf::Message {
 public:
  PvPGetRankingList();
  virtual ~PvPGetRankingList();

  PvPGetRankingList(const PvPGetRankingList& from);

  inline PvPGetRankingList& operator=(const PvPGetRankingList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvPGetRankingList& default_instance();

  void Swap(PvPGetRankingList* other);

  // implements Message ----------------------------------------------

  PvPGetRankingList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvPGetRankingList& from);
  void MergeFrom(const PvPGetRankingList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 beg_rank = 1;
  inline bool has_beg_rank() const;
  inline void clear_beg_rank();
  static const int kBegRankFieldNumber = 1;
  inline ::google::protobuf::uint32 beg_rank() const;
  inline void set_beg_rank(::google::protobuf::uint32 value);

  // optional uint32 end_rank = 2;
  inline bool has_end_rank() const;
  inline void clear_end_rank();
  static const int kEndRankFieldNumber = 2;
  inline ::google::protobuf::uint32 end_rank() const;
  inline void set_end_rank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.PvPGetRankingList)
 private:
  inline void set_has_beg_rank();
  inline void clear_has_beg_rank();
  inline void set_has_end_rank();
  inline void clear_has_end_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 beg_rank_;
  ::google::protobuf::uint32 end_rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PvP_2eproto();
  friend void protobuf_AssignDesc_PvP_2eproto();
  friend void protobuf_ShutdownFile_PvP_2eproto();

  void InitAsDefaultInstance();
  static PvPGetRankingList* default_instance_;
};
// -------------------------------------------------------------------

class RankingInfo : public ::google::protobuf::Message {
 public:
  RankingInfo();
  virtual ~RankingInfo();

  RankingInfo(const RankingInfo& from);

  inline RankingInfo& operator=(const RankingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankingInfo& default_instance();

  void Swap(RankingInfo* other);

  // implements Message ----------------------------------------------

  RankingInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankingInfo& from);
  void MergeFrom(const RankingInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional .pb.MsgPlayerBaseData info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::pb::MsgPlayerBaseData& info() const;
  inline ::pb::MsgPlayerBaseData* mutable_info();
  inline ::pb::MsgPlayerBaseData* release_info();
  inline void set_allocated_info(::pb::MsgPlayerBaseData* info);

  // @@protoc_insertion_point(class_scope:pb.RankingInfo)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::MsgPlayerBaseData* info_;
  ::google::protobuf::uint32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PvP_2eproto();
  friend void protobuf_AssignDesc_PvP_2eproto();
  friend void protobuf_ShutdownFile_PvP_2eproto();

  void InitAsDefaultInstance();
  static RankingInfo* default_instance_;
};
// -------------------------------------------------------------------

class PvPGetRankingListRet : public ::google::protobuf::Message {
 public:
  PvPGetRankingListRet();
  virtual ~PvPGetRankingListRet();

  PvPGetRankingListRet(const PvPGetRankingListRet& from);

  inline PvPGetRankingListRet& operator=(const PvPGetRankingListRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvPGetRankingListRet& default_instance();

  void Swap(PvPGetRankingListRet* other);

  // implements Message ----------------------------------------------

  PvPGetRankingListRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvPGetRankingListRet& from);
  void MergeFrom(const PvPGetRankingListRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.ArenaResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::pb::ArenaResult result() const;
  inline void set_result(::pb::ArenaResult value);

  // repeated .pb.RankingInfo infos = 2;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 2;
  inline const ::pb::RankingInfo& infos(int index) const;
  inline ::pb::RankingInfo* mutable_infos(int index);
  inline ::pb::RankingInfo* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::RankingInfo >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::RankingInfo >*
      mutable_infos();

  // @@protoc_insertion_point(class_scope:pb.PvPGetRankingListRet)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::RankingInfo > infos_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PvP_2eproto();
  friend void protobuf_AssignDesc_PvP_2eproto();
  friend void protobuf_ShutdownFile_PvP_2eproto();

  void InitAsDefaultInstance();
  static PvPGetRankingListRet* default_instance_;
};
// -------------------------------------------------------------------

class PvPArenaFinghtInfo : public ::google::protobuf::Message {
 public:
  PvPArenaFinghtInfo();
  virtual ~PvPArenaFinghtInfo();

  PvPArenaFinghtInfo(const PvPArenaFinghtInfo& from);

  inline PvPArenaFinghtInfo& operator=(const PvPArenaFinghtInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvPArenaFinghtInfo& default_instance();

  void Swap(PvPArenaFinghtInfo* other);

  // implements Message ----------------------------------------------

  PvPArenaFinghtInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvPArenaFinghtInfo& from);
  void MergeFrom(const PvPArenaFinghtInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_win = 1;
  inline bool has_is_win() const;
  inline void clear_is_win();
  static const int kIsWinFieldNumber = 1;
  inline bool is_win() const;
  inline void set_is_win(bool value);

  // optional uint64 target_id = 2;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 2;
  inline ::google::protobuf::uint64 target_id() const;
  inline void set_target_id(::google::protobuf::uint64 value);

  // optional uint32 target_rank = 3;
  inline bool has_target_rank() const;
  inline void clear_target_rank();
  static const int kTargetRankFieldNumber = 3;
  inline ::google::protobuf::uint32 target_rank() const;
  inline void set_target_rank(::google::protobuf::uint32 value);

  // optional uint64 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional uint32 self_level = 5;
  inline bool has_self_level() const;
  inline void clear_self_level();
  static const int kSelfLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 self_level() const;
  inline void set_self_level(::google::protobuf::uint32 value);

  // optional string self_name = 6;
  inline bool has_self_name() const;
  inline void clear_self_name();
  static const int kSelfNameFieldNumber = 6;
  inline const ::std::string& self_name() const;
  inline void set_self_name(const ::std::string& value);
  inline void set_self_name(const char* value);
  inline void set_self_name(const char* value, size_t size);
  inline ::std::string* mutable_self_name();
  inline ::std::string* release_self_name();
  inline void set_allocated_self_name(::std::string* self_name);

  // optional uint64 self_id = 7;
  inline bool has_self_id() const;
  inline void clear_self_id();
  static const int kSelfIdFieldNumber = 7;
  inline ::google::protobuf::uint64 self_id() const;
  inline void set_self_id(::google::protobuf::uint64 value);

  // optional uint32 self_rank = 8;
  inline bool has_self_rank() const;
  inline void clear_self_rank();
  static const int kSelfRankFieldNumber = 8;
  inline ::google::protobuf::uint32 self_rank() const;
  inline void set_self_rank(::google::protobuf::uint32 value);

  // optional uint32 self_fight_value = 9;
  inline bool has_self_fight_value() const;
  inline void clear_self_fight_value();
  static const int kSelfFightValueFieldNumber = 9;
  inline ::google::protobuf::uint32 self_fight_value() const;
  inline void set_self_fight_value(::google::protobuf::uint32 value);

  // optional uint32 self_char_proto_id = 10;
  inline bool has_self_char_proto_id() const;
  inline void clear_self_char_proto_id();
  static const int kSelfCharProtoIdFieldNumber = 10;
  inline ::google::protobuf::uint32 self_char_proto_id() const;
  inline void set_self_char_proto_id(::google::protobuf::uint32 value);

  // optional uint32 self_vip_level = 11;
  inline bool has_self_vip_level() const;
  inline void clear_self_vip_level();
  static const int kSelfVipLevelFieldNumber = 11;
  inline ::google::protobuf::uint32 self_vip_level() const;
  inline void set_self_vip_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.PvPArenaFinghtInfo)
 private:
  inline void set_has_is_win();
  inline void clear_has_is_win();
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_target_rank();
  inline void clear_has_target_rank();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_self_level();
  inline void clear_has_self_level();
  inline void set_has_self_name();
  inline void clear_has_self_name();
  inline void set_has_self_id();
  inline void clear_has_self_id();
  inline void set_has_self_rank();
  inline void clear_has_self_rank();
  inline void set_has_self_fight_value();
  inline void clear_has_self_fight_value();
  inline void set_has_self_char_proto_id();
  inline void clear_has_self_char_proto_id();
  inline void set_has_self_vip_level();
  inline void clear_has_self_vip_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 target_id_;
  bool is_win_;
  ::google::protobuf::uint32 target_rank_;
  ::google::protobuf::uint64 time_;
  ::std::string* self_name_;
  ::google::protobuf::uint32 self_level_;
  ::google::protobuf::uint32 self_rank_;
  ::google::protobuf::uint64 self_id_;
  ::google::protobuf::uint32 self_fight_value_;
  ::google::protobuf::uint32 self_char_proto_id_;
  ::google::protobuf::uint32 self_vip_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_PvP_2eproto();
  friend void protobuf_AssignDesc_PvP_2eproto();
  friend void protobuf_ShutdownFile_PvP_2eproto();

  void InitAsDefaultInstance();
  static PvPArenaFinghtInfo* default_instance_;
};
// -------------------------------------------------------------------

class PvPArenaFinghtInfoRet : public ::google::protobuf::Message {
 public:
  PvPArenaFinghtInfoRet();
  virtual ~PvPArenaFinghtInfoRet();

  PvPArenaFinghtInfoRet(const PvPArenaFinghtInfoRet& from);

  inline PvPArenaFinghtInfoRet& operator=(const PvPArenaFinghtInfoRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvPArenaFinghtInfoRet& default_instance();

  void Swap(PvPArenaFinghtInfoRet* other);

  // implements Message ----------------------------------------------

  PvPArenaFinghtInfoRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvPArenaFinghtInfoRet& from);
  void MergeFrom(const PvPArenaFinghtInfoRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.ArenaResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::pb::ArenaResult result() const;
  inline void set_result(::pb::ArenaResult value);

  // optional bool is_win = 2;
  inline bool has_is_win() const;
  inline void clear_is_win();
  static const int kIsWinFieldNumber = 2;
  inline bool is_win() const;
  inline void set_is_win(bool value);

  // optional uint32 get_coin_count = 3;
  inline bool has_get_coin_count() const;
  inline void clear_get_coin_count();
  static const int kGetCoinCountFieldNumber = 3;
  inline ::google::protobuf::uint32 get_coin_count() const;
  inline void set_get_coin_count(::google::protobuf::uint32 value);

  // optional uint32 new_rank = 4;
  inline bool has_new_rank() const;
  inline void clear_new_rank();
  static const int kNewRankFieldNumber = 4;
  inline ::google::protobuf::uint32 new_rank() const;
  inline void set_new_rank(::google::protobuf::uint32 value);

  // optional uint32 new_history_rank = 5;
  inline bool has_new_history_rank() const;
  inline void clear_new_history_rank();
  static const int kNewHistoryRankFieldNumber = 5;
  inline ::google::protobuf::uint32 new_history_rank() const;
  inline void set_new_history_rank(::google::protobuf::uint32 value);

  // optional uint64 target_id = 6;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 6;
  inline ::google::protobuf::uint64 target_id() const;
  inline void set_target_id(::google::protobuf::uint64 value);

  // optional uint32 target_rank = 7;
  inline bool has_target_rank() const;
  inline void clear_target_rank();
  static const int kTargetRankFieldNumber = 7;
  inline ::google::protobuf::uint32 target_rank() const;
  inline void set_target_rank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.PvPArenaFinghtInfoRet)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_is_win();
  inline void clear_has_is_win();
  inline void set_has_get_coin_count();
  inline void clear_has_get_coin_count();
  inline void set_has_new_rank();
  inline void clear_has_new_rank();
  inline void set_has_new_history_rank();
  inline void clear_has_new_history_rank();
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_target_rank();
  inline void clear_has_target_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  bool is_win_;
  ::google::protobuf::uint32 get_coin_count_;
  ::google::protobuf::uint32 new_rank_;
  ::google::protobuf::uint64 target_id_;
  ::google::protobuf::uint32 new_history_rank_;
  ::google::protobuf::uint32 target_rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_PvP_2eproto();
  friend void protobuf_AssignDesc_PvP_2eproto();
  friend void protobuf_ShutdownFile_PvP_2eproto();

  void InitAsDefaultInstance();
  static PvPArenaFinghtInfoRet* default_instance_;
};
// -------------------------------------------------------------------

class PvPArenaFightRecordInfo : public ::google::protobuf::Message {
 public:
  PvPArenaFightRecordInfo();
  virtual ~PvPArenaFightRecordInfo();

  PvPArenaFightRecordInfo(const PvPArenaFightRecordInfo& from);

  inline PvPArenaFightRecordInfo& operator=(const PvPArenaFightRecordInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvPArenaFightRecordInfo& default_instance();

  void Swap(PvPArenaFightRecordInfo* other);

  // implements Message ----------------------------------------------

  PvPArenaFightRecordInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvPArenaFightRecordInfo& from);
  void MergeFrom(const PvPArenaFightRecordInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint64 palyer_id = 2;
  inline bool has_palyer_id() const;
  inline void clear_palyer_id();
  static const int kPalyerIdFieldNumber = 2;
  inline ::google::protobuf::uint64 palyer_id() const;
  inline void set_palyer_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.PvPArenaFightRecordInfo)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_palyer_id();
  inline void clear_has_palyer_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 palyer_id_;
  ::google::protobuf::uint32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PvP_2eproto();
  friend void protobuf_AssignDesc_PvP_2eproto();
  friend void protobuf_ShutdownFile_PvP_2eproto();

  void InitAsDefaultInstance();
  static PvPArenaFightRecordInfo* default_instance_;
};
// -------------------------------------------------------------------

class PvPArenaFightRecordInfoRet : public ::google::protobuf::Message {
 public:
  PvPArenaFightRecordInfoRet();
  virtual ~PvPArenaFightRecordInfoRet();

  PvPArenaFightRecordInfoRet(const PvPArenaFightRecordInfoRet& from);

  inline PvPArenaFightRecordInfoRet& operator=(const PvPArenaFightRecordInfoRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvPArenaFightRecordInfoRet& default_instance();

  void Swap(PvPArenaFightRecordInfoRet* other);

  // implements Message ----------------------------------------------

  PvPArenaFightRecordInfoRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvPArenaFightRecordInfoRet& from);
  void MergeFrom(const PvPArenaFightRecordInfoRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.ArenaResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::pb::ArenaResult result() const;
  inline void set_result(::pb::ArenaResult value);

  // repeated string records = 2;
  inline int records_size() const;
  inline void clear_records();
  static const int kRecordsFieldNumber = 2;
  inline const ::std::string& records(int index) const;
  inline ::std::string* mutable_records(int index);
  inline void set_records(int index, const ::std::string& value);
  inline void set_records(int index, const char* value);
  inline void set_records(int index, const char* value, size_t size);
  inline ::std::string* add_records();
  inline void add_records(const ::std::string& value);
  inline void add_records(const char* value);
  inline void add_records(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& records() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_records();

  // @@protoc_insertion_point(class_scope:pb.PvPArenaFightRecordInfoRet)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> records_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PvP_2eproto();
  friend void protobuf_AssignDesc_PvP_2eproto();
  friend void protobuf_ShutdownFile_PvP_2eproto();

  void InitAsDefaultInstance();
  static PvPArenaFightRecordInfoRet* default_instance_;
};
// -------------------------------------------------------------------

class SG2D_PvPCreatePlayer : public ::google::protobuf::Message {
 public:
  SG2D_PvPCreatePlayer();
  virtual ~SG2D_PvPCreatePlayer();

  SG2D_PvPCreatePlayer(const SG2D_PvPCreatePlayer& from);

  inline SG2D_PvPCreatePlayer& operator=(const SG2D_PvPCreatePlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2D_PvPCreatePlayer& default_instance();

  void Swap(SG2D_PvPCreatePlayer* other);

  // implements Message ----------------------------------------------

  SG2D_PvPCreatePlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2D_PvPCreatePlayer& from);
  void MergeFrom(const SG2D_PvPCreatePlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 craete_id = 1;
  inline bool has_craete_id() const;
  inline void clear_craete_id();
  static const int kCraeteIdFieldNumber = 1;
  inline ::google::protobuf::uint64 craete_id() const;
  inline void set_craete_id(::google::protobuf::uint64 value);

  // optional uint32 rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional .pb.SG2D_CreatePlayer create_info = 3;
  inline bool has_create_info() const;
  inline void clear_create_info();
  static const int kCreateInfoFieldNumber = 3;
  inline const ::pb::SG2D_CreatePlayer& create_info() const;
  inline ::pb::SG2D_CreatePlayer* mutable_create_info();
  inline ::pb::SG2D_CreatePlayer* release_create_info();
  inline void set_allocated_create_info(::pb::SG2D_CreatePlayer* create_info);

  // @@protoc_insertion_point(class_scope:pb.SG2D_PvPCreatePlayer)
 private:
  inline void set_has_craete_id();
  inline void clear_has_craete_id();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_create_info();
  inline void clear_has_create_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 craete_id_;
  ::pb::SG2D_CreatePlayer* create_info_;
  ::google::protobuf::uint32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PvP_2eproto();
  friend void protobuf_AssignDesc_PvP_2eproto();
  friend void protobuf_ShutdownFile_PvP_2eproto();

  void InitAsDefaultInstance();
  static SG2D_PvPCreatePlayer* default_instance_;
};
// -------------------------------------------------------------------

class SG2D_PvPCreatePlayerRet : public ::google::protobuf::Message {
 public:
  SG2D_PvPCreatePlayerRet();
  virtual ~SG2D_PvPCreatePlayerRet();

  SG2D_PvPCreatePlayerRet(const SG2D_PvPCreatePlayerRet& from);

  inline SG2D_PvPCreatePlayerRet& operator=(const SG2D_PvPCreatePlayerRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2D_PvPCreatePlayerRet& default_instance();

  void Swap(SG2D_PvPCreatePlayerRet* other);

  // implements Message ----------------------------------------------

  SG2D_PvPCreatePlayerRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2D_PvPCreatePlayerRet& from);
  void MergeFrom(const SG2D_PvPCreatePlayerRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // optional uint64 create_id = 2;
  inline bool has_create_id() const;
  inline void clear_create_id();
  static const int kCreateIdFieldNumber = 2;
  inline ::google::protobuf::uint64 create_id() const;
  inline void set_create_id(::google::protobuf::uint64 value);

  // optional uint64 player_id = 3;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 3;
  inline ::google::protobuf::uint64 player_id() const;
  inline void set_player_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.SG2D_PvPCreatePlayerRet)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_create_id();
  inline void clear_has_create_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 create_id_;
  ::google::protobuf::uint64 player_id_;
  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PvP_2eproto();
  friend void protobuf_AssignDesc_PvP_2eproto();
  friend void protobuf_ShutdownFile_PvP_2eproto();

  void InitAsDefaultInstance();
  static SG2D_PvPCreatePlayerRet* default_instance_;
};
// -------------------------------------------------------------------

class SG2D_PvPGetRank : public ::google::protobuf::Message {
 public:
  SG2D_PvPGetRank();
  virtual ~SG2D_PvPGetRank();

  SG2D_PvPGetRank(const SG2D_PvPGetRank& from);

  inline SG2D_PvPGetRank& operator=(const SG2D_PvPGetRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2D_PvPGetRank& default_instance();

  void Swap(SG2D_PvPGetRank* other);

  // implements Message ----------------------------------------------

  SG2D_PvPGetRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2D_PvPGetRank& from);
  void MergeFrom(const SG2D_PvPGetRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 beg_rank = 1;
  inline bool has_beg_rank() const;
  inline void clear_beg_rank();
  static const int kBegRankFieldNumber = 1;
  inline ::google::protobuf::uint32 beg_rank() const;
  inline void set_beg_rank(::google::protobuf::uint32 value);

  // optional uint32 end_rank = 2;
  inline bool has_end_rank() const;
  inline void clear_end_rank();
  static const int kEndRankFieldNumber = 2;
  inline ::google::protobuf::uint32 end_rank() const;
  inline void set_end_rank(::google::protobuf::uint32 value);

  // optional uint32 mail_id = 3;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 3;
  inline ::google::protobuf::uint32 mail_id() const;
  inline void set_mail_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.SG2D_PvPGetRank)
 private:
  inline void set_has_beg_rank();
  inline void clear_has_beg_rank();
  inline void set_has_end_rank();
  inline void clear_has_end_rank();
  inline void set_has_mail_id();
  inline void clear_has_mail_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 beg_rank_;
  ::google::protobuf::uint32 end_rank_;
  ::google::protobuf::uint32 mail_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PvP_2eproto();
  friend void protobuf_AssignDesc_PvP_2eproto();
  friend void protobuf_ShutdownFile_PvP_2eproto();

  void InitAsDefaultInstance();
  static SG2D_PvPGetRank* default_instance_;
};
// -------------------------------------------------------------------

class SG2D_PvPGetRankList : public ::google::protobuf::Message {
 public:
  SG2D_PvPGetRankList();
  virtual ~SG2D_PvPGetRankList();

  SG2D_PvPGetRankList(const SG2D_PvPGetRankList& from);

  inline SG2D_PvPGetRankList& operator=(const SG2D_PvPGetRankList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2D_PvPGetRankList& default_instance();

  void Swap(SG2D_PvPGetRankList* other);

  // implements Message ----------------------------------------------

  SG2D_PvPGetRankList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2D_PvPGetRankList& from);
  void MergeFrom(const SG2D_PvPGetRankList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.SG2D_PvPGetRank ranks = 1;
  inline int ranks_size() const;
  inline void clear_ranks();
  static const int kRanksFieldNumber = 1;
  inline const ::pb::SG2D_PvPGetRank& ranks(int index) const;
  inline ::pb::SG2D_PvPGetRank* mutable_ranks(int index);
  inline ::pb::SG2D_PvPGetRank* add_ranks();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::SG2D_PvPGetRank >&
      ranks() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::SG2D_PvPGetRank >*
      mutable_ranks();

  // @@protoc_insertion_point(class_scope:pb.SG2D_PvPGetRankList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::SG2D_PvPGetRank > ranks_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PvP_2eproto();
  friend void protobuf_AssignDesc_PvP_2eproto();
  friend void protobuf_ShutdownFile_PvP_2eproto();

  void InitAsDefaultInstance();
  static SG2D_PvPGetRankList* default_instance_;
};
// -------------------------------------------------------------------

class SG2D_PvPGetRankRet : public ::google::protobuf::Message {
 public:
  SG2D_PvPGetRankRet();
  virtual ~SG2D_PvPGetRankRet();

  SG2D_PvPGetRankRet(const SG2D_PvPGetRankRet& from);

  inline SG2D_PvPGetRankRet& operator=(const SG2D_PvPGetRankRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2D_PvPGetRankRet& default_instance();

  void Swap(SG2D_PvPGetRankRet* other);

  // implements Message ----------------------------------------------

  SG2D_PvPGetRankRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2D_PvPGetRankRet& from);
  void MergeFrom(const SG2D_PvPGetRankRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 mail_id = 1;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 1;
  inline ::google::protobuf::uint32 mail_id() const;
  inline void set_mail_id(::google::protobuf::uint32 value);

  // repeated uint64 player_ids = 2;
  inline int player_ids_size() const;
  inline void clear_player_ids();
  static const int kPlayerIdsFieldNumber = 2;
  inline ::google::protobuf::uint64 player_ids(int index) const;
  inline void set_player_ids(int index, ::google::protobuf::uint64 value);
  inline void add_player_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      player_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_player_ids();

  // @@protoc_insertion_point(class_scope:pb.SG2D_PvPGetRankRet)
 private:
  inline void set_has_mail_id();
  inline void clear_has_mail_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > player_ids_;
  ::google::protobuf::uint32 mail_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PvP_2eproto();
  friend void protobuf_AssignDesc_PvP_2eproto();
  friend void protobuf_ShutdownFile_PvP_2eproto();

  void InitAsDefaultInstance();
  static SG2D_PvPGetRankRet* default_instance_;
};
// -------------------------------------------------------------------

class SG2D_PvPGetRankListRet : public ::google::protobuf::Message {
 public:
  SG2D_PvPGetRankListRet();
  virtual ~SG2D_PvPGetRankListRet();

  SG2D_PvPGetRankListRet(const SG2D_PvPGetRankListRet& from);

  inline SG2D_PvPGetRankListRet& operator=(const SG2D_PvPGetRankListRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SG2D_PvPGetRankListRet& default_instance();

  void Swap(SG2D_PvPGetRankListRet* other);

  // implements Message ----------------------------------------------

  SG2D_PvPGetRankListRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SG2D_PvPGetRankListRet& from);
  void MergeFrom(const SG2D_PvPGetRankListRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.SG2D_PvPGetRankRet ranks = 1;
  inline int ranks_size() const;
  inline void clear_ranks();
  static const int kRanksFieldNumber = 1;
  inline const ::pb::SG2D_PvPGetRankRet& ranks(int index) const;
  inline ::pb::SG2D_PvPGetRankRet* mutable_ranks(int index);
  inline ::pb::SG2D_PvPGetRankRet* add_ranks();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::SG2D_PvPGetRankRet >&
      ranks() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::SG2D_PvPGetRankRet >*
      mutable_ranks();

  // @@protoc_insertion_point(class_scope:pb.SG2D_PvPGetRankListRet)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::SG2D_PvPGetRankRet > ranks_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PvP_2eproto();
  friend void protobuf_AssignDesc_PvP_2eproto();
  friend void protobuf_ShutdownFile_PvP_2eproto();

  void InitAsDefaultInstance();
  static SG2D_PvPGetRankListRet* default_instance_;
};
// -------------------------------------------------------------------

class PvpMarkFight : public ::google::protobuf::Message {
 public:
  PvpMarkFight();
  virtual ~PvpMarkFight();

  PvpMarkFight(const PvpMarkFight& from);

  inline PvpMarkFight& operator=(const PvpMarkFight& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpMarkFight& default_instance();

  void Swap(PvpMarkFight* other);

  // implements Message ----------------------------------------------

  PvpMarkFight* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpMarkFight& from);
  void MergeFrom(const PvpMarkFight& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint64 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::uint64 player_id() const;
  inline void set_player_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.PvpMarkFight)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_player_id();
  inline void clear_has_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_id_;
  ::google::protobuf::uint32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PvP_2eproto();
  friend void protobuf_AssignDesc_PvP_2eproto();
  friend void protobuf_ShutdownFile_PvP_2eproto();

  void InitAsDefaultInstance();
  static PvpMarkFight* default_instance_;
};
// -------------------------------------------------------------------

class PvpMarkFightRet : public ::google::protobuf::Message {
 public:
  PvpMarkFightRet();
  virtual ~PvpMarkFightRet();

  PvpMarkFightRet(const PvpMarkFightRet& from);

  inline PvpMarkFightRet& operator=(const PvpMarkFightRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpMarkFightRet& default_instance();

  void Swap(PvpMarkFightRet* other);

  // implements Message ----------------------------------------------

  PvpMarkFightRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpMarkFightRet& from);
  void MergeFrom(const PvpMarkFightRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.ArenaResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::pb::ArenaResult result() const;
  inline void set_result(::pb::ArenaResult value);

  // optional .pb.ArenaAttackListPlayerInfo infos = 2;
  inline bool has_infos() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 2;
  inline const ::pb::ArenaAttackListPlayerInfo& infos() const;
  inline ::pb::ArenaAttackListPlayerInfo* mutable_infos();
  inline ::pb::ArenaAttackListPlayerInfo* release_infos();
  inline void set_allocated_infos(::pb::ArenaAttackListPlayerInfo* infos);

  // @@protoc_insertion_point(class_scope:pb.PvpMarkFightRet)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_infos();
  inline void clear_has_infos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::ArenaAttackListPlayerInfo* infos_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PvP_2eproto();
  friend void protobuf_AssignDesc_PvP_2eproto();
  friend void protobuf_ShutdownFile_PvP_2eproto();

  void InitAsDefaultInstance();
  static PvpMarkFightRet* default_instance_;
};
// ===================================================================


// ===================================================================

// PvPEntryArena

// optional uint64 player_id = 1;
inline bool PvPEntryArena::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvPEntryArena::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvPEntryArena::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvPEntryArena::clear_player_id() {
  player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::uint64 PvPEntryArena::player_id() const {
  return player_id_;
}
inline void PvPEntryArena::set_player_id(::google::protobuf::uint64 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional uint64 account_id = 2;
inline bool PvPEntryArena::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvPEntryArena::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvPEntryArena::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvPEntryArena::clear_account_id() {
  account_id_ = GOOGLE_ULONGLONG(0);
  clear_has_account_id();
}
inline ::google::protobuf::uint64 PvPEntryArena::account_id() const {
  return account_id_;
}
inline void PvPEntryArena::set_account_id(::google::protobuf::uint64 value) {
  set_has_account_id();
  account_id_ = value;
}

// -------------------------------------------------------------------

// PvPEntryArenaRet

// optional .pb.ArenaResult result = 1;
inline bool PvPEntryArenaRet::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvPEntryArenaRet::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvPEntryArenaRet::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvPEntryArenaRet::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::pb::ArenaResult PvPEntryArenaRet::result() const {
  return static_cast< ::pb::ArenaResult >(result_);
}
inline void PvPEntryArenaRet::set_result(::pb::ArenaResult value) {
  assert(::pb::ArenaResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 rank = 2;
inline bool PvPEntryArenaRet::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvPEntryArenaRet::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvPEntryArenaRet::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvPEntryArenaRet::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 PvPEntryArenaRet::rank() const {
  return rank_;
}
inline void PvPEntryArenaRet::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// -------------------------------------------------------------------

// PvPGetArenaPlayerInfo

// repeated uint32 rank = 1;
inline int PvPGetArenaPlayerInfo::rank_size() const {
  return rank_.size();
}
inline void PvPGetArenaPlayerInfo::clear_rank() {
  rank_.Clear();
}
inline ::google::protobuf::uint32 PvPGetArenaPlayerInfo::rank(int index) const {
  return rank_.Get(index);
}
inline void PvPGetArenaPlayerInfo::set_rank(int index, ::google::protobuf::uint32 value) {
  rank_.Set(index, value);
}
inline void PvPGetArenaPlayerInfo::add_rank(::google::protobuf::uint32 value) {
  rank_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PvPGetArenaPlayerInfo::rank() const {
  return rank_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PvPGetArenaPlayerInfo::mutable_rank() {
  return &rank_;
}

// -------------------------------------------------------------------

// ArenaAttackListPlayerInfo

// optional uint32 rank = 1;
inline bool ArenaAttackListPlayerInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaAttackListPlayerInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaAttackListPlayerInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaAttackListPlayerInfo::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 ArenaAttackListPlayerInfo::rank() const {
  return rank_;
}
inline void ArenaAttackListPlayerInfo::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// optional .pb.MsgPlayerBaseData player_info = 2;
inline bool ArenaAttackListPlayerInfo::has_player_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArenaAttackListPlayerInfo::set_has_player_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArenaAttackListPlayerInfo::clear_has_player_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArenaAttackListPlayerInfo::clear_player_info() {
  if (player_info_ != NULL) player_info_->::pb::MsgPlayerBaseData::Clear();
  clear_has_player_info();
}
inline const ::pb::MsgPlayerBaseData& ArenaAttackListPlayerInfo::player_info() const {
  return player_info_ != NULL ? *player_info_ : *default_instance_->player_info_;
}
inline ::pb::MsgPlayerBaseData* ArenaAttackListPlayerInfo::mutable_player_info() {
  set_has_player_info();
  if (player_info_ == NULL) player_info_ = new ::pb::MsgPlayerBaseData;
  return player_info_;
}
inline ::pb::MsgPlayerBaseData* ArenaAttackListPlayerInfo::release_player_info() {
  clear_has_player_info();
  ::pb::MsgPlayerBaseData* temp = player_info_;
  player_info_ = NULL;
  return temp;
}
inline void ArenaAttackListPlayerInfo::set_allocated_player_info(::pb::MsgPlayerBaseData* player_info) {
  delete player_info_;
  player_info_ = player_info;
  if (player_info) {
    set_has_player_info();
  } else {
    clear_has_player_info();
  }
}

// -------------------------------------------------------------------

// PvPGetArenaPlayerInfoRet

// optional .pb.ArenaResult result = 1;
inline bool PvPGetArenaPlayerInfoRet::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvPGetArenaPlayerInfoRet::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvPGetArenaPlayerInfoRet::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvPGetArenaPlayerInfoRet::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::pb::ArenaResult PvPGetArenaPlayerInfoRet::result() const {
  return static_cast< ::pb::ArenaResult >(result_);
}
inline void PvPGetArenaPlayerInfoRet::set_result(::pb::ArenaResult value) {
  assert(::pb::ArenaResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// repeated .pb.ArenaAttackListPlayerInfo infos = 2;
inline int PvPGetArenaPlayerInfoRet::infos_size() const {
  return infos_.size();
}
inline void PvPGetArenaPlayerInfoRet::clear_infos() {
  infos_.Clear();
}
inline const ::pb::ArenaAttackListPlayerInfo& PvPGetArenaPlayerInfoRet::infos(int index) const {
  return infos_.Get(index);
}
inline ::pb::ArenaAttackListPlayerInfo* PvPGetArenaPlayerInfoRet::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::pb::ArenaAttackListPlayerInfo* PvPGetArenaPlayerInfoRet::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::ArenaAttackListPlayerInfo >&
PvPGetArenaPlayerInfoRet::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::ArenaAttackListPlayerInfo >*
PvPGetArenaPlayerInfoRet::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// PvPGetRankingList

// optional uint32 beg_rank = 1;
inline bool PvPGetRankingList::has_beg_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvPGetRankingList::set_has_beg_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvPGetRankingList::clear_has_beg_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvPGetRankingList::clear_beg_rank() {
  beg_rank_ = 0u;
  clear_has_beg_rank();
}
inline ::google::protobuf::uint32 PvPGetRankingList::beg_rank() const {
  return beg_rank_;
}
inline void PvPGetRankingList::set_beg_rank(::google::protobuf::uint32 value) {
  set_has_beg_rank();
  beg_rank_ = value;
}

// optional uint32 end_rank = 2;
inline bool PvPGetRankingList::has_end_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvPGetRankingList::set_has_end_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvPGetRankingList::clear_has_end_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvPGetRankingList::clear_end_rank() {
  end_rank_ = 0u;
  clear_has_end_rank();
}
inline ::google::protobuf::uint32 PvPGetRankingList::end_rank() const {
  return end_rank_;
}
inline void PvPGetRankingList::set_end_rank(::google::protobuf::uint32 value) {
  set_has_end_rank();
  end_rank_ = value;
}

// -------------------------------------------------------------------

// RankingInfo

// optional uint32 rank = 1;
inline bool RankingInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankingInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankingInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankingInfo::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 RankingInfo::rank() const {
  return rank_;
}
inline void RankingInfo::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// optional .pb.MsgPlayerBaseData info = 2;
inline bool RankingInfo::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankingInfo::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankingInfo::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankingInfo::clear_info() {
  if (info_ != NULL) info_->::pb::MsgPlayerBaseData::Clear();
  clear_has_info();
}
inline const ::pb::MsgPlayerBaseData& RankingInfo::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::pb::MsgPlayerBaseData* RankingInfo::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::pb::MsgPlayerBaseData;
  return info_;
}
inline ::pb::MsgPlayerBaseData* RankingInfo::release_info() {
  clear_has_info();
  ::pb::MsgPlayerBaseData* temp = info_;
  info_ = NULL;
  return temp;
}
inline void RankingInfo::set_allocated_info(::pb::MsgPlayerBaseData* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// PvPGetRankingListRet

// optional .pb.ArenaResult result = 1;
inline bool PvPGetRankingListRet::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvPGetRankingListRet::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvPGetRankingListRet::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvPGetRankingListRet::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::pb::ArenaResult PvPGetRankingListRet::result() const {
  return static_cast< ::pb::ArenaResult >(result_);
}
inline void PvPGetRankingListRet::set_result(::pb::ArenaResult value) {
  assert(::pb::ArenaResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// repeated .pb.RankingInfo infos = 2;
inline int PvPGetRankingListRet::infos_size() const {
  return infos_.size();
}
inline void PvPGetRankingListRet::clear_infos() {
  infos_.Clear();
}
inline const ::pb::RankingInfo& PvPGetRankingListRet::infos(int index) const {
  return infos_.Get(index);
}
inline ::pb::RankingInfo* PvPGetRankingListRet::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::pb::RankingInfo* PvPGetRankingListRet::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::RankingInfo >&
PvPGetRankingListRet::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::RankingInfo >*
PvPGetRankingListRet::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// PvPArenaFinghtInfo

// optional bool is_win = 1;
inline bool PvPArenaFinghtInfo::has_is_win() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvPArenaFinghtInfo::set_has_is_win() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvPArenaFinghtInfo::clear_has_is_win() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvPArenaFinghtInfo::clear_is_win() {
  is_win_ = false;
  clear_has_is_win();
}
inline bool PvPArenaFinghtInfo::is_win() const {
  return is_win_;
}
inline void PvPArenaFinghtInfo::set_is_win(bool value) {
  set_has_is_win();
  is_win_ = value;
}

// optional uint64 target_id = 2;
inline bool PvPArenaFinghtInfo::has_target_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvPArenaFinghtInfo::set_has_target_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvPArenaFinghtInfo::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvPArenaFinghtInfo::clear_target_id() {
  target_id_ = GOOGLE_ULONGLONG(0);
  clear_has_target_id();
}
inline ::google::protobuf::uint64 PvPArenaFinghtInfo::target_id() const {
  return target_id_;
}
inline void PvPArenaFinghtInfo::set_target_id(::google::protobuf::uint64 value) {
  set_has_target_id();
  target_id_ = value;
}

// optional uint32 target_rank = 3;
inline bool PvPArenaFinghtInfo::has_target_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvPArenaFinghtInfo::set_has_target_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvPArenaFinghtInfo::clear_has_target_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvPArenaFinghtInfo::clear_target_rank() {
  target_rank_ = 0u;
  clear_has_target_rank();
}
inline ::google::protobuf::uint32 PvPArenaFinghtInfo::target_rank() const {
  return target_rank_;
}
inline void PvPArenaFinghtInfo::set_target_rank(::google::protobuf::uint32 value) {
  set_has_target_rank();
  target_rank_ = value;
}

// optional uint64 time = 4;
inline bool PvPArenaFinghtInfo::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PvPArenaFinghtInfo::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PvPArenaFinghtInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PvPArenaFinghtInfo::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 PvPArenaFinghtInfo::time() const {
  return time_;
}
inline void PvPArenaFinghtInfo::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// optional uint32 self_level = 5;
inline bool PvPArenaFinghtInfo::has_self_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PvPArenaFinghtInfo::set_has_self_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PvPArenaFinghtInfo::clear_has_self_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PvPArenaFinghtInfo::clear_self_level() {
  self_level_ = 0u;
  clear_has_self_level();
}
inline ::google::protobuf::uint32 PvPArenaFinghtInfo::self_level() const {
  return self_level_;
}
inline void PvPArenaFinghtInfo::set_self_level(::google::protobuf::uint32 value) {
  set_has_self_level();
  self_level_ = value;
}

// optional string self_name = 6;
inline bool PvPArenaFinghtInfo::has_self_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PvPArenaFinghtInfo::set_has_self_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PvPArenaFinghtInfo::clear_has_self_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PvPArenaFinghtInfo::clear_self_name() {
  if (self_name_ != &::google::protobuf::internal::kEmptyString) {
    self_name_->clear();
  }
  clear_has_self_name();
}
inline const ::std::string& PvPArenaFinghtInfo::self_name() const {
  return *self_name_;
}
inline void PvPArenaFinghtInfo::set_self_name(const ::std::string& value) {
  set_has_self_name();
  if (self_name_ == &::google::protobuf::internal::kEmptyString) {
    self_name_ = new ::std::string;
  }
  self_name_->assign(value);
}
inline void PvPArenaFinghtInfo::set_self_name(const char* value) {
  set_has_self_name();
  if (self_name_ == &::google::protobuf::internal::kEmptyString) {
    self_name_ = new ::std::string;
  }
  self_name_->assign(value);
}
inline void PvPArenaFinghtInfo::set_self_name(const char* value, size_t size) {
  set_has_self_name();
  if (self_name_ == &::google::protobuf::internal::kEmptyString) {
    self_name_ = new ::std::string;
  }
  self_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PvPArenaFinghtInfo::mutable_self_name() {
  set_has_self_name();
  if (self_name_ == &::google::protobuf::internal::kEmptyString) {
    self_name_ = new ::std::string;
  }
  return self_name_;
}
inline ::std::string* PvPArenaFinghtInfo::release_self_name() {
  clear_has_self_name();
  if (self_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = self_name_;
    self_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PvPArenaFinghtInfo::set_allocated_self_name(::std::string* self_name) {
  if (self_name_ != &::google::protobuf::internal::kEmptyString) {
    delete self_name_;
  }
  if (self_name) {
    set_has_self_name();
    self_name_ = self_name;
  } else {
    clear_has_self_name();
    self_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 self_id = 7;
inline bool PvPArenaFinghtInfo::has_self_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PvPArenaFinghtInfo::set_has_self_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PvPArenaFinghtInfo::clear_has_self_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PvPArenaFinghtInfo::clear_self_id() {
  self_id_ = GOOGLE_ULONGLONG(0);
  clear_has_self_id();
}
inline ::google::protobuf::uint64 PvPArenaFinghtInfo::self_id() const {
  return self_id_;
}
inline void PvPArenaFinghtInfo::set_self_id(::google::protobuf::uint64 value) {
  set_has_self_id();
  self_id_ = value;
}

// optional uint32 self_rank = 8;
inline bool PvPArenaFinghtInfo::has_self_rank() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PvPArenaFinghtInfo::set_has_self_rank() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PvPArenaFinghtInfo::clear_has_self_rank() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PvPArenaFinghtInfo::clear_self_rank() {
  self_rank_ = 0u;
  clear_has_self_rank();
}
inline ::google::protobuf::uint32 PvPArenaFinghtInfo::self_rank() const {
  return self_rank_;
}
inline void PvPArenaFinghtInfo::set_self_rank(::google::protobuf::uint32 value) {
  set_has_self_rank();
  self_rank_ = value;
}

// optional uint32 self_fight_value = 9;
inline bool PvPArenaFinghtInfo::has_self_fight_value() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PvPArenaFinghtInfo::set_has_self_fight_value() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PvPArenaFinghtInfo::clear_has_self_fight_value() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PvPArenaFinghtInfo::clear_self_fight_value() {
  self_fight_value_ = 0u;
  clear_has_self_fight_value();
}
inline ::google::protobuf::uint32 PvPArenaFinghtInfo::self_fight_value() const {
  return self_fight_value_;
}
inline void PvPArenaFinghtInfo::set_self_fight_value(::google::protobuf::uint32 value) {
  set_has_self_fight_value();
  self_fight_value_ = value;
}

// optional uint32 self_char_proto_id = 10;
inline bool PvPArenaFinghtInfo::has_self_char_proto_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PvPArenaFinghtInfo::set_has_self_char_proto_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PvPArenaFinghtInfo::clear_has_self_char_proto_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PvPArenaFinghtInfo::clear_self_char_proto_id() {
  self_char_proto_id_ = 0u;
  clear_has_self_char_proto_id();
}
inline ::google::protobuf::uint32 PvPArenaFinghtInfo::self_char_proto_id() const {
  return self_char_proto_id_;
}
inline void PvPArenaFinghtInfo::set_self_char_proto_id(::google::protobuf::uint32 value) {
  set_has_self_char_proto_id();
  self_char_proto_id_ = value;
}

// optional uint32 self_vip_level = 11;
inline bool PvPArenaFinghtInfo::has_self_vip_level() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PvPArenaFinghtInfo::set_has_self_vip_level() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PvPArenaFinghtInfo::clear_has_self_vip_level() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PvPArenaFinghtInfo::clear_self_vip_level() {
  self_vip_level_ = 0u;
  clear_has_self_vip_level();
}
inline ::google::protobuf::uint32 PvPArenaFinghtInfo::self_vip_level() const {
  return self_vip_level_;
}
inline void PvPArenaFinghtInfo::set_self_vip_level(::google::protobuf::uint32 value) {
  set_has_self_vip_level();
  self_vip_level_ = value;
}

// -------------------------------------------------------------------

// PvPArenaFinghtInfoRet

// optional .pb.ArenaResult result = 1;
inline bool PvPArenaFinghtInfoRet::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvPArenaFinghtInfoRet::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvPArenaFinghtInfoRet::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvPArenaFinghtInfoRet::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::pb::ArenaResult PvPArenaFinghtInfoRet::result() const {
  return static_cast< ::pb::ArenaResult >(result_);
}
inline void PvPArenaFinghtInfoRet::set_result(::pb::ArenaResult value) {
  assert(::pb::ArenaResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional bool is_win = 2;
inline bool PvPArenaFinghtInfoRet::has_is_win() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvPArenaFinghtInfoRet::set_has_is_win() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvPArenaFinghtInfoRet::clear_has_is_win() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvPArenaFinghtInfoRet::clear_is_win() {
  is_win_ = false;
  clear_has_is_win();
}
inline bool PvPArenaFinghtInfoRet::is_win() const {
  return is_win_;
}
inline void PvPArenaFinghtInfoRet::set_is_win(bool value) {
  set_has_is_win();
  is_win_ = value;
}

// optional uint32 get_coin_count = 3;
inline bool PvPArenaFinghtInfoRet::has_get_coin_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvPArenaFinghtInfoRet::set_has_get_coin_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvPArenaFinghtInfoRet::clear_has_get_coin_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvPArenaFinghtInfoRet::clear_get_coin_count() {
  get_coin_count_ = 0u;
  clear_has_get_coin_count();
}
inline ::google::protobuf::uint32 PvPArenaFinghtInfoRet::get_coin_count() const {
  return get_coin_count_;
}
inline void PvPArenaFinghtInfoRet::set_get_coin_count(::google::protobuf::uint32 value) {
  set_has_get_coin_count();
  get_coin_count_ = value;
}

// optional uint32 new_rank = 4;
inline bool PvPArenaFinghtInfoRet::has_new_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PvPArenaFinghtInfoRet::set_has_new_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PvPArenaFinghtInfoRet::clear_has_new_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PvPArenaFinghtInfoRet::clear_new_rank() {
  new_rank_ = 0u;
  clear_has_new_rank();
}
inline ::google::protobuf::uint32 PvPArenaFinghtInfoRet::new_rank() const {
  return new_rank_;
}
inline void PvPArenaFinghtInfoRet::set_new_rank(::google::protobuf::uint32 value) {
  set_has_new_rank();
  new_rank_ = value;
}

// optional uint32 new_history_rank = 5;
inline bool PvPArenaFinghtInfoRet::has_new_history_rank() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PvPArenaFinghtInfoRet::set_has_new_history_rank() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PvPArenaFinghtInfoRet::clear_has_new_history_rank() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PvPArenaFinghtInfoRet::clear_new_history_rank() {
  new_history_rank_ = 0u;
  clear_has_new_history_rank();
}
inline ::google::protobuf::uint32 PvPArenaFinghtInfoRet::new_history_rank() const {
  return new_history_rank_;
}
inline void PvPArenaFinghtInfoRet::set_new_history_rank(::google::protobuf::uint32 value) {
  set_has_new_history_rank();
  new_history_rank_ = value;
}

// optional uint64 target_id = 6;
inline bool PvPArenaFinghtInfoRet::has_target_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PvPArenaFinghtInfoRet::set_has_target_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PvPArenaFinghtInfoRet::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PvPArenaFinghtInfoRet::clear_target_id() {
  target_id_ = GOOGLE_ULONGLONG(0);
  clear_has_target_id();
}
inline ::google::protobuf::uint64 PvPArenaFinghtInfoRet::target_id() const {
  return target_id_;
}
inline void PvPArenaFinghtInfoRet::set_target_id(::google::protobuf::uint64 value) {
  set_has_target_id();
  target_id_ = value;
}

// optional uint32 target_rank = 7;
inline bool PvPArenaFinghtInfoRet::has_target_rank() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PvPArenaFinghtInfoRet::set_has_target_rank() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PvPArenaFinghtInfoRet::clear_has_target_rank() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PvPArenaFinghtInfoRet::clear_target_rank() {
  target_rank_ = 0u;
  clear_has_target_rank();
}
inline ::google::protobuf::uint32 PvPArenaFinghtInfoRet::target_rank() const {
  return target_rank_;
}
inline void PvPArenaFinghtInfoRet::set_target_rank(::google::protobuf::uint32 value) {
  set_has_target_rank();
  target_rank_ = value;
}

// -------------------------------------------------------------------

// PvPArenaFightRecordInfo

// optional uint32 rank = 1;
inline bool PvPArenaFightRecordInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvPArenaFightRecordInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvPArenaFightRecordInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvPArenaFightRecordInfo::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 PvPArenaFightRecordInfo::rank() const {
  return rank_;
}
inline void PvPArenaFightRecordInfo::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint64 palyer_id = 2;
inline bool PvPArenaFightRecordInfo::has_palyer_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvPArenaFightRecordInfo::set_has_palyer_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvPArenaFightRecordInfo::clear_has_palyer_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvPArenaFightRecordInfo::clear_palyer_id() {
  palyer_id_ = GOOGLE_ULONGLONG(0);
  clear_has_palyer_id();
}
inline ::google::protobuf::uint64 PvPArenaFightRecordInfo::palyer_id() const {
  return palyer_id_;
}
inline void PvPArenaFightRecordInfo::set_palyer_id(::google::protobuf::uint64 value) {
  set_has_palyer_id();
  palyer_id_ = value;
}

// -------------------------------------------------------------------

// PvPArenaFightRecordInfoRet

// optional .pb.ArenaResult result = 1;
inline bool PvPArenaFightRecordInfoRet::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvPArenaFightRecordInfoRet::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvPArenaFightRecordInfoRet::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvPArenaFightRecordInfoRet::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::pb::ArenaResult PvPArenaFightRecordInfoRet::result() const {
  return static_cast< ::pb::ArenaResult >(result_);
}
inline void PvPArenaFightRecordInfoRet::set_result(::pb::ArenaResult value) {
  assert(::pb::ArenaResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// repeated string records = 2;
inline int PvPArenaFightRecordInfoRet::records_size() const {
  return records_.size();
}
inline void PvPArenaFightRecordInfoRet::clear_records() {
  records_.Clear();
}
inline const ::std::string& PvPArenaFightRecordInfoRet::records(int index) const {
  return records_.Get(index);
}
inline ::std::string* PvPArenaFightRecordInfoRet::mutable_records(int index) {
  return records_.Mutable(index);
}
inline void PvPArenaFightRecordInfoRet::set_records(int index, const ::std::string& value) {
  records_.Mutable(index)->assign(value);
}
inline void PvPArenaFightRecordInfoRet::set_records(int index, const char* value) {
  records_.Mutable(index)->assign(value);
}
inline void PvPArenaFightRecordInfoRet::set_records(int index, const char* value, size_t size) {
  records_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PvPArenaFightRecordInfoRet::add_records() {
  return records_.Add();
}
inline void PvPArenaFightRecordInfoRet::add_records(const ::std::string& value) {
  records_.Add()->assign(value);
}
inline void PvPArenaFightRecordInfoRet::add_records(const char* value) {
  records_.Add()->assign(value);
}
inline void PvPArenaFightRecordInfoRet::add_records(const char* value, size_t size) {
  records_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PvPArenaFightRecordInfoRet::records() const {
  return records_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PvPArenaFightRecordInfoRet::mutable_records() {
  return &records_;
}

// -------------------------------------------------------------------

// SG2D_PvPCreatePlayer

// optional uint64 craete_id = 1;
inline bool SG2D_PvPCreatePlayer::has_craete_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2D_PvPCreatePlayer::set_has_craete_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2D_PvPCreatePlayer::clear_has_craete_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2D_PvPCreatePlayer::clear_craete_id() {
  craete_id_ = GOOGLE_ULONGLONG(0);
  clear_has_craete_id();
}
inline ::google::protobuf::uint64 SG2D_PvPCreatePlayer::craete_id() const {
  return craete_id_;
}
inline void SG2D_PvPCreatePlayer::set_craete_id(::google::protobuf::uint64 value) {
  set_has_craete_id();
  craete_id_ = value;
}

// optional uint32 rank = 2;
inline bool SG2D_PvPCreatePlayer::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG2D_PvPCreatePlayer::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG2D_PvPCreatePlayer::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG2D_PvPCreatePlayer::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 SG2D_PvPCreatePlayer::rank() const {
  return rank_;
}
inline void SG2D_PvPCreatePlayer::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// optional .pb.SG2D_CreatePlayer create_info = 3;
inline bool SG2D_PvPCreatePlayer::has_create_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SG2D_PvPCreatePlayer::set_has_create_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SG2D_PvPCreatePlayer::clear_has_create_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SG2D_PvPCreatePlayer::clear_create_info() {
  if (create_info_ != NULL) create_info_->::pb::SG2D_CreatePlayer::Clear();
  clear_has_create_info();
}
inline const ::pb::SG2D_CreatePlayer& SG2D_PvPCreatePlayer::create_info() const {
  return create_info_ != NULL ? *create_info_ : *default_instance_->create_info_;
}
inline ::pb::SG2D_CreatePlayer* SG2D_PvPCreatePlayer::mutable_create_info() {
  set_has_create_info();
  if (create_info_ == NULL) create_info_ = new ::pb::SG2D_CreatePlayer;
  return create_info_;
}
inline ::pb::SG2D_CreatePlayer* SG2D_PvPCreatePlayer::release_create_info() {
  clear_has_create_info();
  ::pb::SG2D_CreatePlayer* temp = create_info_;
  create_info_ = NULL;
  return temp;
}
inline void SG2D_PvPCreatePlayer::set_allocated_create_info(::pb::SG2D_CreatePlayer* create_info) {
  delete create_info_;
  create_info_ = create_info;
  if (create_info) {
    set_has_create_info();
  } else {
    clear_has_create_info();
  }
}

// -------------------------------------------------------------------

// SG2D_PvPCreatePlayerRet

// optional bool result = 1;
inline bool SG2D_PvPCreatePlayerRet::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2D_PvPCreatePlayerRet::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2D_PvPCreatePlayerRet::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2D_PvPCreatePlayerRet::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool SG2D_PvPCreatePlayerRet::result() const {
  return result_;
}
inline void SG2D_PvPCreatePlayerRet::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// optional uint64 create_id = 2;
inline bool SG2D_PvPCreatePlayerRet::has_create_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG2D_PvPCreatePlayerRet::set_has_create_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG2D_PvPCreatePlayerRet::clear_has_create_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG2D_PvPCreatePlayerRet::clear_create_id() {
  create_id_ = GOOGLE_ULONGLONG(0);
  clear_has_create_id();
}
inline ::google::protobuf::uint64 SG2D_PvPCreatePlayerRet::create_id() const {
  return create_id_;
}
inline void SG2D_PvPCreatePlayerRet::set_create_id(::google::protobuf::uint64 value) {
  set_has_create_id();
  create_id_ = value;
}

// optional uint64 player_id = 3;
inline bool SG2D_PvPCreatePlayerRet::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SG2D_PvPCreatePlayerRet::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SG2D_PvPCreatePlayerRet::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SG2D_PvPCreatePlayerRet::clear_player_id() {
  player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::uint64 SG2D_PvPCreatePlayerRet::player_id() const {
  return player_id_;
}
inline void SG2D_PvPCreatePlayerRet::set_player_id(::google::protobuf::uint64 value) {
  set_has_player_id();
  player_id_ = value;
}

// -------------------------------------------------------------------

// SG2D_PvPGetRank

// optional uint32 beg_rank = 1;
inline bool SG2D_PvPGetRank::has_beg_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2D_PvPGetRank::set_has_beg_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2D_PvPGetRank::clear_has_beg_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2D_PvPGetRank::clear_beg_rank() {
  beg_rank_ = 0u;
  clear_has_beg_rank();
}
inline ::google::protobuf::uint32 SG2D_PvPGetRank::beg_rank() const {
  return beg_rank_;
}
inline void SG2D_PvPGetRank::set_beg_rank(::google::protobuf::uint32 value) {
  set_has_beg_rank();
  beg_rank_ = value;
}

// optional uint32 end_rank = 2;
inline bool SG2D_PvPGetRank::has_end_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SG2D_PvPGetRank::set_has_end_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SG2D_PvPGetRank::clear_has_end_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SG2D_PvPGetRank::clear_end_rank() {
  end_rank_ = 0u;
  clear_has_end_rank();
}
inline ::google::protobuf::uint32 SG2D_PvPGetRank::end_rank() const {
  return end_rank_;
}
inline void SG2D_PvPGetRank::set_end_rank(::google::protobuf::uint32 value) {
  set_has_end_rank();
  end_rank_ = value;
}

// optional uint32 mail_id = 3;
inline bool SG2D_PvPGetRank::has_mail_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SG2D_PvPGetRank::set_has_mail_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SG2D_PvPGetRank::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SG2D_PvPGetRank::clear_mail_id() {
  mail_id_ = 0u;
  clear_has_mail_id();
}
inline ::google::protobuf::uint32 SG2D_PvPGetRank::mail_id() const {
  return mail_id_;
}
inline void SG2D_PvPGetRank::set_mail_id(::google::protobuf::uint32 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// -------------------------------------------------------------------

// SG2D_PvPGetRankList

// repeated .pb.SG2D_PvPGetRank ranks = 1;
inline int SG2D_PvPGetRankList::ranks_size() const {
  return ranks_.size();
}
inline void SG2D_PvPGetRankList::clear_ranks() {
  ranks_.Clear();
}
inline const ::pb::SG2D_PvPGetRank& SG2D_PvPGetRankList::ranks(int index) const {
  return ranks_.Get(index);
}
inline ::pb::SG2D_PvPGetRank* SG2D_PvPGetRankList::mutable_ranks(int index) {
  return ranks_.Mutable(index);
}
inline ::pb::SG2D_PvPGetRank* SG2D_PvPGetRankList::add_ranks() {
  return ranks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::SG2D_PvPGetRank >&
SG2D_PvPGetRankList::ranks() const {
  return ranks_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::SG2D_PvPGetRank >*
SG2D_PvPGetRankList::mutable_ranks() {
  return &ranks_;
}

// -------------------------------------------------------------------

// SG2D_PvPGetRankRet

// optional uint32 mail_id = 1;
inline bool SG2D_PvPGetRankRet::has_mail_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SG2D_PvPGetRankRet::set_has_mail_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SG2D_PvPGetRankRet::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SG2D_PvPGetRankRet::clear_mail_id() {
  mail_id_ = 0u;
  clear_has_mail_id();
}
inline ::google::protobuf::uint32 SG2D_PvPGetRankRet::mail_id() const {
  return mail_id_;
}
inline void SG2D_PvPGetRankRet::set_mail_id(::google::protobuf::uint32 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// repeated uint64 player_ids = 2;
inline int SG2D_PvPGetRankRet::player_ids_size() const {
  return player_ids_.size();
}
inline void SG2D_PvPGetRankRet::clear_player_ids() {
  player_ids_.Clear();
}
inline ::google::protobuf::uint64 SG2D_PvPGetRankRet::player_ids(int index) const {
  return player_ids_.Get(index);
}
inline void SG2D_PvPGetRankRet::set_player_ids(int index, ::google::protobuf::uint64 value) {
  player_ids_.Set(index, value);
}
inline void SG2D_PvPGetRankRet::add_player_ids(::google::protobuf::uint64 value) {
  player_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
SG2D_PvPGetRankRet::player_ids() const {
  return player_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
SG2D_PvPGetRankRet::mutable_player_ids() {
  return &player_ids_;
}

// -------------------------------------------------------------------

// SG2D_PvPGetRankListRet

// repeated .pb.SG2D_PvPGetRankRet ranks = 1;
inline int SG2D_PvPGetRankListRet::ranks_size() const {
  return ranks_.size();
}
inline void SG2D_PvPGetRankListRet::clear_ranks() {
  ranks_.Clear();
}
inline const ::pb::SG2D_PvPGetRankRet& SG2D_PvPGetRankListRet::ranks(int index) const {
  return ranks_.Get(index);
}
inline ::pb::SG2D_PvPGetRankRet* SG2D_PvPGetRankListRet::mutable_ranks(int index) {
  return ranks_.Mutable(index);
}
inline ::pb::SG2D_PvPGetRankRet* SG2D_PvPGetRankListRet::add_ranks() {
  return ranks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::SG2D_PvPGetRankRet >&
SG2D_PvPGetRankListRet::ranks() const {
  return ranks_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::SG2D_PvPGetRankRet >*
SG2D_PvPGetRankListRet::mutable_ranks() {
  return &ranks_;
}

// -------------------------------------------------------------------

// PvpMarkFight

// optional uint32 rank = 1;
inline bool PvpMarkFight::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpMarkFight::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpMarkFight::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpMarkFight::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 PvpMarkFight::rank() const {
  return rank_;
}
inline void PvpMarkFight::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint64 player_id = 2;
inline bool PvpMarkFight::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvpMarkFight::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvpMarkFight::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvpMarkFight::clear_player_id() {
  player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::uint64 PvpMarkFight::player_id() const {
  return player_id_;
}
inline void PvpMarkFight::set_player_id(::google::protobuf::uint64 value) {
  set_has_player_id();
  player_id_ = value;
}

// -------------------------------------------------------------------

// PvpMarkFightRet

// optional .pb.ArenaResult result = 1;
inline bool PvpMarkFightRet::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpMarkFightRet::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpMarkFightRet::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpMarkFightRet::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::pb::ArenaResult PvpMarkFightRet::result() const {
  return static_cast< ::pb::ArenaResult >(result_);
}
inline void PvpMarkFightRet::set_result(::pb::ArenaResult value) {
  assert(::pb::ArenaResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional .pb.ArenaAttackListPlayerInfo infos = 2;
inline bool PvpMarkFightRet::has_infos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvpMarkFightRet::set_has_infos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvpMarkFightRet::clear_has_infos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvpMarkFightRet::clear_infos() {
  if (infos_ != NULL) infos_->::pb::ArenaAttackListPlayerInfo::Clear();
  clear_has_infos();
}
inline const ::pb::ArenaAttackListPlayerInfo& PvpMarkFightRet::infos() const {
  return infos_ != NULL ? *infos_ : *default_instance_->infos_;
}
inline ::pb::ArenaAttackListPlayerInfo* PvpMarkFightRet::mutable_infos() {
  set_has_infos();
  if (infos_ == NULL) infos_ = new ::pb::ArenaAttackListPlayerInfo;
  return infos_;
}
inline ::pb::ArenaAttackListPlayerInfo* PvpMarkFightRet::release_infos() {
  clear_has_infos();
  ::pb::ArenaAttackListPlayerInfo* temp = infos_;
  infos_ = NULL;
  return temp;
}
inline void PvpMarkFightRet::set_allocated_infos(::pb::ArenaAttackListPlayerInfo* infos) {
  delete infos_;
  infos_ = infos;
  if (infos) {
    set_has_infos();
  } else {
    clear_has_infos();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ArenaResult>() {
  return ::pb::ArenaResult_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PvP_2eproto__INCLUDED
