// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CrossWar.proto

#ifndef PROTOBUF_CrossWar_2eproto__INCLUDED
#define PROTOBUF_CrossWar_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommomDef.pb.h"
#include "City.pb.h"
#include "Character.pb.h"
#include "Country.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CrossWar_2eproto();
void protobuf_AssignDesc_CrossWar_2eproto();
void protobuf_ShutdownFile_CrossWar_2eproto();

class Devide_Country_Info;
class GS2L_Devide_Country_Infos;
class GS2C_Cross_Update_Country_Durable;
class GS2C_Notice_CrossWar_State;
class GS2R_Update_Player_Value;
class GS2R_Update_Player_Character_Exp;
class Country_Cross_Star_info;
class Country_Stars_Update;
class GS2C_Enter_Cross_War;
class C2GS_Use_Cross_Troops;
class CR2G_Country_Awards;
class UpdateAwardsChange;
class SC2G_Update_Award_Change;
class GS2C_TakeStarAwardRet;
class GS2C_Cross_Donation_Data;
class GS2C_Cross_Donation_Datas;
class GC2S_Donate_Goods;
class GS2C_DONATE_RET;
class GS2C_Cross_Destroy_Task_Info;
class GS2C_Cross_Destroy_Task_Infos;
class GC2S_Take_Destroy_Task_Award;
class GS2C_Take_Destroy_Task_Award_Ret;
class C2CR_Attack_Capital;
class GS2C_Cross_Kill_Task_Info;
class GC2S_Take_Kill_Task_Award;
class GS2C_Take_Kill_Task_Award_Ret;
class GS2C_Cross_Ammo_Info;
class GS2C_Cross_Ammo_Infos;
class GC2S_Buy_Ammo;
class GS2C_Buy_Ammo_Rsp;
class GS2C_Use_Attack_Hummer;
class GS2C_Attack_Result;
class GS2C_Cross_Rank_Info;

enum CROSS_RET {
  Cro_Common_Suc = 0,
  Cro_Common_Err = 1,
  Cro_War_Closed = 2,
  Cro_War_State_Dismatch = 3,
  Cro_War_Donata_Troops_Max = 4,
  Cro_War_Cost_Lack = 5,
  Cro_War_Donata_Shadows_Max = 6,
  Cro_War_Reward_IsTake = 7,
  Cro_war_Player_Not_In_Lst = 8,
  Cro_War_Task_Not_Finished = 9,
  Cro_War_Task_Id_Dismatch = 10,
  Cro_War_Offical_Err = 11,
  Cro_War_UpLimit = 12,
  Cro_War_Destroy = 13,
  Cro_War_No_Hammer = 14,
  Cro_War_Is_Same_Country = 15,
  Cro_War_Hero_Err = 16,
  Cro_War_City_Not_Link = 17,
  Cro_War_Cant_Rush = 18
};
bool CROSS_RET_IsValid(int value);
const CROSS_RET CROSS_RET_MIN = Cro_Common_Suc;
const CROSS_RET CROSS_RET_MAX = Cro_War_Cant_Rush;
const int CROSS_RET_ARRAYSIZE = CROSS_RET_MAX + 1;

const ::google::protobuf::EnumDescriptor* CROSS_RET_descriptor();
inline const ::std::string& CROSS_RET_Name(CROSS_RET value) {
  return ::google::protobuf::internal::NameOfEnum(
    CROSS_RET_descriptor(), value);
}
inline bool CROSS_RET_Parse(
    const ::std::string& name, CROSS_RET* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CROSS_RET>(
    CROSS_RET_descriptor(), name, value);
}
enum Donate_Type {
  Office_Troops = 0,
  Shadow_Troops = 1
};
bool Donate_Type_IsValid(int value);
const Donate_Type Donate_Type_MIN = Office_Troops;
const Donate_Type Donate_Type_MAX = Shadow_Troops;
const int Donate_Type_ARRAYSIZE = Donate_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Donate_Type_descriptor();
inline const ::std::string& Donate_Type_Name(Donate_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Donate_Type_descriptor(), value);
}
inline bool Donate_Type_Parse(
    const ::std::string& name, Donate_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Donate_Type>(
    Donate_Type_descriptor(), name, value);
}
enum ArsenalType {
  Hammer = 1,
  KillTroops = 2,
  Shield = 3
};
bool ArsenalType_IsValid(int value);
const ArsenalType ArsenalType_MIN = Hammer;
const ArsenalType ArsenalType_MAX = Shield;
const int ArsenalType_ARRAYSIZE = ArsenalType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ArsenalType_descriptor();
inline const ::std::string& ArsenalType_Name(ArsenalType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ArsenalType_descriptor(), value);
}
inline bool ArsenalType_Parse(
    const ::std::string& name, ArsenalType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ArsenalType>(
    ArsenalType_descriptor(), name, value);
}
// ===================================================================

class Devide_Country_Info : public ::google::protobuf::Message {
 public:
  Devide_Country_Info();
  virtual ~Devide_Country_Info();

  Devide_Country_Info(const Devide_Country_Info& from);

  inline Devide_Country_Info& operator=(const Devide_Country_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Devide_Country_Info& default_instance();

  void Swap(Devide_Country_Info* other);

  // implements Message ----------------------------------------------

  Devide_Country_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Devide_Country_Info& from);
  void MergeFrom(const Devide_Country_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 orig_country_id = 1;
  inline bool has_orig_country_id() const;
  inline void clear_orig_country_id();
  static const int kOrigCountryIdFieldNumber = 1;
  inline ::google::protobuf::uint32 orig_country_id() const;
  inline void set_orig_country_id(::google::protobuf::uint32 value);

  // optional uint32 devide_country_id = 2;
  inline bool has_devide_country_id() const;
  inline void clear_devide_country_id();
  static const int kDevideCountryIdFieldNumber = 2;
  inline ::google::protobuf::uint32 devide_country_id() const;
  inline void set_devide_country_id(::google::protobuf::uint32 value);

  // optional uint32 unique_index_id = 3;
  inline bool has_unique_index_id() const;
  inline void clear_unique_index_id();
  static const int kUniqueIndexIdFieldNumber = 3;
  inline ::google::protobuf::uint32 unique_index_id() const;
  inline void set_unique_index_id(::google::protobuf::uint32 value);

  // optional uint32 pros_degree = 4;
  inline bool has_pros_degree() const;
  inline void clear_pros_degree();
  static const int kProsDegreeFieldNumber = 4;
  inline ::google::protobuf::uint32 pros_degree() const;
  inline void set_pros_degree(::google::protobuf::uint32 value);

  // optional uint32 country_durable = 5;
  inline bool has_country_durable() const;
  inline void clear_country_durable();
  static const int kCountryDurableFieldNumber = 5;
  inline ::google::protobuf::uint32 country_durable() const;
  inline void set_country_durable(::google::protobuf::uint32 value);

  // optional string server_name = 6;
  inline bool has_server_name() const;
  inline void clear_server_name();
  static const int kServerNameFieldNumber = 6;
  inline const ::std::string& server_name() const;
  inline void set_server_name(const ::std::string& value);
  inline void set_server_name(const char* value);
  inline void set_server_name(const char* value, size_t size);
  inline ::std::string* mutable_server_name();
  inline ::std::string* release_server_name();
  inline void set_allocated_server_name(::std::string* server_name);

  // optional uint32 server_id = 7;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 7;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.Devide_Country_Info)
 private:
  inline void set_has_orig_country_id();
  inline void clear_has_orig_country_id();
  inline void set_has_devide_country_id();
  inline void clear_has_devide_country_id();
  inline void set_has_unique_index_id();
  inline void clear_has_unique_index_id();
  inline void set_has_pros_degree();
  inline void clear_has_pros_degree();
  inline void set_has_country_durable();
  inline void clear_has_country_durable();
  inline void set_has_server_name();
  inline void clear_has_server_name();
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 orig_country_id_;
  ::google::protobuf::uint32 devide_country_id_;
  ::google::protobuf::uint32 unique_index_id_;
  ::google::protobuf::uint32 pros_degree_;
  ::std::string* server_name_;
  ::google::protobuf::uint32 country_durable_;
  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static Devide_Country_Info* default_instance_;
};
// -------------------------------------------------------------------

class GS2L_Devide_Country_Infos : public ::google::protobuf::Message {
 public:
  GS2L_Devide_Country_Infos();
  virtual ~GS2L_Devide_Country_Infos();

  GS2L_Devide_Country_Infos(const GS2L_Devide_Country_Infos& from);

  inline GS2L_Devide_Country_Infos& operator=(const GS2L_Devide_Country_Infos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2L_Devide_Country_Infos& default_instance();

  void Swap(GS2L_Devide_Country_Infos* other);

  // implements Message ----------------------------------------------

  GS2L_Devide_Country_Infos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2L_Devide_Country_Infos& from);
  void MergeFrom(const GS2L_Devide_Country_Infos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Devide_Country_Info countrys = 1;
  inline int countrys_size() const;
  inline void clear_countrys();
  static const int kCountrysFieldNumber = 1;
  inline const ::pb::Devide_Country_Info& countrys(int index) const;
  inline ::pb::Devide_Country_Info* mutable_countrys(int index);
  inline ::pb::Devide_Country_Info* add_countrys();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Devide_Country_Info >&
      countrys() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Devide_Country_Info >*
      mutable_countrys();

  // @@protoc_insertion_point(class_scope:pb.GS2L_Devide_Country_Infos)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::Devide_Country_Info > countrys_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static GS2L_Devide_Country_Infos* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Cross_Update_Country_Durable : public ::google::protobuf::Message {
 public:
  GS2C_Cross_Update_Country_Durable();
  virtual ~GS2C_Cross_Update_Country_Durable();

  GS2C_Cross_Update_Country_Durable(const GS2C_Cross_Update_Country_Durable& from);

  inline GS2C_Cross_Update_Country_Durable& operator=(const GS2C_Cross_Update_Country_Durable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Cross_Update_Country_Durable& default_instance();

  void Swap(GS2C_Cross_Update_Country_Durable* other);

  // implements Message ----------------------------------------------

  GS2C_Cross_Update_Country_Durable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Cross_Update_Country_Durable& from);
  void MergeFrom(const GS2C_Cross_Update_Country_Durable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CrossCountryID = 1;
  inline bool has_crosscountryid() const;
  inline void clear_crosscountryid();
  static const int kCrossCountryIDFieldNumber = 1;
  inline ::google::protobuf::uint32 crosscountryid() const;
  inline void set_crosscountryid(::google::protobuf::uint32 value);

  // optional uint32 CountryDurable = 2;
  inline bool has_countrydurable() const;
  inline void clear_countrydurable();
  static const int kCountryDurableFieldNumber = 2;
  inline ::google::protobuf::uint32 countrydurable() const;
  inline void set_countrydurable(::google::protobuf::uint32 value);

  // optional uint32 AttCountryId = 3;
  inline bool has_attcountryid() const;
  inline void clear_attcountryid();
  static const int kAttCountryIdFieldNumber = 3;
  inline ::google::protobuf::uint32 attcountryid() const;
  inline void set_attcountryid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Cross_Update_Country_Durable)
 private:
  inline void set_has_crosscountryid();
  inline void clear_has_crosscountryid();
  inline void set_has_countrydurable();
  inline void clear_has_countrydurable();
  inline void set_has_attcountryid();
  inline void clear_has_attcountryid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 crosscountryid_;
  ::google::protobuf::uint32 countrydurable_;
  ::google::protobuf::uint32 attcountryid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Cross_Update_Country_Durable* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Notice_CrossWar_State : public ::google::protobuf::Message {
 public:
  GS2C_Notice_CrossWar_State();
  virtual ~GS2C_Notice_CrossWar_State();

  GS2C_Notice_CrossWar_State(const GS2C_Notice_CrossWar_State& from);

  inline GS2C_Notice_CrossWar_State& operator=(const GS2C_Notice_CrossWar_State& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Notice_CrossWar_State& default_instance();

  void Swap(GS2C_Notice_CrossWar_State* other);

  // implements Message ----------------------------------------------

  GS2C_Notice_CrossWar_State* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Notice_CrossWar_State& from);
  void MergeFrom(const GS2C_Notice_CrossWar_State& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.CROSS_STATE CurState = 1;
  inline bool has_curstate() const;
  inline void clear_curstate();
  static const int kCurStateFieldNumber = 1;
  inline ::pb::CROSS_STATE curstate() const;
  inline void set_curstate(::pb::CROSS_STATE value);

  // optional uint64 StateEndTime = 2;
  inline bool has_stateendtime() const;
  inline void clear_stateendtime();
  static const int kStateEndTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 stateendtime() const;
  inline void set_stateendtime(::google::protobuf::uint64 value);

  // optional uint32 CrossCountryID = 3;
  inline bool has_crosscountryid() const;
  inline void clear_crosscountryid();
  static const int kCrossCountryIDFieldNumber = 3;
  inline ::google::protobuf::uint32 crosscountryid() const;
  inline void set_crosscountryid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Notice_CrossWar_State)
 private:
  inline void set_has_curstate();
  inline void clear_has_curstate();
  inline void set_has_stateendtime();
  inline void clear_has_stateendtime();
  inline void set_has_crosscountryid();
  inline void clear_has_crosscountryid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 stateendtime_;
  int curstate_;
  ::google::protobuf::uint32 crosscountryid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Notice_CrossWar_State* default_instance_;
};
// -------------------------------------------------------------------

class GS2R_Update_Player_Value : public ::google::protobuf::Message {
 public:
  GS2R_Update_Player_Value();
  virtual ~GS2R_Update_Player_Value();

  GS2R_Update_Player_Value(const GS2R_Update_Player_Value& from);

  inline GS2R_Update_Player_Value& operator=(const GS2R_Update_Player_Value& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2R_Update_Player_Value& default_instance();

  void Swap(GS2R_Update_Player_Value* other);

  // implements Message ----------------------------------------------

  GS2R_Update_Player_Value* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2R_Update_Player_Value& from);
  void MergeFrom(const GS2R_Update_Player_Value& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional uint32 val = 2;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 2;
  inline ::google::protobuf::uint32 val() const;
  inline void set_val(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2R_Update_Player_Value)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_val();
  inline void clear_has_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static GS2R_Update_Player_Value* default_instance_;
};
// -------------------------------------------------------------------

class GS2R_Update_Player_Character_Exp : public ::google::protobuf::Message {
 public:
  GS2R_Update_Player_Character_Exp();
  virtual ~GS2R_Update_Player_Character_Exp();

  GS2R_Update_Player_Character_Exp(const GS2R_Update_Player_Character_Exp& from);

  inline GS2R_Update_Player_Character_Exp& operator=(const GS2R_Update_Player_Character_Exp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2R_Update_Player_Character_Exp& default_instance();

  void Swap(GS2R_Update_Player_Character_Exp* other);

  // implements Message ----------------------------------------------

  GS2R_Update_Player_Character_Exp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2R_Update_Player_Character_Exp& from);
  void MergeFrom(const GS2R_Update_Player_Character_Exp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 addExp = 2;
  inline bool has_addexp() const;
  inline void clear_addexp();
  static const int kAddExpFieldNumber = 2;
  inline ::google::protobuf::uint32 addexp() const;
  inline void set_addexp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2R_Update_Player_Character_Exp)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_addexp();
  inline void clear_has_addexp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 addexp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static GS2R_Update_Player_Character_Exp* default_instance_;
};
// -------------------------------------------------------------------

class Country_Cross_Star_info : public ::google::protobuf::Message {
 public:
  Country_Cross_Star_info();
  virtual ~Country_Cross_Star_info();

  Country_Cross_Star_info(const Country_Cross_Star_info& from);

  inline Country_Cross_Star_info& operator=(const Country_Cross_Star_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Country_Cross_Star_info& default_instance();

  void Swap(Country_Cross_Star_info* other);

  // implements Message ----------------------------------------------

  Country_Cross_Star_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Country_Cross_Star_info& from);
  void MergeFrom(const Country_Cross_Star_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 countryid = 1;
  inline bool has_countryid() const;
  inline void clear_countryid();
  static const int kCountryidFieldNumber = 1;
  inline ::google::protobuf::uint32 countryid() const;
  inline void set_countryid(::google::protobuf::uint32 value);

  // optional uint32 starNum = 2;
  inline bool has_starnum() const;
  inline void clear_starnum();
  static const int kStarNumFieldNumber = 2;
  inline ::google::protobuf::uint32 starnum() const;
  inline void set_starnum(::google::protobuf::uint32 value);

  // optional bool isDestroied = 3;
  inline bool has_isdestroied() const;
  inline void clear_isdestroied();
  static const int kIsDestroiedFieldNumber = 3;
  inline bool isdestroied() const;
  inline void set_isdestroied(bool value);

  // @@protoc_insertion_point(class_scope:pb.Country_Cross_Star_info)
 private:
  inline void set_has_countryid();
  inline void clear_has_countryid();
  inline void set_has_starnum();
  inline void clear_has_starnum();
  inline void set_has_isdestroied();
  inline void clear_has_isdestroied();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 countryid_;
  ::google::protobuf::uint32 starnum_;
  bool isdestroied_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static Country_Cross_Star_info* default_instance_;
};
// -------------------------------------------------------------------

class Country_Stars_Update : public ::google::protobuf::Message {
 public:
  Country_Stars_Update();
  virtual ~Country_Stars_Update();

  Country_Stars_Update(const Country_Stars_Update& from);

  inline Country_Stars_Update& operator=(const Country_Stars_Update& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Country_Stars_Update& default_instance();

  void Swap(Country_Stars_Update* other);

  // implements Message ----------------------------------------------

  Country_Stars_Update* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Country_Stars_Update& from);
  void MergeFrom(const Country_Stars_Update& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Country_Cross_Star_info update_stars = 1;
  inline int update_stars_size() const;
  inline void clear_update_stars();
  static const int kUpdateStarsFieldNumber = 1;
  inline const ::pb::Country_Cross_Star_info& update_stars(int index) const;
  inline ::pb::Country_Cross_Star_info* mutable_update_stars(int index);
  inline ::pb::Country_Cross_Star_info* add_update_stars();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Country_Cross_Star_info >&
      update_stars() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Country_Cross_Star_info >*
      mutable_update_stars();

  // @@protoc_insertion_point(class_scope:pb.Country_Stars_Update)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::Country_Cross_Star_info > update_stars_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static Country_Stars_Update* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Enter_Cross_War : public ::google::protobuf::Message {
 public:
  GS2C_Enter_Cross_War();
  virtual ~GS2C_Enter_Cross_War();

  GS2C_Enter_Cross_War(const GS2C_Enter_Cross_War& from);

  inline GS2C_Enter_Cross_War& operator=(const GS2C_Enter_Cross_War& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Enter_Cross_War& default_instance();

  void Swap(GS2C_Enter_Cross_War* other);

  // implements Message ----------------------------------------------

  GS2C_Enter_Cross_War* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Enter_Cross_War& from);
  void MergeFrom(const GS2C_Enter_Cross_War& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // optional .pb.GS2C_City_All_Info cityInfo = 2;
  inline bool has_cityinfo() const;
  inline void clear_cityinfo();
  static const int kCityInfoFieldNumber = 2;
  inline const ::pb::GS2C_City_All_Info& cityinfo() const;
  inline ::pb::GS2C_City_All_Info* mutable_cityinfo();
  inline ::pb::GS2C_City_All_Info* release_cityinfo();
  inline void set_allocated_cityinfo(::pb::GS2C_City_All_Info* cityinfo);

  // optional .pb.GS2C_CharacterStorage character_info = 3;
  inline bool has_character_info() const;
  inline void clear_character_info();
  static const int kCharacterInfoFieldNumber = 3;
  inline const ::pb::GS2C_CharacterStorage& character_info() const;
  inline ::pb::GS2C_CharacterStorage* mutable_character_info();
  inline ::pb::GS2C_CharacterStorage* release_character_info();
  inline void set_allocated_character_info(::pb::GS2C_CharacterStorage* character_info);

  // optional uint32 country_id = 4;
  inline bool has_country_id() const;
  inline void clear_country_id();
  static const int kCountryIdFieldNumber = 4;
  inline ::google::protobuf::uint32 country_id() const;
  inline void set_country_id(::google::protobuf::uint32 value);

  // repeated .pb.Country_Cross_Star_info cross_country_stars = 5;
  inline int cross_country_stars_size() const;
  inline void clear_cross_country_stars();
  static const int kCrossCountryStarsFieldNumber = 5;
  inline const ::pb::Country_Cross_Star_info& cross_country_stars(int index) const;
  inline ::pb::Country_Cross_Star_info* mutable_cross_country_stars(int index);
  inline ::pb::Country_Cross_Star_info* add_cross_country_stars();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Country_Cross_Star_info >&
      cross_country_stars() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Country_Cross_Star_info >*
      mutable_cross_country_stars();

  // optional uint32 constantID = 6;
  inline bool has_constantid() const;
  inline void clear_constantid();
  static const int kConstantIDFieldNumber = 6;
  inline ::google::protobuf::uint32 constantid() const;
  inline void set_constantid(::google::protobuf::uint32 value);

  // optional uint64 doubleKillEndTime = 7;
  inline bool has_doublekillendtime() const;
  inline void clear_doublekillendtime();
  static const int kDoubleKillEndTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 doublekillendtime() const;
  inline void set_doublekillendtime(::google::protobuf::uint64 value);

  // optional uint32 hammerNum = 8;
  inline bool has_hammernum() const;
  inline void clear_hammernum();
  static const int kHammerNumFieldNumber = 8;
  inline ::google::protobuf::uint32 hammernum() const;
  inline void set_hammernum(::google::protobuf::uint32 value);

  // optional uint64 shieldEndTime = 9;
  inline bool has_shieldendtime() const;
  inline void clear_shieldendtime();
  static const int kShieldEndTimeFieldNumber = 9;
  inline ::google::protobuf::uint64 shieldendtime() const;
  inline void set_shieldendtime(::google::protobuf::uint64 value);

  // optional bool hasTakeStarAward = 10;
  inline bool has_hastakestaraward() const;
  inline void clear_hastakestaraward();
  static const int kHasTakeStarAwardFieldNumber = 10;
  inline bool hastakestaraward() const;
  inline void set_hastakestaraward(bool value);

  // optional .pb.GS2C_Country_Info countrys = 11;
  inline bool has_countrys() const;
  inline void clear_countrys();
  static const int kCountrysFieldNumber = 11;
  inline const ::pb::GS2C_Country_Info& countrys() const;
  inline ::pb::GS2C_Country_Info* mutable_countrys();
  inline ::pb::GS2C_Country_Info* release_countrys();
  inline void set_allocated_countrys(::pb::GS2C_Country_Info* countrys);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Enter_Cross_War)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_cityinfo();
  inline void clear_has_cityinfo();
  inline void set_has_character_info();
  inline void clear_has_character_info();
  inline void set_has_country_id();
  inline void clear_has_country_id();
  inline void set_has_constantid();
  inline void clear_has_constantid();
  inline void set_has_doublekillendtime();
  inline void clear_has_doublekillendtime();
  inline void set_has_hammernum();
  inline void clear_has_hammernum();
  inline void set_has_shieldendtime();
  inline void clear_has_shieldendtime();
  inline void set_has_hastakestaraward();
  inline void clear_has_hastakestaraward();
  inline void set_has_countrys();
  inline void clear_has_countrys();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::GS2C_City_All_Info* cityinfo_;
  ::google::protobuf::uint32 error_code_;
  ::google::protobuf::uint32 country_id_;
  ::pb::GS2C_CharacterStorage* character_info_;
  ::google::protobuf::RepeatedPtrField< ::pb::Country_Cross_Star_info > cross_country_stars_;
  ::google::protobuf::uint64 doublekillendtime_;
  ::google::protobuf::uint32 constantid_;
  ::google::protobuf::uint32 hammernum_;
  ::google::protobuf::uint64 shieldendtime_;
  ::pb::GS2C_Country_Info* countrys_;
  bool hastakestaraward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Enter_Cross_War* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Use_Cross_Troops : public ::google::protobuf::Message {
 public:
  C2GS_Use_Cross_Troops();
  virtual ~C2GS_Use_Cross_Troops();

  C2GS_Use_Cross_Troops(const C2GS_Use_Cross_Troops& from);

  inline C2GS_Use_Cross_Troops& operator=(const C2GS_Use_Cross_Troops& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Use_Cross_Troops& default_instance();

  void Swap(C2GS_Use_Cross_Troops* other);

  // implements Message ----------------------------------------------

  C2GS_Use_Cross_Troops* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Use_Cross_Troops& from);
  void MergeFrom(const C2GS_Use_Cross_Troops& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 destCityId = 1;
  inline bool has_destcityid() const;
  inline void clear_destcityid();
  static const int kDestCityIdFieldNumber = 1;
  inline ::google::protobuf::uint32 destcityid() const;
  inline void set_destcityid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Use_Cross_Troops)
 private:
  inline void set_has_destcityid();
  inline void clear_has_destcityid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 destcityid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Use_Cross_Troops* default_instance_;
};
// -------------------------------------------------------------------

class CR2G_Country_Awards : public ::google::protobuf::Message {
 public:
  CR2G_Country_Awards();
  virtual ~CR2G_Country_Awards();

  CR2G_Country_Awards(const CR2G_Country_Awards& from);

  inline CR2G_Country_Awards& operator=(const CR2G_Country_Awards& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CR2G_Country_Awards& default_instance();

  void Swap(CR2G_Country_Awards* other);

  // implements Message ----------------------------------------------

  CR2G_Country_Awards* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CR2G_Country_Awards& from);
  void MergeFrom(const CR2G_Country_Awards& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 unique_index_id = 1;
  inline bool has_unique_index_id() const;
  inline void clear_unique_index_id();
  static const int kUniqueIndexIdFieldNumber = 1;
  inline ::google::protobuf::uint32 unique_index_id() const;
  inline void set_unique_index_id(::google::protobuf::uint32 value);

  // optional uint32 defanceAwardToExp = 2;
  inline bool has_defanceawardtoexp() const;
  inline void clear_defanceawardtoexp();
  static const int kDefanceAwardToExpFieldNumber = 2;
  inline ::google::protobuf::uint32 defanceawardtoexp() const;
  inline void set_defanceawardtoexp(::google::protobuf::uint32 value);

  // optional uint32 AttackAwardToExp = 3;
  inline bool has_attackawardtoexp() const;
  inline void clear_attackawardtoexp();
  static const int kAttackAwardToExpFieldNumber = 3;
  inline ::google::protobuf::uint32 attackawardtoexp() const;
  inline void set_attackawardtoexp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.CR2G_Country_Awards)
 private:
  inline void set_has_unique_index_id();
  inline void clear_has_unique_index_id();
  inline void set_has_defanceawardtoexp();
  inline void clear_has_defanceawardtoexp();
  inline void set_has_attackawardtoexp();
  inline void clear_has_attackawardtoexp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 unique_index_id_;
  ::google::protobuf::uint32 defanceawardtoexp_;
  ::google::protobuf::uint32 attackawardtoexp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static CR2G_Country_Awards* default_instance_;
};
// -------------------------------------------------------------------

class UpdateAwardsChange : public ::google::protobuf::Message {
 public:
  UpdateAwardsChange();
  virtual ~UpdateAwardsChange();

  UpdateAwardsChange(const UpdateAwardsChange& from);

  inline UpdateAwardsChange& operator=(const UpdateAwardsChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateAwardsChange& default_instance();

  void Swap(UpdateAwardsChange* other);

  // implements Message ----------------------------------------------

  UpdateAwardsChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateAwardsChange& from);
  void MergeFrom(const UpdateAwardsChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemid = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.UpdateAwardsChange)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static UpdateAwardsChange* default_instance_;
};
// -------------------------------------------------------------------

class SC2G_Update_Award_Change : public ::google::protobuf::Message {
 public:
  SC2G_Update_Award_Change();
  virtual ~SC2G_Update_Award_Change();

  SC2G_Update_Award_Change(const SC2G_Update_Award_Change& from);

  inline SC2G_Update_Award_Change& operator=(const SC2G_Update_Award_Change& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC2G_Update_Award_Change& default_instance();

  void Swap(SC2G_Update_Award_Change* other);

  // implements Message ----------------------------------------------

  SC2G_Update_Award_Change* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC2G_Update_Award_Change& from);
  void MergeFrom(const SC2G_Update_Award_Change& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.UpdateAwardsChange awards = 1;
  inline int awards_size() const;
  inline void clear_awards();
  static const int kAwardsFieldNumber = 1;
  inline const ::pb::UpdateAwardsChange& awards(int index) const;
  inline ::pb::UpdateAwardsChange* mutable_awards(int index);
  inline ::pb::UpdateAwardsChange* add_awards();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::UpdateAwardsChange >&
      awards() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::UpdateAwardsChange >*
      mutable_awards();

  // @@protoc_insertion_point(class_scope:pb.SC2G_Update_Award_Change)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::UpdateAwardsChange > awards_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static SC2G_Update_Award_Change* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_TakeStarAwardRet : public ::google::protobuf::Message {
 public:
  GS2C_TakeStarAwardRet();
  virtual ~GS2C_TakeStarAwardRet();

  GS2C_TakeStarAwardRet(const GS2C_TakeStarAwardRet& from);

  inline GS2C_TakeStarAwardRet& operator=(const GS2C_TakeStarAwardRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_TakeStarAwardRet& default_instance();

  void Swap(GS2C_TakeStarAwardRet* other);

  // implements Message ----------------------------------------------

  GS2C_TakeStarAwardRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_TakeStarAwardRet& from);
  void MergeFrom(const GS2C_TakeStarAwardRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.CROSS_RET ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::pb::CROSS_RET ret() const;
  inline void set_ret(::pb::CROSS_RET value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_TakeStarAwardRet)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static GS2C_TakeStarAwardRet* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Cross_Donation_Data : public ::google::protobuf::Message {
 public:
  GS2C_Cross_Donation_Data();
  virtual ~GS2C_Cross_Donation_Data();

  GS2C_Cross_Donation_Data(const GS2C_Cross_Donation_Data& from);

  inline GS2C_Cross_Donation_Data& operator=(const GS2C_Cross_Donation_Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Cross_Donation_Data& default_instance();

  void Swap(GS2C_Cross_Donation_Data* other);

  // implements Message ----------------------------------------------

  GS2C_Cross_Donation_Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Cross_Donation_Data& from);
  void MergeFrom(const GS2C_Cross_Donation_Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.Donate_Type item_type = 1;
  inline bool has_item_type() const;
  inline void clear_item_type();
  static const int kItemTypeFieldNumber = 1;
  inline ::pb::Donate_Type item_type() const;
  inline void set_item_type(::pb::Donate_Type value);

  // optional uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Cross_Donation_Data)
 private:
  inline void set_has_item_type();
  inline void clear_has_item_type();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int item_type_;
  ::google::protobuf::uint32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Cross_Donation_Data* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Cross_Donation_Datas : public ::google::protobuf::Message {
 public:
  GS2C_Cross_Donation_Datas();
  virtual ~GS2C_Cross_Donation_Datas();

  GS2C_Cross_Donation_Datas(const GS2C_Cross_Donation_Datas& from);

  inline GS2C_Cross_Donation_Datas& operator=(const GS2C_Cross_Donation_Datas& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Cross_Donation_Datas& default_instance();

  void Swap(GS2C_Cross_Donation_Datas* other);

  // implements Message ----------------------------------------------

  GS2C_Cross_Donation_Datas* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Cross_Donation_Datas& from);
  void MergeFrom(const GS2C_Cross_Donation_Datas& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.GS2C_Cross_Donation_Data donation_datas = 1;
  inline int donation_datas_size() const;
  inline void clear_donation_datas();
  static const int kDonationDatasFieldNumber = 1;
  inline const ::pb::GS2C_Cross_Donation_Data& donation_datas(int index) const;
  inline ::pb::GS2C_Cross_Donation_Data* mutable_donation_datas(int index);
  inline ::pb::GS2C_Cross_Donation_Data* add_donation_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Cross_Donation_Data >&
      donation_datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Cross_Donation_Data >*
      mutable_donation_datas();

  // @@protoc_insertion_point(class_scope:pb.GS2C_Cross_Donation_Datas)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Cross_Donation_Data > donation_datas_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Cross_Donation_Datas* default_instance_;
};
// -------------------------------------------------------------------

class GC2S_Donate_Goods : public ::google::protobuf::Message {
 public:
  GC2S_Donate_Goods();
  virtual ~GC2S_Donate_Goods();

  GC2S_Donate_Goods(const GC2S_Donate_Goods& from);

  inline GC2S_Donate_Goods& operator=(const GC2S_Donate_Goods& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GC2S_Donate_Goods& default_instance();

  void Swap(GC2S_Donate_Goods* other);

  // implements Message ----------------------------------------------

  GC2S_Donate_Goods* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GC2S_Donate_Goods& from);
  void MergeFrom(const GC2S_Donate_Goods& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.Donate_Type item_type = 1;
  inline bool has_item_type() const;
  inline void clear_item_type();
  static const int kItemTypeFieldNumber = 1;
  inline ::pb::Donate_Type item_type() const;
  inline void set_item_type(::pb::Donate_Type value);

  // @@protoc_insertion_point(class_scope:pb.GC2S_Donate_Goods)
 private:
  inline void set_has_item_type();
  inline void clear_has_item_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int item_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static GC2S_Donate_Goods* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_DONATE_RET : public ::google::protobuf::Message {
 public:
  GS2C_DONATE_RET();
  virtual ~GS2C_DONATE_RET();

  GS2C_DONATE_RET(const GS2C_DONATE_RET& from);

  inline GS2C_DONATE_RET& operator=(const GS2C_DONATE_RET& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_DONATE_RET& default_instance();

  void Swap(GS2C_DONATE_RET* other);

  // implements Message ----------------------------------------------

  GS2C_DONATE_RET* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_DONATE_RET& from);
  void MergeFrom(const GS2C_DONATE_RET& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.Donate_Type item_type = 1;
  inline bool has_item_type() const;
  inline void clear_item_type();
  static const int kItemTypeFieldNumber = 1;
  inline ::pb::Donate_Type item_type() const;
  inline void set_item_type(::pb::Donate_Type value);

  // optional .pb.CROSS_RET ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::pb::CROSS_RET ret() const;
  inline void set_ret(::pb::CROSS_RET value);

  // optional uint32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_DONATE_RET)
 private:
  inline void set_has_item_type();
  inline void clear_has_item_type();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int item_type_;
  int ret_;
  ::google::protobuf::uint32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static GS2C_DONATE_RET* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Cross_Destroy_Task_Info : public ::google::protobuf::Message {
 public:
  GS2C_Cross_Destroy_Task_Info();
  virtual ~GS2C_Cross_Destroy_Task_Info();

  GS2C_Cross_Destroy_Task_Info(const GS2C_Cross_Destroy_Task_Info& from);

  inline GS2C_Cross_Destroy_Task_Info& operator=(const GS2C_Cross_Destroy_Task_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Cross_Destroy_Task_Info& default_instance();

  void Swap(GS2C_Cross_Destroy_Task_Info* other);

  // implements Message ----------------------------------------------

  GS2C_Cross_Destroy_Task_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Cross_Destroy_Task_Info& from);
  void MergeFrom(const GS2C_Cross_Destroy_Task_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::protobuf::uint32 task_id() const;
  inline void set_task_id(::google::protobuf::uint32 value);

  // optional uint32 progress = 2;
  inline bool has_progress() const;
  inline void clear_progress();
  static const int kProgressFieldNumber = 2;
  inline ::google::protobuf::uint32 progress() const;
  inline void set_progress(::google::protobuf::uint32 value);

  // optional uint32 is_take = 3;
  inline bool has_is_take() const;
  inline void clear_is_take();
  static const int kIsTakeFieldNumber = 3;
  inline ::google::protobuf::uint32 is_take() const;
  inline void set_is_take(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Cross_Destroy_Task_Info)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_progress();
  inline void clear_has_progress();
  inline void set_has_is_take();
  inline void clear_has_is_take();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 task_id_;
  ::google::protobuf::uint32 progress_;
  ::google::protobuf::uint32 is_take_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Cross_Destroy_Task_Info* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Cross_Destroy_Task_Infos : public ::google::protobuf::Message {
 public:
  GS2C_Cross_Destroy_Task_Infos();
  virtual ~GS2C_Cross_Destroy_Task_Infos();

  GS2C_Cross_Destroy_Task_Infos(const GS2C_Cross_Destroy_Task_Infos& from);

  inline GS2C_Cross_Destroy_Task_Infos& operator=(const GS2C_Cross_Destroy_Task_Infos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Cross_Destroy_Task_Infos& default_instance();

  void Swap(GS2C_Cross_Destroy_Task_Infos* other);

  // implements Message ----------------------------------------------

  GS2C_Cross_Destroy_Task_Infos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Cross_Destroy_Task_Infos& from);
  void MergeFrom(const GS2C_Cross_Destroy_Task_Infos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.GS2C_Cross_Destroy_Task_Info task_list = 1;
  inline int task_list_size() const;
  inline void clear_task_list();
  static const int kTaskListFieldNumber = 1;
  inline const ::pb::GS2C_Cross_Destroy_Task_Info& task_list(int index) const;
  inline ::pb::GS2C_Cross_Destroy_Task_Info* mutable_task_list(int index);
  inline ::pb::GS2C_Cross_Destroy_Task_Info* add_task_list();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Cross_Destroy_Task_Info >&
      task_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Cross_Destroy_Task_Info >*
      mutable_task_list();

  // @@protoc_insertion_point(class_scope:pb.GS2C_Cross_Destroy_Task_Infos)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Cross_Destroy_Task_Info > task_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Cross_Destroy_Task_Infos* default_instance_;
};
// -------------------------------------------------------------------

class GC2S_Take_Destroy_Task_Award : public ::google::protobuf::Message {
 public:
  GC2S_Take_Destroy_Task_Award();
  virtual ~GC2S_Take_Destroy_Task_Award();

  GC2S_Take_Destroy_Task_Award(const GC2S_Take_Destroy_Task_Award& from);

  inline GC2S_Take_Destroy_Task_Award& operator=(const GC2S_Take_Destroy_Task_Award& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GC2S_Take_Destroy_Task_Award& default_instance();

  void Swap(GC2S_Take_Destroy_Task_Award* other);

  // implements Message ----------------------------------------------

  GC2S_Take_Destroy_Task_Award* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GC2S_Take_Destroy_Task_Award& from);
  void MergeFrom(const GC2S_Take_Destroy_Task_Award& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::protobuf::uint32 task_id() const;
  inline void set_task_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GC2S_Take_Destroy_Task_Award)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 task_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static GC2S_Take_Destroy_Task_Award* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Take_Destroy_Task_Award_Ret : public ::google::protobuf::Message {
 public:
  GS2C_Take_Destroy_Task_Award_Ret();
  virtual ~GS2C_Take_Destroy_Task_Award_Ret();

  GS2C_Take_Destroy_Task_Award_Ret(const GS2C_Take_Destroy_Task_Award_Ret& from);

  inline GS2C_Take_Destroy_Task_Award_Ret& operator=(const GS2C_Take_Destroy_Task_Award_Ret& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Take_Destroy_Task_Award_Ret& default_instance();

  void Swap(GS2C_Take_Destroy_Task_Award_Ret* other);

  // implements Message ----------------------------------------------

  GS2C_Take_Destroy_Task_Award_Ret* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Take_Destroy_Task_Award_Ret& from);
  void MergeFrom(const GS2C_Take_Destroy_Task_Award_Ret& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.CROSS_RET ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::pb::CROSS_RET ret() const;
  inline void set_ret(::pb::CROSS_RET value);

  // optional .pb.GS2C_Cross_Destroy_Task_Info task_info = 2;
  inline bool has_task_info() const;
  inline void clear_task_info();
  static const int kTaskInfoFieldNumber = 2;
  inline const ::pb::GS2C_Cross_Destroy_Task_Info& task_info() const;
  inline ::pb::GS2C_Cross_Destroy_Task_Info* mutable_task_info();
  inline ::pb::GS2C_Cross_Destroy_Task_Info* release_task_info();
  inline void set_allocated_task_info(::pb::GS2C_Cross_Destroy_Task_Info* task_info);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Take_Destroy_Task_Award_Ret)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_task_info();
  inline void clear_has_task_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::GS2C_Cross_Destroy_Task_Info* task_info_;
  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Take_Destroy_Task_Award_Ret* default_instance_;
};
// -------------------------------------------------------------------

class C2CR_Attack_Capital : public ::google::protobuf::Message {
 public:
  C2CR_Attack_Capital();
  virtual ~C2CR_Attack_Capital();

  C2CR_Attack_Capital(const C2CR_Attack_Capital& from);

  inline C2CR_Attack_Capital& operator=(const C2CR_Attack_Capital& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2CR_Attack_Capital& default_instance();

  void Swap(C2CR_Attack_Capital* other);

  // implements Message ----------------------------------------------

  C2CR_Attack_Capital* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2CR_Attack_Capital& from);
  void MergeFrom(const C2CR_Attack_Capital& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hero_in_city = 1;
  inline bool has_hero_in_city() const;
  inline void clear_hero_in_city();
  static const int kHeroInCityFieldNumber = 1;
  inline ::google::protobuf::uint32 hero_in_city() const;
  inline void set_hero_in_city(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 dest_city_id = 3;
  inline bool has_dest_city_id() const;
  inline void clear_dest_city_id();
  static const int kDestCityIdFieldNumber = 3;
  inline ::google::protobuf::uint32 dest_city_id() const;
  inline void set_dest_city_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2CR_Attack_Capital)
 private:
  inline void set_has_hero_in_city();
  inline void clear_has_hero_in_city();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_dest_city_id();
  inline void clear_has_dest_city_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 hero_in_city_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 dest_city_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static C2CR_Attack_Capital* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Cross_Kill_Task_Info : public ::google::protobuf::Message {
 public:
  GS2C_Cross_Kill_Task_Info();
  virtual ~GS2C_Cross_Kill_Task_Info();

  GS2C_Cross_Kill_Task_Info(const GS2C_Cross_Kill_Task_Info& from);

  inline GS2C_Cross_Kill_Task_Info& operator=(const GS2C_Cross_Kill_Task_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Cross_Kill_Task_Info& default_instance();

  void Swap(GS2C_Cross_Kill_Task_Info* other);

  // implements Message ----------------------------------------------

  GS2C_Cross_Kill_Task_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Cross_Kill_Task_Info& from);
  void MergeFrom(const GS2C_Cross_Kill_Task_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::protobuf::uint32 task_id() const;
  inline void set_task_id(::google::protobuf::uint32 value);

  // optional uint32 progress = 2;
  inline bool has_progress() const;
  inline void clear_progress();
  static const int kProgressFieldNumber = 2;
  inline ::google::protobuf::uint32 progress() const;
  inline void set_progress(::google::protobuf::uint32 value);

  // optional uint32 is_take = 3;
  inline bool has_is_take() const;
  inline void clear_is_take();
  static const int kIsTakeFieldNumber = 3;
  inline ::google::protobuf::uint32 is_take() const;
  inline void set_is_take(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Cross_Kill_Task_Info)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_progress();
  inline void clear_has_progress();
  inline void set_has_is_take();
  inline void clear_has_is_take();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 task_id_;
  ::google::protobuf::uint32 progress_;
  ::google::protobuf::uint32 is_take_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Cross_Kill_Task_Info* default_instance_;
};
// -------------------------------------------------------------------

class GC2S_Take_Kill_Task_Award : public ::google::protobuf::Message {
 public:
  GC2S_Take_Kill_Task_Award();
  virtual ~GC2S_Take_Kill_Task_Award();

  GC2S_Take_Kill_Task_Award(const GC2S_Take_Kill_Task_Award& from);

  inline GC2S_Take_Kill_Task_Award& operator=(const GC2S_Take_Kill_Task_Award& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GC2S_Take_Kill_Task_Award& default_instance();

  void Swap(GC2S_Take_Kill_Task_Award* other);

  // implements Message ----------------------------------------------

  GC2S_Take_Kill_Task_Award* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GC2S_Take_Kill_Task_Award& from);
  void MergeFrom(const GC2S_Take_Kill_Task_Award& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 phase_index = 1;
  inline bool has_phase_index() const;
  inline void clear_phase_index();
  static const int kPhaseIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 phase_index() const;
  inline void set_phase_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GC2S_Take_Kill_Task_Award)
 private:
  inline void set_has_phase_index();
  inline void clear_has_phase_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 phase_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static GC2S_Take_Kill_Task_Award* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Take_Kill_Task_Award_Ret : public ::google::protobuf::Message {
 public:
  GS2C_Take_Kill_Task_Award_Ret();
  virtual ~GS2C_Take_Kill_Task_Award_Ret();

  GS2C_Take_Kill_Task_Award_Ret(const GS2C_Take_Kill_Task_Award_Ret& from);

  inline GS2C_Take_Kill_Task_Award_Ret& operator=(const GS2C_Take_Kill_Task_Award_Ret& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Take_Kill_Task_Award_Ret& default_instance();

  void Swap(GS2C_Take_Kill_Task_Award_Ret* other);

  // implements Message ----------------------------------------------

  GS2C_Take_Kill_Task_Award_Ret* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Take_Kill_Task_Award_Ret& from);
  void MergeFrom(const GS2C_Take_Kill_Task_Award_Ret& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.CROSS_RET ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::pb::CROSS_RET ret() const;
  inline void set_ret(::pb::CROSS_RET value);

  // optional .pb.GS2C_Cross_Kill_Task_Info task_info = 2;
  inline bool has_task_info() const;
  inline void clear_task_info();
  static const int kTaskInfoFieldNumber = 2;
  inline const ::pb::GS2C_Cross_Kill_Task_Info& task_info() const;
  inline ::pb::GS2C_Cross_Kill_Task_Info* mutable_task_info();
  inline ::pb::GS2C_Cross_Kill_Task_Info* release_task_info();
  inline void set_allocated_task_info(::pb::GS2C_Cross_Kill_Task_Info* task_info);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Take_Kill_Task_Award_Ret)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_task_info();
  inline void clear_has_task_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::GS2C_Cross_Kill_Task_Info* task_info_;
  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Take_Kill_Task_Award_Ret* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Cross_Ammo_Info : public ::google::protobuf::Message {
 public:
  GS2C_Cross_Ammo_Info();
  virtual ~GS2C_Cross_Ammo_Info();

  GS2C_Cross_Ammo_Info(const GS2C_Cross_Ammo_Info& from);

  inline GS2C_Cross_Ammo_Info& operator=(const GS2C_Cross_Ammo_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Cross_Ammo_Info& default_instance();

  void Swap(GS2C_Cross_Ammo_Info* other);

  // implements Message ----------------------------------------------

  GS2C_Cross_Ammo_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Cross_Ammo_Info& from);
  void MergeFrom(const GS2C_Cross_Ammo_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.ArsenalType itemType = 1;
  inline bool has_itemtype() const;
  inline void clear_itemtype();
  static const int kItemTypeFieldNumber = 1;
  inline ::pb::ArsenalType itemtype() const;
  inline void set_itemtype(::pb::ArsenalType value);

  // optional uint32 remain_num = 2;
  inline bool has_remain_num() const;
  inline void clear_remain_num();
  static const int kRemainNumFieldNumber = 2;
  inline ::google::protobuf::uint32 remain_num() const;
  inline void set_remain_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Cross_Ammo_Info)
 private:
  inline void set_has_itemtype();
  inline void clear_has_itemtype();
  inline void set_has_remain_num();
  inline void clear_has_remain_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int itemtype_;
  ::google::protobuf::uint32 remain_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Cross_Ammo_Info* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Cross_Ammo_Infos : public ::google::protobuf::Message {
 public:
  GS2C_Cross_Ammo_Infos();
  virtual ~GS2C_Cross_Ammo_Infos();

  GS2C_Cross_Ammo_Infos(const GS2C_Cross_Ammo_Infos& from);

  inline GS2C_Cross_Ammo_Infos& operator=(const GS2C_Cross_Ammo_Infos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Cross_Ammo_Infos& default_instance();

  void Swap(GS2C_Cross_Ammo_Infos* other);

  // implements Message ----------------------------------------------

  GS2C_Cross_Ammo_Infos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Cross_Ammo_Infos& from);
  void MergeFrom(const GS2C_Cross_Ammo_Infos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.GS2C_Cross_Ammo_Info task_list = 1;
  inline int task_list_size() const;
  inline void clear_task_list();
  static const int kTaskListFieldNumber = 1;
  inline const ::pb::GS2C_Cross_Ammo_Info& task_list(int index) const;
  inline ::pb::GS2C_Cross_Ammo_Info* mutable_task_list(int index);
  inline ::pb::GS2C_Cross_Ammo_Info* add_task_list();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Cross_Ammo_Info >&
      task_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Cross_Ammo_Info >*
      mutable_task_list();

  // @@protoc_insertion_point(class_scope:pb.GS2C_Cross_Ammo_Infos)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Cross_Ammo_Info > task_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Cross_Ammo_Infos* default_instance_;
};
// -------------------------------------------------------------------

class GC2S_Buy_Ammo : public ::google::protobuf::Message {
 public:
  GC2S_Buy_Ammo();
  virtual ~GC2S_Buy_Ammo();

  GC2S_Buy_Ammo(const GC2S_Buy_Ammo& from);

  inline GC2S_Buy_Ammo& operator=(const GC2S_Buy_Ammo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GC2S_Buy_Ammo& default_instance();

  void Swap(GC2S_Buy_Ammo* other);

  // implements Message ----------------------------------------------

  GC2S_Buy_Ammo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GC2S_Buy_Ammo& from);
  void MergeFrom(const GC2S_Buy_Ammo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.ArsenalType itemType = 1;
  inline bool has_itemtype() const;
  inline void clear_itemtype();
  static const int kItemTypeFieldNumber = 1;
  inline ::pb::ArsenalType itemtype() const;
  inline void set_itemtype(::pb::ArsenalType value);

  // @@protoc_insertion_point(class_scope:pb.GC2S_Buy_Ammo)
 private:
  inline void set_has_itemtype();
  inline void clear_has_itemtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int itemtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static GC2S_Buy_Ammo* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Buy_Ammo_Rsp : public ::google::protobuf::Message {
 public:
  GS2C_Buy_Ammo_Rsp();
  virtual ~GS2C_Buy_Ammo_Rsp();

  GS2C_Buy_Ammo_Rsp(const GS2C_Buy_Ammo_Rsp& from);

  inline GS2C_Buy_Ammo_Rsp& operator=(const GS2C_Buy_Ammo_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Buy_Ammo_Rsp& default_instance();

  void Swap(GS2C_Buy_Ammo_Rsp* other);

  // implements Message ----------------------------------------------

  GS2C_Buy_Ammo_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Buy_Ammo_Rsp& from);
  void MergeFrom(const GS2C_Buy_Ammo_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.CROSS_RET ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::pb::CROSS_RET ret() const;
  inline void set_ret(::pb::CROSS_RET value);

  // optional uint64 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint64 playerid() const;
  inline void set_playerid(::google::protobuf::uint64 value);

  // optional .pb.GS2C_Cross_Ammo_Info ammo_info = 3;
  inline bool has_ammo_info() const;
  inline void clear_ammo_info();
  static const int kAmmoInfoFieldNumber = 3;
  inline const ::pb::GS2C_Cross_Ammo_Info& ammo_info() const;
  inline ::pb::GS2C_Cross_Ammo_Info* mutable_ammo_info();
  inline ::pb::GS2C_Cross_Ammo_Info* release_ammo_info();
  inline void set_allocated_ammo_info(::pb::GS2C_Cross_Ammo_Info* ammo_info);

  // optional uint64 KillTimeEndtime = 4;
  inline bool has_killtimeendtime() const;
  inline void clear_killtimeendtime();
  static const int kKillTimeEndtimeFieldNumber = 4;
  inline ::google::protobuf::uint64 killtimeendtime() const;
  inline void set_killtimeendtime(::google::protobuf::uint64 value);

  // optional uint32 hammerNum = 5;
  inline bool has_hammernum() const;
  inline void clear_hammernum();
  static const int kHammerNumFieldNumber = 5;
  inline ::google::protobuf::uint32 hammernum() const;
  inline void set_hammernum(::google::protobuf::uint32 value);

  // optional uint64 shieldEndTime = 6;
  inline bool has_shieldendtime() const;
  inline void clear_shieldendtime();
  static const int kShieldEndTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 shieldendtime() const;
  inline void set_shieldendtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Buy_Ammo_Rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_ammo_info();
  inline void clear_has_ammo_info();
  inline void set_has_killtimeendtime();
  inline void clear_has_killtimeendtime();
  inline void set_has_hammernum();
  inline void clear_has_hammernum();
  inline void set_has_shieldendtime();
  inline void clear_has_shieldendtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 playerid_;
  ::pb::GS2C_Cross_Ammo_Info* ammo_info_;
  int ret_;
  ::google::protobuf::uint32 hammernum_;
  ::google::protobuf::uint64 killtimeendtime_;
  ::google::protobuf::uint64 shieldendtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Buy_Ammo_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Use_Attack_Hummer : public ::google::protobuf::Message {
 public:
  GS2C_Use_Attack_Hummer();
  virtual ~GS2C_Use_Attack_Hummer();

  GS2C_Use_Attack_Hummer(const GS2C_Use_Attack_Hummer& from);

  inline GS2C_Use_Attack_Hummer& operator=(const GS2C_Use_Attack_Hummer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Use_Attack_Hummer& default_instance();

  void Swap(GS2C_Use_Attack_Hummer* other);

  // implements Message ----------------------------------------------

  GS2C_Use_Attack_Hummer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Use_Attack_Hummer& from);
  void MergeFrom(const GS2C_Use_Attack_Hummer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 country_id = 1;
  inline bool has_country_id() const;
  inline void clear_country_id();
  static const int kCountryIdFieldNumber = 1;
  inline ::google::protobuf::uint32 country_id() const;
  inline void set_country_id(::google::protobuf::uint32 value);

  // optional uint32 heroid = 2;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroidFieldNumber = 2;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Use_Attack_Hummer)
 private:
  inline void set_has_country_id();
  inline void clear_has_country_id();
  inline void set_has_heroid();
  inline void clear_has_heroid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 country_id_;
  ::google::protobuf::uint32 heroid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Use_Attack_Hummer* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Attack_Result : public ::google::protobuf::Message {
 public:
  GS2C_Attack_Result();
  virtual ~GS2C_Attack_Result();

  GS2C_Attack_Result(const GS2C_Attack_Result& from);

  inline GS2C_Attack_Result& operator=(const GS2C_Attack_Result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Attack_Result& default_instance();

  void Swap(GS2C_Attack_Result* other);

  // implements Message ----------------------------------------------

  GS2C_Attack_Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Attack_Result& from);
  void MergeFrom(const GS2C_Attack_Result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.CROSS_RET ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::pb::CROSS_RET ret() const;
  inline void set_ret(::pb::CROSS_RET value);

  // optional uint32 hammerNum = 2;
  inline bool has_hammernum() const;
  inline void clear_hammernum();
  static const int kHammerNumFieldNumber = 2;
  inline ::google::protobuf::uint32 hammernum() const;
  inline void set_hammernum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Attack_Result)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_hammernum();
  inline void clear_has_hammernum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;
  ::google::protobuf::uint32 hammernum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Attack_Result* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Cross_Rank_Info : public ::google::protobuf::Message {
 public:
  GS2C_Cross_Rank_Info();
  virtual ~GS2C_Cross_Rank_Info();

  GS2C_Cross_Rank_Info(const GS2C_Cross_Rank_Info& from);

  inline GS2C_Cross_Rank_Info& operator=(const GS2C_Cross_Rank_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Cross_Rank_Info& default_instance();

  void Swap(GS2C_Cross_Rank_Info* other);

  // implements Message ----------------------------------------------

  GS2C_Cross_Rank_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Cross_Rank_Info& from);
  void MergeFrom(const GS2C_Cross_Rank_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 rank_num = 1;
  inline bool has_rank_num() const;
  inline void clear_rank_num();
  static const int kRankNumFieldNumber = 1;
  inline ::google::protobuf::uint32 rank_num() const;
  inline void set_rank_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Cross_Rank_Info)
 private:
  inline void set_has_rank_num();
  inline void clear_has_rank_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 rank_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CrossWar_2eproto();
  friend void protobuf_AssignDesc_CrossWar_2eproto();
  friend void protobuf_ShutdownFile_CrossWar_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Cross_Rank_Info* default_instance_;
};
// ===================================================================


// ===================================================================

// Devide_Country_Info

// optional uint32 orig_country_id = 1;
inline bool Devide_Country_Info::has_orig_country_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Devide_Country_Info::set_has_orig_country_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Devide_Country_Info::clear_has_orig_country_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Devide_Country_Info::clear_orig_country_id() {
  orig_country_id_ = 0u;
  clear_has_orig_country_id();
}
inline ::google::protobuf::uint32 Devide_Country_Info::orig_country_id() const {
  return orig_country_id_;
}
inline void Devide_Country_Info::set_orig_country_id(::google::protobuf::uint32 value) {
  set_has_orig_country_id();
  orig_country_id_ = value;
}

// optional uint32 devide_country_id = 2;
inline bool Devide_Country_Info::has_devide_country_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Devide_Country_Info::set_has_devide_country_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Devide_Country_Info::clear_has_devide_country_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Devide_Country_Info::clear_devide_country_id() {
  devide_country_id_ = 0u;
  clear_has_devide_country_id();
}
inline ::google::protobuf::uint32 Devide_Country_Info::devide_country_id() const {
  return devide_country_id_;
}
inline void Devide_Country_Info::set_devide_country_id(::google::protobuf::uint32 value) {
  set_has_devide_country_id();
  devide_country_id_ = value;
}

// optional uint32 unique_index_id = 3;
inline bool Devide_Country_Info::has_unique_index_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Devide_Country_Info::set_has_unique_index_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Devide_Country_Info::clear_has_unique_index_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Devide_Country_Info::clear_unique_index_id() {
  unique_index_id_ = 0u;
  clear_has_unique_index_id();
}
inline ::google::protobuf::uint32 Devide_Country_Info::unique_index_id() const {
  return unique_index_id_;
}
inline void Devide_Country_Info::set_unique_index_id(::google::protobuf::uint32 value) {
  set_has_unique_index_id();
  unique_index_id_ = value;
}

// optional uint32 pros_degree = 4;
inline bool Devide_Country_Info::has_pros_degree() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Devide_Country_Info::set_has_pros_degree() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Devide_Country_Info::clear_has_pros_degree() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Devide_Country_Info::clear_pros_degree() {
  pros_degree_ = 0u;
  clear_has_pros_degree();
}
inline ::google::protobuf::uint32 Devide_Country_Info::pros_degree() const {
  return pros_degree_;
}
inline void Devide_Country_Info::set_pros_degree(::google::protobuf::uint32 value) {
  set_has_pros_degree();
  pros_degree_ = value;
}

// optional uint32 country_durable = 5;
inline bool Devide_Country_Info::has_country_durable() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Devide_Country_Info::set_has_country_durable() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Devide_Country_Info::clear_has_country_durable() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Devide_Country_Info::clear_country_durable() {
  country_durable_ = 0u;
  clear_has_country_durable();
}
inline ::google::protobuf::uint32 Devide_Country_Info::country_durable() const {
  return country_durable_;
}
inline void Devide_Country_Info::set_country_durable(::google::protobuf::uint32 value) {
  set_has_country_durable();
  country_durable_ = value;
}

// optional string server_name = 6;
inline bool Devide_Country_Info::has_server_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Devide_Country_Info::set_has_server_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Devide_Country_Info::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Devide_Country_Info::clear_server_name() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    server_name_->clear();
  }
  clear_has_server_name();
}
inline const ::std::string& Devide_Country_Info::server_name() const {
  return *server_name_;
}
inline void Devide_Country_Info::set_server_name(const ::std::string& value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void Devide_Country_Info::set_server_name(const char* value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void Devide_Country_Info::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Devide_Country_Info::mutable_server_name() {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  return server_name_;
}
inline ::std::string* Devide_Country_Info::release_server_name() {
  clear_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_name_;
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Devide_Country_Info::set_allocated_server_name(::std::string* server_name) {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_name) {
    set_has_server_name();
    server_name_ = server_name;
  } else {
    clear_has_server_name();
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 server_id = 7;
inline bool Devide_Country_Info::has_server_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Devide_Country_Info::set_has_server_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Devide_Country_Info::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Devide_Country_Info::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 Devide_Country_Info::server_id() const {
  return server_id_;
}
inline void Devide_Country_Info::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// GS2L_Devide_Country_Infos

// repeated .pb.Devide_Country_Info countrys = 1;
inline int GS2L_Devide_Country_Infos::countrys_size() const {
  return countrys_.size();
}
inline void GS2L_Devide_Country_Infos::clear_countrys() {
  countrys_.Clear();
}
inline const ::pb::Devide_Country_Info& GS2L_Devide_Country_Infos::countrys(int index) const {
  return countrys_.Get(index);
}
inline ::pb::Devide_Country_Info* GS2L_Devide_Country_Infos::mutable_countrys(int index) {
  return countrys_.Mutable(index);
}
inline ::pb::Devide_Country_Info* GS2L_Devide_Country_Infos::add_countrys() {
  return countrys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Devide_Country_Info >&
GS2L_Devide_Country_Infos::countrys() const {
  return countrys_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Devide_Country_Info >*
GS2L_Devide_Country_Infos::mutable_countrys() {
  return &countrys_;
}

// -------------------------------------------------------------------

// GS2C_Cross_Update_Country_Durable

// optional uint32 CrossCountryID = 1;
inline bool GS2C_Cross_Update_Country_Durable::has_crosscountryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Cross_Update_Country_Durable::set_has_crosscountryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Cross_Update_Country_Durable::clear_has_crosscountryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Cross_Update_Country_Durable::clear_crosscountryid() {
  crosscountryid_ = 0u;
  clear_has_crosscountryid();
}
inline ::google::protobuf::uint32 GS2C_Cross_Update_Country_Durable::crosscountryid() const {
  return crosscountryid_;
}
inline void GS2C_Cross_Update_Country_Durable::set_crosscountryid(::google::protobuf::uint32 value) {
  set_has_crosscountryid();
  crosscountryid_ = value;
}

// optional uint32 CountryDurable = 2;
inline bool GS2C_Cross_Update_Country_Durable::has_countrydurable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Cross_Update_Country_Durable::set_has_countrydurable() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Cross_Update_Country_Durable::clear_has_countrydurable() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Cross_Update_Country_Durable::clear_countrydurable() {
  countrydurable_ = 0u;
  clear_has_countrydurable();
}
inline ::google::protobuf::uint32 GS2C_Cross_Update_Country_Durable::countrydurable() const {
  return countrydurable_;
}
inline void GS2C_Cross_Update_Country_Durable::set_countrydurable(::google::protobuf::uint32 value) {
  set_has_countrydurable();
  countrydurable_ = value;
}

// optional uint32 AttCountryId = 3;
inline bool GS2C_Cross_Update_Country_Durable::has_attcountryid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Cross_Update_Country_Durable::set_has_attcountryid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Cross_Update_Country_Durable::clear_has_attcountryid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Cross_Update_Country_Durable::clear_attcountryid() {
  attcountryid_ = 0u;
  clear_has_attcountryid();
}
inline ::google::protobuf::uint32 GS2C_Cross_Update_Country_Durable::attcountryid() const {
  return attcountryid_;
}
inline void GS2C_Cross_Update_Country_Durable::set_attcountryid(::google::protobuf::uint32 value) {
  set_has_attcountryid();
  attcountryid_ = value;
}

// -------------------------------------------------------------------

// GS2C_Notice_CrossWar_State

// required .pb.CROSS_STATE CurState = 1;
inline bool GS2C_Notice_CrossWar_State::has_curstate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Notice_CrossWar_State::set_has_curstate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Notice_CrossWar_State::clear_has_curstate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Notice_CrossWar_State::clear_curstate() {
  curstate_ = 0;
  clear_has_curstate();
}
inline ::pb::CROSS_STATE GS2C_Notice_CrossWar_State::curstate() const {
  return static_cast< ::pb::CROSS_STATE >(curstate_);
}
inline void GS2C_Notice_CrossWar_State::set_curstate(::pb::CROSS_STATE value) {
  assert(::pb::CROSS_STATE_IsValid(value));
  set_has_curstate();
  curstate_ = value;
}

// optional uint64 StateEndTime = 2;
inline bool GS2C_Notice_CrossWar_State::has_stateendtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Notice_CrossWar_State::set_has_stateendtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Notice_CrossWar_State::clear_has_stateendtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Notice_CrossWar_State::clear_stateendtime() {
  stateendtime_ = GOOGLE_ULONGLONG(0);
  clear_has_stateendtime();
}
inline ::google::protobuf::uint64 GS2C_Notice_CrossWar_State::stateendtime() const {
  return stateendtime_;
}
inline void GS2C_Notice_CrossWar_State::set_stateendtime(::google::protobuf::uint64 value) {
  set_has_stateendtime();
  stateendtime_ = value;
}

// optional uint32 CrossCountryID = 3;
inline bool GS2C_Notice_CrossWar_State::has_crosscountryid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Notice_CrossWar_State::set_has_crosscountryid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Notice_CrossWar_State::clear_has_crosscountryid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Notice_CrossWar_State::clear_crosscountryid() {
  crosscountryid_ = 0u;
  clear_has_crosscountryid();
}
inline ::google::protobuf::uint32 GS2C_Notice_CrossWar_State::crosscountryid() const {
  return crosscountryid_;
}
inline void GS2C_Notice_CrossWar_State::set_crosscountryid(::google::protobuf::uint32 value) {
  set_has_crosscountryid();
  crosscountryid_ = value;
}

// -------------------------------------------------------------------

// GS2R_Update_Player_Value

// optional uint32 index = 1;
inline bool GS2R_Update_Player_Value::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2R_Update_Player_Value::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2R_Update_Player_Value::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2R_Update_Player_Value::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 GS2R_Update_Player_Value::index() const {
  return index_;
}
inline void GS2R_Update_Player_Value::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// optional uint32 val = 2;
inline bool GS2R_Update_Player_Value::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2R_Update_Player_Value::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2R_Update_Player_Value::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2R_Update_Player_Value::clear_val() {
  val_ = 0u;
  clear_has_val();
}
inline ::google::protobuf::uint32 GS2R_Update_Player_Value::val() const {
  return val_;
}
inline void GS2R_Update_Player_Value::set_val(::google::protobuf::uint32 value) {
  set_has_val();
  val_ = value;
}

// -------------------------------------------------------------------

// GS2R_Update_Player_Character_Exp

// optional uint32 charid = 1;
inline bool GS2R_Update_Player_Character_Exp::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2R_Update_Player_Character_Exp::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2R_Update_Player_Character_Exp::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2R_Update_Player_Character_Exp::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 GS2R_Update_Player_Character_Exp::charid() const {
  return charid_;
}
inline void GS2R_Update_Player_Character_Exp::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 addExp = 2;
inline bool GS2R_Update_Player_Character_Exp::has_addexp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2R_Update_Player_Character_Exp::set_has_addexp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2R_Update_Player_Character_Exp::clear_has_addexp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2R_Update_Player_Character_Exp::clear_addexp() {
  addexp_ = 0u;
  clear_has_addexp();
}
inline ::google::protobuf::uint32 GS2R_Update_Player_Character_Exp::addexp() const {
  return addexp_;
}
inline void GS2R_Update_Player_Character_Exp::set_addexp(::google::protobuf::uint32 value) {
  set_has_addexp();
  addexp_ = value;
}

// -------------------------------------------------------------------

// Country_Cross_Star_info

// optional uint32 countryid = 1;
inline bool Country_Cross_Star_info::has_countryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Country_Cross_Star_info::set_has_countryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Country_Cross_Star_info::clear_has_countryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Country_Cross_Star_info::clear_countryid() {
  countryid_ = 0u;
  clear_has_countryid();
}
inline ::google::protobuf::uint32 Country_Cross_Star_info::countryid() const {
  return countryid_;
}
inline void Country_Cross_Star_info::set_countryid(::google::protobuf::uint32 value) {
  set_has_countryid();
  countryid_ = value;
}

// optional uint32 starNum = 2;
inline bool Country_Cross_Star_info::has_starnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Country_Cross_Star_info::set_has_starnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Country_Cross_Star_info::clear_has_starnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Country_Cross_Star_info::clear_starnum() {
  starnum_ = 0u;
  clear_has_starnum();
}
inline ::google::protobuf::uint32 Country_Cross_Star_info::starnum() const {
  return starnum_;
}
inline void Country_Cross_Star_info::set_starnum(::google::protobuf::uint32 value) {
  set_has_starnum();
  starnum_ = value;
}

// optional bool isDestroied = 3;
inline bool Country_Cross_Star_info::has_isdestroied() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Country_Cross_Star_info::set_has_isdestroied() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Country_Cross_Star_info::clear_has_isdestroied() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Country_Cross_Star_info::clear_isdestroied() {
  isdestroied_ = false;
  clear_has_isdestroied();
}
inline bool Country_Cross_Star_info::isdestroied() const {
  return isdestroied_;
}
inline void Country_Cross_Star_info::set_isdestroied(bool value) {
  set_has_isdestroied();
  isdestroied_ = value;
}

// -------------------------------------------------------------------

// Country_Stars_Update

// repeated .pb.Country_Cross_Star_info update_stars = 1;
inline int Country_Stars_Update::update_stars_size() const {
  return update_stars_.size();
}
inline void Country_Stars_Update::clear_update_stars() {
  update_stars_.Clear();
}
inline const ::pb::Country_Cross_Star_info& Country_Stars_Update::update_stars(int index) const {
  return update_stars_.Get(index);
}
inline ::pb::Country_Cross_Star_info* Country_Stars_Update::mutable_update_stars(int index) {
  return update_stars_.Mutable(index);
}
inline ::pb::Country_Cross_Star_info* Country_Stars_Update::add_update_stars() {
  return update_stars_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Country_Cross_Star_info >&
Country_Stars_Update::update_stars() const {
  return update_stars_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Country_Cross_Star_info >*
Country_Stars_Update::mutable_update_stars() {
  return &update_stars_;
}

// -------------------------------------------------------------------

// GS2C_Enter_Cross_War

// required uint32 error_code = 1;
inline bool GS2C_Enter_Cross_War::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Enter_Cross_War::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Enter_Cross_War::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Enter_Cross_War::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 GS2C_Enter_Cross_War::error_code() const {
  return error_code_;
}
inline void GS2C_Enter_Cross_War::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional .pb.GS2C_City_All_Info cityInfo = 2;
inline bool GS2C_Enter_Cross_War::has_cityinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Enter_Cross_War::set_has_cityinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Enter_Cross_War::clear_has_cityinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Enter_Cross_War::clear_cityinfo() {
  if (cityinfo_ != NULL) cityinfo_->::pb::GS2C_City_All_Info::Clear();
  clear_has_cityinfo();
}
inline const ::pb::GS2C_City_All_Info& GS2C_Enter_Cross_War::cityinfo() const {
  return cityinfo_ != NULL ? *cityinfo_ : *default_instance_->cityinfo_;
}
inline ::pb::GS2C_City_All_Info* GS2C_Enter_Cross_War::mutable_cityinfo() {
  set_has_cityinfo();
  if (cityinfo_ == NULL) cityinfo_ = new ::pb::GS2C_City_All_Info;
  return cityinfo_;
}
inline ::pb::GS2C_City_All_Info* GS2C_Enter_Cross_War::release_cityinfo() {
  clear_has_cityinfo();
  ::pb::GS2C_City_All_Info* temp = cityinfo_;
  cityinfo_ = NULL;
  return temp;
}
inline void GS2C_Enter_Cross_War::set_allocated_cityinfo(::pb::GS2C_City_All_Info* cityinfo) {
  delete cityinfo_;
  cityinfo_ = cityinfo;
  if (cityinfo) {
    set_has_cityinfo();
  } else {
    clear_has_cityinfo();
  }
}

// optional .pb.GS2C_CharacterStorage character_info = 3;
inline bool GS2C_Enter_Cross_War::has_character_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Enter_Cross_War::set_has_character_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Enter_Cross_War::clear_has_character_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Enter_Cross_War::clear_character_info() {
  if (character_info_ != NULL) character_info_->::pb::GS2C_CharacterStorage::Clear();
  clear_has_character_info();
}
inline const ::pb::GS2C_CharacterStorage& GS2C_Enter_Cross_War::character_info() const {
  return character_info_ != NULL ? *character_info_ : *default_instance_->character_info_;
}
inline ::pb::GS2C_CharacterStorage* GS2C_Enter_Cross_War::mutable_character_info() {
  set_has_character_info();
  if (character_info_ == NULL) character_info_ = new ::pb::GS2C_CharacterStorage;
  return character_info_;
}
inline ::pb::GS2C_CharacterStorage* GS2C_Enter_Cross_War::release_character_info() {
  clear_has_character_info();
  ::pb::GS2C_CharacterStorage* temp = character_info_;
  character_info_ = NULL;
  return temp;
}
inline void GS2C_Enter_Cross_War::set_allocated_character_info(::pb::GS2C_CharacterStorage* character_info) {
  delete character_info_;
  character_info_ = character_info;
  if (character_info) {
    set_has_character_info();
  } else {
    clear_has_character_info();
  }
}

// optional uint32 country_id = 4;
inline bool GS2C_Enter_Cross_War::has_country_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Enter_Cross_War::set_has_country_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Enter_Cross_War::clear_has_country_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Enter_Cross_War::clear_country_id() {
  country_id_ = 0u;
  clear_has_country_id();
}
inline ::google::protobuf::uint32 GS2C_Enter_Cross_War::country_id() const {
  return country_id_;
}
inline void GS2C_Enter_Cross_War::set_country_id(::google::protobuf::uint32 value) {
  set_has_country_id();
  country_id_ = value;
}

// repeated .pb.Country_Cross_Star_info cross_country_stars = 5;
inline int GS2C_Enter_Cross_War::cross_country_stars_size() const {
  return cross_country_stars_.size();
}
inline void GS2C_Enter_Cross_War::clear_cross_country_stars() {
  cross_country_stars_.Clear();
}
inline const ::pb::Country_Cross_Star_info& GS2C_Enter_Cross_War::cross_country_stars(int index) const {
  return cross_country_stars_.Get(index);
}
inline ::pb::Country_Cross_Star_info* GS2C_Enter_Cross_War::mutable_cross_country_stars(int index) {
  return cross_country_stars_.Mutable(index);
}
inline ::pb::Country_Cross_Star_info* GS2C_Enter_Cross_War::add_cross_country_stars() {
  return cross_country_stars_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Country_Cross_Star_info >&
GS2C_Enter_Cross_War::cross_country_stars() const {
  return cross_country_stars_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Country_Cross_Star_info >*
GS2C_Enter_Cross_War::mutable_cross_country_stars() {
  return &cross_country_stars_;
}

// optional uint32 constantID = 6;
inline bool GS2C_Enter_Cross_War::has_constantid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GS2C_Enter_Cross_War::set_has_constantid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GS2C_Enter_Cross_War::clear_has_constantid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GS2C_Enter_Cross_War::clear_constantid() {
  constantid_ = 0u;
  clear_has_constantid();
}
inline ::google::protobuf::uint32 GS2C_Enter_Cross_War::constantid() const {
  return constantid_;
}
inline void GS2C_Enter_Cross_War::set_constantid(::google::protobuf::uint32 value) {
  set_has_constantid();
  constantid_ = value;
}

// optional uint64 doubleKillEndTime = 7;
inline bool GS2C_Enter_Cross_War::has_doublekillendtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GS2C_Enter_Cross_War::set_has_doublekillendtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GS2C_Enter_Cross_War::clear_has_doublekillendtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GS2C_Enter_Cross_War::clear_doublekillendtime() {
  doublekillendtime_ = GOOGLE_ULONGLONG(0);
  clear_has_doublekillendtime();
}
inline ::google::protobuf::uint64 GS2C_Enter_Cross_War::doublekillendtime() const {
  return doublekillendtime_;
}
inline void GS2C_Enter_Cross_War::set_doublekillendtime(::google::protobuf::uint64 value) {
  set_has_doublekillendtime();
  doublekillendtime_ = value;
}

// optional uint32 hammerNum = 8;
inline bool GS2C_Enter_Cross_War::has_hammernum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GS2C_Enter_Cross_War::set_has_hammernum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GS2C_Enter_Cross_War::clear_has_hammernum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GS2C_Enter_Cross_War::clear_hammernum() {
  hammernum_ = 0u;
  clear_has_hammernum();
}
inline ::google::protobuf::uint32 GS2C_Enter_Cross_War::hammernum() const {
  return hammernum_;
}
inline void GS2C_Enter_Cross_War::set_hammernum(::google::protobuf::uint32 value) {
  set_has_hammernum();
  hammernum_ = value;
}

// optional uint64 shieldEndTime = 9;
inline bool GS2C_Enter_Cross_War::has_shieldendtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GS2C_Enter_Cross_War::set_has_shieldendtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GS2C_Enter_Cross_War::clear_has_shieldendtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GS2C_Enter_Cross_War::clear_shieldendtime() {
  shieldendtime_ = GOOGLE_ULONGLONG(0);
  clear_has_shieldendtime();
}
inline ::google::protobuf::uint64 GS2C_Enter_Cross_War::shieldendtime() const {
  return shieldendtime_;
}
inline void GS2C_Enter_Cross_War::set_shieldendtime(::google::protobuf::uint64 value) {
  set_has_shieldendtime();
  shieldendtime_ = value;
}

// optional bool hasTakeStarAward = 10;
inline bool GS2C_Enter_Cross_War::has_hastakestaraward() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GS2C_Enter_Cross_War::set_has_hastakestaraward() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GS2C_Enter_Cross_War::clear_has_hastakestaraward() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GS2C_Enter_Cross_War::clear_hastakestaraward() {
  hastakestaraward_ = false;
  clear_has_hastakestaraward();
}
inline bool GS2C_Enter_Cross_War::hastakestaraward() const {
  return hastakestaraward_;
}
inline void GS2C_Enter_Cross_War::set_hastakestaraward(bool value) {
  set_has_hastakestaraward();
  hastakestaraward_ = value;
}

// optional .pb.GS2C_Country_Info countrys = 11;
inline bool GS2C_Enter_Cross_War::has_countrys() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GS2C_Enter_Cross_War::set_has_countrys() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GS2C_Enter_Cross_War::clear_has_countrys() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GS2C_Enter_Cross_War::clear_countrys() {
  if (countrys_ != NULL) countrys_->::pb::GS2C_Country_Info::Clear();
  clear_has_countrys();
}
inline const ::pb::GS2C_Country_Info& GS2C_Enter_Cross_War::countrys() const {
  return countrys_ != NULL ? *countrys_ : *default_instance_->countrys_;
}
inline ::pb::GS2C_Country_Info* GS2C_Enter_Cross_War::mutable_countrys() {
  set_has_countrys();
  if (countrys_ == NULL) countrys_ = new ::pb::GS2C_Country_Info;
  return countrys_;
}
inline ::pb::GS2C_Country_Info* GS2C_Enter_Cross_War::release_countrys() {
  clear_has_countrys();
  ::pb::GS2C_Country_Info* temp = countrys_;
  countrys_ = NULL;
  return temp;
}
inline void GS2C_Enter_Cross_War::set_allocated_countrys(::pb::GS2C_Country_Info* countrys) {
  delete countrys_;
  countrys_ = countrys;
  if (countrys) {
    set_has_countrys();
  } else {
    clear_has_countrys();
  }
}

// -------------------------------------------------------------------

// C2GS_Use_Cross_Troops

// optional uint32 destCityId = 1;
inline bool C2GS_Use_Cross_Troops::has_destcityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Use_Cross_Troops::set_has_destcityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Use_Cross_Troops::clear_has_destcityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Use_Cross_Troops::clear_destcityid() {
  destcityid_ = 0u;
  clear_has_destcityid();
}
inline ::google::protobuf::uint32 C2GS_Use_Cross_Troops::destcityid() const {
  return destcityid_;
}
inline void C2GS_Use_Cross_Troops::set_destcityid(::google::protobuf::uint32 value) {
  set_has_destcityid();
  destcityid_ = value;
}

// -------------------------------------------------------------------

// CR2G_Country_Awards

// optional uint32 unique_index_id = 1;
inline bool CR2G_Country_Awards::has_unique_index_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CR2G_Country_Awards::set_has_unique_index_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CR2G_Country_Awards::clear_has_unique_index_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CR2G_Country_Awards::clear_unique_index_id() {
  unique_index_id_ = 0u;
  clear_has_unique_index_id();
}
inline ::google::protobuf::uint32 CR2G_Country_Awards::unique_index_id() const {
  return unique_index_id_;
}
inline void CR2G_Country_Awards::set_unique_index_id(::google::protobuf::uint32 value) {
  set_has_unique_index_id();
  unique_index_id_ = value;
}

// optional uint32 defanceAwardToExp = 2;
inline bool CR2G_Country_Awards::has_defanceawardtoexp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CR2G_Country_Awards::set_has_defanceawardtoexp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CR2G_Country_Awards::clear_has_defanceawardtoexp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CR2G_Country_Awards::clear_defanceawardtoexp() {
  defanceawardtoexp_ = 0u;
  clear_has_defanceawardtoexp();
}
inline ::google::protobuf::uint32 CR2G_Country_Awards::defanceawardtoexp() const {
  return defanceawardtoexp_;
}
inline void CR2G_Country_Awards::set_defanceawardtoexp(::google::protobuf::uint32 value) {
  set_has_defanceawardtoexp();
  defanceawardtoexp_ = value;
}

// optional uint32 AttackAwardToExp = 3;
inline bool CR2G_Country_Awards::has_attackawardtoexp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CR2G_Country_Awards::set_has_attackawardtoexp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CR2G_Country_Awards::clear_has_attackawardtoexp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CR2G_Country_Awards::clear_attackawardtoexp() {
  attackawardtoexp_ = 0u;
  clear_has_attackawardtoexp();
}
inline ::google::protobuf::uint32 CR2G_Country_Awards::attackawardtoexp() const {
  return attackawardtoexp_;
}
inline void CR2G_Country_Awards::set_attackawardtoexp(::google::protobuf::uint32 value) {
  set_has_attackawardtoexp();
  attackawardtoexp_ = value;
}

// -------------------------------------------------------------------

// UpdateAwardsChange

// optional uint32 itemid = 1;
inline bool UpdateAwardsChange::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateAwardsChange::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateAwardsChange::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateAwardsChange::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 UpdateAwardsChange::itemid() const {
  return itemid_;
}
inline void UpdateAwardsChange::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 num = 2;
inline bool UpdateAwardsChange::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateAwardsChange::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateAwardsChange::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateAwardsChange::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 UpdateAwardsChange::num() const {
  return num_;
}
inline void UpdateAwardsChange::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// SC2G_Update_Award_Change

// repeated .pb.UpdateAwardsChange awards = 1;
inline int SC2G_Update_Award_Change::awards_size() const {
  return awards_.size();
}
inline void SC2G_Update_Award_Change::clear_awards() {
  awards_.Clear();
}
inline const ::pb::UpdateAwardsChange& SC2G_Update_Award_Change::awards(int index) const {
  return awards_.Get(index);
}
inline ::pb::UpdateAwardsChange* SC2G_Update_Award_Change::mutable_awards(int index) {
  return awards_.Mutable(index);
}
inline ::pb::UpdateAwardsChange* SC2G_Update_Award_Change::add_awards() {
  return awards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::UpdateAwardsChange >&
SC2G_Update_Award_Change::awards() const {
  return awards_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::UpdateAwardsChange >*
SC2G_Update_Award_Change::mutable_awards() {
  return &awards_;
}

// -------------------------------------------------------------------

// GS2C_TakeStarAwardRet

// optional .pb.CROSS_RET ret = 1;
inline bool GS2C_TakeStarAwardRet::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_TakeStarAwardRet::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_TakeStarAwardRet::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_TakeStarAwardRet::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::pb::CROSS_RET GS2C_TakeStarAwardRet::ret() const {
  return static_cast< ::pb::CROSS_RET >(ret_);
}
inline void GS2C_TakeStarAwardRet::set_ret(::pb::CROSS_RET value) {
  assert(::pb::CROSS_RET_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// GS2C_Cross_Donation_Data

// optional .pb.Donate_Type item_type = 1;
inline bool GS2C_Cross_Donation_Data::has_item_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Cross_Donation_Data::set_has_item_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Cross_Donation_Data::clear_has_item_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Cross_Donation_Data::clear_item_type() {
  item_type_ = 0;
  clear_has_item_type();
}
inline ::pb::Donate_Type GS2C_Cross_Donation_Data::item_type() const {
  return static_cast< ::pb::Donate_Type >(item_type_);
}
inline void GS2C_Cross_Donation_Data::set_item_type(::pb::Donate_Type value) {
  assert(::pb::Donate_Type_IsValid(value));
  set_has_item_type();
  item_type_ = value;
}

// optional uint32 count = 2;
inline bool GS2C_Cross_Donation_Data::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Cross_Donation_Data::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Cross_Donation_Data::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Cross_Donation_Data::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 GS2C_Cross_Donation_Data::count() const {
  return count_;
}
inline void GS2C_Cross_Donation_Data::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// GS2C_Cross_Donation_Datas

// repeated .pb.GS2C_Cross_Donation_Data donation_datas = 1;
inline int GS2C_Cross_Donation_Datas::donation_datas_size() const {
  return donation_datas_.size();
}
inline void GS2C_Cross_Donation_Datas::clear_donation_datas() {
  donation_datas_.Clear();
}
inline const ::pb::GS2C_Cross_Donation_Data& GS2C_Cross_Donation_Datas::donation_datas(int index) const {
  return donation_datas_.Get(index);
}
inline ::pb::GS2C_Cross_Donation_Data* GS2C_Cross_Donation_Datas::mutable_donation_datas(int index) {
  return donation_datas_.Mutable(index);
}
inline ::pb::GS2C_Cross_Donation_Data* GS2C_Cross_Donation_Datas::add_donation_datas() {
  return donation_datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Cross_Donation_Data >&
GS2C_Cross_Donation_Datas::donation_datas() const {
  return donation_datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Cross_Donation_Data >*
GS2C_Cross_Donation_Datas::mutable_donation_datas() {
  return &donation_datas_;
}

// -------------------------------------------------------------------

// GC2S_Donate_Goods

// optional .pb.Donate_Type item_type = 1;
inline bool GC2S_Donate_Goods::has_item_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GC2S_Donate_Goods::set_has_item_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GC2S_Donate_Goods::clear_has_item_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GC2S_Donate_Goods::clear_item_type() {
  item_type_ = 0;
  clear_has_item_type();
}
inline ::pb::Donate_Type GC2S_Donate_Goods::item_type() const {
  return static_cast< ::pb::Donate_Type >(item_type_);
}
inline void GC2S_Donate_Goods::set_item_type(::pb::Donate_Type value) {
  assert(::pb::Donate_Type_IsValid(value));
  set_has_item_type();
  item_type_ = value;
}

// -------------------------------------------------------------------

// GS2C_DONATE_RET

// optional .pb.Donate_Type item_type = 1;
inline bool GS2C_DONATE_RET::has_item_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_DONATE_RET::set_has_item_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_DONATE_RET::clear_has_item_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_DONATE_RET::clear_item_type() {
  item_type_ = 0;
  clear_has_item_type();
}
inline ::pb::Donate_Type GS2C_DONATE_RET::item_type() const {
  return static_cast< ::pb::Donate_Type >(item_type_);
}
inline void GS2C_DONATE_RET::set_item_type(::pb::Donate_Type value) {
  assert(::pb::Donate_Type_IsValid(value));
  set_has_item_type();
  item_type_ = value;
}

// optional .pb.CROSS_RET ret = 2;
inline bool GS2C_DONATE_RET::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_DONATE_RET::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_DONATE_RET::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_DONATE_RET::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::pb::CROSS_RET GS2C_DONATE_RET::ret() const {
  return static_cast< ::pb::CROSS_RET >(ret_);
}
inline void GS2C_DONATE_RET::set_ret(::pb::CROSS_RET value) {
  assert(::pb::CROSS_RET_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// optional uint32 count = 3;
inline bool GS2C_DONATE_RET::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_DONATE_RET::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_DONATE_RET::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_DONATE_RET::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 GS2C_DONATE_RET::count() const {
  return count_;
}
inline void GS2C_DONATE_RET::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// GS2C_Cross_Destroy_Task_Info

// optional uint32 task_id = 1;
inline bool GS2C_Cross_Destroy_Task_Info::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Cross_Destroy_Task_Info::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Cross_Destroy_Task_Info::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Cross_Destroy_Task_Info::clear_task_id() {
  task_id_ = 0u;
  clear_has_task_id();
}
inline ::google::protobuf::uint32 GS2C_Cross_Destroy_Task_Info::task_id() const {
  return task_id_;
}
inline void GS2C_Cross_Destroy_Task_Info::set_task_id(::google::protobuf::uint32 value) {
  set_has_task_id();
  task_id_ = value;
}

// optional uint32 progress = 2;
inline bool GS2C_Cross_Destroy_Task_Info::has_progress() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Cross_Destroy_Task_Info::set_has_progress() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Cross_Destroy_Task_Info::clear_has_progress() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Cross_Destroy_Task_Info::clear_progress() {
  progress_ = 0u;
  clear_has_progress();
}
inline ::google::protobuf::uint32 GS2C_Cross_Destroy_Task_Info::progress() const {
  return progress_;
}
inline void GS2C_Cross_Destroy_Task_Info::set_progress(::google::protobuf::uint32 value) {
  set_has_progress();
  progress_ = value;
}

// optional uint32 is_take = 3;
inline bool GS2C_Cross_Destroy_Task_Info::has_is_take() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Cross_Destroy_Task_Info::set_has_is_take() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Cross_Destroy_Task_Info::clear_has_is_take() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Cross_Destroy_Task_Info::clear_is_take() {
  is_take_ = 0u;
  clear_has_is_take();
}
inline ::google::protobuf::uint32 GS2C_Cross_Destroy_Task_Info::is_take() const {
  return is_take_;
}
inline void GS2C_Cross_Destroy_Task_Info::set_is_take(::google::protobuf::uint32 value) {
  set_has_is_take();
  is_take_ = value;
}

// -------------------------------------------------------------------

// GS2C_Cross_Destroy_Task_Infos

// repeated .pb.GS2C_Cross_Destroy_Task_Info task_list = 1;
inline int GS2C_Cross_Destroy_Task_Infos::task_list_size() const {
  return task_list_.size();
}
inline void GS2C_Cross_Destroy_Task_Infos::clear_task_list() {
  task_list_.Clear();
}
inline const ::pb::GS2C_Cross_Destroy_Task_Info& GS2C_Cross_Destroy_Task_Infos::task_list(int index) const {
  return task_list_.Get(index);
}
inline ::pb::GS2C_Cross_Destroy_Task_Info* GS2C_Cross_Destroy_Task_Infos::mutable_task_list(int index) {
  return task_list_.Mutable(index);
}
inline ::pb::GS2C_Cross_Destroy_Task_Info* GS2C_Cross_Destroy_Task_Infos::add_task_list() {
  return task_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Cross_Destroy_Task_Info >&
GS2C_Cross_Destroy_Task_Infos::task_list() const {
  return task_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Cross_Destroy_Task_Info >*
GS2C_Cross_Destroy_Task_Infos::mutable_task_list() {
  return &task_list_;
}

// -------------------------------------------------------------------

// GC2S_Take_Destroy_Task_Award

// optional uint32 task_id = 1;
inline bool GC2S_Take_Destroy_Task_Award::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GC2S_Take_Destroy_Task_Award::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GC2S_Take_Destroy_Task_Award::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GC2S_Take_Destroy_Task_Award::clear_task_id() {
  task_id_ = 0u;
  clear_has_task_id();
}
inline ::google::protobuf::uint32 GC2S_Take_Destroy_Task_Award::task_id() const {
  return task_id_;
}
inline void GC2S_Take_Destroy_Task_Award::set_task_id(::google::protobuf::uint32 value) {
  set_has_task_id();
  task_id_ = value;
}

// -------------------------------------------------------------------

// GS2C_Take_Destroy_Task_Award_Ret

// optional .pb.CROSS_RET ret = 1;
inline bool GS2C_Take_Destroy_Task_Award_Ret::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Take_Destroy_Task_Award_Ret::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Take_Destroy_Task_Award_Ret::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Take_Destroy_Task_Award_Ret::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::pb::CROSS_RET GS2C_Take_Destroy_Task_Award_Ret::ret() const {
  return static_cast< ::pb::CROSS_RET >(ret_);
}
inline void GS2C_Take_Destroy_Task_Award_Ret::set_ret(::pb::CROSS_RET value) {
  assert(::pb::CROSS_RET_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// optional .pb.GS2C_Cross_Destroy_Task_Info task_info = 2;
inline bool GS2C_Take_Destroy_Task_Award_Ret::has_task_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Take_Destroy_Task_Award_Ret::set_has_task_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Take_Destroy_Task_Award_Ret::clear_has_task_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Take_Destroy_Task_Award_Ret::clear_task_info() {
  if (task_info_ != NULL) task_info_->::pb::GS2C_Cross_Destroy_Task_Info::Clear();
  clear_has_task_info();
}
inline const ::pb::GS2C_Cross_Destroy_Task_Info& GS2C_Take_Destroy_Task_Award_Ret::task_info() const {
  return task_info_ != NULL ? *task_info_ : *default_instance_->task_info_;
}
inline ::pb::GS2C_Cross_Destroy_Task_Info* GS2C_Take_Destroy_Task_Award_Ret::mutable_task_info() {
  set_has_task_info();
  if (task_info_ == NULL) task_info_ = new ::pb::GS2C_Cross_Destroy_Task_Info;
  return task_info_;
}
inline ::pb::GS2C_Cross_Destroy_Task_Info* GS2C_Take_Destroy_Task_Award_Ret::release_task_info() {
  clear_has_task_info();
  ::pb::GS2C_Cross_Destroy_Task_Info* temp = task_info_;
  task_info_ = NULL;
  return temp;
}
inline void GS2C_Take_Destroy_Task_Award_Ret::set_allocated_task_info(::pb::GS2C_Cross_Destroy_Task_Info* task_info) {
  delete task_info_;
  task_info_ = task_info;
  if (task_info) {
    set_has_task_info();
  } else {
    clear_has_task_info();
  }
}

// -------------------------------------------------------------------

// C2CR_Attack_Capital

// optional uint32 hero_in_city = 1;
inline bool C2CR_Attack_Capital::has_hero_in_city() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2CR_Attack_Capital::set_has_hero_in_city() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2CR_Attack_Capital::clear_has_hero_in_city() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2CR_Attack_Capital::clear_hero_in_city() {
  hero_in_city_ = 0u;
  clear_has_hero_in_city();
}
inline ::google::protobuf::uint32 C2CR_Attack_Capital::hero_in_city() const {
  return hero_in_city_;
}
inline void C2CR_Attack_Capital::set_hero_in_city(::google::protobuf::uint32 value) {
  set_has_hero_in_city();
  hero_in_city_ = value;
}

// optional uint32 hero_id = 2;
inline bool C2CR_Attack_Capital::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2CR_Attack_Capital::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2CR_Attack_Capital::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2CR_Attack_Capital::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 C2CR_Attack_Capital::hero_id() const {
  return hero_id_;
}
inline void C2CR_Attack_Capital::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// optional uint32 dest_city_id = 3;
inline bool C2CR_Attack_Capital::has_dest_city_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2CR_Attack_Capital::set_has_dest_city_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2CR_Attack_Capital::clear_has_dest_city_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2CR_Attack_Capital::clear_dest_city_id() {
  dest_city_id_ = 0u;
  clear_has_dest_city_id();
}
inline ::google::protobuf::uint32 C2CR_Attack_Capital::dest_city_id() const {
  return dest_city_id_;
}
inline void C2CR_Attack_Capital::set_dest_city_id(::google::protobuf::uint32 value) {
  set_has_dest_city_id();
  dest_city_id_ = value;
}

// -------------------------------------------------------------------

// GS2C_Cross_Kill_Task_Info

// optional uint32 task_id = 1;
inline bool GS2C_Cross_Kill_Task_Info::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Cross_Kill_Task_Info::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Cross_Kill_Task_Info::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Cross_Kill_Task_Info::clear_task_id() {
  task_id_ = 0u;
  clear_has_task_id();
}
inline ::google::protobuf::uint32 GS2C_Cross_Kill_Task_Info::task_id() const {
  return task_id_;
}
inline void GS2C_Cross_Kill_Task_Info::set_task_id(::google::protobuf::uint32 value) {
  set_has_task_id();
  task_id_ = value;
}

// optional uint32 progress = 2;
inline bool GS2C_Cross_Kill_Task_Info::has_progress() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Cross_Kill_Task_Info::set_has_progress() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Cross_Kill_Task_Info::clear_has_progress() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Cross_Kill_Task_Info::clear_progress() {
  progress_ = 0u;
  clear_has_progress();
}
inline ::google::protobuf::uint32 GS2C_Cross_Kill_Task_Info::progress() const {
  return progress_;
}
inline void GS2C_Cross_Kill_Task_Info::set_progress(::google::protobuf::uint32 value) {
  set_has_progress();
  progress_ = value;
}

// optional uint32 is_take = 3;
inline bool GS2C_Cross_Kill_Task_Info::has_is_take() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Cross_Kill_Task_Info::set_has_is_take() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Cross_Kill_Task_Info::clear_has_is_take() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Cross_Kill_Task_Info::clear_is_take() {
  is_take_ = 0u;
  clear_has_is_take();
}
inline ::google::protobuf::uint32 GS2C_Cross_Kill_Task_Info::is_take() const {
  return is_take_;
}
inline void GS2C_Cross_Kill_Task_Info::set_is_take(::google::protobuf::uint32 value) {
  set_has_is_take();
  is_take_ = value;
}

// -------------------------------------------------------------------

// GC2S_Take_Kill_Task_Award

// optional uint32 phase_index = 1;
inline bool GC2S_Take_Kill_Task_Award::has_phase_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GC2S_Take_Kill_Task_Award::set_has_phase_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GC2S_Take_Kill_Task_Award::clear_has_phase_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GC2S_Take_Kill_Task_Award::clear_phase_index() {
  phase_index_ = 0u;
  clear_has_phase_index();
}
inline ::google::protobuf::uint32 GC2S_Take_Kill_Task_Award::phase_index() const {
  return phase_index_;
}
inline void GC2S_Take_Kill_Task_Award::set_phase_index(::google::protobuf::uint32 value) {
  set_has_phase_index();
  phase_index_ = value;
}

// -------------------------------------------------------------------

// GS2C_Take_Kill_Task_Award_Ret

// optional .pb.CROSS_RET ret = 1;
inline bool GS2C_Take_Kill_Task_Award_Ret::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Take_Kill_Task_Award_Ret::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Take_Kill_Task_Award_Ret::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Take_Kill_Task_Award_Ret::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::pb::CROSS_RET GS2C_Take_Kill_Task_Award_Ret::ret() const {
  return static_cast< ::pb::CROSS_RET >(ret_);
}
inline void GS2C_Take_Kill_Task_Award_Ret::set_ret(::pb::CROSS_RET value) {
  assert(::pb::CROSS_RET_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// optional .pb.GS2C_Cross_Kill_Task_Info task_info = 2;
inline bool GS2C_Take_Kill_Task_Award_Ret::has_task_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Take_Kill_Task_Award_Ret::set_has_task_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Take_Kill_Task_Award_Ret::clear_has_task_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Take_Kill_Task_Award_Ret::clear_task_info() {
  if (task_info_ != NULL) task_info_->::pb::GS2C_Cross_Kill_Task_Info::Clear();
  clear_has_task_info();
}
inline const ::pb::GS2C_Cross_Kill_Task_Info& GS2C_Take_Kill_Task_Award_Ret::task_info() const {
  return task_info_ != NULL ? *task_info_ : *default_instance_->task_info_;
}
inline ::pb::GS2C_Cross_Kill_Task_Info* GS2C_Take_Kill_Task_Award_Ret::mutable_task_info() {
  set_has_task_info();
  if (task_info_ == NULL) task_info_ = new ::pb::GS2C_Cross_Kill_Task_Info;
  return task_info_;
}
inline ::pb::GS2C_Cross_Kill_Task_Info* GS2C_Take_Kill_Task_Award_Ret::release_task_info() {
  clear_has_task_info();
  ::pb::GS2C_Cross_Kill_Task_Info* temp = task_info_;
  task_info_ = NULL;
  return temp;
}
inline void GS2C_Take_Kill_Task_Award_Ret::set_allocated_task_info(::pb::GS2C_Cross_Kill_Task_Info* task_info) {
  delete task_info_;
  task_info_ = task_info;
  if (task_info) {
    set_has_task_info();
  } else {
    clear_has_task_info();
  }
}

// -------------------------------------------------------------------

// GS2C_Cross_Ammo_Info

// optional .pb.ArsenalType itemType = 1;
inline bool GS2C_Cross_Ammo_Info::has_itemtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Cross_Ammo_Info::set_has_itemtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Cross_Ammo_Info::clear_has_itemtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Cross_Ammo_Info::clear_itemtype() {
  itemtype_ = 1;
  clear_has_itemtype();
}
inline ::pb::ArsenalType GS2C_Cross_Ammo_Info::itemtype() const {
  return static_cast< ::pb::ArsenalType >(itemtype_);
}
inline void GS2C_Cross_Ammo_Info::set_itemtype(::pb::ArsenalType value) {
  assert(::pb::ArsenalType_IsValid(value));
  set_has_itemtype();
  itemtype_ = value;
}

// optional uint32 remain_num = 2;
inline bool GS2C_Cross_Ammo_Info::has_remain_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Cross_Ammo_Info::set_has_remain_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Cross_Ammo_Info::clear_has_remain_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Cross_Ammo_Info::clear_remain_num() {
  remain_num_ = 0u;
  clear_has_remain_num();
}
inline ::google::protobuf::uint32 GS2C_Cross_Ammo_Info::remain_num() const {
  return remain_num_;
}
inline void GS2C_Cross_Ammo_Info::set_remain_num(::google::protobuf::uint32 value) {
  set_has_remain_num();
  remain_num_ = value;
}

// -------------------------------------------------------------------

// GS2C_Cross_Ammo_Infos

// repeated .pb.GS2C_Cross_Ammo_Info task_list = 1;
inline int GS2C_Cross_Ammo_Infos::task_list_size() const {
  return task_list_.size();
}
inline void GS2C_Cross_Ammo_Infos::clear_task_list() {
  task_list_.Clear();
}
inline const ::pb::GS2C_Cross_Ammo_Info& GS2C_Cross_Ammo_Infos::task_list(int index) const {
  return task_list_.Get(index);
}
inline ::pb::GS2C_Cross_Ammo_Info* GS2C_Cross_Ammo_Infos::mutable_task_list(int index) {
  return task_list_.Mutable(index);
}
inline ::pb::GS2C_Cross_Ammo_Info* GS2C_Cross_Ammo_Infos::add_task_list() {
  return task_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Cross_Ammo_Info >&
GS2C_Cross_Ammo_Infos::task_list() const {
  return task_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Cross_Ammo_Info >*
GS2C_Cross_Ammo_Infos::mutable_task_list() {
  return &task_list_;
}

// -------------------------------------------------------------------

// GC2S_Buy_Ammo

// optional .pb.ArsenalType itemType = 1;
inline bool GC2S_Buy_Ammo::has_itemtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GC2S_Buy_Ammo::set_has_itemtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GC2S_Buy_Ammo::clear_has_itemtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GC2S_Buy_Ammo::clear_itemtype() {
  itemtype_ = 1;
  clear_has_itemtype();
}
inline ::pb::ArsenalType GC2S_Buy_Ammo::itemtype() const {
  return static_cast< ::pb::ArsenalType >(itemtype_);
}
inline void GC2S_Buy_Ammo::set_itemtype(::pb::ArsenalType value) {
  assert(::pb::ArsenalType_IsValid(value));
  set_has_itemtype();
  itemtype_ = value;
}

// -------------------------------------------------------------------

// GS2C_Buy_Ammo_Rsp

// optional .pb.CROSS_RET ret = 1;
inline bool GS2C_Buy_Ammo_Rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Buy_Ammo_Rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Buy_Ammo_Rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Buy_Ammo_Rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::pb::CROSS_RET GS2C_Buy_Ammo_Rsp::ret() const {
  return static_cast< ::pb::CROSS_RET >(ret_);
}
inline void GS2C_Buy_Ammo_Rsp::set_ret(::pb::CROSS_RET value) {
  assert(::pb::CROSS_RET_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// optional uint64 playerid = 2;
inline bool GS2C_Buy_Ammo_Rsp::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Buy_Ammo_Rsp::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Buy_Ammo_Rsp::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Buy_Ammo_Rsp::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::uint64 GS2C_Buy_Ammo_Rsp::playerid() const {
  return playerid_;
}
inline void GS2C_Buy_Ammo_Rsp::set_playerid(::google::protobuf::uint64 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional .pb.GS2C_Cross_Ammo_Info ammo_info = 3;
inline bool GS2C_Buy_Ammo_Rsp::has_ammo_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Buy_Ammo_Rsp::set_has_ammo_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Buy_Ammo_Rsp::clear_has_ammo_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Buy_Ammo_Rsp::clear_ammo_info() {
  if (ammo_info_ != NULL) ammo_info_->::pb::GS2C_Cross_Ammo_Info::Clear();
  clear_has_ammo_info();
}
inline const ::pb::GS2C_Cross_Ammo_Info& GS2C_Buy_Ammo_Rsp::ammo_info() const {
  return ammo_info_ != NULL ? *ammo_info_ : *default_instance_->ammo_info_;
}
inline ::pb::GS2C_Cross_Ammo_Info* GS2C_Buy_Ammo_Rsp::mutable_ammo_info() {
  set_has_ammo_info();
  if (ammo_info_ == NULL) ammo_info_ = new ::pb::GS2C_Cross_Ammo_Info;
  return ammo_info_;
}
inline ::pb::GS2C_Cross_Ammo_Info* GS2C_Buy_Ammo_Rsp::release_ammo_info() {
  clear_has_ammo_info();
  ::pb::GS2C_Cross_Ammo_Info* temp = ammo_info_;
  ammo_info_ = NULL;
  return temp;
}
inline void GS2C_Buy_Ammo_Rsp::set_allocated_ammo_info(::pb::GS2C_Cross_Ammo_Info* ammo_info) {
  delete ammo_info_;
  ammo_info_ = ammo_info;
  if (ammo_info) {
    set_has_ammo_info();
  } else {
    clear_has_ammo_info();
  }
}

// optional uint64 KillTimeEndtime = 4;
inline bool GS2C_Buy_Ammo_Rsp::has_killtimeendtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Buy_Ammo_Rsp::set_has_killtimeendtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Buy_Ammo_Rsp::clear_has_killtimeendtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Buy_Ammo_Rsp::clear_killtimeendtime() {
  killtimeendtime_ = GOOGLE_ULONGLONG(0);
  clear_has_killtimeendtime();
}
inline ::google::protobuf::uint64 GS2C_Buy_Ammo_Rsp::killtimeendtime() const {
  return killtimeendtime_;
}
inline void GS2C_Buy_Ammo_Rsp::set_killtimeendtime(::google::protobuf::uint64 value) {
  set_has_killtimeendtime();
  killtimeendtime_ = value;
}

// optional uint32 hammerNum = 5;
inline bool GS2C_Buy_Ammo_Rsp::has_hammernum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GS2C_Buy_Ammo_Rsp::set_has_hammernum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GS2C_Buy_Ammo_Rsp::clear_has_hammernum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GS2C_Buy_Ammo_Rsp::clear_hammernum() {
  hammernum_ = 0u;
  clear_has_hammernum();
}
inline ::google::protobuf::uint32 GS2C_Buy_Ammo_Rsp::hammernum() const {
  return hammernum_;
}
inline void GS2C_Buy_Ammo_Rsp::set_hammernum(::google::protobuf::uint32 value) {
  set_has_hammernum();
  hammernum_ = value;
}

// optional uint64 shieldEndTime = 6;
inline bool GS2C_Buy_Ammo_Rsp::has_shieldendtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GS2C_Buy_Ammo_Rsp::set_has_shieldendtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GS2C_Buy_Ammo_Rsp::clear_has_shieldendtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GS2C_Buy_Ammo_Rsp::clear_shieldendtime() {
  shieldendtime_ = GOOGLE_ULONGLONG(0);
  clear_has_shieldendtime();
}
inline ::google::protobuf::uint64 GS2C_Buy_Ammo_Rsp::shieldendtime() const {
  return shieldendtime_;
}
inline void GS2C_Buy_Ammo_Rsp::set_shieldendtime(::google::protobuf::uint64 value) {
  set_has_shieldendtime();
  shieldendtime_ = value;
}

// -------------------------------------------------------------------

// GS2C_Use_Attack_Hummer

// optional uint32 country_id = 1;
inline bool GS2C_Use_Attack_Hummer::has_country_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Use_Attack_Hummer::set_has_country_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Use_Attack_Hummer::clear_has_country_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Use_Attack_Hummer::clear_country_id() {
  country_id_ = 0u;
  clear_has_country_id();
}
inline ::google::protobuf::uint32 GS2C_Use_Attack_Hummer::country_id() const {
  return country_id_;
}
inline void GS2C_Use_Attack_Hummer::set_country_id(::google::protobuf::uint32 value) {
  set_has_country_id();
  country_id_ = value;
}

// optional uint32 heroid = 2;
inline bool GS2C_Use_Attack_Hummer::has_heroid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Use_Attack_Hummer::set_has_heroid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Use_Attack_Hummer::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Use_Attack_Hummer::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 GS2C_Use_Attack_Hummer::heroid() const {
  return heroid_;
}
inline void GS2C_Use_Attack_Hummer::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// -------------------------------------------------------------------

// GS2C_Attack_Result

// optional .pb.CROSS_RET ret = 1;
inline bool GS2C_Attack_Result::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Attack_Result::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Attack_Result::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Attack_Result::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::pb::CROSS_RET GS2C_Attack_Result::ret() const {
  return static_cast< ::pb::CROSS_RET >(ret_);
}
inline void GS2C_Attack_Result::set_ret(::pb::CROSS_RET value) {
  assert(::pb::CROSS_RET_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// optional uint32 hammerNum = 2;
inline bool GS2C_Attack_Result::has_hammernum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Attack_Result::set_has_hammernum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Attack_Result::clear_has_hammernum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Attack_Result::clear_hammernum() {
  hammernum_ = 0u;
  clear_has_hammernum();
}
inline ::google::protobuf::uint32 GS2C_Attack_Result::hammernum() const {
  return hammernum_;
}
inline void GS2C_Attack_Result::set_hammernum(::google::protobuf::uint32 value) {
  set_has_hammernum();
  hammernum_ = value;
}

// -------------------------------------------------------------------

// GS2C_Cross_Rank_Info

// optional uint32 rank_num = 1;
inline bool GS2C_Cross_Rank_Info::has_rank_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Cross_Rank_Info::set_has_rank_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Cross_Rank_Info::clear_has_rank_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Cross_Rank_Info::clear_rank_num() {
  rank_num_ = 0u;
  clear_has_rank_num();
}
inline ::google::protobuf::uint32 GS2C_Cross_Rank_Info::rank_num() const {
  return rank_num_;
}
inline void GS2C_Cross_Rank_Info::set_rank_num(::google::protobuf::uint32 value) {
  set_has_rank_num();
  rank_num_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::CROSS_RET>() {
  return ::pb::CROSS_RET_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::Donate_Type>() {
  return ::pb::Donate_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ArsenalType>() {
  return ::pb::ArsenalType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CrossWar_2eproto__INCLUDED
