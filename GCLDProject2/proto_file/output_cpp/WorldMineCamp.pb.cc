// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WorldMineCamp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WorldMineCamp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* C2GS_MineCampList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_MineCampList_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Player_DealMine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Player_DealMine_reflection_ = NULL;
const ::google::protobuf::Descriptor* Struct_CountryMine_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Struct_CountryMine_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* Struct_NormalMine_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Struct_NormalMine_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_MineCampList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_MineCampList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_DealMine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_DealMine_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_WorldMineCamp_2eproto() {
  protobuf_AddDesc_WorldMineCamp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WorldMineCamp.proto");
  GOOGLE_CHECK(file != NULL);
  C2GS_MineCampList_descriptor_ = file->message_type(0);
  static const int C2GS_MineCampList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_MineCampList, mine_field_id_),
  };
  C2GS_MineCampList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_MineCampList_descriptor_,
      C2GS_MineCampList::default_instance_,
      C2GS_MineCampList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_MineCampList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_MineCampList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_MineCampList));
  C2GS_Player_DealMine_descriptor_ = file->message_type(1);
  static const int C2GS_Player_DealMine_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Player_DealMine, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Player_DealMine, mine_field_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Player_DealMine, mine_placeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Player_DealMine, deal_id_),
  };
  C2GS_Player_DealMine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Player_DealMine_descriptor_,
      C2GS_Player_DealMine::default_instance_,
      C2GS_Player_DealMine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Player_DealMine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Player_DealMine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Player_DealMine));
  Struct_CountryMine_Info_descriptor_ = file->message_type(2);
  static const int Struct_CountryMine_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_CountryMine_Info, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_CountryMine_Info, state_),
  };
  Struct_CountryMine_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Struct_CountryMine_Info_descriptor_,
      Struct_CountryMine_Info::default_instance_,
      Struct_CountryMine_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_CountryMine_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_CountryMine_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Struct_CountryMine_Info));
  Struct_NormalMine_Info_descriptor_ = file->message_type(3);
  static const int Struct_NormalMine_Info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_NormalMine_Info, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_NormalMine_Info, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_NormalMine_Info, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_NormalMine_Info, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_NormalMine_Info, lefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_NormalMine_Info, res1_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_NormalMine_Info, res2_num_),
  };
  Struct_NormalMine_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Struct_NormalMine_Info_descriptor_,
      Struct_NormalMine_Info::default_instance_,
      Struct_NormalMine_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_NormalMine_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_NormalMine_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Struct_NormalMine_Info));
  GS2C_MineCampList_descriptor_ = file->message_type(4);
  static const int GS2C_MineCampList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MineCampList, country_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MineCampList, normal_info_),
  };
  GS2C_MineCampList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_MineCampList_descriptor_,
      GS2C_MineCampList::default_instance_,
      GS2C_MineCampList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MineCampList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MineCampList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_MineCampList));
  GS2C_DealMine_descriptor_ = file->message_type(5);
  static const int GS2C_DealMine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DealMine, res1_gain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DealMine, res2_gain_),
  };
  GS2C_DealMine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_DealMine_descriptor_,
      GS2C_DealMine::default_instance_,
      GS2C_DealMine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DealMine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DealMine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_DealMine));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WorldMineCamp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_MineCampList_descriptor_, &C2GS_MineCampList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Player_DealMine_descriptor_, &C2GS_Player_DealMine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Struct_CountryMine_Info_descriptor_, &Struct_CountryMine_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Struct_NormalMine_Info_descriptor_, &Struct_NormalMine_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_MineCampList_descriptor_, &GS2C_MineCampList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_DealMine_descriptor_, &GS2C_DealMine::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WorldMineCamp_2eproto() {
  delete C2GS_MineCampList::default_instance_;
  delete C2GS_MineCampList_reflection_;
  delete C2GS_Player_DealMine::default_instance_;
  delete C2GS_Player_DealMine_reflection_;
  delete Struct_CountryMine_Info::default_instance_;
  delete Struct_CountryMine_Info_reflection_;
  delete Struct_NormalMine_Info::default_instance_;
  delete Struct_NormalMine_Info_reflection_;
  delete GS2C_MineCampList::default_instance_;
  delete GS2C_MineCampList_reflection_;
  delete GS2C_DealMine::default_instance_;
  delete GS2C_DealMine_reflection_;
}

void protobuf_AddDesc_WorldMineCamp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023WorldMineCamp.proto\022\002pb\"*\n\021C2GS_MineCa"
    "mpList\022\025\n\rmine_field_id\030\001 \002(\r\"g\n\024C2GS_Pl"
    "ayer_DealMine\022\021\n\tplayer_id\030\001 \002(\r\022\025\n\rmine"
    "_field_id\030\002 \003(\r\022\024\n\014mine_placeid\030\003 \002(\r\022\017\n"
    "\007deal_id\030\004 \002(\r\"9\n\027Struct_CountryMine_Inf"
    "o\022\017\n\007country\030\001 \002(\r\022\r\n\005state\030\002 \002(\r\"\226\001\n\026St"
    "ruct_NormalMine_Info\022\021\n\tplayer_id\030\001 \002(\r\022"
    "\023\n\013player_name\030\002 \002(\r\022\017\n\007country\030\003 \002(\r\022\r\n"
    "\005state\030\004 \002(\r\022\020\n\010lefttime\030\005 \002(\r\022\020\n\010res1_n"
    "um\030\006 \002(\r\022\020\n\010res2_num\030\007 \002(\r\"w\n\021GS2C_MineC"
    "ampList\0221\n\014country_info\030\001 \002(\0132\033.pb.Struc"
    "t_CountryMine_Info\022/\n\013normal_info\030\002 \003(\0132"
    "\032.pb.Struct_NormalMine_Info\"5\n\rGS2C_Deal"
    "Mine\022\021\n\tres1_gain\030\001 \002(\r\022\021\n\tres2_gain\030\002 \002"
    "(\r", 562);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WorldMineCamp.proto", &protobuf_RegisterTypes);
  C2GS_MineCampList::default_instance_ = new C2GS_MineCampList();
  C2GS_Player_DealMine::default_instance_ = new C2GS_Player_DealMine();
  Struct_CountryMine_Info::default_instance_ = new Struct_CountryMine_Info();
  Struct_NormalMine_Info::default_instance_ = new Struct_NormalMine_Info();
  GS2C_MineCampList::default_instance_ = new GS2C_MineCampList();
  GS2C_DealMine::default_instance_ = new GS2C_DealMine();
  C2GS_MineCampList::default_instance_->InitAsDefaultInstance();
  C2GS_Player_DealMine::default_instance_->InitAsDefaultInstance();
  Struct_CountryMine_Info::default_instance_->InitAsDefaultInstance();
  Struct_NormalMine_Info::default_instance_->InitAsDefaultInstance();
  GS2C_MineCampList::default_instance_->InitAsDefaultInstance();
  GS2C_DealMine::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WorldMineCamp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WorldMineCamp_2eproto {
  StaticDescriptorInitializer_WorldMineCamp_2eproto() {
    protobuf_AddDesc_WorldMineCamp_2eproto();
  }
} static_descriptor_initializer_WorldMineCamp_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int C2GS_MineCampList::kMineFieldIdFieldNumber;
#endif  // !_MSC_VER

C2GS_MineCampList::C2GS_MineCampList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_MineCampList::InitAsDefaultInstance() {
}

C2GS_MineCampList::C2GS_MineCampList(const C2GS_MineCampList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_MineCampList::SharedCtor() {
  _cached_size_ = 0;
  mine_field_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_MineCampList::~C2GS_MineCampList() {
  SharedDtor();
}

void C2GS_MineCampList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_MineCampList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_MineCampList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_MineCampList_descriptor_;
}

const C2GS_MineCampList& C2GS_MineCampList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldMineCamp_2eproto();
  return *default_instance_;
}

C2GS_MineCampList* C2GS_MineCampList::default_instance_ = NULL;

C2GS_MineCampList* C2GS_MineCampList::New() const {
  return new C2GS_MineCampList;
}

void C2GS_MineCampList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mine_field_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_MineCampList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mine_field_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mine_field_id_)));
          set_has_mine_field_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_MineCampList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mine_field_id = 1;
  if (has_mine_field_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mine_field_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_MineCampList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mine_field_id = 1;
  if (has_mine_field_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mine_field_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_MineCampList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mine_field_id = 1;
    if (has_mine_field_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mine_field_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_MineCampList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_MineCampList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_MineCampList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_MineCampList::MergeFrom(const C2GS_MineCampList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mine_field_id()) {
      set_mine_field_id(from.mine_field_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_MineCampList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_MineCampList::CopyFrom(const C2GS_MineCampList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_MineCampList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_MineCampList::Swap(C2GS_MineCampList* other) {
  if (other != this) {
    std::swap(mine_field_id_, other->mine_field_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_MineCampList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_MineCampList_descriptor_;
  metadata.reflection = C2GS_MineCampList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Player_DealMine::kPlayerIdFieldNumber;
const int C2GS_Player_DealMine::kMineFieldIdFieldNumber;
const int C2GS_Player_DealMine::kMinePlaceidFieldNumber;
const int C2GS_Player_DealMine::kDealIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Player_DealMine::C2GS_Player_DealMine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Player_DealMine::InitAsDefaultInstance() {
}

C2GS_Player_DealMine::C2GS_Player_DealMine(const C2GS_Player_DealMine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Player_DealMine::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  mine_placeid_ = 0u;
  deal_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Player_DealMine::~C2GS_Player_DealMine() {
  SharedDtor();
}

void C2GS_Player_DealMine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Player_DealMine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Player_DealMine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Player_DealMine_descriptor_;
}

const C2GS_Player_DealMine& C2GS_Player_DealMine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldMineCamp_2eproto();
  return *default_instance_;
}

C2GS_Player_DealMine* C2GS_Player_DealMine::default_instance_ = NULL;

C2GS_Player_DealMine* C2GS_Player_DealMine::New() const {
  return new C2GS_Player_DealMine;
}

void C2GS_Player_DealMine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0u;
    mine_placeid_ = 0u;
    deal_id_ = 0u;
  }
  mine_field_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Player_DealMine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mine_field_id;
        break;
      }

      // repeated uint32 mine_field_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mine_field_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_mine_field_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mine_field_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mine_field_id;
        if (input->ExpectTag(24)) goto parse_mine_placeid;
        break;
      }

      // required uint32 mine_placeid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mine_placeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mine_placeid_)));
          set_has_mine_placeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_deal_id;
        break;
      }

      // required uint32 deal_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deal_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deal_id_)));
          set_has_deal_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Player_DealMine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // repeated uint32 mine_field_id = 2;
  for (int i = 0; i < this->mine_field_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->mine_field_id(i), output);
  }

  // required uint32 mine_placeid = 3;
  if (has_mine_placeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mine_placeid(), output);
  }

  // required uint32 deal_id = 4;
  if (has_deal_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->deal_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Player_DealMine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // repeated uint32 mine_field_id = 2;
  for (int i = 0; i < this->mine_field_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->mine_field_id(i), target);
  }

  // required uint32 mine_placeid = 3;
  if (has_mine_placeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mine_placeid(), target);
  }

  // required uint32 deal_id = 4;
  if (has_deal_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->deal_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Player_DealMine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // required uint32 mine_placeid = 3;
    if (has_mine_placeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mine_placeid());
    }

    // required uint32 deal_id = 4;
    if (has_deal_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deal_id());
    }

  }
  // repeated uint32 mine_field_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mine_field_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mine_field_id(i));
    }
    total_size += 1 * this->mine_field_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Player_DealMine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Player_DealMine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Player_DealMine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Player_DealMine::MergeFrom(const C2GS_Player_DealMine& from) {
  GOOGLE_CHECK_NE(&from, this);
  mine_field_id_.MergeFrom(from.mine_field_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_mine_placeid()) {
      set_mine_placeid(from.mine_placeid());
    }
    if (from.has_deal_id()) {
      set_deal_id(from.deal_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Player_DealMine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Player_DealMine::CopyFrom(const C2GS_Player_DealMine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Player_DealMine::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void C2GS_Player_DealMine::Swap(C2GS_Player_DealMine* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    mine_field_id_.Swap(&other->mine_field_id_);
    std::swap(mine_placeid_, other->mine_placeid_);
    std::swap(deal_id_, other->deal_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Player_DealMine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Player_DealMine_descriptor_;
  metadata.reflection = C2GS_Player_DealMine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Struct_CountryMine_Info::kCountryFieldNumber;
const int Struct_CountryMine_Info::kStateFieldNumber;
#endif  // !_MSC_VER

Struct_CountryMine_Info::Struct_CountryMine_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Struct_CountryMine_Info::InitAsDefaultInstance() {
}

Struct_CountryMine_Info::Struct_CountryMine_Info(const Struct_CountryMine_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Struct_CountryMine_Info::SharedCtor() {
  _cached_size_ = 0;
  country_ = 0u;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Struct_CountryMine_Info::~Struct_CountryMine_Info() {
  SharedDtor();
}

void Struct_CountryMine_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Struct_CountryMine_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Struct_CountryMine_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Struct_CountryMine_Info_descriptor_;
}

const Struct_CountryMine_Info& Struct_CountryMine_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldMineCamp_2eproto();
  return *default_instance_;
}

Struct_CountryMine_Info* Struct_CountryMine_Info::default_instance_ = NULL;

Struct_CountryMine_Info* Struct_CountryMine_Info::New() const {
  return new Struct_CountryMine_Info;
}

void Struct_CountryMine_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    country_ = 0u;
    state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Struct_CountryMine_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 country = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required uint32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Struct_CountryMine_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 country = 1;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->country(), output);
  }

  // required uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Struct_CountryMine_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 country = 1;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->country(), target);
  }

  // required uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Struct_CountryMine_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 country = 1;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country());
    }

    // required uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Struct_CountryMine_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Struct_CountryMine_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Struct_CountryMine_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Struct_CountryMine_Info::MergeFrom(const Struct_CountryMine_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Struct_CountryMine_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Struct_CountryMine_Info::CopyFrom(const Struct_CountryMine_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Struct_CountryMine_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Struct_CountryMine_Info::Swap(Struct_CountryMine_Info* other) {
  if (other != this) {
    std::swap(country_, other->country_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Struct_CountryMine_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Struct_CountryMine_Info_descriptor_;
  metadata.reflection = Struct_CountryMine_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Struct_NormalMine_Info::kPlayerIdFieldNumber;
const int Struct_NormalMine_Info::kPlayerNameFieldNumber;
const int Struct_NormalMine_Info::kCountryFieldNumber;
const int Struct_NormalMine_Info::kStateFieldNumber;
const int Struct_NormalMine_Info::kLefttimeFieldNumber;
const int Struct_NormalMine_Info::kRes1NumFieldNumber;
const int Struct_NormalMine_Info::kRes2NumFieldNumber;
#endif  // !_MSC_VER

Struct_NormalMine_Info::Struct_NormalMine_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Struct_NormalMine_Info::InitAsDefaultInstance() {
}

Struct_NormalMine_Info::Struct_NormalMine_Info(const Struct_NormalMine_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Struct_NormalMine_Info::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  player_name_ = 0u;
  country_ = 0u;
  state_ = 0u;
  lefttime_ = 0u;
  res1_num_ = 0u;
  res2_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Struct_NormalMine_Info::~Struct_NormalMine_Info() {
  SharedDtor();
}

void Struct_NormalMine_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Struct_NormalMine_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Struct_NormalMine_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Struct_NormalMine_Info_descriptor_;
}

const Struct_NormalMine_Info& Struct_NormalMine_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldMineCamp_2eproto();
  return *default_instance_;
}

Struct_NormalMine_Info* Struct_NormalMine_Info::default_instance_ = NULL;

Struct_NormalMine_Info* Struct_NormalMine_Info::New() const {
  return new Struct_NormalMine_Info;
}

void Struct_NormalMine_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0u;
    player_name_ = 0u;
    country_ = 0u;
    state_ = 0u;
    lefttime_ = 0u;
    res1_num_ = 0u;
    res2_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Struct_NormalMine_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_name;
        break;
      }

      // required uint32 player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_name_)));
          set_has_player_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_country;
        break;
      }

      // required uint32 country = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // required uint32 state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lefttime;
        break;
      }

      // required uint32 lefttime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lefttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_res1_num;
        break;
      }

      // required uint32 res1_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res1_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &res1_num_)));
          set_has_res1_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_res2_num;
        break;
      }

      // required uint32 res2_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res2_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &res2_num_)));
          set_has_res2_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Struct_NormalMine_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // required uint32 player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_name(), output);
  }

  // required uint32 country = 3;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->country(), output);
  }

  // required uint32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->state(), output);
  }

  // required uint32 lefttime = 5;
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lefttime(), output);
  }

  // required uint32 res1_num = 6;
  if (has_res1_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->res1_num(), output);
  }

  // required uint32 res2_num = 7;
  if (has_res2_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->res2_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Struct_NormalMine_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // required uint32 player_name = 2;
  if (has_player_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_name(), target);
  }

  // required uint32 country = 3;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->country(), target);
  }

  // required uint32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->state(), target);
  }

  // required uint32 lefttime = 5;
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lefttime(), target);
  }

  // required uint32 res1_num = 6;
  if (has_res1_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->res1_num(), target);
  }

  // required uint32 res2_num = 7;
  if (has_res2_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->res2_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Struct_NormalMine_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // required uint32 player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_name());
    }

    // required uint32 country = 3;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country());
    }

    // required uint32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // required uint32 lefttime = 5;
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lefttime());
    }

    // required uint32 res1_num = 6;
    if (has_res1_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->res1_num());
    }

    // required uint32 res2_num = 7;
    if (has_res2_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->res2_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Struct_NormalMine_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Struct_NormalMine_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Struct_NormalMine_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Struct_NormalMine_Info::MergeFrom(const Struct_NormalMine_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
    if (from.has_res1_num()) {
      set_res1_num(from.res1_num());
    }
    if (from.has_res2_num()) {
      set_res2_num(from.res2_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Struct_NormalMine_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Struct_NormalMine_Info::CopyFrom(const Struct_NormalMine_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Struct_NormalMine_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void Struct_NormalMine_Info::Swap(Struct_NormalMine_Info* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(player_name_, other->player_name_);
    std::swap(country_, other->country_);
    std::swap(state_, other->state_);
    std::swap(lefttime_, other->lefttime_);
    std::swap(res1_num_, other->res1_num_);
    std::swap(res2_num_, other->res2_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Struct_NormalMine_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Struct_NormalMine_Info_descriptor_;
  metadata.reflection = Struct_NormalMine_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_MineCampList::kCountryInfoFieldNumber;
const int GS2C_MineCampList::kNormalInfoFieldNumber;
#endif  // !_MSC_VER

GS2C_MineCampList::GS2C_MineCampList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_MineCampList::InitAsDefaultInstance() {
  country_info_ = const_cast< ::pb::Struct_CountryMine_Info*>(&::pb::Struct_CountryMine_Info::default_instance());
}

GS2C_MineCampList::GS2C_MineCampList(const GS2C_MineCampList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_MineCampList::SharedCtor() {
  _cached_size_ = 0;
  country_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_MineCampList::~GS2C_MineCampList() {
  SharedDtor();
}

void GS2C_MineCampList::SharedDtor() {
  if (this != default_instance_) {
    delete country_info_;
  }
}

void GS2C_MineCampList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_MineCampList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_MineCampList_descriptor_;
}

const GS2C_MineCampList& GS2C_MineCampList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldMineCamp_2eproto();
  return *default_instance_;
}

GS2C_MineCampList* GS2C_MineCampList::default_instance_ = NULL;

GS2C_MineCampList* GS2C_MineCampList::New() const {
  return new GS2C_MineCampList;
}

void GS2C_MineCampList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_country_info()) {
      if (country_info_ != NULL) country_info_->::pb::Struct_CountryMine_Info::Clear();
    }
  }
  normal_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_MineCampList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.Struct_CountryMine_Info country_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_country_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_normal_info;
        break;
      }

      // repeated .pb.Struct_NormalMine_Info normal_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normal_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_normal_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_normal_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_MineCampList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.Struct_CountryMine_Info country_info = 1;
  if (has_country_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->country_info(), output);
  }

  // repeated .pb.Struct_NormalMine_Info normal_info = 2;
  for (int i = 0; i < this->normal_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->normal_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_MineCampList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.Struct_CountryMine_Info country_info = 1;
  if (has_country_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->country_info(), target);
  }

  // repeated .pb.Struct_NormalMine_Info normal_info = 2;
  for (int i = 0; i < this->normal_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->normal_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_MineCampList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.Struct_CountryMine_Info country_info = 1;
    if (has_country_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->country_info());
    }

  }
  // repeated .pb.Struct_NormalMine_Info normal_info = 2;
  total_size += 1 * this->normal_info_size();
  for (int i = 0; i < this->normal_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->normal_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_MineCampList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_MineCampList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_MineCampList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_MineCampList::MergeFrom(const GS2C_MineCampList& from) {
  GOOGLE_CHECK_NE(&from, this);
  normal_info_.MergeFrom(from.normal_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country_info()) {
      mutable_country_info()->::pb::Struct_CountryMine_Info::MergeFrom(from.country_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_MineCampList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_MineCampList::CopyFrom(const GS2C_MineCampList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_MineCampList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_country_info()) {
    if (!this->country_info().IsInitialized()) return false;
  }
  for (int i = 0; i < normal_info_size(); i++) {
    if (!this->normal_info(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_MineCampList::Swap(GS2C_MineCampList* other) {
  if (other != this) {
    std::swap(country_info_, other->country_info_);
    normal_info_.Swap(&other->normal_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_MineCampList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_MineCampList_descriptor_;
  metadata.reflection = GS2C_MineCampList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_DealMine::kRes1GainFieldNumber;
const int GS2C_DealMine::kRes2GainFieldNumber;
#endif  // !_MSC_VER

GS2C_DealMine::GS2C_DealMine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_DealMine::InitAsDefaultInstance() {
}

GS2C_DealMine::GS2C_DealMine(const GS2C_DealMine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_DealMine::SharedCtor() {
  _cached_size_ = 0;
  res1_gain_ = 0u;
  res2_gain_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_DealMine::~GS2C_DealMine() {
  SharedDtor();
}

void GS2C_DealMine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_DealMine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_DealMine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_DealMine_descriptor_;
}

const GS2C_DealMine& GS2C_DealMine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldMineCamp_2eproto();
  return *default_instance_;
}

GS2C_DealMine* GS2C_DealMine::default_instance_ = NULL;

GS2C_DealMine* GS2C_DealMine::New() const {
  return new GS2C_DealMine;
}

void GS2C_DealMine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    res1_gain_ = 0u;
    res2_gain_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_DealMine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 res1_gain = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &res1_gain_)));
          set_has_res1_gain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_res2_gain;
        break;
      }

      // required uint32 res2_gain = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res2_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &res2_gain_)));
          set_has_res2_gain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_DealMine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 res1_gain = 1;
  if (has_res1_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->res1_gain(), output);
  }

  // required uint32 res2_gain = 2;
  if (has_res2_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->res2_gain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_DealMine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 res1_gain = 1;
  if (has_res1_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->res1_gain(), target);
  }

  // required uint32 res2_gain = 2;
  if (has_res2_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->res2_gain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_DealMine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 res1_gain = 1;
    if (has_res1_gain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->res1_gain());
    }

    // required uint32 res2_gain = 2;
    if (has_res2_gain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->res2_gain());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_DealMine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_DealMine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_DealMine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_DealMine::MergeFrom(const GS2C_DealMine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res1_gain()) {
      set_res1_gain(from.res1_gain());
    }
    if (from.has_res2_gain()) {
      set_res2_gain(from.res2_gain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_DealMine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_DealMine::CopyFrom(const GS2C_DealMine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_DealMine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GS2C_DealMine::Swap(GS2C_DealMine* other) {
  if (other != this) {
    std::swap(res1_gain_, other->res1_gain_);
    std::swap(res2_gain_, other->res2_gain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_DealMine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_DealMine_descriptor_;
  metadata.reflection = GS2C_DealMine_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
