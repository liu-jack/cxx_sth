// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Market.proto

#ifndef PROTOBUF_Market_2eproto__INCLUDED
#define PROTOBUF_Market_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommomDef.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Market_2eproto();
void protobuf_AssignDesc_Market_2eproto();
void protobuf_ShutdownFile_Market_2eproto();

class C2GS_Market_Collect;
class GxDB_Market_Collect_Info;
class GS2C_Iron_Collect;
class GS2C_Market_Collect;
class MarketBuyContent;
class C2GS_Market_Buy;
class GS2C_Market_Buy;
class C2GS_Market_Black;
class GS2C_Market_Black;
class C2GS_Market_Ticket_Change;
class C2GS_Market_Mystery_Shop_Invest;
class C2GS_Market_Mystery_Shop_Take_Item;
class GS2C_Market_Mystery_Shop_Take_Item;
class GS2C_Market_Mystery_Shop;
class GS2C_Market_All_Info;
class C2GS_Activity_Iron_Collect_Reward;
class GS2C_Activity_Iron_Collect_Reward_Rsp;

enum IRON_COLLECT_RESULT {
  COLLECT_REWARD_SUCCESS = 1,
  COLLECT_REWARD_HAS_TAKE = 2,
  COLLECT_REWARD_OTHER_REASON = 3
};
bool IRON_COLLECT_RESULT_IsValid(int value);
const IRON_COLLECT_RESULT IRON_COLLECT_RESULT_MIN = COLLECT_REWARD_SUCCESS;
const IRON_COLLECT_RESULT IRON_COLLECT_RESULT_MAX = COLLECT_REWARD_OTHER_REASON;
const int IRON_COLLECT_RESULT_ARRAYSIZE = IRON_COLLECT_RESULT_MAX + 1;

const ::google::protobuf::EnumDescriptor* IRON_COLLECT_RESULT_descriptor();
inline const ::std::string& IRON_COLLECT_RESULT_Name(IRON_COLLECT_RESULT value) {
  return ::google::protobuf::internal::NameOfEnum(
    IRON_COLLECT_RESULT_descriptor(), value);
}
inline bool IRON_COLLECT_RESULT_Parse(
    const ::std::string& name, IRON_COLLECT_RESULT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IRON_COLLECT_RESULT>(
    IRON_COLLECT_RESULT_descriptor(), name, value);
}
// ===================================================================

class C2GS_Market_Collect : public ::google::protobuf::Message {
 public:
  C2GS_Market_Collect();
  virtual ~C2GS_Market_Collect();

  C2GS_Market_Collect(const C2GS_Market_Collect& from);

  inline C2GS_Market_Collect& operator=(const C2GS_Market_Collect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Market_Collect& default_instance();

  void Swap(C2GS_Market_Collect* other);

  // implements Message ----------------------------------------------

  C2GS_Market_Collect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Market_Collect& from);
  void MergeFrom(const C2GS_Market_Collect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 table_id = 1;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 1;
  inline ::google::protobuf::uint32 table_id() const;
  inline void set_table_id(::google::protobuf::uint32 value);

  // required uint32 coll_times = 2;
  inline bool has_coll_times() const;
  inline void clear_coll_times();
  static const int kCollTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 coll_times() const;
  inline void set_coll_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Market_Collect)
 private:
  inline void set_has_table_id();
  inline void clear_has_table_id();
  inline void set_has_coll_times();
  inline void clear_has_coll_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 table_id_;
  ::google::protobuf::uint32 coll_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Market_2eproto();
  friend void protobuf_AssignDesc_Market_2eproto();
  friend void protobuf_ShutdownFile_Market_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Market_Collect* default_instance_;
};
// -------------------------------------------------------------------

class GxDB_Market_Collect_Info : public ::google::protobuf::Message {
 public:
  GxDB_Market_Collect_Info();
  virtual ~GxDB_Market_Collect_Info();

  GxDB_Market_Collect_Info(const GxDB_Market_Collect_Info& from);

  inline GxDB_Market_Collect_Info& operator=(const GxDB_Market_Collect_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GxDB_Market_Collect_Info& default_instance();

  void Swap(GxDB_Market_Collect_Info* other);

  // implements Message ----------------------------------------------

  GxDB_Market_Collect_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GxDB_Market_Collect_Info& from);
  void MergeFrom(const GxDB_Market_Collect_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 table_id = 1;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 1;
  inline ::google::protobuf::uint32 table_id() const;
  inline void set_table_id(::google::protobuf::uint32 value);

  // optional uint32 times = 2;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 times() const;
  inline void set_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GxDB_Market_Collect_Info)
 private:
  inline void set_has_table_id();
  inline void clear_has_table_id();
  inline void set_has_times();
  inline void clear_has_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 table_id_;
  ::google::protobuf::uint32 times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Market_2eproto();
  friend void protobuf_AssignDesc_Market_2eproto();
  friend void protobuf_ShutdownFile_Market_2eproto();

  void InitAsDefaultInstance();
  static GxDB_Market_Collect_Info* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Iron_Collect : public ::google::protobuf::Message {
 public:
  GS2C_Iron_Collect();
  virtual ~GS2C_Iron_Collect();

  GS2C_Iron_Collect(const GS2C_Iron_Collect& from);

  inline GS2C_Iron_Collect& operator=(const GS2C_Iron_Collect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Iron_Collect& default_instance();

  void Swap(GS2C_Iron_Collect* other);

  // implements Message ----------------------------------------------

  GS2C_Iron_Collect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Iron_Collect& from);
  void MergeFrom(const GS2C_Iron_Collect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // optional uint64 use_time = 2;
  inline bool has_use_time() const;
  inline void clear_use_time();
  static const int kUseTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 use_time() const;
  inline void set_use_time(::google::protobuf::uint64 value);

  // optional uint32 left_times = 3;
  inline bool has_left_times() const;
  inline void clear_left_times();
  static const int kLeftTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 left_times() const;
  inline void set_left_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Iron_Collect)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_use_time();
  inline void clear_has_use_time();
  inline void set_has_left_times();
  inline void clear_has_left_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 use_time_;
  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::uint32 left_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Market_2eproto();
  friend void protobuf_AssignDesc_Market_2eproto();
  friend void protobuf_ShutdownFile_Market_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Iron_Collect* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Market_Collect : public ::google::protobuf::Message {
 public:
  GS2C_Market_Collect();
  virtual ~GS2C_Market_Collect();

  GS2C_Market_Collect(const GS2C_Market_Collect& from);

  inline GS2C_Market_Collect& operator=(const GS2C_Market_Collect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Market_Collect& default_instance();

  void Swap(GS2C_Market_Collect* other);

  // implements Message ----------------------------------------------

  GS2C_Market_Collect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Market_Collect& from);
  void MergeFrom(const GS2C_Market_Collect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.PairValue value = 1;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline const ::pb::PairValue& value(int index) const;
  inline ::pb::PairValue* mutable_value(int index);
  inline ::pb::PairValue* add_value();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::PairValue >&
      value() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::PairValue >*
      mutable_value();

  // repeated .pb.GxDB_Market_Collect_Info info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::pb::GxDB_Market_Collect_Info& info(int index) const;
  inline ::pb::GxDB_Market_Collect_Info* mutable_info(int index);
  inline ::pb::GxDB_Market_Collect_Info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GxDB_Market_Collect_Info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GxDB_Market_Collect_Info >*
      mutable_info();

  // repeated .pb.GS2C_Iron_Collect iron_collect_info = 3;
  inline int iron_collect_info_size() const;
  inline void clear_iron_collect_info();
  static const int kIronCollectInfoFieldNumber = 3;
  inline const ::pb::GS2C_Iron_Collect& iron_collect_info(int index) const;
  inline ::pb::GS2C_Iron_Collect* mutable_iron_collect_info(int index);
  inline ::pb::GS2C_Iron_Collect* add_iron_collect_info();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Iron_Collect >&
      iron_collect_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Iron_Collect >*
      mutable_iron_collect_info();

  // optional uint32 ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Market_Collect)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::PairValue > value_;
  ::google::protobuf::RepeatedPtrField< ::pb::GxDB_Market_Collect_Info > info_;
  ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Iron_Collect > iron_collect_info_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Market_2eproto();
  friend void protobuf_AssignDesc_Market_2eproto();
  friend void protobuf_ShutdownFile_Market_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Market_Collect* default_instance_;
};
// -------------------------------------------------------------------

class MarketBuyContent : public ::google::protobuf::Message {
 public:
  MarketBuyContent();
  virtual ~MarketBuyContent();

  MarketBuyContent(const MarketBuyContent& from);

  inline MarketBuyContent& operator=(const MarketBuyContent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarketBuyContent& default_instance();

  void Swap(MarketBuyContent* other);

  // implements Message ----------------------------------------------

  MarketBuyContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarketBuyContent& from);
  void MergeFrom(const MarketBuyContent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 cost_typ = 1;
  inline bool has_cost_typ() const;
  inline void clear_cost_typ();
  static const int kCostTypFieldNumber = 1;
  inline ::google::protobuf::uint32 cost_typ() const;
  inline void set_cost_typ(::google::protobuf::uint32 value);

  // required uint32 cost_val = 2;
  inline bool has_cost_val() const;
  inline void clear_cost_val();
  static const int kCostValFieldNumber = 2;
  inline ::google::protobuf::uint32 cost_val() const;
  inline void set_cost_val(::google::protobuf::uint32 value);

  // required uint32 give_typ = 3;
  inline bool has_give_typ() const;
  inline void clear_give_typ();
  static const int kGiveTypFieldNumber = 3;
  inline ::google::protobuf::uint32 give_typ() const;
  inline void set_give_typ(::google::protobuf::uint32 value);

  // required uint32 give_val = 4;
  inline bool has_give_val() const;
  inline void clear_give_val();
  static const int kGiveValFieldNumber = 4;
  inline ::google::protobuf::uint32 give_val() const;
  inline void set_give_val(::google::protobuf::uint32 value);

  // required uint32 quality = 5;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 5;
  inline ::google::protobuf::uint32 quality() const;
  inline void set_quality(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.MarketBuyContent)
 private:
  inline void set_has_cost_typ();
  inline void clear_has_cost_typ();
  inline void set_has_cost_val();
  inline void clear_has_cost_val();
  inline void set_has_give_typ();
  inline void clear_has_give_typ();
  inline void set_has_give_val();
  inline void clear_has_give_val();
  inline void set_has_quality();
  inline void clear_has_quality();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cost_typ_;
  ::google::protobuf::uint32 cost_val_;
  ::google::protobuf::uint32 give_typ_;
  ::google::protobuf::uint32 give_val_;
  ::google::protobuf::uint32 quality_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Market_2eproto();
  friend void protobuf_AssignDesc_Market_2eproto();
  friend void protobuf_ShutdownFile_Market_2eproto();

  void InitAsDefaultInstance();
  static MarketBuyContent* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Market_Buy : public ::google::protobuf::Message {
 public:
  C2GS_Market_Buy();
  virtual ~C2GS_Market_Buy();

  C2GS_Market_Buy(const C2GS_Market_Buy& from);

  inline C2GS_Market_Buy& operator=(const C2GS_Market_Buy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Market_Buy& default_instance();

  void Swap(C2GS_Market_Buy* other);

  // implements Message ----------------------------------------------

  C2GS_Market_Buy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Market_Buy& from);
  void MergeFrom(const C2GS_Market_Buy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 idx = 1;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 1;
  inline ::google::protobuf::uint32 idx() const;
  inline void set_idx(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Market_Buy)
 private:
  inline void set_has_idx();
  inline void clear_has_idx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 idx_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Market_2eproto();
  friend void protobuf_AssignDesc_Market_2eproto();
  friend void protobuf_ShutdownFile_Market_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Market_Buy* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Market_Buy : public ::google::protobuf::Message {
 public:
  GS2C_Market_Buy();
  virtual ~GS2C_Market_Buy();

  GS2C_Market_Buy(const GS2C_Market_Buy& from);

  inline GS2C_Market_Buy& operator=(const GS2C_Market_Buy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Market_Buy& default_instance();

  void Swap(GS2C_Market_Buy* other);

  // implements Message ----------------------------------------------

  GS2C_Market_Buy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Market_Buy& from);
  void MergeFrom(const GS2C_Market_Buy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 left_num_add_time = 1;
  inline bool has_left_num_add_time() const;
  inline void clear_left_num_add_time();
  static const int kLeftNumAddTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 left_num_add_time() const;
  inline void set_left_num_add_time(::google::protobuf::uint64 value);

  // required uint64 content_refresh_time = 2;
  inline bool has_content_refresh_time() const;
  inline void clear_content_refresh_time();
  static const int kContentRefreshTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 content_refresh_time() const;
  inline void set_content_refresh_time(::google::protobuf::uint64 value);

  // repeated .pb.MarketBuyContent content = 3;
  inline int content_size() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::pb::MarketBuyContent& content(int index) const;
  inline ::pb::MarketBuyContent* mutable_content(int index);
  inline ::pb::MarketBuyContent* add_content();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::MarketBuyContent >&
      content() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::MarketBuyContent >*
      mutable_content();

  // @@protoc_insertion_point(class_scope:pb.GS2C_Market_Buy)
 private:
  inline void set_has_left_num_add_time();
  inline void clear_has_left_num_add_time();
  inline void set_has_content_refresh_time();
  inline void clear_has_content_refresh_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 left_num_add_time_;
  ::google::protobuf::uint64 content_refresh_time_;
  ::google::protobuf::RepeatedPtrField< ::pb::MarketBuyContent > content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Market_2eproto();
  friend void protobuf_AssignDesc_Market_2eproto();
  friend void protobuf_ShutdownFile_Market_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Market_Buy* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Market_Black : public ::google::protobuf::Message {
 public:
  C2GS_Market_Black();
  virtual ~C2GS_Market_Black();

  C2GS_Market_Black(const C2GS_Market_Black& from);

  inline C2GS_Market_Black& operator=(const C2GS_Market_Black& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Market_Black& default_instance();

  void Swap(C2GS_Market_Black* other);

  // implements Message ----------------------------------------------

  C2GS_Market_Black* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Market_Black& from);
  void MergeFrom(const C2GS_Market_Black& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 table_id = 1;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 1;
  inline ::google::protobuf::uint32 table_id() const;
  inline void set_table_id(::google::protobuf::uint32 value);

  // required uint32 idx = 2;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 2;
  inline ::google::protobuf::uint32 idx() const;
  inline void set_idx(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Market_Black)
 private:
  inline void set_has_table_id();
  inline void clear_has_table_id();
  inline void set_has_idx();
  inline void clear_has_idx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 table_id_;
  ::google::protobuf::uint32 idx_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Market_2eproto();
  friend void protobuf_AssignDesc_Market_2eproto();
  friend void protobuf_ShutdownFile_Market_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Market_Black* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Market_Black : public ::google::protobuf::Message {
 public:
  GS2C_Market_Black();
  virtual ~GS2C_Market_Black();

  GS2C_Market_Black(const GS2C_Market_Black& from);

  inline GS2C_Market_Black& operator=(const GS2C_Market_Black& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Market_Black& default_instance();

  void Swap(GS2C_Market_Black* other);

  // implements Message ----------------------------------------------

  GS2C_Market_Black* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Market_Black& from);
  void MergeFrom(const GS2C_Market_Black& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional .pb.StReward reward = 2;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline const ::pb::StReward& reward() const;
  inline ::pb::StReward* mutable_reward();
  inline ::pb::StReward* release_reward();
  inline void set_allocated_reward(::pb::StReward* reward);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Market_Black)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 time_;
  ::pb::StReward* reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Market_2eproto();
  friend void protobuf_AssignDesc_Market_2eproto();
  friend void protobuf_ShutdownFile_Market_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Market_Black* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Market_Ticket_Change : public ::google::protobuf::Message {
 public:
  C2GS_Market_Ticket_Change();
  virtual ~C2GS_Market_Ticket_Change();

  C2GS_Market_Ticket_Change(const C2GS_Market_Ticket_Change& from);

  inline C2GS_Market_Ticket_Change& operator=(const C2GS_Market_Ticket_Change& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Market_Ticket_Change& default_instance();

  void Swap(C2GS_Market_Ticket_Change* other);

  // implements Message ----------------------------------------------

  C2GS_Market_Ticket_Change* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Market_Ticket_Change& from);
  void MergeFrom(const C2GS_Market_Ticket_Change& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 table_id = 1;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 1;
  inline ::google::protobuf::uint32 table_id() const;
  inline void set_table_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Market_Ticket_Change)
 private:
  inline void set_has_table_id();
  inline void clear_has_table_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 table_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Market_2eproto();
  friend void protobuf_AssignDesc_Market_2eproto();
  friend void protobuf_ShutdownFile_Market_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Market_Ticket_Change* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Market_Mystery_Shop_Invest : public ::google::protobuf::Message {
 public:
  C2GS_Market_Mystery_Shop_Invest();
  virtual ~C2GS_Market_Mystery_Shop_Invest();

  C2GS_Market_Mystery_Shop_Invest(const C2GS_Market_Mystery_Shop_Invest& from);

  inline C2GS_Market_Mystery_Shop_Invest& operator=(const C2GS_Market_Mystery_Shop_Invest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Market_Mystery_Shop_Invest& default_instance();

  void Swap(C2GS_Market_Mystery_Shop_Invest* other);

  // implements Message ----------------------------------------------

  C2GS_Market_Mystery_Shop_Invest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Market_Mystery_Shop_Invest& from);
  void MergeFrom(const C2GS_Market_Mystery_Shop_Invest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 table_id = 1;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 1;
  inline ::google::protobuf::uint32 table_id() const;
  inline void set_table_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Market_Mystery_Shop_Invest)
 private:
  inline void set_has_table_id();
  inline void clear_has_table_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 table_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Market_2eproto();
  friend void protobuf_AssignDesc_Market_2eproto();
  friend void protobuf_ShutdownFile_Market_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Market_Mystery_Shop_Invest* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Market_Mystery_Shop_Take_Item : public ::google::protobuf::Message {
 public:
  C2GS_Market_Mystery_Shop_Take_Item();
  virtual ~C2GS_Market_Mystery_Shop_Take_Item();

  C2GS_Market_Mystery_Shop_Take_Item(const C2GS_Market_Mystery_Shop_Take_Item& from);

  inline C2GS_Market_Mystery_Shop_Take_Item& operator=(const C2GS_Market_Mystery_Shop_Take_Item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Market_Mystery_Shop_Take_Item& default_instance();

  void Swap(C2GS_Market_Mystery_Shop_Take_Item* other);

  // implements Message ----------------------------------------------

  C2GS_Market_Mystery_Shop_Take_Item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Market_Mystery_Shop_Take_Item& from);
  void MergeFrom(const C2GS_Market_Mystery_Shop_Take_Item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 table_id = 1;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 1;
  inline ::google::protobuf::uint32 table_id() const;
  inline void set_table_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Market_Mystery_Shop_Take_Item)
 private:
  inline void set_has_table_id();
  inline void clear_has_table_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 table_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Market_2eproto();
  friend void protobuf_AssignDesc_Market_2eproto();
  friend void protobuf_ShutdownFile_Market_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Market_Mystery_Shop_Take_Item* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Market_Mystery_Shop_Take_Item : public ::google::protobuf::Message {
 public:
  GS2C_Market_Mystery_Shop_Take_Item();
  virtual ~GS2C_Market_Mystery_Shop_Take_Item();

  GS2C_Market_Mystery_Shop_Take_Item(const GS2C_Market_Mystery_Shop_Take_Item& from);

  inline GS2C_Market_Mystery_Shop_Take_Item& operator=(const GS2C_Market_Mystery_Shop_Take_Item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Market_Mystery_Shop_Take_Item& default_instance();

  void Swap(GS2C_Market_Mystery_Shop_Take_Item* other);

  // implements Message ----------------------------------------------

  GS2C_Market_Mystery_Shop_Take_Item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Market_Mystery_Shop_Take_Item& from);
  void MergeFrom(const GS2C_Market_Mystery_Shop_Take_Item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 table_id = 1;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 1;
  inline ::google::protobuf::uint32 table_id() const;
  inline void set_table_id(::google::protobuf::uint32 value);

  // required uint32 reward_id = 2;
  inline bool has_reward_id() const;
  inline void clear_reward_id();
  static const int kRewardIdFieldNumber = 2;
  inline ::google::protobuf::uint32 reward_id() const;
  inline void set_reward_id(::google::protobuf::uint32 value);

  // required uint32 reward_cnt = 3;
  inline bool has_reward_cnt() const;
  inline void clear_reward_cnt();
  static const int kRewardCntFieldNumber = 3;
  inline ::google::protobuf::uint32 reward_cnt() const;
  inline void set_reward_cnt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Market_Mystery_Shop_Take_Item)
 private:
  inline void set_has_table_id();
  inline void clear_has_table_id();
  inline void set_has_reward_id();
  inline void clear_has_reward_id();
  inline void set_has_reward_cnt();
  inline void clear_has_reward_cnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 table_id_;
  ::google::protobuf::uint32 reward_id_;
  ::google::protobuf::uint32 reward_cnt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Market_2eproto();
  friend void protobuf_AssignDesc_Market_2eproto();
  friend void protobuf_ShutdownFile_Market_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Market_Mystery_Shop_Take_Item* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Market_Mystery_Shop : public ::google::protobuf::Message {
 public:
  GS2C_Market_Mystery_Shop();
  virtual ~GS2C_Market_Mystery_Shop();

  GS2C_Market_Mystery_Shop(const GS2C_Market_Mystery_Shop& from);

  inline GS2C_Market_Mystery_Shop& operator=(const GS2C_Market_Mystery_Shop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Market_Mystery_Shop& default_instance();

  void Swap(GS2C_Market_Mystery_Shop* other);

  // implements Message ----------------------------------------------

  GS2C_Market_Mystery_Shop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Market_Mystery_Shop& from);
  void MergeFrom(const GS2C_Market_Mystery_Shop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 progress = 1;
  inline int progress_size() const;
  inline void clear_progress();
  static const int kProgressFieldNumber = 1;
  inline ::google::protobuf::uint32 progress(int index) const;
  inline void set_progress(int index, ::google::protobuf::uint32 value);
  inline void add_progress(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      progress() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_progress();

  // repeated uint64 take_item_time = 2;
  inline int take_item_time_size() const;
  inline void clear_take_item_time();
  static const int kTakeItemTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 take_item_time(int index) const;
  inline void set_take_item_time(int index, ::google::protobuf::uint64 value);
  inline void add_take_item_time(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      take_item_time() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_take_item_time();

  // repeated .pb.PairValue suits_part = 3;
  inline int suits_part_size() const;
  inline void clear_suits_part();
  static const int kSuitsPartFieldNumber = 3;
  inline const ::pb::PairValue& suits_part(int index) const;
  inline ::pb::PairValue* mutable_suits_part(int index);
  inline ::pb::PairValue* add_suits_part();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::PairValue >&
      suits_part() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::PairValue >*
      mutable_suits_part();

  // @@protoc_insertion_point(class_scope:pb.GS2C_Market_Mystery_Shop)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > progress_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > take_item_time_;
  ::google::protobuf::RepeatedPtrField< ::pb::PairValue > suits_part_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Market_2eproto();
  friend void protobuf_AssignDesc_Market_2eproto();
  friend void protobuf_ShutdownFile_Market_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Market_Mystery_Shop* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Market_All_Info : public ::google::protobuf::Message {
 public:
  GS2C_Market_All_Info();
  virtual ~GS2C_Market_All_Info();

  GS2C_Market_All_Info(const GS2C_Market_All_Info& from);

  inline GS2C_Market_All_Info& operator=(const GS2C_Market_All_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Market_All_Info& default_instance();

  void Swap(GS2C_Market_All_Info* other);

  // implements Message ----------------------------------------------

  GS2C_Market_All_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Market_All_Info& from);
  void MergeFrom(const GS2C_Market_All_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.GS2C_Market_Collect collect = 1;
  inline bool has_collect() const;
  inline void clear_collect();
  static const int kCollectFieldNumber = 1;
  inline const ::pb::GS2C_Market_Collect& collect() const;
  inline ::pb::GS2C_Market_Collect* mutable_collect();
  inline ::pb::GS2C_Market_Collect* release_collect();
  inline void set_allocated_collect(::pb::GS2C_Market_Collect* collect);

  // optional .pb.GS2C_Market_Buy buy = 2;
  inline bool has_buy() const;
  inline void clear_buy();
  static const int kBuyFieldNumber = 2;
  inline const ::pb::GS2C_Market_Buy& buy() const;
  inline ::pb::GS2C_Market_Buy* mutable_buy();
  inline ::pb::GS2C_Market_Buy* release_buy();
  inline void set_allocated_buy(::pb::GS2C_Market_Buy* buy);

  // optional .pb.GS2C_Market_Black black = 3;
  inline bool has_black() const;
  inline void clear_black();
  static const int kBlackFieldNumber = 3;
  inline const ::pb::GS2C_Market_Black& black() const;
  inline ::pb::GS2C_Market_Black* mutable_black();
  inline ::pb::GS2C_Market_Black* release_black();
  inline void set_allocated_black(::pb::GS2C_Market_Black* black);

  // optional .pb.GS2C_Market_Mystery_Shop mystery = 4;
  inline bool has_mystery() const;
  inline void clear_mystery();
  static const int kMysteryFieldNumber = 4;
  inline const ::pb::GS2C_Market_Mystery_Shop& mystery() const;
  inline ::pb::GS2C_Market_Mystery_Shop* mutable_mystery();
  inline ::pb::GS2C_Market_Mystery_Shop* release_mystery();
  inline void set_allocated_mystery(::pb::GS2C_Market_Mystery_Shop* mystery);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Market_All_Info)
 private:
  inline void set_has_collect();
  inline void clear_has_collect();
  inline void set_has_buy();
  inline void clear_has_buy();
  inline void set_has_black();
  inline void clear_has_black();
  inline void set_has_mystery();
  inline void clear_has_mystery();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::GS2C_Market_Collect* collect_;
  ::pb::GS2C_Market_Buy* buy_;
  ::pb::GS2C_Market_Black* black_;
  ::pb::GS2C_Market_Mystery_Shop* mystery_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Market_2eproto();
  friend void protobuf_AssignDesc_Market_2eproto();
  friend void protobuf_ShutdownFile_Market_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Market_All_Info* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Activity_Iron_Collect_Reward : public ::google::protobuf::Message {
 public:
  C2GS_Activity_Iron_Collect_Reward();
  virtual ~C2GS_Activity_Iron_Collect_Reward();

  C2GS_Activity_Iron_Collect_Reward(const C2GS_Activity_Iron_Collect_Reward& from);

  inline C2GS_Activity_Iron_Collect_Reward& operator=(const C2GS_Activity_Iron_Collect_Reward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Activity_Iron_Collect_Reward& default_instance();

  void Swap(C2GS_Activity_Iron_Collect_Reward* other);

  // implements Message ----------------------------------------------

  C2GS_Activity_Iron_Collect_Reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Activity_Iron_Collect_Reward& from);
  void MergeFrom(const C2GS_Activity_Iron_Collect_Reward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Activity_Iron_Collect_Reward)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Market_2eproto();
  friend void protobuf_AssignDesc_Market_2eproto();
  friend void protobuf_ShutdownFile_Market_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Activity_Iron_Collect_Reward* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Activity_Iron_Collect_Reward_Rsp : public ::google::protobuf::Message {
 public:
  GS2C_Activity_Iron_Collect_Reward_Rsp();
  virtual ~GS2C_Activity_Iron_Collect_Reward_Rsp();

  GS2C_Activity_Iron_Collect_Reward_Rsp(const GS2C_Activity_Iron_Collect_Reward_Rsp& from);

  inline GS2C_Activity_Iron_Collect_Reward_Rsp& operator=(const GS2C_Activity_Iron_Collect_Reward_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Activity_Iron_Collect_Reward_Rsp& default_instance();

  void Swap(GS2C_Activity_Iron_Collect_Reward_Rsp* other);

  // implements Message ----------------------------------------------

  GS2C_Activity_Iron_Collect_Reward_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Activity_Iron_Collect_Reward_Rsp& from);
  void MergeFrom(const GS2C_Activity_Iron_Collect_Reward_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.StReward reward = 1;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 1;
  inline const ::pb::StReward& reward(int index) const;
  inline ::pb::StReward* mutable_reward(int index);
  inline ::pb::StReward* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::StReward >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::StReward >*
      mutable_reward();

  // required .pb.IRON_COLLECT_RESULT ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::pb::IRON_COLLECT_RESULT ret() const;
  inline void set_ret(::pb::IRON_COLLECT_RESULT value);

  // repeated .pb.GS2C_Iron_Collect info = 3;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::pb::GS2C_Iron_Collect& info(int index) const;
  inline ::pb::GS2C_Iron_Collect* mutable_info(int index);
  inline ::pb::GS2C_Iron_Collect* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Iron_Collect >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Iron_Collect >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:pb.GS2C_Activity_Iron_Collect_Reward_Rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::StReward > reward_;
  ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Iron_Collect > info_;
  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Market_2eproto();
  friend void protobuf_AssignDesc_Market_2eproto();
  friend void protobuf_ShutdownFile_Market_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Activity_Iron_Collect_Reward_Rsp* default_instance_;
};
// ===================================================================


// ===================================================================

// C2GS_Market_Collect

// required uint32 table_id = 1;
inline bool C2GS_Market_Collect::has_table_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Market_Collect::set_has_table_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Market_Collect::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Market_Collect::clear_table_id() {
  table_id_ = 0u;
  clear_has_table_id();
}
inline ::google::protobuf::uint32 C2GS_Market_Collect::table_id() const {
  return table_id_;
}
inline void C2GS_Market_Collect::set_table_id(::google::protobuf::uint32 value) {
  set_has_table_id();
  table_id_ = value;
}

// required uint32 coll_times = 2;
inline bool C2GS_Market_Collect::has_coll_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_Market_Collect::set_has_coll_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_Market_Collect::clear_has_coll_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_Market_Collect::clear_coll_times() {
  coll_times_ = 0u;
  clear_has_coll_times();
}
inline ::google::protobuf::uint32 C2GS_Market_Collect::coll_times() const {
  return coll_times_;
}
inline void C2GS_Market_Collect::set_coll_times(::google::protobuf::uint32 value) {
  set_has_coll_times();
  coll_times_ = value;
}

// -------------------------------------------------------------------

// GxDB_Market_Collect_Info

// optional uint32 table_id = 1;
inline bool GxDB_Market_Collect_Info::has_table_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GxDB_Market_Collect_Info::set_has_table_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GxDB_Market_Collect_Info::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GxDB_Market_Collect_Info::clear_table_id() {
  table_id_ = 0u;
  clear_has_table_id();
}
inline ::google::protobuf::uint32 GxDB_Market_Collect_Info::table_id() const {
  return table_id_;
}
inline void GxDB_Market_Collect_Info::set_table_id(::google::protobuf::uint32 value) {
  set_has_table_id();
  table_id_ = value;
}

// optional uint32 times = 2;
inline bool GxDB_Market_Collect_Info::has_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GxDB_Market_Collect_Info::set_has_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GxDB_Market_Collect_Info::clear_has_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GxDB_Market_Collect_Info::clear_times() {
  times_ = 0u;
  clear_has_times();
}
inline ::google::protobuf::uint32 GxDB_Market_Collect_Info::times() const {
  return times_;
}
inline void GxDB_Market_Collect_Info::set_times(::google::protobuf::uint32 value) {
  set_has_times();
  times_ = value;
}

// -------------------------------------------------------------------

// GS2C_Iron_Collect

// optional uint32 item_id = 1;
inline bool GS2C_Iron_Collect::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Iron_Collect::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Iron_Collect::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Iron_Collect::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 GS2C_Iron_Collect::item_id() const {
  return item_id_;
}
inline void GS2C_Iron_Collect::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional uint64 use_time = 2;
inline bool GS2C_Iron_Collect::has_use_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Iron_Collect::set_has_use_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Iron_Collect::clear_has_use_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Iron_Collect::clear_use_time() {
  use_time_ = GOOGLE_ULONGLONG(0);
  clear_has_use_time();
}
inline ::google::protobuf::uint64 GS2C_Iron_Collect::use_time() const {
  return use_time_;
}
inline void GS2C_Iron_Collect::set_use_time(::google::protobuf::uint64 value) {
  set_has_use_time();
  use_time_ = value;
}

// optional uint32 left_times = 3;
inline bool GS2C_Iron_Collect::has_left_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Iron_Collect::set_has_left_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Iron_Collect::clear_has_left_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Iron_Collect::clear_left_times() {
  left_times_ = 0u;
  clear_has_left_times();
}
inline ::google::protobuf::uint32 GS2C_Iron_Collect::left_times() const {
  return left_times_;
}
inline void GS2C_Iron_Collect::set_left_times(::google::protobuf::uint32 value) {
  set_has_left_times();
  left_times_ = value;
}

// -------------------------------------------------------------------

// GS2C_Market_Collect

// repeated .pb.PairValue value = 1;
inline int GS2C_Market_Collect::value_size() const {
  return value_.size();
}
inline void GS2C_Market_Collect::clear_value() {
  value_.Clear();
}
inline const ::pb::PairValue& GS2C_Market_Collect::value(int index) const {
  return value_.Get(index);
}
inline ::pb::PairValue* GS2C_Market_Collect::mutable_value(int index) {
  return value_.Mutable(index);
}
inline ::pb::PairValue* GS2C_Market_Collect::add_value() {
  return value_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::PairValue >&
GS2C_Market_Collect::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::PairValue >*
GS2C_Market_Collect::mutable_value() {
  return &value_;
}

// repeated .pb.GxDB_Market_Collect_Info info = 2;
inline int GS2C_Market_Collect::info_size() const {
  return info_.size();
}
inline void GS2C_Market_Collect::clear_info() {
  info_.Clear();
}
inline const ::pb::GxDB_Market_Collect_Info& GS2C_Market_Collect::info(int index) const {
  return info_.Get(index);
}
inline ::pb::GxDB_Market_Collect_Info* GS2C_Market_Collect::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::pb::GxDB_Market_Collect_Info* GS2C_Market_Collect::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GxDB_Market_Collect_Info >&
GS2C_Market_Collect::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GxDB_Market_Collect_Info >*
GS2C_Market_Collect::mutable_info() {
  return &info_;
}

// repeated .pb.GS2C_Iron_Collect iron_collect_info = 3;
inline int GS2C_Market_Collect::iron_collect_info_size() const {
  return iron_collect_info_.size();
}
inline void GS2C_Market_Collect::clear_iron_collect_info() {
  iron_collect_info_.Clear();
}
inline const ::pb::GS2C_Iron_Collect& GS2C_Market_Collect::iron_collect_info(int index) const {
  return iron_collect_info_.Get(index);
}
inline ::pb::GS2C_Iron_Collect* GS2C_Market_Collect::mutable_iron_collect_info(int index) {
  return iron_collect_info_.Mutable(index);
}
inline ::pb::GS2C_Iron_Collect* GS2C_Market_Collect::add_iron_collect_info() {
  return iron_collect_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Iron_Collect >&
GS2C_Market_Collect::iron_collect_info() const {
  return iron_collect_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Iron_Collect >*
GS2C_Market_Collect::mutable_iron_collect_info() {
  return &iron_collect_info_;
}

// optional uint32 ret = 4;
inline bool GS2C_Market_Collect::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Market_Collect::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Market_Collect::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Market_Collect::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 GS2C_Market_Collect::ret() const {
  return ret_;
}
inline void GS2C_Market_Collect::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// MarketBuyContent

// required uint32 cost_typ = 1;
inline bool MarketBuyContent::has_cost_typ() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarketBuyContent::set_has_cost_typ() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarketBuyContent::clear_has_cost_typ() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarketBuyContent::clear_cost_typ() {
  cost_typ_ = 0u;
  clear_has_cost_typ();
}
inline ::google::protobuf::uint32 MarketBuyContent::cost_typ() const {
  return cost_typ_;
}
inline void MarketBuyContent::set_cost_typ(::google::protobuf::uint32 value) {
  set_has_cost_typ();
  cost_typ_ = value;
}

// required uint32 cost_val = 2;
inline bool MarketBuyContent::has_cost_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarketBuyContent::set_has_cost_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarketBuyContent::clear_has_cost_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarketBuyContent::clear_cost_val() {
  cost_val_ = 0u;
  clear_has_cost_val();
}
inline ::google::protobuf::uint32 MarketBuyContent::cost_val() const {
  return cost_val_;
}
inline void MarketBuyContent::set_cost_val(::google::protobuf::uint32 value) {
  set_has_cost_val();
  cost_val_ = value;
}

// required uint32 give_typ = 3;
inline bool MarketBuyContent::has_give_typ() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarketBuyContent::set_has_give_typ() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarketBuyContent::clear_has_give_typ() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarketBuyContent::clear_give_typ() {
  give_typ_ = 0u;
  clear_has_give_typ();
}
inline ::google::protobuf::uint32 MarketBuyContent::give_typ() const {
  return give_typ_;
}
inline void MarketBuyContent::set_give_typ(::google::protobuf::uint32 value) {
  set_has_give_typ();
  give_typ_ = value;
}

// required uint32 give_val = 4;
inline bool MarketBuyContent::has_give_val() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarketBuyContent::set_has_give_val() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarketBuyContent::clear_has_give_val() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarketBuyContent::clear_give_val() {
  give_val_ = 0u;
  clear_has_give_val();
}
inline ::google::protobuf::uint32 MarketBuyContent::give_val() const {
  return give_val_;
}
inline void MarketBuyContent::set_give_val(::google::protobuf::uint32 value) {
  set_has_give_val();
  give_val_ = value;
}

// required uint32 quality = 5;
inline bool MarketBuyContent::has_quality() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MarketBuyContent::set_has_quality() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MarketBuyContent::clear_has_quality() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MarketBuyContent::clear_quality() {
  quality_ = 0u;
  clear_has_quality();
}
inline ::google::protobuf::uint32 MarketBuyContent::quality() const {
  return quality_;
}
inline void MarketBuyContent::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
}

// -------------------------------------------------------------------

// C2GS_Market_Buy

// required uint32 idx = 1;
inline bool C2GS_Market_Buy::has_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Market_Buy::set_has_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Market_Buy::clear_has_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Market_Buy::clear_idx() {
  idx_ = 0u;
  clear_has_idx();
}
inline ::google::protobuf::uint32 C2GS_Market_Buy::idx() const {
  return idx_;
}
inline void C2GS_Market_Buy::set_idx(::google::protobuf::uint32 value) {
  set_has_idx();
  idx_ = value;
}

// -------------------------------------------------------------------

// GS2C_Market_Buy

// required uint64 left_num_add_time = 1;
inline bool GS2C_Market_Buy::has_left_num_add_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Market_Buy::set_has_left_num_add_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Market_Buy::clear_has_left_num_add_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Market_Buy::clear_left_num_add_time() {
  left_num_add_time_ = GOOGLE_ULONGLONG(0);
  clear_has_left_num_add_time();
}
inline ::google::protobuf::uint64 GS2C_Market_Buy::left_num_add_time() const {
  return left_num_add_time_;
}
inline void GS2C_Market_Buy::set_left_num_add_time(::google::protobuf::uint64 value) {
  set_has_left_num_add_time();
  left_num_add_time_ = value;
}

// required uint64 content_refresh_time = 2;
inline bool GS2C_Market_Buy::has_content_refresh_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Market_Buy::set_has_content_refresh_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Market_Buy::clear_has_content_refresh_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Market_Buy::clear_content_refresh_time() {
  content_refresh_time_ = GOOGLE_ULONGLONG(0);
  clear_has_content_refresh_time();
}
inline ::google::protobuf::uint64 GS2C_Market_Buy::content_refresh_time() const {
  return content_refresh_time_;
}
inline void GS2C_Market_Buy::set_content_refresh_time(::google::protobuf::uint64 value) {
  set_has_content_refresh_time();
  content_refresh_time_ = value;
}

// repeated .pb.MarketBuyContent content = 3;
inline int GS2C_Market_Buy::content_size() const {
  return content_.size();
}
inline void GS2C_Market_Buy::clear_content() {
  content_.Clear();
}
inline const ::pb::MarketBuyContent& GS2C_Market_Buy::content(int index) const {
  return content_.Get(index);
}
inline ::pb::MarketBuyContent* GS2C_Market_Buy::mutable_content(int index) {
  return content_.Mutable(index);
}
inline ::pb::MarketBuyContent* GS2C_Market_Buy::add_content() {
  return content_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::MarketBuyContent >&
GS2C_Market_Buy::content() const {
  return content_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::MarketBuyContent >*
GS2C_Market_Buy::mutable_content() {
  return &content_;
}

// -------------------------------------------------------------------

// C2GS_Market_Black

// required uint32 table_id = 1;
inline bool C2GS_Market_Black::has_table_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Market_Black::set_has_table_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Market_Black::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Market_Black::clear_table_id() {
  table_id_ = 0u;
  clear_has_table_id();
}
inline ::google::protobuf::uint32 C2GS_Market_Black::table_id() const {
  return table_id_;
}
inline void C2GS_Market_Black::set_table_id(::google::protobuf::uint32 value) {
  set_has_table_id();
  table_id_ = value;
}

// required uint32 idx = 2;
inline bool C2GS_Market_Black::has_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_Market_Black::set_has_idx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_Market_Black::clear_has_idx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_Market_Black::clear_idx() {
  idx_ = 0u;
  clear_has_idx();
}
inline ::google::protobuf::uint32 C2GS_Market_Black::idx() const {
  return idx_;
}
inline void C2GS_Market_Black::set_idx(::google::protobuf::uint32 value) {
  set_has_idx();
  idx_ = value;
}

// -------------------------------------------------------------------

// GS2C_Market_Black

// required uint64 time = 1;
inline bool GS2C_Market_Black::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Market_Black::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Market_Black::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Market_Black::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 GS2C_Market_Black::time() const {
  return time_;
}
inline void GS2C_Market_Black::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// optional .pb.StReward reward = 2;
inline bool GS2C_Market_Black::has_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Market_Black::set_has_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Market_Black::clear_has_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Market_Black::clear_reward() {
  if (reward_ != NULL) reward_->::pb::StReward::Clear();
  clear_has_reward();
}
inline const ::pb::StReward& GS2C_Market_Black::reward() const {
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::pb::StReward* GS2C_Market_Black::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::pb::StReward;
  return reward_;
}
inline ::pb::StReward* GS2C_Market_Black::release_reward() {
  clear_has_reward();
  ::pb::StReward* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void GS2C_Market_Black::set_allocated_reward(::pb::StReward* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
}

// -------------------------------------------------------------------

// C2GS_Market_Ticket_Change

// required uint32 table_id = 1;
inline bool C2GS_Market_Ticket_Change::has_table_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Market_Ticket_Change::set_has_table_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Market_Ticket_Change::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Market_Ticket_Change::clear_table_id() {
  table_id_ = 0u;
  clear_has_table_id();
}
inline ::google::protobuf::uint32 C2GS_Market_Ticket_Change::table_id() const {
  return table_id_;
}
inline void C2GS_Market_Ticket_Change::set_table_id(::google::protobuf::uint32 value) {
  set_has_table_id();
  table_id_ = value;
}

// -------------------------------------------------------------------

// C2GS_Market_Mystery_Shop_Invest

// required uint32 table_id = 1;
inline bool C2GS_Market_Mystery_Shop_Invest::has_table_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Market_Mystery_Shop_Invest::set_has_table_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Market_Mystery_Shop_Invest::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Market_Mystery_Shop_Invest::clear_table_id() {
  table_id_ = 0u;
  clear_has_table_id();
}
inline ::google::protobuf::uint32 C2GS_Market_Mystery_Shop_Invest::table_id() const {
  return table_id_;
}
inline void C2GS_Market_Mystery_Shop_Invest::set_table_id(::google::protobuf::uint32 value) {
  set_has_table_id();
  table_id_ = value;
}

// -------------------------------------------------------------------

// C2GS_Market_Mystery_Shop_Take_Item

// required uint32 table_id = 1;
inline bool C2GS_Market_Mystery_Shop_Take_Item::has_table_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Market_Mystery_Shop_Take_Item::set_has_table_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Market_Mystery_Shop_Take_Item::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Market_Mystery_Shop_Take_Item::clear_table_id() {
  table_id_ = 0u;
  clear_has_table_id();
}
inline ::google::protobuf::uint32 C2GS_Market_Mystery_Shop_Take_Item::table_id() const {
  return table_id_;
}
inline void C2GS_Market_Mystery_Shop_Take_Item::set_table_id(::google::protobuf::uint32 value) {
  set_has_table_id();
  table_id_ = value;
}

// -------------------------------------------------------------------

// GS2C_Market_Mystery_Shop_Take_Item

// required uint32 table_id = 1;
inline bool GS2C_Market_Mystery_Shop_Take_Item::has_table_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Market_Mystery_Shop_Take_Item::set_has_table_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Market_Mystery_Shop_Take_Item::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Market_Mystery_Shop_Take_Item::clear_table_id() {
  table_id_ = 0u;
  clear_has_table_id();
}
inline ::google::protobuf::uint32 GS2C_Market_Mystery_Shop_Take_Item::table_id() const {
  return table_id_;
}
inline void GS2C_Market_Mystery_Shop_Take_Item::set_table_id(::google::protobuf::uint32 value) {
  set_has_table_id();
  table_id_ = value;
}

// required uint32 reward_id = 2;
inline bool GS2C_Market_Mystery_Shop_Take_Item::has_reward_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Market_Mystery_Shop_Take_Item::set_has_reward_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Market_Mystery_Shop_Take_Item::clear_has_reward_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Market_Mystery_Shop_Take_Item::clear_reward_id() {
  reward_id_ = 0u;
  clear_has_reward_id();
}
inline ::google::protobuf::uint32 GS2C_Market_Mystery_Shop_Take_Item::reward_id() const {
  return reward_id_;
}
inline void GS2C_Market_Mystery_Shop_Take_Item::set_reward_id(::google::protobuf::uint32 value) {
  set_has_reward_id();
  reward_id_ = value;
}

// required uint32 reward_cnt = 3;
inline bool GS2C_Market_Mystery_Shop_Take_Item::has_reward_cnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Market_Mystery_Shop_Take_Item::set_has_reward_cnt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Market_Mystery_Shop_Take_Item::clear_has_reward_cnt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Market_Mystery_Shop_Take_Item::clear_reward_cnt() {
  reward_cnt_ = 0u;
  clear_has_reward_cnt();
}
inline ::google::protobuf::uint32 GS2C_Market_Mystery_Shop_Take_Item::reward_cnt() const {
  return reward_cnt_;
}
inline void GS2C_Market_Mystery_Shop_Take_Item::set_reward_cnt(::google::protobuf::uint32 value) {
  set_has_reward_cnt();
  reward_cnt_ = value;
}

// -------------------------------------------------------------------

// GS2C_Market_Mystery_Shop

// repeated uint32 progress = 1;
inline int GS2C_Market_Mystery_Shop::progress_size() const {
  return progress_.size();
}
inline void GS2C_Market_Mystery_Shop::clear_progress() {
  progress_.Clear();
}
inline ::google::protobuf::uint32 GS2C_Market_Mystery_Shop::progress(int index) const {
  return progress_.Get(index);
}
inline void GS2C_Market_Mystery_Shop::set_progress(int index, ::google::protobuf::uint32 value) {
  progress_.Set(index, value);
}
inline void GS2C_Market_Mystery_Shop::add_progress(::google::protobuf::uint32 value) {
  progress_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GS2C_Market_Mystery_Shop::progress() const {
  return progress_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GS2C_Market_Mystery_Shop::mutable_progress() {
  return &progress_;
}

// repeated uint64 take_item_time = 2;
inline int GS2C_Market_Mystery_Shop::take_item_time_size() const {
  return take_item_time_.size();
}
inline void GS2C_Market_Mystery_Shop::clear_take_item_time() {
  take_item_time_.Clear();
}
inline ::google::protobuf::uint64 GS2C_Market_Mystery_Shop::take_item_time(int index) const {
  return take_item_time_.Get(index);
}
inline void GS2C_Market_Mystery_Shop::set_take_item_time(int index, ::google::protobuf::uint64 value) {
  take_item_time_.Set(index, value);
}
inline void GS2C_Market_Mystery_Shop::add_take_item_time(::google::protobuf::uint64 value) {
  take_item_time_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
GS2C_Market_Mystery_Shop::take_item_time() const {
  return take_item_time_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
GS2C_Market_Mystery_Shop::mutable_take_item_time() {
  return &take_item_time_;
}

// repeated .pb.PairValue suits_part = 3;
inline int GS2C_Market_Mystery_Shop::suits_part_size() const {
  return suits_part_.size();
}
inline void GS2C_Market_Mystery_Shop::clear_suits_part() {
  suits_part_.Clear();
}
inline const ::pb::PairValue& GS2C_Market_Mystery_Shop::suits_part(int index) const {
  return suits_part_.Get(index);
}
inline ::pb::PairValue* GS2C_Market_Mystery_Shop::mutable_suits_part(int index) {
  return suits_part_.Mutable(index);
}
inline ::pb::PairValue* GS2C_Market_Mystery_Shop::add_suits_part() {
  return suits_part_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::PairValue >&
GS2C_Market_Mystery_Shop::suits_part() const {
  return suits_part_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::PairValue >*
GS2C_Market_Mystery_Shop::mutable_suits_part() {
  return &suits_part_;
}

// -------------------------------------------------------------------

// GS2C_Market_All_Info

// optional .pb.GS2C_Market_Collect collect = 1;
inline bool GS2C_Market_All_Info::has_collect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Market_All_Info::set_has_collect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Market_All_Info::clear_has_collect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Market_All_Info::clear_collect() {
  if (collect_ != NULL) collect_->::pb::GS2C_Market_Collect::Clear();
  clear_has_collect();
}
inline const ::pb::GS2C_Market_Collect& GS2C_Market_All_Info::collect() const {
  return collect_ != NULL ? *collect_ : *default_instance_->collect_;
}
inline ::pb::GS2C_Market_Collect* GS2C_Market_All_Info::mutable_collect() {
  set_has_collect();
  if (collect_ == NULL) collect_ = new ::pb::GS2C_Market_Collect;
  return collect_;
}
inline ::pb::GS2C_Market_Collect* GS2C_Market_All_Info::release_collect() {
  clear_has_collect();
  ::pb::GS2C_Market_Collect* temp = collect_;
  collect_ = NULL;
  return temp;
}
inline void GS2C_Market_All_Info::set_allocated_collect(::pb::GS2C_Market_Collect* collect) {
  delete collect_;
  collect_ = collect;
  if (collect) {
    set_has_collect();
  } else {
    clear_has_collect();
  }
}

// optional .pb.GS2C_Market_Buy buy = 2;
inline bool GS2C_Market_All_Info::has_buy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Market_All_Info::set_has_buy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Market_All_Info::clear_has_buy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Market_All_Info::clear_buy() {
  if (buy_ != NULL) buy_->::pb::GS2C_Market_Buy::Clear();
  clear_has_buy();
}
inline const ::pb::GS2C_Market_Buy& GS2C_Market_All_Info::buy() const {
  return buy_ != NULL ? *buy_ : *default_instance_->buy_;
}
inline ::pb::GS2C_Market_Buy* GS2C_Market_All_Info::mutable_buy() {
  set_has_buy();
  if (buy_ == NULL) buy_ = new ::pb::GS2C_Market_Buy;
  return buy_;
}
inline ::pb::GS2C_Market_Buy* GS2C_Market_All_Info::release_buy() {
  clear_has_buy();
  ::pb::GS2C_Market_Buy* temp = buy_;
  buy_ = NULL;
  return temp;
}
inline void GS2C_Market_All_Info::set_allocated_buy(::pb::GS2C_Market_Buy* buy) {
  delete buy_;
  buy_ = buy;
  if (buy) {
    set_has_buy();
  } else {
    clear_has_buy();
  }
}

// optional .pb.GS2C_Market_Black black = 3;
inline bool GS2C_Market_All_Info::has_black() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Market_All_Info::set_has_black() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Market_All_Info::clear_has_black() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Market_All_Info::clear_black() {
  if (black_ != NULL) black_->::pb::GS2C_Market_Black::Clear();
  clear_has_black();
}
inline const ::pb::GS2C_Market_Black& GS2C_Market_All_Info::black() const {
  return black_ != NULL ? *black_ : *default_instance_->black_;
}
inline ::pb::GS2C_Market_Black* GS2C_Market_All_Info::mutable_black() {
  set_has_black();
  if (black_ == NULL) black_ = new ::pb::GS2C_Market_Black;
  return black_;
}
inline ::pb::GS2C_Market_Black* GS2C_Market_All_Info::release_black() {
  clear_has_black();
  ::pb::GS2C_Market_Black* temp = black_;
  black_ = NULL;
  return temp;
}
inline void GS2C_Market_All_Info::set_allocated_black(::pb::GS2C_Market_Black* black) {
  delete black_;
  black_ = black;
  if (black) {
    set_has_black();
  } else {
    clear_has_black();
  }
}

// optional .pb.GS2C_Market_Mystery_Shop mystery = 4;
inline bool GS2C_Market_All_Info::has_mystery() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Market_All_Info::set_has_mystery() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Market_All_Info::clear_has_mystery() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Market_All_Info::clear_mystery() {
  if (mystery_ != NULL) mystery_->::pb::GS2C_Market_Mystery_Shop::Clear();
  clear_has_mystery();
}
inline const ::pb::GS2C_Market_Mystery_Shop& GS2C_Market_All_Info::mystery() const {
  return mystery_ != NULL ? *mystery_ : *default_instance_->mystery_;
}
inline ::pb::GS2C_Market_Mystery_Shop* GS2C_Market_All_Info::mutable_mystery() {
  set_has_mystery();
  if (mystery_ == NULL) mystery_ = new ::pb::GS2C_Market_Mystery_Shop;
  return mystery_;
}
inline ::pb::GS2C_Market_Mystery_Shop* GS2C_Market_All_Info::release_mystery() {
  clear_has_mystery();
  ::pb::GS2C_Market_Mystery_Shop* temp = mystery_;
  mystery_ = NULL;
  return temp;
}
inline void GS2C_Market_All_Info::set_allocated_mystery(::pb::GS2C_Market_Mystery_Shop* mystery) {
  delete mystery_;
  mystery_ = mystery;
  if (mystery) {
    set_has_mystery();
  } else {
    clear_has_mystery();
  }
}

// -------------------------------------------------------------------

// C2GS_Activity_Iron_Collect_Reward

// required uint32 id = 1;
inline bool C2GS_Activity_Iron_Collect_Reward::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Activity_Iron_Collect_Reward::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Activity_Iron_Collect_Reward::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Activity_Iron_Collect_Reward::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 C2GS_Activity_Iron_Collect_Reward::id() const {
  return id_;
}
inline void C2GS_Activity_Iron_Collect_Reward::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// GS2C_Activity_Iron_Collect_Reward_Rsp

// repeated .pb.StReward reward = 1;
inline int GS2C_Activity_Iron_Collect_Reward_Rsp::reward_size() const {
  return reward_.size();
}
inline void GS2C_Activity_Iron_Collect_Reward_Rsp::clear_reward() {
  reward_.Clear();
}
inline const ::pb::StReward& GS2C_Activity_Iron_Collect_Reward_Rsp::reward(int index) const {
  return reward_.Get(index);
}
inline ::pb::StReward* GS2C_Activity_Iron_Collect_Reward_Rsp::mutable_reward(int index) {
  return reward_.Mutable(index);
}
inline ::pb::StReward* GS2C_Activity_Iron_Collect_Reward_Rsp::add_reward() {
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::StReward >&
GS2C_Activity_Iron_Collect_Reward_Rsp::reward() const {
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::StReward >*
GS2C_Activity_Iron_Collect_Reward_Rsp::mutable_reward() {
  return &reward_;
}

// required .pb.IRON_COLLECT_RESULT ret = 2;
inline bool GS2C_Activity_Iron_Collect_Reward_Rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Activity_Iron_Collect_Reward_Rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Activity_Iron_Collect_Reward_Rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Activity_Iron_Collect_Reward_Rsp::clear_ret() {
  ret_ = 1;
  clear_has_ret();
}
inline ::pb::IRON_COLLECT_RESULT GS2C_Activity_Iron_Collect_Reward_Rsp::ret() const {
  return static_cast< ::pb::IRON_COLLECT_RESULT >(ret_);
}
inline void GS2C_Activity_Iron_Collect_Reward_Rsp::set_ret(::pb::IRON_COLLECT_RESULT value) {
  assert(::pb::IRON_COLLECT_RESULT_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// repeated .pb.GS2C_Iron_Collect info = 3;
inline int GS2C_Activity_Iron_Collect_Reward_Rsp::info_size() const {
  return info_.size();
}
inline void GS2C_Activity_Iron_Collect_Reward_Rsp::clear_info() {
  info_.Clear();
}
inline const ::pb::GS2C_Iron_Collect& GS2C_Activity_Iron_Collect_Reward_Rsp::info(int index) const {
  return info_.Get(index);
}
inline ::pb::GS2C_Iron_Collect* GS2C_Activity_Iron_Collect_Reward_Rsp::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::pb::GS2C_Iron_Collect* GS2C_Activity_Iron_Collect_Reward_Rsp::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Iron_Collect >&
GS2C_Activity_Iron_Collect_Reward_Rsp::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Iron_Collect >*
GS2C_Activity_Iron_Collect_Reward_Rsp::mutable_info() {
  return &info_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::IRON_COLLECT_RESULT>() {
  return ::pb::IRON_COLLECT_RESULT_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Market_2eproto__INCLUDED
