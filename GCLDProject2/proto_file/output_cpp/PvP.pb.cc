// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PvP.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PvP.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* PvPEntryArena_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvPEntryArena_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvPEntryArenaRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvPEntryArenaRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvPGetArenaPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvPGetArenaPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaAttackListPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaAttackListPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvPGetArenaPlayerInfoRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvPGetArenaPlayerInfoRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvPGetRankingList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvPGetRankingList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvPGetRankingListRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvPGetRankingListRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvPArenaFinghtInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvPArenaFinghtInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvPArenaFinghtInfoRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvPArenaFinghtInfoRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvPArenaFightRecordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvPArenaFightRecordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvPArenaFightRecordInfoRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvPArenaFightRecordInfoRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2D_PvPCreatePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2D_PvPCreatePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2D_PvPCreatePlayerRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2D_PvPCreatePlayerRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2D_PvPGetRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2D_PvPGetRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2D_PvPGetRankList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2D_PvPGetRankList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2D_PvPGetRankRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2D_PvPGetRankRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2D_PvPGetRankListRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2D_PvPGetRankListRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpMarkFight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpMarkFight_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpMarkFightRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpMarkFightRet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ArenaResult_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_PvP_2eproto() {
  protobuf_AddDesc_PvP_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PvP.proto");
  GOOGLE_CHECK(file != NULL);
  PvPEntryArena_descriptor_ = file->message_type(0);
  static const int PvPEntryArena_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPEntryArena, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPEntryArena, account_id_),
  };
  PvPEntryArena_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvPEntryArena_descriptor_,
      PvPEntryArena::default_instance_,
      PvPEntryArena_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPEntryArena, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPEntryArena, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvPEntryArena));
  PvPEntryArenaRet_descriptor_ = file->message_type(1);
  static const int PvPEntryArenaRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPEntryArenaRet, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPEntryArenaRet, rank_),
  };
  PvPEntryArenaRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvPEntryArenaRet_descriptor_,
      PvPEntryArenaRet::default_instance_,
      PvPEntryArenaRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPEntryArenaRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPEntryArenaRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvPEntryArenaRet));
  PvPGetArenaPlayerInfo_descriptor_ = file->message_type(2);
  static const int PvPGetArenaPlayerInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPGetArenaPlayerInfo, rank_),
  };
  PvPGetArenaPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvPGetArenaPlayerInfo_descriptor_,
      PvPGetArenaPlayerInfo::default_instance_,
      PvPGetArenaPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPGetArenaPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPGetArenaPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvPGetArenaPlayerInfo));
  ArenaAttackListPlayerInfo_descriptor_ = file->message_type(3);
  static const int ArenaAttackListPlayerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaAttackListPlayerInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaAttackListPlayerInfo, player_info_),
  };
  ArenaAttackListPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaAttackListPlayerInfo_descriptor_,
      ArenaAttackListPlayerInfo::default_instance_,
      ArenaAttackListPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaAttackListPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaAttackListPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaAttackListPlayerInfo));
  PvPGetArenaPlayerInfoRet_descriptor_ = file->message_type(4);
  static const int PvPGetArenaPlayerInfoRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPGetArenaPlayerInfoRet, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPGetArenaPlayerInfoRet, infos_),
  };
  PvPGetArenaPlayerInfoRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvPGetArenaPlayerInfoRet_descriptor_,
      PvPGetArenaPlayerInfoRet::default_instance_,
      PvPGetArenaPlayerInfoRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPGetArenaPlayerInfoRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPGetArenaPlayerInfoRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvPGetArenaPlayerInfoRet));
  PvPGetRankingList_descriptor_ = file->message_type(5);
  static const int PvPGetRankingList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPGetRankingList, beg_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPGetRankingList, end_rank_),
  };
  PvPGetRankingList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvPGetRankingList_descriptor_,
      PvPGetRankingList::default_instance_,
      PvPGetRankingList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPGetRankingList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPGetRankingList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvPGetRankingList));
  RankingInfo_descriptor_ = file->message_type(6);
  static const int RankingInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingInfo, info_),
  };
  RankingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankingInfo_descriptor_,
      RankingInfo::default_instance_,
      RankingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankingInfo));
  PvPGetRankingListRet_descriptor_ = file->message_type(7);
  static const int PvPGetRankingListRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPGetRankingListRet, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPGetRankingListRet, infos_),
  };
  PvPGetRankingListRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvPGetRankingListRet_descriptor_,
      PvPGetRankingListRet::default_instance_,
      PvPGetRankingListRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPGetRankingListRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPGetRankingListRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvPGetRankingListRet));
  PvPArenaFinghtInfo_descriptor_ = file->message_type(8);
  static const int PvPArenaFinghtInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPArenaFinghtInfo, is_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPArenaFinghtInfo, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPArenaFinghtInfo, target_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPArenaFinghtInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPArenaFinghtInfo, self_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPArenaFinghtInfo, self_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPArenaFinghtInfo, self_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPArenaFinghtInfo, self_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPArenaFinghtInfo, self_fight_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPArenaFinghtInfo, self_char_proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPArenaFinghtInfo, self_vip_level_),
  };
  PvPArenaFinghtInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvPArenaFinghtInfo_descriptor_,
      PvPArenaFinghtInfo::default_instance_,
      PvPArenaFinghtInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPArenaFinghtInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPArenaFinghtInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvPArenaFinghtInfo));
  PvPArenaFinghtInfoRet_descriptor_ = file->message_type(9);
  static const int PvPArenaFinghtInfoRet_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPArenaFinghtInfoRet, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPArenaFinghtInfoRet, is_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPArenaFinghtInfoRet, get_coin_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPArenaFinghtInfoRet, new_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPArenaFinghtInfoRet, new_history_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPArenaFinghtInfoRet, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPArenaFinghtInfoRet, target_rank_),
  };
  PvPArenaFinghtInfoRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvPArenaFinghtInfoRet_descriptor_,
      PvPArenaFinghtInfoRet::default_instance_,
      PvPArenaFinghtInfoRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPArenaFinghtInfoRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPArenaFinghtInfoRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvPArenaFinghtInfoRet));
  PvPArenaFightRecordInfo_descriptor_ = file->message_type(10);
  static const int PvPArenaFightRecordInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPArenaFightRecordInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPArenaFightRecordInfo, palyer_id_),
  };
  PvPArenaFightRecordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvPArenaFightRecordInfo_descriptor_,
      PvPArenaFightRecordInfo::default_instance_,
      PvPArenaFightRecordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPArenaFightRecordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPArenaFightRecordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvPArenaFightRecordInfo));
  PvPArenaFightRecordInfoRet_descriptor_ = file->message_type(11);
  static const int PvPArenaFightRecordInfoRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPArenaFightRecordInfoRet, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPArenaFightRecordInfoRet, records_),
  };
  PvPArenaFightRecordInfoRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvPArenaFightRecordInfoRet_descriptor_,
      PvPArenaFightRecordInfoRet::default_instance_,
      PvPArenaFightRecordInfoRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPArenaFightRecordInfoRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPArenaFightRecordInfoRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvPArenaFightRecordInfoRet));
  SG2D_PvPCreatePlayer_descriptor_ = file->message_type(12);
  static const int SG2D_PvPCreatePlayer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_PvPCreatePlayer, craete_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_PvPCreatePlayer, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_PvPCreatePlayer, create_info_),
  };
  SG2D_PvPCreatePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2D_PvPCreatePlayer_descriptor_,
      SG2D_PvPCreatePlayer::default_instance_,
      SG2D_PvPCreatePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_PvPCreatePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_PvPCreatePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2D_PvPCreatePlayer));
  SG2D_PvPCreatePlayerRet_descriptor_ = file->message_type(13);
  static const int SG2D_PvPCreatePlayerRet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_PvPCreatePlayerRet, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_PvPCreatePlayerRet, create_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_PvPCreatePlayerRet, player_id_),
  };
  SG2D_PvPCreatePlayerRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2D_PvPCreatePlayerRet_descriptor_,
      SG2D_PvPCreatePlayerRet::default_instance_,
      SG2D_PvPCreatePlayerRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_PvPCreatePlayerRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_PvPCreatePlayerRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2D_PvPCreatePlayerRet));
  SG2D_PvPGetRank_descriptor_ = file->message_type(14);
  static const int SG2D_PvPGetRank_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_PvPGetRank, beg_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_PvPGetRank, end_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_PvPGetRank, mail_id_),
  };
  SG2D_PvPGetRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2D_PvPGetRank_descriptor_,
      SG2D_PvPGetRank::default_instance_,
      SG2D_PvPGetRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_PvPGetRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_PvPGetRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2D_PvPGetRank));
  SG2D_PvPGetRankList_descriptor_ = file->message_type(15);
  static const int SG2D_PvPGetRankList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_PvPGetRankList, ranks_),
  };
  SG2D_PvPGetRankList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2D_PvPGetRankList_descriptor_,
      SG2D_PvPGetRankList::default_instance_,
      SG2D_PvPGetRankList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_PvPGetRankList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_PvPGetRankList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2D_PvPGetRankList));
  SG2D_PvPGetRankRet_descriptor_ = file->message_type(16);
  static const int SG2D_PvPGetRankRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_PvPGetRankRet, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_PvPGetRankRet, player_ids_),
  };
  SG2D_PvPGetRankRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2D_PvPGetRankRet_descriptor_,
      SG2D_PvPGetRankRet::default_instance_,
      SG2D_PvPGetRankRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_PvPGetRankRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_PvPGetRankRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2D_PvPGetRankRet));
  SG2D_PvPGetRankListRet_descriptor_ = file->message_type(17);
  static const int SG2D_PvPGetRankListRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_PvPGetRankListRet, ranks_),
  };
  SG2D_PvPGetRankListRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2D_PvPGetRankListRet_descriptor_,
      SG2D_PvPGetRankListRet::default_instance_,
      SG2D_PvPGetRankListRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_PvPGetRankListRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_PvPGetRankListRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2D_PvPGetRankListRet));
  PvpMarkFight_descriptor_ = file->message_type(18);
  static const int PvpMarkFight_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpMarkFight, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpMarkFight, player_id_),
  };
  PvpMarkFight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpMarkFight_descriptor_,
      PvpMarkFight::default_instance_,
      PvpMarkFight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpMarkFight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpMarkFight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpMarkFight));
  PvpMarkFightRet_descriptor_ = file->message_type(19);
  static const int PvpMarkFightRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpMarkFightRet, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpMarkFightRet, infos_),
  };
  PvpMarkFightRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpMarkFightRet_descriptor_,
      PvpMarkFightRet::default_instance_,
      PvpMarkFightRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpMarkFightRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpMarkFightRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpMarkFightRet));
  ArenaResult_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PvP_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvPEntryArena_descriptor_, &PvPEntryArena::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvPEntryArenaRet_descriptor_, &PvPEntryArenaRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvPGetArenaPlayerInfo_descriptor_, &PvPGetArenaPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaAttackListPlayerInfo_descriptor_, &ArenaAttackListPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvPGetArenaPlayerInfoRet_descriptor_, &PvPGetArenaPlayerInfoRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvPGetRankingList_descriptor_, &PvPGetRankingList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankingInfo_descriptor_, &RankingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvPGetRankingListRet_descriptor_, &PvPGetRankingListRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvPArenaFinghtInfo_descriptor_, &PvPArenaFinghtInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvPArenaFinghtInfoRet_descriptor_, &PvPArenaFinghtInfoRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvPArenaFightRecordInfo_descriptor_, &PvPArenaFightRecordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvPArenaFightRecordInfoRet_descriptor_, &PvPArenaFightRecordInfoRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2D_PvPCreatePlayer_descriptor_, &SG2D_PvPCreatePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2D_PvPCreatePlayerRet_descriptor_, &SG2D_PvPCreatePlayerRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2D_PvPGetRank_descriptor_, &SG2D_PvPGetRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2D_PvPGetRankList_descriptor_, &SG2D_PvPGetRankList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2D_PvPGetRankRet_descriptor_, &SG2D_PvPGetRankRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2D_PvPGetRankListRet_descriptor_, &SG2D_PvPGetRankListRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpMarkFight_descriptor_, &PvpMarkFight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpMarkFightRet_descriptor_, &PvpMarkFightRet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PvP_2eproto() {
  delete PvPEntryArena::default_instance_;
  delete PvPEntryArena_reflection_;
  delete PvPEntryArenaRet::default_instance_;
  delete PvPEntryArenaRet_reflection_;
  delete PvPGetArenaPlayerInfo::default_instance_;
  delete PvPGetArenaPlayerInfo_reflection_;
  delete ArenaAttackListPlayerInfo::default_instance_;
  delete ArenaAttackListPlayerInfo_reflection_;
  delete PvPGetArenaPlayerInfoRet::default_instance_;
  delete PvPGetArenaPlayerInfoRet_reflection_;
  delete PvPGetRankingList::default_instance_;
  delete PvPGetRankingList_reflection_;
  delete RankingInfo::default_instance_;
  delete RankingInfo_reflection_;
  delete PvPGetRankingListRet::default_instance_;
  delete PvPGetRankingListRet_reflection_;
  delete PvPArenaFinghtInfo::default_instance_;
  delete PvPArenaFinghtInfo_reflection_;
  delete PvPArenaFinghtInfoRet::default_instance_;
  delete PvPArenaFinghtInfoRet_reflection_;
  delete PvPArenaFightRecordInfo::default_instance_;
  delete PvPArenaFightRecordInfo_reflection_;
  delete PvPArenaFightRecordInfoRet::default_instance_;
  delete PvPArenaFightRecordInfoRet_reflection_;
  delete SG2D_PvPCreatePlayer::default_instance_;
  delete SG2D_PvPCreatePlayer_reflection_;
  delete SG2D_PvPCreatePlayerRet::default_instance_;
  delete SG2D_PvPCreatePlayerRet_reflection_;
  delete SG2D_PvPGetRank::default_instance_;
  delete SG2D_PvPGetRank_reflection_;
  delete SG2D_PvPGetRankList::default_instance_;
  delete SG2D_PvPGetRankList_reflection_;
  delete SG2D_PvPGetRankRet::default_instance_;
  delete SG2D_PvPGetRankRet_reflection_;
  delete SG2D_PvPGetRankListRet::default_instance_;
  delete SG2D_PvPGetRankListRet_reflection_;
  delete PvpMarkFight::default_instance_;
  delete PvpMarkFight_reflection_;
  delete PvpMarkFightRet::default_instance_;
  delete PvpMarkFightRet_reflection_;
}

void protobuf_AddDesc_PvP_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_Social_2eproto();
  ::pb::protobuf_AddDesc_InterServer_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tPvP.proto\022\002pb\032\014Social.proto\032\021InterServ"
    "er.proto\"6\n\rPvPEntryArena\022\021\n\tplayer_id\030\001"
    " \001(\004\022\022\n\naccount_id\030\002 \001(\004\"A\n\020PvPEntryAren"
    "aRet\022\037\n\006result\030\001 \001(\0162\017.pb.ArenaResult\022\014\n"
    "\004rank\030\002 \001(\r\"%\n\025PvPGetArenaPlayerInfo\022\014\n\004"
    "rank\030\001 \003(\r\"U\n\031ArenaAttackListPlayerInfo\022"
    "\014\n\004rank\030\001 \001(\r\022*\n\013player_info\030\002 \001(\0132\025.pb."
    "MsgPlayerBaseData\"i\n\030PvPGetArenaPlayerIn"
    "foRet\022\037\n\006result\030\001 \001(\0162\017.pb.ArenaResult\022,"
    "\n\005infos\030\002 \003(\0132\035.pb.ArenaAttackListPlayer"
    "Info\"7\n\021PvPGetRankingList\022\020\n\010beg_rank\030\001 "
    "\001(\r\022\020\n\010end_rank\030\002 \001(\r\"@\n\013RankingInfo\022\014\n\004"
    "rank\030\001 \001(\r\022#\n\004info\030\002 \001(\0132\025.pb.MsgPlayerB"
    "aseData\"W\n\024PvPGetRankingListRet\022\037\n\006resul"
    "t\030\001 \001(\0162\017.pb.ArenaResult\022\036\n\005infos\030\002 \003(\0132"
    "\017.pb.RankingInfo\"\363\001\n\022PvPArenaFinghtInfo\022"
    "\016\n\006is_win\030\001 \001(\010\022\021\n\ttarget_id\030\002 \001(\004\022\023\n\013ta"
    "rget_rank\030\003 \001(\r\022\014\n\004time\030\004 \001(\004\022\022\n\nself_le"
    "vel\030\005 \001(\r\022\021\n\tself_name\030\006 \001(\t\022\017\n\007self_id\030"
    "\007 \001(\004\022\021\n\tself_rank\030\010 \001(\r\022\030\n\020self_fight_v"
    "alue\030\t \001(\r\022\032\n\022self_char_proto_id\030\n \001(\r\022\026"
    "\n\016self_vip_level\030\013 \001(\r\"\264\001\n\025PvPArenaFingh"
    "tInfoRet\022\037\n\006result\030\001 \001(\0162\017.pb.ArenaResul"
    "t\022\016\n\006is_win\030\002 \001(\010\022\026\n\016get_coin_count\030\003 \001("
    "\r\022\020\n\010new_rank\030\004 \001(\r\022\030\n\020new_history_rank\030"
    "\005 \001(\r\022\021\n\ttarget_id\030\006 \001(\004\022\023\n\013target_rank\030"
    "\007 \001(\r\":\n\027PvPArenaFightRecordInfo\022\014\n\004rank"
    "\030\001 \001(\r\022\021\n\tpalyer_id\030\002 \001(\004\"N\n\032PvPArenaFig"
    "htRecordInfoRet\022\037\n\006result\030\001 \001(\0162\017.pb.Are"
    "naResult\022\017\n\007records\030\002 \003(\t\"c\n\024SG2D_PvPCre"
    "atePlayer\022\021\n\tcraete_id\030\001 \001(\004\022\014\n\004rank\030\002 \001"
    "(\r\022*\n\013create_info\030\003 \001(\0132\025.pb.SG2D_Create"
    "Player\"O\n\027SG2D_PvPCreatePlayerRet\022\016\n\006res"
    "ult\030\001 \001(\010\022\021\n\tcreate_id\030\002 \001(\004\022\021\n\tplayer_i"
    "d\030\003 \001(\004\"F\n\017SG2D_PvPGetRank\022\020\n\010beg_rank\030\001"
    " \001(\r\022\020\n\010end_rank\030\002 \001(\r\022\017\n\007mail_id\030\003 \001(\r\""
    "9\n\023SG2D_PvPGetRankList\022\"\n\005ranks\030\001 \003(\0132\023."
    "pb.SG2D_PvPGetRank\"9\n\022SG2D_PvPGetRankRet"
    "\022\017\n\007mail_id\030\001 \001(\r\022\022\n\nplayer_ids\030\002 \003(\004\"\?\n"
    "\026SG2D_PvPGetRankListRet\022%\n\005ranks\030\001 \003(\0132\026"
    ".pb.SG2D_PvPGetRankRet\"/\n\014PvpMarkFight\022\014"
    "\n\004rank\030\001 \001(\r\022\021\n\tplayer_id\030\002 \001(\004\"`\n\017PvpMa"
    "rkFightRet\022\037\n\006result\030\001 \001(\0162\017.pb.ArenaRes"
    "ult\022,\n\005infos\030\002 \001(\0132\035.pb.ArenaAttackListP"
    "layerInfo*\336\002\n\013ArenaResult\022\034\n\030PVP_ARENA_R"
    "ESULT_SUCCESS\020\000\022\036\n\032PVP_ARENA_RESULT_HAD_"
    "ENTRY\020\001\022\"\n\036PVP_ARENA_RESULT_DB_DISCONNEC"
    "T\020\002\022(\n$PVP_ARENA_RESULT_CAN_NOT_FIND_PLA"
    "YER\020\003\022 \n\034PVP_ARENA_RESULT_OTHER_ERROR\020\004\022"
    "%\n!PVP_ARENA_RESULT_FIGHT_MARK_ERROR\020\005\022%"
    "\n!PVP_ARENA_RESULT_SELF_IS_FIGHTING\020\006\022\'\n"
    "#PVP_ARENA_RESULT_TARGET_IS_FIGHTING\020\007\022*"
    "\n&PVP_ARENA_RESULT_TARGET_RANK_IS_CHANGE"
    "\020\010", 2122);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PvP.proto", &protobuf_RegisterTypes);
  PvPEntryArena::default_instance_ = new PvPEntryArena();
  PvPEntryArenaRet::default_instance_ = new PvPEntryArenaRet();
  PvPGetArenaPlayerInfo::default_instance_ = new PvPGetArenaPlayerInfo();
  ArenaAttackListPlayerInfo::default_instance_ = new ArenaAttackListPlayerInfo();
  PvPGetArenaPlayerInfoRet::default_instance_ = new PvPGetArenaPlayerInfoRet();
  PvPGetRankingList::default_instance_ = new PvPGetRankingList();
  RankingInfo::default_instance_ = new RankingInfo();
  PvPGetRankingListRet::default_instance_ = new PvPGetRankingListRet();
  PvPArenaFinghtInfo::default_instance_ = new PvPArenaFinghtInfo();
  PvPArenaFinghtInfoRet::default_instance_ = new PvPArenaFinghtInfoRet();
  PvPArenaFightRecordInfo::default_instance_ = new PvPArenaFightRecordInfo();
  PvPArenaFightRecordInfoRet::default_instance_ = new PvPArenaFightRecordInfoRet();
  SG2D_PvPCreatePlayer::default_instance_ = new SG2D_PvPCreatePlayer();
  SG2D_PvPCreatePlayerRet::default_instance_ = new SG2D_PvPCreatePlayerRet();
  SG2D_PvPGetRank::default_instance_ = new SG2D_PvPGetRank();
  SG2D_PvPGetRankList::default_instance_ = new SG2D_PvPGetRankList();
  SG2D_PvPGetRankRet::default_instance_ = new SG2D_PvPGetRankRet();
  SG2D_PvPGetRankListRet::default_instance_ = new SG2D_PvPGetRankListRet();
  PvpMarkFight::default_instance_ = new PvpMarkFight();
  PvpMarkFightRet::default_instance_ = new PvpMarkFightRet();
  PvPEntryArena::default_instance_->InitAsDefaultInstance();
  PvPEntryArenaRet::default_instance_->InitAsDefaultInstance();
  PvPGetArenaPlayerInfo::default_instance_->InitAsDefaultInstance();
  ArenaAttackListPlayerInfo::default_instance_->InitAsDefaultInstance();
  PvPGetArenaPlayerInfoRet::default_instance_->InitAsDefaultInstance();
  PvPGetRankingList::default_instance_->InitAsDefaultInstance();
  RankingInfo::default_instance_->InitAsDefaultInstance();
  PvPGetRankingListRet::default_instance_->InitAsDefaultInstance();
  PvPArenaFinghtInfo::default_instance_->InitAsDefaultInstance();
  PvPArenaFinghtInfoRet::default_instance_->InitAsDefaultInstance();
  PvPArenaFightRecordInfo::default_instance_->InitAsDefaultInstance();
  PvPArenaFightRecordInfoRet::default_instance_->InitAsDefaultInstance();
  SG2D_PvPCreatePlayer::default_instance_->InitAsDefaultInstance();
  SG2D_PvPCreatePlayerRet::default_instance_->InitAsDefaultInstance();
  SG2D_PvPGetRank::default_instance_->InitAsDefaultInstance();
  SG2D_PvPGetRankList::default_instance_->InitAsDefaultInstance();
  SG2D_PvPGetRankRet::default_instance_->InitAsDefaultInstance();
  SG2D_PvPGetRankListRet::default_instance_->InitAsDefaultInstance();
  PvpMarkFight::default_instance_->InitAsDefaultInstance();
  PvpMarkFightRet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PvP_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PvP_2eproto {
  StaticDescriptorInitializer_PvP_2eproto() {
    protobuf_AddDesc_PvP_2eproto();
  }
} static_descriptor_initializer_PvP_2eproto_;
const ::google::protobuf::EnumDescriptor* ArenaResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaResult_descriptor_;
}
bool ArenaResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PvPEntryArena::kPlayerIdFieldNumber;
const int PvPEntryArena::kAccountIdFieldNumber;
#endif  // !_MSC_VER

PvPEntryArena::PvPEntryArena()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvPEntryArena::InitAsDefaultInstance() {
}

PvPEntryArena::PvPEntryArena(const PvPEntryArena& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvPEntryArena::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  account_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPEntryArena::~PvPEntryArena() {
  SharedDtor();
}

void PvPEntryArena::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvPEntryArena::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvPEntryArena::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvPEntryArena_descriptor_;
}

const PvPEntryArena& PvPEntryArena::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvP_2eproto();
  return *default_instance_;
}

PvPEntryArena* PvPEntryArena::default_instance_ = NULL;

PvPEntryArena* PvPEntryArena::New() const {
  return new PvPEntryArena;
}

void PvPEntryArena::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    account_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvPEntryArena::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }

      // optional uint64 account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvPEntryArena::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional uint64 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvPEntryArena::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional uint64 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvPEntryArena::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint64 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPEntryArena::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvPEntryArena* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvPEntryArena*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvPEntryArena::MergeFrom(const PvPEntryArena& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvPEntryArena::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvPEntryArena::CopyFrom(const PvPEntryArena& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPEntryArena::IsInitialized() const {

  return true;
}

void PvPEntryArena::Swap(PvPEntryArena* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvPEntryArena::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvPEntryArena_descriptor_;
  metadata.reflection = PvPEntryArena_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvPEntryArenaRet::kResultFieldNumber;
const int PvPEntryArenaRet::kRankFieldNumber;
#endif  // !_MSC_VER

PvPEntryArenaRet::PvPEntryArenaRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvPEntryArenaRet::InitAsDefaultInstance() {
}

PvPEntryArenaRet::PvPEntryArenaRet(const PvPEntryArenaRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvPEntryArenaRet::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPEntryArenaRet::~PvPEntryArenaRet() {
  SharedDtor();
}

void PvPEntryArenaRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvPEntryArenaRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvPEntryArenaRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvPEntryArenaRet_descriptor_;
}

const PvPEntryArenaRet& PvPEntryArenaRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvP_2eproto();
  return *default_instance_;
}

PvPEntryArenaRet* PvPEntryArenaRet::default_instance_ = NULL;

PvPEntryArenaRet* PvPEntryArenaRet::New() const {
  return new PvPEntryArenaRet;
}

void PvPEntryArenaRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    rank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvPEntryArenaRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ArenaResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ArenaResult_IsValid(value)) {
            set_result(static_cast< ::pb::ArenaResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvPEntryArenaRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.ArenaResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvPEntryArenaRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.ArenaResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvPEntryArenaRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ArenaResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPEntryArenaRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvPEntryArenaRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvPEntryArenaRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvPEntryArenaRet::MergeFrom(const PvPEntryArenaRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvPEntryArenaRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvPEntryArenaRet::CopyFrom(const PvPEntryArenaRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPEntryArenaRet::IsInitialized() const {

  return true;
}

void PvPEntryArenaRet::Swap(PvPEntryArenaRet* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvPEntryArenaRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvPEntryArenaRet_descriptor_;
  metadata.reflection = PvPEntryArenaRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvPGetArenaPlayerInfo::kRankFieldNumber;
#endif  // !_MSC_VER

PvPGetArenaPlayerInfo::PvPGetArenaPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvPGetArenaPlayerInfo::InitAsDefaultInstance() {
}

PvPGetArenaPlayerInfo::PvPGetArenaPlayerInfo(const PvPGetArenaPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvPGetArenaPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPGetArenaPlayerInfo::~PvPGetArenaPlayerInfo() {
  SharedDtor();
}

void PvPGetArenaPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvPGetArenaPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvPGetArenaPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvPGetArenaPlayerInfo_descriptor_;
}

const PvPGetArenaPlayerInfo& PvPGetArenaPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvP_2eproto();
  return *default_instance_;
}

PvPGetArenaPlayerInfo* PvPGetArenaPlayerInfo::default_instance_ = NULL;

PvPGetArenaPlayerInfo* PvPGetArenaPlayerInfo::New() const {
  return new PvPGetArenaPlayerInfo;
}

void PvPGetArenaPlayerInfo::Clear() {
  rank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvPGetArenaPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_rank())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rank())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_rank;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvPGetArenaPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 rank = 1;
  for (int i = 0; i < this->rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->rank(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvPGetArenaPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 rank = 1;
  for (int i = 0; i < this->rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->rank(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvPGetArenaPlayerInfo::ByteSize() const {
  int total_size = 0;

  // repeated uint32 rank = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->rank_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rank(i));
    }
    total_size += 1 * this->rank_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPGetArenaPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvPGetArenaPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvPGetArenaPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvPGetArenaPlayerInfo::MergeFrom(const PvPGetArenaPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_.MergeFrom(from.rank_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvPGetArenaPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvPGetArenaPlayerInfo::CopyFrom(const PvPGetArenaPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPGetArenaPlayerInfo::IsInitialized() const {

  return true;
}

void PvPGetArenaPlayerInfo::Swap(PvPGetArenaPlayerInfo* other) {
  if (other != this) {
    rank_.Swap(&other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvPGetArenaPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvPGetArenaPlayerInfo_descriptor_;
  metadata.reflection = PvPGetArenaPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaAttackListPlayerInfo::kRankFieldNumber;
const int ArenaAttackListPlayerInfo::kPlayerInfoFieldNumber;
#endif  // !_MSC_VER

ArenaAttackListPlayerInfo::ArenaAttackListPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaAttackListPlayerInfo::InitAsDefaultInstance() {
  player_info_ = const_cast< ::pb::MsgPlayerBaseData*>(&::pb::MsgPlayerBaseData::default_instance());
}

ArenaAttackListPlayerInfo::ArenaAttackListPlayerInfo(const ArenaAttackListPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaAttackListPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  player_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaAttackListPlayerInfo::~ArenaAttackListPlayerInfo() {
  SharedDtor();
}

void ArenaAttackListPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete player_info_;
  }
}

void ArenaAttackListPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaAttackListPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaAttackListPlayerInfo_descriptor_;
}

const ArenaAttackListPlayerInfo& ArenaAttackListPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvP_2eproto();
  return *default_instance_;
}

ArenaAttackListPlayerInfo* ArenaAttackListPlayerInfo::default_instance_ = NULL;

ArenaAttackListPlayerInfo* ArenaAttackListPlayerInfo::New() const {
  return new ArenaAttackListPlayerInfo;
}

void ArenaAttackListPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0u;
    if (has_player_info()) {
      if (player_info_ != NULL) player_info_->::pb::MsgPlayerBaseData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaAttackListPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_info;
        break;
      }

      // optional .pb.MsgPlayerBaseData player_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaAttackListPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // optional .pb.MsgPlayerBaseData player_info = 2;
  if (has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaAttackListPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // optional .pb.MsgPlayerBaseData player_info = 2;
  if (has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaAttackListPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional .pb.MsgPlayerBaseData player_info = 2;
    if (has_player_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaAttackListPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaAttackListPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaAttackListPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaAttackListPlayerInfo::MergeFrom(const ArenaAttackListPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_player_info()) {
      mutable_player_info()->::pb::MsgPlayerBaseData::MergeFrom(from.player_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaAttackListPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaAttackListPlayerInfo::CopyFrom(const ArenaAttackListPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaAttackListPlayerInfo::IsInitialized() const {

  if (has_player_info()) {
    if (!this->player_info().IsInitialized()) return false;
  }
  return true;
}

void ArenaAttackListPlayerInfo::Swap(ArenaAttackListPlayerInfo* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(player_info_, other->player_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaAttackListPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaAttackListPlayerInfo_descriptor_;
  metadata.reflection = ArenaAttackListPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvPGetArenaPlayerInfoRet::kResultFieldNumber;
const int PvPGetArenaPlayerInfoRet::kInfosFieldNumber;
#endif  // !_MSC_VER

PvPGetArenaPlayerInfoRet::PvPGetArenaPlayerInfoRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvPGetArenaPlayerInfoRet::InitAsDefaultInstance() {
}

PvPGetArenaPlayerInfoRet::PvPGetArenaPlayerInfoRet(const PvPGetArenaPlayerInfoRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvPGetArenaPlayerInfoRet::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPGetArenaPlayerInfoRet::~PvPGetArenaPlayerInfoRet() {
  SharedDtor();
}

void PvPGetArenaPlayerInfoRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvPGetArenaPlayerInfoRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvPGetArenaPlayerInfoRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvPGetArenaPlayerInfoRet_descriptor_;
}

const PvPGetArenaPlayerInfoRet& PvPGetArenaPlayerInfoRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvP_2eproto();
  return *default_instance_;
}

PvPGetArenaPlayerInfoRet* PvPGetArenaPlayerInfoRet::default_instance_ = NULL;

PvPGetArenaPlayerInfoRet* PvPGetArenaPlayerInfoRet::New() const {
  return new PvPGetArenaPlayerInfoRet;
}

void PvPGetArenaPlayerInfoRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvPGetArenaPlayerInfoRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ArenaResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ArenaResult_IsValid(value)) {
            set_result(static_cast< ::pb::ArenaResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .pb.ArenaAttackListPlayerInfo infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvPGetArenaPlayerInfoRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.ArenaResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated .pb.ArenaAttackListPlayerInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvPGetArenaPlayerInfoRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.ArenaResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated .pb.ArenaAttackListPlayerInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvPGetArenaPlayerInfoRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ArenaResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  // repeated .pb.ArenaAttackListPlayerInfo infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPGetArenaPlayerInfoRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvPGetArenaPlayerInfoRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvPGetArenaPlayerInfoRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvPGetArenaPlayerInfoRet::MergeFrom(const PvPGetArenaPlayerInfoRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvPGetArenaPlayerInfoRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvPGetArenaPlayerInfoRet::CopyFrom(const PvPGetArenaPlayerInfoRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPGetArenaPlayerInfoRet::IsInitialized() const {

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void PvPGetArenaPlayerInfoRet::Swap(PvPGetArenaPlayerInfoRet* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvPGetArenaPlayerInfoRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvPGetArenaPlayerInfoRet_descriptor_;
  metadata.reflection = PvPGetArenaPlayerInfoRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvPGetRankingList::kBegRankFieldNumber;
const int PvPGetRankingList::kEndRankFieldNumber;
#endif  // !_MSC_VER

PvPGetRankingList::PvPGetRankingList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvPGetRankingList::InitAsDefaultInstance() {
}

PvPGetRankingList::PvPGetRankingList(const PvPGetRankingList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvPGetRankingList::SharedCtor() {
  _cached_size_ = 0;
  beg_rank_ = 0u;
  end_rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPGetRankingList::~PvPGetRankingList() {
  SharedDtor();
}

void PvPGetRankingList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvPGetRankingList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvPGetRankingList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvPGetRankingList_descriptor_;
}

const PvPGetRankingList& PvPGetRankingList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvP_2eproto();
  return *default_instance_;
}

PvPGetRankingList* PvPGetRankingList::default_instance_ = NULL;

PvPGetRankingList* PvPGetRankingList::New() const {
  return new PvPGetRankingList;
}

void PvPGetRankingList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beg_rank_ = 0u;
    end_rank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvPGetRankingList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 beg_rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beg_rank_)));
          set_has_beg_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end_rank;
        break;
      }

      // optional uint32 end_rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_rank_)));
          set_has_end_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvPGetRankingList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 beg_rank = 1;
  if (has_beg_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->beg_rank(), output);
  }

  // optional uint32 end_rank = 2;
  if (has_end_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->end_rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvPGetRankingList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 beg_rank = 1;
  if (has_beg_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->beg_rank(), target);
  }

  // optional uint32 end_rank = 2;
  if (has_end_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->end_rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvPGetRankingList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 beg_rank = 1;
    if (has_beg_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beg_rank());
    }

    // optional uint32 end_rank = 2;
    if (has_end_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPGetRankingList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvPGetRankingList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvPGetRankingList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvPGetRankingList::MergeFrom(const PvPGetRankingList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beg_rank()) {
      set_beg_rank(from.beg_rank());
    }
    if (from.has_end_rank()) {
      set_end_rank(from.end_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvPGetRankingList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvPGetRankingList::CopyFrom(const PvPGetRankingList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPGetRankingList::IsInitialized() const {

  return true;
}

void PvPGetRankingList::Swap(PvPGetRankingList* other) {
  if (other != this) {
    std::swap(beg_rank_, other->beg_rank_);
    std::swap(end_rank_, other->end_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvPGetRankingList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvPGetRankingList_descriptor_;
  metadata.reflection = PvPGetRankingList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankingInfo::kRankFieldNumber;
const int RankingInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

RankingInfo::RankingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankingInfo::InitAsDefaultInstance() {
  info_ = const_cast< ::pb::MsgPlayerBaseData*>(&::pb::MsgPlayerBaseData::default_instance());
}

RankingInfo::RankingInfo(const RankingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankingInfo::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankingInfo::~RankingInfo() {
  SharedDtor();
}

void RankingInfo::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void RankingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankingInfo_descriptor_;
}

const RankingInfo& RankingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvP_2eproto();
  return *default_instance_;
}

RankingInfo* RankingInfo::default_instance_ = NULL;

RankingInfo* RankingInfo::New() const {
  return new RankingInfo;
}

void RankingInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::pb::MsgPlayerBaseData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .pb.MsgPlayerBaseData info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // optional .pb.MsgPlayerBaseData info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // optional .pb.MsgPlayerBaseData info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional .pb.MsgPlayerBaseData info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankingInfo::MergeFrom(const RankingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_info()) {
      mutable_info()->::pb::MsgPlayerBaseData::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankingInfo::CopyFrom(const RankingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankingInfo::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void RankingInfo::Swap(RankingInfo* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankingInfo_descriptor_;
  metadata.reflection = RankingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvPGetRankingListRet::kResultFieldNumber;
const int PvPGetRankingListRet::kInfosFieldNumber;
#endif  // !_MSC_VER

PvPGetRankingListRet::PvPGetRankingListRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvPGetRankingListRet::InitAsDefaultInstance() {
}

PvPGetRankingListRet::PvPGetRankingListRet(const PvPGetRankingListRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvPGetRankingListRet::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPGetRankingListRet::~PvPGetRankingListRet() {
  SharedDtor();
}

void PvPGetRankingListRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvPGetRankingListRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvPGetRankingListRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvPGetRankingListRet_descriptor_;
}

const PvPGetRankingListRet& PvPGetRankingListRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvP_2eproto();
  return *default_instance_;
}

PvPGetRankingListRet* PvPGetRankingListRet::default_instance_ = NULL;

PvPGetRankingListRet* PvPGetRankingListRet::New() const {
  return new PvPGetRankingListRet;
}

void PvPGetRankingListRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvPGetRankingListRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ArenaResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ArenaResult_IsValid(value)) {
            set_result(static_cast< ::pb::ArenaResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .pb.RankingInfo infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvPGetRankingListRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.ArenaResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated .pb.RankingInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvPGetRankingListRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.ArenaResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated .pb.RankingInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvPGetRankingListRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ArenaResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  // repeated .pb.RankingInfo infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPGetRankingListRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvPGetRankingListRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvPGetRankingListRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvPGetRankingListRet::MergeFrom(const PvPGetRankingListRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvPGetRankingListRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvPGetRankingListRet::CopyFrom(const PvPGetRankingListRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPGetRankingListRet::IsInitialized() const {

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void PvPGetRankingListRet::Swap(PvPGetRankingListRet* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvPGetRankingListRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvPGetRankingListRet_descriptor_;
  metadata.reflection = PvPGetRankingListRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvPArenaFinghtInfo::kIsWinFieldNumber;
const int PvPArenaFinghtInfo::kTargetIdFieldNumber;
const int PvPArenaFinghtInfo::kTargetRankFieldNumber;
const int PvPArenaFinghtInfo::kTimeFieldNumber;
const int PvPArenaFinghtInfo::kSelfLevelFieldNumber;
const int PvPArenaFinghtInfo::kSelfNameFieldNumber;
const int PvPArenaFinghtInfo::kSelfIdFieldNumber;
const int PvPArenaFinghtInfo::kSelfRankFieldNumber;
const int PvPArenaFinghtInfo::kSelfFightValueFieldNumber;
const int PvPArenaFinghtInfo::kSelfCharProtoIdFieldNumber;
const int PvPArenaFinghtInfo::kSelfVipLevelFieldNumber;
#endif  // !_MSC_VER

PvPArenaFinghtInfo::PvPArenaFinghtInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvPArenaFinghtInfo::InitAsDefaultInstance() {
}

PvPArenaFinghtInfo::PvPArenaFinghtInfo(const PvPArenaFinghtInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvPArenaFinghtInfo::SharedCtor() {
  _cached_size_ = 0;
  is_win_ = false;
  target_id_ = GOOGLE_ULONGLONG(0);
  target_rank_ = 0u;
  time_ = GOOGLE_ULONGLONG(0);
  self_level_ = 0u;
  self_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  self_id_ = GOOGLE_ULONGLONG(0);
  self_rank_ = 0u;
  self_fight_value_ = 0u;
  self_char_proto_id_ = 0u;
  self_vip_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPArenaFinghtInfo::~PvPArenaFinghtInfo() {
  SharedDtor();
}

void PvPArenaFinghtInfo::SharedDtor() {
  if (self_name_ != &::google::protobuf::internal::kEmptyString) {
    delete self_name_;
  }
  if (this != default_instance_) {
  }
}

void PvPArenaFinghtInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvPArenaFinghtInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvPArenaFinghtInfo_descriptor_;
}

const PvPArenaFinghtInfo& PvPArenaFinghtInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvP_2eproto();
  return *default_instance_;
}

PvPArenaFinghtInfo* PvPArenaFinghtInfo::default_instance_ = NULL;

PvPArenaFinghtInfo* PvPArenaFinghtInfo::New() const {
  return new PvPArenaFinghtInfo;
}

void PvPArenaFinghtInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_win_ = false;
    target_id_ = GOOGLE_ULONGLONG(0);
    target_rank_ = 0u;
    time_ = GOOGLE_ULONGLONG(0);
    self_level_ = 0u;
    if (has_self_name()) {
      if (self_name_ != &::google::protobuf::internal::kEmptyString) {
        self_name_->clear();
      }
    }
    self_id_ = GOOGLE_ULONGLONG(0);
    self_rank_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    self_fight_value_ = 0u;
    self_char_proto_id_ = 0u;
    self_vip_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvPArenaFinghtInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_win = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_win_)));
          set_has_is_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_id;
        break;
      }

      // optional uint64 target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target_rank;
        break;
      }

      // optional uint32 target_rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_rank_)));
          set_has_target_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional uint64 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_self_level;
        break;
      }

      // optional uint32 self_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &self_level_)));
          set_has_self_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_self_name;
        break;
      }

      // optional string self_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_self_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->self_name().data(), this->self_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_self_id;
        break;
      }

      // optional uint64 self_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &self_id_)));
          set_has_self_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_self_rank;
        break;
      }

      // optional uint32 self_rank = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &self_rank_)));
          set_has_self_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_self_fight_value;
        break;
      }

      // optional uint32 self_fight_value = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_fight_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &self_fight_value_)));
          set_has_self_fight_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_self_char_proto_id;
        break;
      }

      // optional uint32 self_char_proto_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_char_proto_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &self_char_proto_id_)));
          set_has_self_char_proto_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_self_vip_level;
        break;
      }

      // optional uint32 self_vip_level = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &self_vip_level_)));
          set_has_self_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvPArenaFinghtInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_win = 1;
  if (has_is_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_win(), output);
  }

  // optional uint64 target_id = 2;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->target_id(), output);
  }

  // optional uint32 target_rank = 3;
  if (has_target_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target_rank(), output);
  }

  // optional uint64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->time(), output);
  }

  // optional uint32 self_level = 5;
  if (has_self_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->self_level(), output);
  }

  // optional string self_name = 6;
  if (has_self_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->self_name().data(), this->self_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->self_name(), output);
  }

  // optional uint64 self_id = 7;
  if (has_self_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->self_id(), output);
  }

  // optional uint32 self_rank = 8;
  if (has_self_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->self_rank(), output);
  }

  // optional uint32 self_fight_value = 9;
  if (has_self_fight_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->self_fight_value(), output);
  }

  // optional uint32 self_char_proto_id = 10;
  if (has_self_char_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->self_char_proto_id(), output);
  }

  // optional uint32 self_vip_level = 11;
  if (has_self_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->self_vip_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvPArenaFinghtInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_win = 1;
  if (has_is_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_win(), target);
  }

  // optional uint64 target_id = 2;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->target_id(), target);
  }

  // optional uint32 target_rank = 3;
  if (has_target_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->target_rank(), target);
  }

  // optional uint64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->time(), target);
  }

  // optional uint32 self_level = 5;
  if (has_self_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->self_level(), target);
  }

  // optional string self_name = 6;
  if (has_self_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->self_name().data(), this->self_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->self_name(), target);
  }

  // optional uint64 self_id = 7;
  if (has_self_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->self_id(), target);
  }

  // optional uint32 self_rank = 8;
  if (has_self_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->self_rank(), target);
  }

  // optional uint32 self_fight_value = 9;
  if (has_self_fight_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->self_fight_value(), target);
  }

  // optional uint32 self_char_proto_id = 10;
  if (has_self_char_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->self_char_proto_id(), target);
  }

  // optional uint32 self_vip_level = 11;
  if (has_self_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->self_vip_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvPArenaFinghtInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_win = 1;
    if (has_is_win()) {
      total_size += 1 + 1;
    }

    // optional uint64 target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

    // optional uint32 target_rank = 3;
    if (has_target_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_rank());
    }

    // optional uint64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional uint32 self_level = 5;
    if (has_self_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->self_level());
    }

    // optional string self_name = 6;
    if (has_self_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->self_name());
    }

    // optional uint64 self_id = 7;
    if (has_self_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->self_id());
    }

    // optional uint32 self_rank = 8;
    if (has_self_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->self_rank());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 self_fight_value = 9;
    if (has_self_fight_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->self_fight_value());
    }

    // optional uint32 self_char_proto_id = 10;
    if (has_self_char_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->self_char_proto_id());
    }

    // optional uint32 self_vip_level = 11;
    if (has_self_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->self_vip_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPArenaFinghtInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvPArenaFinghtInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvPArenaFinghtInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvPArenaFinghtInfo::MergeFrom(const PvPArenaFinghtInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_win()) {
      set_is_win(from.is_win());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_target_rank()) {
      set_target_rank(from.target_rank());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_self_level()) {
      set_self_level(from.self_level());
    }
    if (from.has_self_name()) {
      set_self_name(from.self_name());
    }
    if (from.has_self_id()) {
      set_self_id(from.self_id());
    }
    if (from.has_self_rank()) {
      set_self_rank(from.self_rank());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_self_fight_value()) {
      set_self_fight_value(from.self_fight_value());
    }
    if (from.has_self_char_proto_id()) {
      set_self_char_proto_id(from.self_char_proto_id());
    }
    if (from.has_self_vip_level()) {
      set_self_vip_level(from.self_vip_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvPArenaFinghtInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvPArenaFinghtInfo::CopyFrom(const PvPArenaFinghtInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPArenaFinghtInfo::IsInitialized() const {

  return true;
}

void PvPArenaFinghtInfo::Swap(PvPArenaFinghtInfo* other) {
  if (other != this) {
    std::swap(is_win_, other->is_win_);
    std::swap(target_id_, other->target_id_);
    std::swap(target_rank_, other->target_rank_);
    std::swap(time_, other->time_);
    std::swap(self_level_, other->self_level_);
    std::swap(self_name_, other->self_name_);
    std::swap(self_id_, other->self_id_);
    std::swap(self_rank_, other->self_rank_);
    std::swap(self_fight_value_, other->self_fight_value_);
    std::swap(self_char_proto_id_, other->self_char_proto_id_);
    std::swap(self_vip_level_, other->self_vip_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvPArenaFinghtInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvPArenaFinghtInfo_descriptor_;
  metadata.reflection = PvPArenaFinghtInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvPArenaFinghtInfoRet::kResultFieldNumber;
const int PvPArenaFinghtInfoRet::kIsWinFieldNumber;
const int PvPArenaFinghtInfoRet::kGetCoinCountFieldNumber;
const int PvPArenaFinghtInfoRet::kNewRankFieldNumber;
const int PvPArenaFinghtInfoRet::kNewHistoryRankFieldNumber;
const int PvPArenaFinghtInfoRet::kTargetIdFieldNumber;
const int PvPArenaFinghtInfoRet::kTargetRankFieldNumber;
#endif  // !_MSC_VER

PvPArenaFinghtInfoRet::PvPArenaFinghtInfoRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvPArenaFinghtInfoRet::InitAsDefaultInstance() {
}

PvPArenaFinghtInfoRet::PvPArenaFinghtInfoRet(const PvPArenaFinghtInfoRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvPArenaFinghtInfoRet::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  is_win_ = false;
  get_coin_count_ = 0u;
  new_rank_ = 0u;
  new_history_rank_ = 0u;
  target_id_ = GOOGLE_ULONGLONG(0);
  target_rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPArenaFinghtInfoRet::~PvPArenaFinghtInfoRet() {
  SharedDtor();
}

void PvPArenaFinghtInfoRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvPArenaFinghtInfoRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvPArenaFinghtInfoRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvPArenaFinghtInfoRet_descriptor_;
}

const PvPArenaFinghtInfoRet& PvPArenaFinghtInfoRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvP_2eproto();
  return *default_instance_;
}

PvPArenaFinghtInfoRet* PvPArenaFinghtInfoRet::default_instance_ = NULL;

PvPArenaFinghtInfoRet* PvPArenaFinghtInfoRet::New() const {
  return new PvPArenaFinghtInfoRet;
}

void PvPArenaFinghtInfoRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    is_win_ = false;
    get_coin_count_ = 0u;
    new_rank_ = 0u;
    new_history_rank_ = 0u;
    target_id_ = GOOGLE_ULONGLONG(0);
    target_rank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvPArenaFinghtInfoRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ArenaResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ArenaResult_IsValid(value)) {
            set_result(static_cast< ::pb::ArenaResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_win;
        break;
      }

      // optional bool is_win = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_win_)));
          set_has_is_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_get_coin_count;
        break;
      }

      // optional uint32 get_coin_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_coin_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &get_coin_count_)));
          set_has_get_coin_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_new_rank;
        break;
      }

      // optional uint32 new_rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_rank_)));
          set_has_new_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_new_history_rank;
        break;
      }

      // optional uint32 new_history_rank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_history_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_history_rank_)));
          set_has_new_history_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_target_id;
        break;
      }

      // optional uint64 target_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_target_rank;
        break;
      }

      // optional uint32 target_rank = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_rank_)));
          set_has_target_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvPArenaFinghtInfoRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.ArenaResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional bool is_win = 2;
  if (has_is_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_win(), output);
  }

  // optional uint32 get_coin_count = 3;
  if (has_get_coin_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->get_coin_count(), output);
  }

  // optional uint32 new_rank = 4;
  if (has_new_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->new_rank(), output);
  }

  // optional uint32 new_history_rank = 5;
  if (has_new_history_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->new_history_rank(), output);
  }

  // optional uint64 target_id = 6;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->target_id(), output);
  }

  // optional uint32 target_rank = 7;
  if (has_target_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->target_rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvPArenaFinghtInfoRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.ArenaResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional bool is_win = 2;
  if (has_is_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_win(), target);
  }

  // optional uint32 get_coin_count = 3;
  if (has_get_coin_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->get_coin_count(), target);
  }

  // optional uint32 new_rank = 4;
  if (has_new_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->new_rank(), target);
  }

  // optional uint32 new_history_rank = 5;
  if (has_new_history_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->new_history_rank(), target);
  }

  // optional uint64 target_id = 6;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->target_id(), target);
  }

  // optional uint32 target_rank = 7;
  if (has_target_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->target_rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvPArenaFinghtInfoRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ArenaResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional bool is_win = 2;
    if (has_is_win()) {
      total_size += 1 + 1;
    }

    // optional uint32 get_coin_count = 3;
    if (has_get_coin_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->get_coin_count());
    }

    // optional uint32 new_rank = 4;
    if (has_new_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_rank());
    }

    // optional uint32 new_history_rank = 5;
    if (has_new_history_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_history_rank());
    }

    // optional uint64 target_id = 6;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

    // optional uint32 target_rank = 7;
    if (has_target_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPArenaFinghtInfoRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvPArenaFinghtInfoRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvPArenaFinghtInfoRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvPArenaFinghtInfoRet::MergeFrom(const PvPArenaFinghtInfoRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_is_win()) {
      set_is_win(from.is_win());
    }
    if (from.has_get_coin_count()) {
      set_get_coin_count(from.get_coin_count());
    }
    if (from.has_new_rank()) {
      set_new_rank(from.new_rank());
    }
    if (from.has_new_history_rank()) {
      set_new_history_rank(from.new_history_rank());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_target_rank()) {
      set_target_rank(from.target_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvPArenaFinghtInfoRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvPArenaFinghtInfoRet::CopyFrom(const PvPArenaFinghtInfoRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPArenaFinghtInfoRet::IsInitialized() const {

  return true;
}

void PvPArenaFinghtInfoRet::Swap(PvPArenaFinghtInfoRet* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(is_win_, other->is_win_);
    std::swap(get_coin_count_, other->get_coin_count_);
    std::swap(new_rank_, other->new_rank_);
    std::swap(new_history_rank_, other->new_history_rank_);
    std::swap(target_id_, other->target_id_);
    std::swap(target_rank_, other->target_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvPArenaFinghtInfoRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvPArenaFinghtInfoRet_descriptor_;
  metadata.reflection = PvPArenaFinghtInfoRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvPArenaFightRecordInfo::kRankFieldNumber;
const int PvPArenaFightRecordInfo::kPalyerIdFieldNumber;
#endif  // !_MSC_VER

PvPArenaFightRecordInfo::PvPArenaFightRecordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvPArenaFightRecordInfo::InitAsDefaultInstance() {
}

PvPArenaFightRecordInfo::PvPArenaFightRecordInfo(const PvPArenaFightRecordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvPArenaFightRecordInfo::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  palyer_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPArenaFightRecordInfo::~PvPArenaFightRecordInfo() {
  SharedDtor();
}

void PvPArenaFightRecordInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvPArenaFightRecordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvPArenaFightRecordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvPArenaFightRecordInfo_descriptor_;
}

const PvPArenaFightRecordInfo& PvPArenaFightRecordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvP_2eproto();
  return *default_instance_;
}

PvPArenaFightRecordInfo* PvPArenaFightRecordInfo::default_instance_ = NULL;

PvPArenaFightRecordInfo* PvPArenaFightRecordInfo::New() const {
  return new PvPArenaFightRecordInfo;
}

void PvPArenaFightRecordInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0u;
    palyer_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvPArenaFightRecordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_palyer_id;
        break;
      }

      // optional uint64 palyer_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_palyer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &palyer_id_)));
          set_has_palyer_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvPArenaFightRecordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // optional uint64 palyer_id = 2;
  if (has_palyer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->palyer_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvPArenaFightRecordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // optional uint64 palyer_id = 2;
  if (has_palyer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->palyer_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvPArenaFightRecordInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint64 palyer_id = 2;
    if (has_palyer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->palyer_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPArenaFightRecordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvPArenaFightRecordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvPArenaFightRecordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvPArenaFightRecordInfo::MergeFrom(const PvPArenaFightRecordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_palyer_id()) {
      set_palyer_id(from.palyer_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvPArenaFightRecordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvPArenaFightRecordInfo::CopyFrom(const PvPArenaFightRecordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPArenaFightRecordInfo::IsInitialized() const {

  return true;
}

void PvPArenaFightRecordInfo::Swap(PvPArenaFightRecordInfo* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(palyer_id_, other->palyer_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvPArenaFightRecordInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvPArenaFightRecordInfo_descriptor_;
  metadata.reflection = PvPArenaFightRecordInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvPArenaFightRecordInfoRet::kResultFieldNumber;
const int PvPArenaFightRecordInfoRet::kRecordsFieldNumber;
#endif  // !_MSC_VER

PvPArenaFightRecordInfoRet::PvPArenaFightRecordInfoRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvPArenaFightRecordInfoRet::InitAsDefaultInstance() {
}

PvPArenaFightRecordInfoRet::PvPArenaFightRecordInfoRet(const PvPArenaFightRecordInfoRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvPArenaFightRecordInfoRet::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPArenaFightRecordInfoRet::~PvPArenaFightRecordInfoRet() {
  SharedDtor();
}

void PvPArenaFightRecordInfoRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvPArenaFightRecordInfoRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvPArenaFightRecordInfoRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvPArenaFightRecordInfoRet_descriptor_;
}

const PvPArenaFightRecordInfoRet& PvPArenaFightRecordInfoRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvP_2eproto();
  return *default_instance_;
}

PvPArenaFightRecordInfoRet* PvPArenaFightRecordInfoRet::default_instance_ = NULL;

PvPArenaFightRecordInfoRet* PvPArenaFightRecordInfoRet::New() const {
  return new PvPArenaFightRecordInfoRet;
}

void PvPArenaFightRecordInfoRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvPArenaFightRecordInfoRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ArenaResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ArenaResult_IsValid(value)) {
            set_result(static_cast< ::pb::ArenaResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_records;
        break;
      }

      // repeated string records = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_records()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->records(this->records_size() - 1).data(),
            this->records(this->records_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_records;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvPArenaFightRecordInfoRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.ArenaResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated string records = 2;
  for (int i = 0; i < this->records_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->records(i).data(), this->records(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->records(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvPArenaFightRecordInfoRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.ArenaResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated string records = 2;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->records(i).data(), this->records(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->records(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvPArenaFightRecordInfoRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ArenaResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  // repeated string records = 2;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPArenaFightRecordInfoRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvPArenaFightRecordInfoRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvPArenaFightRecordInfoRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvPArenaFightRecordInfoRet::MergeFrom(const PvPArenaFightRecordInfoRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  records_.MergeFrom(from.records_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvPArenaFightRecordInfoRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvPArenaFightRecordInfoRet::CopyFrom(const PvPArenaFightRecordInfoRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPArenaFightRecordInfoRet::IsInitialized() const {

  return true;
}

void PvPArenaFightRecordInfoRet::Swap(PvPArenaFightRecordInfoRet* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    records_.Swap(&other->records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvPArenaFightRecordInfoRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvPArenaFightRecordInfoRet_descriptor_;
  metadata.reflection = PvPArenaFightRecordInfoRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2D_PvPCreatePlayer::kCraeteIdFieldNumber;
const int SG2D_PvPCreatePlayer::kRankFieldNumber;
const int SG2D_PvPCreatePlayer::kCreateInfoFieldNumber;
#endif  // !_MSC_VER

SG2D_PvPCreatePlayer::SG2D_PvPCreatePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2D_PvPCreatePlayer::InitAsDefaultInstance() {
  create_info_ = const_cast< ::pb::SG2D_CreatePlayer*>(&::pb::SG2D_CreatePlayer::default_instance());
}

SG2D_PvPCreatePlayer::SG2D_PvPCreatePlayer(const SG2D_PvPCreatePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2D_PvPCreatePlayer::SharedCtor() {
  _cached_size_ = 0;
  craete_id_ = GOOGLE_ULONGLONG(0);
  rank_ = 0u;
  create_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2D_PvPCreatePlayer::~SG2D_PvPCreatePlayer() {
  SharedDtor();
}

void SG2D_PvPCreatePlayer::SharedDtor() {
  if (this != default_instance_) {
    delete create_info_;
  }
}

void SG2D_PvPCreatePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2D_PvPCreatePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2D_PvPCreatePlayer_descriptor_;
}

const SG2D_PvPCreatePlayer& SG2D_PvPCreatePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvP_2eproto();
  return *default_instance_;
}

SG2D_PvPCreatePlayer* SG2D_PvPCreatePlayer::default_instance_ = NULL;

SG2D_PvPCreatePlayer* SG2D_PvPCreatePlayer::New() const {
  return new SG2D_PvPCreatePlayer;
}

void SG2D_PvPCreatePlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    craete_id_ = GOOGLE_ULONGLONG(0);
    rank_ = 0u;
    if (has_create_info()) {
      if (create_info_ != NULL) create_info_->::pb::SG2D_CreatePlayer::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2D_PvPCreatePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 craete_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &craete_id_)));
          set_has_craete_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_create_info;
        break;
      }

      // optional .pb.SG2D_CreatePlayer create_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_create_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2D_PvPCreatePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 craete_id = 1;
  if (has_craete_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->craete_id(), output);
  }

  // optional uint32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  // optional .pb.SG2D_CreatePlayer create_info = 3;
  if (has_create_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->create_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2D_PvPCreatePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 craete_id = 1;
  if (has_craete_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->craete_id(), target);
  }

  // optional uint32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }

  // optional .pb.SG2D_CreatePlayer create_info = 3;
  if (has_create_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->create_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2D_PvPCreatePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 craete_id = 1;
    if (has_craete_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->craete_id());
    }

    // optional uint32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional .pb.SG2D_CreatePlayer create_info = 3;
    if (has_create_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->create_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2D_PvPCreatePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2D_PvPCreatePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2D_PvPCreatePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2D_PvPCreatePlayer::MergeFrom(const SG2D_PvPCreatePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_craete_id()) {
      set_craete_id(from.craete_id());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_create_info()) {
      mutable_create_info()->::pb::SG2D_CreatePlayer::MergeFrom(from.create_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2D_PvPCreatePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2D_PvPCreatePlayer::CopyFrom(const SG2D_PvPCreatePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2D_PvPCreatePlayer::IsInitialized() const {

  if (has_create_info()) {
    if (!this->create_info().IsInitialized()) return false;
  }
  return true;
}

void SG2D_PvPCreatePlayer::Swap(SG2D_PvPCreatePlayer* other) {
  if (other != this) {
    std::swap(craete_id_, other->craete_id_);
    std::swap(rank_, other->rank_);
    std::swap(create_info_, other->create_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2D_PvPCreatePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2D_PvPCreatePlayer_descriptor_;
  metadata.reflection = SG2D_PvPCreatePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2D_PvPCreatePlayerRet::kResultFieldNumber;
const int SG2D_PvPCreatePlayerRet::kCreateIdFieldNumber;
const int SG2D_PvPCreatePlayerRet::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

SG2D_PvPCreatePlayerRet::SG2D_PvPCreatePlayerRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2D_PvPCreatePlayerRet::InitAsDefaultInstance() {
}

SG2D_PvPCreatePlayerRet::SG2D_PvPCreatePlayerRet(const SG2D_PvPCreatePlayerRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2D_PvPCreatePlayerRet::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  create_id_ = GOOGLE_ULONGLONG(0);
  player_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2D_PvPCreatePlayerRet::~SG2D_PvPCreatePlayerRet() {
  SharedDtor();
}

void SG2D_PvPCreatePlayerRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SG2D_PvPCreatePlayerRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2D_PvPCreatePlayerRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2D_PvPCreatePlayerRet_descriptor_;
}

const SG2D_PvPCreatePlayerRet& SG2D_PvPCreatePlayerRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvP_2eproto();
  return *default_instance_;
}

SG2D_PvPCreatePlayerRet* SG2D_PvPCreatePlayerRet::default_instance_ = NULL;

SG2D_PvPCreatePlayerRet* SG2D_PvPCreatePlayerRet::New() const {
  return new SG2D_PvPCreatePlayerRet;
}

void SG2D_PvPCreatePlayerRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    create_id_ = GOOGLE_ULONGLONG(0);
    player_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2D_PvPCreatePlayerRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_create_id;
        break;
      }

      // optional uint64 create_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &create_id_)));
          set_has_create_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_id;
        break;
      }

      // optional uint64 player_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2D_PvPCreatePlayerRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional uint64 create_id = 2;
  if (has_create_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->create_id(), output);
  }

  // optional uint64 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2D_PvPCreatePlayerRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // optional uint64 create_id = 2;
  if (has_create_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->create_id(), target);
  }

  // optional uint64 player_id = 3;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2D_PvPCreatePlayerRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // optional uint64 create_id = 2;
    if (has_create_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->create_id());
    }

    // optional uint64 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2D_PvPCreatePlayerRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2D_PvPCreatePlayerRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2D_PvPCreatePlayerRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2D_PvPCreatePlayerRet::MergeFrom(const SG2D_PvPCreatePlayerRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_create_id()) {
      set_create_id(from.create_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2D_PvPCreatePlayerRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2D_PvPCreatePlayerRet::CopyFrom(const SG2D_PvPCreatePlayerRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2D_PvPCreatePlayerRet::IsInitialized() const {

  return true;
}

void SG2D_PvPCreatePlayerRet::Swap(SG2D_PvPCreatePlayerRet* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(create_id_, other->create_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2D_PvPCreatePlayerRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2D_PvPCreatePlayerRet_descriptor_;
  metadata.reflection = SG2D_PvPCreatePlayerRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2D_PvPGetRank::kBegRankFieldNumber;
const int SG2D_PvPGetRank::kEndRankFieldNumber;
const int SG2D_PvPGetRank::kMailIdFieldNumber;
#endif  // !_MSC_VER

SG2D_PvPGetRank::SG2D_PvPGetRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2D_PvPGetRank::InitAsDefaultInstance() {
}

SG2D_PvPGetRank::SG2D_PvPGetRank(const SG2D_PvPGetRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2D_PvPGetRank::SharedCtor() {
  _cached_size_ = 0;
  beg_rank_ = 0u;
  end_rank_ = 0u;
  mail_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2D_PvPGetRank::~SG2D_PvPGetRank() {
  SharedDtor();
}

void SG2D_PvPGetRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SG2D_PvPGetRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2D_PvPGetRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2D_PvPGetRank_descriptor_;
}

const SG2D_PvPGetRank& SG2D_PvPGetRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvP_2eproto();
  return *default_instance_;
}

SG2D_PvPGetRank* SG2D_PvPGetRank::default_instance_ = NULL;

SG2D_PvPGetRank* SG2D_PvPGetRank::New() const {
  return new SG2D_PvPGetRank;
}

void SG2D_PvPGetRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beg_rank_ = 0u;
    end_rank_ = 0u;
    mail_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2D_PvPGetRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 beg_rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beg_rank_)));
          set_has_beg_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end_rank;
        break;
      }

      // optional uint32 end_rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_rank_)));
          set_has_end_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mail_id;
        break;
      }

      // optional uint32 mail_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2D_PvPGetRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 beg_rank = 1;
  if (has_beg_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->beg_rank(), output);
  }

  // optional uint32 end_rank = 2;
  if (has_end_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->end_rank(), output);
  }

  // optional uint32 mail_id = 3;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mail_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2D_PvPGetRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 beg_rank = 1;
  if (has_beg_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->beg_rank(), target);
  }

  // optional uint32 end_rank = 2;
  if (has_end_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->end_rank(), target);
  }

  // optional uint32 mail_id = 3;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mail_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2D_PvPGetRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 beg_rank = 1;
    if (has_beg_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beg_rank());
    }

    // optional uint32 end_rank = 2;
    if (has_end_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_rank());
    }

    // optional uint32 mail_id = 3;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mail_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2D_PvPGetRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2D_PvPGetRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2D_PvPGetRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2D_PvPGetRank::MergeFrom(const SG2D_PvPGetRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beg_rank()) {
      set_beg_rank(from.beg_rank());
    }
    if (from.has_end_rank()) {
      set_end_rank(from.end_rank());
    }
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2D_PvPGetRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2D_PvPGetRank::CopyFrom(const SG2D_PvPGetRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2D_PvPGetRank::IsInitialized() const {

  return true;
}

void SG2D_PvPGetRank::Swap(SG2D_PvPGetRank* other) {
  if (other != this) {
    std::swap(beg_rank_, other->beg_rank_);
    std::swap(end_rank_, other->end_rank_);
    std::swap(mail_id_, other->mail_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2D_PvPGetRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2D_PvPGetRank_descriptor_;
  metadata.reflection = SG2D_PvPGetRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2D_PvPGetRankList::kRanksFieldNumber;
#endif  // !_MSC_VER

SG2D_PvPGetRankList::SG2D_PvPGetRankList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2D_PvPGetRankList::InitAsDefaultInstance() {
}

SG2D_PvPGetRankList::SG2D_PvPGetRankList(const SG2D_PvPGetRankList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2D_PvPGetRankList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2D_PvPGetRankList::~SG2D_PvPGetRankList() {
  SharedDtor();
}

void SG2D_PvPGetRankList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SG2D_PvPGetRankList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2D_PvPGetRankList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2D_PvPGetRankList_descriptor_;
}

const SG2D_PvPGetRankList& SG2D_PvPGetRankList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvP_2eproto();
  return *default_instance_;
}

SG2D_PvPGetRankList* SG2D_PvPGetRankList::default_instance_ = NULL;

SG2D_PvPGetRankList* SG2D_PvPGetRankList::New() const {
  return new SG2D_PvPGetRankList;
}

void SG2D_PvPGetRankList::Clear() {
  ranks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2D_PvPGetRankList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.SG2D_PvPGetRank ranks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ranks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2D_PvPGetRankList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.SG2D_PvPGetRank ranks = 1;
  for (int i = 0; i < this->ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ranks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2D_PvPGetRankList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.SG2D_PvPGetRank ranks = 1;
  for (int i = 0; i < this->ranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ranks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2D_PvPGetRankList::ByteSize() const {
  int total_size = 0;

  // repeated .pb.SG2D_PvPGetRank ranks = 1;
  total_size += 1 * this->ranks_size();
  for (int i = 0; i < this->ranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2D_PvPGetRankList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2D_PvPGetRankList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2D_PvPGetRankList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2D_PvPGetRankList::MergeFrom(const SG2D_PvPGetRankList& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranks_.MergeFrom(from.ranks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2D_PvPGetRankList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2D_PvPGetRankList::CopyFrom(const SG2D_PvPGetRankList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2D_PvPGetRankList::IsInitialized() const {

  return true;
}

void SG2D_PvPGetRankList::Swap(SG2D_PvPGetRankList* other) {
  if (other != this) {
    ranks_.Swap(&other->ranks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2D_PvPGetRankList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2D_PvPGetRankList_descriptor_;
  metadata.reflection = SG2D_PvPGetRankList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2D_PvPGetRankRet::kMailIdFieldNumber;
const int SG2D_PvPGetRankRet::kPlayerIdsFieldNumber;
#endif  // !_MSC_VER

SG2D_PvPGetRankRet::SG2D_PvPGetRankRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2D_PvPGetRankRet::InitAsDefaultInstance() {
}

SG2D_PvPGetRankRet::SG2D_PvPGetRankRet(const SG2D_PvPGetRankRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2D_PvPGetRankRet::SharedCtor() {
  _cached_size_ = 0;
  mail_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2D_PvPGetRankRet::~SG2D_PvPGetRankRet() {
  SharedDtor();
}

void SG2D_PvPGetRankRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SG2D_PvPGetRankRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2D_PvPGetRankRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2D_PvPGetRankRet_descriptor_;
}

const SG2D_PvPGetRankRet& SG2D_PvPGetRankRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvP_2eproto();
  return *default_instance_;
}

SG2D_PvPGetRankRet* SG2D_PvPGetRankRet::default_instance_ = NULL;

SG2D_PvPGetRankRet* SG2D_PvPGetRankRet::New() const {
  return new SG2D_PvPGetRankRet;
}

void SG2D_PvPGetRankRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_id_ = 0u;
  }
  player_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2D_PvPGetRankRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mail_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_ids;
        break;
      }

      // repeated uint64 player_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_player_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_player_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2D_PvPGetRankRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 mail_id = 1;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mail_id(), output);
  }

  // repeated uint64 player_ids = 2;
  for (int i = 0; i < this->player_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->player_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2D_PvPGetRankRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 mail_id = 1;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mail_id(), target);
  }

  // repeated uint64 player_ids = 2;
  for (int i = 0; i < this->player_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->player_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2D_PvPGetRankRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mail_id = 1;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mail_id());
    }

  }
  // repeated uint64 player_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->player_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->player_ids(i));
    }
    total_size += 1 * this->player_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2D_PvPGetRankRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2D_PvPGetRankRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2D_PvPGetRankRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2D_PvPGetRankRet::MergeFrom(const SG2D_PvPGetRankRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_ids_.MergeFrom(from.player_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2D_PvPGetRankRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2D_PvPGetRankRet::CopyFrom(const SG2D_PvPGetRankRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2D_PvPGetRankRet::IsInitialized() const {

  return true;
}

void SG2D_PvPGetRankRet::Swap(SG2D_PvPGetRankRet* other) {
  if (other != this) {
    std::swap(mail_id_, other->mail_id_);
    player_ids_.Swap(&other->player_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2D_PvPGetRankRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2D_PvPGetRankRet_descriptor_;
  metadata.reflection = SG2D_PvPGetRankRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2D_PvPGetRankListRet::kRanksFieldNumber;
#endif  // !_MSC_VER

SG2D_PvPGetRankListRet::SG2D_PvPGetRankListRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2D_PvPGetRankListRet::InitAsDefaultInstance() {
}

SG2D_PvPGetRankListRet::SG2D_PvPGetRankListRet(const SG2D_PvPGetRankListRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2D_PvPGetRankListRet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2D_PvPGetRankListRet::~SG2D_PvPGetRankListRet() {
  SharedDtor();
}

void SG2D_PvPGetRankListRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SG2D_PvPGetRankListRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2D_PvPGetRankListRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2D_PvPGetRankListRet_descriptor_;
}

const SG2D_PvPGetRankListRet& SG2D_PvPGetRankListRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvP_2eproto();
  return *default_instance_;
}

SG2D_PvPGetRankListRet* SG2D_PvPGetRankListRet::default_instance_ = NULL;

SG2D_PvPGetRankListRet* SG2D_PvPGetRankListRet::New() const {
  return new SG2D_PvPGetRankListRet;
}

void SG2D_PvPGetRankListRet::Clear() {
  ranks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2D_PvPGetRankListRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.SG2D_PvPGetRankRet ranks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ranks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2D_PvPGetRankListRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.SG2D_PvPGetRankRet ranks = 1;
  for (int i = 0; i < this->ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ranks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2D_PvPGetRankListRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.SG2D_PvPGetRankRet ranks = 1;
  for (int i = 0; i < this->ranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ranks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2D_PvPGetRankListRet::ByteSize() const {
  int total_size = 0;

  // repeated .pb.SG2D_PvPGetRankRet ranks = 1;
  total_size += 1 * this->ranks_size();
  for (int i = 0; i < this->ranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2D_PvPGetRankListRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2D_PvPGetRankListRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2D_PvPGetRankListRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2D_PvPGetRankListRet::MergeFrom(const SG2D_PvPGetRankListRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranks_.MergeFrom(from.ranks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2D_PvPGetRankListRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2D_PvPGetRankListRet::CopyFrom(const SG2D_PvPGetRankListRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2D_PvPGetRankListRet::IsInitialized() const {

  return true;
}

void SG2D_PvPGetRankListRet::Swap(SG2D_PvPGetRankListRet* other) {
  if (other != this) {
    ranks_.Swap(&other->ranks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2D_PvPGetRankListRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2D_PvPGetRankListRet_descriptor_;
  metadata.reflection = SG2D_PvPGetRankListRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpMarkFight::kRankFieldNumber;
const int PvpMarkFight::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

PvpMarkFight::PvpMarkFight()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpMarkFight::InitAsDefaultInstance() {
}

PvpMarkFight::PvpMarkFight(const PvpMarkFight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpMarkFight::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  player_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpMarkFight::~PvpMarkFight() {
  SharedDtor();
}

void PvpMarkFight::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpMarkFight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpMarkFight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpMarkFight_descriptor_;
}

const PvpMarkFight& PvpMarkFight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvP_2eproto();
  return *default_instance_;
}

PvpMarkFight* PvpMarkFight::default_instance_ = NULL;

PvpMarkFight* PvpMarkFight::New() const {
  return new PvpMarkFight;
}

void PvpMarkFight::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0u;
    player_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpMarkFight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional uint64 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpMarkFight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // optional uint64 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpMarkFight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // optional uint64 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpMarkFight::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint64 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpMarkFight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpMarkFight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpMarkFight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpMarkFight::MergeFrom(const PvpMarkFight& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpMarkFight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpMarkFight::CopyFrom(const PvpMarkFight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpMarkFight::IsInitialized() const {

  return true;
}

void PvpMarkFight::Swap(PvpMarkFight* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpMarkFight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpMarkFight_descriptor_;
  metadata.reflection = PvpMarkFight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpMarkFightRet::kResultFieldNumber;
const int PvpMarkFightRet::kInfosFieldNumber;
#endif  // !_MSC_VER

PvpMarkFightRet::PvpMarkFightRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpMarkFightRet::InitAsDefaultInstance() {
  infos_ = const_cast< ::pb::ArenaAttackListPlayerInfo*>(&::pb::ArenaAttackListPlayerInfo::default_instance());
}

PvpMarkFightRet::PvpMarkFightRet(const PvpMarkFightRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpMarkFightRet::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  infos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpMarkFightRet::~PvpMarkFightRet() {
  SharedDtor();
}

void PvpMarkFightRet::SharedDtor() {
  if (this != default_instance_) {
    delete infos_;
  }
}

void PvpMarkFightRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpMarkFightRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpMarkFightRet_descriptor_;
}

const PvpMarkFightRet& PvpMarkFightRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvP_2eproto();
  return *default_instance_;
}

PvpMarkFightRet* PvpMarkFightRet::default_instance_ = NULL;

PvpMarkFightRet* PvpMarkFightRet::New() const {
  return new PvpMarkFightRet;
}

void PvpMarkFightRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_infos()) {
      if (infos_ != NULL) infos_->::pb::ArenaAttackListPlayerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpMarkFightRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ArenaResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ArenaResult_IsValid(value)) {
            set_result(static_cast< ::pb::ArenaResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // optional .pb.ArenaAttackListPlayerInfo infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpMarkFightRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.ArenaResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .pb.ArenaAttackListPlayerInfo infos = 2;
  if (has_infos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpMarkFightRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.ArenaResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .pb.ArenaAttackListPlayerInfo infos = 2;
  if (has_infos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpMarkFightRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ArenaResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .pb.ArenaAttackListPlayerInfo infos = 2;
    if (has_infos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpMarkFightRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpMarkFightRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpMarkFightRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpMarkFightRet::MergeFrom(const PvpMarkFightRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_infos()) {
      mutable_infos()->::pb::ArenaAttackListPlayerInfo::MergeFrom(from.infos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpMarkFightRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpMarkFightRet::CopyFrom(const PvpMarkFightRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpMarkFightRet::IsInitialized() const {

  if (has_infos()) {
    if (!this->infos().IsInitialized()) return false;
  }
  return true;
}

void PvpMarkFightRet::Swap(PvpMarkFightRet* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(infos_, other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpMarkFightRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpMarkFightRet_descriptor_;
  metadata.reflection = PvpMarkFightRet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
