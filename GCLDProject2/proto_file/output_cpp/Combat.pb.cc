// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Combat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Combat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* Msg_CombatProperty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_CombatProperty_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_CombatObj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_CombatObj_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Combat_Pre_Begin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Combat_Pre_Begin_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Combat_Begin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Combat_Begin_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Combat_Begin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Combat_Begin_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tactic_Param_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tactic_Param_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Combat_Next_Lst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Combat_Next_Lst_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Combat_Next_Lst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Combat_Next_Lst_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Combat_Next_Obj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Combat_Next_Obj_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Combat_Add_Obj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Combat_Add_Obj_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Combat_Del_Obj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Combat_Del_Obj_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Combat_Select_Tactic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Combat_Select_Tactic_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Combat_Select_Tactic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Combat_Select_Tactic_reflection_ = NULL;
const ::google::protobuf::Descriptor* Combat_Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Combat_Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Combat_Seque_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Combat_Seque_reflection_ = NULL;
const ::google::protobuf::Descriptor* Combat_All_Buff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Combat_All_Buff_reflection_ = NULL;
const ::google::protobuf::Descriptor* Combat_buff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Combat_buff_reflection_ = NULL;
const ::google::protobuf::Descriptor* Combat_Damage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Combat_Damage_reflection_ = NULL;
const ::google::protobuf::Descriptor* extra_awards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  extra_awards_reflection_ = NULL;
const ::google::protobuf::Descriptor* Combat_Buff_Remain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Combat_Buff_Remain_reflection_ = NULL;
const ::google::protobuf::Descriptor* Combat_Buff_AllInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Combat_Buff_AllInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Combat_Ani_Finished_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Combat_Ani_Finished_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Combat_New_Round_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Combat_New_Round_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Combat_Select_Tactic_Single_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Combat_Select_Tactic_Single_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Combat_Unwatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Combat_Unwatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Combat_End_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Combat_End_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Combat_Hero_Dead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Combat_Hero_Dead_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Combat_Attract_Enemy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Combat_Attract_Enemy_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Combat_Attract_Enemy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Combat_Attract_Enemy_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Combat_Rush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Combat_Rush_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Rush_Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Rush_Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Combat_Runaway_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Combat_Runaway_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Combat_Runaway_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Combat_Runaway_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Combat_Add_Soldier_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Combat_Add_Soldier_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Combat_Add_Soldier_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Combat_Add_Soldier_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Combat_Call_Up_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Combat_Call_Up_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Combat_Call_Up_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Combat_Call_Up_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Combat_Call_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Combat_Call_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Combat_Call_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Combat_Call_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Combat_Speed_Up_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Combat_Speed_Up_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Combat_Speed_Up_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Combat_Speed_Up_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Auto_Combat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Auto_Combat_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Auto_Combat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Auto_Combat_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Quick_Combat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Quick_Combat_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Quick_Combat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Quick_Combat_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Combat_Hero_Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Combat_Hero_Status_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Combat_Hero_Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Combat_Hero_Status_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_Combat_Crusade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_Combat_Crusade_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Combat_Crusade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Combat_Crusade_reflection_ = NULL;
const ::google::protobuf::Descriptor* Crusade_HeroInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Crusade_HeroInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Combat_Crusade_Pre_Begin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Combat_Crusade_Pre_Begin_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Combat_Crusade_Add_Hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Combat_Crusade_Add_Hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Crusade_Take_Reward_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Crusade_Take_Reward_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Combat_Crusade_Recover_Times_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Combat_Crusade_Recover_Times_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Combat_Crusade_Add_Hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Combat_Crusade_Add_Hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Combat_Try_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Combat_Try_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Combat_Try_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Combat_Try_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Onekey_Recover_HP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Onekey_Recover_HP_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_REQUEST_TERR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_REQUEST_TERR_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_REQUEST_TERR_RET_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_REQUEST_TERR_RET_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_GetMyShadowNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_GetMyShadowNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_GetMyShadowNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_GetMyShadowNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Add_Reinforce_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Add_Reinforce_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Msg_ECombatTactic_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Msg_Records_Combat_Gains_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* E_Combat_Serialize_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Msg_return_common_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Combat_2eproto() {
  protobuf_AddDesc_Combat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Combat.proto");
  GOOGLE_CHECK(file != NULL);
  Msg_CombatProperty_descriptor_ = file->message_type(0);
  static const int Msg_CombatProperty_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_CombatProperty, tong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_CombatProperty, yong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_CombatProperty, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_CombatProperty, defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_CombatProperty, skillattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_CombatProperty, skilldefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_CombatProperty, attackex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_CombatProperty, defenceex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_CombatProperty, rowsoldiermaxcnt_),
  };
  Msg_CombatProperty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_CombatProperty_descriptor_,
      Msg_CombatProperty::default_instance_,
      Msg_CombatProperty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_CombatProperty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_CombatProperty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_CombatProperty));
  Msg_CombatObj_descriptor_ = file->message_type(1);
  static const int Msg_CombatObj_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_CombatObj, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_CombatObj, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_CombatObj, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_CombatObj, soldiercnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_CombatObj, rowsoldiermaxcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_CombatObj, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_CombatObj, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_CombatObj, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_CombatObj, indexincombat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_CombatObj, isshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_CombatObj, isreinforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_CombatObj, isfakechar_),
  };
  Msg_CombatObj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_CombatObj_descriptor_,
      Msg_CombatObj::default_instance_,
      Msg_CombatObj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_CombatObj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_CombatObj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_CombatObj));
  GS2C_Combat_Pre_Begin_descriptor_ = file->message_type(2);
  static const int GS2C_Combat_Pre_Begin_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Pre_Begin, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Pre_Begin, attack_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Pre_Begin, defence_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Pre_Begin, combat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Pre_Begin, attack_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Pre_Begin, defence_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Pre_Begin, terraintyp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Pre_Begin, isautocombat_),
  };
  GS2C_Combat_Pre_Begin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Combat_Pre_Begin_descriptor_,
      GS2C_Combat_Pre_Begin::default_instance_,
      GS2C_Combat_Pre_Begin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Pre_Begin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Pre_Begin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Combat_Pre_Begin));
  C2GS_Combat_Begin_descriptor_ = file->message_type(3);
  static const int C2GS_Combat_Begin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Begin, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Begin, attack_lst_),
  };
  C2GS_Combat_Begin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Combat_Begin_descriptor_,
      C2GS_Combat_Begin::default_instance_,
      C2GS_Combat_Begin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Begin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Begin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Combat_Begin));
  GS2C_Combat_Begin_descriptor_ = file->message_type(4);
  static const int GS2C_Combat_Begin_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Begin, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Begin, attack_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Begin, defence_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Begin, combat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Begin, attack_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Begin, defence_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Begin, choose_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Begin, over_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Begin, attack_all_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Begin, defence_all_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Begin, tatic_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Begin, terraintyp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Begin, roundcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Begin, isautocombat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Begin, attshadownum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Begin, defshadownum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Begin, soldierbufflst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Begin, genericbufflst_),
  };
  GS2C_Combat_Begin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Combat_Begin_descriptor_,
      GS2C_Combat_Begin::default_instance_,
      GS2C_Combat_Begin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Begin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Begin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Combat_Begin));
  Tactic_Param_descriptor_ = file->message_type(5);
  static const int Tactic_Param_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tactic_Param, atttacticenablestr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tactic_Param, deftacticenablestr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tactic_Param, atttacticrealstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tactic_Param, deftacticrealstr_),
  };
  Tactic_Param_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tactic_Param_descriptor_,
      Tactic_Param::default_instance_,
      Tactic_Param_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tactic_Param, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tactic_Param, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tactic_Param));
  C2GS_Combat_Next_Lst_descriptor_ = file->message_type(6);
  static const int C2GS_Combat_Next_Lst_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Next_Lst, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Next_Lst, indexincombat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Next_Lst, is_attacker_),
  };
  C2GS_Combat_Next_Lst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Combat_Next_Lst_descriptor_,
      C2GS_Combat_Next_Lst::default_instance_,
      C2GS_Combat_Next_Lst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Next_Lst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Next_Lst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Combat_Next_Lst));
  GS2C_Combat_Next_Lst_descriptor_ = file->message_type(7);
  static const int GS2C_Combat_Next_Lst_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Next_Lst, attack_all_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Next_Lst, defence_all_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Next_Lst, group_id_),
  };
  GS2C_Combat_Next_Lst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Combat_Next_Lst_descriptor_,
      GS2C_Combat_Next_Lst::default_instance_,
      GS2C_Combat_Next_Lst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Next_Lst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Next_Lst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Combat_Next_Lst));
  GS2C_Combat_Next_Obj_descriptor_ = file->message_type(8);
  static const int GS2C_Combat_Next_Obj_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Next_Obj, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Next_Obj, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Next_Obj, defence_),
  };
  GS2C_Combat_Next_Obj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Combat_Next_Obj_descriptor_,
      GS2C_Combat_Next_Obj::default_instance_,
      GS2C_Combat_Next_Obj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Next_Obj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Next_Obj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Combat_Next_Obj));
  GS2C_Combat_Add_Obj_descriptor_ = file->message_type(9);
  static const int GS2C_Combat_Add_Obj_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Add_Obj, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Add_Obj, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Add_Obj, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Add_Obj, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Add_Obj, is_attacker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Add_Obj, is_shadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Add_Obj, country_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Add_Obj, indexincombat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Add_Obj, listlengh_),
  };
  GS2C_Combat_Add_Obj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Combat_Add_Obj_descriptor_,
      GS2C_Combat_Add_Obj::default_instance_,
      GS2C_Combat_Add_Obj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Add_Obj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Add_Obj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Combat_Add_Obj));
  GS2C_Combat_Del_Obj_descriptor_ = file->message_type(10);
  static const int GS2C_Combat_Del_Obj_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Del_Obj, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Del_Obj, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Del_Obj, defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Del_Obj, indexincombat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Del_Obj, listlengh_),
  };
  GS2C_Combat_Del_Obj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Combat_Del_Obj_descriptor_,
      GS2C_Combat_Del_Obj::default_instance_,
      GS2C_Combat_Del_Obj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Del_Obj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Del_Obj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Combat_Del_Obj));
  C2GS_Combat_Select_Tactic_descriptor_ = file->message_type(11);
  static const int C2GS_Combat_Select_Tactic_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Select_Tactic, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Select_Tactic, is_attacker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Select_Tactic, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Select_Tactic, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Select_Tactic, roundcount_),
  };
  C2GS_Combat_Select_Tactic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Combat_Select_Tactic_descriptor_,
      C2GS_Combat_Select_Tactic::default_instance_,
      C2GS_Combat_Select_Tactic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Select_Tactic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Select_Tactic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Combat_Select_Tactic));
  GS2C_Combat_Select_Tactic_descriptor_ = file->message_type(12);
  static const int GS2C_Combat_Select_Tactic_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Select_Tactic, attack_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Select_Tactic, defence_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Select_Tactic, is_attack_skill_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Select_Tactic, is_defence_skill_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Select_Tactic, over_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Select_Tactic, attackernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Select_Tactic, defendernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Select_Tactic, attskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Select_Tactic, defskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Select_Tactic, sequelst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Select_Tactic, roundcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Select_Tactic, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Select_Tactic, attshadownum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Select_Tactic, defshadownum_),
  };
  GS2C_Combat_Select_Tactic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Combat_Select_Tactic_descriptor_,
      GS2C_Combat_Select_Tactic::default_instance_,
      GS2C_Combat_Select_Tactic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Select_Tactic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Select_Tactic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Combat_Select_Tactic));
  Combat_Reward_descriptor_ = file->message_type(13);
  static const int Combat_Reward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Reward, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Reward, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Reward, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Reward, playerid_),
  };
  Combat_Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Combat_Reward_descriptor_,
      Combat_Reward::default_instance_,
      Combat_Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Combat_Reward));
  Combat_Seque_descriptor_ = file->message_type(14);
  static const int Combat_Seque_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Seque, sequetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Seque, damagelst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Seque, rewardlst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Seque, att_extra_awards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Seque, def_extra_awards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Seque, soldierbufflst_),
  };
  Combat_Seque_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Combat_Seque_descriptor_,
      Combat_Seque::default_instance_,
      Combat_Seque_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Seque, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Seque, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Combat_Seque));
  Combat_All_Buff_descriptor_ = file->message_type(15);
  static const int Combat_All_Buff_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_All_Buff, buff_one_att_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_All_Buff, buff_one_def_),
  };
  Combat_All_Buff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Combat_All_Buff_descriptor_,
      Combat_All_Buff::default_instance_,
      Combat_All_Buff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_All_Buff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_All_Buff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Combat_All_Buff));
  Combat_buff_descriptor_ = file->message_type(16);
  static const int Combat_buff_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_buff, buff_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_buff, buff_unique_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_buff, generic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_buff, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_buff, rowindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_buff, leftroundcount_),
  };
  Combat_buff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Combat_buff_descriptor_,
      Combat_buff::default_instance_,
      Combat_buff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_buff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_buff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Combat_buff));
  Combat_Damage_descriptor_ = file->message_type(17);
  static const int Combat_Damage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Damage, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Damage, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Damage, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Damage, restblood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Damage, buffid_),
  };
  Combat_Damage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Combat_Damage_descriptor_,
      Combat_Damage::default_instance_,
      Combat_Damage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Damage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Damage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Combat_Damage));
  extra_awards_descriptor_ = file->message_type(18);
  static const int extra_awards_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(extra_awards, awardsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(extra_awards, awardsnum_),
  };
  extra_awards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      extra_awards_descriptor_,
      extra_awards::default_instance_,
      extra_awards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(extra_awards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(extra_awards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(extra_awards));
  Combat_Buff_Remain_descriptor_ = file->message_type(19);
  static const int Combat_Buff_Remain_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Buff_Remain, groupfrom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Buff_Remain, groupto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Buff_Remain, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Buff_Remain, buffid_),
  };
  Combat_Buff_Remain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Combat_Buff_Remain_descriptor_,
      Combat_Buff_Remain::default_instance_,
      Combat_Buff_Remain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Buff_Remain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Buff_Remain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Combat_Buff_Remain));
  Combat_Buff_AllInfo_descriptor_ = file->message_type(20);
  static const int Combat_Buff_AllInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Buff_AllInfo, damages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Buff_AllInfo, rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Buff_AllInfo, buffremians_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Buff_AllInfo, att_extra_awards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Buff_AllInfo, def_extra_awards_),
  };
  Combat_Buff_AllInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Combat_Buff_AllInfo_descriptor_,
      Combat_Buff_AllInfo::default_instance_,
      Combat_Buff_AllInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Buff_AllInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Combat_Buff_AllInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Combat_Buff_AllInfo));
  C2GS_Combat_Ani_Finished_descriptor_ = file->message_type(21);
  static const int C2GS_Combat_Ani_Finished_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Ani_Finished, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Ani_Finished, roundcount_),
  };
  C2GS_Combat_Ani_Finished_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Combat_Ani_Finished_descriptor_,
      C2GS_Combat_Ani_Finished::default_instance_,
      C2GS_Combat_Ani_Finished_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Ani_Finished, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Ani_Finished, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Combat_Ani_Finished));
  GS2C_Combat_New_Round_descriptor_ = file->message_type(22);
  static const int GS2C_Combat_New_Round_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_New_Round, choose_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_New_Round, tactic_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_New_Round, roundcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_New_Round, group_id_),
  };
  GS2C_Combat_New_Round_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Combat_New_Round_descriptor_,
      GS2C_Combat_New_Round::default_instance_,
      GS2C_Combat_New_Round_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_New_Round, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_New_Round, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Combat_New_Round));
  GS2C_Combat_Select_Tactic_Single_descriptor_ = file->message_type(23);
  static const int GS2C_Combat_Select_Tactic_Single_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Select_Tactic_Single, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Select_Tactic_Single, is_attacker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Select_Tactic_Single, attackernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Select_Tactic_Single, defendernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Select_Tactic_Single, roundcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Select_Tactic_Single, group_id_),
  };
  GS2C_Combat_Select_Tactic_Single_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Combat_Select_Tactic_Single_descriptor_,
      GS2C_Combat_Select_Tactic_Single::default_instance_,
      GS2C_Combat_Select_Tactic_Single_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Select_Tactic_Single, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Select_Tactic_Single, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Combat_Select_Tactic_Single));
  C2GS_Combat_Unwatch_descriptor_ = file->message_type(24);
  static const int C2GS_Combat_Unwatch_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Unwatch, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Unwatch, is_in_cross_),
  };
  C2GS_Combat_Unwatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Combat_Unwatch_descriptor_,
      C2GS_Combat_Unwatch::default_instance_,
      C2GS_Combat_Unwatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Unwatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Unwatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Combat_Unwatch));
  GS2C_Combat_End_descriptor_ = file->message_type(25);
  static const int GS2C_Combat_End_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_End, is_attack_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_End, statisticexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_End, statisticmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_End, statisticdead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_End, statistickill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_End, rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_End, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_End, extrewards_),
  };
  GS2C_Combat_End_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Combat_End_descriptor_,
      GS2C_Combat_End::default_instance_,
      GS2C_Combat_End_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_End, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_End, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Combat_End));
  GS2C_Combat_Hero_Dead_descriptor_ = file->message_type(26);
  static const int GS2C_Combat_Hero_Dead_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Hero_Dead, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Hero_Dead, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Hero_Dead, group_id_),
  };
  GS2C_Combat_Hero_Dead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Combat_Hero_Dead_descriptor_,
      GS2C_Combat_Hero_Dead::default_instance_,
      GS2C_Combat_Hero_Dead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Hero_Dead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Hero_Dead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Combat_Hero_Dead));
  C2GS_Combat_Attract_Enemy_descriptor_ = file->message_type(27);
  static const int C2GS_Combat_Attract_Enemy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Attract_Enemy, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Attract_Enemy, is_attacker_),
  };
  C2GS_Combat_Attract_Enemy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Combat_Attract_Enemy_descriptor_,
      C2GS_Combat_Attract_Enemy::default_instance_,
      C2GS_Combat_Attract_Enemy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Attract_Enemy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Attract_Enemy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Combat_Attract_Enemy));
  GS2C_Combat_Attract_Enemy_descriptor_ = file->message_type(28);
  static const int GS2C_Combat_Attract_Enemy_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Attract_Enemy, is_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Attract_Enemy, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Attract_Enemy, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Attract_Enemy, hero_table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Attract_Enemy, costs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Attract_Enemy, my_player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Attract_Enemy, my_hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Attract_Enemy, old_group_id_),
  };
  GS2C_Combat_Attract_Enemy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Combat_Attract_Enemy_descriptor_,
      GS2C_Combat_Attract_Enemy::default_instance_,
      GS2C_Combat_Attract_Enemy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Attract_Enemy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Attract_Enemy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Combat_Attract_Enemy));
  C2GS_Combat_Rush_descriptor_ = file->message_type(29);
  static const int C2GS_Combat_Rush_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Rush, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Rush, is_attacker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Rush, city_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Rush, hero_id_),
  };
  C2GS_Combat_Rush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Combat_Rush_descriptor_,
      C2GS_Combat_Rush::default_instance_,
      C2GS_Combat_Rush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Rush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Rush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Combat_Rush));
  GS2C_Rush_Result_descriptor_ = file->message_type(30);
  static const int GS2C_Rush_Result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Rush_Result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Rush_Result, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Rush_Result, rush_cd_end_time_),
  };
  GS2C_Rush_Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Rush_Result_descriptor_,
      GS2C_Rush_Result::default_instance_,
      GS2C_Rush_Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Rush_Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Rush_Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Rush_Result));
  C2GS_Combat_Runaway_descriptor_ = file->message_type(31);
  static const int C2GS_Combat_Runaway_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Runaway, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Runaway, is_attacker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Runaway, city_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Runaway, hero_id_),
  };
  C2GS_Combat_Runaway_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Combat_Runaway_descriptor_,
      C2GS_Combat_Runaway::default_instance_,
      C2GS_Combat_Runaway_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Runaway, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Runaway, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Combat_Runaway));
  GS2C_Combat_Runaway_descriptor_ = file->message_type(32);
  static const int GS2C_Combat_Runaway_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Runaway, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Runaway, group_id_),
  };
  GS2C_Combat_Runaway_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Combat_Runaway_descriptor_,
      GS2C_Combat_Runaway::default_instance_,
      GS2C_Combat_Runaway_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Runaway, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Runaway, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Combat_Runaway));
  C2GS_Combat_Add_Soldier_descriptor_ = file->message_type(33);
  static const int C2GS_Combat_Add_Soldier_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Add_Soldier, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Add_Soldier, is_attacker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Add_Soldier, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Add_Soldier, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Add_Soldier, curcityid_),
  };
  C2GS_Combat_Add_Soldier_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Combat_Add_Soldier_descriptor_,
      C2GS_Combat_Add_Soldier::default_instance_,
      C2GS_Combat_Add_Soldier_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Add_Soldier, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Add_Soldier, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Combat_Add_Soldier));
  GS2C_Combat_Add_Soldier_descriptor_ = file->message_type(34);
  static const int GS2C_Combat_Add_Soldier_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Add_Soldier, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Add_Soldier, addexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Add_Soldier, group_id_),
  };
  GS2C_Combat_Add_Soldier_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Combat_Add_Soldier_descriptor_,
      GS2C_Combat_Add_Soldier::default_instance_,
      GS2C_Combat_Add_Soldier_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Add_Soldier, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Add_Soldier, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Combat_Add_Soldier));
  C2GS_Combat_Call_Up_descriptor_ = file->message_type(35);
  static const int C2GS_Combat_Call_Up_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Call_Up, city_id_),
  };
  C2GS_Combat_Call_Up_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Combat_Call_Up_descriptor_,
      C2GS_Combat_Call_Up::default_instance_,
      C2GS_Combat_Call_Up_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Call_Up, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Call_Up, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Combat_Call_Up));
  GS2C_Combat_Call_Up_descriptor_ = file->message_type(36);
  static const int GS2C_Combat_Call_Up_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Call_Up, result_),
  };
  GS2C_Combat_Call_Up_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Combat_Call_Up_descriptor_,
      GS2C_Combat_Call_Up::default_instance_,
      GS2C_Combat_Call_Up_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Call_Up, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Call_Up, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Combat_Call_Up));
  C2GS_Combat_Call_Request_descriptor_ = file->message_type(37);
  static const int C2GS_Combat_Call_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Call_Request, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Call_Request, destcityid_),
  };
  C2GS_Combat_Call_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Combat_Call_Request_descriptor_,
      C2GS_Combat_Call_Request::default_instance_,
      C2GS_Combat_Call_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Call_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Call_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Combat_Call_Request));
  GS2C_Combat_Call_Request_descriptor_ = file->message_type(38);
  static const int GS2C_Combat_Call_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Call_Request, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Call_Request, call_up_down_id_),
  };
  GS2C_Combat_Call_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Combat_Call_Request_descriptor_,
      GS2C_Combat_Call_Request::default_instance_,
      GS2C_Combat_Call_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Call_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Call_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Combat_Call_Request));
  C2GS_Combat_Speed_Up_descriptor_ = file->message_type(39);
  static const int C2GS_Combat_Speed_Up_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Speed_Up, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Speed_Up, city_id_),
  };
  C2GS_Combat_Speed_Up_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Combat_Speed_Up_descriptor_,
      C2GS_Combat_Speed_Up::default_instance_,
      C2GS_Combat_Speed_Up_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Speed_Up, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Speed_Up, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Combat_Speed_Up));
  GS2C_Combat_Speed_Up_descriptor_ = file->message_type(40);
  static const int GS2C_Combat_Speed_Up_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Speed_Up, group_id_),
  };
  GS2C_Combat_Speed_Up_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Combat_Speed_Up_descriptor_,
      GS2C_Combat_Speed_Up::default_instance_,
      GS2C_Combat_Speed_Up_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Speed_Up, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Speed_Up, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Combat_Speed_Up));
  C2GS_Auto_Combat_descriptor_ = file->message_type(41);
  static const int C2GS_Auto_Combat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Auto_Combat, useauto_),
  };
  C2GS_Auto_Combat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Auto_Combat_descriptor_,
      C2GS_Auto_Combat::default_instance_,
      C2GS_Auto_Combat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Auto_Combat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Auto_Combat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Auto_Combat));
  GS2C_Auto_Combat_descriptor_ = file->message_type(42);
  static const int GS2C_Auto_Combat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Auto_Combat, useauto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Auto_Combat, issetsuccess_),
  };
  GS2C_Auto_Combat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Auto_Combat_descriptor_,
      GS2C_Auto_Combat::default_instance_,
      GS2C_Auto_Combat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Auto_Combat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Auto_Combat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Auto_Combat));
  C2GS_Quick_Combat_descriptor_ = file->message_type(43);
  static const int C2GS_Quick_Combat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Quick_Combat, group_id_),
  };
  C2GS_Quick_Combat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Quick_Combat_descriptor_,
      C2GS_Quick_Combat::default_instance_,
      C2GS_Quick_Combat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Quick_Combat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Quick_Combat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Quick_Combat));
  GS2C_Quick_Combat_descriptor_ = file->message_type(44);
  static const int GS2C_Quick_Combat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Quick_Combat, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Quick_Combat, group_id_),
  };
  GS2C_Quick_Combat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Quick_Combat_descriptor_,
      GS2C_Quick_Combat::default_instance_,
      GS2C_Quick_Combat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Quick_Combat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Quick_Combat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Quick_Combat));
  C2GS_Combat_Hero_Status_descriptor_ = file->message_type(45);
  static const int C2GS_Combat_Hero_Status_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Hero_Status, hero_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Hero_Status, isfakechar_),
  };
  C2GS_Combat_Hero_Status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Combat_Hero_Status_descriptor_,
      C2GS_Combat_Hero_Status::default_instance_,
      C2GS_Combat_Hero_Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Hero_Status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Hero_Status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Combat_Hero_Status));
  GS2C_Combat_Hero_Status_descriptor_ = file->message_type(46);
  static const int GS2C_Combat_Hero_Status_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Hero_Status, hero_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Hero_Status, is_in_combat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Hero_Status, is_fighting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Hero_Status, is_dead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Hero_Status, combat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Hero_Status, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Hero_Status, is_in_attract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Hero_Status, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Hero_Status, isfakechar_),
  };
  GS2C_Combat_Hero_Status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Combat_Hero_Status_descriptor_,
      GS2C_Combat_Hero_Status::default_instance_,
      GS2C_Combat_Hero_Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Hero_Status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Hero_Status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Combat_Hero_Status));
  GxDB_Combat_Crusade_descriptor_ = file->message_type(47);
  static const int GxDB_Combat_Crusade_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Combat_Crusade, level_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Combat_Crusade, stage_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Combat_Crusade, rewards_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Combat_Crusade, reset_lefttimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Combat_Crusade, add_lefttimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Combat_Crusade, is_crusade_over_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Combat_Crusade, chartimelist_),
  };
  GxDB_Combat_Crusade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_Combat_Crusade_descriptor_,
      GxDB_Combat_Crusade::default_instance_,
      GxDB_Combat_Crusade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Combat_Crusade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Combat_Crusade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_Combat_Crusade));
  GS2C_Combat_Crusade_descriptor_ = file->message_type(48);
  static const int GS2C_Combat_Crusade_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Crusade, level_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Crusade, stage_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Crusade, rewards_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Crusade, reset_lefttimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Crusade, add_lefttimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Crusade, is_crusade_over_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Crusade, chartimelist_),
  };
  GS2C_Combat_Crusade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Combat_Crusade_descriptor_,
      GS2C_Combat_Crusade::default_instance_,
      GS2C_Combat_Crusade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Crusade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Crusade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Combat_Crusade));
  Crusade_HeroInfo_descriptor_ = file->message_type(49);
  static const int Crusade_HeroInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Crusade_HeroInfo, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Crusade_HeroInfo, lefttime_),
  };
  Crusade_HeroInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Crusade_HeroInfo_descriptor_,
      Crusade_HeroInfo::default_instance_,
      Crusade_HeroInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Crusade_HeroInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Crusade_HeroInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Crusade_HeroInfo));
  GS2C_Combat_Crusade_Pre_Begin_descriptor_ = file->message_type(50);
  static const int GS2C_Combat_Crusade_Pre_Begin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Crusade_Pre_Begin, hero_info_),
  };
  GS2C_Combat_Crusade_Pre_Begin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Combat_Crusade_Pre_Begin_descriptor_,
      GS2C_Combat_Crusade_Pre_Begin::default_instance_,
      GS2C_Combat_Crusade_Pre_Begin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Crusade_Pre_Begin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Crusade_Pre_Begin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Combat_Crusade_Pre_Begin));
  C2GS_Combat_Crusade_Add_Hero_descriptor_ = file->message_type(51);
  static const int C2GS_Combat_Crusade_Add_Hero_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Crusade_Add_Hero, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Crusade_Add_Hero, hero_id_),
  };
  C2GS_Combat_Crusade_Add_Hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Combat_Crusade_Add_Hero_descriptor_,
      C2GS_Combat_Crusade_Add_Hero::default_instance_,
      C2GS_Combat_Crusade_Add_Hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Crusade_Add_Hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Crusade_Add_Hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Combat_Crusade_Add_Hero));
  GS2C_Crusade_Take_Reward_Rsp_descriptor_ = file->message_type(52);
  static const int GS2C_Crusade_Take_Reward_Rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Crusade_Take_Reward_Rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Crusade_Take_Reward_Rsp, reward_),
  };
  GS2C_Crusade_Take_Reward_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Crusade_Take_Reward_Rsp_descriptor_,
      GS2C_Crusade_Take_Reward_Rsp::default_instance_,
      GS2C_Crusade_Take_Reward_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Crusade_Take_Reward_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Crusade_Take_Reward_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Crusade_Take_Reward_Rsp));
  C2GS_Combat_Crusade_Recover_Times_descriptor_ = file->message_type(53);
  static const int C2GS_Combat_Crusade_Recover_Times_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Crusade_Recover_Times, values_),
  };
  C2GS_Combat_Crusade_Recover_Times_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Combat_Crusade_Recover_Times_descriptor_,
      C2GS_Combat_Crusade_Recover_Times::default_instance_,
      C2GS_Combat_Crusade_Recover_Times_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Crusade_Recover_Times, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Crusade_Recover_Times, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Combat_Crusade_Recover_Times));
  GS2C_Combat_Crusade_Add_Hero_descriptor_ = file->message_type(54);
  static const int GS2C_Combat_Crusade_Add_Hero_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Crusade_Add_Hero, bsuccess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Crusade_Add_Hero, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Crusade_Add_Hero, lefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Crusade_Add_Hero, alllefttime_),
  };
  GS2C_Combat_Crusade_Add_Hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Combat_Crusade_Add_Hero_descriptor_,
      GS2C_Combat_Crusade_Add_Hero::default_instance_,
      GS2C_Combat_Crusade_Add_Hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Crusade_Add_Hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Crusade_Add_Hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Combat_Crusade_Add_Hero));
  C2GS_Combat_Try_descriptor_ = file->message_type(55);
  static const int C2GS_Combat_Try_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Try, combat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Try, assist_arg_),
  };
  C2GS_Combat_Try_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Combat_Try_descriptor_,
      C2GS_Combat_Try::default_instance_,
      C2GS_Combat_Try_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Try, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Combat_Try, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Combat_Try));
  GS2C_Combat_Try_descriptor_ = file->message_type(56);
  static const int GS2C_Combat_Try_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Try, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Try, combat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Try, assist_arg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Try, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Try, group_id_),
  };
  GS2C_Combat_Try_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Combat_Try_descriptor_,
      GS2C_Combat_Try::default_instance_,
      GS2C_Combat_Try_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Try, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Combat_Try, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Combat_Try));
  C2GS_Onekey_Recover_HP_descriptor_ = file->message_type(57);
  static const int C2GS_Onekey_Recover_HP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Onekey_Recover_HP, heroid_),
  };
  C2GS_Onekey_Recover_HP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Onekey_Recover_HP_descriptor_,
      C2GS_Onekey_Recover_HP::default_instance_,
      C2GS_Onekey_Recover_HP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Onekey_Recover_HP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Onekey_Recover_HP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Onekey_Recover_HP));
  C2GS_REQUEST_TERR_descriptor_ = file->message_type(58);
  static const int C2GS_REQUEST_TERR_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_REQUEST_TERR, group_id_),
  };
  C2GS_REQUEST_TERR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_REQUEST_TERR_descriptor_,
      C2GS_REQUEST_TERR::default_instance_,
      C2GS_REQUEST_TERR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_REQUEST_TERR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_REQUEST_TERR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_REQUEST_TERR));
  GS2C_REQUEST_TERR_RET_descriptor_ = file->message_type(59);
  static const int GS2C_REQUEST_TERR_RET_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_REQUEST_TERR_RET, isgroupexist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_REQUEST_TERR_RET, terraintyp_),
  };
  GS2C_REQUEST_TERR_RET_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_REQUEST_TERR_RET_descriptor_,
      GS2C_REQUEST_TERR_RET::default_instance_,
      GS2C_REQUEST_TERR_RET_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_REQUEST_TERR_RET, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_REQUEST_TERR_RET, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_REQUEST_TERR_RET));
  C2GS_GetMyShadowNum_descriptor_ = file->message_type(60);
  static const int C2GS_GetMyShadowNum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GetMyShadowNum, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GetMyShadowNum, isattack_),
  };
  C2GS_GetMyShadowNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_GetMyShadowNum_descriptor_,
      C2GS_GetMyShadowNum::default_instance_,
      C2GS_GetMyShadowNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GetMyShadowNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GetMyShadowNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_GetMyShadowNum));
  GS2C_GetMyShadowNum_descriptor_ = file->message_type(61);
  static const int GS2C_GetMyShadowNum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GetMyShadowNum, shadownum_),
  };
  GS2C_GetMyShadowNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_GetMyShadowNum_descriptor_,
      GS2C_GetMyShadowNum::default_instance_,
      GS2C_GetMyShadowNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GetMyShadowNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GetMyShadowNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_GetMyShadowNum));
  GS2C_Add_Reinforce_descriptor_ = file->message_type(62);
  static const int GS2C_Add_Reinforce_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Add_Reinforce, isatt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Add_Reinforce, afteridx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Add_Reinforce, obj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Add_Reinforce, group_id_),
  };
  GS2C_Add_Reinforce_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Add_Reinforce_descriptor_,
      GS2C_Add_Reinforce::default_instance_,
      GS2C_Add_Reinforce_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Add_Reinforce, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Add_Reinforce, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Add_Reinforce));
  Msg_ECombatTactic_descriptor_ = file->enum_type(0);
  Msg_Records_Combat_Gains_descriptor_ = file->enum_type(1);
  E_Combat_Serialize_descriptor_ = file->enum_type(2);
  Msg_return_common_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Combat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_CombatProperty_descriptor_, &Msg_CombatProperty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_CombatObj_descriptor_, &Msg_CombatObj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Combat_Pre_Begin_descriptor_, &GS2C_Combat_Pre_Begin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Combat_Begin_descriptor_, &C2GS_Combat_Begin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Combat_Begin_descriptor_, &GS2C_Combat_Begin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tactic_Param_descriptor_, &Tactic_Param::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Combat_Next_Lst_descriptor_, &C2GS_Combat_Next_Lst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Combat_Next_Lst_descriptor_, &GS2C_Combat_Next_Lst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Combat_Next_Obj_descriptor_, &GS2C_Combat_Next_Obj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Combat_Add_Obj_descriptor_, &GS2C_Combat_Add_Obj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Combat_Del_Obj_descriptor_, &GS2C_Combat_Del_Obj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Combat_Select_Tactic_descriptor_, &C2GS_Combat_Select_Tactic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Combat_Select_Tactic_descriptor_, &GS2C_Combat_Select_Tactic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Combat_Reward_descriptor_, &Combat_Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Combat_Seque_descriptor_, &Combat_Seque::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Combat_All_Buff_descriptor_, &Combat_All_Buff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Combat_buff_descriptor_, &Combat_buff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Combat_Damage_descriptor_, &Combat_Damage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    extra_awards_descriptor_, &extra_awards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Combat_Buff_Remain_descriptor_, &Combat_Buff_Remain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Combat_Buff_AllInfo_descriptor_, &Combat_Buff_AllInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Combat_Ani_Finished_descriptor_, &C2GS_Combat_Ani_Finished::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Combat_New_Round_descriptor_, &GS2C_Combat_New_Round::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Combat_Select_Tactic_Single_descriptor_, &GS2C_Combat_Select_Tactic_Single::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Combat_Unwatch_descriptor_, &C2GS_Combat_Unwatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Combat_End_descriptor_, &GS2C_Combat_End::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Combat_Hero_Dead_descriptor_, &GS2C_Combat_Hero_Dead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Combat_Attract_Enemy_descriptor_, &C2GS_Combat_Attract_Enemy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Combat_Attract_Enemy_descriptor_, &GS2C_Combat_Attract_Enemy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Combat_Rush_descriptor_, &C2GS_Combat_Rush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Rush_Result_descriptor_, &GS2C_Rush_Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Combat_Runaway_descriptor_, &C2GS_Combat_Runaway::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Combat_Runaway_descriptor_, &GS2C_Combat_Runaway::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Combat_Add_Soldier_descriptor_, &C2GS_Combat_Add_Soldier::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Combat_Add_Soldier_descriptor_, &GS2C_Combat_Add_Soldier::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Combat_Call_Up_descriptor_, &C2GS_Combat_Call_Up::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Combat_Call_Up_descriptor_, &GS2C_Combat_Call_Up::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Combat_Call_Request_descriptor_, &C2GS_Combat_Call_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Combat_Call_Request_descriptor_, &GS2C_Combat_Call_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Combat_Speed_Up_descriptor_, &C2GS_Combat_Speed_Up::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Combat_Speed_Up_descriptor_, &GS2C_Combat_Speed_Up::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Auto_Combat_descriptor_, &C2GS_Auto_Combat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Auto_Combat_descriptor_, &GS2C_Auto_Combat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Quick_Combat_descriptor_, &C2GS_Quick_Combat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Quick_Combat_descriptor_, &GS2C_Quick_Combat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Combat_Hero_Status_descriptor_, &C2GS_Combat_Hero_Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Combat_Hero_Status_descriptor_, &GS2C_Combat_Hero_Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_Combat_Crusade_descriptor_, &GxDB_Combat_Crusade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Combat_Crusade_descriptor_, &GS2C_Combat_Crusade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Crusade_HeroInfo_descriptor_, &Crusade_HeroInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Combat_Crusade_Pre_Begin_descriptor_, &GS2C_Combat_Crusade_Pre_Begin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Combat_Crusade_Add_Hero_descriptor_, &C2GS_Combat_Crusade_Add_Hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Crusade_Take_Reward_Rsp_descriptor_, &GS2C_Crusade_Take_Reward_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Combat_Crusade_Recover_Times_descriptor_, &C2GS_Combat_Crusade_Recover_Times::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Combat_Crusade_Add_Hero_descriptor_, &GS2C_Combat_Crusade_Add_Hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Combat_Try_descriptor_, &C2GS_Combat_Try::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Combat_Try_descriptor_, &GS2C_Combat_Try::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Onekey_Recover_HP_descriptor_, &C2GS_Onekey_Recover_HP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_REQUEST_TERR_descriptor_, &C2GS_REQUEST_TERR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_REQUEST_TERR_RET_descriptor_, &GS2C_REQUEST_TERR_RET::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_GetMyShadowNum_descriptor_, &C2GS_GetMyShadowNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_GetMyShadowNum_descriptor_, &GS2C_GetMyShadowNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Add_Reinforce_descriptor_, &GS2C_Add_Reinforce::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Combat_2eproto() {
  delete Msg_CombatProperty::default_instance_;
  delete Msg_CombatProperty_reflection_;
  delete Msg_CombatObj::default_instance_;
  delete Msg_CombatObj_reflection_;
  delete GS2C_Combat_Pre_Begin::default_instance_;
  delete GS2C_Combat_Pre_Begin_reflection_;
  delete C2GS_Combat_Begin::default_instance_;
  delete C2GS_Combat_Begin_reflection_;
  delete GS2C_Combat_Begin::default_instance_;
  delete GS2C_Combat_Begin_reflection_;
  delete Tactic_Param::default_instance_;
  delete Tactic_Param_reflection_;
  delete C2GS_Combat_Next_Lst::default_instance_;
  delete C2GS_Combat_Next_Lst_reflection_;
  delete GS2C_Combat_Next_Lst::default_instance_;
  delete GS2C_Combat_Next_Lst_reflection_;
  delete GS2C_Combat_Next_Obj::default_instance_;
  delete GS2C_Combat_Next_Obj_reflection_;
  delete GS2C_Combat_Add_Obj::default_instance_;
  delete GS2C_Combat_Add_Obj_reflection_;
  delete GS2C_Combat_Del_Obj::default_instance_;
  delete GS2C_Combat_Del_Obj_reflection_;
  delete C2GS_Combat_Select_Tactic::default_instance_;
  delete C2GS_Combat_Select_Tactic_reflection_;
  delete GS2C_Combat_Select_Tactic::default_instance_;
  delete GS2C_Combat_Select_Tactic_reflection_;
  delete Combat_Reward::default_instance_;
  delete Combat_Reward_reflection_;
  delete Combat_Seque::default_instance_;
  delete Combat_Seque_reflection_;
  delete Combat_All_Buff::default_instance_;
  delete Combat_All_Buff_reflection_;
  delete Combat_buff::default_instance_;
  delete Combat_buff_reflection_;
  delete Combat_Damage::default_instance_;
  delete Combat_Damage_reflection_;
  delete extra_awards::default_instance_;
  delete extra_awards_reflection_;
  delete Combat_Buff_Remain::default_instance_;
  delete Combat_Buff_Remain_reflection_;
  delete Combat_Buff_AllInfo::default_instance_;
  delete Combat_Buff_AllInfo_reflection_;
  delete C2GS_Combat_Ani_Finished::default_instance_;
  delete C2GS_Combat_Ani_Finished_reflection_;
  delete GS2C_Combat_New_Round::default_instance_;
  delete GS2C_Combat_New_Round_reflection_;
  delete GS2C_Combat_Select_Tactic_Single::default_instance_;
  delete GS2C_Combat_Select_Tactic_Single_reflection_;
  delete C2GS_Combat_Unwatch::default_instance_;
  delete C2GS_Combat_Unwatch_reflection_;
  delete GS2C_Combat_End::default_instance_;
  delete GS2C_Combat_End_reflection_;
  delete GS2C_Combat_Hero_Dead::default_instance_;
  delete GS2C_Combat_Hero_Dead_reflection_;
  delete C2GS_Combat_Attract_Enemy::default_instance_;
  delete C2GS_Combat_Attract_Enemy_reflection_;
  delete GS2C_Combat_Attract_Enemy::default_instance_;
  delete GS2C_Combat_Attract_Enemy_reflection_;
  delete C2GS_Combat_Rush::default_instance_;
  delete C2GS_Combat_Rush_reflection_;
  delete GS2C_Rush_Result::default_instance_;
  delete GS2C_Rush_Result_reflection_;
  delete C2GS_Combat_Runaway::default_instance_;
  delete C2GS_Combat_Runaway_reflection_;
  delete GS2C_Combat_Runaway::default_instance_;
  delete GS2C_Combat_Runaway_reflection_;
  delete C2GS_Combat_Add_Soldier::default_instance_;
  delete C2GS_Combat_Add_Soldier_reflection_;
  delete GS2C_Combat_Add_Soldier::default_instance_;
  delete GS2C_Combat_Add_Soldier_reflection_;
  delete C2GS_Combat_Call_Up::default_instance_;
  delete C2GS_Combat_Call_Up_reflection_;
  delete GS2C_Combat_Call_Up::default_instance_;
  delete GS2C_Combat_Call_Up_reflection_;
  delete C2GS_Combat_Call_Request::default_instance_;
  delete C2GS_Combat_Call_Request_reflection_;
  delete GS2C_Combat_Call_Request::default_instance_;
  delete GS2C_Combat_Call_Request_reflection_;
  delete C2GS_Combat_Speed_Up::default_instance_;
  delete C2GS_Combat_Speed_Up_reflection_;
  delete GS2C_Combat_Speed_Up::default_instance_;
  delete GS2C_Combat_Speed_Up_reflection_;
  delete C2GS_Auto_Combat::default_instance_;
  delete C2GS_Auto_Combat_reflection_;
  delete GS2C_Auto_Combat::default_instance_;
  delete GS2C_Auto_Combat_reflection_;
  delete C2GS_Quick_Combat::default_instance_;
  delete C2GS_Quick_Combat_reflection_;
  delete GS2C_Quick_Combat::default_instance_;
  delete GS2C_Quick_Combat_reflection_;
  delete C2GS_Combat_Hero_Status::default_instance_;
  delete C2GS_Combat_Hero_Status_reflection_;
  delete GS2C_Combat_Hero_Status::default_instance_;
  delete GS2C_Combat_Hero_Status_reflection_;
  delete GxDB_Combat_Crusade::default_instance_;
  delete GxDB_Combat_Crusade_reflection_;
  delete GS2C_Combat_Crusade::default_instance_;
  delete GS2C_Combat_Crusade_reflection_;
  delete Crusade_HeroInfo::default_instance_;
  delete Crusade_HeroInfo_reflection_;
  delete GS2C_Combat_Crusade_Pre_Begin::default_instance_;
  delete GS2C_Combat_Crusade_Pre_Begin_reflection_;
  delete C2GS_Combat_Crusade_Add_Hero::default_instance_;
  delete C2GS_Combat_Crusade_Add_Hero_reflection_;
  delete GS2C_Crusade_Take_Reward_Rsp::default_instance_;
  delete GS2C_Crusade_Take_Reward_Rsp_reflection_;
  delete C2GS_Combat_Crusade_Recover_Times::default_instance_;
  delete C2GS_Combat_Crusade_Recover_Times_reflection_;
  delete GS2C_Combat_Crusade_Add_Hero::default_instance_;
  delete GS2C_Combat_Crusade_Add_Hero_reflection_;
  delete C2GS_Combat_Try::default_instance_;
  delete C2GS_Combat_Try_reflection_;
  delete GS2C_Combat_Try::default_instance_;
  delete GS2C_Combat_Try_reflection_;
  delete C2GS_Onekey_Recover_HP::default_instance_;
  delete C2GS_Onekey_Recover_HP_reflection_;
  delete C2GS_REQUEST_TERR::default_instance_;
  delete C2GS_REQUEST_TERR_reflection_;
  delete GS2C_REQUEST_TERR_RET::default_instance_;
  delete GS2C_REQUEST_TERR_RET_reflection_;
  delete C2GS_GetMyShadowNum::default_instance_;
  delete C2GS_GetMyShadowNum_reflection_;
  delete GS2C_GetMyShadowNum::default_instance_;
  delete GS2C_GetMyShadowNum_reflection_;
  delete GS2C_Add_Reinforce::default_instance_;
  delete GS2C_Add_Reinforce_reflection_;
}

void protobuf_AddDesc_Combat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_CommomDef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Combat.proto\022\002pb\032\017CommomDef.proto\"\273\001\n\022"
    "Msg_CombatProperty\022\014\n\004tong\030\001 \001(\r\022\014\n\004yong"
    "\030\002 \001(\r\022\016\n\006attack\030\003 \001(\r\022\017\n\007defence\030\004 \001(\r\022"
    "\023\n\013skillAttack\030\005 \001(\r\022\024\n\014skillDefence\030\006 \001"
    "(\r\022\020\n\010attackEx\030\007 \001(\r\022\021\n\tdefenceEx\030\010 \001(\r\022"
    "\030\n\020rowSoldierMaxCnt\030\t \001(\r\"\367\001\n\rMsg_Combat"
    "Obj\022\017\n\007tableId\030\001 \002(\r\022\021\n\tplayer_id\030\002 \001(\004\022"
    "\023\n\013player_name\030\003 \001(\t\022\022\n\nsoldierCnt\030\004 \003(\r"
    "\022\030\n\020rowSoldierMaxCnt\030\005 \001(\r\022\r\n\005maxHp\030\006 \001("
    "\r\022\r\n\005level\030\007 \001(\r\022\017\n\007country\030\010 \001(\r\022\025\n\rind"
    "exInCombat\030\t \001(\r\022\020\n\010isShadow\030\n \001(\010\022\023\n\013is"
    "Reinforce\030\013 \001(\010\022\022\n\nisFakeChar\030\014 \001(\010\"\340\001\n\025"
    "GS2C_Combat_Pre_Begin\022\020\n\010group_id\030\001 \002(\r\022"
    "%\n\nattack_lst\030\002 \003(\0132\021.pb.Msg_CombatObj\022&"
    "\n\013defence_lst\030\003 \003(\0132\021.pb.Msg_CombatObj\022\023"
    "\n\013combat_type\030\004 \001(\r\022\022\n\nattack_cnt\030\005 \001(\r\022"
    "\023\n\013defence_cnt\030\006 \001(\r\022\022\n\nterrainTyp\030\007 \001(\r"
    "\022\024\n\014isAutoCombat\030\010 \001(\010\"L\n\021C2GS_Combat_Be"
    "gin\022\020\n\010group_id\030\001 \002(\r\022%\n\nattack_lst\030\002 \003("
    "\0132\021.pb.Msg_CombatObj\"\236\004\n\021GS2C_Combat_Beg"
    "in\022\020\n\010group_id\030\001 \002(\r\022%\n\nattack_lst\030\002 \003(\013"
    "2\021.pb.Msg_CombatObj\022&\n\013defence_lst\030\003 \003(\013"
    "2\021.pb.Msg_CombatObj\022\023\n\013combat_type\030\004 \001(\r"
    "\022\022\n\nattack_cnt\030\005 \001(\r\022\023\n\013defence_cnt\030\006 \001("
    "\r\022\023\n\013choose_time\030\007 \001(\004\022\021\n\tover_time\030\010 \001("
    "\004\022*\n\017attack_all_list\030\t \003(\0132\021.pb.Msg_Comb"
    "atObj\022+\n\020defence_all_list\030\n \003(\0132\021.pb.Msg"
    "_CombatObj\022%\n\013tatic_param\030\013 \001(\0132\020.pb.Tac"
    "tic_Param\022\022\n\nterrainTyp\030\014 \001(\r\022\022\n\nroundCo"
    "unt\030\r \001(\004\022\024\n\014isAutoCombat\030\016 \001(\010\022\024\n\014attSh"
    "adowNum\030\017 \001(\r\022\024\n\014defShadowNum\030\020 \001(\r\022+\n\016s"
    "oldierBuffLst\030\021 \001(\0132\023.pb.Combat_All_Buff"
    "\022+\n\016genericBuffLst\030\022 \001(\0132\023.pb.Combat_All"
    "_Buff\"z\n\014Tactic_Param\022\032\n\022attTacticEnable"
    "Str\030\001 \001(\r\022\032\n\022defTacticEnableStr\030\002 \001(\r\022\030\n"
    "\020attTacticRealStr\030\003 \001(\r\022\030\n\020defTacticReal"
    "Str\030\004 \001(\r\"T\n\024C2GS_Combat_Next_Lst\022\020\n\010gro"
    "up_id\030\001 \002(\r\022\025\n\rindexInCombat\030\002 \002(\r\022\023\n\013is"
    "_attacker\030\003 \002(\010\"\201\001\n\024GS2C_Combat_Next_Lst"
    "\022*\n\017attack_all_list\030\001 \003(\0132\021.pb.Msg_Comba"
    "tObj\022+\n\020defence_all_list\030\002 \003(\0132\021.pb.Msg_"
    "CombatObj\022\020\n\010group_id\030\003 \001(\r\"o\n\024GS2C_Comb"
    "at_Next_Obj\022\020\n\010group_id\030\001 \002(\r\022!\n\006attack\030"
    "\002 \001(\0132\021.pb.Msg_CombatObj\022\"\n\007defence\030\003 \001("
    "\0132\021.pb.Msg_CombatObj\"\306\001\n\023GS2C_Combat_Add"
    "_Obj\022\020\n\010group_id\030\001 \002(\r\022\017\n\007tableId\030\002 \002(\r\022"
    "\021\n\tplayer_id\030\003 \001(\004\022\023\n\013player_name\030\004 \001(\t\022"
    "\023\n\013is_attacker\030\005 \002(\010\022\021\n\tis_shadow\030\006 \001(\010\022"
    "\022\n\ncountry_id\030\007 \001(\r\022\025\n\rindexInCombat\030\010 \001"
    "(\r\022\021\n\tlistLengh\030\t \001(\r\"\234\001\n\023GS2C_Combat_De"
    "l_Obj\022\020\n\010group_id\030\001 \002(\r\022#\n\006attack\030\002 \003(\0132"
    "\023.pb.PairValueUint64\022$\n\007defence\030\003 \003(\0132\023."
    "pb.PairValueUint64\022\025\n\rindexInCombat\030\004 \001("
    "\r\022\021\n\tlistLengh\030\005 \001(\r\"\214\001\n\031C2GS_Combat_Sel"
    "ect_Tactic\022\020\n\010group_id\030\001 \002(\r\022\023\n\013is_attac"
    "ker\030\002 \002(\010\022\017\n\007hero_id\030\003 \002(\r\022#\n\004type\030\004 \002(\016"
    "2\025.pb.Msg_ECombatTactic\022\022\n\nroundCount\030\005 "
    "\002(\004\"\222\003\n\031GS2C_Combat_Select_Tactic\022*\n\013att"
    "ack_type\030\001 \002(\0162\025.pb.Msg_ECombatTactic\022+\n"
    "\014defence_type\030\002 \002(\0162\025.pb.Msg_ECombatTact"
    "ic\022\037\n\027is_attack_skill_success\030\003 \001(\010\022 \n\030i"
    "s_defence_skill_success\030\004 \001(\010\022\021\n\tover_ti"
    "me\030\005 \001(\004\022\023\n\013attackerNum\030\006 \001(\r\022\023\n\013defende"
    "rNum\030\007 \001(\r\022\022\n\nattSkillID\030\010 \001(\r\022\022\n\ndefSki"
    "llID\030\t \001(\r\022\"\n\010sequeLst\030\n \003(\0132\020.pb.Combat"
    "_Seque\022\022\n\nroundCount\030\013 \001(\004\022\020\n\010group_id\030\016"
    " \001(\r\022\024\n\014attShadowNum\030\017 \001(\r\022\024\n\014defShadowN"
    "um\030\020 \001(\r\"K\n\rCombat_Reward\022\r\n\005group\030\001 \001(\r"
    "\022\013\n\003exp\030\002 \001(\r\022\014\n\004coin\030\003 \001(\r\022\020\n\010playerid\030"
    "\004 \001(\004\"\212\002\n\014Combat_Seque\022)\n\tsequeType\030\001 \002("
    "\0162\026.pb.E_Combat_Serialize\022$\n\tdamageLst\030\002"
    " \003(\0132\021.pb.Combat_Damage\022$\n\trewardLst\030\003 \003"
    "(\0132\021.pb.Combat_Reward\022*\n\020att_extra_award"
    "s\030\004 \003(\0132\020.pb.extra_awards\022*\n\020def_extra_a"
    "wards\030\005 \003(\0132\020.pb.extra_awards\022+\n\016soldier"
    "BuffLst\030\006 \001(\0132\023.pb.Combat_All_Buff\"_\n\017Co"
    "mbat_All_Buff\022%\n\014buff_one_att\030\001 \003(\0132\017.pb"
    ".Combat_buff\022%\n\014buff_one_def\030\002 \003(\0132\017.pb."
    "Combat_buff\"\201\001\n\013Combat_buff\022\020\n\010buff_tid\030"
    "\001 \002(\r\022\026\n\016buff_unique_id\030\002 \002(\004\022\017\n\007generic"
    "\030\003 \002(\010\022\r\n\005group\030\004 \002(\r\022\020\n\010rowIndex\030\005 \002(\r\022"
    "\026\n\016leftRoundCount\030\006 \001(\r\"`\n\rCombat_Damage"
    "\022\r\n\005group\030\001 \001(\r\022\r\n\005range\030\002 \001(\r\022\016\n\006damage"
    "\030\003 \001(\r\022\021\n\trestBlood\030\004 \001(\r\022\016\n\006buffID\030\005 \001("
    "\r\"3\n\014extra_awards\022\020\n\010awardsid\030\001 \001(\r\022\021\n\ta"
    "wardsnum\030\002 \001(\r\"W\n\022Combat_Buff_Remain\022\021\n\t"
    "groupfrom\030\001 \001(\r\022\017\n\007groupto\030\002 \001(\r\022\r\n\005rang"
    "e\030\003 \001(\r\022\016\n\006buffID\030\004 \001(\r\"\342\001\n\023Combat_Buff_"
    "AllInfo\022\"\n\007damages\030\001 \003(\0132\021.pb.Combat_Dam"
    "age\022\"\n\007rewards\030\002 \003(\0132\021.pb.Combat_Reward\022"
    "+\n\013buffremians\030\003 \003(\0132\026.pb.Combat_Buff_Re"
    "main\022*\n\020att_extra_awards\030\004 \003(\0132\020.pb.extr"
    "a_awards\022*\n\020def_extra_awards\030\005 \003(\0132\020.pb."
    "extra_awards\"\?\n\030C2GS_Combat_Ani_Finished"
    "\022\017\n\007groupid\030\001 \002(\r\022\022\n\nroundCount\030\002 \002(\004\"z\n"
    "\025GS2C_Combat_New_Round\022\023\n\013choose_time\030\001 "
    "\001(\004\022&\n\014tactic_param\030\002 \001(\0132\020.pb.Tactic_Pa"
    "ram\022\022\n\nroundCount\030\003 \001(\004\022\020\n\010group_id\030\004 \001("
    "\r\"\254\001\n GS2C_Combat_Select_Tactic_Single\022#"
    "\n\004type\030\001 \002(\0162\025.pb.Msg_ECombatTactic\022\023\n\013i"
    "s_attacker\030\002 \001(\010\022\023\n\013attackerNum\030\003 \001(\r\022\023\n"
    "\013defenderNum\030\004 \001(\r\022\022\n\nroundCount\030\005 \001(\004\022\020"
    "\n\010group_id\030\006 \001(\r\"<\n\023C2GS_Combat_Unwatch\022"
    "\020\n\010group_id\030\001 \002(\r\022\023\n\013is_in_cross\030\002 \001(\010\"\327"
    "\001\n\017GS2C_Combat_End\022\025\n\ris_attack_win\030\001 \002("
    "\010\022\024\n\014statisticExp\030\002 \001(\r\022\026\n\016statisticMone"
    "y\030\003 \001(\r\022\025\n\rstatisticDead\030\004 \001(\r\022\025\n\rstatis"
    "ticKill\030\005 \001(\r\022\035\n\007rewards\030\006 \003(\0132\014.pb.StRe"
    "ward\022\020\n\010group_id\030\007 \001(\r\022 \n\nExtrewards\030\010 \003"
    "(\0132\014.pb.StReward\"M\n\025GS2C_Combat_Hero_Dea"
    "d\022\021\n\tplayer_id\030\001 \002(\004\022\017\n\007hero_id\030\002 \002(\r\022\020\n"
    "\010group_id\030\003 \001(\r\"B\n\031C2GS_Combat_Attract_E"
    "nemy\022\020\n\010group_id\030\001 \002(\r\022\023\n\013is_attacker\030\002 "
    "\002(\010\"\272\001\n\031GS2C_Combat_Attract_Enemy\022\022\n\nis_"
    "success\030\001 \002(\010\022\020\n\010group_id\030\002 \001(\r\022\021\n\tplaye"
    "r_id\030\003 \001(\004\022\025\n\rhero_table_id\030\004 \001(\r\022\r\n\005cos"
    "ts\030\005 \001(\004\022\024\n\014my_player_id\030\006 \001(\004\022\022\n\nmy_her"
    "o_id\030\007 \001(\r\022\024\n\014old_group_id\030\010 \001(\r\"[\n\020C2GS"
    "_Combat_Rush\022\020\n\010group_id\030\001 \002(\r\022\023\n\013is_att"
    "acker\030\002 \002(\010\022\017\n\007city_id\030\003 \002(\r\022\017\n\007hero_id\030"
    "\004 \002(\r\"e\n\020GS2C_Rush_Result\022%\n\006result\030\001 \001("
    "\0162\025.pb.Msg_return_common\022\020\n\010group_id\030\002 \001"
    "(\r\022\030\n\020rush_cd_end_time\030\003 \001(\004\"^\n\023C2GS_Com"
    "bat_Runaway\022\020\n\010group_id\030\001 \002(\r\022\023\n\013is_atta"
    "cker\030\002 \002(\010\022\017\n\007city_id\030\003 \002(\r\022\017\n\007hero_id\030\004"
    " \002(\r\"N\n\023GS2C_Combat_Runaway\022%\n\006result\030\001 "
    "\001(\0162\025.pb.Msg_return_common\022\020\n\010group_id\030\002"
    " \001(\r\"s\n\027C2GS_Combat_Add_Soldier\022\020\n\010group"
    "_id\030\001 \002(\r\022\023\n\013is_attacker\030\002 \002(\010\022\r\n\005times\030"
    "\003 \002(\r\022\017\n\007hero_id\030\004 \002(\r\022\021\n\tcurCityId\030\005 \001("
    "\r\"b\n\027GS2C_Combat_Add_Soldier\022%\n\006result\030\001"
    " \001(\0162\025.pb.Msg_return_common\022\016\n\006addExp\030\002 "
    "\001(\r\022\020\n\010group_id\030\003 \001(\r\"&\n\023C2GS_Combat_Cal"
    "l_Up\022\017\n\007city_id\030\001 \002(\r\"<\n\023GS2C_Combat_Cal"
    "l_Up\022%\n\006result\030\001 \001(\0162\025.pb.Msg_return_com"
    "mon\"\?\n\030C2GS_Combat_Call_Request\022\017\n\007hero_"
    "id\030\001 \003(\r\022\022\n\ndestCityID\030\002 \001(\r\"Z\n\030GS2C_Com"
    "bat_Call_Request\022%\n\006result\030\001 \001(\0162\025.pb.Ms"
    "g_return_common\022\027\n\017call_up_down_id\030\002 \001(\004"
    "\"9\n\024C2GS_Combat_Speed_Up\022\020\n\010group_id\030\001 \002"
    "(\r\022\017\n\007city_id\030\002 \002(\r\"(\n\024GS2C_Combat_Speed"
    "_Up\022\020\n\010group_id\030\001 \002(\r\"#\n\020C2GS_Auto_Comba"
    "t\022\017\n\007useAuto\030\002 \002(\010\"9\n\020GS2C_Auto_Combat\022\017"
    "\n\007useAuto\030\001 \002(\010\022\024\n\014isSetSuccess\030\002 \001(\010\"%\n"
    "\021C2GS_Quick_Combat\022\020\n\010group_id\030\001 \001(\r\"2\n\021"
    "GS2C_Quick_Combat\022\013\n\003ret\030\001 \001(\010\022\020\n\010group_"
    "id\030\002 \001(\r\"\?\n\027C2GS_Combat_Hero_Status\022\020\n\010h"
    "ero_tid\030\001 \002(\r\022\022\n\nisFakeChar\030\002 \001(\010\"\311\001\n\027GS"
    "2C_Combat_Hero_Status\022\020\n\010hero_tid\030\001 \002(\r\022"
    "\024\n\014is_in_combat\030\002 \001(\010\022\023\n\013is_fighting\030\003 \001"
    "(\010\022\017\n\007is_dead\030\004 \001(\010\022\023\n\013combat_type\030\005 \001(\r"
    "\022\020\n\010group_id\030\006 \001(\r\022\025\n\ris_in_attract\030\007 \001("
    "\010\022\016\n\006cityId\030\010 \001(\r\022\022\n\nisFakeChar\030\t \001(\010\"\301\001"
    "\n\023GxDB_Combat_Crusade\022\020\n\010level_id\030\001 \002(\r\022"
    "\023\n\013stage_state\030\002 \002(\r\022\025\n\rrewards_state\030\003 "
    "\002(\r\022\027\n\017reset_lefttimes\030\004 \002(\r\022\025\n\radd_left"
    "times\030\005 \002(\r\022\027\n\017is_Crusade_over\030\006 \001(\r\022#\n\014"
    "charTimeList\030\007 \003(\0132\r.pb.PairValue\"\301\001\n\023GS"
    "2C_Combat_Crusade\022\020\n\010level_id\030\001 \002(\r\022\023\n\013s"
    "tage_state\030\002 \002(\r\022\025\n\rrewards_state\030\003 \002(\004\022"
    "\027\n\017reset_lefttimes\030\004 \002(\r\022\025\n\radd_lefttime"
    "s\030\005 \002(\r\022\027\n\017is_Crusade_over\030\006 \001(\r\022#\n\014char"
    "TimeList\030\007 \003(\0132\r.pb.PairValue\"5\n\020Crusade"
    "_HeroInfo\022\017\n\007hero_id\030\001 \002(\r\022\020\n\010lefttime\030\002"
    " \002(\r\"H\n\035GS2C_Combat_Crusade_Pre_Begin\022\'\n"
    "\thero_info\030\001 \003(\0132\024.pb.Crusade_HeroInfo\"A"
    "\n\034C2GS_Combat_Crusade_Add_Hero\022\020\n\010group_"
    "id\030\001 \002(\r\022\017\n\007hero_id\030\002 \002(\r\"I\n\034GS2C_Crusad"
    "e_Take_Reward_Rsp\022\013\n\003ret\030\001 \002(\010\022\034\n\006reward"
    "\030\002 \003(\0132\014.pb.StReward\"B\n!C2GS_Combat_Crus"
    "ade_Recover_Times\022\035\n\006values\030\001 \003(\0132\r.pb.P"
    "airValue\"h\n\034GS2C_Combat_Crusade_Add_Hero"
    "\022\020\n\010bSuccess\030\001 \002(\010\022\017\n\007hero_id\030\002 \002(\r\022\020\n\010l"
    "efttime\030\003 \002(\r\022\023\n\013alllefttime\030\004 \002(\r\":\n\017C2"
    "GS_Combat_Try\022\023\n\013combat_type\030\001 \002(\r\022\022\n\nas"
    "sist_arg\030\002 \001(\r\"\204\001\n\017GS2C_Combat_Try\022\016\n\006re"
    "sult\030\001 \002(\r\022\023\n\013combat_type\030\002 \001(\r\022\022\n\nassis"
    "t_arg\030\003 \001(\r\022&\n\007errcode\030\004 \001(\0162\025.pb.Msg_re"
    "turn_common\022\020\n\010group_id\030\005 \001(\r\"(\n\026C2GS_On"
    "ekey_Recover_HP\022\016\n\006heroid\030\001 \003(\r\"%\n\021C2GS_"
    "REQUEST_TERR\022\020\n\010group_id\030\001 \002(\r\"A\n\025GS2C_R"
    "EQUEST_TERR_RET\022\024\n\014isGroupExist\030\001 \001(\r\022\022\n"
    "\nterrainTyp\030\002 \001(\r\"9\n\023C2GS_GetMyShadowNum"
    "\022\020\n\010group_id\030\001 \001(\r\022\020\n\010isattack\030\002 \001(\010\"(\n\023"
    "GS2C_GetMyShadowNum\022\021\n\tshadownum\030\001 \001(\r\"g"
    "\n\022GS2C_Add_Reinforce\022\r\n\005isatt\030\001 \001(\010\022\020\n\010a"
    "fteridx\030\002 \001(\r\022\036\n\003obj\030\003 \001(\0132\021.pb.Msg_Comb"
    "atObj\022\020\n\010group_id\030\004 \001(\r*t\n\021Msg_ECombatTa"
    "ctic\022\n\n\006Attack\020\000\022\013\n\007Defence\020\001\022\n\n\006Charge\020"
    "\002\022\014\n\010AttackEx\020\003\022\r\n\tDefenceEx\020\004\022\014\n\010Charge"
    "Ex\020\005\022\017\n\013SkillTactic\020\006*\206\001\n\030Msg_Records_Co"
    "mbat_Gains\022\023\n\017CombatPlayerExp\020\000\022\016\n\nComba"
    "tDead\020\001\022\017\n\013CombatKills\020\002\022\021\n\rCombatExploi"
    "t\020\003\022\016\n\nCombatCoin\020\004\022\021\n\rCombatInfoNum\020\005*\314"
    "\001\n\022E_Combat_Serialize\022\r\n\tCoSe_Null\020\000\022\024\n\020"
    "CoSe_TacticCrash\020\001\022\026\n\022CoSe_SkillHurt_Att"
    "\020\002\022\023\n\017CoSe_BuffBefore\020\003\022\026\n\022CoSe_SkillHur"
    "t_Def\020\004\022\022\n\016CoSe_BuffAfter\020\005\022\022\n\016CoSe_Buff"
    "Spare\020\006\022\021\n\rCoSe_CutToDie\020\007\022\021\n\rCoSe_BuffM"
    "ove\020\024*\340\003\n\021Msg_return_common\022\013\n\007SUCCESS\020\000"
    "\022\020\n\014GROUP_ID_ERR\020\001\022\014\n\010HERO_ERR\020\002\022\r\n\tOTHE"
    "R_ERR\020\003\022\021\n\rHERO_FIGHTING\020\004\022\023\n\017CITY_NOT_F"
    "OUND1\020\005\022\021\n\rCITY_FAR_AWAY\020\006\022\023\n\017CITY_NOT_F"
    "OUND2\020\007\022\022\n\016CITY_STATE_ERR\020\010\022\016\n\nRUSH_LEGA"
    "L\020\t\022\020\n\014ESCAPE_LEGEL\020\n\022\023\n\017NO_ENOUGH_COSTS"
    "\020\013\022\020\n\014NO_HERO_HERE\020\014\022\021\n\rNO_CALL_COSTS\020\r\022"
    "\020\n\014HERO_IN_CITY\020\016\022\r\n\tHERO_BUSY\020\017\022\021\n\rREQU"
    "EST_LEGAL\020\020\022\021\n\rLEVEL_ILLIGAL\020\021\022\023\n\017AIDE_C"
    "ANT_FIGHT\020\022\022\022\n\016IS_IN_FIGNTING\020\023\022\r\n\tCALL_"
    "DOWN\020\024\022\031\n\025CROSS_CALL_OFFICE_ERR\020\025\022\024\n\020NO_"
    "ENOUGH_TROOPS\020\026\022\016\n\nRUSH_IN_CD\020\027\022\017\n\013SERVE"
    "R_BUSY\020\030", 8448);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Combat.proto", &protobuf_RegisterTypes);
  Msg_CombatProperty::default_instance_ = new Msg_CombatProperty();
  Msg_CombatObj::default_instance_ = new Msg_CombatObj();
  GS2C_Combat_Pre_Begin::default_instance_ = new GS2C_Combat_Pre_Begin();
  C2GS_Combat_Begin::default_instance_ = new C2GS_Combat_Begin();
  GS2C_Combat_Begin::default_instance_ = new GS2C_Combat_Begin();
  Tactic_Param::default_instance_ = new Tactic_Param();
  C2GS_Combat_Next_Lst::default_instance_ = new C2GS_Combat_Next_Lst();
  GS2C_Combat_Next_Lst::default_instance_ = new GS2C_Combat_Next_Lst();
  GS2C_Combat_Next_Obj::default_instance_ = new GS2C_Combat_Next_Obj();
  GS2C_Combat_Add_Obj::default_instance_ = new GS2C_Combat_Add_Obj();
  GS2C_Combat_Del_Obj::default_instance_ = new GS2C_Combat_Del_Obj();
  C2GS_Combat_Select_Tactic::default_instance_ = new C2GS_Combat_Select_Tactic();
  GS2C_Combat_Select_Tactic::default_instance_ = new GS2C_Combat_Select_Tactic();
  Combat_Reward::default_instance_ = new Combat_Reward();
  Combat_Seque::default_instance_ = new Combat_Seque();
  Combat_All_Buff::default_instance_ = new Combat_All_Buff();
  Combat_buff::default_instance_ = new Combat_buff();
  Combat_Damage::default_instance_ = new Combat_Damage();
  extra_awards::default_instance_ = new extra_awards();
  Combat_Buff_Remain::default_instance_ = new Combat_Buff_Remain();
  Combat_Buff_AllInfo::default_instance_ = new Combat_Buff_AllInfo();
  C2GS_Combat_Ani_Finished::default_instance_ = new C2GS_Combat_Ani_Finished();
  GS2C_Combat_New_Round::default_instance_ = new GS2C_Combat_New_Round();
  GS2C_Combat_Select_Tactic_Single::default_instance_ = new GS2C_Combat_Select_Tactic_Single();
  C2GS_Combat_Unwatch::default_instance_ = new C2GS_Combat_Unwatch();
  GS2C_Combat_End::default_instance_ = new GS2C_Combat_End();
  GS2C_Combat_Hero_Dead::default_instance_ = new GS2C_Combat_Hero_Dead();
  C2GS_Combat_Attract_Enemy::default_instance_ = new C2GS_Combat_Attract_Enemy();
  GS2C_Combat_Attract_Enemy::default_instance_ = new GS2C_Combat_Attract_Enemy();
  C2GS_Combat_Rush::default_instance_ = new C2GS_Combat_Rush();
  GS2C_Rush_Result::default_instance_ = new GS2C_Rush_Result();
  C2GS_Combat_Runaway::default_instance_ = new C2GS_Combat_Runaway();
  GS2C_Combat_Runaway::default_instance_ = new GS2C_Combat_Runaway();
  C2GS_Combat_Add_Soldier::default_instance_ = new C2GS_Combat_Add_Soldier();
  GS2C_Combat_Add_Soldier::default_instance_ = new GS2C_Combat_Add_Soldier();
  C2GS_Combat_Call_Up::default_instance_ = new C2GS_Combat_Call_Up();
  GS2C_Combat_Call_Up::default_instance_ = new GS2C_Combat_Call_Up();
  C2GS_Combat_Call_Request::default_instance_ = new C2GS_Combat_Call_Request();
  GS2C_Combat_Call_Request::default_instance_ = new GS2C_Combat_Call_Request();
  C2GS_Combat_Speed_Up::default_instance_ = new C2GS_Combat_Speed_Up();
  GS2C_Combat_Speed_Up::default_instance_ = new GS2C_Combat_Speed_Up();
  C2GS_Auto_Combat::default_instance_ = new C2GS_Auto_Combat();
  GS2C_Auto_Combat::default_instance_ = new GS2C_Auto_Combat();
  C2GS_Quick_Combat::default_instance_ = new C2GS_Quick_Combat();
  GS2C_Quick_Combat::default_instance_ = new GS2C_Quick_Combat();
  C2GS_Combat_Hero_Status::default_instance_ = new C2GS_Combat_Hero_Status();
  GS2C_Combat_Hero_Status::default_instance_ = new GS2C_Combat_Hero_Status();
  GxDB_Combat_Crusade::default_instance_ = new GxDB_Combat_Crusade();
  GS2C_Combat_Crusade::default_instance_ = new GS2C_Combat_Crusade();
  Crusade_HeroInfo::default_instance_ = new Crusade_HeroInfo();
  GS2C_Combat_Crusade_Pre_Begin::default_instance_ = new GS2C_Combat_Crusade_Pre_Begin();
  C2GS_Combat_Crusade_Add_Hero::default_instance_ = new C2GS_Combat_Crusade_Add_Hero();
  GS2C_Crusade_Take_Reward_Rsp::default_instance_ = new GS2C_Crusade_Take_Reward_Rsp();
  C2GS_Combat_Crusade_Recover_Times::default_instance_ = new C2GS_Combat_Crusade_Recover_Times();
  GS2C_Combat_Crusade_Add_Hero::default_instance_ = new GS2C_Combat_Crusade_Add_Hero();
  C2GS_Combat_Try::default_instance_ = new C2GS_Combat_Try();
  GS2C_Combat_Try::default_instance_ = new GS2C_Combat_Try();
  C2GS_Onekey_Recover_HP::default_instance_ = new C2GS_Onekey_Recover_HP();
  C2GS_REQUEST_TERR::default_instance_ = new C2GS_REQUEST_TERR();
  GS2C_REQUEST_TERR_RET::default_instance_ = new GS2C_REQUEST_TERR_RET();
  C2GS_GetMyShadowNum::default_instance_ = new C2GS_GetMyShadowNum();
  GS2C_GetMyShadowNum::default_instance_ = new GS2C_GetMyShadowNum();
  GS2C_Add_Reinforce::default_instance_ = new GS2C_Add_Reinforce();
  Msg_CombatProperty::default_instance_->InitAsDefaultInstance();
  Msg_CombatObj::default_instance_->InitAsDefaultInstance();
  GS2C_Combat_Pre_Begin::default_instance_->InitAsDefaultInstance();
  C2GS_Combat_Begin::default_instance_->InitAsDefaultInstance();
  GS2C_Combat_Begin::default_instance_->InitAsDefaultInstance();
  Tactic_Param::default_instance_->InitAsDefaultInstance();
  C2GS_Combat_Next_Lst::default_instance_->InitAsDefaultInstance();
  GS2C_Combat_Next_Lst::default_instance_->InitAsDefaultInstance();
  GS2C_Combat_Next_Obj::default_instance_->InitAsDefaultInstance();
  GS2C_Combat_Add_Obj::default_instance_->InitAsDefaultInstance();
  GS2C_Combat_Del_Obj::default_instance_->InitAsDefaultInstance();
  C2GS_Combat_Select_Tactic::default_instance_->InitAsDefaultInstance();
  GS2C_Combat_Select_Tactic::default_instance_->InitAsDefaultInstance();
  Combat_Reward::default_instance_->InitAsDefaultInstance();
  Combat_Seque::default_instance_->InitAsDefaultInstance();
  Combat_All_Buff::default_instance_->InitAsDefaultInstance();
  Combat_buff::default_instance_->InitAsDefaultInstance();
  Combat_Damage::default_instance_->InitAsDefaultInstance();
  extra_awards::default_instance_->InitAsDefaultInstance();
  Combat_Buff_Remain::default_instance_->InitAsDefaultInstance();
  Combat_Buff_AllInfo::default_instance_->InitAsDefaultInstance();
  C2GS_Combat_Ani_Finished::default_instance_->InitAsDefaultInstance();
  GS2C_Combat_New_Round::default_instance_->InitAsDefaultInstance();
  GS2C_Combat_Select_Tactic_Single::default_instance_->InitAsDefaultInstance();
  C2GS_Combat_Unwatch::default_instance_->InitAsDefaultInstance();
  GS2C_Combat_End::default_instance_->InitAsDefaultInstance();
  GS2C_Combat_Hero_Dead::default_instance_->InitAsDefaultInstance();
  C2GS_Combat_Attract_Enemy::default_instance_->InitAsDefaultInstance();
  GS2C_Combat_Attract_Enemy::default_instance_->InitAsDefaultInstance();
  C2GS_Combat_Rush::default_instance_->InitAsDefaultInstance();
  GS2C_Rush_Result::default_instance_->InitAsDefaultInstance();
  C2GS_Combat_Runaway::default_instance_->InitAsDefaultInstance();
  GS2C_Combat_Runaway::default_instance_->InitAsDefaultInstance();
  C2GS_Combat_Add_Soldier::default_instance_->InitAsDefaultInstance();
  GS2C_Combat_Add_Soldier::default_instance_->InitAsDefaultInstance();
  C2GS_Combat_Call_Up::default_instance_->InitAsDefaultInstance();
  GS2C_Combat_Call_Up::default_instance_->InitAsDefaultInstance();
  C2GS_Combat_Call_Request::default_instance_->InitAsDefaultInstance();
  GS2C_Combat_Call_Request::default_instance_->InitAsDefaultInstance();
  C2GS_Combat_Speed_Up::default_instance_->InitAsDefaultInstance();
  GS2C_Combat_Speed_Up::default_instance_->InitAsDefaultInstance();
  C2GS_Auto_Combat::default_instance_->InitAsDefaultInstance();
  GS2C_Auto_Combat::default_instance_->InitAsDefaultInstance();
  C2GS_Quick_Combat::default_instance_->InitAsDefaultInstance();
  GS2C_Quick_Combat::default_instance_->InitAsDefaultInstance();
  C2GS_Combat_Hero_Status::default_instance_->InitAsDefaultInstance();
  GS2C_Combat_Hero_Status::default_instance_->InitAsDefaultInstance();
  GxDB_Combat_Crusade::default_instance_->InitAsDefaultInstance();
  GS2C_Combat_Crusade::default_instance_->InitAsDefaultInstance();
  Crusade_HeroInfo::default_instance_->InitAsDefaultInstance();
  GS2C_Combat_Crusade_Pre_Begin::default_instance_->InitAsDefaultInstance();
  C2GS_Combat_Crusade_Add_Hero::default_instance_->InitAsDefaultInstance();
  GS2C_Crusade_Take_Reward_Rsp::default_instance_->InitAsDefaultInstance();
  C2GS_Combat_Crusade_Recover_Times::default_instance_->InitAsDefaultInstance();
  GS2C_Combat_Crusade_Add_Hero::default_instance_->InitAsDefaultInstance();
  C2GS_Combat_Try::default_instance_->InitAsDefaultInstance();
  GS2C_Combat_Try::default_instance_->InitAsDefaultInstance();
  C2GS_Onekey_Recover_HP::default_instance_->InitAsDefaultInstance();
  C2GS_REQUEST_TERR::default_instance_->InitAsDefaultInstance();
  GS2C_REQUEST_TERR_RET::default_instance_->InitAsDefaultInstance();
  C2GS_GetMyShadowNum::default_instance_->InitAsDefaultInstance();
  GS2C_GetMyShadowNum::default_instance_->InitAsDefaultInstance();
  GS2C_Add_Reinforce::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Combat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Combat_2eproto {
  StaticDescriptorInitializer_Combat_2eproto() {
    protobuf_AddDesc_Combat_2eproto();
  }
} static_descriptor_initializer_Combat_2eproto_;
const ::google::protobuf::EnumDescriptor* Msg_ECombatTactic_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_ECombatTactic_descriptor_;
}
bool Msg_ECombatTactic_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Msg_Records_Combat_Gains_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_Records_Combat_Gains_descriptor_;
}
bool Msg_Records_Combat_Gains_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* E_Combat_Serialize_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_Combat_Serialize_descriptor_;
}
bool E_Combat_Serialize_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Msg_return_common_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_return_common_descriptor_;
}
bool Msg_return_common_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_CombatProperty::kTongFieldNumber;
const int Msg_CombatProperty::kYongFieldNumber;
const int Msg_CombatProperty::kAttackFieldNumber;
const int Msg_CombatProperty::kDefenceFieldNumber;
const int Msg_CombatProperty::kSkillAttackFieldNumber;
const int Msg_CombatProperty::kSkillDefenceFieldNumber;
const int Msg_CombatProperty::kAttackExFieldNumber;
const int Msg_CombatProperty::kDefenceExFieldNumber;
const int Msg_CombatProperty::kRowSoldierMaxCntFieldNumber;
#endif  // !_MSC_VER

Msg_CombatProperty::Msg_CombatProperty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_CombatProperty::InitAsDefaultInstance() {
}

Msg_CombatProperty::Msg_CombatProperty(const Msg_CombatProperty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_CombatProperty::SharedCtor() {
  _cached_size_ = 0;
  tong_ = 0u;
  yong_ = 0u;
  attack_ = 0u;
  defence_ = 0u;
  skillattack_ = 0u;
  skilldefence_ = 0u;
  attackex_ = 0u;
  defenceex_ = 0u;
  rowsoldiermaxcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_CombatProperty::~Msg_CombatProperty() {
  SharedDtor();
}

void Msg_CombatProperty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_CombatProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_CombatProperty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_CombatProperty_descriptor_;
}

const Msg_CombatProperty& Msg_CombatProperty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

Msg_CombatProperty* Msg_CombatProperty::default_instance_ = NULL;

Msg_CombatProperty* Msg_CombatProperty::New() const {
  return new Msg_CombatProperty;
}

void Msg_CombatProperty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tong_ = 0u;
    yong_ = 0u;
    attack_ = 0u;
    defence_ = 0u;
    skillattack_ = 0u;
    skilldefence_ = 0u;
    attackex_ = 0u;
    defenceex_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    rowsoldiermaxcnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_CombatProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tong = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tong_)));
          set_has_tong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_yong;
        break;
      }

      // optional uint32 yong = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yong_)));
          set_has_yong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attack;
        break;
      }

      // optional uint32 attack = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_defence;
        break;
      }

      // optional uint32 defence = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defence_)));
          set_has_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_skillAttack;
        break;
      }

      // optional uint32 skillAttack = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillAttack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillattack_)));
          set_has_skillattack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_skillDefence;
        break;
      }

      // optional uint32 skillDefence = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillDefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skilldefence_)));
          set_has_skilldefence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_attackEx;
        break;
      }

      // optional uint32 attackEx = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackEx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attackex_)));
          set_has_attackex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_defenceEx;
        break;
      }

      // optional uint32 defenceEx = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defenceEx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defenceex_)));
          set_has_defenceex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_rowSoldierMaxCnt;
        break;
      }

      // optional uint32 rowSoldierMaxCnt = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rowSoldierMaxCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rowsoldiermaxcnt_)));
          set_has_rowsoldiermaxcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_CombatProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tong = 1;
  if (has_tong()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tong(), output);
  }

  // optional uint32 yong = 2;
  if (has_yong()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->yong(), output);
  }

  // optional uint32 attack = 3;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attack(), output);
  }

  // optional uint32 defence = 4;
  if (has_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->defence(), output);
  }

  // optional uint32 skillAttack = 5;
  if (has_skillattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->skillattack(), output);
  }

  // optional uint32 skillDefence = 6;
  if (has_skilldefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->skilldefence(), output);
  }

  // optional uint32 attackEx = 7;
  if (has_attackex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->attackex(), output);
  }

  // optional uint32 defenceEx = 8;
  if (has_defenceex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->defenceex(), output);
  }

  // optional uint32 rowSoldierMaxCnt = 9;
  if (has_rowsoldiermaxcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->rowsoldiermaxcnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_CombatProperty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tong = 1;
  if (has_tong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tong(), target);
  }

  // optional uint32 yong = 2;
  if (has_yong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->yong(), target);
  }

  // optional uint32 attack = 3;
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attack(), target);
  }

  // optional uint32 defence = 4;
  if (has_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->defence(), target);
  }

  // optional uint32 skillAttack = 5;
  if (has_skillattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->skillattack(), target);
  }

  // optional uint32 skillDefence = 6;
  if (has_skilldefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->skilldefence(), target);
  }

  // optional uint32 attackEx = 7;
  if (has_attackex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->attackex(), target);
  }

  // optional uint32 defenceEx = 8;
  if (has_defenceex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->defenceex(), target);
  }

  // optional uint32 rowSoldierMaxCnt = 9;
  if (has_rowsoldiermaxcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->rowsoldiermaxcnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_CombatProperty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tong = 1;
    if (has_tong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tong());
    }

    // optional uint32 yong = 2;
    if (has_yong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yong());
    }

    // optional uint32 attack = 3;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack());
    }

    // optional uint32 defence = 4;
    if (has_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defence());
    }

    // optional uint32 skillAttack = 5;
    if (has_skillattack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillattack());
    }

    // optional uint32 skillDefence = 6;
    if (has_skilldefence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skilldefence());
    }

    // optional uint32 attackEx = 7;
    if (has_attackex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attackex());
    }

    // optional uint32 defenceEx = 8;
    if (has_defenceex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defenceex());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 rowSoldierMaxCnt = 9;
    if (has_rowsoldiermaxcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rowsoldiermaxcnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_CombatProperty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_CombatProperty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_CombatProperty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_CombatProperty::MergeFrom(const Msg_CombatProperty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tong()) {
      set_tong(from.tong());
    }
    if (from.has_yong()) {
      set_yong(from.yong());
    }
    if (from.has_attack()) {
      set_attack(from.attack());
    }
    if (from.has_defence()) {
      set_defence(from.defence());
    }
    if (from.has_skillattack()) {
      set_skillattack(from.skillattack());
    }
    if (from.has_skilldefence()) {
      set_skilldefence(from.skilldefence());
    }
    if (from.has_attackex()) {
      set_attackex(from.attackex());
    }
    if (from.has_defenceex()) {
      set_defenceex(from.defenceex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rowsoldiermaxcnt()) {
      set_rowsoldiermaxcnt(from.rowsoldiermaxcnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_CombatProperty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_CombatProperty::CopyFrom(const Msg_CombatProperty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_CombatProperty::IsInitialized() const {

  return true;
}

void Msg_CombatProperty::Swap(Msg_CombatProperty* other) {
  if (other != this) {
    std::swap(tong_, other->tong_);
    std::swap(yong_, other->yong_);
    std::swap(attack_, other->attack_);
    std::swap(defence_, other->defence_);
    std::swap(skillattack_, other->skillattack_);
    std::swap(skilldefence_, other->skilldefence_);
    std::swap(attackex_, other->attackex_);
    std::swap(defenceex_, other->defenceex_);
    std::swap(rowsoldiermaxcnt_, other->rowsoldiermaxcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_CombatProperty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_CombatProperty_descriptor_;
  metadata.reflection = Msg_CombatProperty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_CombatObj::kTableIdFieldNumber;
const int Msg_CombatObj::kPlayerIdFieldNumber;
const int Msg_CombatObj::kPlayerNameFieldNumber;
const int Msg_CombatObj::kSoldierCntFieldNumber;
const int Msg_CombatObj::kRowSoldierMaxCntFieldNumber;
const int Msg_CombatObj::kMaxHpFieldNumber;
const int Msg_CombatObj::kLevelFieldNumber;
const int Msg_CombatObj::kCountryFieldNumber;
const int Msg_CombatObj::kIndexInCombatFieldNumber;
const int Msg_CombatObj::kIsShadowFieldNumber;
const int Msg_CombatObj::kIsReinforceFieldNumber;
const int Msg_CombatObj::kIsFakeCharFieldNumber;
#endif  // !_MSC_VER

Msg_CombatObj::Msg_CombatObj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_CombatObj::InitAsDefaultInstance() {
}

Msg_CombatObj::Msg_CombatObj(const Msg_CombatObj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_CombatObj::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0u;
  player_id_ = GOOGLE_ULONGLONG(0);
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rowsoldiermaxcnt_ = 0u;
  maxhp_ = 0u;
  level_ = 0u;
  country_ = 0u;
  indexincombat_ = 0u;
  isshadow_ = false;
  isreinforce_ = false;
  isfakechar_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_CombatObj::~Msg_CombatObj() {
  SharedDtor();
}

void Msg_CombatObj::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (this != default_instance_) {
  }
}

void Msg_CombatObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_CombatObj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_CombatObj_descriptor_;
}

const Msg_CombatObj& Msg_CombatObj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

Msg_CombatObj* Msg_CombatObj::default_instance_ = NULL;

Msg_CombatObj* Msg_CombatObj::New() const {
  return new Msg_CombatObj;
}

void Msg_CombatObj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0u;
    player_id_ = GOOGLE_ULONGLONG(0);
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    rowsoldiermaxcnt_ = 0u;
    maxhp_ = 0u;
    level_ = 0u;
    country_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    indexincombat_ = 0u;
    isshadow_ = false;
    isreinforce_ = false;
    isfakechar_ = false;
  }
  soldiercnt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_CombatObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 tableId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional uint64 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_player_name;
        break;
      }

      // optional string player_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_soldierCnt;
        break;
      }

      // repeated uint32 soldierCnt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soldierCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_soldiercnt())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_soldiercnt())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_soldierCnt;
        if (input->ExpectTag(40)) goto parse_rowSoldierMaxCnt;
        break;
      }

      // optional uint32 rowSoldierMaxCnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rowSoldierMaxCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rowsoldiermaxcnt_)));
          set_has_rowsoldiermaxcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_maxHp;
        break;
      }

      // optional uint32 maxHp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional uint32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_country;
        break;
      }

      // optional uint32 country = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_indexInCombat;
        break;
      }

      // optional uint32 indexInCombat = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_indexInCombat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &indexincombat_)));
          set_has_indexincombat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isShadow;
        break;
      }

      // optional bool isShadow = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isShadow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isshadow_)));
          set_has_isshadow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_isReinforce;
        break;
      }

      // optional bool isReinforce = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isReinforce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isreinforce_)));
          set_has_isreinforce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_isFakeChar;
        break;
      }

      // optional bool isFakeChar = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFakeChar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfakechar_)));
          set_has_isfakechar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_CombatObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 tableId = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tableid(), output);
  }

  // optional uint64 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->player_id(), output);
  }

  // optional string player_name = 3;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->player_name(), output);
  }

  // repeated uint32 soldierCnt = 4;
  for (int i = 0; i < this->soldiercnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->soldiercnt(i), output);
  }

  // optional uint32 rowSoldierMaxCnt = 5;
  if (has_rowsoldiermaxcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rowsoldiermaxcnt(), output);
  }

  // optional uint32 maxHp = 6;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->maxhp(), output);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->level(), output);
  }

  // optional uint32 country = 8;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->country(), output);
  }

  // optional uint32 indexInCombat = 9;
  if (has_indexincombat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->indexincombat(), output);
  }

  // optional bool isShadow = 10;
  if (has_isshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isshadow(), output);
  }

  // optional bool isReinforce = 11;
  if (has_isreinforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->isreinforce(), output);
  }

  // optional bool isFakeChar = 12;
  if (has_isfakechar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->isfakechar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_CombatObj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 tableId = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tableid(), target);
  }

  // optional uint64 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->player_id(), target);
  }

  // optional string player_name = 3;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->player_name(), target);
  }

  // repeated uint32 soldierCnt = 4;
  for (int i = 0; i < this->soldiercnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->soldiercnt(i), target);
  }

  // optional uint32 rowSoldierMaxCnt = 5;
  if (has_rowsoldiermaxcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rowsoldiermaxcnt(), target);
  }

  // optional uint32 maxHp = 6;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->maxhp(), target);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->level(), target);
  }

  // optional uint32 country = 8;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->country(), target);
  }

  // optional uint32 indexInCombat = 9;
  if (has_indexincombat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->indexincombat(), target);
  }

  // optional bool isShadow = 10;
  if (has_isshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isshadow(), target);
  }

  // optional bool isReinforce = 11;
  if (has_isreinforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->isreinforce(), target);
  }

  // optional bool isFakeChar = 12;
  if (has_isfakechar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->isfakechar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_CombatObj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 tableId = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tableid());
    }

    // optional uint64 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional string player_name = 3;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional uint32 rowSoldierMaxCnt = 5;
    if (has_rowsoldiermaxcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rowsoldiermaxcnt());
    }

    // optional uint32 maxHp = 6;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxhp());
    }

    // optional uint32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 country = 8;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 indexInCombat = 9;
    if (has_indexincombat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->indexincombat());
    }

    // optional bool isShadow = 10;
    if (has_isshadow()) {
      total_size += 1 + 1;
    }

    // optional bool isReinforce = 11;
    if (has_isreinforce()) {
      total_size += 1 + 1;
    }

    // optional bool isFakeChar = 12;
    if (has_isfakechar()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 soldierCnt = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->soldiercnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->soldiercnt(i));
    }
    total_size += 1 * this->soldiercnt_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_CombatObj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_CombatObj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_CombatObj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_CombatObj::MergeFrom(const Msg_CombatObj& from) {
  GOOGLE_CHECK_NE(&from, this);
  soldiercnt_.MergeFrom(from.soldiercnt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_rowsoldiermaxcnt()) {
      set_rowsoldiermaxcnt(from.rowsoldiermaxcnt());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_indexincombat()) {
      set_indexincombat(from.indexincombat());
    }
    if (from.has_isshadow()) {
      set_isshadow(from.isshadow());
    }
    if (from.has_isreinforce()) {
      set_isreinforce(from.isreinforce());
    }
    if (from.has_isfakechar()) {
      set_isfakechar(from.isfakechar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_CombatObj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_CombatObj::CopyFrom(const Msg_CombatObj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_CombatObj::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Msg_CombatObj::Swap(Msg_CombatObj* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(player_id_, other->player_id_);
    std::swap(player_name_, other->player_name_);
    soldiercnt_.Swap(&other->soldiercnt_);
    std::swap(rowsoldiermaxcnt_, other->rowsoldiermaxcnt_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(level_, other->level_);
    std::swap(country_, other->country_);
    std::swap(indexincombat_, other->indexincombat_);
    std::swap(isshadow_, other->isshadow_);
    std::swap(isreinforce_, other->isreinforce_);
    std::swap(isfakechar_, other->isfakechar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_CombatObj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_CombatObj_descriptor_;
  metadata.reflection = Msg_CombatObj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Combat_Pre_Begin::kGroupIdFieldNumber;
const int GS2C_Combat_Pre_Begin::kAttackLstFieldNumber;
const int GS2C_Combat_Pre_Begin::kDefenceLstFieldNumber;
const int GS2C_Combat_Pre_Begin::kCombatTypeFieldNumber;
const int GS2C_Combat_Pre_Begin::kAttackCntFieldNumber;
const int GS2C_Combat_Pre_Begin::kDefenceCntFieldNumber;
const int GS2C_Combat_Pre_Begin::kTerrainTypFieldNumber;
const int GS2C_Combat_Pre_Begin::kIsAutoCombatFieldNumber;
#endif  // !_MSC_VER

GS2C_Combat_Pre_Begin::GS2C_Combat_Pre_Begin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Combat_Pre_Begin::InitAsDefaultInstance() {
}

GS2C_Combat_Pre_Begin::GS2C_Combat_Pre_Begin(const GS2C_Combat_Pre_Begin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Combat_Pre_Begin::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  combat_type_ = 0u;
  attack_cnt_ = 0u;
  defence_cnt_ = 0u;
  terraintyp_ = 0u;
  isautocombat_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Combat_Pre_Begin::~GS2C_Combat_Pre_Begin() {
  SharedDtor();
}

void GS2C_Combat_Pre_Begin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Combat_Pre_Begin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Combat_Pre_Begin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Combat_Pre_Begin_descriptor_;
}

const GS2C_Combat_Pre_Begin& GS2C_Combat_Pre_Begin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

GS2C_Combat_Pre_Begin* GS2C_Combat_Pre_Begin::default_instance_ = NULL;

GS2C_Combat_Pre_Begin* GS2C_Combat_Pre_Begin::New() const {
  return new GS2C_Combat_Pre_Begin;
}

void GS2C_Combat_Pre_Begin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
    combat_type_ = 0u;
    attack_cnt_ = 0u;
    defence_cnt_ = 0u;
    terraintyp_ = 0u;
    isautocombat_ = false;
  }
  attack_lst_.Clear();
  defence_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Combat_Pre_Begin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attack_lst;
        break;
      }

      // repeated .pb.Msg_CombatObj attack_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attack_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attack_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attack_lst;
        if (input->ExpectTag(26)) goto parse_defence_lst;
        break;
      }

      // repeated .pb.Msg_CombatObj defence_lst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defence_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_defence_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_defence_lst;
        if (input->ExpectTag(32)) goto parse_combat_type;
        break;
      }

      // optional uint32 combat_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combat_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combat_type_)));
          set_has_combat_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_attack_cnt;
        break;
      }

      // optional uint32 attack_cnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_cnt_)));
          set_has_attack_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_defence_cnt;
        break;
      }

      // optional uint32 defence_cnt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defence_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defence_cnt_)));
          set_has_defence_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_terrainTyp;
        break;
      }

      // optional uint32 terrainTyp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_terrainTyp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terraintyp_)));
          set_has_terraintyp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isAutoCombat;
        break;
      }

      // optional bool isAutoCombat = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAutoCombat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isautocombat_)));
          set_has_isautocombat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Combat_Pre_Begin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // repeated .pb.Msg_CombatObj attack_lst = 2;
  for (int i = 0; i < this->attack_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attack_lst(i), output);
  }

  // repeated .pb.Msg_CombatObj defence_lst = 3;
  for (int i = 0; i < this->defence_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->defence_lst(i), output);
  }

  // optional uint32 combat_type = 4;
  if (has_combat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->combat_type(), output);
  }

  // optional uint32 attack_cnt = 5;
  if (has_attack_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->attack_cnt(), output);
  }

  // optional uint32 defence_cnt = 6;
  if (has_defence_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->defence_cnt(), output);
  }

  // optional uint32 terrainTyp = 7;
  if (has_terraintyp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->terraintyp(), output);
  }

  // optional bool isAutoCombat = 8;
  if (has_isautocombat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isautocombat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Combat_Pre_Begin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // repeated .pb.Msg_CombatObj attack_lst = 2;
  for (int i = 0; i < this->attack_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attack_lst(i), target);
  }

  // repeated .pb.Msg_CombatObj defence_lst = 3;
  for (int i = 0; i < this->defence_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->defence_lst(i), target);
  }

  // optional uint32 combat_type = 4;
  if (has_combat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->combat_type(), target);
  }

  // optional uint32 attack_cnt = 5;
  if (has_attack_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->attack_cnt(), target);
  }

  // optional uint32 defence_cnt = 6;
  if (has_defence_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->defence_cnt(), target);
  }

  // optional uint32 terrainTyp = 7;
  if (has_terraintyp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->terraintyp(), target);
  }

  // optional bool isAutoCombat = 8;
  if (has_isautocombat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isautocombat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Combat_Pre_Begin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional uint32 combat_type = 4;
    if (has_combat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combat_type());
    }

    // optional uint32 attack_cnt = 5;
    if (has_attack_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_cnt());
    }

    // optional uint32 defence_cnt = 6;
    if (has_defence_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defence_cnt());
    }

    // optional uint32 terrainTyp = 7;
    if (has_terraintyp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terraintyp());
    }

    // optional bool isAutoCombat = 8;
    if (has_isautocombat()) {
      total_size += 1 + 1;
    }

  }
  // repeated .pb.Msg_CombatObj attack_lst = 2;
  total_size += 1 * this->attack_lst_size();
  for (int i = 0; i < this->attack_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attack_lst(i));
  }

  // repeated .pb.Msg_CombatObj defence_lst = 3;
  total_size += 1 * this->defence_lst_size();
  for (int i = 0; i < this->defence_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->defence_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Combat_Pre_Begin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Combat_Pre_Begin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Combat_Pre_Begin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Combat_Pre_Begin::MergeFrom(const GS2C_Combat_Pre_Begin& from) {
  GOOGLE_CHECK_NE(&from, this);
  attack_lst_.MergeFrom(from.attack_lst_);
  defence_lst_.MergeFrom(from.defence_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_combat_type()) {
      set_combat_type(from.combat_type());
    }
    if (from.has_attack_cnt()) {
      set_attack_cnt(from.attack_cnt());
    }
    if (from.has_defence_cnt()) {
      set_defence_cnt(from.defence_cnt());
    }
    if (from.has_terraintyp()) {
      set_terraintyp(from.terraintyp());
    }
    if (from.has_isautocombat()) {
      set_isautocombat(from.isautocombat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Combat_Pre_Begin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Combat_Pre_Begin::CopyFrom(const GS2C_Combat_Pre_Begin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Combat_Pre_Begin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < attack_lst_size(); i++) {
    if (!this->attack_lst(i).IsInitialized()) return false;
  }
  for (int i = 0; i < defence_lst_size(); i++) {
    if (!this->defence_lst(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Combat_Pre_Begin::Swap(GS2C_Combat_Pre_Begin* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    attack_lst_.Swap(&other->attack_lst_);
    defence_lst_.Swap(&other->defence_lst_);
    std::swap(combat_type_, other->combat_type_);
    std::swap(attack_cnt_, other->attack_cnt_);
    std::swap(defence_cnt_, other->defence_cnt_);
    std::swap(terraintyp_, other->terraintyp_);
    std::swap(isautocombat_, other->isautocombat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Combat_Pre_Begin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Combat_Pre_Begin_descriptor_;
  metadata.reflection = GS2C_Combat_Pre_Begin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Combat_Begin::kGroupIdFieldNumber;
const int C2GS_Combat_Begin::kAttackLstFieldNumber;
#endif  // !_MSC_VER

C2GS_Combat_Begin::C2GS_Combat_Begin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Combat_Begin::InitAsDefaultInstance() {
}

C2GS_Combat_Begin::C2GS_Combat_Begin(const C2GS_Combat_Begin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Combat_Begin::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Combat_Begin::~C2GS_Combat_Begin() {
  SharedDtor();
}

void C2GS_Combat_Begin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Combat_Begin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Combat_Begin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Combat_Begin_descriptor_;
}

const C2GS_Combat_Begin& C2GS_Combat_Begin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

C2GS_Combat_Begin* C2GS_Combat_Begin::default_instance_ = NULL;

C2GS_Combat_Begin* C2GS_Combat_Begin::New() const {
  return new C2GS_Combat_Begin;
}

void C2GS_Combat_Begin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
  }
  attack_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Combat_Begin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attack_lst;
        break;
      }

      // repeated .pb.Msg_CombatObj attack_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attack_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attack_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attack_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Combat_Begin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // repeated .pb.Msg_CombatObj attack_lst = 2;
  for (int i = 0; i < this->attack_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attack_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Combat_Begin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // repeated .pb.Msg_CombatObj attack_lst = 2;
  for (int i = 0; i < this->attack_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attack_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Combat_Begin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

  }
  // repeated .pb.Msg_CombatObj attack_lst = 2;
  total_size += 1 * this->attack_lst_size();
  for (int i = 0; i < this->attack_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attack_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Combat_Begin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Combat_Begin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Combat_Begin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Combat_Begin::MergeFrom(const C2GS_Combat_Begin& from) {
  GOOGLE_CHECK_NE(&from, this);
  attack_lst_.MergeFrom(from.attack_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Combat_Begin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Combat_Begin::CopyFrom(const C2GS_Combat_Begin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Combat_Begin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < attack_lst_size(); i++) {
    if (!this->attack_lst(i).IsInitialized()) return false;
  }
  return true;
}

void C2GS_Combat_Begin::Swap(C2GS_Combat_Begin* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    attack_lst_.Swap(&other->attack_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Combat_Begin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Combat_Begin_descriptor_;
  metadata.reflection = C2GS_Combat_Begin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Combat_Begin::kGroupIdFieldNumber;
const int GS2C_Combat_Begin::kAttackLstFieldNumber;
const int GS2C_Combat_Begin::kDefenceLstFieldNumber;
const int GS2C_Combat_Begin::kCombatTypeFieldNumber;
const int GS2C_Combat_Begin::kAttackCntFieldNumber;
const int GS2C_Combat_Begin::kDefenceCntFieldNumber;
const int GS2C_Combat_Begin::kChooseTimeFieldNumber;
const int GS2C_Combat_Begin::kOverTimeFieldNumber;
const int GS2C_Combat_Begin::kAttackAllListFieldNumber;
const int GS2C_Combat_Begin::kDefenceAllListFieldNumber;
const int GS2C_Combat_Begin::kTaticParamFieldNumber;
const int GS2C_Combat_Begin::kTerrainTypFieldNumber;
const int GS2C_Combat_Begin::kRoundCountFieldNumber;
const int GS2C_Combat_Begin::kIsAutoCombatFieldNumber;
const int GS2C_Combat_Begin::kAttShadowNumFieldNumber;
const int GS2C_Combat_Begin::kDefShadowNumFieldNumber;
const int GS2C_Combat_Begin::kSoldierBuffLstFieldNumber;
const int GS2C_Combat_Begin::kGenericBuffLstFieldNumber;
#endif  // !_MSC_VER

GS2C_Combat_Begin::GS2C_Combat_Begin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Combat_Begin::InitAsDefaultInstance() {
  tatic_param_ = const_cast< ::pb::Tactic_Param*>(&::pb::Tactic_Param::default_instance());
  soldierbufflst_ = const_cast< ::pb::Combat_All_Buff*>(&::pb::Combat_All_Buff::default_instance());
  genericbufflst_ = const_cast< ::pb::Combat_All_Buff*>(&::pb::Combat_All_Buff::default_instance());
}

GS2C_Combat_Begin::GS2C_Combat_Begin(const GS2C_Combat_Begin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Combat_Begin::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  combat_type_ = 0u;
  attack_cnt_ = 0u;
  defence_cnt_ = 0u;
  choose_time_ = GOOGLE_ULONGLONG(0);
  over_time_ = GOOGLE_ULONGLONG(0);
  tatic_param_ = NULL;
  terraintyp_ = 0u;
  roundcount_ = GOOGLE_ULONGLONG(0);
  isautocombat_ = false;
  attshadownum_ = 0u;
  defshadownum_ = 0u;
  soldierbufflst_ = NULL;
  genericbufflst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Combat_Begin::~GS2C_Combat_Begin() {
  SharedDtor();
}

void GS2C_Combat_Begin::SharedDtor() {
  if (this != default_instance_) {
    delete tatic_param_;
    delete soldierbufflst_;
    delete genericbufflst_;
  }
}

void GS2C_Combat_Begin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Combat_Begin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Combat_Begin_descriptor_;
}

const GS2C_Combat_Begin& GS2C_Combat_Begin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

GS2C_Combat_Begin* GS2C_Combat_Begin::default_instance_ = NULL;

GS2C_Combat_Begin* GS2C_Combat_Begin::New() const {
  return new GS2C_Combat_Begin;
}

void GS2C_Combat_Begin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
    combat_type_ = 0u;
    attack_cnt_ = 0u;
    defence_cnt_ = 0u;
    choose_time_ = GOOGLE_ULONGLONG(0);
    over_time_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (has_tatic_param()) {
      if (tatic_param_ != NULL) tatic_param_->::pb::Tactic_Param::Clear();
    }
    terraintyp_ = 0u;
    roundcount_ = GOOGLE_ULONGLONG(0);
    isautocombat_ = false;
    attshadownum_ = 0u;
    defshadownum_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_soldierbufflst()) {
      if (soldierbufflst_ != NULL) soldierbufflst_->::pb::Combat_All_Buff::Clear();
    }
    if (has_genericbufflst()) {
      if (genericbufflst_ != NULL) genericbufflst_->::pb::Combat_All_Buff::Clear();
    }
  }
  attack_lst_.Clear();
  defence_lst_.Clear();
  attack_all_list_.Clear();
  defence_all_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Combat_Begin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attack_lst;
        break;
      }

      // repeated .pb.Msg_CombatObj attack_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attack_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attack_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attack_lst;
        if (input->ExpectTag(26)) goto parse_defence_lst;
        break;
      }

      // repeated .pb.Msg_CombatObj defence_lst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defence_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_defence_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_defence_lst;
        if (input->ExpectTag(32)) goto parse_combat_type;
        break;
      }

      // optional uint32 combat_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combat_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combat_type_)));
          set_has_combat_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_attack_cnt;
        break;
      }

      // optional uint32 attack_cnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_cnt_)));
          set_has_attack_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_defence_cnt;
        break;
      }

      // optional uint32 defence_cnt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defence_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defence_cnt_)));
          set_has_defence_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_choose_time;
        break;
      }

      // optional uint64 choose_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_choose_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &choose_time_)));
          set_has_choose_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_over_time;
        break;
      }

      // optional uint64 over_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_over_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &over_time_)));
          set_has_over_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_attack_all_list;
        break;
      }

      // repeated .pb.Msg_CombatObj attack_all_list = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attack_all_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attack_all_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_attack_all_list;
        if (input->ExpectTag(82)) goto parse_defence_all_list;
        break;
      }

      // repeated .pb.Msg_CombatObj defence_all_list = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defence_all_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_defence_all_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_defence_all_list;
        if (input->ExpectTag(90)) goto parse_tatic_param;
        break;
      }

      // optional .pb.Tactic_Param tatic_param = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tatic_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tatic_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_terrainTyp;
        break;
      }

      // optional uint32 terrainTyp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_terrainTyp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terraintyp_)));
          set_has_terraintyp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_roundCount;
        break;
      }

      // optional uint64 roundCount = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roundCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roundcount_)));
          set_has_roundcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_isAutoCombat;
        break;
      }

      // optional bool isAutoCombat = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAutoCombat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isautocombat_)));
          set_has_isautocombat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_attShadowNum;
        break;
      }

      // optional uint32 attShadowNum = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attShadowNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attshadownum_)));
          set_has_attshadownum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_defShadowNum;
        break;
      }

      // optional uint32 defShadowNum = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defShadowNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defshadownum_)));
          set_has_defshadownum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_soldierBuffLst;
        break;
      }

      // optional .pb.Combat_All_Buff soldierBuffLst = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soldierBuffLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_soldierbufflst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_genericBuffLst;
        break;
      }

      // optional .pb.Combat_All_Buff genericBuffLst = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_genericBuffLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_genericbufflst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Combat_Begin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // repeated .pb.Msg_CombatObj attack_lst = 2;
  for (int i = 0; i < this->attack_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attack_lst(i), output);
  }

  // repeated .pb.Msg_CombatObj defence_lst = 3;
  for (int i = 0; i < this->defence_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->defence_lst(i), output);
  }

  // optional uint32 combat_type = 4;
  if (has_combat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->combat_type(), output);
  }

  // optional uint32 attack_cnt = 5;
  if (has_attack_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->attack_cnt(), output);
  }

  // optional uint32 defence_cnt = 6;
  if (has_defence_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->defence_cnt(), output);
  }

  // optional uint64 choose_time = 7;
  if (has_choose_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->choose_time(), output);
  }

  // optional uint64 over_time = 8;
  if (has_over_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->over_time(), output);
  }

  // repeated .pb.Msg_CombatObj attack_all_list = 9;
  for (int i = 0; i < this->attack_all_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->attack_all_list(i), output);
  }

  // repeated .pb.Msg_CombatObj defence_all_list = 10;
  for (int i = 0; i < this->defence_all_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->defence_all_list(i), output);
  }

  // optional .pb.Tactic_Param tatic_param = 11;
  if (has_tatic_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->tatic_param(), output);
  }

  // optional uint32 terrainTyp = 12;
  if (has_terraintyp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->terraintyp(), output);
  }

  // optional uint64 roundCount = 13;
  if (has_roundcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->roundcount(), output);
  }

  // optional bool isAutoCombat = 14;
  if (has_isautocombat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->isautocombat(), output);
  }

  // optional uint32 attShadowNum = 15;
  if (has_attshadownum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->attshadownum(), output);
  }

  // optional uint32 defShadowNum = 16;
  if (has_defshadownum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->defshadownum(), output);
  }

  // optional .pb.Combat_All_Buff soldierBuffLst = 17;
  if (has_soldierbufflst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->soldierbufflst(), output);
  }

  // optional .pb.Combat_All_Buff genericBuffLst = 18;
  if (has_genericbufflst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->genericbufflst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Combat_Begin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // repeated .pb.Msg_CombatObj attack_lst = 2;
  for (int i = 0; i < this->attack_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attack_lst(i), target);
  }

  // repeated .pb.Msg_CombatObj defence_lst = 3;
  for (int i = 0; i < this->defence_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->defence_lst(i), target);
  }

  // optional uint32 combat_type = 4;
  if (has_combat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->combat_type(), target);
  }

  // optional uint32 attack_cnt = 5;
  if (has_attack_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->attack_cnt(), target);
  }

  // optional uint32 defence_cnt = 6;
  if (has_defence_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->defence_cnt(), target);
  }

  // optional uint64 choose_time = 7;
  if (has_choose_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->choose_time(), target);
  }

  // optional uint64 over_time = 8;
  if (has_over_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->over_time(), target);
  }

  // repeated .pb.Msg_CombatObj attack_all_list = 9;
  for (int i = 0; i < this->attack_all_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->attack_all_list(i), target);
  }

  // repeated .pb.Msg_CombatObj defence_all_list = 10;
  for (int i = 0; i < this->defence_all_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->defence_all_list(i), target);
  }

  // optional .pb.Tactic_Param tatic_param = 11;
  if (has_tatic_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->tatic_param(), target);
  }

  // optional uint32 terrainTyp = 12;
  if (has_terraintyp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->terraintyp(), target);
  }

  // optional uint64 roundCount = 13;
  if (has_roundcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->roundcount(), target);
  }

  // optional bool isAutoCombat = 14;
  if (has_isautocombat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->isautocombat(), target);
  }

  // optional uint32 attShadowNum = 15;
  if (has_attshadownum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->attshadownum(), target);
  }

  // optional uint32 defShadowNum = 16;
  if (has_defshadownum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->defshadownum(), target);
  }

  // optional .pb.Combat_All_Buff soldierBuffLst = 17;
  if (has_soldierbufflst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->soldierbufflst(), target);
  }

  // optional .pb.Combat_All_Buff genericBuffLst = 18;
  if (has_genericbufflst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->genericbufflst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Combat_Begin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional uint32 combat_type = 4;
    if (has_combat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combat_type());
    }

    // optional uint32 attack_cnt = 5;
    if (has_attack_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_cnt());
    }

    // optional uint32 defence_cnt = 6;
    if (has_defence_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defence_cnt());
    }

    // optional uint64 choose_time = 7;
    if (has_choose_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->choose_time());
    }

    // optional uint64 over_time = 8;
    if (has_over_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->over_time());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional .pb.Tactic_Param tatic_param = 11;
    if (has_tatic_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tatic_param());
    }

    // optional uint32 terrainTyp = 12;
    if (has_terraintyp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terraintyp());
    }

    // optional uint64 roundCount = 13;
    if (has_roundcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roundcount());
    }

    // optional bool isAutoCombat = 14;
    if (has_isautocombat()) {
      total_size += 1 + 1;
    }

    // optional uint32 attShadowNum = 15;
    if (has_attshadownum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attshadownum());
    }

    // optional uint32 defShadowNum = 16;
    if (has_defshadownum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defshadownum());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .pb.Combat_All_Buff soldierBuffLst = 17;
    if (has_soldierbufflst()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->soldierbufflst());
    }

    // optional .pb.Combat_All_Buff genericBuffLst = 18;
    if (has_genericbufflst()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->genericbufflst());
    }

  }
  // repeated .pb.Msg_CombatObj attack_lst = 2;
  total_size += 1 * this->attack_lst_size();
  for (int i = 0; i < this->attack_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attack_lst(i));
  }

  // repeated .pb.Msg_CombatObj defence_lst = 3;
  total_size += 1 * this->defence_lst_size();
  for (int i = 0; i < this->defence_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->defence_lst(i));
  }

  // repeated .pb.Msg_CombatObj attack_all_list = 9;
  total_size += 1 * this->attack_all_list_size();
  for (int i = 0; i < this->attack_all_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attack_all_list(i));
  }

  // repeated .pb.Msg_CombatObj defence_all_list = 10;
  total_size += 1 * this->defence_all_list_size();
  for (int i = 0; i < this->defence_all_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->defence_all_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Combat_Begin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Combat_Begin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Combat_Begin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Combat_Begin::MergeFrom(const GS2C_Combat_Begin& from) {
  GOOGLE_CHECK_NE(&from, this);
  attack_lst_.MergeFrom(from.attack_lst_);
  defence_lst_.MergeFrom(from.defence_lst_);
  attack_all_list_.MergeFrom(from.attack_all_list_);
  defence_all_list_.MergeFrom(from.defence_all_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_combat_type()) {
      set_combat_type(from.combat_type());
    }
    if (from.has_attack_cnt()) {
      set_attack_cnt(from.attack_cnt());
    }
    if (from.has_defence_cnt()) {
      set_defence_cnt(from.defence_cnt());
    }
    if (from.has_choose_time()) {
      set_choose_time(from.choose_time());
    }
    if (from.has_over_time()) {
      set_over_time(from.over_time());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_tatic_param()) {
      mutable_tatic_param()->::pb::Tactic_Param::MergeFrom(from.tatic_param());
    }
    if (from.has_terraintyp()) {
      set_terraintyp(from.terraintyp());
    }
    if (from.has_roundcount()) {
      set_roundcount(from.roundcount());
    }
    if (from.has_isautocombat()) {
      set_isautocombat(from.isautocombat());
    }
    if (from.has_attshadownum()) {
      set_attshadownum(from.attshadownum());
    }
    if (from.has_defshadownum()) {
      set_defshadownum(from.defshadownum());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_soldierbufflst()) {
      mutable_soldierbufflst()->::pb::Combat_All_Buff::MergeFrom(from.soldierbufflst());
    }
    if (from.has_genericbufflst()) {
      mutable_genericbufflst()->::pb::Combat_All_Buff::MergeFrom(from.genericbufflst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Combat_Begin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Combat_Begin::CopyFrom(const GS2C_Combat_Begin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Combat_Begin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < attack_lst_size(); i++) {
    if (!this->attack_lst(i).IsInitialized()) return false;
  }
  for (int i = 0; i < defence_lst_size(); i++) {
    if (!this->defence_lst(i).IsInitialized()) return false;
  }
  for (int i = 0; i < attack_all_list_size(); i++) {
    if (!this->attack_all_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < defence_all_list_size(); i++) {
    if (!this->defence_all_list(i).IsInitialized()) return false;
  }
  if (has_soldierbufflst()) {
    if (!this->soldierbufflst().IsInitialized()) return false;
  }
  if (has_genericbufflst()) {
    if (!this->genericbufflst().IsInitialized()) return false;
  }
  return true;
}

void GS2C_Combat_Begin::Swap(GS2C_Combat_Begin* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    attack_lst_.Swap(&other->attack_lst_);
    defence_lst_.Swap(&other->defence_lst_);
    std::swap(combat_type_, other->combat_type_);
    std::swap(attack_cnt_, other->attack_cnt_);
    std::swap(defence_cnt_, other->defence_cnt_);
    std::swap(choose_time_, other->choose_time_);
    std::swap(over_time_, other->over_time_);
    attack_all_list_.Swap(&other->attack_all_list_);
    defence_all_list_.Swap(&other->defence_all_list_);
    std::swap(tatic_param_, other->tatic_param_);
    std::swap(terraintyp_, other->terraintyp_);
    std::swap(roundcount_, other->roundcount_);
    std::swap(isautocombat_, other->isautocombat_);
    std::swap(attshadownum_, other->attshadownum_);
    std::swap(defshadownum_, other->defshadownum_);
    std::swap(soldierbufflst_, other->soldierbufflst_);
    std::swap(genericbufflst_, other->genericbufflst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Combat_Begin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Combat_Begin_descriptor_;
  metadata.reflection = GS2C_Combat_Begin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tactic_Param::kAttTacticEnableStrFieldNumber;
const int Tactic_Param::kDefTacticEnableStrFieldNumber;
const int Tactic_Param::kAttTacticRealStrFieldNumber;
const int Tactic_Param::kDefTacticRealStrFieldNumber;
#endif  // !_MSC_VER

Tactic_Param::Tactic_Param()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tactic_Param::InitAsDefaultInstance() {
}

Tactic_Param::Tactic_Param(const Tactic_Param& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tactic_Param::SharedCtor() {
  _cached_size_ = 0;
  atttacticenablestr_ = 0u;
  deftacticenablestr_ = 0u;
  atttacticrealstr_ = 0u;
  deftacticrealstr_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tactic_Param::~Tactic_Param() {
  SharedDtor();
}

void Tactic_Param::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tactic_Param::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tactic_Param::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tactic_Param_descriptor_;
}

const Tactic_Param& Tactic_Param::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

Tactic_Param* Tactic_Param::default_instance_ = NULL;

Tactic_Param* Tactic_Param::New() const {
  return new Tactic_Param;
}

void Tactic_Param::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    atttacticenablestr_ = 0u;
    deftacticenablestr_ = 0u;
    atttacticrealstr_ = 0u;
    deftacticrealstr_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tactic_Param::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 attTacticEnableStr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atttacticenablestr_)));
          set_has_atttacticenablestr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_defTacticEnableStr;
        break;
      }

      // optional uint32 defTacticEnableStr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defTacticEnableStr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deftacticenablestr_)));
          set_has_deftacticenablestr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attTacticRealStr;
        break;
      }

      // optional uint32 attTacticRealStr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attTacticRealStr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atttacticrealstr_)));
          set_has_atttacticrealstr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_defTacticRealStr;
        break;
      }

      // optional uint32 defTacticRealStr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defTacticRealStr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deftacticrealstr_)));
          set_has_deftacticrealstr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tactic_Param::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 attTacticEnableStr = 1;
  if (has_atttacticenablestr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->atttacticenablestr(), output);
  }

  // optional uint32 defTacticEnableStr = 2;
  if (has_deftacticenablestr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->deftacticenablestr(), output);
  }

  // optional uint32 attTacticRealStr = 3;
  if (has_atttacticrealstr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->atttacticrealstr(), output);
  }

  // optional uint32 defTacticRealStr = 4;
  if (has_deftacticrealstr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->deftacticrealstr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tactic_Param::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 attTacticEnableStr = 1;
  if (has_atttacticenablestr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->atttacticenablestr(), target);
  }

  // optional uint32 defTacticEnableStr = 2;
  if (has_deftacticenablestr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->deftacticenablestr(), target);
  }

  // optional uint32 attTacticRealStr = 3;
  if (has_atttacticrealstr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->atttacticrealstr(), target);
  }

  // optional uint32 defTacticRealStr = 4;
  if (has_deftacticrealstr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->deftacticrealstr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tactic_Param::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 attTacticEnableStr = 1;
    if (has_atttacticenablestr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atttacticenablestr());
    }

    // optional uint32 defTacticEnableStr = 2;
    if (has_deftacticenablestr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deftacticenablestr());
    }

    // optional uint32 attTacticRealStr = 3;
    if (has_atttacticrealstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atttacticrealstr());
    }

    // optional uint32 defTacticRealStr = 4;
    if (has_deftacticrealstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deftacticrealstr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tactic_Param::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tactic_Param* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tactic_Param*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tactic_Param::MergeFrom(const Tactic_Param& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_atttacticenablestr()) {
      set_atttacticenablestr(from.atttacticenablestr());
    }
    if (from.has_deftacticenablestr()) {
      set_deftacticenablestr(from.deftacticenablestr());
    }
    if (from.has_atttacticrealstr()) {
      set_atttacticrealstr(from.atttacticrealstr());
    }
    if (from.has_deftacticrealstr()) {
      set_deftacticrealstr(from.deftacticrealstr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tactic_Param::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tactic_Param::CopyFrom(const Tactic_Param& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tactic_Param::IsInitialized() const {

  return true;
}

void Tactic_Param::Swap(Tactic_Param* other) {
  if (other != this) {
    std::swap(atttacticenablestr_, other->atttacticenablestr_);
    std::swap(deftacticenablestr_, other->deftacticenablestr_);
    std::swap(atttacticrealstr_, other->atttacticrealstr_);
    std::swap(deftacticrealstr_, other->deftacticrealstr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tactic_Param::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tactic_Param_descriptor_;
  metadata.reflection = Tactic_Param_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Combat_Next_Lst::kGroupIdFieldNumber;
const int C2GS_Combat_Next_Lst::kIndexInCombatFieldNumber;
const int C2GS_Combat_Next_Lst::kIsAttackerFieldNumber;
#endif  // !_MSC_VER

C2GS_Combat_Next_Lst::C2GS_Combat_Next_Lst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Combat_Next_Lst::InitAsDefaultInstance() {
}

C2GS_Combat_Next_Lst::C2GS_Combat_Next_Lst(const C2GS_Combat_Next_Lst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Combat_Next_Lst::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  indexincombat_ = 0u;
  is_attacker_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Combat_Next_Lst::~C2GS_Combat_Next_Lst() {
  SharedDtor();
}

void C2GS_Combat_Next_Lst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Combat_Next_Lst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Combat_Next_Lst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Combat_Next_Lst_descriptor_;
}

const C2GS_Combat_Next_Lst& C2GS_Combat_Next_Lst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

C2GS_Combat_Next_Lst* C2GS_Combat_Next_Lst::default_instance_ = NULL;

C2GS_Combat_Next_Lst* C2GS_Combat_Next_Lst::New() const {
  return new C2GS_Combat_Next_Lst;
}

void C2GS_Combat_Next_Lst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
    indexincombat_ = 0u;
    is_attacker_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Combat_Next_Lst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_indexInCombat;
        break;
      }

      // required uint32 indexInCombat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_indexInCombat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &indexincombat_)));
          set_has_indexincombat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_attacker;
        break;
      }

      // required bool is_attacker = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_attacker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attacker_)));
          set_has_is_attacker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Combat_Next_Lst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // required uint32 indexInCombat = 2;
  if (has_indexincombat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->indexincombat(), output);
  }

  // required bool is_attacker = 3;
  if (has_is_attacker()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_attacker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Combat_Next_Lst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // required uint32 indexInCombat = 2;
  if (has_indexincombat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->indexincombat(), target);
  }

  // required bool is_attacker = 3;
  if (has_is_attacker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_attacker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Combat_Next_Lst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 indexInCombat = 2;
    if (has_indexincombat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->indexincombat());
    }

    // required bool is_attacker = 3;
    if (has_is_attacker()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Combat_Next_Lst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Combat_Next_Lst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Combat_Next_Lst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Combat_Next_Lst::MergeFrom(const C2GS_Combat_Next_Lst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_indexincombat()) {
      set_indexincombat(from.indexincombat());
    }
    if (from.has_is_attacker()) {
      set_is_attacker(from.is_attacker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Combat_Next_Lst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Combat_Next_Lst::CopyFrom(const C2GS_Combat_Next_Lst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Combat_Next_Lst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void C2GS_Combat_Next_Lst::Swap(C2GS_Combat_Next_Lst* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(indexincombat_, other->indexincombat_);
    std::swap(is_attacker_, other->is_attacker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Combat_Next_Lst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Combat_Next_Lst_descriptor_;
  metadata.reflection = C2GS_Combat_Next_Lst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Combat_Next_Lst::kAttackAllListFieldNumber;
const int GS2C_Combat_Next_Lst::kDefenceAllListFieldNumber;
const int GS2C_Combat_Next_Lst::kGroupIdFieldNumber;
#endif  // !_MSC_VER

GS2C_Combat_Next_Lst::GS2C_Combat_Next_Lst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Combat_Next_Lst::InitAsDefaultInstance() {
}

GS2C_Combat_Next_Lst::GS2C_Combat_Next_Lst(const GS2C_Combat_Next_Lst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Combat_Next_Lst::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Combat_Next_Lst::~GS2C_Combat_Next_Lst() {
  SharedDtor();
}

void GS2C_Combat_Next_Lst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Combat_Next_Lst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Combat_Next_Lst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Combat_Next_Lst_descriptor_;
}

const GS2C_Combat_Next_Lst& GS2C_Combat_Next_Lst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

GS2C_Combat_Next_Lst* GS2C_Combat_Next_Lst::default_instance_ = NULL;

GS2C_Combat_Next_Lst* GS2C_Combat_Next_Lst::New() const {
  return new GS2C_Combat_Next_Lst;
}

void GS2C_Combat_Next_Lst::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    group_id_ = 0u;
  }
  attack_all_list_.Clear();
  defence_all_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Combat_Next_Lst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Msg_CombatObj attack_all_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attack_all_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attack_all_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attack_all_list;
        if (input->ExpectTag(18)) goto parse_defence_all_list;
        break;
      }

      // repeated .pb.Msg_CombatObj defence_all_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defence_all_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_defence_all_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_defence_all_list;
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // optional uint32 group_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Combat_Next_Lst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.Msg_CombatObj attack_all_list = 1;
  for (int i = 0; i < this->attack_all_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attack_all_list(i), output);
  }

  // repeated .pb.Msg_CombatObj defence_all_list = 2;
  for (int i = 0; i < this->defence_all_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->defence_all_list(i), output);
  }

  // optional uint32 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Combat_Next_Lst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.Msg_CombatObj attack_all_list = 1;
  for (int i = 0; i < this->attack_all_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attack_all_list(i), target);
  }

  // repeated .pb.Msg_CombatObj defence_all_list = 2;
  for (int i = 0; i < this->defence_all_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->defence_all_list(i), target);
  }

  // optional uint32 group_id = 3;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Combat_Next_Lst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

  }
  // repeated .pb.Msg_CombatObj attack_all_list = 1;
  total_size += 1 * this->attack_all_list_size();
  for (int i = 0; i < this->attack_all_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attack_all_list(i));
  }

  // repeated .pb.Msg_CombatObj defence_all_list = 2;
  total_size += 1 * this->defence_all_list_size();
  for (int i = 0; i < this->defence_all_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->defence_all_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Combat_Next_Lst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Combat_Next_Lst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Combat_Next_Lst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Combat_Next_Lst::MergeFrom(const GS2C_Combat_Next_Lst& from) {
  GOOGLE_CHECK_NE(&from, this);
  attack_all_list_.MergeFrom(from.attack_all_list_);
  defence_all_list_.MergeFrom(from.defence_all_list_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Combat_Next_Lst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Combat_Next_Lst::CopyFrom(const GS2C_Combat_Next_Lst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Combat_Next_Lst::IsInitialized() const {

  for (int i = 0; i < attack_all_list_size(); i++) {
    if (!this->attack_all_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < defence_all_list_size(); i++) {
    if (!this->defence_all_list(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Combat_Next_Lst::Swap(GS2C_Combat_Next_Lst* other) {
  if (other != this) {
    attack_all_list_.Swap(&other->attack_all_list_);
    defence_all_list_.Swap(&other->defence_all_list_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Combat_Next_Lst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Combat_Next_Lst_descriptor_;
  metadata.reflection = GS2C_Combat_Next_Lst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Combat_Next_Obj::kGroupIdFieldNumber;
const int GS2C_Combat_Next_Obj::kAttackFieldNumber;
const int GS2C_Combat_Next_Obj::kDefenceFieldNumber;
#endif  // !_MSC_VER

GS2C_Combat_Next_Obj::GS2C_Combat_Next_Obj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Combat_Next_Obj::InitAsDefaultInstance() {
  attack_ = const_cast< ::pb::Msg_CombatObj*>(&::pb::Msg_CombatObj::default_instance());
  defence_ = const_cast< ::pb::Msg_CombatObj*>(&::pb::Msg_CombatObj::default_instance());
}

GS2C_Combat_Next_Obj::GS2C_Combat_Next_Obj(const GS2C_Combat_Next_Obj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Combat_Next_Obj::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  attack_ = NULL;
  defence_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Combat_Next_Obj::~GS2C_Combat_Next_Obj() {
  SharedDtor();
}

void GS2C_Combat_Next_Obj::SharedDtor() {
  if (this != default_instance_) {
    delete attack_;
    delete defence_;
  }
}

void GS2C_Combat_Next_Obj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Combat_Next_Obj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Combat_Next_Obj_descriptor_;
}

const GS2C_Combat_Next_Obj& GS2C_Combat_Next_Obj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

GS2C_Combat_Next_Obj* GS2C_Combat_Next_Obj::default_instance_ = NULL;

GS2C_Combat_Next_Obj* GS2C_Combat_Next_Obj::New() const {
  return new GS2C_Combat_Next_Obj;
}

void GS2C_Combat_Next_Obj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
    if (has_attack()) {
      if (attack_ != NULL) attack_->::pb::Msg_CombatObj::Clear();
    }
    if (has_defence()) {
      if (defence_ != NULL) defence_->::pb::Msg_CombatObj::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Combat_Next_Obj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attack;
        break;
      }

      // optional .pb.Msg_CombatObj attack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_defence;
        break;
      }

      // optional .pb.Msg_CombatObj defence = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defence()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Combat_Next_Obj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // optional .pb.Msg_CombatObj attack = 2;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attack(), output);
  }

  // optional .pb.Msg_CombatObj defence = 3;
  if (has_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->defence(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Combat_Next_Obj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // optional .pb.Msg_CombatObj attack = 2;
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attack(), target);
  }

  // optional .pb.Msg_CombatObj defence = 3;
  if (has_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->defence(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Combat_Next_Obj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional .pb.Msg_CombatObj attack = 2;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attack());
    }

    // optional .pb.Msg_CombatObj defence = 3;
    if (has_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defence());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Combat_Next_Obj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Combat_Next_Obj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Combat_Next_Obj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Combat_Next_Obj::MergeFrom(const GS2C_Combat_Next_Obj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_attack()) {
      mutable_attack()->::pb::Msg_CombatObj::MergeFrom(from.attack());
    }
    if (from.has_defence()) {
      mutable_defence()->::pb::Msg_CombatObj::MergeFrom(from.defence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Combat_Next_Obj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Combat_Next_Obj::CopyFrom(const GS2C_Combat_Next_Obj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Combat_Next_Obj::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_attack()) {
    if (!this->attack().IsInitialized()) return false;
  }
  if (has_defence()) {
    if (!this->defence().IsInitialized()) return false;
  }
  return true;
}

void GS2C_Combat_Next_Obj::Swap(GS2C_Combat_Next_Obj* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(attack_, other->attack_);
    std::swap(defence_, other->defence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Combat_Next_Obj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Combat_Next_Obj_descriptor_;
  metadata.reflection = GS2C_Combat_Next_Obj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Combat_Add_Obj::kGroupIdFieldNumber;
const int GS2C_Combat_Add_Obj::kTableIdFieldNumber;
const int GS2C_Combat_Add_Obj::kPlayerIdFieldNumber;
const int GS2C_Combat_Add_Obj::kPlayerNameFieldNumber;
const int GS2C_Combat_Add_Obj::kIsAttackerFieldNumber;
const int GS2C_Combat_Add_Obj::kIsShadowFieldNumber;
const int GS2C_Combat_Add_Obj::kCountryIdFieldNumber;
const int GS2C_Combat_Add_Obj::kIndexInCombatFieldNumber;
const int GS2C_Combat_Add_Obj::kListLenghFieldNumber;
#endif  // !_MSC_VER

GS2C_Combat_Add_Obj::GS2C_Combat_Add_Obj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Combat_Add_Obj::InitAsDefaultInstance() {
}

GS2C_Combat_Add_Obj::GS2C_Combat_Add_Obj(const GS2C_Combat_Add_Obj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Combat_Add_Obj::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  tableid_ = 0u;
  player_id_ = GOOGLE_ULONGLONG(0);
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_attacker_ = false;
  is_shadow_ = false;
  country_id_ = 0u;
  indexincombat_ = 0u;
  listlengh_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Combat_Add_Obj::~GS2C_Combat_Add_Obj() {
  SharedDtor();
}

void GS2C_Combat_Add_Obj::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (this != default_instance_) {
  }
}

void GS2C_Combat_Add_Obj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Combat_Add_Obj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Combat_Add_Obj_descriptor_;
}

const GS2C_Combat_Add_Obj& GS2C_Combat_Add_Obj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

GS2C_Combat_Add_Obj* GS2C_Combat_Add_Obj::default_instance_ = NULL;

GS2C_Combat_Add_Obj* GS2C_Combat_Add_Obj::New() const {
  return new GS2C_Combat_Add_Obj;
}

void GS2C_Combat_Add_Obj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
    tableid_ = 0u;
    player_id_ = GOOGLE_ULONGLONG(0);
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    is_attacker_ = false;
    is_shadow_ = false;
    country_id_ = 0u;
    indexincombat_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    listlengh_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Combat_Add_Obj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tableId;
        break;
      }

      // required uint32 tableId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tableId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_id;
        break;
      }

      // optional uint64 player_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player_name;
        break;
      }

      // optional string player_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_attacker;
        break;
      }

      // required bool is_attacker = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_attacker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attacker_)));
          set_has_is_attacker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_shadow;
        break;
      }

      // optional bool is_shadow = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_shadow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_shadow_)));
          set_has_is_shadow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_country_id;
        break;
      }

      // optional uint32 country_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_id_)));
          set_has_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_indexInCombat;
        break;
      }

      // optional uint32 indexInCombat = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_indexInCombat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &indexincombat_)));
          set_has_indexincombat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_listLengh;
        break;
      }

      // optional uint32 listLengh = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_listLengh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &listlengh_)));
          set_has_listlengh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Combat_Add_Obj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // required uint32 tableId = 2;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tableid(), output);
  }

  // optional uint64 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->player_id(), output);
  }

  // optional string player_name = 4;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->player_name(), output);
  }

  // required bool is_attacker = 5;
  if (has_is_attacker()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_attacker(), output);
  }

  // optional bool is_shadow = 6;
  if (has_is_shadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_shadow(), output);
  }

  // optional uint32 country_id = 7;
  if (has_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->country_id(), output);
  }

  // optional uint32 indexInCombat = 8;
  if (has_indexincombat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->indexincombat(), output);
  }

  // optional uint32 listLengh = 9;
  if (has_listlengh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->listlengh(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Combat_Add_Obj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // required uint32 tableId = 2;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tableid(), target);
  }

  // optional uint64 player_id = 3;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->player_id(), target);
  }

  // optional string player_name = 4;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->player_name(), target);
  }

  // required bool is_attacker = 5;
  if (has_is_attacker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_attacker(), target);
  }

  // optional bool is_shadow = 6;
  if (has_is_shadow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_shadow(), target);
  }

  // optional uint32 country_id = 7;
  if (has_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->country_id(), target);
  }

  // optional uint32 indexInCombat = 8;
  if (has_indexincombat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->indexincombat(), target);
  }

  // optional uint32 listLengh = 9;
  if (has_listlengh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->listlengh(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Combat_Add_Obj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 tableId = 2;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tableid());
    }

    // optional uint64 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional string player_name = 4;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // required bool is_attacker = 5;
    if (has_is_attacker()) {
      total_size += 1 + 1;
    }

    // optional bool is_shadow = 6;
    if (has_is_shadow()) {
      total_size += 1 + 1;
    }

    // optional uint32 country_id = 7;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_id());
    }

    // optional uint32 indexInCombat = 8;
    if (has_indexincombat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->indexincombat());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 listLengh = 9;
    if (has_listlengh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->listlengh());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Combat_Add_Obj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Combat_Add_Obj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Combat_Add_Obj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Combat_Add_Obj::MergeFrom(const GS2C_Combat_Add_Obj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_is_attacker()) {
      set_is_attacker(from.is_attacker());
    }
    if (from.has_is_shadow()) {
      set_is_shadow(from.is_shadow());
    }
    if (from.has_country_id()) {
      set_country_id(from.country_id());
    }
    if (from.has_indexincombat()) {
      set_indexincombat(from.indexincombat());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_listlengh()) {
      set_listlengh(from.listlengh());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Combat_Add_Obj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Combat_Add_Obj::CopyFrom(const GS2C_Combat_Add_Obj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Combat_Add_Obj::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  return true;
}

void GS2C_Combat_Add_Obj::Swap(GS2C_Combat_Add_Obj* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(tableid_, other->tableid_);
    std::swap(player_id_, other->player_id_);
    std::swap(player_name_, other->player_name_);
    std::swap(is_attacker_, other->is_attacker_);
    std::swap(is_shadow_, other->is_shadow_);
    std::swap(country_id_, other->country_id_);
    std::swap(indexincombat_, other->indexincombat_);
    std::swap(listlengh_, other->listlengh_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Combat_Add_Obj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Combat_Add_Obj_descriptor_;
  metadata.reflection = GS2C_Combat_Add_Obj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Combat_Del_Obj::kGroupIdFieldNumber;
const int GS2C_Combat_Del_Obj::kAttackFieldNumber;
const int GS2C_Combat_Del_Obj::kDefenceFieldNumber;
const int GS2C_Combat_Del_Obj::kIndexInCombatFieldNumber;
const int GS2C_Combat_Del_Obj::kListLenghFieldNumber;
#endif  // !_MSC_VER

GS2C_Combat_Del_Obj::GS2C_Combat_Del_Obj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Combat_Del_Obj::InitAsDefaultInstance() {
}

GS2C_Combat_Del_Obj::GS2C_Combat_Del_Obj(const GS2C_Combat_Del_Obj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Combat_Del_Obj::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  indexincombat_ = 0u;
  listlengh_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Combat_Del_Obj::~GS2C_Combat_Del_Obj() {
  SharedDtor();
}

void GS2C_Combat_Del_Obj::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Combat_Del_Obj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Combat_Del_Obj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Combat_Del_Obj_descriptor_;
}

const GS2C_Combat_Del_Obj& GS2C_Combat_Del_Obj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

GS2C_Combat_Del_Obj* GS2C_Combat_Del_Obj::default_instance_ = NULL;

GS2C_Combat_Del_Obj* GS2C_Combat_Del_Obj::New() const {
  return new GS2C_Combat_Del_Obj;
}

void GS2C_Combat_Del_Obj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
    indexincombat_ = 0u;
    listlengh_ = 0u;
  }
  attack_.Clear();
  defence_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Combat_Del_Obj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attack;
        break;
      }

      // repeated .pb.PairValueUint64 attack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attack;
        if (input->ExpectTag(26)) goto parse_defence;
        break;
      }

      // repeated .pb.PairValueUint64 defence = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_defence()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_defence;
        if (input->ExpectTag(32)) goto parse_indexInCombat;
        break;
      }

      // optional uint32 indexInCombat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_indexInCombat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &indexincombat_)));
          set_has_indexincombat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_listLengh;
        break;
      }

      // optional uint32 listLengh = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_listLengh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &listlengh_)));
          set_has_listlengh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Combat_Del_Obj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // repeated .pb.PairValueUint64 attack = 2;
  for (int i = 0; i < this->attack_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attack(i), output);
  }

  // repeated .pb.PairValueUint64 defence = 3;
  for (int i = 0; i < this->defence_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->defence(i), output);
  }

  // optional uint32 indexInCombat = 4;
  if (has_indexincombat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->indexincombat(), output);
  }

  // optional uint32 listLengh = 5;
  if (has_listlengh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->listlengh(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Combat_Del_Obj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // repeated .pb.PairValueUint64 attack = 2;
  for (int i = 0; i < this->attack_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attack(i), target);
  }

  // repeated .pb.PairValueUint64 defence = 3;
  for (int i = 0; i < this->defence_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->defence(i), target);
  }

  // optional uint32 indexInCombat = 4;
  if (has_indexincombat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->indexincombat(), target);
  }

  // optional uint32 listLengh = 5;
  if (has_listlengh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->listlengh(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Combat_Del_Obj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional uint32 indexInCombat = 4;
    if (has_indexincombat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->indexincombat());
    }

    // optional uint32 listLengh = 5;
    if (has_listlengh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->listlengh());
    }

  }
  // repeated .pb.PairValueUint64 attack = 2;
  total_size += 1 * this->attack_size();
  for (int i = 0; i < this->attack_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attack(i));
  }

  // repeated .pb.PairValueUint64 defence = 3;
  total_size += 1 * this->defence_size();
  for (int i = 0; i < this->defence_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->defence(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Combat_Del_Obj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Combat_Del_Obj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Combat_Del_Obj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Combat_Del_Obj::MergeFrom(const GS2C_Combat_Del_Obj& from) {
  GOOGLE_CHECK_NE(&from, this);
  attack_.MergeFrom(from.attack_);
  defence_.MergeFrom(from.defence_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_indexincombat()) {
      set_indexincombat(from.indexincombat());
    }
    if (from.has_listlengh()) {
      set_listlengh(from.listlengh());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Combat_Del_Obj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Combat_Del_Obj::CopyFrom(const GS2C_Combat_Del_Obj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Combat_Del_Obj::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Combat_Del_Obj::Swap(GS2C_Combat_Del_Obj* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    attack_.Swap(&other->attack_);
    defence_.Swap(&other->defence_);
    std::swap(indexincombat_, other->indexincombat_);
    std::swap(listlengh_, other->listlengh_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Combat_Del_Obj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Combat_Del_Obj_descriptor_;
  metadata.reflection = GS2C_Combat_Del_Obj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Combat_Select_Tactic::kGroupIdFieldNumber;
const int C2GS_Combat_Select_Tactic::kIsAttackerFieldNumber;
const int C2GS_Combat_Select_Tactic::kHeroIdFieldNumber;
const int C2GS_Combat_Select_Tactic::kTypeFieldNumber;
const int C2GS_Combat_Select_Tactic::kRoundCountFieldNumber;
#endif  // !_MSC_VER

C2GS_Combat_Select_Tactic::C2GS_Combat_Select_Tactic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Combat_Select_Tactic::InitAsDefaultInstance() {
}

C2GS_Combat_Select_Tactic::C2GS_Combat_Select_Tactic(const C2GS_Combat_Select_Tactic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Combat_Select_Tactic::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  is_attacker_ = false;
  hero_id_ = 0u;
  type_ = 0;
  roundcount_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Combat_Select_Tactic::~C2GS_Combat_Select_Tactic() {
  SharedDtor();
}

void C2GS_Combat_Select_Tactic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Combat_Select_Tactic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Combat_Select_Tactic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Combat_Select_Tactic_descriptor_;
}

const C2GS_Combat_Select_Tactic& C2GS_Combat_Select_Tactic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

C2GS_Combat_Select_Tactic* C2GS_Combat_Select_Tactic::default_instance_ = NULL;

C2GS_Combat_Select_Tactic* C2GS_Combat_Select_Tactic::New() const {
  return new C2GS_Combat_Select_Tactic;
}

void C2GS_Combat_Select_Tactic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
    is_attacker_ = false;
    hero_id_ = 0u;
    type_ = 0;
    roundcount_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Combat_Select_Tactic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_attacker;
        break;
      }

      // required bool is_attacker = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_attacker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attacker_)));
          set_has_is_attacker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_id;
        break;
      }

      // required uint32 hero_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required .pb.Msg_ECombatTactic type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Msg_ECombatTactic_IsValid(value)) {
            set_type(static_cast< ::pb::Msg_ECombatTactic >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_roundCount;
        break;
      }

      // required uint64 roundCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roundCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roundcount_)));
          set_has_roundcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Combat_Select_Tactic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // required bool is_attacker = 2;
  if (has_is_attacker()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_attacker(), output);
  }

  // required uint32 hero_id = 3;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  // required .pb.Msg_ECombatTactic type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // required uint64 roundCount = 5;
  if (has_roundcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->roundcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Combat_Select_Tactic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // required bool is_attacker = 2;
  if (has_is_attacker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_attacker(), target);
  }

  // required uint32 hero_id = 3;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  // required .pb.Msg_ECombatTactic type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // required uint64 roundCount = 5;
  if (has_roundcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->roundcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Combat_Select_Tactic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required bool is_attacker = 2;
    if (has_is_attacker()) {
      total_size += 1 + 1;
    }

    // required uint32 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // required .pb.Msg_ECombatTactic type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint64 roundCount = 5;
    if (has_roundcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roundcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Combat_Select_Tactic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Combat_Select_Tactic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Combat_Select_Tactic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Combat_Select_Tactic::MergeFrom(const C2GS_Combat_Select_Tactic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_is_attacker()) {
      set_is_attacker(from.is_attacker());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_roundcount()) {
      set_roundcount(from.roundcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Combat_Select_Tactic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Combat_Select_Tactic::CopyFrom(const C2GS_Combat_Select_Tactic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Combat_Select_Tactic::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void C2GS_Combat_Select_Tactic::Swap(C2GS_Combat_Select_Tactic* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(is_attacker_, other->is_attacker_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(type_, other->type_);
    std::swap(roundcount_, other->roundcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Combat_Select_Tactic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Combat_Select_Tactic_descriptor_;
  metadata.reflection = C2GS_Combat_Select_Tactic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Combat_Select_Tactic::kAttackTypeFieldNumber;
const int GS2C_Combat_Select_Tactic::kDefenceTypeFieldNumber;
const int GS2C_Combat_Select_Tactic::kIsAttackSkillSuccessFieldNumber;
const int GS2C_Combat_Select_Tactic::kIsDefenceSkillSuccessFieldNumber;
const int GS2C_Combat_Select_Tactic::kOverTimeFieldNumber;
const int GS2C_Combat_Select_Tactic::kAttackerNumFieldNumber;
const int GS2C_Combat_Select_Tactic::kDefenderNumFieldNumber;
const int GS2C_Combat_Select_Tactic::kAttSkillIDFieldNumber;
const int GS2C_Combat_Select_Tactic::kDefSkillIDFieldNumber;
const int GS2C_Combat_Select_Tactic::kSequeLstFieldNumber;
const int GS2C_Combat_Select_Tactic::kRoundCountFieldNumber;
const int GS2C_Combat_Select_Tactic::kGroupIdFieldNumber;
const int GS2C_Combat_Select_Tactic::kAttShadowNumFieldNumber;
const int GS2C_Combat_Select_Tactic::kDefShadowNumFieldNumber;
#endif  // !_MSC_VER

GS2C_Combat_Select_Tactic::GS2C_Combat_Select_Tactic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Combat_Select_Tactic::InitAsDefaultInstance() {
}

GS2C_Combat_Select_Tactic::GS2C_Combat_Select_Tactic(const GS2C_Combat_Select_Tactic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Combat_Select_Tactic::SharedCtor() {
  _cached_size_ = 0;
  attack_type_ = 0;
  defence_type_ = 0;
  is_attack_skill_success_ = false;
  is_defence_skill_success_ = false;
  over_time_ = GOOGLE_ULONGLONG(0);
  attackernum_ = 0u;
  defendernum_ = 0u;
  attskillid_ = 0u;
  defskillid_ = 0u;
  roundcount_ = GOOGLE_ULONGLONG(0);
  group_id_ = 0u;
  attshadownum_ = 0u;
  defshadownum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Combat_Select_Tactic::~GS2C_Combat_Select_Tactic() {
  SharedDtor();
}

void GS2C_Combat_Select_Tactic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Combat_Select_Tactic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Combat_Select_Tactic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Combat_Select_Tactic_descriptor_;
}

const GS2C_Combat_Select_Tactic& GS2C_Combat_Select_Tactic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

GS2C_Combat_Select_Tactic* GS2C_Combat_Select_Tactic::default_instance_ = NULL;

GS2C_Combat_Select_Tactic* GS2C_Combat_Select_Tactic::New() const {
  return new GS2C_Combat_Select_Tactic;
}

void GS2C_Combat_Select_Tactic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attack_type_ = 0;
    defence_type_ = 0;
    is_attack_skill_success_ = false;
    is_defence_skill_success_ = false;
    over_time_ = GOOGLE_ULONGLONG(0);
    attackernum_ = 0u;
    defendernum_ = 0u;
    attskillid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    defskillid_ = 0u;
    roundcount_ = GOOGLE_ULONGLONG(0);
    group_id_ = 0u;
    attshadownum_ = 0u;
    defshadownum_ = 0u;
  }
  sequelst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Combat_Select_Tactic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.Msg_ECombatTactic attack_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Msg_ECombatTactic_IsValid(value)) {
            set_attack_type(static_cast< ::pb::Msg_ECombatTactic >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_defence_type;
        break;
      }

      // required .pb.Msg_ECombatTactic defence_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defence_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Msg_ECombatTactic_IsValid(value)) {
            set_defence_type(static_cast< ::pb::Msg_ECombatTactic >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_attack_skill_success;
        break;
      }

      // optional bool is_attack_skill_success = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_attack_skill_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attack_skill_success_)));
          set_has_is_attack_skill_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_defence_skill_success;
        break;
      }

      // optional bool is_defence_skill_success = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_defence_skill_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_defence_skill_success_)));
          set_has_is_defence_skill_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_over_time;
        break;
      }

      // optional uint64 over_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_over_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &over_time_)));
          set_has_over_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_attackerNum;
        break;
      }

      // optional uint32 attackerNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attackernum_)));
          set_has_attackernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_defenderNum;
        break;
      }

      // optional uint32 defenderNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defenderNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defendernum_)));
          set_has_defendernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_attSkillID;
        break;
      }

      // optional uint32 attSkillID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attSkillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attskillid_)));
          set_has_attskillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_defSkillID;
        break;
      }

      // optional uint32 defSkillID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defSkillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defskillid_)));
          set_has_defskillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_sequeLst;
        break;
      }

      // repeated .pb.Combat_Seque sequeLst = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sequeLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sequelst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_sequeLst;
        if (input->ExpectTag(88)) goto parse_roundCount;
        break;
      }

      // optional uint64 roundCount = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roundCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roundcount_)));
          set_has_roundcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_group_id;
        break;
      }

      // optional uint32 group_id = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_attShadowNum;
        break;
      }

      // optional uint32 attShadowNum = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attShadowNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attshadownum_)));
          set_has_attshadownum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_defShadowNum;
        break;
      }

      // optional uint32 defShadowNum = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defShadowNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defshadownum_)));
          set_has_defshadownum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Combat_Select_Tactic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.Msg_ECombatTactic attack_type = 1;
  if (has_attack_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->attack_type(), output);
  }

  // required .pb.Msg_ECombatTactic defence_type = 2;
  if (has_defence_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->defence_type(), output);
  }

  // optional bool is_attack_skill_success = 3;
  if (has_is_attack_skill_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_attack_skill_success(), output);
  }

  // optional bool is_defence_skill_success = 4;
  if (has_is_defence_skill_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_defence_skill_success(), output);
  }

  // optional uint64 over_time = 5;
  if (has_over_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->over_time(), output);
  }

  // optional uint32 attackerNum = 6;
  if (has_attackernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->attackernum(), output);
  }

  // optional uint32 defenderNum = 7;
  if (has_defendernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->defendernum(), output);
  }

  // optional uint32 attSkillID = 8;
  if (has_attskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->attskillid(), output);
  }

  // optional uint32 defSkillID = 9;
  if (has_defskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->defskillid(), output);
  }

  // repeated .pb.Combat_Seque sequeLst = 10;
  for (int i = 0; i < this->sequelst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->sequelst(i), output);
  }

  // optional uint64 roundCount = 11;
  if (has_roundcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->roundcount(), output);
  }

  // optional uint32 group_id = 14;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->group_id(), output);
  }

  // optional uint32 attShadowNum = 15;
  if (has_attshadownum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->attshadownum(), output);
  }

  // optional uint32 defShadowNum = 16;
  if (has_defshadownum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->defshadownum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Combat_Select_Tactic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.Msg_ECombatTactic attack_type = 1;
  if (has_attack_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->attack_type(), target);
  }

  // required .pb.Msg_ECombatTactic defence_type = 2;
  if (has_defence_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->defence_type(), target);
  }

  // optional bool is_attack_skill_success = 3;
  if (has_is_attack_skill_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_attack_skill_success(), target);
  }

  // optional bool is_defence_skill_success = 4;
  if (has_is_defence_skill_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_defence_skill_success(), target);
  }

  // optional uint64 over_time = 5;
  if (has_over_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->over_time(), target);
  }

  // optional uint32 attackerNum = 6;
  if (has_attackernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->attackernum(), target);
  }

  // optional uint32 defenderNum = 7;
  if (has_defendernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->defendernum(), target);
  }

  // optional uint32 attSkillID = 8;
  if (has_attskillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->attskillid(), target);
  }

  // optional uint32 defSkillID = 9;
  if (has_defskillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->defskillid(), target);
  }

  // repeated .pb.Combat_Seque sequeLst = 10;
  for (int i = 0; i < this->sequelst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->sequelst(i), target);
  }

  // optional uint64 roundCount = 11;
  if (has_roundcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->roundcount(), target);
  }

  // optional uint32 group_id = 14;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->group_id(), target);
  }

  // optional uint32 attShadowNum = 15;
  if (has_attshadownum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->attshadownum(), target);
  }

  // optional uint32 defShadowNum = 16;
  if (has_defshadownum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->defshadownum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Combat_Select_Tactic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.Msg_ECombatTactic attack_type = 1;
    if (has_attack_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->attack_type());
    }

    // required .pb.Msg_ECombatTactic defence_type = 2;
    if (has_defence_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->defence_type());
    }

    // optional bool is_attack_skill_success = 3;
    if (has_is_attack_skill_success()) {
      total_size += 1 + 1;
    }

    // optional bool is_defence_skill_success = 4;
    if (has_is_defence_skill_success()) {
      total_size += 1 + 1;
    }

    // optional uint64 over_time = 5;
    if (has_over_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->over_time());
    }

    // optional uint32 attackerNum = 6;
    if (has_attackernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attackernum());
    }

    // optional uint32 defenderNum = 7;
    if (has_defendernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defendernum());
    }

    // optional uint32 attSkillID = 8;
    if (has_attskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attskillid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 defSkillID = 9;
    if (has_defskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defskillid());
    }

    // optional uint64 roundCount = 11;
    if (has_roundcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roundcount());
    }

    // optional uint32 group_id = 14;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional uint32 attShadowNum = 15;
    if (has_attshadownum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attshadownum());
    }

    // optional uint32 defShadowNum = 16;
    if (has_defshadownum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defshadownum());
    }

  }
  // repeated .pb.Combat_Seque sequeLst = 10;
  total_size += 1 * this->sequelst_size();
  for (int i = 0; i < this->sequelst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sequelst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Combat_Select_Tactic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Combat_Select_Tactic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Combat_Select_Tactic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Combat_Select_Tactic::MergeFrom(const GS2C_Combat_Select_Tactic& from) {
  GOOGLE_CHECK_NE(&from, this);
  sequelst_.MergeFrom(from.sequelst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attack_type()) {
      set_attack_type(from.attack_type());
    }
    if (from.has_defence_type()) {
      set_defence_type(from.defence_type());
    }
    if (from.has_is_attack_skill_success()) {
      set_is_attack_skill_success(from.is_attack_skill_success());
    }
    if (from.has_is_defence_skill_success()) {
      set_is_defence_skill_success(from.is_defence_skill_success());
    }
    if (from.has_over_time()) {
      set_over_time(from.over_time());
    }
    if (from.has_attackernum()) {
      set_attackernum(from.attackernum());
    }
    if (from.has_defendernum()) {
      set_defendernum(from.defendernum());
    }
    if (from.has_attskillid()) {
      set_attskillid(from.attskillid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_defskillid()) {
      set_defskillid(from.defskillid());
    }
    if (from.has_roundcount()) {
      set_roundcount(from.roundcount());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_attshadownum()) {
      set_attshadownum(from.attshadownum());
    }
    if (from.has_defshadownum()) {
      set_defshadownum(from.defshadownum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Combat_Select_Tactic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Combat_Select_Tactic::CopyFrom(const GS2C_Combat_Select_Tactic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Combat_Select_Tactic::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < sequelst_size(); i++) {
    if (!this->sequelst(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Combat_Select_Tactic::Swap(GS2C_Combat_Select_Tactic* other) {
  if (other != this) {
    std::swap(attack_type_, other->attack_type_);
    std::swap(defence_type_, other->defence_type_);
    std::swap(is_attack_skill_success_, other->is_attack_skill_success_);
    std::swap(is_defence_skill_success_, other->is_defence_skill_success_);
    std::swap(over_time_, other->over_time_);
    std::swap(attackernum_, other->attackernum_);
    std::swap(defendernum_, other->defendernum_);
    std::swap(attskillid_, other->attskillid_);
    std::swap(defskillid_, other->defskillid_);
    sequelst_.Swap(&other->sequelst_);
    std::swap(roundcount_, other->roundcount_);
    std::swap(group_id_, other->group_id_);
    std::swap(attshadownum_, other->attshadownum_);
    std::swap(defshadownum_, other->defshadownum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Combat_Select_Tactic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Combat_Select_Tactic_descriptor_;
  metadata.reflection = GS2C_Combat_Select_Tactic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Combat_Reward::kGroupFieldNumber;
const int Combat_Reward::kExpFieldNumber;
const int Combat_Reward::kCoinFieldNumber;
const int Combat_Reward::kPlayeridFieldNumber;
#endif  // !_MSC_VER

Combat_Reward::Combat_Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Combat_Reward::InitAsDefaultInstance() {
}

Combat_Reward::Combat_Reward(const Combat_Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Combat_Reward::SharedCtor() {
  _cached_size_ = 0;
  group_ = 0u;
  exp_ = 0u;
  coin_ = 0u;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Combat_Reward::~Combat_Reward() {
  SharedDtor();
}

void Combat_Reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Combat_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Combat_Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Combat_Reward_descriptor_;
}

const Combat_Reward& Combat_Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

Combat_Reward* Combat_Reward::default_instance_ = NULL;

Combat_Reward* Combat_Reward::New() const {
  return new Combat_Reward;
}

void Combat_Reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_ = 0u;
    exp_ = 0u;
    coin_ = 0u;
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Combat_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_coin;
        break;
      }

      // optional uint32 coin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playerid;
        break;
      }

      // optional uint64 playerid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Combat_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 group = 1;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group(), output);
  }

  // optional uint32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exp(), output);
  }

  // optional uint32 coin = 3;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->coin(), output);
  }

  // optional uint64 playerid = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Combat_Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 group = 1;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group(), target);
  }

  // optional uint32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exp(), target);
  }

  // optional uint32 coin = 3;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->coin(), target);
  }

  // optional uint64 playerid = 4;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Combat_Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 group = 1;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

    // optional uint32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 coin = 3;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // optional uint64 playerid = 4;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Combat_Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Combat_Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Combat_Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Combat_Reward::MergeFrom(const Combat_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Combat_Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Combat_Reward::CopyFrom(const Combat_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Combat_Reward::IsInitialized() const {

  return true;
}

void Combat_Reward::Swap(Combat_Reward* other) {
  if (other != this) {
    std::swap(group_, other->group_);
    std::swap(exp_, other->exp_);
    std::swap(coin_, other->coin_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Combat_Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Combat_Reward_descriptor_;
  metadata.reflection = Combat_Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Combat_Seque::kSequeTypeFieldNumber;
const int Combat_Seque::kDamageLstFieldNumber;
const int Combat_Seque::kRewardLstFieldNumber;
const int Combat_Seque::kAttExtraAwardsFieldNumber;
const int Combat_Seque::kDefExtraAwardsFieldNumber;
const int Combat_Seque::kSoldierBuffLstFieldNumber;
#endif  // !_MSC_VER

Combat_Seque::Combat_Seque()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Combat_Seque::InitAsDefaultInstance() {
  soldierbufflst_ = const_cast< ::pb::Combat_All_Buff*>(&::pb::Combat_All_Buff::default_instance());
}

Combat_Seque::Combat_Seque(const Combat_Seque& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Combat_Seque::SharedCtor() {
  _cached_size_ = 0;
  sequetype_ = 0;
  soldierbufflst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Combat_Seque::~Combat_Seque() {
  SharedDtor();
}

void Combat_Seque::SharedDtor() {
  if (this != default_instance_) {
    delete soldierbufflst_;
  }
}

void Combat_Seque::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Combat_Seque::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Combat_Seque_descriptor_;
}

const Combat_Seque& Combat_Seque::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

Combat_Seque* Combat_Seque::default_instance_ = NULL;

Combat_Seque* Combat_Seque::New() const {
  return new Combat_Seque;
}

void Combat_Seque::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sequetype_ = 0;
    if (has_soldierbufflst()) {
      if (soldierbufflst_ != NULL) soldierbufflst_->::pb::Combat_All_Buff::Clear();
    }
  }
  damagelst_.Clear();
  rewardlst_.Clear();
  att_extra_awards_.Clear();
  def_extra_awards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Combat_Seque::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.E_Combat_Serialize sequeType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::E_Combat_Serialize_IsValid(value)) {
            set_sequetype(static_cast< ::pb::E_Combat_Serialize >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_damageLst;
        break;
      }

      // repeated .pb.Combat_Damage damageLst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_damageLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_damagelst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_damageLst;
        if (input->ExpectTag(26)) goto parse_rewardLst;
        break;
      }

      // repeated .pb.Combat_Reward rewardLst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewardLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardlst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rewardLst;
        if (input->ExpectTag(34)) goto parse_att_extra_awards;
        break;
      }

      // repeated .pb.extra_awards att_extra_awards = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_att_extra_awards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_att_extra_awards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_att_extra_awards;
        if (input->ExpectTag(42)) goto parse_def_extra_awards;
        break;
      }

      // repeated .pb.extra_awards def_extra_awards = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_def_extra_awards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_def_extra_awards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_def_extra_awards;
        if (input->ExpectTag(50)) goto parse_soldierBuffLst;
        break;
      }

      // optional .pb.Combat_All_Buff soldierBuffLst = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soldierBuffLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_soldierbufflst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Combat_Seque::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.E_Combat_Serialize sequeType = 1;
  if (has_sequetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->sequetype(), output);
  }

  // repeated .pb.Combat_Damage damageLst = 2;
  for (int i = 0; i < this->damagelst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->damagelst(i), output);
  }

  // repeated .pb.Combat_Reward rewardLst = 3;
  for (int i = 0; i < this->rewardlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rewardlst(i), output);
  }

  // repeated .pb.extra_awards att_extra_awards = 4;
  for (int i = 0; i < this->att_extra_awards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->att_extra_awards(i), output);
  }

  // repeated .pb.extra_awards def_extra_awards = 5;
  for (int i = 0; i < this->def_extra_awards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->def_extra_awards(i), output);
  }

  // optional .pb.Combat_All_Buff soldierBuffLst = 6;
  if (has_soldierbufflst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->soldierbufflst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Combat_Seque::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.E_Combat_Serialize sequeType = 1;
  if (has_sequetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->sequetype(), target);
  }

  // repeated .pb.Combat_Damage damageLst = 2;
  for (int i = 0; i < this->damagelst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->damagelst(i), target);
  }

  // repeated .pb.Combat_Reward rewardLst = 3;
  for (int i = 0; i < this->rewardlst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rewardlst(i), target);
  }

  // repeated .pb.extra_awards att_extra_awards = 4;
  for (int i = 0; i < this->att_extra_awards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->att_extra_awards(i), target);
  }

  // repeated .pb.extra_awards def_extra_awards = 5;
  for (int i = 0; i < this->def_extra_awards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->def_extra_awards(i), target);
  }

  // optional .pb.Combat_All_Buff soldierBuffLst = 6;
  if (has_soldierbufflst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->soldierbufflst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Combat_Seque::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.E_Combat_Serialize sequeType = 1;
    if (has_sequetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sequetype());
    }

    // optional .pb.Combat_All_Buff soldierBuffLst = 6;
    if (has_soldierbufflst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->soldierbufflst());
    }

  }
  // repeated .pb.Combat_Damage damageLst = 2;
  total_size += 1 * this->damagelst_size();
  for (int i = 0; i < this->damagelst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->damagelst(i));
  }

  // repeated .pb.Combat_Reward rewardLst = 3;
  total_size += 1 * this->rewardlst_size();
  for (int i = 0; i < this->rewardlst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardlst(i));
  }

  // repeated .pb.extra_awards att_extra_awards = 4;
  total_size += 1 * this->att_extra_awards_size();
  for (int i = 0; i < this->att_extra_awards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->att_extra_awards(i));
  }

  // repeated .pb.extra_awards def_extra_awards = 5;
  total_size += 1 * this->def_extra_awards_size();
  for (int i = 0; i < this->def_extra_awards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->def_extra_awards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Combat_Seque::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Combat_Seque* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Combat_Seque*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Combat_Seque::MergeFrom(const Combat_Seque& from) {
  GOOGLE_CHECK_NE(&from, this);
  damagelst_.MergeFrom(from.damagelst_);
  rewardlst_.MergeFrom(from.rewardlst_);
  att_extra_awards_.MergeFrom(from.att_extra_awards_);
  def_extra_awards_.MergeFrom(from.def_extra_awards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequetype()) {
      set_sequetype(from.sequetype());
    }
    if (from.has_soldierbufflst()) {
      mutable_soldierbufflst()->::pb::Combat_All_Buff::MergeFrom(from.soldierbufflst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Combat_Seque::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Combat_Seque::CopyFrom(const Combat_Seque& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Combat_Seque::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_soldierbufflst()) {
    if (!this->soldierbufflst().IsInitialized()) return false;
  }
  return true;
}

void Combat_Seque::Swap(Combat_Seque* other) {
  if (other != this) {
    std::swap(sequetype_, other->sequetype_);
    damagelst_.Swap(&other->damagelst_);
    rewardlst_.Swap(&other->rewardlst_);
    att_extra_awards_.Swap(&other->att_extra_awards_);
    def_extra_awards_.Swap(&other->def_extra_awards_);
    std::swap(soldierbufflst_, other->soldierbufflst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Combat_Seque::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Combat_Seque_descriptor_;
  metadata.reflection = Combat_Seque_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Combat_All_Buff::kBuffOneAttFieldNumber;
const int Combat_All_Buff::kBuffOneDefFieldNumber;
#endif  // !_MSC_VER

Combat_All_Buff::Combat_All_Buff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Combat_All_Buff::InitAsDefaultInstance() {
}

Combat_All_Buff::Combat_All_Buff(const Combat_All_Buff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Combat_All_Buff::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Combat_All_Buff::~Combat_All_Buff() {
  SharedDtor();
}

void Combat_All_Buff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Combat_All_Buff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Combat_All_Buff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Combat_All_Buff_descriptor_;
}

const Combat_All_Buff& Combat_All_Buff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

Combat_All_Buff* Combat_All_Buff::default_instance_ = NULL;

Combat_All_Buff* Combat_All_Buff::New() const {
  return new Combat_All_Buff;
}

void Combat_All_Buff::Clear() {
  buff_one_att_.Clear();
  buff_one_def_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Combat_All_Buff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Combat_buff buff_one_att = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buff_one_att:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buff_one_att()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_buff_one_att;
        if (input->ExpectTag(18)) goto parse_buff_one_def;
        break;
      }

      // repeated .pb.Combat_buff buff_one_def = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buff_one_def:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buff_one_def()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_buff_one_def;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Combat_All_Buff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.Combat_buff buff_one_att = 1;
  for (int i = 0; i < this->buff_one_att_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buff_one_att(i), output);
  }

  // repeated .pb.Combat_buff buff_one_def = 2;
  for (int i = 0; i < this->buff_one_def_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->buff_one_def(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Combat_All_Buff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.Combat_buff buff_one_att = 1;
  for (int i = 0; i < this->buff_one_att_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buff_one_att(i), target);
  }

  // repeated .pb.Combat_buff buff_one_def = 2;
  for (int i = 0; i < this->buff_one_def_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->buff_one_def(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Combat_All_Buff::ByteSize() const {
  int total_size = 0;

  // repeated .pb.Combat_buff buff_one_att = 1;
  total_size += 1 * this->buff_one_att_size();
  for (int i = 0; i < this->buff_one_att_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buff_one_att(i));
  }

  // repeated .pb.Combat_buff buff_one_def = 2;
  total_size += 1 * this->buff_one_def_size();
  for (int i = 0; i < this->buff_one_def_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buff_one_def(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Combat_All_Buff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Combat_All_Buff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Combat_All_Buff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Combat_All_Buff::MergeFrom(const Combat_All_Buff& from) {
  GOOGLE_CHECK_NE(&from, this);
  buff_one_att_.MergeFrom(from.buff_one_att_);
  buff_one_def_.MergeFrom(from.buff_one_def_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Combat_All_Buff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Combat_All_Buff::CopyFrom(const Combat_All_Buff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Combat_All_Buff::IsInitialized() const {

  for (int i = 0; i < buff_one_att_size(); i++) {
    if (!this->buff_one_att(i).IsInitialized()) return false;
  }
  for (int i = 0; i < buff_one_def_size(); i++) {
    if (!this->buff_one_def(i).IsInitialized()) return false;
  }
  return true;
}

void Combat_All_Buff::Swap(Combat_All_Buff* other) {
  if (other != this) {
    buff_one_att_.Swap(&other->buff_one_att_);
    buff_one_def_.Swap(&other->buff_one_def_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Combat_All_Buff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Combat_All_Buff_descriptor_;
  metadata.reflection = Combat_All_Buff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Combat_buff::kBuffTidFieldNumber;
const int Combat_buff::kBuffUniqueIdFieldNumber;
const int Combat_buff::kGenericFieldNumber;
const int Combat_buff::kGroupFieldNumber;
const int Combat_buff::kRowIndexFieldNumber;
const int Combat_buff::kLeftRoundCountFieldNumber;
#endif  // !_MSC_VER

Combat_buff::Combat_buff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Combat_buff::InitAsDefaultInstance() {
}

Combat_buff::Combat_buff(const Combat_buff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Combat_buff::SharedCtor() {
  _cached_size_ = 0;
  buff_tid_ = 0u;
  buff_unique_id_ = GOOGLE_ULONGLONG(0);
  generic_ = false;
  group_ = 0u;
  rowindex_ = 0u;
  leftroundcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Combat_buff::~Combat_buff() {
  SharedDtor();
}

void Combat_buff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Combat_buff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Combat_buff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Combat_buff_descriptor_;
}

const Combat_buff& Combat_buff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

Combat_buff* Combat_buff::default_instance_ = NULL;

Combat_buff* Combat_buff::New() const {
  return new Combat_buff;
}

void Combat_buff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buff_tid_ = 0u;
    buff_unique_id_ = GOOGLE_ULONGLONG(0);
    generic_ = false;
    group_ = 0u;
    rowindex_ = 0u;
    leftroundcount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Combat_buff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 buff_tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buff_tid_)));
          set_has_buff_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buff_unique_id;
        break;
      }

      // required uint64 buff_unique_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buff_unique_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buff_unique_id_)));
          set_has_buff_unique_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_generic;
        break;
      }

      // required bool generic = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_generic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &generic_)));
          set_has_generic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_group;
        break;
      }

      // required uint32 group = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rowIndex;
        break;
      }

      // required uint32 rowIndex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rowIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rowindex_)));
          set_has_rowindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_leftRoundCount;
        break;
      }

      // optional uint32 leftRoundCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftRoundCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftroundcount_)));
          set_has_leftroundcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Combat_buff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 buff_tid = 1;
  if (has_buff_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buff_tid(), output);
  }

  // required uint64 buff_unique_id = 2;
  if (has_buff_unique_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->buff_unique_id(), output);
  }

  // required bool generic = 3;
  if (has_generic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->generic(), output);
  }

  // required uint32 group = 4;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->group(), output);
  }

  // required uint32 rowIndex = 5;
  if (has_rowindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rowindex(), output);
  }

  // optional uint32 leftRoundCount = 6;
  if (has_leftroundcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->leftroundcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Combat_buff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 buff_tid = 1;
  if (has_buff_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buff_tid(), target);
  }

  // required uint64 buff_unique_id = 2;
  if (has_buff_unique_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->buff_unique_id(), target);
  }

  // required bool generic = 3;
  if (has_generic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->generic(), target);
  }

  // required uint32 group = 4;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->group(), target);
  }

  // required uint32 rowIndex = 5;
  if (has_rowindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rowindex(), target);
  }

  // optional uint32 leftRoundCount = 6;
  if (has_leftroundcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->leftroundcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Combat_buff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 buff_tid = 1;
    if (has_buff_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buff_tid());
    }

    // required uint64 buff_unique_id = 2;
    if (has_buff_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buff_unique_id());
    }

    // required bool generic = 3;
    if (has_generic()) {
      total_size += 1 + 1;
    }

    // required uint32 group = 4;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

    // required uint32 rowIndex = 5;
    if (has_rowindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rowindex());
    }

    // optional uint32 leftRoundCount = 6;
    if (has_leftroundcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leftroundcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Combat_buff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Combat_buff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Combat_buff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Combat_buff::MergeFrom(const Combat_buff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buff_tid()) {
      set_buff_tid(from.buff_tid());
    }
    if (from.has_buff_unique_id()) {
      set_buff_unique_id(from.buff_unique_id());
    }
    if (from.has_generic()) {
      set_generic(from.generic());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_rowindex()) {
      set_rowindex(from.rowindex());
    }
    if (from.has_leftroundcount()) {
      set_leftroundcount(from.leftroundcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Combat_buff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Combat_buff::CopyFrom(const Combat_buff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Combat_buff::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Combat_buff::Swap(Combat_buff* other) {
  if (other != this) {
    std::swap(buff_tid_, other->buff_tid_);
    std::swap(buff_unique_id_, other->buff_unique_id_);
    std::swap(generic_, other->generic_);
    std::swap(group_, other->group_);
    std::swap(rowindex_, other->rowindex_);
    std::swap(leftroundcount_, other->leftroundcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Combat_buff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Combat_buff_descriptor_;
  metadata.reflection = Combat_buff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Combat_Damage::kGroupFieldNumber;
const int Combat_Damage::kRangeFieldNumber;
const int Combat_Damage::kDamageFieldNumber;
const int Combat_Damage::kRestBloodFieldNumber;
const int Combat_Damage::kBuffIDFieldNumber;
#endif  // !_MSC_VER

Combat_Damage::Combat_Damage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Combat_Damage::InitAsDefaultInstance() {
}

Combat_Damage::Combat_Damage(const Combat_Damage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Combat_Damage::SharedCtor() {
  _cached_size_ = 0;
  group_ = 0u;
  range_ = 0u;
  damage_ = 0u;
  restblood_ = 0u;
  buffid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Combat_Damage::~Combat_Damage() {
  SharedDtor();
}

void Combat_Damage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Combat_Damage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Combat_Damage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Combat_Damage_descriptor_;
}

const Combat_Damage& Combat_Damage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

Combat_Damage* Combat_Damage::default_instance_ = NULL;

Combat_Damage* Combat_Damage::New() const {
  return new Combat_Damage;
}

void Combat_Damage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_ = 0u;
    range_ = 0u;
    damage_ = 0u;
    restblood_ = 0u;
    buffid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Combat_Damage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_range;
        break;
      }

      // optional uint32 range = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_damage;
        break;
      }

      // optional uint32 damage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_restBlood;
        break;
      }

      // optional uint32 restBlood = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_restBlood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &restblood_)));
          set_has_restblood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_buffID;
        break;
      }

      // optional uint32 buffID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buffID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Combat_Damage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 group = 1;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group(), output);
  }

  // optional uint32 range = 2;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->range(), output);
  }

  // optional uint32 damage = 3;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->damage(), output);
  }

  // optional uint32 restBlood = 4;
  if (has_restblood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->restblood(), output);
  }

  // optional uint32 buffID = 5;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->buffid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Combat_Damage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 group = 1;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group(), target);
  }

  // optional uint32 range = 2;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->range(), target);
  }

  // optional uint32 damage = 3;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->damage(), target);
  }

  // optional uint32 restBlood = 4;
  if (has_restblood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->restblood(), target);
  }

  // optional uint32 buffID = 5;
  if (has_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->buffid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Combat_Damage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 group = 1;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

    // optional uint32 range = 2;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->range());
    }

    // optional uint32 damage = 3;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }

    // optional uint32 restBlood = 4;
    if (has_restblood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->restblood());
    }

    // optional uint32 buffID = 5;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Combat_Damage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Combat_Damage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Combat_Damage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Combat_Damage::MergeFrom(const Combat_Damage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_restblood()) {
      set_restblood(from.restblood());
    }
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Combat_Damage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Combat_Damage::CopyFrom(const Combat_Damage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Combat_Damage::IsInitialized() const {

  return true;
}

void Combat_Damage::Swap(Combat_Damage* other) {
  if (other != this) {
    std::swap(group_, other->group_);
    std::swap(range_, other->range_);
    std::swap(damage_, other->damage_);
    std::swap(restblood_, other->restblood_);
    std::swap(buffid_, other->buffid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Combat_Damage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Combat_Damage_descriptor_;
  metadata.reflection = Combat_Damage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int extra_awards::kAwardsidFieldNumber;
const int extra_awards::kAwardsnumFieldNumber;
#endif  // !_MSC_VER

extra_awards::extra_awards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void extra_awards::InitAsDefaultInstance() {
}

extra_awards::extra_awards(const extra_awards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void extra_awards::SharedCtor() {
  _cached_size_ = 0;
  awardsid_ = 0u;
  awardsnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

extra_awards::~extra_awards() {
  SharedDtor();
}

void extra_awards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void extra_awards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* extra_awards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return extra_awards_descriptor_;
}

const extra_awards& extra_awards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

extra_awards* extra_awards::default_instance_ = NULL;

extra_awards* extra_awards::New() const {
  return new extra_awards;
}

void extra_awards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    awardsid_ = 0u;
    awardsnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool extra_awards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 awardsid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardsid_)));
          set_has_awardsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_awardsnum;
        break;
      }

      // optional uint32 awardsnum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardsnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardsnum_)));
          set_has_awardsnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void extra_awards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 awardsid = 1;
  if (has_awardsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->awardsid(), output);
  }

  // optional uint32 awardsnum = 2;
  if (has_awardsnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->awardsnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* extra_awards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 awardsid = 1;
  if (has_awardsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->awardsid(), target);
  }

  // optional uint32 awardsnum = 2;
  if (has_awardsnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->awardsnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int extra_awards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 awardsid = 1;
    if (has_awardsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardsid());
    }

    // optional uint32 awardsnum = 2;
    if (has_awardsnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardsnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void extra_awards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const extra_awards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const extra_awards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void extra_awards::MergeFrom(const extra_awards& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_awardsid()) {
      set_awardsid(from.awardsid());
    }
    if (from.has_awardsnum()) {
      set_awardsnum(from.awardsnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void extra_awards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void extra_awards::CopyFrom(const extra_awards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool extra_awards::IsInitialized() const {

  return true;
}

void extra_awards::Swap(extra_awards* other) {
  if (other != this) {
    std::swap(awardsid_, other->awardsid_);
    std::swap(awardsnum_, other->awardsnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata extra_awards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = extra_awards_descriptor_;
  metadata.reflection = extra_awards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Combat_Buff_Remain::kGroupfromFieldNumber;
const int Combat_Buff_Remain::kGrouptoFieldNumber;
const int Combat_Buff_Remain::kRangeFieldNumber;
const int Combat_Buff_Remain::kBuffIDFieldNumber;
#endif  // !_MSC_VER

Combat_Buff_Remain::Combat_Buff_Remain()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Combat_Buff_Remain::InitAsDefaultInstance() {
}

Combat_Buff_Remain::Combat_Buff_Remain(const Combat_Buff_Remain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Combat_Buff_Remain::SharedCtor() {
  _cached_size_ = 0;
  groupfrom_ = 0u;
  groupto_ = 0u;
  range_ = 0u;
  buffid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Combat_Buff_Remain::~Combat_Buff_Remain() {
  SharedDtor();
}

void Combat_Buff_Remain::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Combat_Buff_Remain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Combat_Buff_Remain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Combat_Buff_Remain_descriptor_;
}

const Combat_Buff_Remain& Combat_Buff_Remain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

Combat_Buff_Remain* Combat_Buff_Remain::default_instance_ = NULL;

Combat_Buff_Remain* Combat_Buff_Remain::New() const {
  return new Combat_Buff_Remain;
}

void Combat_Buff_Remain::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupfrom_ = 0u;
    groupto_ = 0u;
    range_ = 0u;
    buffid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Combat_Buff_Remain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 groupfrom = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupfrom_)));
          set_has_groupfrom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupto;
        break;
      }

      // optional uint32 groupto = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupto_)));
          set_has_groupto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_range;
        break;
      }

      // optional uint32 range = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buffID;
        break;
      }

      // optional uint32 buffID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buffID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Combat_Buff_Remain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 groupfrom = 1;
  if (has_groupfrom()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groupfrom(), output);
  }

  // optional uint32 groupto = 2;
  if (has_groupto()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->groupto(), output);
  }

  // optional uint32 range = 3;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->range(), output);
  }

  // optional uint32 buffID = 4;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->buffid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Combat_Buff_Remain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 groupfrom = 1;
  if (has_groupfrom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->groupfrom(), target);
  }

  // optional uint32 groupto = 2;
  if (has_groupto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->groupto(), target);
  }

  // optional uint32 range = 3;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->range(), target);
  }

  // optional uint32 buffID = 4;
  if (has_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->buffid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Combat_Buff_Remain::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 groupfrom = 1;
    if (has_groupfrom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupfrom());
    }

    // optional uint32 groupto = 2;
    if (has_groupto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupto());
    }

    // optional uint32 range = 3;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->range());
    }

    // optional uint32 buffID = 4;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Combat_Buff_Remain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Combat_Buff_Remain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Combat_Buff_Remain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Combat_Buff_Remain::MergeFrom(const Combat_Buff_Remain& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupfrom()) {
      set_groupfrom(from.groupfrom());
    }
    if (from.has_groupto()) {
      set_groupto(from.groupto());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Combat_Buff_Remain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Combat_Buff_Remain::CopyFrom(const Combat_Buff_Remain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Combat_Buff_Remain::IsInitialized() const {

  return true;
}

void Combat_Buff_Remain::Swap(Combat_Buff_Remain* other) {
  if (other != this) {
    std::swap(groupfrom_, other->groupfrom_);
    std::swap(groupto_, other->groupto_);
    std::swap(range_, other->range_);
    std::swap(buffid_, other->buffid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Combat_Buff_Remain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Combat_Buff_Remain_descriptor_;
  metadata.reflection = Combat_Buff_Remain_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Combat_Buff_AllInfo::kDamagesFieldNumber;
const int Combat_Buff_AllInfo::kRewardsFieldNumber;
const int Combat_Buff_AllInfo::kBuffremiansFieldNumber;
const int Combat_Buff_AllInfo::kAttExtraAwardsFieldNumber;
const int Combat_Buff_AllInfo::kDefExtraAwardsFieldNumber;
#endif  // !_MSC_VER

Combat_Buff_AllInfo::Combat_Buff_AllInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Combat_Buff_AllInfo::InitAsDefaultInstance() {
}

Combat_Buff_AllInfo::Combat_Buff_AllInfo(const Combat_Buff_AllInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Combat_Buff_AllInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Combat_Buff_AllInfo::~Combat_Buff_AllInfo() {
  SharedDtor();
}

void Combat_Buff_AllInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Combat_Buff_AllInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Combat_Buff_AllInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Combat_Buff_AllInfo_descriptor_;
}

const Combat_Buff_AllInfo& Combat_Buff_AllInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

Combat_Buff_AllInfo* Combat_Buff_AllInfo::default_instance_ = NULL;

Combat_Buff_AllInfo* Combat_Buff_AllInfo::New() const {
  return new Combat_Buff_AllInfo;
}

void Combat_Buff_AllInfo::Clear() {
  damages_.Clear();
  rewards_.Clear();
  buffremians_.Clear();
  att_extra_awards_.Clear();
  def_extra_awards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Combat_Buff_AllInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Combat_Damage damages = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_damages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_damages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_damages;
        if (input->ExpectTag(18)) goto parse_rewards;
        break;
      }

      // repeated .pb.Combat_Reward rewards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rewards;
        if (input->ExpectTag(26)) goto parse_buffremians;
        break;
      }

      // repeated .pb.Combat_Buff_Remain buffremians = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffremians:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buffremians()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_buffremians;
        if (input->ExpectTag(34)) goto parse_att_extra_awards;
        break;
      }

      // repeated .pb.extra_awards att_extra_awards = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_att_extra_awards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_att_extra_awards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_att_extra_awards;
        if (input->ExpectTag(42)) goto parse_def_extra_awards;
        break;
      }

      // repeated .pb.extra_awards def_extra_awards = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_def_extra_awards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_def_extra_awards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_def_extra_awards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Combat_Buff_AllInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.Combat_Damage damages = 1;
  for (int i = 0; i < this->damages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->damages(i), output);
  }

  // repeated .pb.Combat_Reward rewards = 2;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewards(i), output);
  }

  // repeated .pb.Combat_Buff_Remain buffremians = 3;
  for (int i = 0; i < this->buffremians_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buffremians(i), output);
  }

  // repeated .pb.extra_awards att_extra_awards = 4;
  for (int i = 0; i < this->att_extra_awards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->att_extra_awards(i), output);
  }

  // repeated .pb.extra_awards def_extra_awards = 5;
  for (int i = 0; i < this->def_extra_awards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->def_extra_awards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Combat_Buff_AllInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.Combat_Damage damages = 1;
  for (int i = 0; i < this->damages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->damages(i), target);
  }

  // repeated .pb.Combat_Reward rewards = 2;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewards(i), target);
  }

  // repeated .pb.Combat_Buff_Remain buffremians = 3;
  for (int i = 0; i < this->buffremians_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->buffremians(i), target);
  }

  // repeated .pb.extra_awards att_extra_awards = 4;
  for (int i = 0; i < this->att_extra_awards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->att_extra_awards(i), target);
  }

  // repeated .pb.extra_awards def_extra_awards = 5;
  for (int i = 0; i < this->def_extra_awards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->def_extra_awards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Combat_Buff_AllInfo::ByteSize() const {
  int total_size = 0;

  // repeated .pb.Combat_Damage damages = 1;
  total_size += 1 * this->damages_size();
  for (int i = 0; i < this->damages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->damages(i));
  }

  // repeated .pb.Combat_Reward rewards = 2;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  // repeated .pb.Combat_Buff_Remain buffremians = 3;
  total_size += 1 * this->buffremians_size();
  for (int i = 0; i < this->buffremians_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buffremians(i));
  }

  // repeated .pb.extra_awards att_extra_awards = 4;
  total_size += 1 * this->att_extra_awards_size();
  for (int i = 0; i < this->att_extra_awards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->att_extra_awards(i));
  }

  // repeated .pb.extra_awards def_extra_awards = 5;
  total_size += 1 * this->def_extra_awards_size();
  for (int i = 0; i < this->def_extra_awards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->def_extra_awards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Combat_Buff_AllInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Combat_Buff_AllInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Combat_Buff_AllInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Combat_Buff_AllInfo::MergeFrom(const Combat_Buff_AllInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  damages_.MergeFrom(from.damages_);
  rewards_.MergeFrom(from.rewards_);
  buffremians_.MergeFrom(from.buffremians_);
  att_extra_awards_.MergeFrom(from.att_extra_awards_);
  def_extra_awards_.MergeFrom(from.def_extra_awards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Combat_Buff_AllInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Combat_Buff_AllInfo::CopyFrom(const Combat_Buff_AllInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Combat_Buff_AllInfo::IsInitialized() const {

  return true;
}

void Combat_Buff_AllInfo::Swap(Combat_Buff_AllInfo* other) {
  if (other != this) {
    damages_.Swap(&other->damages_);
    rewards_.Swap(&other->rewards_);
    buffremians_.Swap(&other->buffremians_);
    att_extra_awards_.Swap(&other->att_extra_awards_);
    def_extra_awards_.Swap(&other->def_extra_awards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Combat_Buff_AllInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Combat_Buff_AllInfo_descriptor_;
  metadata.reflection = Combat_Buff_AllInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Combat_Ani_Finished::kGroupidFieldNumber;
const int C2GS_Combat_Ani_Finished::kRoundCountFieldNumber;
#endif  // !_MSC_VER

C2GS_Combat_Ani_Finished::C2GS_Combat_Ani_Finished()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Combat_Ani_Finished::InitAsDefaultInstance() {
}

C2GS_Combat_Ani_Finished::C2GS_Combat_Ani_Finished(const C2GS_Combat_Ani_Finished& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Combat_Ani_Finished::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0u;
  roundcount_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Combat_Ani_Finished::~C2GS_Combat_Ani_Finished() {
  SharedDtor();
}

void C2GS_Combat_Ani_Finished::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Combat_Ani_Finished::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Combat_Ani_Finished::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Combat_Ani_Finished_descriptor_;
}

const C2GS_Combat_Ani_Finished& C2GS_Combat_Ani_Finished::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

C2GS_Combat_Ani_Finished* C2GS_Combat_Ani_Finished::default_instance_ = NULL;

C2GS_Combat_Ani_Finished* C2GS_Combat_Ani_Finished::New() const {
  return new C2GS_Combat_Ani_Finished;
}

void C2GS_Combat_Ani_Finished::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = 0u;
    roundcount_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Combat_Ani_Finished::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roundCount;
        break;
      }

      // required uint64 roundCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roundCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roundcount_)));
          set_has_roundcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Combat_Ani_Finished::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groupid(), output);
  }

  // required uint64 roundCount = 2;
  if (has_roundcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roundcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Combat_Ani_Finished::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->groupid(), target);
  }

  // required uint64 roundCount = 2;
  if (has_roundcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roundcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Combat_Ani_Finished::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // required uint64 roundCount = 2;
    if (has_roundcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roundcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Combat_Ani_Finished::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Combat_Ani_Finished* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Combat_Ani_Finished*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Combat_Ani_Finished::MergeFrom(const C2GS_Combat_Ani_Finished& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_roundcount()) {
      set_roundcount(from.roundcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Combat_Ani_Finished::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Combat_Ani_Finished::CopyFrom(const C2GS_Combat_Ani_Finished& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Combat_Ani_Finished::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2GS_Combat_Ani_Finished::Swap(C2GS_Combat_Ani_Finished* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(roundcount_, other->roundcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Combat_Ani_Finished::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Combat_Ani_Finished_descriptor_;
  metadata.reflection = C2GS_Combat_Ani_Finished_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Combat_New_Round::kChooseTimeFieldNumber;
const int GS2C_Combat_New_Round::kTacticParamFieldNumber;
const int GS2C_Combat_New_Round::kRoundCountFieldNumber;
const int GS2C_Combat_New_Round::kGroupIdFieldNumber;
#endif  // !_MSC_VER

GS2C_Combat_New_Round::GS2C_Combat_New_Round()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Combat_New_Round::InitAsDefaultInstance() {
  tactic_param_ = const_cast< ::pb::Tactic_Param*>(&::pb::Tactic_Param::default_instance());
}

GS2C_Combat_New_Round::GS2C_Combat_New_Round(const GS2C_Combat_New_Round& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Combat_New_Round::SharedCtor() {
  _cached_size_ = 0;
  choose_time_ = GOOGLE_ULONGLONG(0);
  tactic_param_ = NULL;
  roundcount_ = GOOGLE_ULONGLONG(0);
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Combat_New_Round::~GS2C_Combat_New_Round() {
  SharedDtor();
}

void GS2C_Combat_New_Round::SharedDtor() {
  if (this != default_instance_) {
    delete tactic_param_;
  }
}

void GS2C_Combat_New_Round::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Combat_New_Round::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Combat_New_Round_descriptor_;
}

const GS2C_Combat_New_Round& GS2C_Combat_New_Round::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

GS2C_Combat_New_Round* GS2C_Combat_New_Round::default_instance_ = NULL;

GS2C_Combat_New_Round* GS2C_Combat_New_Round::New() const {
  return new GS2C_Combat_New_Round;
}

void GS2C_Combat_New_Round::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    choose_time_ = GOOGLE_ULONGLONG(0);
    if (has_tactic_param()) {
      if (tactic_param_ != NULL) tactic_param_->::pb::Tactic_Param::Clear();
    }
    roundcount_ = GOOGLE_ULONGLONG(0);
    group_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Combat_New_Round::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 choose_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &choose_time_)));
          set_has_choose_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tactic_param;
        break;
      }

      // optional .pb.Tactic_Param tactic_param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tactic_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tactic_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roundCount;
        break;
      }

      // optional uint64 roundCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roundCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roundcount_)));
          set_has_roundcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_group_id;
        break;
      }

      // optional uint32 group_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Combat_New_Round::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 choose_time = 1;
  if (has_choose_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->choose_time(), output);
  }

  // optional .pb.Tactic_Param tactic_param = 2;
  if (has_tactic_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tactic_param(), output);
  }

  // optional uint64 roundCount = 3;
  if (has_roundcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->roundcount(), output);
  }

  // optional uint32 group_id = 4;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Combat_New_Round::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 choose_time = 1;
  if (has_choose_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->choose_time(), target);
  }

  // optional .pb.Tactic_Param tactic_param = 2;
  if (has_tactic_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tactic_param(), target);
  }

  // optional uint64 roundCount = 3;
  if (has_roundcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->roundcount(), target);
  }

  // optional uint32 group_id = 4;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Combat_New_Round::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 choose_time = 1;
    if (has_choose_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->choose_time());
    }

    // optional .pb.Tactic_Param tactic_param = 2;
    if (has_tactic_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tactic_param());
    }

    // optional uint64 roundCount = 3;
    if (has_roundcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roundcount());
    }

    // optional uint32 group_id = 4;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Combat_New_Round::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Combat_New_Round* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Combat_New_Round*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Combat_New_Round::MergeFrom(const GS2C_Combat_New_Round& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_choose_time()) {
      set_choose_time(from.choose_time());
    }
    if (from.has_tactic_param()) {
      mutable_tactic_param()->::pb::Tactic_Param::MergeFrom(from.tactic_param());
    }
    if (from.has_roundcount()) {
      set_roundcount(from.roundcount());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Combat_New_Round::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Combat_New_Round::CopyFrom(const GS2C_Combat_New_Round& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Combat_New_Round::IsInitialized() const {

  return true;
}

void GS2C_Combat_New_Round::Swap(GS2C_Combat_New_Round* other) {
  if (other != this) {
    std::swap(choose_time_, other->choose_time_);
    std::swap(tactic_param_, other->tactic_param_);
    std::swap(roundcount_, other->roundcount_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Combat_New_Round::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Combat_New_Round_descriptor_;
  metadata.reflection = GS2C_Combat_New_Round_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Combat_Select_Tactic_Single::kTypeFieldNumber;
const int GS2C_Combat_Select_Tactic_Single::kIsAttackerFieldNumber;
const int GS2C_Combat_Select_Tactic_Single::kAttackerNumFieldNumber;
const int GS2C_Combat_Select_Tactic_Single::kDefenderNumFieldNumber;
const int GS2C_Combat_Select_Tactic_Single::kRoundCountFieldNumber;
const int GS2C_Combat_Select_Tactic_Single::kGroupIdFieldNumber;
#endif  // !_MSC_VER

GS2C_Combat_Select_Tactic_Single::GS2C_Combat_Select_Tactic_Single()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Combat_Select_Tactic_Single::InitAsDefaultInstance() {
}

GS2C_Combat_Select_Tactic_Single::GS2C_Combat_Select_Tactic_Single(const GS2C_Combat_Select_Tactic_Single& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Combat_Select_Tactic_Single::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  is_attacker_ = false;
  attackernum_ = 0u;
  defendernum_ = 0u;
  roundcount_ = GOOGLE_ULONGLONG(0);
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Combat_Select_Tactic_Single::~GS2C_Combat_Select_Tactic_Single() {
  SharedDtor();
}

void GS2C_Combat_Select_Tactic_Single::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Combat_Select_Tactic_Single::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Combat_Select_Tactic_Single::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Combat_Select_Tactic_Single_descriptor_;
}

const GS2C_Combat_Select_Tactic_Single& GS2C_Combat_Select_Tactic_Single::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

GS2C_Combat_Select_Tactic_Single* GS2C_Combat_Select_Tactic_Single::default_instance_ = NULL;

GS2C_Combat_Select_Tactic_Single* GS2C_Combat_Select_Tactic_Single::New() const {
  return new GS2C_Combat_Select_Tactic_Single;
}

void GS2C_Combat_Select_Tactic_Single::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    is_attacker_ = false;
    attackernum_ = 0u;
    defendernum_ = 0u;
    roundcount_ = GOOGLE_ULONGLONG(0);
    group_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Combat_Select_Tactic_Single::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.Msg_ECombatTactic type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Msg_ECombatTactic_IsValid(value)) {
            set_type(static_cast< ::pb::Msg_ECombatTactic >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_attacker;
        break;
      }

      // optional bool is_attacker = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_attacker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attacker_)));
          set_has_is_attacker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attackerNum;
        break;
      }

      // optional uint32 attackerNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attackernum_)));
          set_has_attackernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_defenderNum;
        break;
      }

      // optional uint32 defenderNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defenderNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defendernum_)));
          set_has_defendernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_roundCount;
        break;
      }

      // optional uint64 roundCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roundCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roundcount_)));
          set_has_roundcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_group_id;
        break;
      }

      // optional uint32 group_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Combat_Select_Tactic_Single::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.Msg_ECombatTactic type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bool is_attacker = 2;
  if (has_is_attacker()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_attacker(), output);
  }

  // optional uint32 attackerNum = 3;
  if (has_attackernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attackernum(), output);
  }

  // optional uint32 defenderNum = 4;
  if (has_defendernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->defendernum(), output);
  }

  // optional uint64 roundCount = 5;
  if (has_roundcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->roundcount(), output);
  }

  // optional uint32 group_id = 6;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Combat_Select_Tactic_Single::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.Msg_ECombatTactic type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bool is_attacker = 2;
  if (has_is_attacker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_attacker(), target);
  }

  // optional uint32 attackerNum = 3;
  if (has_attackernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attackernum(), target);
  }

  // optional uint32 defenderNum = 4;
  if (has_defendernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->defendernum(), target);
  }

  // optional uint64 roundCount = 5;
  if (has_roundcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->roundcount(), target);
  }

  // optional uint32 group_id = 6;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Combat_Select_Tactic_Single::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.Msg_ECombatTactic type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool is_attacker = 2;
    if (has_is_attacker()) {
      total_size += 1 + 1;
    }

    // optional uint32 attackerNum = 3;
    if (has_attackernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attackernum());
    }

    // optional uint32 defenderNum = 4;
    if (has_defendernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defendernum());
    }

    // optional uint64 roundCount = 5;
    if (has_roundcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roundcount());
    }

    // optional uint32 group_id = 6;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Combat_Select_Tactic_Single::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Combat_Select_Tactic_Single* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Combat_Select_Tactic_Single*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Combat_Select_Tactic_Single::MergeFrom(const GS2C_Combat_Select_Tactic_Single& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_is_attacker()) {
      set_is_attacker(from.is_attacker());
    }
    if (from.has_attackernum()) {
      set_attackernum(from.attackernum());
    }
    if (from.has_defendernum()) {
      set_defendernum(from.defendernum());
    }
    if (from.has_roundcount()) {
      set_roundcount(from.roundcount());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Combat_Select_Tactic_Single::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Combat_Select_Tactic_Single::CopyFrom(const GS2C_Combat_Select_Tactic_Single& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Combat_Select_Tactic_Single::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Combat_Select_Tactic_Single::Swap(GS2C_Combat_Select_Tactic_Single* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(is_attacker_, other->is_attacker_);
    std::swap(attackernum_, other->attackernum_);
    std::swap(defendernum_, other->defendernum_);
    std::swap(roundcount_, other->roundcount_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Combat_Select_Tactic_Single::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Combat_Select_Tactic_Single_descriptor_;
  metadata.reflection = GS2C_Combat_Select_Tactic_Single_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Combat_Unwatch::kGroupIdFieldNumber;
const int C2GS_Combat_Unwatch::kIsInCrossFieldNumber;
#endif  // !_MSC_VER

C2GS_Combat_Unwatch::C2GS_Combat_Unwatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Combat_Unwatch::InitAsDefaultInstance() {
}

C2GS_Combat_Unwatch::C2GS_Combat_Unwatch(const C2GS_Combat_Unwatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Combat_Unwatch::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  is_in_cross_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Combat_Unwatch::~C2GS_Combat_Unwatch() {
  SharedDtor();
}

void C2GS_Combat_Unwatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Combat_Unwatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Combat_Unwatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Combat_Unwatch_descriptor_;
}

const C2GS_Combat_Unwatch& C2GS_Combat_Unwatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

C2GS_Combat_Unwatch* C2GS_Combat_Unwatch::default_instance_ = NULL;

C2GS_Combat_Unwatch* C2GS_Combat_Unwatch::New() const {
  return new C2GS_Combat_Unwatch;
}

void C2GS_Combat_Unwatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
    is_in_cross_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Combat_Unwatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_in_cross;
        break;
      }

      // optional bool is_in_cross = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_in_cross:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_in_cross_)));
          set_has_is_in_cross();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Combat_Unwatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // optional bool is_in_cross = 2;
  if (has_is_in_cross()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_in_cross(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Combat_Unwatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // optional bool is_in_cross = 2;
  if (has_is_in_cross()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_in_cross(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Combat_Unwatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional bool is_in_cross = 2;
    if (has_is_in_cross()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Combat_Unwatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Combat_Unwatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Combat_Unwatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Combat_Unwatch::MergeFrom(const C2GS_Combat_Unwatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_is_in_cross()) {
      set_is_in_cross(from.is_in_cross());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Combat_Unwatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Combat_Unwatch::CopyFrom(const C2GS_Combat_Unwatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Combat_Unwatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Combat_Unwatch::Swap(C2GS_Combat_Unwatch* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(is_in_cross_, other->is_in_cross_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Combat_Unwatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Combat_Unwatch_descriptor_;
  metadata.reflection = C2GS_Combat_Unwatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Combat_End::kIsAttackWinFieldNumber;
const int GS2C_Combat_End::kStatisticExpFieldNumber;
const int GS2C_Combat_End::kStatisticMoneyFieldNumber;
const int GS2C_Combat_End::kStatisticDeadFieldNumber;
const int GS2C_Combat_End::kStatisticKillFieldNumber;
const int GS2C_Combat_End::kRewardsFieldNumber;
const int GS2C_Combat_End::kGroupIdFieldNumber;
const int GS2C_Combat_End::kExtrewardsFieldNumber;
#endif  // !_MSC_VER

GS2C_Combat_End::GS2C_Combat_End()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Combat_End::InitAsDefaultInstance() {
}

GS2C_Combat_End::GS2C_Combat_End(const GS2C_Combat_End& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Combat_End::SharedCtor() {
  _cached_size_ = 0;
  is_attack_win_ = false;
  statisticexp_ = 0u;
  statisticmoney_ = 0u;
  statisticdead_ = 0u;
  statistickill_ = 0u;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Combat_End::~GS2C_Combat_End() {
  SharedDtor();
}

void GS2C_Combat_End::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Combat_End::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Combat_End::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Combat_End_descriptor_;
}

const GS2C_Combat_End& GS2C_Combat_End::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

GS2C_Combat_End* GS2C_Combat_End::default_instance_ = NULL;

GS2C_Combat_End* GS2C_Combat_End::New() const {
  return new GS2C_Combat_End;
}

void GS2C_Combat_End::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_attack_win_ = false;
    statisticexp_ = 0u;
    statisticmoney_ = 0u;
    statisticdead_ = 0u;
    statistickill_ = 0u;
    group_id_ = 0u;
  }
  rewards_.Clear();
  extrewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Combat_End::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_attack_win = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attack_win_)));
          set_has_is_attack_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_statisticExp;
        break;
      }

      // optional uint32 statisticExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_statisticExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &statisticexp_)));
          set_has_statisticexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_statisticMoney;
        break;
      }

      // optional uint32 statisticMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_statisticMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &statisticmoney_)));
          set_has_statisticmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_statisticDead;
        break;
      }

      // optional uint32 statisticDead = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_statisticDead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &statisticdead_)));
          set_has_statisticdead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_statisticKill;
        break;
      }

      // optional uint32 statisticKill = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_statisticKill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &statistickill_)));
          set_has_statistickill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_rewards;
        break;
      }

      // repeated .pb.StReward rewards = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_rewards;
        if (input->ExpectTag(56)) goto parse_group_id;
        break;
      }

      // optional uint32 group_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_Extrewards;
        break;
      }

      // repeated .pb.StReward Extrewards = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Extrewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extrewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_Extrewards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Combat_End::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_attack_win = 1;
  if (has_is_attack_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_attack_win(), output);
  }

  // optional uint32 statisticExp = 2;
  if (has_statisticexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->statisticexp(), output);
  }

  // optional uint32 statisticMoney = 3;
  if (has_statisticmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->statisticmoney(), output);
  }

  // optional uint32 statisticDead = 4;
  if (has_statisticdead()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->statisticdead(), output);
  }

  // optional uint32 statisticKill = 5;
  if (has_statistickill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->statistickill(), output);
  }

  // repeated .pb.StReward rewards = 6;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rewards(i), output);
  }

  // optional uint32 group_id = 7;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->group_id(), output);
  }

  // repeated .pb.StReward Extrewards = 8;
  for (int i = 0; i < this->extrewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->extrewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Combat_End::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_attack_win = 1;
  if (has_is_attack_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_attack_win(), target);
  }

  // optional uint32 statisticExp = 2;
  if (has_statisticexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->statisticexp(), target);
  }

  // optional uint32 statisticMoney = 3;
  if (has_statisticmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->statisticmoney(), target);
  }

  // optional uint32 statisticDead = 4;
  if (has_statisticdead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->statisticdead(), target);
  }

  // optional uint32 statisticKill = 5;
  if (has_statistickill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->statistickill(), target);
  }

  // repeated .pb.StReward rewards = 6;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->rewards(i), target);
  }

  // optional uint32 group_id = 7;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->group_id(), target);
  }

  // repeated .pb.StReward Extrewards = 8;
  for (int i = 0; i < this->extrewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->extrewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Combat_End::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_attack_win = 1;
    if (has_is_attack_win()) {
      total_size += 1 + 1;
    }

    // optional uint32 statisticExp = 2;
    if (has_statisticexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->statisticexp());
    }

    // optional uint32 statisticMoney = 3;
    if (has_statisticmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->statisticmoney());
    }

    // optional uint32 statisticDead = 4;
    if (has_statisticdead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->statisticdead());
    }

    // optional uint32 statisticKill = 5;
    if (has_statistickill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->statistickill());
    }

    // optional uint32 group_id = 7;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

  }
  // repeated .pb.StReward rewards = 6;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  // repeated .pb.StReward Extrewards = 8;
  total_size += 1 * this->extrewards_size();
  for (int i = 0; i < this->extrewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extrewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Combat_End::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Combat_End* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Combat_End*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Combat_End::MergeFrom(const GS2C_Combat_End& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  extrewards_.MergeFrom(from.extrewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_attack_win()) {
      set_is_attack_win(from.is_attack_win());
    }
    if (from.has_statisticexp()) {
      set_statisticexp(from.statisticexp());
    }
    if (from.has_statisticmoney()) {
      set_statisticmoney(from.statisticmoney());
    }
    if (from.has_statisticdead()) {
      set_statisticdead(from.statisticdead());
    }
    if (from.has_statistickill()) {
      set_statistickill(from.statistickill());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Combat_End::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Combat_End::CopyFrom(const GS2C_Combat_End& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Combat_End::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < rewards_size(); i++) {
    if (!this->rewards(i).IsInitialized()) return false;
  }
  for (int i = 0; i < extrewards_size(); i++) {
    if (!this->extrewards(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Combat_End::Swap(GS2C_Combat_End* other) {
  if (other != this) {
    std::swap(is_attack_win_, other->is_attack_win_);
    std::swap(statisticexp_, other->statisticexp_);
    std::swap(statisticmoney_, other->statisticmoney_);
    std::swap(statisticdead_, other->statisticdead_);
    std::swap(statistickill_, other->statistickill_);
    rewards_.Swap(&other->rewards_);
    std::swap(group_id_, other->group_id_);
    extrewards_.Swap(&other->extrewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Combat_End::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Combat_End_descriptor_;
  metadata.reflection = GS2C_Combat_End_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Combat_Hero_Dead::kPlayerIdFieldNumber;
const int GS2C_Combat_Hero_Dead::kHeroIdFieldNumber;
const int GS2C_Combat_Hero_Dead::kGroupIdFieldNumber;
#endif  // !_MSC_VER

GS2C_Combat_Hero_Dead::GS2C_Combat_Hero_Dead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Combat_Hero_Dead::InitAsDefaultInstance() {
}

GS2C_Combat_Hero_Dead::GS2C_Combat_Hero_Dead(const GS2C_Combat_Hero_Dead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Combat_Hero_Dead::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  hero_id_ = 0u;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Combat_Hero_Dead::~GS2C_Combat_Hero_Dead() {
  SharedDtor();
}

void GS2C_Combat_Hero_Dead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Combat_Hero_Dead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Combat_Hero_Dead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Combat_Hero_Dead_descriptor_;
}

const GS2C_Combat_Hero_Dead& GS2C_Combat_Hero_Dead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

GS2C_Combat_Hero_Dead* GS2C_Combat_Hero_Dead::default_instance_ = NULL;

GS2C_Combat_Hero_Dead* GS2C_Combat_Hero_Dead::New() const {
  return new GS2C_Combat_Hero_Dead;
}

void GS2C_Combat_Hero_Dead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    hero_id_ = 0u;
    group_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Combat_Hero_Dead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // required uint32 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // optional uint32 group_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Combat_Hero_Dead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // required uint32 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // optional uint32 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Combat_Hero_Dead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // required uint32 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // optional uint32 group_id = 3;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Combat_Hero_Dead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // required uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Combat_Hero_Dead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Combat_Hero_Dead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Combat_Hero_Dead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Combat_Hero_Dead::MergeFrom(const GS2C_Combat_Hero_Dead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Combat_Hero_Dead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Combat_Hero_Dead::CopyFrom(const GS2C_Combat_Hero_Dead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Combat_Hero_Dead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GS2C_Combat_Hero_Dead::Swap(GS2C_Combat_Hero_Dead* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Combat_Hero_Dead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Combat_Hero_Dead_descriptor_;
  metadata.reflection = GS2C_Combat_Hero_Dead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Combat_Attract_Enemy::kGroupIdFieldNumber;
const int C2GS_Combat_Attract_Enemy::kIsAttackerFieldNumber;
#endif  // !_MSC_VER

C2GS_Combat_Attract_Enemy::C2GS_Combat_Attract_Enemy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Combat_Attract_Enemy::InitAsDefaultInstance() {
}

C2GS_Combat_Attract_Enemy::C2GS_Combat_Attract_Enemy(const C2GS_Combat_Attract_Enemy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Combat_Attract_Enemy::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  is_attacker_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Combat_Attract_Enemy::~C2GS_Combat_Attract_Enemy() {
  SharedDtor();
}

void C2GS_Combat_Attract_Enemy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Combat_Attract_Enemy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Combat_Attract_Enemy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Combat_Attract_Enemy_descriptor_;
}

const C2GS_Combat_Attract_Enemy& C2GS_Combat_Attract_Enemy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

C2GS_Combat_Attract_Enemy* C2GS_Combat_Attract_Enemy::default_instance_ = NULL;

C2GS_Combat_Attract_Enemy* C2GS_Combat_Attract_Enemy::New() const {
  return new C2GS_Combat_Attract_Enemy;
}

void C2GS_Combat_Attract_Enemy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
    is_attacker_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Combat_Attract_Enemy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_attacker;
        break;
      }

      // required bool is_attacker = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_attacker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attacker_)));
          set_has_is_attacker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Combat_Attract_Enemy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // required bool is_attacker = 2;
  if (has_is_attacker()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_attacker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Combat_Attract_Enemy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // required bool is_attacker = 2;
  if (has_is_attacker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_attacker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Combat_Attract_Enemy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required bool is_attacker = 2;
    if (has_is_attacker()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Combat_Attract_Enemy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Combat_Attract_Enemy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Combat_Attract_Enemy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Combat_Attract_Enemy::MergeFrom(const C2GS_Combat_Attract_Enemy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_is_attacker()) {
      set_is_attacker(from.is_attacker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Combat_Attract_Enemy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Combat_Attract_Enemy::CopyFrom(const C2GS_Combat_Attract_Enemy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Combat_Attract_Enemy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2GS_Combat_Attract_Enemy::Swap(C2GS_Combat_Attract_Enemy* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(is_attacker_, other->is_attacker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Combat_Attract_Enemy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Combat_Attract_Enemy_descriptor_;
  metadata.reflection = C2GS_Combat_Attract_Enemy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Combat_Attract_Enemy::kIsSuccessFieldNumber;
const int GS2C_Combat_Attract_Enemy::kGroupIdFieldNumber;
const int GS2C_Combat_Attract_Enemy::kPlayerIdFieldNumber;
const int GS2C_Combat_Attract_Enemy::kHeroTableIdFieldNumber;
const int GS2C_Combat_Attract_Enemy::kCostsFieldNumber;
const int GS2C_Combat_Attract_Enemy::kMyPlayerIdFieldNumber;
const int GS2C_Combat_Attract_Enemy::kMyHeroIdFieldNumber;
const int GS2C_Combat_Attract_Enemy::kOldGroupIdFieldNumber;
#endif  // !_MSC_VER

GS2C_Combat_Attract_Enemy::GS2C_Combat_Attract_Enemy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Combat_Attract_Enemy::InitAsDefaultInstance() {
}

GS2C_Combat_Attract_Enemy::GS2C_Combat_Attract_Enemy(const GS2C_Combat_Attract_Enemy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Combat_Attract_Enemy::SharedCtor() {
  _cached_size_ = 0;
  is_success_ = false;
  group_id_ = 0u;
  player_id_ = GOOGLE_ULONGLONG(0);
  hero_table_id_ = 0u;
  costs_ = GOOGLE_ULONGLONG(0);
  my_player_id_ = GOOGLE_ULONGLONG(0);
  my_hero_id_ = 0u;
  old_group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Combat_Attract_Enemy::~GS2C_Combat_Attract_Enemy() {
  SharedDtor();
}

void GS2C_Combat_Attract_Enemy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Combat_Attract_Enemy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Combat_Attract_Enemy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Combat_Attract_Enemy_descriptor_;
}

const GS2C_Combat_Attract_Enemy& GS2C_Combat_Attract_Enemy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

GS2C_Combat_Attract_Enemy* GS2C_Combat_Attract_Enemy::default_instance_ = NULL;

GS2C_Combat_Attract_Enemy* GS2C_Combat_Attract_Enemy::New() const {
  return new GS2C_Combat_Attract_Enemy;
}

void GS2C_Combat_Attract_Enemy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_success_ = false;
    group_id_ = 0u;
    player_id_ = GOOGLE_ULONGLONG(0);
    hero_table_id_ = 0u;
    costs_ = GOOGLE_ULONGLONG(0);
    my_player_id_ = GOOGLE_ULONGLONG(0);
    my_hero_id_ = 0u;
    old_group_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Combat_Attract_Enemy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_success_)));
          set_has_is_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // optional uint32 group_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_id;
        break;
      }

      // optional uint64 player_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hero_table_id;
        break;
      }

      // optional uint32 hero_table_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_table_id_)));
          set_has_hero_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_costs;
        break;
      }

      // optional uint64 costs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &costs_)));
          set_has_costs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_my_player_id;
        break;
      }

      // optional uint64 my_player_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &my_player_id_)));
          set_has_my_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_my_hero_id;
        break;
      }

      // optional uint32 my_hero_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &my_hero_id_)));
          set_has_my_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_old_group_id;
        break;
      }

      // optional uint32 old_group_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_group_id_)));
          set_has_old_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Combat_Attract_Enemy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_success = 1;
  if (has_is_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_success(), output);
  }

  // optional uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // optional uint64 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->player_id(), output);
  }

  // optional uint32 hero_table_id = 4;
  if (has_hero_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hero_table_id(), output);
  }

  // optional uint64 costs = 5;
  if (has_costs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->costs(), output);
  }

  // optional uint64 my_player_id = 6;
  if (has_my_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->my_player_id(), output);
  }

  // optional uint32 my_hero_id = 7;
  if (has_my_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->my_hero_id(), output);
  }

  // optional uint32 old_group_id = 8;
  if (has_old_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->old_group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Combat_Attract_Enemy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_success = 1;
  if (has_is_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_success(), target);
  }

  // optional uint32 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->group_id(), target);
  }

  // optional uint64 player_id = 3;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->player_id(), target);
  }

  // optional uint32 hero_table_id = 4;
  if (has_hero_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hero_table_id(), target);
  }

  // optional uint64 costs = 5;
  if (has_costs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->costs(), target);
  }

  // optional uint64 my_player_id = 6;
  if (has_my_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->my_player_id(), target);
  }

  // optional uint32 my_hero_id = 7;
  if (has_my_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->my_hero_id(), target);
  }

  // optional uint32 old_group_id = 8;
  if (has_old_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->old_group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Combat_Attract_Enemy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_success = 1;
    if (has_is_success()) {
      total_size += 1 + 1;
    }

    // optional uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional uint64 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint32 hero_table_id = 4;
    if (has_hero_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_table_id());
    }

    // optional uint64 costs = 5;
    if (has_costs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->costs());
    }

    // optional uint64 my_player_id = 6;
    if (has_my_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->my_player_id());
    }

    // optional uint32 my_hero_id = 7;
    if (has_my_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->my_hero_id());
    }

    // optional uint32 old_group_id = 8;
    if (has_old_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Combat_Attract_Enemy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Combat_Attract_Enemy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Combat_Attract_Enemy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Combat_Attract_Enemy::MergeFrom(const GS2C_Combat_Attract_Enemy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_success()) {
      set_is_success(from.is_success());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_hero_table_id()) {
      set_hero_table_id(from.hero_table_id());
    }
    if (from.has_costs()) {
      set_costs(from.costs());
    }
    if (from.has_my_player_id()) {
      set_my_player_id(from.my_player_id());
    }
    if (from.has_my_hero_id()) {
      set_my_hero_id(from.my_hero_id());
    }
    if (from.has_old_group_id()) {
      set_old_group_id(from.old_group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Combat_Attract_Enemy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Combat_Attract_Enemy::CopyFrom(const GS2C_Combat_Attract_Enemy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Combat_Attract_Enemy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Combat_Attract_Enemy::Swap(GS2C_Combat_Attract_Enemy* other) {
  if (other != this) {
    std::swap(is_success_, other->is_success_);
    std::swap(group_id_, other->group_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(hero_table_id_, other->hero_table_id_);
    std::swap(costs_, other->costs_);
    std::swap(my_player_id_, other->my_player_id_);
    std::swap(my_hero_id_, other->my_hero_id_);
    std::swap(old_group_id_, other->old_group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Combat_Attract_Enemy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Combat_Attract_Enemy_descriptor_;
  metadata.reflection = GS2C_Combat_Attract_Enemy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Combat_Rush::kGroupIdFieldNumber;
const int C2GS_Combat_Rush::kIsAttackerFieldNumber;
const int C2GS_Combat_Rush::kCityIdFieldNumber;
const int C2GS_Combat_Rush::kHeroIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Combat_Rush::C2GS_Combat_Rush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Combat_Rush::InitAsDefaultInstance() {
}

C2GS_Combat_Rush::C2GS_Combat_Rush(const C2GS_Combat_Rush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Combat_Rush::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  is_attacker_ = false;
  city_id_ = 0u;
  hero_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Combat_Rush::~C2GS_Combat_Rush() {
  SharedDtor();
}

void C2GS_Combat_Rush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Combat_Rush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Combat_Rush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Combat_Rush_descriptor_;
}

const C2GS_Combat_Rush& C2GS_Combat_Rush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

C2GS_Combat_Rush* C2GS_Combat_Rush::default_instance_ = NULL;

C2GS_Combat_Rush* C2GS_Combat_Rush::New() const {
  return new C2GS_Combat_Rush;
}

void C2GS_Combat_Rush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
    is_attacker_ = false;
    city_id_ = 0u;
    hero_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Combat_Rush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_attacker;
        break;
      }

      // required bool is_attacker = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_attacker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attacker_)));
          set_has_is_attacker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_city_id;
        break;
      }

      // required uint32 city_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hero_id;
        break;
      }

      // required uint32 hero_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Combat_Rush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // required bool is_attacker = 2;
  if (has_is_attacker()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_attacker(), output);
  }

  // required uint32 city_id = 3;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->city_id(), output);
  }

  // required uint32 hero_id = 4;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hero_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Combat_Rush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // required bool is_attacker = 2;
  if (has_is_attacker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_attacker(), target);
  }

  // required uint32 city_id = 3;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->city_id(), target);
  }

  // required uint32 hero_id = 4;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hero_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Combat_Rush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required bool is_attacker = 2;
    if (has_is_attacker()) {
      total_size += 1 + 1;
    }

    // required uint32 city_id = 3;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

    // required uint32 hero_id = 4;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Combat_Rush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Combat_Rush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Combat_Rush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Combat_Rush::MergeFrom(const C2GS_Combat_Rush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_is_attacker()) {
      set_is_attacker(from.is_attacker());
    }
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Combat_Rush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Combat_Rush::CopyFrom(const C2GS_Combat_Rush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Combat_Rush::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void C2GS_Combat_Rush::Swap(C2GS_Combat_Rush* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(is_attacker_, other->is_attacker_);
    std::swap(city_id_, other->city_id_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Combat_Rush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Combat_Rush_descriptor_;
  metadata.reflection = C2GS_Combat_Rush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Rush_Result::kResultFieldNumber;
const int GS2C_Rush_Result::kGroupIdFieldNumber;
const int GS2C_Rush_Result::kRushCdEndTimeFieldNumber;
#endif  // !_MSC_VER

GS2C_Rush_Result::GS2C_Rush_Result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Rush_Result::InitAsDefaultInstance() {
}

GS2C_Rush_Result::GS2C_Rush_Result(const GS2C_Rush_Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Rush_Result::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  group_id_ = 0u;
  rush_cd_end_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Rush_Result::~GS2C_Rush_Result() {
  SharedDtor();
}

void GS2C_Rush_Result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Rush_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Rush_Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Rush_Result_descriptor_;
}

const GS2C_Rush_Result& GS2C_Rush_Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

GS2C_Rush_Result* GS2C_Rush_Result::default_instance_ = NULL;

GS2C_Rush_Result* GS2C_Rush_Result::New() const {
  return new GS2C_Rush_Result;
}

void GS2C_Rush_Result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    group_id_ = 0u;
    rush_cd_end_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Rush_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.Msg_return_common result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Msg_return_common_IsValid(value)) {
            set_result(static_cast< ::pb::Msg_return_common >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // optional uint32 group_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rush_cd_end_time;
        break;
      }

      // optional uint64 rush_cd_end_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rush_cd_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rush_cd_end_time_)));
          set_has_rush_cd_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Rush_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.Msg_return_common result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // optional uint64 rush_cd_end_time = 3;
  if (has_rush_cd_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->rush_cd_end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Rush_Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.Msg_return_common result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->group_id(), target);
  }

  // optional uint64 rush_cd_end_time = 3;
  if (has_rush_cd_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->rush_cd_end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Rush_Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.Msg_return_common result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional uint64 rush_cd_end_time = 3;
    if (has_rush_cd_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rush_cd_end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Rush_Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Rush_Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Rush_Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Rush_Result::MergeFrom(const GS2C_Rush_Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_rush_cd_end_time()) {
      set_rush_cd_end_time(from.rush_cd_end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Rush_Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Rush_Result::CopyFrom(const GS2C_Rush_Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Rush_Result::IsInitialized() const {

  return true;
}

void GS2C_Rush_Result::Swap(GS2C_Rush_Result* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(group_id_, other->group_id_);
    std::swap(rush_cd_end_time_, other->rush_cd_end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Rush_Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Rush_Result_descriptor_;
  metadata.reflection = GS2C_Rush_Result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Combat_Runaway::kGroupIdFieldNumber;
const int C2GS_Combat_Runaway::kIsAttackerFieldNumber;
const int C2GS_Combat_Runaway::kCityIdFieldNumber;
const int C2GS_Combat_Runaway::kHeroIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Combat_Runaway::C2GS_Combat_Runaway()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Combat_Runaway::InitAsDefaultInstance() {
}

C2GS_Combat_Runaway::C2GS_Combat_Runaway(const C2GS_Combat_Runaway& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Combat_Runaway::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  is_attacker_ = false;
  city_id_ = 0u;
  hero_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Combat_Runaway::~C2GS_Combat_Runaway() {
  SharedDtor();
}

void C2GS_Combat_Runaway::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Combat_Runaway::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Combat_Runaway::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Combat_Runaway_descriptor_;
}

const C2GS_Combat_Runaway& C2GS_Combat_Runaway::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

C2GS_Combat_Runaway* C2GS_Combat_Runaway::default_instance_ = NULL;

C2GS_Combat_Runaway* C2GS_Combat_Runaway::New() const {
  return new C2GS_Combat_Runaway;
}

void C2GS_Combat_Runaway::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
    is_attacker_ = false;
    city_id_ = 0u;
    hero_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Combat_Runaway::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_attacker;
        break;
      }

      // required bool is_attacker = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_attacker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attacker_)));
          set_has_is_attacker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_city_id;
        break;
      }

      // required uint32 city_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hero_id;
        break;
      }

      // required uint32 hero_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Combat_Runaway::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // required bool is_attacker = 2;
  if (has_is_attacker()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_attacker(), output);
  }

  // required uint32 city_id = 3;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->city_id(), output);
  }

  // required uint32 hero_id = 4;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hero_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Combat_Runaway::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // required bool is_attacker = 2;
  if (has_is_attacker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_attacker(), target);
  }

  // required uint32 city_id = 3;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->city_id(), target);
  }

  // required uint32 hero_id = 4;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hero_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Combat_Runaway::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required bool is_attacker = 2;
    if (has_is_attacker()) {
      total_size += 1 + 1;
    }

    // required uint32 city_id = 3;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

    // required uint32 hero_id = 4;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Combat_Runaway::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Combat_Runaway* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Combat_Runaway*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Combat_Runaway::MergeFrom(const C2GS_Combat_Runaway& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_is_attacker()) {
      set_is_attacker(from.is_attacker());
    }
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Combat_Runaway::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Combat_Runaway::CopyFrom(const C2GS_Combat_Runaway& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Combat_Runaway::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void C2GS_Combat_Runaway::Swap(C2GS_Combat_Runaway* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(is_attacker_, other->is_attacker_);
    std::swap(city_id_, other->city_id_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Combat_Runaway::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Combat_Runaway_descriptor_;
  metadata.reflection = C2GS_Combat_Runaway_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Combat_Runaway::kResultFieldNumber;
const int GS2C_Combat_Runaway::kGroupIdFieldNumber;
#endif  // !_MSC_VER

GS2C_Combat_Runaway::GS2C_Combat_Runaway()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Combat_Runaway::InitAsDefaultInstance() {
}

GS2C_Combat_Runaway::GS2C_Combat_Runaway(const GS2C_Combat_Runaway& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Combat_Runaway::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Combat_Runaway::~GS2C_Combat_Runaway() {
  SharedDtor();
}

void GS2C_Combat_Runaway::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Combat_Runaway::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Combat_Runaway::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Combat_Runaway_descriptor_;
}

const GS2C_Combat_Runaway& GS2C_Combat_Runaway::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

GS2C_Combat_Runaway* GS2C_Combat_Runaway::default_instance_ = NULL;

GS2C_Combat_Runaway* GS2C_Combat_Runaway::New() const {
  return new GS2C_Combat_Runaway;
}

void GS2C_Combat_Runaway::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    group_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Combat_Runaway::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.Msg_return_common result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Msg_return_common_IsValid(value)) {
            set_result(static_cast< ::pb::Msg_return_common >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // optional uint32 group_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Combat_Runaway::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.Msg_return_common result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Combat_Runaway::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.Msg_return_common result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Combat_Runaway::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.Msg_return_common result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Combat_Runaway::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Combat_Runaway* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Combat_Runaway*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Combat_Runaway::MergeFrom(const GS2C_Combat_Runaway& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Combat_Runaway::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Combat_Runaway::CopyFrom(const GS2C_Combat_Runaway& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Combat_Runaway::IsInitialized() const {

  return true;
}

void GS2C_Combat_Runaway::Swap(GS2C_Combat_Runaway* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Combat_Runaway::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Combat_Runaway_descriptor_;
  metadata.reflection = GS2C_Combat_Runaway_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Combat_Add_Soldier::kGroupIdFieldNumber;
const int C2GS_Combat_Add_Soldier::kIsAttackerFieldNumber;
const int C2GS_Combat_Add_Soldier::kTimesFieldNumber;
const int C2GS_Combat_Add_Soldier::kHeroIdFieldNumber;
const int C2GS_Combat_Add_Soldier::kCurCityIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Combat_Add_Soldier::C2GS_Combat_Add_Soldier()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Combat_Add_Soldier::InitAsDefaultInstance() {
}

C2GS_Combat_Add_Soldier::C2GS_Combat_Add_Soldier(const C2GS_Combat_Add_Soldier& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Combat_Add_Soldier::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  is_attacker_ = false;
  times_ = 0u;
  hero_id_ = 0u;
  curcityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Combat_Add_Soldier::~C2GS_Combat_Add_Soldier() {
  SharedDtor();
}

void C2GS_Combat_Add_Soldier::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Combat_Add_Soldier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Combat_Add_Soldier::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Combat_Add_Soldier_descriptor_;
}

const C2GS_Combat_Add_Soldier& C2GS_Combat_Add_Soldier::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

C2GS_Combat_Add_Soldier* C2GS_Combat_Add_Soldier::default_instance_ = NULL;

C2GS_Combat_Add_Soldier* C2GS_Combat_Add_Soldier::New() const {
  return new C2GS_Combat_Add_Soldier;
}

void C2GS_Combat_Add_Soldier::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
    is_attacker_ = false;
    times_ = 0u;
    hero_id_ = 0u;
    curcityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Combat_Add_Soldier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_attacker;
        break;
      }

      // required bool is_attacker = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_attacker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attacker_)));
          set_has_is_attacker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_times;
        break;
      }

      // required uint32 times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hero_id;
        break;
      }

      // required uint32 hero_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_curCityId;
        break;
      }

      // optional uint32 curCityId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curCityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curcityid_)));
          set_has_curcityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Combat_Add_Soldier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // required bool is_attacker = 2;
  if (has_is_attacker()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_attacker(), output);
  }

  // required uint32 times = 3;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->times(), output);
  }

  // required uint32 hero_id = 4;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hero_id(), output);
  }

  // optional uint32 curCityId = 5;
  if (has_curcityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->curcityid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Combat_Add_Soldier::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // required bool is_attacker = 2;
  if (has_is_attacker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_attacker(), target);
  }

  // required uint32 times = 3;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->times(), target);
  }

  // required uint32 hero_id = 4;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hero_id(), target);
  }

  // optional uint32 curCityId = 5;
  if (has_curcityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->curcityid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Combat_Add_Soldier::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required bool is_attacker = 2;
    if (has_is_attacker()) {
      total_size += 1 + 1;
    }

    // required uint32 times = 3;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

    // required uint32 hero_id = 4;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 curCityId = 5;
    if (has_curcityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curcityid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Combat_Add_Soldier::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Combat_Add_Soldier* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Combat_Add_Soldier*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Combat_Add_Soldier::MergeFrom(const C2GS_Combat_Add_Soldier& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_is_attacker()) {
      set_is_attacker(from.is_attacker());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_curcityid()) {
      set_curcityid(from.curcityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Combat_Add_Soldier::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Combat_Add_Soldier::CopyFrom(const C2GS_Combat_Add_Soldier& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Combat_Add_Soldier::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void C2GS_Combat_Add_Soldier::Swap(C2GS_Combat_Add_Soldier* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(is_attacker_, other->is_attacker_);
    std::swap(times_, other->times_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(curcityid_, other->curcityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Combat_Add_Soldier::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Combat_Add_Soldier_descriptor_;
  metadata.reflection = C2GS_Combat_Add_Soldier_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Combat_Add_Soldier::kResultFieldNumber;
const int GS2C_Combat_Add_Soldier::kAddExpFieldNumber;
const int GS2C_Combat_Add_Soldier::kGroupIdFieldNumber;
#endif  // !_MSC_VER

GS2C_Combat_Add_Soldier::GS2C_Combat_Add_Soldier()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Combat_Add_Soldier::InitAsDefaultInstance() {
}

GS2C_Combat_Add_Soldier::GS2C_Combat_Add_Soldier(const GS2C_Combat_Add_Soldier& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Combat_Add_Soldier::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  addexp_ = 0u;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Combat_Add_Soldier::~GS2C_Combat_Add_Soldier() {
  SharedDtor();
}

void GS2C_Combat_Add_Soldier::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Combat_Add_Soldier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Combat_Add_Soldier::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Combat_Add_Soldier_descriptor_;
}

const GS2C_Combat_Add_Soldier& GS2C_Combat_Add_Soldier::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

GS2C_Combat_Add_Soldier* GS2C_Combat_Add_Soldier::default_instance_ = NULL;

GS2C_Combat_Add_Soldier* GS2C_Combat_Add_Soldier::New() const {
  return new GS2C_Combat_Add_Soldier;
}

void GS2C_Combat_Add_Soldier::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    addexp_ = 0u;
    group_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Combat_Add_Soldier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.Msg_return_common result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Msg_return_common_IsValid(value)) {
            set_result(static_cast< ::pb::Msg_return_common >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_addExp;
        break;
      }

      // optional uint32 addExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addexp_)));
          set_has_addexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // optional uint32 group_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Combat_Add_Soldier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.Msg_return_common result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 addExp = 2;
  if (has_addexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->addexp(), output);
  }

  // optional uint32 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Combat_Add_Soldier::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.Msg_return_common result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 addExp = 2;
  if (has_addexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->addexp(), target);
  }

  // optional uint32 group_id = 3;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Combat_Add_Soldier::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.Msg_return_common result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 addExp = 2;
    if (has_addexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addexp());
    }

    // optional uint32 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Combat_Add_Soldier::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Combat_Add_Soldier* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Combat_Add_Soldier*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Combat_Add_Soldier::MergeFrom(const GS2C_Combat_Add_Soldier& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_addexp()) {
      set_addexp(from.addexp());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Combat_Add_Soldier::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Combat_Add_Soldier::CopyFrom(const GS2C_Combat_Add_Soldier& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Combat_Add_Soldier::IsInitialized() const {

  return true;
}

void GS2C_Combat_Add_Soldier::Swap(GS2C_Combat_Add_Soldier* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(addexp_, other->addexp_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Combat_Add_Soldier::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Combat_Add_Soldier_descriptor_;
  metadata.reflection = GS2C_Combat_Add_Soldier_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Combat_Call_Up::kCityIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Combat_Call_Up::C2GS_Combat_Call_Up()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Combat_Call_Up::InitAsDefaultInstance() {
}

C2GS_Combat_Call_Up::C2GS_Combat_Call_Up(const C2GS_Combat_Call_Up& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Combat_Call_Up::SharedCtor() {
  _cached_size_ = 0;
  city_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Combat_Call_Up::~C2GS_Combat_Call_Up() {
  SharedDtor();
}

void C2GS_Combat_Call_Up::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Combat_Call_Up::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Combat_Call_Up::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Combat_Call_Up_descriptor_;
}

const C2GS_Combat_Call_Up& C2GS_Combat_Call_Up::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

C2GS_Combat_Call_Up* C2GS_Combat_Call_Up::default_instance_ = NULL;

C2GS_Combat_Call_Up* C2GS_Combat_Call_Up::New() const {
  return new C2GS_Combat_Call_Up;
}

void C2GS_Combat_Call_Up::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    city_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Combat_Call_Up::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 city_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Combat_Call_Up::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->city_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Combat_Call_Up::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->city_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Combat_Call_Up::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 city_id = 1;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Combat_Call_Up::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Combat_Call_Up* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Combat_Call_Up*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Combat_Call_Up::MergeFrom(const C2GS_Combat_Call_Up& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Combat_Call_Up::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Combat_Call_Up::CopyFrom(const C2GS_Combat_Call_Up& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Combat_Call_Up::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Combat_Call_Up::Swap(C2GS_Combat_Call_Up* other) {
  if (other != this) {
    std::swap(city_id_, other->city_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Combat_Call_Up::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Combat_Call_Up_descriptor_;
  metadata.reflection = C2GS_Combat_Call_Up_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Combat_Call_Up::kResultFieldNumber;
#endif  // !_MSC_VER

GS2C_Combat_Call_Up::GS2C_Combat_Call_Up()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Combat_Call_Up::InitAsDefaultInstance() {
}

GS2C_Combat_Call_Up::GS2C_Combat_Call_Up(const GS2C_Combat_Call_Up& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Combat_Call_Up::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Combat_Call_Up::~GS2C_Combat_Call_Up() {
  SharedDtor();
}

void GS2C_Combat_Call_Up::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Combat_Call_Up::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Combat_Call_Up::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Combat_Call_Up_descriptor_;
}

const GS2C_Combat_Call_Up& GS2C_Combat_Call_Up::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

GS2C_Combat_Call_Up* GS2C_Combat_Call_Up::default_instance_ = NULL;

GS2C_Combat_Call_Up* GS2C_Combat_Call_Up::New() const {
  return new GS2C_Combat_Call_Up;
}

void GS2C_Combat_Call_Up::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Combat_Call_Up::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.Msg_return_common result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Msg_return_common_IsValid(value)) {
            set_result(static_cast< ::pb::Msg_return_common >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Combat_Call_Up::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.Msg_return_common result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Combat_Call_Up::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.Msg_return_common result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Combat_Call_Up::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.Msg_return_common result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Combat_Call_Up::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Combat_Call_Up* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Combat_Call_Up*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Combat_Call_Up::MergeFrom(const GS2C_Combat_Call_Up& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Combat_Call_Up::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Combat_Call_Up::CopyFrom(const GS2C_Combat_Call_Up& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Combat_Call_Up::IsInitialized() const {

  return true;
}

void GS2C_Combat_Call_Up::Swap(GS2C_Combat_Call_Up* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Combat_Call_Up::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Combat_Call_Up_descriptor_;
  metadata.reflection = GS2C_Combat_Call_Up_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Combat_Call_Request::kHeroIdFieldNumber;
const int C2GS_Combat_Call_Request::kDestCityIDFieldNumber;
#endif  // !_MSC_VER

C2GS_Combat_Call_Request::C2GS_Combat_Call_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Combat_Call_Request::InitAsDefaultInstance() {
}

C2GS_Combat_Call_Request::C2GS_Combat_Call_Request(const C2GS_Combat_Call_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Combat_Call_Request::SharedCtor() {
  _cached_size_ = 0;
  destcityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Combat_Call_Request::~C2GS_Combat_Call_Request() {
  SharedDtor();
}

void C2GS_Combat_Call_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Combat_Call_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Combat_Call_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Combat_Call_Request_descriptor_;
}

const C2GS_Combat_Call_Request& C2GS_Combat_Call_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

C2GS_Combat_Call_Request* C2GS_Combat_Call_Request::default_instance_ = NULL;

C2GS_Combat_Call_Request* C2GS_Combat_Call_Request::New() const {
  return new C2GS_Combat_Call_Request;
}

void C2GS_Combat_Call_Request::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    destcityid_ = 0u;
  }
  hero_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Combat_Call_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_hero_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hero_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_hero_id;
        if (input->ExpectTag(16)) goto parse_destCityID;
        break;
      }

      // optional uint32 destCityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destCityID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destcityid_)));
          set_has_destcityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Combat_Call_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 hero_id = 1;
  for (int i = 0; i < this->hero_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->hero_id(i), output);
  }

  // optional uint32 destCityID = 2;
  if (has_destcityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->destcityid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Combat_Call_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 hero_id = 1;
  for (int i = 0; i < this->hero_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->hero_id(i), target);
  }

  // optional uint32 destCityID = 2;
  if (has_destcityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->destcityid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Combat_Call_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 destCityID = 2;
    if (has_destcityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destcityid());
    }

  }
  // repeated uint32 hero_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->hero_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hero_id(i));
    }
    total_size += 1 * this->hero_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Combat_Call_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Combat_Call_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Combat_Call_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Combat_Call_Request::MergeFrom(const C2GS_Combat_Call_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_id_.MergeFrom(from.hero_id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_destcityid()) {
      set_destcityid(from.destcityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Combat_Call_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Combat_Call_Request::CopyFrom(const C2GS_Combat_Call_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Combat_Call_Request::IsInitialized() const {

  return true;
}

void C2GS_Combat_Call_Request::Swap(C2GS_Combat_Call_Request* other) {
  if (other != this) {
    hero_id_.Swap(&other->hero_id_);
    std::swap(destcityid_, other->destcityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Combat_Call_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Combat_Call_Request_descriptor_;
  metadata.reflection = C2GS_Combat_Call_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Combat_Call_Request::kResultFieldNumber;
const int GS2C_Combat_Call_Request::kCallUpDownIdFieldNumber;
#endif  // !_MSC_VER

GS2C_Combat_Call_Request::GS2C_Combat_Call_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Combat_Call_Request::InitAsDefaultInstance() {
}

GS2C_Combat_Call_Request::GS2C_Combat_Call_Request(const GS2C_Combat_Call_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Combat_Call_Request::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  call_up_down_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Combat_Call_Request::~GS2C_Combat_Call_Request() {
  SharedDtor();
}

void GS2C_Combat_Call_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Combat_Call_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Combat_Call_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Combat_Call_Request_descriptor_;
}

const GS2C_Combat_Call_Request& GS2C_Combat_Call_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

GS2C_Combat_Call_Request* GS2C_Combat_Call_Request::default_instance_ = NULL;

GS2C_Combat_Call_Request* GS2C_Combat_Call_Request::New() const {
  return new GS2C_Combat_Call_Request;
}

void GS2C_Combat_Call_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    call_up_down_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Combat_Call_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.Msg_return_common result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Msg_return_common_IsValid(value)) {
            set_result(static_cast< ::pb::Msg_return_common >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_call_up_down_id;
        break;
      }

      // optional uint64 call_up_down_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_call_up_down_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &call_up_down_id_)));
          set_has_call_up_down_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Combat_Call_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.Msg_return_common result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint64 call_up_down_id = 2;
  if (has_call_up_down_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->call_up_down_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Combat_Call_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.Msg_return_common result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint64 call_up_down_id = 2;
  if (has_call_up_down_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->call_up_down_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Combat_Call_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.Msg_return_common result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint64 call_up_down_id = 2;
    if (has_call_up_down_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->call_up_down_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Combat_Call_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Combat_Call_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Combat_Call_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Combat_Call_Request::MergeFrom(const GS2C_Combat_Call_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_call_up_down_id()) {
      set_call_up_down_id(from.call_up_down_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Combat_Call_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Combat_Call_Request::CopyFrom(const GS2C_Combat_Call_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Combat_Call_Request::IsInitialized() const {

  return true;
}

void GS2C_Combat_Call_Request::Swap(GS2C_Combat_Call_Request* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(call_up_down_id_, other->call_up_down_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Combat_Call_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Combat_Call_Request_descriptor_;
  metadata.reflection = GS2C_Combat_Call_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Combat_Speed_Up::kGroupIdFieldNumber;
const int C2GS_Combat_Speed_Up::kCityIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Combat_Speed_Up::C2GS_Combat_Speed_Up()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Combat_Speed_Up::InitAsDefaultInstance() {
}

C2GS_Combat_Speed_Up::C2GS_Combat_Speed_Up(const C2GS_Combat_Speed_Up& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Combat_Speed_Up::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  city_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Combat_Speed_Up::~C2GS_Combat_Speed_Up() {
  SharedDtor();
}

void C2GS_Combat_Speed_Up::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Combat_Speed_Up::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Combat_Speed_Up::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Combat_Speed_Up_descriptor_;
}

const C2GS_Combat_Speed_Up& C2GS_Combat_Speed_Up::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

C2GS_Combat_Speed_Up* C2GS_Combat_Speed_Up::default_instance_ = NULL;

C2GS_Combat_Speed_Up* C2GS_Combat_Speed_Up::New() const {
  return new C2GS_Combat_Speed_Up;
}

void C2GS_Combat_Speed_Up::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
    city_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Combat_Speed_Up::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_city_id;
        break;
      }

      // required uint32 city_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Combat_Speed_Up::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // required uint32 city_id = 2;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->city_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Combat_Speed_Up::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // required uint32 city_id = 2;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->city_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Combat_Speed_Up::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 city_id = 2;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Combat_Speed_Up::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Combat_Speed_Up* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Combat_Speed_Up*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Combat_Speed_Up::MergeFrom(const C2GS_Combat_Speed_Up& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Combat_Speed_Up::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Combat_Speed_Up::CopyFrom(const C2GS_Combat_Speed_Up& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Combat_Speed_Up::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2GS_Combat_Speed_Up::Swap(C2GS_Combat_Speed_Up* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(city_id_, other->city_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Combat_Speed_Up::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Combat_Speed_Up_descriptor_;
  metadata.reflection = C2GS_Combat_Speed_Up_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Combat_Speed_Up::kGroupIdFieldNumber;
#endif  // !_MSC_VER

GS2C_Combat_Speed_Up::GS2C_Combat_Speed_Up()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Combat_Speed_Up::InitAsDefaultInstance() {
}

GS2C_Combat_Speed_Up::GS2C_Combat_Speed_Up(const GS2C_Combat_Speed_Up& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Combat_Speed_Up::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Combat_Speed_Up::~GS2C_Combat_Speed_Up() {
  SharedDtor();
}

void GS2C_Combat_Speed_Up::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Combat_Speed_Up::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Combat_Speed_Up::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Combat_Speed_Up_descriptor_;
}

const GS2C_Combat_Speed_Up& GS2C_Combat_Speed_Up::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

GS2C_Combat_Speed_Up* GS2C_Combat_Speed_Up::default_instance_ = NULL;

GS2C_Combat_Speed_Up* GS2C_Combat_Speed_Up::New() const {
  return new GS2C_Combat_Speed_Up;
}

void GS2C_Combat_Speed_Up::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Combat_Speed_Up::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Combat_Speed_Up::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Combat_Speed_Up::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Combat_Speed_Up::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Combat_Speed_Up::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Combat_Speed_Up* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Combat_Speed_Up*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Combat_Speed_Up::MergeFrom(const GS2C_Combat_Speed_Up& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Combat_Speed_Up::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Combat_Speed_Up::CopyFrom(const GS2C_Combat_Speed_Up& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Combat_Speed_Up::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Combat_Speed_Up::Swap(GS2C_Combat_Speed_Up* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Combat_Speed_Up::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Combat_Speed_Up_descriptor_;
  metadata.reflection = GS2C_Combat_Speed_Up_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Auto_Combat::kUseAutoFieldNumber;
#endif  // !_MSC_VER

C2GS_Auto_Combat::C2GS_Auto_Combat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Auto_Combat::InitAsDefaultInstance() {
}

C2GS_Auto_Combat::C2GS_Auto_Combat(const C2GS_Auto_Combat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Auto_Combat::SharedCtor() {
  _cached_size_ = 0;
  useauto_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Auto_Combat::~C2GS_Auto_Combat() {
  SharedDtor();
}

void C2GS_Auto_Combat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Auto_Combat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Auto_Combat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Auto_Combat_descriptor_;
}

const C2GS_Auto_Combat& C2GS_Auto_Combat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

C2GS_Auto_Combat* C2GS_Auto_Combat::default_instance_ = NULL;

C2GS_Auto_Combat* C2GS_Auto_Combat::New() const {
  return new C2GS_Auto_Combat;
}

void C2GS_Auto_Combat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    useauto_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Auto_Combat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool useAuto = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &useauto_)));
          set_has_useauto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Auto_Combat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool useAuto = 2;
  if (has_useauto()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->useauto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Auto_Combat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool useAuto = 2;
  if (has_useauto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->useauto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Auto_Combat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool useAuto = 2;
    if (has_useauto()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Auto_Combat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Auto_Combat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Auto_Combat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Auto_Combat::MergeFrom(const C2GS_Auto_Combat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_useauto()) {
      set_useauto(from.useauto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Auto_Combat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Auto_Combat::CopyFrom(const C2GS_Auto_Combat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Auto_Combat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Auto_Combat::Swap(C2GS_Auto_Combat* other) {
  if (other != this) {
    std::swap(useauto_, other->useauto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Auto_Combat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Auto_Combat_descriptor_;
  metadata.reflection = C2GS_Auto_Combat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Auto_Combat::kUseAutoFieldNumber;
const int GS2C_Auto_Combat::kIsSetSuccessFieldNumber;
#endif  // !_MSC_VER

GS2C_Auto_Combat::GS2C_Auto_Combat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Auto_Combat::InitAsDefaultInstance() {
}

GS2C_Auto_Combat::GS2C_Auto_Combat(const GS2C_Auto_Combat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Auto_Combat::SharedCtor() {
  _cached_size_ = 0;
  useauto_ = false;
  issetsuccess_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Auto_Combat::~GS2C_Auto_Combat() {
  SharedDtor();
}

void GS2C_Auto_Combat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Auto_Combat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Auto_Combat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Auto_Combat_descriptor_;
}

const GS2C_Auto_Combat& GS2C_Auto_Combat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

GS2C_Auto_Combat* GS2C_Auto_Combat::default_instance_ = NULL;

GS2C_Auto_Combat* GS2C_Auto_Combat::New() const {
  return new GS2C_Auto_Combat;
}

void GS2C_Auto_Combat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    useauto_ = false;
    issetsuccess_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Auto_Combat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool useAuto = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &useauto_)));
          set_has_useauto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isSetSuccess;
        break;
      }

      // optional bool isSetSuccess = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSetSuccess:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issetsuccess_)));
          set_has_issetsuccess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Auto_Combat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool useAuto = 1;
  if (has_useauto()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->useauto(), output);
  }

  // optional bool isSetSuccess = 2;
  if (has_issetsuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->issetsuccess(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Auto_Combat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool useAuto = 1;
  if (has_useauto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->useauto(), target);
  }

  // optional bool isSetSuccess = 2;
  if (has_issetsuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->issetsuccess(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Auto_Combat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool useAuto = 1;
    if (has_useauto()) {
      total_size += 1 + 1;
    }

    // optional bool isSetSuccess = 2;
    if (has_issetsuccess()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Auto_Combat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Auto_Combat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Auto_Combat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Auto_Combat::MergeFrom(const GS2C_Auto_Combat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_useauto()) {
      set_useauto(from.useauto());
    }
    if (from.has_issetsuccess()) {
      set_issetsuccess(from.issetsuccess());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Auto_Combat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Auto_Combat::CopyFrom(const GS2C_Auto_Combat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Auto_Combat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Auto_Combat::Swap(GS2C_Auto_Combat* other) {
  if (other != this) {
    std::swap(useauto_, other->useauto_);
    std::swap(issetsuccess_, other->issetsuccess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Auto_Combat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Auto_Combat_descriptor_;
  metadata.reflection = GS2C_Auto_Combat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Quick_Combat::kGroupIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Quick_Combat::C2GS_Quick_Combat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Quick_Combat::InitAsDefaultInstance() {
}

C2GS_Quick_Combat::C2GS_Quick_Combat(const C2GS_Quick_Combat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Quick_Combat::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Quick_Combat::~C2GS_Quick_Combat() {
  SharedDtor();
}

void C2GS_Quick_Combat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Quick_Combat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Quick_Combat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Quick_Combat_descriptor_;
}

const C2GS_Quick_Combat& C2GS_Quick_Combat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

C2GS_Quick_Combat* C2GS_Quick_Combat::default_instance_ = NULL;

C2GS_Quick_Combat* C2GS_Quick_Combat::New() const {
  return new C2GS_Quick_Combat;
}

void C2GS_Quick_Combat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Quick_Combat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Quick_Combat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Quick_Combat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Quick_Combat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Quick_Combat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Quick_Combat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Quick_Combat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Quick_Combat::MergeFrom(const C2GS_Quick_Combat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Quick_Combat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Quick_Combat::CopyFrom(const C2GS_Quick_Combat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Quick_Combat::IsInitialized() const {

  return true;
}

void C2GS_Quick_Combat::Swap(C2GS_Quick_Combat* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Quick_Combat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Quick_Combat_descriptor_;
  metadata.reflection = C2GS_Quick_Combat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Quick_Combat::kRetFieldNumber;
const int GS2C_Quick_Combat::kGroupIdFieldNumber;
#endif  // !_MSC_VER

GS2C_Quick_Combat::GS2C_Quick_Combat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Quick_Combat::InitAsDefaultInstance() {
}

GS2C_Quick_Combat::GS2C_Quick_Combat(const GS2C_Quick_Combat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Quick_Combat::SharedCtor() {
  _cached_size_ = 0;
  ret_ = false;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Quick_Combat::~GS2C_Quick_Combat() {
  SharedDtor();
}

void GS2C_Quick_Combat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Quick_Combat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Quick_Combat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Quick_Combat_descriptor_;
}

const GS2C_Quick_Combat& GS2C_Quick_Combat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

GS2C_Quick_Combat* GS2C_Quick_Combat::default_instance_ = NULL;

GS2C_Quick_Combat* GS2C_Quick_Combat::New() const {
  return new GS2C_Quick_Combat;
}

void GS2C_Quick_Combat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = false;
    group_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Quick_Combat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // optional uint32 group_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Quick_Combat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ret(), output);
  }

  // optional uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Quick_Combat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ret(), target);
  }

  // optional uint32 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Quick_Combat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool ret = 1;
    if (has_ret()) {
      total_size += 1 + 1;
    }

    // optional uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Quick_Combat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Quick_Combat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Quick_Combat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Quick_Combat::MergeFrom(const GS2C_Quick_Combat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Quick_Combat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Quick_Combat::CopyFrom(const GS2C_Quick_Combat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Quick_Combat::IsInitialized() const {

  return true;
}

void GS2C_Quick_Combat::Swap(GS2C_Quick_Combat* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Quick_Combat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Quick_Combat_descriptor_;
  metadata.reflection = GS2C_Quick_Combat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Combat_Hero_Status::kHeroTidFieldNumber;
const int C2GS_Combat_Hero_Status::kIsFakeCharFieldNumber;
#endif  // !_MSC_VER

C2GS_Combat_Hero_Status::C2GS_Combat_Hero_Status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Combat_Hero_Status::InitAsDefaultInstance() {
}

C2GS_Combat_Hero_Status::C2GS_Combat_Hero_Status(const C2GS_Combat_Hero_Status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Combat_Hero_Status::SharedCtor() {
  _cached_size_ = 0;
  hero_tid_ = 0u;
  isfakechar_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Combat_Hero_Status::~C2GS_Combat_Hero_Status() {
  SharedDtor();
}

void C2GS_Combat_Hero_Status::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Combat_Hero_Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Combat_Hero_Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Combat_Hero_Status_descriptor_;
}

const C2GS_Combat_Hero_Status& C2GS_Combat_Hero_Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

C2GS_Combat_Hero_Status* C2GS_Combat_Hero_Status::default_instance_ = NULL;

C2GS_Combat_Hero_Status* C2GS_Combat_Hero_Status::New() const {
  return new C2GS_Combat_Hero_Status;
}

void C2GS_Combat_Hero_Status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_tid_ = 0u;
    isfakechar_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Combat_Hero_Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hero_tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_tid_)));
          set_has_hero_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isFakeChar;
        break;
      }

      // optional bool isFakeChar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFakeChar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfakechar_)));
          set_has_isfakechar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Combat_Hero_Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hero_tid = 1;
  if (has_hero_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_tid(), output);
  }

  // optional bool isFakeChar = 2;
  if (has_isfakechar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isfakechar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Combat_Hero_Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hero_tid = 1;
  if (has_hero_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_tid(), target);
  }

  // optional bool isFakeChar = 2;
  if (has_isfakechar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isfakechar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Combat_Hero_Status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hero_tid = 1;
    if (has_hero_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_tid());
    }

    // optional bool isFakeChar = 2;
    if (has_isfakechar()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Combat_Hero_Status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Combat_Hero_Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Combat_Hero_Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Combat_Hero_Status::MergeFrom(const C2GS_Combat_Hero_Status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_tid()) {
      set_hero_tid(from.hero_tid());
    }
    if (from.has_isfakechar()) {
      set_isfakechar(from.isfakechar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Combat_Hero_Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Combat_Hero_Status::CopyFrom(const C2GS_Combat_Hero_Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Combat_Hero_Status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Combat_Hero_Status::Swap(C2GS_Combat_Hero_Status* other) {
  if (other != this) {
    std::swap(hero_tid_, other->hero_tid_);
    std::swap(isfakechar_, other->isfakechar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Combat_Hero_Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Combat_Hero_Status_descriptor_;
  metadata.reflection = C2GS_Combat_Hero_Status_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Combat_Hero_Status::kHeroTidFieldNumber;
const int GS2C_Combat_Hero_Status::kIsInCombatFieldNumber;
const int GS2C_Combat_Hero_Status::kIsFightingFieldNumber;
const int GS2C_Combat_Hero_Status::kIsDeadFieldNumber;
const int GS2C_Combat_Hero_Status::kCombatTypeFieldNumber;
const int GS2C_Combat_Hero_Status::kGroupIdFieldNumber;
const int GS2C_Combat_Hero_Status::kIsInAttractFieldNumber;
const int GS2C_Combat_Hero_Status::kCityIdFieldNumber;
const int GS2C_Combat_Hero_Status::kIsFakeCharFieldNumber;
#endif  // !_MSC_VER

GS2C_Combat_Hero_Status::GS2C_Combat_Hero_Status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Combat_Hero_Status::InitAsDefaultInstance() {
}

GS2C_Combat_Hero_Status::GS2C_Combat_Hero_Status(const GS2C_Combat_Hero_Status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Combat_Hero_Status::SharedCtor() {
  _cached_size_ = 0;
  hero_tid_ = 0u;
  is_in_combat_ = false;
  is_fighting_ = false;
  is_dead_ = false;
  combat_type_ = 0u;
  group_id_ = 0u;
  is_in_attract_ = false;
  cityid_ = 0u;
  isfakechar_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Combat_Hero_Status::~GS2C_Combat_Hero_Status() {
  SharedDtor();
}

void GS2C_Combat_Hero_Status::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Combat_Hero_Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Combat_Hero_Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Combat_Hero_Status_descriptor_;
}

const GS2C_Combat_Hero_Status& GS2C_Combat_Hero_Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

GS2C_Combat_Hero_Status* GS2C_Combat_Hero_Status::default_instance_ = NULL;

GS2C_Combat_Hero_Status* GS2C_Combat_Hero_Status::New() const {
  return new GS2C_Combat_Hero_Status;
}

void GS2C_Combat_Hero_Status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_tid_ = 0u;
    is_in_combat_ = false;
    is_fighting_ = false;
    is_dead_ = false;
    combat_type_ = 0u;
    group_id_ = 0u;
    is_in_attract_ = false;
    cityid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isfakechar_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Combat_Hero_Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hero_tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_tid_)));
          set_has_hero_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_in_combat;
        break;
      }

      // optional bool is_in_combat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_in_combat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_in_combat_)));
          set_has_is_in_combat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_fighting;
        break;
      }

      // optional bool is_fighting = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_fighting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_fighting_)));
          set_has_is_fighting();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_dead;
        break;
      }

      // optional bool is_dead = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_dead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dead_)));
          set_has_is_dead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_combat_type;
        break;
      }

      // optional uint32 combat_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combat_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combat_type_)));
          set_has_combat_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_group_id;
        break;
      }

      // optional uint32 group_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_in_attract;
        break;
      }

      // optional bool is_in_attract = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_in_attract:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_in_attract_)));
          set_has_is_in_attract();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cityId;
        break;
      }

      // optional uint32 cityId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isFakeChar;
        break;
      }

      // optional bool isFakeChar = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFakeChar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfakechar_)));
          set_has_isfakechar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Combat_Hero_Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hero_tid = 1;
  if (has_hero_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_tid(), output);
  }

  // optional bool is_in_combat = 2;
  if (has_is_in_combat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_in_combat(), output);
  }

  // optional bool is_fighting = 3;
  if (has_is_fighting()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_fighting(), output);
  }

  // optional bool is_dead = 4;
  if (has_is_dead()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_dead(), output);
  }

  // optional uint32 combat_type = 5;
  if (has_combat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->combat_type(), output);
  }

  // optional uint32 group_id = 6;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->group_id(), output);
  }

  // optional bool is_in_attract = 7;
  if (has_is_in_attract()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_in_attract(), output);
  }

  // optional uint32 cityId = 8;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->cityid(), output);
  }

  // optional bool isFakeChar = 9;
  if (has_isfakechar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isfakechar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Combat_Hero_Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hero_tid = 1;
  if (has_hero_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_tid(), target);
  }

  // optional bool is_in_combat = 2;
  if (has_is_in_combat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_in_combat(), target);
  }

  // optional bool is_fighting = 3;
  if (has_is_fighting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_fighting(), target);
  }

  // optional bool is_dead = 4;
  if (has_is_dead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_dead(), target);
  }

  // optional uint32 combat_type = 5;
  if (has_combat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->combat_type(), target);
  }

  // optional uint32 group_id = 6;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->group_id(), target);
  }

  // optional bool is_in_attract = 7;
  if (has_is_in_attract()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_in_attract(), target);
  }

  // optional uint32 cityId = 8;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->cityid(), target);
  }

  // optional bool isFakeChar = 9;
  if (has_isfakechar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isfakechar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Combat_Hero_Status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hero_tid = 1;
    if (has_hero_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_tid());
    }

    // optional bool is_in_combat = 2;
    if (has_is_in_combat()) {
      total_size += 1 + 1;
    }

    // optional bool is_fighting = 3;
    if (has_is_fighting()) {
      total_size += 1 + 1;
    }

    // optional bool is_dead = 4;
    if (has_is_dead()) {
      total_size += 1 + 1;
    }

    // optional uint32 combat_type = 5;
    if (has_combat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combat_type());
    }

    // optional uint32 group_id = 6;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional bool is_in_attract = 7;
    if (has_is_in_attract()) {
      total_size += 1 + 1;
    }

    // optional uint32 cityId = 8;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool isFakeChar = 9;
    if (has_isfakechar()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Combat_Hero_Status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Combat_Hero_Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Combat_Hero_Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Combat_Hero_Status::MergeFrom(const GS2C_Combat_Hero_Status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_tid()) {
      set_hero_tid(from.hero_tid());
    }
    if (from.has_is_in_combat()) {
      set_is_in_combat(from.is_in_combat());
    }
    if (from.has_is_fighting()) {
      set_is_fighting(from.is_fighting());
    }
    if (from.has_is_dead()) {
      set_is_dead(from.is_dead());
    }
    if (from.has_combat_type()) {
      set_combat_type(from.combat_type());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_is_in_attract()) {
      set_is_in_attract(from.is_in_attract());
    }
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isfakechar()) {
      set_isfakechar(from.isfakechar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Combat_Hero_Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Combat_Hero_Status::CopyFrom(const GS2C_Combat_Hero_Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Combat_Hero_Status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Combat_Hero_Status::Swap(GS2C_Combat_Hero_Status* other) {
  if (other != this) {
    std::swap(hero_tid_, other->hero_tid_);
    std::swap(is_in_combat_, other->is_in_combat_);
    std::swap(is_fighting_, other->is_fighting_);
    std::swap(is_dead_, other->is_dead_);
    std::swap(combat_type_, other->combat_type_);
    std::swap(group_id_, other->group_id_);
    std::swap(is_in_attract_, other->is_in_attract_);
    std::swap(cityid_, other->cityid_);
    std::swap(isfakechar_, other->isfakechar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Combat_Hero_Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Combat_Hero_Status_descriptor_;
  metadata.reflection = GS2C_Combat_Hero_Status_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_Combat_Crusade::kLevelIdFieldNumber;
const int GxDB_Combat_Crusade::kStageStateFieldNumber;
const int GxDB_Combat_Crusade::kRewardsStateFieldNumber;
const int GxDB_Combat_Crusade::kResetLefttimesFieldNumber;
const int GxDB_Combat_Crusade::kAddLefttimesFieldNumber;
const int GxDB_Combat_Crusade::kIsCrusadeOverFieldNumber;
const int GxDB_Combat_Crusade::kCharTimeListFieldNumber;
#endif  // !_MSC_VER

GxDB_Combat_Crusade::GxDB_Combat_Crusade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_Combat_Crusade::InitAsDefaultInstance() {
}

GxDB_Combat_Crusade::GxDB_Combat_Crusade(const GxDB_Combat_Crusade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_Combat_Crusade::SharedCtor() {
  _cached_size_ = 0;
  level_id_ = 0u;
  stage_state_ = 0u;
  rewards_state_ = 0u;
  reset_lefttimes_ = 0u;
  add_lefttimes_ = 0u;
  is_crusade_over_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_Combat_Crusade::~GxDB_Combat_Crusade() {
  SharedDtor();
}

void GxDB_Combat_Crusade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_Combat_Crusade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_Combat_Crusade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_Combat_Crusade_descriptor_;
}

const GxDB_Combat_Crusade& GxDB_Combat_Crusade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

GxDB_Combat_Crusade* GxDB_Combat_Crusade::default_instance_ = NULL;

GxDB_Combat_Crusade* GxDB_Combat_Crusade::New() const {
  return new GxDB_Combat_Crusade;
}

void GxDB_Combat_Crusade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_id_ = 0u;
    stage_state_ = 0u;
    rewards_state_ = 0u;
    reset_lefttimes_ = 0u;
    add_lefttimes_ = 0u;
    is_crusade_over_ = 0u;
  }
  chartimelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_Combat_Crusade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_id_)));
          set_has_level_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stage_state;
        break;
      }

      // required uint32 stage_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_state_)));
          set_has_stage_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rewards_state;
        break;
      }

      // required uint32 rewards_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewards_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewards_state_)));
          set_has_rewards_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reset_lefttimes;
        break;
      }

      // required uint32 reset_lefttimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset_lefttimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reset_lefttimes_)));
          set_has_reset_lefttimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_add_lefttimes;
        break;
      }

      // required uint32 add_lefttimes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_lefttimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_lefttimes_)));
          set_has_add_lefttimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_Crusade_over;
        break;
      }

      // optional uint32 is_Crusade_over = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_Crusade_over:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_crusade_over_)));
          set_has_is_crusade_over();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_charTimeList;
        break;
      }

      // repeated .pb.PairValue charTimeList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charTimeList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chartimelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_charTimeList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_Combat_Crusade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 level_id = 1;
  if (has_level_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level_id(), output);
  }

  // required uint32 stage_state = 2;
  if (has_stage_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stage_state(), output);
  }

  // required uint32 rewards_state = 3;
  if (has_rewards_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rewards_state(), output);
  }

  // required uint32 reset_lefttimes = 4;
  if (has_reset_lefttimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reset_lefttimes(), output);
  }

  // required uint32 add_lefttimes = 5;
  if (has_add_lefttimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->add_lefttimes(), output);
  }

  // optional uint32 is_Crusade_over = 6;
  if (has_is_crusade_over()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->is_crusade_over(), output);
  }

  // repeated .pb.PairValue charTimeList = 7;
  for (int i = 0; i < this->chartimelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->chartimelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_Combat_Crusade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 level_id = 1;
  if (has_level_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level_id(), target);
  }

  // required uint32 stage_state = 2;
  if (has_stage_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stage_state(), target);
  }

  // required uint32 rewards_state = 3;
  if (has_rewards_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rewards_state(), target);
  }

  // required uint32 reset_lefttimes = 4;
  if (has_reset_lefttimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reset_lefttimes(), target);
  }

  // required uint32 add_lefttimes = 5;
  if (has_add_lefttimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->add_lefttimes(), target);
  }

  // optional uint32 is_Crusade_over = 6;
  if (has_is_crusade_over()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->is_crusade_over(), target);
  }

  // repeated .pb.PairValue charTimeList = 7;
  for (int i = 0; i < this->chartimelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->chartimelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_Combat_Crusade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level_id = 1;
    if (has_level_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level_id());
    }

    // required uint32 stage_state = 2;
    if (has_stage_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage_state());
    }

    // required uint32 rewards_state = 3;
    if (has_rewards_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewards_state());
    }

    // required uint32 reset_lefttimes = 4;
    if (has_reset_lefttimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reset_lefttimes());
    }

    // required uint32 add_lefttimes = 5;
    if (has_add_lefttimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_lefttimes());
    }

    // optional uint32 is_Crusade_over = 6;
    if (has_is_crusade_over()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_crusade_over());
    }

  }
  // repeated .pb.PairValue charTimeList = 7;
  total_size += 1 * this->chartimelist_size();
  for (int i = 0; i < this->chartimelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chartimelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_Combat_Crusade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_Combat_Crusade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_Combat_Crusade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_Combat_Crusade::MergeFrom(const GxDB_Combat_Crusade& from) {
  GOOGLE_CHECK_NE(&from, this);
  chartimelist_.MergeFrom(from.chartimelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level_id()) {
      set_level_id(from.level_id());
    }
    if (from.has_stage_state()) {
      set_stage_state(from.stage_state());
    }
    if (from.has_rewards_state()) {
      set_rewards_state(from.rewards_state());
    }
    if (from.has_reset_lefttimes()) {
      set_reset_lefttimes(from.reset_lefttimes());
    }
    if (from.has_add_lefttimes()) {
      set_add_lefttimes(from.add_lefttimes());
    }
    if (from.has_is_crusade_over()) {
      set_is_crusade_over(from.is_crusade_over());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_Combat_Crusade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_Combat_Crusade::CopyFrom(const GxDB_Combat_Crusade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_Combat_Crusade::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GxDB_Combat_Crusade::Swap(GxDB_Combat_Crusade* other) {
  if (other != this) {
    std::swap(level_id_, other->level_id_);
    std::swap(stage_state_, other->stage_state_);
    std::swap(rewards_state_, other->rewards_state_);
    std::swap(reset_lefttimes_, other->reset_lefttimes_);
    std::swap(add_lefttimes_, other->add_lefttimes_);
    std::swap(is_crusade_over_, other->is_crusade_over_);
    chartimelist_.Swap(&other->chartimelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_Combat_Crusade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_Combat_Crusade_descriptor_;
  metadata.reflection = GxDB_Combat_Crusade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Combat_Crusade::kLevelIdFieldNumber;
const int GS2C_Combat_Crusade::kStageStateFieldNumber;
const int GS2C_Combat_Crusade::kRewardsStateFieldNumber;
const int GS2C_Combat_Crusade::kResetLefttimesFieldNumber;
const int GS2C_Combat_Crusade::kAddLefttimesFieldNumber;
const int GS2C_Combat_Crusade::kIsCrusadeOverFieldNumber;
const int GS2C_Combat_Crusade::kCharTimeListFieldNumber;
#endif  // !_MSC_VER

GS2C_Combat_Crusade::GS2C_Combat_Crusade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Combat_Crusade::InitAsDefaultInstance() {
}

GS2C_Combat_Crusade::GS2C_Combat_Crusade(const GS2C_Combat_Crusade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Combat_Crusade::SharedCtor() {
  _cached_size_ = 0;
  level_id_ = 0u;
  stage_state_ = 0u;
  rewards_state_ = GOOGLE_ULONGLONG(0);
  reset_lefttimes_ = 0u;
  add_lefttimes_ = 0u;
  is_crusade_over_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Combat_Crusade::~GS2C_Combat_Crusade() {
  SharedDtor();
}

void GS2C_Combat_Crusade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Combat_Crusade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Combat_Crusade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Combat_Crusade_descriptor_;
}

const GS2C_Combat_Crusade& GS2C_Combat_Crusade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

GS2C_Combat_Crusade* GS2C_Combat_Crusade::default_instance_ = NULL;

GS2C_Combat_Crusade* GS2C_Combat_Crusade::New() const {
  return new GS2C_Combat_Crusade;
}

void GS2C_Combat_Crusade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_id_ = 0u;
    stage_state_ = 0u;
    rewards_state_ = GOOGLE_ULONGLONG(0);
    reset_lefttimes_ = 0u;
    add_lefttimes_ = 0u;
    is_crusade_over_ = 0u;
  }
  chartimelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Combat_Crusade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_id_)));
          set_has_level_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stage_state;
        break;
      }

      // required uint32 stage_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_state_)));
          set_has_stage_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rewards_state;
        break;
      }

      // required uint64 rewards_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewards_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rewards_state_)));
          set_has_rewards_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reset_lefttimes;
        break;
      }

      // required uint32 reset_lefttimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset_lefttimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reset_lefttimes_)));
          set_has_reset_lefttimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_add_lefttimes;
        break;
      }

      // required uint32 add_lefttimes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_lefttimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_lefttimes_)));
          set_has_add_lefttimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_Crusade_over;
        break;
      }

      // optional uint32 is_Crusade_over = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_Crusade_over:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_crusade_over_)));
          set_has_is_crusade_over();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_charTimeList;
        break;
      }

      // repeated .pb.PairValue charTimeList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charTimeList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chartimelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_charTimeList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Combat_Crusade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 level_id = 1;
  if (has_level_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level_id(), output);
  }

  // required uint32 stage_state = 2;
  if (has_stage_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stage_state(), output);
  }

  // required uint64 rewards_state = 3;
  if (has_rewards_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->rewards_state(), output);
  }

  // required uint32 reset_lefttimes = 4;
  if (has_reset_lefttimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reset_lefttimes(), output);
  }

  // required uint32 add_lefttimes = 5;
  if (has_add_lefttimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->add_lefttimes(), output);
  }

  // optional uint32 is_Crusade_over = 6;
  if (has_is_crusade_over()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->is_crusade_over(), output);
  }

  // repeated .pb.PairValue charTimeList = 7;
  for (int i = 0; i < this->chartimelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->chartimelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Combat_Crusade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 level_id = 1;
  if (has_level_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level_id(), target);
  }

  // required uint32 stage_state = 2;
  if (has_stage_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stage_state(), target);
  }

  // required uint64 rewards_state = 3;
  if (has_rewards_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->rewards_state(), target);
  }

  // required uint32 reset_lefttimes = 4;
  if (has_reset_lefttimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reset_lefttimes(), target);
  }

  // required uint32 add_lefttimes = 5;
  if (has_add_lefttimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->add_lefttimes(), target);
  }

  // optional uint32 is_Crusade_over = 6;
  if (has_is_crusade_over()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->is_crusade_over(), target);
  }

  // repeated .pb.PairValue charTimeList = 7;
  for (int i = 0; i < this->chartimelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->chartimelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Combat_Crusade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level_id = 1;
    if (has_level_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level_id());
    }

    // required uint32 stage_state = 2;
    if (has_stage_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage_state());
    }

    // required uint64 rewards_state = 3;
    if (has_rewards_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rewards_state());
    }

    // required uint32 reset_lefttimes = 4;
    if (has_reset_lefttimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reset_lefttimes());
    }

    // required uint32 add_lefttimes = 5;
    if (has_add_lefttimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_lefttimes());
    }

    // optional uint32 is_Crusade_over = 6;
    if (has_is_crusade_over()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_crusade_over());
    }

  }
  // repeated .pb.PairValue charTimeList = 7;
  total_size += 1 * this->chartimelist_size();
  for (int i = 0; i < this->chartimelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chartimelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Combat_Crusade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Combat_Crusade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Combat_Crusade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Combat_Crusade::MergeFrom(const GS2C_Combat_Crusade& from) {
  GOOGLE_CHECK_NE(&from, this);
  chartimelist_.MergeFrom(from.chartimelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level_id()) {
      set_level_id(from.level_id());
    }
    if (from.has_stage_state()) {
      set_stage_state(from.stage_state());
    }
    if (from.has_rewards_state()) {
      set_rewards_state(from.rewards_state());
    }
    if (from.has_reset_lefttimes()) {
      set_reset_lefttimes(from.reset_lefttimes());
    }
    if (from.has_add_lefttimes()) {
      set_add_lefttimes(from.add_lefttimes());
    }
    if (from.has_is_crusade_over()) {
      set_is_crusade_over(from.is_crusade_over());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Combat_Crusade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Combat_Crusade::CopyFrom(const GS2C_Combat_Crusade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Combat_Crusade::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GS2C_Combat_Crusade::Swap(GS2C_Combat_Crusade* other) {
  if (other != this) {
    std::swap(level_id_, other->level_id_);
    std::swap(stage_state_, other->stage_state_);
    std::swap(rewards_state_, other->rewards_state_);
    std::swap(reset_lefttimes_, other->reset_lefttimes_);
    std::swap(add_lefttimes_, other->add_lefttimes_);
    std::swap(is_crusade_over_, other->is_crusade_over_);
    chartimelist_.Swap(&other->chartimelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Combat_Crusade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Combat_Crusade_descriptor_;
  metadata.reflection = GS2C_Combat_Crusade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Crusade_HeroInfo::kHeroIdFieldNumber;
const int Crusade_HeroInfo::kLefttimeFieldNumber;
#endif  // !_MSC_VER

Crusade_HeroInfo::Crusade_HeroInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Crusade_HeroInfo::InitAsDefaultInstance() {
}

Crusade_HeroInfo::Crusade_HeroInfo(const Crusade_HeroInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Crusade_HeroInfo::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = 0u;
  lefttime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Crusade_HeroInfo::~Crusade_HeroInfo() {
  SharedDtor();
}

void Crusade_HeroInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Crusade_HeroInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Crusade_HeroInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Crusade_HeroInfo_descriptor_;
}

const Crusade_HeroInfo& Crusade_HeroInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

Crusade_HeroInfo* Crusade_HeroInfo::default_instance_ = NULL;

Crusade_HeroInfo* Crusade_HeroInfo::New() const {
  return new Crusade_HeroInfo;
}

void Crusade_HeroInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = 0u;
    lefttime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Crusade_HeroInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lefttime;
        break;
      }

      // required uint32 lefttime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lefttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Crusade_HeroInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // required uint32 lefttime = 2;
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lefttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Crusade_HeroInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // required uint32 lefttime = 2;
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lefttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Crusade_HeroInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // required uint32 lefttime = 2;
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lefttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Crusade_HeroInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Crusade_HeroInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Crusade_HeroInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Crusade_HeroInfo::MergeFrom(const Crusade_HeroInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Crusade_HeroInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Crusade_HeroInfo::CopyFrom(const Crusade_HeroInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Crusade_HeroInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Crusade_HeroInfo::Swap(Crusade_HeroInfo* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(lefttime_, other->lefttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Crusade_HeroInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Crusade_HeroInfo_descriptor_;
  metadata.reflection = Crusade_HeroInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Combat_Crusade_Pre_Begin::kHeroInfoFieldNumber;
#endif  // !_MSC_VER

GS2C_Combat_Crusade_Pre_Begin::GS2C_Combat_Crusade_Pre_Begin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Combat_Crusade_Pre_Begin::InitAsDefaultInstance() {
}

GS2C_Combat_Crusade_Pre_Begin::GS2C_Combat_Crusade_Pre_Begin(const GS2C_Combat_Crusade_Pre_Begin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Combat_Crusade_Pre_Begin::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Combat_Crusade_Pre_Begin::~GS2C_Combat_Crusade_Pre_Begin() {
  SharedDtor();
}

void GS2C_Combat_Crusade_Pre_Begin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Combat_Crusade_Pre_Begin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Combat_Crusade_Pre_Begin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Combat_Crusade_Pre_Begin_descriptor_;
}

const GS2C_Combat_Crusade_Pre_Begin& GS2C_Combat_Crusade_Pre_Begin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

GS2C_Combat_Crusade_Pre_Begin* GS2C_Combat_Crusade_Pre_Begin::default_instance_ = NULL;

GS2C_Combat_Crusade_Pre_Begin* GS2C_Combat_Crusade_Pre_Begin::New() const {
  return new GS2C_Combat_Crusade_Pre_Begin;
}

void GS2C_Combat_Crusade_Pre_Begin::Clear() {
  hero_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Combat_Crusade_Pre_Begin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Crusade_HeroInfo hero_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_hero_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Combat_Crusade_Pre_Begin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.Crusade_HeroInfo hero_info = 1;
  for (int i = 0; i < this->hero_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hero_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Combat_Crusade_Pre_Begin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.Crusade_HeroInfo hero_info = 1;
  for (int i = 0; i < this->hero_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hero_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Combat_Crusade_Pre_Begin::ByteSize() const {
  int total_size = 0;

  // repeated .pb.Crusade_HeroInfo hero_info = 1;
  total_size += 1 * this->hero_info_size();
  for (int i = 0; i < this->hero_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Combat_Crusade_Pre_Begin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Combat_Crusade_Pre_Begin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Combat_Crusade_Pre_Begin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Combat_Crusade_Pre_Begin::MergeFrom(const GS2C_Combat_Crusade_Pre_Begin& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_info_.MergeFrom(from.hero_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Combat_Crusade_Pre_Begin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Combat_Crusade_Pre_Begin::CopyFrom(const GS2C_Combat_Crusade_Pre_Begin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Combat_Crusade_Pre_Begin::IsInitialized() const {

  for (int i = 0; i < hero_info_size(); i++) {
    if (!this->hero_info(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Combat_Crusade_Pre_Begin::Swap(GS2C_Combat_Crusade_Pre_Begin* other) {
  if (other != this) {
    hero_info_.Swap(&other->hero_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Combat_Crusade_Pre_Begin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Combat_Crusade_Pre_Begin_descriptor_;
  metadata.reflection = GS2C_Combat_Crusade_Pre_Begin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Combat_Crusade_Add_Hero::kGroupIdFieldNumber;
const int C2GS_Combat_Crusade_Add_Hero::kHeroIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Combat_Crusade_Add_Hero::C2GS_Combat_Crusade_Add_Hero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Combat_Crusade_Add_Hero::InitAsDefaultInstance() {
}

C2GS_Combat_Crusade_Add_Hero::C2GS_Combat_Crusade_Add_Hero(const C2GS_Combat_Crusade_Add_Hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Combat_Crusade_Add_Hero::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  hero_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Combat_Crusade_Add_Hero::~C2GS_Combat_Crusade_Add_Hero() {
  SharedDtor();
}

void C2GS_Combat_Crusade_Add_Hero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Combat_Crusade_Add_Hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Combat_Crusade_Add_Hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Combat_Crusade_Add_Hero_descriptor_;
}

const C2GS_Combat_Crusade_Add_Hero& C2GS_Combat_Crusade_Add_Hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

C2GS_Combat_Crusade_Add_Hero* C2GS_Combat_Crusade_Add_Hero::default_instance_ = NULL;

C2GS_Combat_Crusade_Add_Hero* C2GS_Combat_Crusade_Add_Hero::New() const {
  return new C2GS_Combat_Crusade_Add_Hero;
}

void C2GS_Combat_Crusade_Add_Hero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
    hero_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Combat_Crusade_Add_Hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // required uint32 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Combat_Crusade_Add_Hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // required uint32 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Combat_Crusade_Add_Hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // required uint32 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Combat_Crusade_Add_Hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Combat_Crusade_Add_Hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Combat_Crusade_Add_Hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Combat_Crusade_Add_Hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Combat_Crusade_Add_Hero::MergeFrom(const C2GS_Combat_Crusade_Add_Hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Combat_Crusade_Add_Hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Combat_Crusade_Add_Hero::CopyFrom(const C2GS_Combat_Crusade_Add_Hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Combat_Crusade_Add_Hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2GS_Combat_Crusade_Add_Hero::Swap(C2GS_Combat_Crusade_Add_Hero* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Combat_Crusade_Add_Hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Combat_Crusade_Add_Hero_descriptor_;
  metadata.reflection = C2GS_Combat_Crusade_Add_Hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Crusade_Take_Reward_Rsp::kRetFieldNumber;
const int GS2C_Crusade_Take_Reward_Rsp::kRewardFieldNumber;
#endif  // !_MSC_VER

GS2C_Crusade_Take_Reward_Rsp::GS2C_Crusade_Take_Reward_Rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Crusade_Take_Reward_Rsp::InitAsDefaultInstance() {
}

GS2C_Crusade_Take_Reward_Rsp::GS2C_Crusade_Take_Reward_Rsp(const GS2C_Crusade_Take_Reward_Rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Crusade_Take_Reward_Rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Crusade_Take_Reward_Rsp::~GS2C_Crusade_Take_Reward_Rsp() {
  SharedDtor();
}

void GS2C_Crusade_Take_Reward_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Crusade_Take_Reward_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Crusade_Take_Reward_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Crusade_Take_Reward_Rsp_descriptor_;
}

const GS2C_Crusade_Take_Reward_Rsp& GS2C_Crusade_Take_Reward_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

GS2C_Crusade_Take_Reward_Rsp* GS2C_Crusade_Take_Reward_Rsp::default_instance_ = NULL;

GS2C_Crusade_Take_Reward_Rsp* GS2C_Crusade_Take_Reward_Rsp::New() const {
  return new GS2C_Crusade_Take_Reward_Rsp;
}

void GS2C_Crusade_Take_Reward_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = false;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Crusade_Take_Reward_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // repeated .pb.StReward reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Crusade_Take_Reward_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ret(), output);
  }

  // repeated .pb.StReward reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Crusade_Take_Reward_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ret(), target);
  }

  // repeated .pb.StReward reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Crusade_Take_Reward_Rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool ret = 1;
    if (has_ret()) {
      total_size += 1 + 1;
    }

  }
  // repeated .pb.StReward reward = 2;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Crusade_Take_Reward_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Crusade_Take_Reward_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Crusade_Take_Reward_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Crusade_Take_Reward_Rsp::MergeFrom(const GS2C_Crusade_Take_Reward_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Crusade_Take_Reward_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Crusade_Take_Reward_Rsp::CopyFrom(const GS2C_Crusade_Take_Reward_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Crusade_Take_Reward_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < reward_size(); i++) {
    if (!this->reward(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Crusade_Take_Reward_Rsp::Swap(GS2C_Crusade_Take_Reward_Rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Crusade_Take_Reward_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Crusade_Take_Reward_Rsp_descriptor_;
  metadata.reflection = GS2C_Crusade_Take_Reward_Rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Combat_Crusade_Recover_Times::kValuesFieldNumber;
#endif  // !_MSC_VER

C2GS_Combat_Crusade_Recover_Times::C2GS_Combat_Crusade_Recover_Times()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Combat_Crusade_Recover_Times::InitAsDefaultInstance() {
}

C2GS_Combat_Crusade_Recover_Times::C2GS_Combat_Crusade_Recover_Times(const C2GS_Combat_Crusade_Recover_Times& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Combat_Crusade_Recover_Times::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Combat_Crusade_Recover_Times::~C2GS_Combat_Crusade_Recover_Times() {
  SharedDtor();
}

void C2GS_Combat_Crusade_Recover_Times::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Combat_Crusade_Recover_Times::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Combat_Crusade_Recover_Times::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Combat_Crusade_Recover_Times_descriptor_;
}

const C2GS_Combat_Crusade_Recover_Times& C2GS_Combat_Crusade_Recover_Times::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

C2GS_Combat_Crusade_Recover_Times* C2GS_Combat_Crusade_Recover_Times::default_instance_ = NULL;

C2GS_Combat_Crusade_Recover_Times* C2GS_Combat_Crusade_Recover_Times::New() const {
  return new C2GS_Combat_Crusade_Recover_Times;
}

void C2GS_Combat_Crusade_Recover_Times::Clear() {
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Combat_Crusade_Recover_Times::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.PairValue values = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Combat_Crusade_Recover_Times::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.PairValue values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Combat_Crusade_Recover_Times::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.PairValue values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Combat_Crusade_Recover_Times::ByteSize() const {
  int total_size = 0;

  // repeated .pb.PairValue values = 1;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Combat_Crusade_Recover_Times::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Combat_Crusade_Recover_Times* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Combat_Crusade_Recover_Times*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Combat_Crusade_Recover_Times::MergeFrom(const C2GS_Combat_Crusade_Recover_Times& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Combat_Crusade_Recover_Times::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Combat_Crusade_Recover_Times::CopyFrom(const C2GS_Combat_Crusade_Recover_Times& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Combat_Crusade_Recover_Times::IsInitialized() const {

  return true;
}

void C2GS_Combat_Crusade_Recover_Times::Swap(C2GS_Combat_Crusade_Recover_Times* other) {
  if (other != this) {
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Combat_Crusade_Recover_Times::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Combat_Crusade_Recover_Times_descriptor_;
  metadata.reflection = C2GS_Combat_Crusade_Recover_Times_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Combat_Crusade_Add_Hero::kBSuccessFieldNumber;
const int GS2C_Combat_Crusade_Add_Hero::kHeroIdFieldNumber;
const int GS2C_Combat_Crusade_Add_Hero::kLefttimeFieldNumber;
const int GS2C_Combat_Crusade_Add_Hero::kAlllefttimeFieldNumber;
#endif  // !_MSC_VER

GS2C_Combat_Crusade_Add_Hero::GS2C_Combat_Crusade_Add_Hero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Combat_Crusade_Add_Hero::InitAsDefaultInstance() {
}

GS2C_Combat_Crusade_Add_Hero::GS2C_Combat_Crusade_Add_Hero(const GS2C_Combat_Crusade_Add_Hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Combat_Crusade_Add_Hero::SharedCtor() {
  _cached_size_ = 0;
  bsuccess_ = false;
  hero_id_ = 0u;
  lefttime_ = 0u;
  alllefttime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Combat_Crusade_Add_Hero::~GS2C_Combat_Crusade_Add_Hero() {
  SharedDtor();
}

void GS2C_Combat_Crusade_Add_Hero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Combat_Crusade_Add_Hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Combat_Crusade_Add_Hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Combat_Crusade_Add_Hero_descriptor_;
}

const GS2C_Combat_Crusade_Add_Hero& GS2C_Combat_Crusade_Add_Hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

GS2C_Combat_Crusade_Add_Hero* GS2C_Combat_Crusade_Add_Hero::default_instance_ = NULL;

GS2C_Combat_Crusade_Add_Hero* GS2C_Combat_Crusade_Add_Hero::New() const {
  return new GS2C_Combat_Crusade_Add_Hero;
}

void GS2C_Combat_Crusade_Add_Hero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bsuccess_ = false;
    hero_id_ = 0u;
    lefttime_ = 0u;
    alllefttime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Combat_Crusade_Add_Hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool bSuccess = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bsuccess_)));
          set_has_bsuccess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // required uint32 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lefttime;
        break;
      }

      // required uint32 lefttime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lefttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_alllefttime;
        break;
      }

      // required uint32 alllefttime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alllefttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &alllefttime_)));
          set_has_alllefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Combat_Crusade_Add_Hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool bSuccess = 1;
  if (has_bsuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bsuccess(), output);
  }

  // required uint32 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // required uint32 lefttime = 3;
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lefttime(), output);
  }

  // required uint32 alllefttime = 4;
  if (has_alllefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->alllefttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Combat_Crusade_Add_Hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool bSuccess = 1;
  if (has_bsuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bsuccess(), target);
  }

  // required uint32 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // required uint32 lefttime = 3;
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lefttime(), target);
  }

  // required uint32 alllefttime = 4;
  if (has_alllefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->alllefttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Combat_Crusade_Add_Hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool bSuccess = 1;
    if (has_bsuccess()) {
      total_size += 1 + 1;
    }

    // required uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // required uint32 lefttime = 3;
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lefttime());
    }

    // required uint32 alllefttime = 4;
    if (has_alllefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->alllefttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Combat_Crusade_Add_Hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Combat_Crusade_Add_Hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Combat_Crusade_Add_Hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Combat_Crusade_Add_Hero::MergeFrom(const GS2C_Combat_Crusade_Add_Hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bsuccess()) {
      set_bsuccess(from.bsuccess());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
    if (from.has_alllefttime()) {
      set_alllefttime(from.alllefttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Combat_Crusade_Add_Hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Combat_Crusade_Add_Hero::CopyFrom(const GS2C_Combat_Crusade_Add_Hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Combat_Crusade_Add_Hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GS2C_Combat_Crusade_Add_Hero::Swap(GS2C_Combat_Crusade_Add_Hero* other) {
  if (other != this) {
    std::swap(bsuccess_, other->bsuccess_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(lefttime_, other->lefttime_);
    std::swap(alllefttime_, other->alllefttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Combat_Crusade_Add_Hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Combat_Crusade_Add_Hero_descriptor_;
  metadata.reflection = GS2C_Combat_Crusade_Add_Hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Combat_Try::kCombatTypeFieldNumber;
const int C2GS_Combat_Try::kAssistArgFieldNumber;
#endif  // !_MSC_VER

C2GS_Combat_Try::C2GS_Combat_Try()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Combat_Try::InitAsDefaultInstance() {
}

C2GS_Combat_Try::C2GS_Combat_Try(const C2GS_Combat_Try& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Combat_Try::SharedCtor() {
  _cached_size_ = 0;
  combat_type_ = 0u;
  assist_arg_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Combat_Try::~C2GS_Combat_Try() {
  SharedDtor();
}

void C2GS_Combat_Try::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Combat_Try::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Combat_Try::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Combat_Try_descriptor_;
}

const C2GS_Combat_Try& C2GS_Combat_Try::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

C2GS_Combat_Try* C2GS_Combat_Try::default_instance_ = NULL;

C2GS_Combat_Try* C2GS_Combat_Try::New() const {
  return new C2GS_Combat_Try;
}

void C2GS_Combat_Try::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    combat_type_ = 0u;
    assist_arg_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Combat_Try::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 combat_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combat_type_)));
          set_has_combat_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_assist_arg;
        break;
      }

      // optional uint32 assist_arg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assist_arg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assist_arg_)));
          set_has_assist_arg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Combat_Try::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 combat_type = 1;
  if (has_combat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->combat_type(), output);
  }

  // optional uint32 assist_arg = 2;
  if (has_assist_arg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->assist_arg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Combat_Try::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 combat_type = 1;
  if (has_combat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->combat_type(), target);
  }

  // optional uint32 assist_arg = 2;
  if (has_assist_arg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->assist_arg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Combat_Try::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 combat_type = 1;
    if (has_combat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combat_type());
    }

    // optional uint32 assist_arg = 2;
    if (has_assist_arg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assist_arg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Combat_Try::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Combat_Try* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Combat_Try*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Combat_Try::MergeFrom(const C2GS_Combat_Try& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_combat_type()) {
      set_combat_type(from.combat_type());
    }
    if (from.has_assist_arg()) {
      set_assist_arg(from.assist_arg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Combat_Try::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Combat_Try::CopyFrom(const C2GS_Combat_Try& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Combat_Try::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Combat_Try::Swap(C2GS_Combat_Try* other) {
  if (other != this) {
    std::swap(combat_type_, other->combat_type_);
    std::swap(assist_arg_, other->assist_arg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Combat_Try::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Combat_Try_descriptor_;
  metadata.reflection = C2GS_Combat_Try_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Combat_Try::kResultFieldNumber;
const int GS2C_Combat_Try::kCombatTypeFieldNumber;
const int GS2C_Combat_Try::kAssistArgFieldNumber;
const int GS2C_Combat_Try::kErrcodeFieldNumber;
const int GS2C_Combat_Try::kGroupIdFieldNumber;
#endif  // !_MSC_VER

GS2C_Combat_Try::GS2C_Combat_Try()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Combat_Try::InitAsDefaultInstance() {
}

GS2C_Combat_Try::GS2C_Combat_Try(const GS2C_Combat_Try& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Combat_Try::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  combat_type_ = 0u;
  assist_arg_ = 0u;
  errcode_ = 0;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Combat_Try::~GS2C_Combat_Try() {
  SharedDtor();
}

void GS2C_Combat_Try::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Combat_Try::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Combat_Try::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Combat_Try_descriptor_;
}

const GS2C_Combat_Try& GS2C_Combat_Try::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

GS2C_Combat_Try* GS2C_Combat_Try::default_instance_ = NULL;

GS2C_Combat_Try* GS2C_Combat_Try::New() const {
  return new GS2C_Combat_Try;
}

void GS2C_Combat_Try::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    combat_type_ = 0u;
    assist_arg_ = 0u;
    errcode_ = 0;
    group_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Combat_Try::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_combat_type;
        break;
      }

      // optional uint32 combat_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combat_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combat_type_)));
          set_has_combat_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_assist_arg;
        break;
      }

      // optional uint32 assist_arg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assist_arg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assist_arg_)));
          set_has_assist_arg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_errcode;
        break;
      }

      // optional .pb.Msg_return_common errcode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errcode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Msg_return_common_IsValid(value)) {
            set_errcode(static_cast< ::pb::Msg_return_common >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_group_id;
        break;
      }

      // optional uint32 group_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Combat_Try::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint32 combat_type = 2;
  if (has_combat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->combat_type(), output);
  }

  // optional uint32 assist_arg = 3;
  if (has_assist_arg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->assist_arg(), output);
  }

  // optional .pb.Msg_return_common errcode = 4;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->errcode(), output);
  }

  // optional uint32 group_id = 5;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Combat_Try::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint32 combat_type = 2;
  if (has_combat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->combat_type(), target);
  }

  // optional uint32 assist_arg = 3;
  if (has_assist_arg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->assist_arg(), target);
  }

  // optional .pb.Msg_return_common errcode = 4;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->errcode(), target);
  }

  // optional uint32 group_id = 5;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Combat_Try::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 combat_type = 2;
    if (has_combat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combat_type());
    }

    // optional uint32 assist_arg = 3;
    if (has_assist_arg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assist_arg());
    }

    // optional .pb.Msg_return_common errcode = 4;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->errcode());
    }

    // optional uint32 group_id = 5;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Combat_Try::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Combat_Try* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Combat_Try*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Combat_Try::MergeFrom(const GS2C_Combat_Try& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_combat_type()) {
      set_combat_type(from.combat_type());
    }
    if (from.has_assist_arg()) {
      set_assist_arg(from.assist_arg());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Combat_Try::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Combat_Try::CopyFrom(const GS2C_Combat_Try& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Combat_Try::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Combat_Try::Swap(GS2C_Combat_Try* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(combat_type_, other->combat_type_);
    std::swap(assist_arg_, other->assist_arg_);
    std::swap(errcode_, other->errcode_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Combat_Try::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Combat_Try_descriptor_;
  metadata.reflection = GS2C_Combat_Try_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Onekey_Recover_HP::kHeroidFieldNumber;
#endif  // !_MSC_VER

C2GS_Onekey_Recover_HP::C2GS_Onekey_Recover_HP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Onekey_Recover_HP::InitAsDefaultInstance() {
}

C2GS_Onekey_Recover_HP::C2GS_Onekey_Recover_HP(const C2GS_Onekey_Recover_HP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Onekey_Recover_HP::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Onekey_Recover_HP::~C2GS_Onekey_Recover_HP() {
  SharedDtor();
}

void C2GS_Onekey_Recover_HP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Onekey_Recover_HP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Onekey_Recover_HP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Onekey_Recover_HP_descriptor_;
}

const C2GS_Onekey_Recover_HP& C2GS_Onekey_Recover_HP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

C2GS_Onekey_Recover_HP* C2GS_Onekey_Recover_HP::default_instance_ = NULL;

C2GS_Onekey_Recover_HP* C2GS_Onekey_Recover_HP::New() const {
  return new C2GS_Onekey_Recover_HP;
}

void C2GS_Onekey_Recover_HP::Clear() {
  heroid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Onekey_Recover_HP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 heroid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_heroid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heroid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_heroid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Onekey_Recover_HP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 heroid = 1;
  for (int i = 0; i < this->heroid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->heroid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Onekey_Recover_HP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 heroid = 1;
  for (int i = 0; i < this->heroid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->heroid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Onekey_Recover_HP::ByteSize() const {
  int total_size = 0;

  // repeated uint32 heroid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->heroid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heroid(i));
    }
    total_size += 1 * this->heroid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Onekey_Recover_HP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Onekey_Recover_HP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Onekey_Recover_HP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Onekey_Recover_HP::MergeFrom(const C2GS_Onekey_Recover_HP& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroid_.MergeFrom(from.heroid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Onekey_Recover_HP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Onekey_Recover_HP::CopyFrom(const C2GS_Onekey_Recover_HP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Onekey_Recover_HP::IsInitialized() const {

  return true;
}

void C2GS_Onekey_Recover_HP::Swap(C2GS_Onekey_Recover_HP* other) {
  if (other != this) {
    heroid_.Swap(&other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Onekey_Recover_HP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Onekey_Recover_HP_descriptor_;
  metadata.reflection = C2GS_Onekey_Recover_HP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_REQUEST_TERR::kGroupIdFieldNumber;
#endif  // !_MSC_VER

C2GS_REQUEST_TERR::C2GS_REQUEST_TERR()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_REQUEST_TERR::InitAsDefaultInstance() {
}

C2GS_REQUEST_TERR::C2GS_REQUEST_TERR(const C2GS_REQUEST_TERR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_REQUEST_TERR::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_REQUEST_TERR::~C2GS_REQUEST_TERR() {
  SharedDtor();
}

void C2GS_REQUEST_TERR::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_REQUEST_TERR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_REQUEST_TERR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_REQUEST_TERR_descriptor_;
}

const C2GS_REQUEST_TERR& C2GS_REQUEST_TERR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

C2GS_REQUEST_TERR* C2GS_REQUEST_TERR::default_instance_ = NULL;

C2GS_REQUEST_TERR* C2GS_REQUEST_TERR::New() const {
  return new C2GS_REQUEST_TERR;
}

void C2GS_REQUEST_TERR::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_REQUEST_TERR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_REQUEST_TERR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_REQUEST_TERR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_REQUEST_TERR::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_REQUEST_TERR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_REQUEST_TERR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_REQUEST_TERR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_REQUEST_TERR::MergeFrom(const C2GS_REQUEST_TERR& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_REQUEST_TERR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_REQUEST_TERR::CopyFrom(const C2GS_REQUEST_TERR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_REQUEST_TERR::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_REQUEST_TERR::Swap(C2GS_REQUEST_TERR* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_REQUEST_TERR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_REQUEST_TERR_descriptor_;
  metadata.reflection = C2GS_REQUEST_TERR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_REQUEST_TERR_RET::kIsGroupExistFieldNumber;
const int GS2C_REQUEST_TERR_RET::kTerrainTypFieldNumber;
#endif  // !_MSC_VER

GS2C_REQUEST_TERR_RET::GS2C_REQUEST_TERR_RET()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_REQUEST_TERR_RET::InitAsDefaultInstance() {
}

GS2C_REQUEST_TERR_RET::GS2C_REQUEST_TERR_RET(const GS2C_REQUEST_TERR_RET& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_REQUEST_TERR_RET::SharedCtor() {
  _cached_size_ = 0;
  isgroupexist_ = 0u;
  terraintyp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_REQUEST_TERR_RET::~GS2C_REQUEST_TERR_RET() {
  SharedDtor();
}

void GS2C_REQUEST_TERR_RET::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_REQUEST_TERR_RET::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_REQUEST_TERR_RET::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_REQUEST_TERR_RET_descriptor_;
}

const GS2C_REQUEST_TERR_RET& GS2C_REQUEST_TERR_RET::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

GS2C_REQUEST_TERR_RET* GS2C_REQUEST_TERR_RET::default_instance_ = NULL;

GS2C_REQUEST_TERR_RET* GS2C_REQUEST_TERR_RET::New() const {
  return new GS2C_REQUEST_TERR_RET;
}

void GS2C_REQUEST_TERR_RET::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isgroupexist_ = 0u;
    terraintyp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_REQUEST_TERR_RET::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 isGroupExist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isgroupexist_)));
          set_has_isgroupexist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_terrainTyp;
        break;
      }

      // optional uint32 terrainTyp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_terrainTyp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terraintyp_)));
          set_has_terraintyp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_REQUEST_TERR_RET::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 isGroupExist = 1;
  if (has_isgroupexist()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->isgroupexist(), output);
  }

  // optional uint32 terrainTyp = 2;
  if (has_terraintyp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->terraintyp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_REQUEST_TERR_RET::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 isGroupExist = 1;
  if (has_isgroupexist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->isgroupexist(), target);
  }

  // optional uint32 terrainTyp = 2;
  if (has_terraintyp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->terraintyp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_REQUEST_TERR_RET::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 isGroupExist = 1;
    if (has_isgroupexist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isgroupexist());
    }

    // optional uint32 terrainTyp = 2;
    if (has_terraintyp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terraintyp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_REQUEST_TERR_RET::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_REQUEST_TERR_RET* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_REQUEST_TERR_RET*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_REQUEST_TERR_RET::MergeFrom(const GS2C_REQUEST_TERR_RET& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isgroupexist()) {
      set_isgroupexist(from.isgroupexist());
    }
    if (from.has_terraintyp()) {
      set_terraintyp(from.terraintyp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_REQUEST_TERR_RET::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_REQUEST_TERR_RET::CopyFrom(const GS2C_REQUEST_TERR_RET& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_REQUEST_TERR_RET::IsInitialized() const {

  return true;
}

void GS2C_REQUEST_TERR_RET::Swap(GS2C_REQUEST_TERR_RET* other) {
  if (other != this) {
    std::swap(isgroupexist_, other->isgroupexist_);
    std::swap(terraintyp_, other->terraintyp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_REQUEST_TERR_RET::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_REQUEST_TERR_RET_descriptor_;
  metadata.reflection = GS2C_REQUEST_TERR_RET_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_GetMyShadowNum::kGroupIdFieldNumber;
const int C2GS_GetMyShadowNum::kIsattackFieldNumber;
#endif  // !_MSC_VER

C2GS_GetMyShadowNum::C2GS_GetMyShadowNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_GetMyShadowNum::InitAsDefaultInstance() {
}

C2GS_GetMyShadowNum::C2GS_GetMyShadowNum(const C2GS_GetMyShadowNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_GetMyShadowNum::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  isattack_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_GetMyShadowNum::~C2GS_GetMyShadowNum() {
  SharedDtor();
}

void C2GS_GetMyShadowNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_GetMyShadowNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_GetMyShadowNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_GetMyShadowNum_descriptor_;
}

const C2GS_GetMyShadowNum& C2GS_GetMyShadowNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

C2GS_GetMyShadowNum* C2GS_GetMyShadowNum::default_instance_ = NULL;

C2GS_GetMyShadowNum* C2GS_GetMyShadowNum::New() const {
  return new C2GS_GetMyShadowNum;
}

void C2GS_GetMyShadowNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
    isattack_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_GetMyShadowNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isattack;
        break;
      }

      // optional bool isattack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isattack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isattack_)));
          set_has_isattack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_GetMyShadowNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // optional bool isattack = 2;
  if (has_isattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isattack(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_GetMyShadowNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // optional bool isattack = 2;
  if (has_isattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isattack(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_GetMyShadowNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional bool isattack = 2;
    if (has_isattack()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_GetMyShadowNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_GetMyShadowNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_GetMyShadowNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_GetMyShadowNum::MergeFrom(const C2GS_GetMyShadowNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_isattack()) {
      set_isattack(from.isattack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_GetMyShadowNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_GetMyShadowNum::CopyFrom(const C2GS_GetMyShadowNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_GetMyShadowNum::IsInitialized() const {

  return true;
}

void C2GS_GetMyShadowNum::Swap(C2GS_GetMyShadowNum* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(isattack_, other->isattack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_GetMyShadowNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_GetMyShadowNum_descriptor_;
  metadata.reflection = C2GS_GetMyShadowNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_GetMyShadowNum::kShadownumFieldNumber;
#endif  // !_MSC_VER

GS2C_GetMyShadowNum::GS2C_GetMyShadowNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_GetMyShadowNum::InitAsDefaultInstance() {
}

GS2C_GetMyShadowNum::GS2C_GetMyShadowNum(const GS2C_GetMyShadowNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_GetMyShadowNum::SharedCtor() {
  _cached_size_ = 0;
  shadownum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_GetMyShadowNum::~GS2C_GetMyShadowNum() {
  SharedDtor();
}

void GS2C_GetMyShadowNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_GetMyShadowNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_GetMyShadowNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_GetMyShadowNum_descriptor_;
}

const GS2C_GetMyShadowNum& GS2C_GetMyShadowNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

GS2C_GetMyShadowNum* GS2C_GetMyShadowNum::default_instance_ = NULL;

GS2C_GetMyShadowNum* GS2C_GetMyShadowNum::New() const {
  return new GS2C_GetMyShadowNum;
}

void GS2C_GetMyShadowNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shadownum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_GetMyShadowNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 shadownum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shadownum_)));
          set_has_shadownum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_GetMyShadowNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 shadownum = 1;
  if (has_shadownum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shadownum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_GetMyShadowNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 shadownum = 1;
  if (has_shadownum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shadownum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_GetMyShadowNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 shadownum = 1;
    if (has_shadownum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shadownum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_GetMyShadowNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_GetMyShadowNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_GetMyShadowNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_GetMyShadowNum::MergeFrom(const GS2C_GetMyShadowNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shadownum()) {
      set_shadownum(from.shadownum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_GetMyShadowNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_GetMyShadowNum::CopyFrom(const GS2C_GetMyShadowNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_GetMyShadowNum::IsInitialized() const {

  return true;
}

void GS2C_GetMyShadowNum::Swap(GS2C_GetMyShadowNum* other) {
  if (other != this) {
    std::swap(shadownum_, other->shadownum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_GetMyShadowNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_GetMyShadowNum_descriptor_;
  metadata.reflection = GS2C_GetMyShadowNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Add_Reinforce::kIsattFieldNumber;
const int GS2C_Add_Reinforce::kAfteridxFieldNumber;
const int GS2C_Add_Reinforce::kObjFieldNumber;
const int GS2C_Add_Reinforce::kGroupIdFieldNumber;
#endif  // !_MSC_VER

GS2C_Add_Reinforce::GS2C_Add_Reinforce()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Add_Reinforce::InitAsDefaultInstance() {
  obj_ = const_cast< ::pb::Msg_CombatObj*>(&::pb::Msg_CombatObj::default_instance());
}

GS2C_Add_Reinforce::GS2C_Add_Reinforce(const GS2C_Add_Reinforce& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Add_Reinforce::SharedCtor() {
  _cached_size_ = 0;
  isatt_ = false;
  afteridx_ = 0u;
  obj_ = NULL;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Add_Reinforce::~GS2C_Add_Reinforce() {
  SharedDtor();
}

void GS2C_Add_Reinforce::SharedDtor() {
  if (this != default_instance_) {
    delete obj_;
  }
}

void GS2C_Add_Reinforce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Add_Reinforce::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Add_Reinforce_descriptor_;
}

const GS2C_Add_Reinforce& GS2C_Add_Reinforce::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combat_2eproto();
  return *default_instance_;
}

GS2C_Add_Reinforce* GS2C_Add_Reinforce::default_instance_ = NULL;

GS2C_Add_Reinforce* GS2C_Add_Reinforce::New() const {
  return new GS2C_Add_Reinforce;
}

void GS2C_Add_Reinforce::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isatt_ = false;
    afteridx_ = 0u;
    if (has_obj()) {
      if (obj_ != NULL) obj_->::pb::Msg_CombatObj::Clear();
    }
    group_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Add_Reinforce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isatt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isatt_)));
          set_has_isatt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_afteridx;
        break;
      }

      // optional uint32 afteridx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_afteridx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &afteridx_)));
          set_has_afteridx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_obj;
        break;
      }

      // optional .pb.Msg_CombatObj obj = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_obj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_group_id;
        break;
      }

      // optional uint32 group_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Add_Reinforce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool isatt = 1;
  if (has_isatt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isatt(), output);
  }

  // optional uint32 afteridx = 2;
  if (has_afteridx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->afteridx(), output);
  }

  // optional .pb.Msg_CombatObj obj = 3;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->obj(), output);
  }

  // optional uint32 group_id = 4;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Add_Reinforce::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isatt = 1;
  if (has_isatt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isatt(), target);
  }

  // optional uint32 afteridx = 2;
  if (has_afteridx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->afteridx(), target);
  }

  // optional .pb.Msg_CombatObj obj = 3;
  if (has_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->obj(), target);
  }

  // optional uint32 group_id = 4;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Add_Reinforce::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isatt = 1;
    if (has_isatt()) {
      total_size += 1 + 1;
    }

    // optional uint32 afteridx = 2;
    if (has_afteridx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->afteridx());
    }

    // optional .pb.Msg_CombatObj obj = 3;
    if (has_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obj());
    }

    // optional uint32 group_id = 4;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Add_Reinforce::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Add_Reinforce* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Add_Reinforce*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Add_Reinforce::MergeFrom(const GS2C_Add_Reinforce& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isatt()) {
      set_isatt(from.isatt());
    }
    if (from.has_afteridx()) {
      set_afteridx(from.afteridx());
    }
    if (from.has_obj()) {
      mutable_obj()->::pb::Msg_CombatObj::MergeFrom(from.obj());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Add_Reinforce::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Add_Reinforce::CopyFrom(const GS2C_Add_Reinforce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Add_Reinforce::IsInitialized() const {

  if (has_obj()) {
    if (!this->obj().IsInitialized()) return false;
  }
  return true;
}

void GS2C_Add_Reinforce::Swap(GS2C_Add_Reinforce* other) {
  if (other != this) {
    std::swap(isatt_, other->isatt_);
    std::swap(afteridx_, other->afteridx_);
    std::swap(obj_, other->obj_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Add_Reinforce::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Add_Reinforce_descriptor_;
  metadata.reflection = GS2C_Add_Reinforce_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
