// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: City.proto

#ifndef PROTOBUF_City_2eproto__INCLUDED
#define PROTOBUF_City_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Country.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_City_2eproto();
void protobuf_AssignDesc_City_2eproto();
void protobuf_ShutdownFile_City_2eproto();

class ExpeditionNpc;
class callUPInfo;
class Struct_City_Info;
class GS2C_City_All_Info;
class GS2C_City_Update_Info;

// ===================================================================

class ExpeditionNpc : public ::google::protobuf::Message {
 public:
  ExpeditionNpc();
  virtual ~ExpeditionNpc();

  ExpeditionNpc(const ExpeditionNpc& from);

  inline ExpeditionNpc& operator=(const ExpeditionNpc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExpeditionNpc& default_instance();

  void Swap(ExpeditionNpc* other);

  // implements Message ----------------------------------------------

  ExpeditionNpc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExpeditionNpc& from);
  void MergeFrom(const ExpeditionNpc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 country_id = 1;
  inline bool has_country_id() const;
  inline void clear_country_id();
  static const int kCountryIdFieldNumber = 1;
  inline ::google::protobuf::uint32 country_id() const;
  inline void set_country_id(::google::protobuf::uint32 value);

  // optional uint32 npc_table_id = 2;
  inline bool has_npc_table_id() const;
  inline void clear_npc_table_id();
  static const int kNpcTableIdFieldNumber = 2;
  inline ::google::protobuf::uint32 npc_table_id() const;
  inline void set_npc_table_id(::google::protobuf::uint32 value);

  // optional uint32 expeid = 3;
  inline bool has_expeid() const;
  inline void clear_expeid();
  static const int kExpeidFieldNumber = 3;
  inline ::google::protobuf::uint32 expeid() const;
  inline void set_expeid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.ExpeditionNpc)
 private:
  inline void set_has_country_id();
  inline void clear_has_country_id();
  inline void set_has_npc_table_id();
  inline void clear_has_npc_table_id();
  inline void set_has_expeid();
  inline void clear_has_expeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 country_id_;
  ::google::protobuf::uint32 npc_table_id_;
  ::google::protobuf::uint32 expeid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_City_2eproto();
  friend void protobuf_AssignDesc_City_2eproto();
  friend void protobuf_ShutdownFile_City_2eproto();

  void InitAsDefaultInstance();
  static ExpeditionNpc* default_instance_;
};
// -------------------------------------------------------------------

class callUPInfo : public ::google::protobuf::Message {
 public:
  callUPInfo();
  virtual ~callUPInfo();

  callUPInfo(const callUPInfo& from);

  inline callUPInfo& operator=(const callUPInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const callUPInfo& default_instance();

  void Swap(callUPInfo* other);

  // implements Message ----------------------------------------------

  callUPInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const callUPInfo& from);
  void MergeFrom(const callUPInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 m_unique_callid = 1;
  inline bool has_m_unique_callid() const;
  inline void clear_m_unique_callid();
  static const int kMUniqueCallidFieldNumber = 1;
  inline ::google::protobuf::uint64 m_unique_callid() const;
  inline void set_m_unique_callid(::google::protobuf::uint64 value);

  // optional uint32 country_call_up = 2;
  inline bool has_country_call_up() const;
  inline void clear_country_call_up();
  static const int kCountryCallUpFieldNumber = 2;
  inline ::google::protobuf::uint32 country_call_up() const;
  inline void set_country_call_up(::google::protobuf::uint32 value);

  // optional uint64 callup_end_time = 3;
  inline bool has_callup_end_time() const;
  inline void clear_callup_end_time();
  static const int kCallupEndTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 callup_end_time() const;
  inline void set_callup_end_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.callUPInfo)
 private:
  inline void set_has_m_unique_callid();
  inline void clear_has_m_unique_callid();
  inline void set_has_country_call_up();
  inline void clear_has_country_call_up();
  inline void set_has_callup_end_time();
  inline void clear_has_callup_end_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 m_unique_callid_;
  ::google::protobuf::uint64 callup_end_time_;
  ::google::protobuf::uint32 country_call_up_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_City_2eproto();
  friend void protobuf_AssignDesc_City_2eproto();
  friend void protobuf_ShutdownFile_City_2eproto();

  void InitAsDefaultInstance();
  static callUPInfo* default_instance_;
};
// -------------------------------------------------------------------

class Struct_City_Info : public ::google::protobuf::Message {
 public:
  Struct_City_Info();
  virtual ~Struct_City_Info();

  Struct_City_Info(const Struct_City_Info& from);

  inline Struct_City_Info& operator=(const Struct_City_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Struct_City_Info& default_instance();

  void Swap(Struct_City_Info* other);

  // implements Message ----------------------------------------------

  Struct_City_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Struct_City_Info& from);
  void MergeFrom(const Struct_City_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 city_id = 1;
  inline bool has_city_id() const;
  inline void clear_city_id();
  static const int kCityIdFieldNumber = 1;
  inline ::google::protobuf::uint32 city_id() const;
  inline void set_city_id(::google::protobuf::uint32 value);

  // optional uint32 country = 2;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 2;
  inline ::google::protobuf::uint32 country() const;
  inline void set_country(::google::protobuf::uint32 value);

  // optional uint32 status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // optional uint32 combat_group_id = 4;
  inline bool has_combat_group_id() const;
  inline void clear_combat_group_id();
  static const int kCombatGroupIdFieldNumber = 4;
  inline ::google::protobuf::uint32 combat_group_id() const;
  inline void set_combat_group_id(::google::protobuf::uint32 value);

  // repeated .pb.ExpeditionNpc exNpcs = 5;
  inline int exnpcs_size() const;
  inline void clear_exnpcs();
  static const int kExNpcsFieldNumber = 5;
  inline const ::pb::ExpeditionNpc& exnpcs(int index) const;
  inline ::pb::ExpeditionNpc* mutable_exnpcs(int index);
  inline ::pb::ExpeditionNpc* add_exnpcs();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::ExpeditionNpc >&
      exnpcs() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::ExpeditionNpc >*
      mutable_exnpcs();

  // repeated .pb.callUPInfo m_call_info = 6;
  inline int m_call_info_size() const;
  inline void clear_m_call_info();
  static const int kMCallInfoFieldNumber = 6;
  inline const ::pb::callUPInfo& m_call_info(int index) const;
  inline ::pb::callUPInfo* mutable_m_call_info(int index);
  inline ::pb::callUPInfo* add_m_call_info();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::callUPInfo >&
      m_call_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::callUPInfo >*
      mutable_m_call_info();

  // repeated .pb.callUPInfo m_monster_call_info = 7;
  inline int m_monster_call_info_size() const;
  inline void clear_m_monster_call_info();
  static const int kMMonsterCallInfoFieldNumber = 7;
  inline const ::pb::callUPInfo& m_monster_call_info(int index) const;
  inline ::pb::callUPInfo* mutable_m_monster_call_info(int index);
  inline ::pb::callUPInfo* add_m_monster_call_info();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::callUPInfo >&
      m_monster_call_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::callUPInfo >*
      mutable_m_monster_call_info();

  // @@protoc_insertion_point(class_scope:pb.Struct_City_Info)
 private:
  inline void set_has_city_id();
  inline void clear_has_city_id();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_combat_group_id();
  inline void clear_has_combat_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 city_id_;
  ::google::protobuf::uint32 country_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 combat_group_id_;
  ::google::protobuf::RepeatedPtrField< ::pb::ExpeditionNpc > exnpcs_;
  ::google::protobuf::RepeatedPtrField< ::pb::callUPInfo > m_call_info_;
  ::google::protobuf::RepeatedPtrField< ::pb::callUPInfo > m_monster_call_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_City_2eproto();
  friend void protobuf_AssignDesc_City_2eproto();
  friend void protobuf_ShutdownFile_City_2eproto();

  void InitAsDefaultInstance();
  static Struct_City_Info* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_City_All_Info : public ::google::protobuf::Message {
 public:
  GS2C_City_All_Info();
  virtual ~GS2C_City_All_Info();

  GS2C_City_All_Info(const GS2C_City_All_Info& from);

  inline GS2C_City_All_Info& operator=(const GS2C_City_All_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_City_All_Info& default_instance();

  void Swap(GS2C_City_All_Info* other);

  // implements Message ----------------------------------------------

  GS2C_City_All_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_City_All_Info& from);
  void MergeFrom(const GS2C_City_All_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Struct_City_Info city_lst = 1;
  inline int city_lst_size() const;
  inline void clear_city_lst();
  static const int kCityLstFieldNumber = 1;
  inline const ::pb::Struct_City_Info& city_lst(int index) const;
  inline ::pb::Struct_City_Info* mutable_city_lst(int index);
  inline ::pb::Struct_City_Info* add_city_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Struct_City_Info >&
      city_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Struct_City_Info >*
      mutable_city_lst();

  // repeated uint64 call_up_down_list = 2;
  inline int call_up_down_list_size() const;
  inline void clear_call_up_down_list();
  static const int kCallUpDownListFieldNumber = 2;
  inline ::google::protobuf::uint64 call_up_down_list(int index) const;
  inline void set_call_up_down_list(int index, ::google::protobuf::uint64 value);
  inline void add_call_up_down_list(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      call_up_down_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_call_up_down_list();

  // repeated .pb.GS2C_Notice_Country_NPC_NextTime npc_time = 3;
  inline int npc_time_size() const;
  inline void clear_npc_time();
  static const int kNpcTimeFieldNumber = 3;
  inline const ::pb::GS2C_Notice_Country_NPC_NextTime& npc_time(int index) const;
  inline ::pb::GS2C_Notice_Country_NPC_NextTime* mutable_npc_time(int index);
  inline ::pb::GS2C_Notice_Country_NPC_NextTime* add_npc_time();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Notice_Country_NPC_NextTime >&
      npc_time() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Notice_Country_NPC_NextTime >*
      mutable_npc_time();

  // repeated uint64 monster_call_up_down_lst = 4;
  inline int monster_call_up_down_lst_size() const;
  inline void clear_monster_call_up_down_lst();
  static const int kMonsterCallUpDownLstFieldNumber = 4;
  inline ::google::protobuf::uint64 monster_call_up_down_lst(int index) const;
  inline void set_monster_call_up_down_lst(int index, ::google::protobuf::uint64 value);
  inline void add_monster_call_up_down_lst(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      monster_call_up_down_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_monster_call_up_down_lst();

  // @@protoc_insertion_point(class_scope:pb.GS2C_City_All_Info)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::Struct_City_Info > city_lst_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > call_up_down_list_;
  ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Notice_Country_NPC_NextTime > npc_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > monster_call_up_down_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_City_2eproto();
  friend void protobuf_AssignDesc_City_2eproto();
  friend void protobuf_ShutdownFile_City_2eproto();

  void InitAsDefaultInstance();
  static GS2C_City_All_Info* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_City_Update_Info : public ::google::protobuf::Message {
 public:
  GS2C_City_Update_Info();
  virtual ~GS2C_City_Update_Info();

  GS2C_City_Update_Info(const GS2C_City_Update_Info& from);

  inline GS2C_City_Update_Info& operator=(const GS2C_City_Update_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_City_Update_Info& default_instance();

  void Swap(GS2C_City_Update_Info* other);

  // implements Message ----------------------------------------------

  GS2C_City_Update_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_City_Update_Info& from);
  void MergeFrom(const GS2C_City_Update_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.Struct_City_Info city = 1;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 1;
  inline const ::pb::Struct_City_Info& city() const;
  inline ::pb::Struct_City_Info* mutable_city();
  inline ::pb::Struct_City_Info* release_city();
  inline void set_allocated_city(::pb::Struct_City_Info* city);

  // @@protoc_insertion_point(class_scope:pb.GS2C_City_Update_Info)
 private:
  inline void set_has_city();
  inline void clear_has_city();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::Struct_City_Info* city_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_City_2eproto();
  friend void protobuf_AssignDesc_City_2eproto();
  friend void protobuf_ShutdownFile_City_2eproto();

  void InitAsDefaultInstance();
  static GS2C_City_Update_Info* default_instance_;
};
// ===================================================================


// ===================================================================

// ExpeditionNpc

// optional uint32 country_id = 1;
inline bool ExpeditionNpc::has_country_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExpeditionNpc::set_has_country_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExpeditionNpc::clear_has_country_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExpeditionNpc::clear_country_id() {
  country_id_ = 0u;
  clear_has_country_id();
}
inline ::google::protobuf::uint32 ExpeditionNpc::country_id() const {
  return country_id_;
}
inline void ExpeditionNpc::set_country_id(::google::protobuf::uint32 value) {
  set_has_country_id();
  country_id_ = value;
}

// optional uint32 npc_table_id = 2;
inline bool ExpeditionNpc::has_npc_table_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExpeditionNpc::set_has_npc_table_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExpeditionNpc::clear_has_npc_table_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExpeditionNpc::clear_npc_table_id() {
  npc_table_id_ = 0u;
  clear_has_npc_table_id();
}
inline ::google::protobuf::uint32 ExpeditionNpc::npc_table_id() const {
  return npc_table_id_;
}
inline void ExpeditionNpc::set_npc_table_id(::google::protobuf::uint32 value) {
  set_has_npc_table_id();
  npc_table_id_ = value;
}

// optional uint32 expeid = 3;
inline bool ExpeditionNpc::has_expeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExpeditionNpc::set_has_expeid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExpeditionNpc::clear_has_expeid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExpeditionNpc::clear_expeid() {
  expeid_ = 0u;
  clear_has_expeid();
}
inline ::google::protobuf::uint32 ExpeditionNpc::expeid() const {
  return expeid_;
}
inline void ExpeditionNpc::set_expeid(::google::protobuf::uint32 value) {
  set_has_expeid();
  expeid_ = value;
}

// -------------------------------------------------------------------

// callUPInfo

// optional uint64 m_unique_callid = 1;
inline bool callUPInfo::has_m_unique_callid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void callUPInfo::set_has_m_unique_callid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void callUPInfo::clear_has_m_unique_callid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void callUPInfo::clear_m_unique_callid() {
  m_unique_callid_ = GOOGLE_ULONGLONG(0);
  clear_has_m_unique_callid();
}
inline ::google::protobuf::uint64 callUPInfo::m_unique_callid() const {
  return m_unique_callid_;
}
inline void callUPInfo::set_m_unique_callid(::google::protobuf::uint64 value) {
  set_has_m_unique_callid();
  m_unique_callid_ = value;
}

// optional uint32 country_call_up = 2;
inline bool callUPInfo::has_country_call_up() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void callUPInfo::set_has_country_call_up() {
  _has_bits_[0] |= 0x00000002u;
}
inline void callUPInfo::clear_has_country_call_up() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void callUPInfo::clear_country_call_up() {
  country_call_up_ = 0u;
  clear_has_country_call_up();
}
inline ::google::protobuf::uint32 callUPInfo::country_call_up() const {
  return country_call_up_;
}
inline void callUPInfo::set_country_call_up(::google::protobuf::uint32 value) {
  set_has_country_call_up();
  country_call_up_ = value;
}

// optional uint64 callup_end_time = 3;
inline bool callUPInfo::has_callup_end_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void callUPInfo::set_has_callup_end_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void callUPInfo::clear_has_callup_end_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void callUPInfo::clear_callup_end_time() {
  callup_end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_callup_end_time();
}
inline ::google::protobuf::uint64 callUPInfo::callup_end_time() const {
  return callup_end_time_;
}
inline void callUPInfo::set_callup_end_time(::google::protobuf::uint64 value) {
  set_has_callup_end_time();
  callup_end_time_ = value;
}

// -------------------------------------------------------------------

// Struct_City_Info

// required uint32 city_id = 1;
inline bool Struct_City_Info::has_city_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Struct_City_Info::set_has_city_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Struct_City_Info::clear_has_city_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Struct_City_Info::clear_city_id() {
  city_id_ = 0u;
  clear_has_city_id();
}
inline ::google::protobuf::uint32 Struct_City_Info::city_id() const {
  return city_id_;
}
inline void Struct_City_Info::set_city_id(::google::protobuf::uint32 value) {
  set_has_city_id();
  city_id_ = value;
}

// optional uint32 country = 2;
inline bool Struct_City_Info::has_country() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Struct_City_Info::set_has_country() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Struct_City_Info::clear_has_country() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Struct_City_Info::clear_country() {
  country_ = 0u;
  clear_has_country();
}
inline ::google::protobuf::uint32 Struct_City_Info::country() const {
  return country_;
}
inline void Struct_City_Info::set_country(::google::protobuf::uint32 value) {
  set_has_country();
  country_ = value;
}

// optional uint32 status = 3;
inline bool Struct_City_Info::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Struct_City_Info::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Struct_City_Info::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Struct_City_Info::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 Struct_City_Info::status() const {
  return status_;
}
inline void Struct_City_Info::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 combat_group_id = 4;
inline bool Struct_City_Info::has_combat_group_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Struct_City_Info::set_has_combat_group_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Struct_City_Info::clear_has_combat_group_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Struct_City_Info::clear_combat_group_id() {
  combat_group_id_ = 0u;
  clear_has_combat_group_id();
}
inline ::google::protobuf::uint32 Struct_City_Info::combat_group_id() const {
  return combat_group_id_;
}
inline void Struct_City_Info::set_combat_group_id(::google::protobuf::uint32 value) {
  set_has_combat_group_id();
  combat_group_id_ = value;
}

// repeated .pb.ExpeditionNpc exNpcs = 5;
inline int Struct_City_Info::exnpcs_size() const {
  return exnpcs_.size();
}
inline void Struct_City_Info::clear_exnpcs() {
  exnpcs_.Clear();
}
inline const ::pb::ExpeditionNpc& Struct_City_Info::exnpcs(int index) const {
  return exnpcs_.Get(index);
}
inline ::pb::ExpeditionNpc* Struct_City_Info::mutable_exnpcs(int index) {
  return exnpcs_.Mutable(index);
}
inline ::pb::ExpeditionNpc* Struct_City_Info::add_exnpcs() {
  return exnpcs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::ExpeditionNpc >&
Struct_City_Info::exnpcs() const {
  return exnpcs_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::ExpeditionNpc >*
Struct_City_Info::mutable_exnpcs() {
  return &exnpcs_;
}

// repeated .pb.callUPInfo m_call_info = 6;
inline int Struct_City_Info::m_call_info_size() const {
  return m_call_info_.size();
}
inline void Struct_City_Info::clear_m_call_info() {
  m_call_info_.Clear();
}
inline const ::pb::callUPInfo& Struct_City_Info::m_call_info(int index) const {
  return m_call_info_.Get(index);
}
inline ::pb::callUPInfo* Struct_City_Info::mutable_m_call_info(int index) {
  return m_call_info_.Mutable(index);
}
inline ::pb::callUPInfo* Struct_City_Info::add_m_call_info() {
  return m_call_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::callUPInfo >&
Struct_City_Info::m_call_info() const {
  return m_call_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::callUPInfo >*
Struct_City_Info::mutable_m_call_info() {
  return &m_call_info_;
}

// repeated .pb.callUPInfo m_monster_call_info = 7;
inline int Struct_City_Info::m_monster_call_info_size() const {
  return m_monster_call_info_.size();
}
inline void Struct_City_Info::clear_m_monster_call_info() {
  m_monster_call_info_.Clear();
}
inline const ::pb::callUPInfo& Struct_City_Info::m_monster_call_info(int index) const {
  return m_monster_call_info_.Get(index);
}
inline ::pb::callUPInfo* Struct_City_Info::mutable_m_monster_call_info(int index) {
  return m_monster_call_info_.Mutable(index);
}
inline ::pb::callUPInfo* Struct_City_Info::add_m_monster_call_info() {
  return m_monster_call_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::callUPInfo >&
Struct_City_Info::m_monster_call_info() const {
  return m_monster_call_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::callUPInfo >*
Struct_City_Info::mutable_m_monster_call_info() {
  return &m_monster_call_info_;
}

// -------------------------------------------------------------------

// GS2C_City_All_Info

// repeated .pb.Struct_City_Info city_lst = 1;
inline int GS2C_City_All_Info::city_lst_size() const {
  return city_lst_.size();
}
inline void GS2C_City_All_Info::clear_city_lst() {
  city_lst_.Clear();
}
inline const ::pb::Struct_City_Info& GS2C_City_All_Info::city_lst(int index) const {
  return city_lst_.Get(index);
}
inline ::pb::Struct_City_Info* GS2C_City_All_Info::mutable_city_lst(int index) {
  return city_lst_.Mutable(index);
}
inline ::pb::Struct_City_Info* GS2C_City_All_Info::add_city_lst() {
  return city_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Struct_City_Info >&
GS2C_City_All_Info::city_lst() const {
  return city_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Struct_City_Info >*
GS2C_City_All_Info::mutable_city_lst() {
  return &city_lst_;
}

// repeated uint64 call_up_down_list = 2;
inline int GS2C_City_All_Info::call_up_down_list_size() const {
  return call_up_down_list_.size();
}
inline void GS2C_City_All_Info::clear_call_up_down_list() {
  call_up_down_list_.Clear();
}
inline ::google::protobuf::uint64 GS2C_City_All_Info::call_up_down_list(int index) const {
  return call_up_down_list_.Get(index);
}
inline void GS2C_City_All_Info::set_call_up_down_list(int index, ::google::protobuf::uint64 value) {
  call_up_down_list_.Set(index, value);
}
inline void GS2C_City_All_Info::add_call_up_down_list(::google::protobuf::uint64 value) {
  call_up_down_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
GS2C_City_All_Info::call_up_down_list() const {
  return call_up_down_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
GS2C_City_All_Info::mutable_call_up_down_list() {
  return &call_up_down_list_;
}

// repeated .pb.GS2C_Notice_Country_NPC_NextTime npc_time = 3;
inline int GS2C_City_All_Info::npc_time_size() const {
  return npc_time_.size();
}
inline void GS2C_City_All_Info::clear_npc_time() {
  npc_time_.Clear();
}
inline const ::pb::GS2C_Notice_Country_NPC_NextTime& GS2C_City_All_Info::npc_time(int index) const {
  return npc_time_.Get(index);
}
inline ::pb::GS2C_Notice_Country_NPC_NextTime* GS2C_City_All_Info::mutable_npc_time(int index) {
  return npc_time_.Mutable(index);
}
inline ::pb::GS2C_Notice_Country_NPC_NextTime* GS2C_City_All_Info::add_npc_time() {
  return npc_time_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Notice_Country_NPC_NextTime >&
GS2C_City_All_Info::npc_time() const {
  return npc_time_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Notice_Country_NPC_NextTime >*
GS2C_City_All_Info::mutable_npc_time() {
  return &npc_time_;
}

// repeated uint64 monster_call_up_down_lst = 4;
inline int GS2C_City_All_Info::monster_call_up_down_lst_size() const {
  return monster_call_up_down_lst_.size();
}
inline void GS2C_City_All_Info::clear_monster_call_up_down_lst() {
  monster_call_up_down_lst_.Clear();
}
inline ::google::protobuf::uint64 GS2C_City_All_Info::monster_call_up_down_lst(int index) const {
  return monster_call_up_down_lst_.Get(index);
}
inline void GS2C_City_All_Info::set_monster_call_up_down_lst(int index, ::google::protobuf::uint64 value) {
  monster_call_up_down_lst_.Set(index, value);
}
inline void GS2C_City_All_Info::add_monster_call_up_down_lst(::google::protobuf::uint64 value) {
  monster_call_up_down_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
GS2C_City_All_Info::monster_call_up_down_lst() const {
  return monster_call_up_down_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
GS2C_City_All_Info::mutable_monster_call_up_down_lst() {
  return &monster_call_up_down_lst_;
}

// -------------------------------------------------------------------

// GS2C_City_Update_Info

// required .pb.Struct_City_Info city = 1;
inline bool GS2C_City_Update_Info::has_city() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_City_Update_Info::set_has_city() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_City_Update_Info::clear_has_city() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_City_Update_Info::clear_city() {
  if (city_ != NULL) city_->::pb::Struct_City_Info::Clear();
  clear_has_city();
}
inline const ::pb::Struct_City_Info& GS2C_City_Update_Info::city() const {
  return city_ != NULL ? *city_ : *default_instance_->city_;
}
inline ::pb::Struct_City_Info* GS2C_City_Update_Info::mutable_city() {
  set_has_city();
  if (city_ == NULL) city_ = new ::pb::Struct_City_Info;
  return city_;
}
inline ::pb::Struct_City_Info* GS2C_City_Update_Info::release_city() {
  clear_has_city();
  ::pb::Struct_City_Info* temp = city_;
  city_ = NULL;
  return temp;
}
inline void GS2C_City_Update_Info::set_allocated_city(::pb::Struct_City_Info* city) {
  delete city_;
  city_ = city;
  if (city) {
    set_has_city();
  } else {
    clear_has_city();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_City_2eproto__INCLUDED
