// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TeachMap.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TeachMap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* City_Combat_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  City_Combat_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Get_Teach_Rec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Get_Teach_Rec_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Request_Teach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Request_Teach_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Answer_Teach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Answer_Teach_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Teach_Finish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Teach_Finish_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Rush_Teach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Rush_Teach_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Rush_Teach_Ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Rush_Teach_Ret_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Teach_Ret_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_TeachMap_2eproto() {
  protobuf_AddDesc_TeachMap_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TeachMap.proto");
  GOOGLE_CHECK(file != NULL);
  City_Combat_Info_descriptor_ = file->message_type(0);
  static const int City_Combat_Info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City_Combat_Info, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City_Combat_Info, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City_Combat_Info, groupid_),
  };
  City_Combat_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      City_Combat_Info_descriptor_,
      City_Combat_Info::default_instance_,
      City_Combat_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City_Combat_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City_Combat_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(City_Combat_Info));
  GS2C_Get_Teach_Rec_descriptor_ = file->message_type(1);
  static const int GS2C_Get_Teach_Rec_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Get_Teach_Rec, currentteachid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Get_Teach_Rec, cityrec_),
  };
  GS2C_Get_Teach_Rec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Get_Teach_Rec_descriptor_,
      GS2C_Get_Teach_Rec::default_instance_,
      GS2C_Get_Teach_Rec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Get_Teach_Rec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Get_Teach_Rec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Get_Teach_Rec));
  C2GS_Request_Teach_descriptor_ = file->message_type(2);
  static const int C2GS_Request_Teach_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Request_Teach, teachid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Request_Teach, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Request_Teach, heroid_),
  };
  C2GS_Request_Teach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Request_Teach_descriptor_,
      C2GS_Request_Teach::default_instance_,
      C2GS_Request_Teach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Request_Teach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Request_Teach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Request_Teach));
  GS2C_Answer_Teach_descriptor_ = file->message_type(3);
  static const int GS2C_Answer_Teach_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Answer_Teach, issuccess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Answer_Teach, ret_),
  };
  GS2C_Answer_Teach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Answer_Teach_descriptor_,
      GS2C_Answer_Teach::default_instance_,
      GS2C_Answer_Teach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Answer_Teach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Answer_Teach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Answer_Teach));
  GS2C_Teach_Finish_descriptor_ = file->message_type(4);
  static const int GS2C_Teach_Finish_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Teach_Finish, teachid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Teach_Finish, isfinish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Teach_Finish, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Teach_Finish, rewards_),
  };
  GS2C_Teach_Finish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Teach_Finish_descriptor_,
      GS2C_Teach_Finish::default_instance_,
      GS2C_Teach_Finish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Teach_Finish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Teach_Finish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Teach_Finish));
  C2GS_Rush_Teach_descriptor_ = file->message_type(5);
  static const int C2GS_Rush_Teach_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Rush_Teach, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Rush_Teach, is_attacker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Rush_Teach, des_city_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Rush_Teach, heroid_),
  };
  C2GS_Rush_Teach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Rush_Teach_descriptor_,
      C2GS_Rush_Teach::default_instance_,
      C2GS_Rush_Teach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Rush_Teach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Rush_Teach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Rush_Teach));
  GS2C_Rush_Teach_Ret_descriptor_ = file->message_type(6);
  static const int GS2C_Rush_Teach_Ret_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Rush_Teach_Ret, issuccess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Rush_Teach_Ret, ret_),
  };
  GS2C_Rush_Teach_Ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Rush_Teach_Ret_descriptor_,
      GS2C_Rush_Teach_Ret::default_instance_,
      GS2C_Rush_Teach_Ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Rush_Teach_Ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Rush_Teach_Ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Rush_Teach_Ret));
  Teach_Ret_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TeachMap_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    City_Combat_Info_descriptor_, &City_Combat_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Get_Teach_Rec_descriptor_, &GS2C_Get_Teach_Rec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Request_Teach_descriptor_, &C2GS_Request_Teach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Answer_Teach_descriptor_, &GS2C_Answer_Teach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Teach_Finish_descriptor_, &GS2C_Teach_Finish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Rush_Teach_descriptor_, &C2GS_Rush_Teach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Rush_Teach_Ret_descriptor_, &GS2C_Rush_Teach_Ret::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TeachMap_2eproto() {
  delete City_Combat_Info::default_instance_;
  delete City_Combat_Info_reflection_;
  delete GS2C_Get_Teach_Rec::default_instance_;
  delete GS2C_Get_Teach_Rec_reflection_;
  delete C2GS_Request_Teach::default_instance_;
  delete C2GS_Request_Teach_reflection_;
  delete GS2C_Answer_Teach::default_instance_;
  delete GS2C_Answer_Teach_reflection_;
  delete GS2C_Teach_Finish::default_instance_;
  delete GS2C_Teach_Finish_reflection_;
  delete C2GS_Rush_Teach::default_instance_;
  delete C2GS_Rush_Teach_reflection_;
  delete GS2C_Rush_Teach_Ret::default_instance_;
  delete GS2C_Rush_Teach_Ret_reflection_;
}

void protobuf_AddDesc_TeachMap_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_CommomDef_2eproto();
  ::pb::protobuf_AddDesc_Combat_2eproto();
  ::pb::protobuf_AddDesc_Item_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016TeachMap.proto\022\002pb\032\017CommomDef.proto\032\014C"
    "ombat.proto\032\nItem.proto\"F\n\020City_Combat_I"
    "nfo\022\016\n\006CityId\030\001 \001(\r\022\021\n\tcountryid\030\002 \001(\r\022\017"
    "\n\007groupid\030\003 \001(\r\"S\n\022GS2C_Get_Teach_Rec\022\026\n"
    "\016currentTeachid\030\001 \001(\r\022%\n\007cityrec\030\002 \003(\0132\024"
    ".pb.City_Combat_Info\"E\n\022C2GS_Request_Tea"
    "ch\022\017\n\007teachid\030\001 \001(\r\022\016\n\006cityid\030\002 \001(\r\022\016\n\006h"
    "eroid\030\003 \001(\r\"B\n\021GS2C_Answer_Teach\022\021\n\tisSu"
    "ccess\030\001 \001(\010\022\032\n\003ret\030\002 \001(\0162\r.pb.Teach_Ret\""
    "m\n\021GS2C_Teach_Finish\022\017\n\007teachid\030\001 \001(\r\022\020\n"
    "\010isfinish\030\002 \001(\010\022\017\n\007errcode\030\003 \001(\r\022$\n\007rewa"
    "rds\030\004 \001(\0132\023.pb.GS2C_LootResult\"]\n\017C2GS_R"
    "ush_Teach\022\020\n\010group_id\030\001 \002(\r\022\023\n\013is_attack"
    "er\030\002 \002(\010\022\023\n\013des_city_id\030\003 \002(\r\022\016\n\006heroid\030"
    "\004 \002(\r\"D\n\023GS2C_Rush_Teach_Ret\022\021\n\tisSucces"
    "s\030\001 \001(\010\022\032\n\003ret\030\002 \001(\0162\r.pb.Teach_Ret*t\n\tT"
    "each_Ret\022\030\n\024Teach_Common_success\020\000\022\025\n\021Te"
    "ach_Common_Fail\020\001\022\032\n\026Teach_Already_Finis"
    "hed\020\002\022\032\n\026Teach_Rush_Force_Limit\020\003", 753);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TeachMap.proto", &protobuf_RegisterTypes);
  City_Combat_Info::default_instance_ = new City_Combat_Info();
  GS2C_Get_Teach_Rec::default_instance_ = new GS2C_Get_Teach_Rec();
  C2GS_Request_Teach::default_instance_ = new C2GS_Request_Teach();
  GS2C_Answer_Teach::default_instance_ = new GS2C_Answer_Teach();
  GS2C_Teach_Finish::default_instance_ = new GS2C_Teach_Finish();
  C2GS_Rush_Teach::default_instance_ = new C2GS_Rush_Teach();
  GS2C_Rush_Teach_Ret::default_instance_ = new GS2C_Rush_Teach_Ret();
  City_Combat_Info::default_instance_->InitAsDefaultInstance();
  GS2C_Get_Teach_Rec::default_instance_->InitAsDefaultInstance();
  C2GS_Request_Teach::default_instance_->InitAsDefaultInstance();
  GS2C_Answer_Teach::default_instance_->InitAsDefaultInstance();
  GS2C_Teach_Finish::default_instance_->InitAsDefaultInstance();
  C2GS_Rush_Teach::default_instance_->InitAsDefaultInstance();
  GS2C_Rush_Teach_Ret::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TeachMap_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TeachMap_2eproto {
  StaticDescriptorInitializer_TeachMap_2eproto() {
    protobuf_AddDesc_TeachMap_2eproto();
  }
} static_descriptor_initializer_TeachMap_2eproto_;
const ::google::protobuf::EnumDescriptor* Teach_Ret_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Teach_Ret_descriptor_;
}
bool Teach_Ret_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int City_Combat_Info::kCityIdFieldNumber;
const int City_Combat_Info::kCountryidFieldNumber;
const int City_Combat_Info::kGroupidFieldNumber;
#endif  // !_MSC_VER

City_Combat_Info::City_Combat_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void City_Combat_Info::InitAsDefaultInstance() {
}

City_Combat_Info::City_Combat_Info(const City_Combat_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void City_Combat_Info::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0u;
  countryid_ = 0u;
  groupid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

City_Combat_Info::~City_Combat_Info() {
  SharedDtor();
}

void City_Combat_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void City_Combat_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* City_Combat_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return City_Combat_Info_descriptor_;
}

const City_Combat_Info& City_Combat_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeachMap_2eproto();
  return *default_instance_;
}

City_Combat_Info* City_Combat_Info::default_instance_ = NULL;

City_Combat_Info* City_Combat_Info::New() const {
  return new City_Combat_Info;
}

void City_Combat_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cityid_ = 0u;
    countryid_ = 0u;
    groupid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool City_Combat_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CityId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_countryid;
        break;
      }

      // optional uint32 countryid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_countryid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countryid_)));
          set_has_countryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_groupid;
        break;
      }

      // optional uint32 groupid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void City_Combat_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }

  // optional uint32 countryid = 2;
  if (has_countryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->countryid(), output);
  }

  // optional uint32 groupid = 3;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* City_Combat_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }

  // optional uint32 countryid = 2;
  if (has_countryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->countryid(), target);
  }

  // optional uint32 groupid = 3;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int City_Combat_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CityId = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional uint32 countryid = 2;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countryid());
    }

    // optional uint32 groupid = 3;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void City_Combat_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const City_Combat_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const City_Combat_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void City_Combat_Info::MergeFrom(const City_Combat_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_countryid()) {
      set_countryid(from.countryid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void City_Combat_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void City_Combat_Info::CopyFrom(const City_Combat_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool City_Combat_Info::IsInitialized() const {

  return true;
}

void City_Combat_Info::Swap(City_Combat_Info* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(countryid_, other->countryid_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata City_Combat_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = City_Combat_Info_descriptor_;
  metadata.reflection = City_Combat_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Get_Teach_Rec::kCurrentTeachidFieldNumber;
const int GS2C_Get_Teach_Rec::kCityrecFieldNumber;
#endif  // !_MSC_VER

GS2C_Get_Teach_Rec::GS2C_Get_Teach_Rec()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Get_Teach_Rec::InitAsDefaultInstance() {
}

GS2C_Get_Teach_Rec::GS2C_Get_Teach_Rec(const GS2C_Get_Teach_Rec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Get_Teach_Rec::SharedCtor() {
  _cached_size_ = 0;
  currentteachid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Get_Teach_Rec::~GS2C_Get_Teach_Rec() {
  SharedDtor();
}

void GS2C_Get_Teach_Rec::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Get_Teach_Rec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Get_Teach_Rec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Get_Teach_Rec_descriptor_;
}

const GS2C_Get_Teach_Rec& GS2C_Get_Teach_Rec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeachMap_2eproto();
  return *default_instance_;
}

GS2C_Get_Teach_Rec* GS2C_Get_Teach_Rec::default_instance_ = NULL;

GS2C_Get_Teach_Rec* GS2C_Get_Teach_Rec::New() const {
  return new GS2C_Get_Teach_Rec;
}

void GS2C_Get_Teach_Rec::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    currentteachid_ = 0u;
  }
  cityrec_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Get_Teach_Rec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 currentTeachid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currentteachid_)));
          set_has_currentteachid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cityrec;
        break;
      }

      // repeated .pb.City_Combat_Info cityrec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cityrec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cityrec()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cityrec;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Get_Teach_Rec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 currentTeachid = 1;
  if (has_currentteachid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->currentteachid(), output);
  }

  // repeated .pb.City_Combat_Info cityrec = 2;
  for (int i = 0; i < this->cityrec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cityrec(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Get_Teach_Rec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 currentTeachid = 1;
  if (has_currentteachid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->currentteachid(), target);
  }

  // repeated .pb.City_Combat_Info cityrec = 2;
  for (int i = 0; i < this->cityrec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cityrec(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Get_Teach_Rec::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 currentTeachid = 1;
    if (has_currentteachid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currentteachid());
    }

  }
  // repeated .pb.City_Combat_Info cityrec = 2;
  total_size += 1 * this->cityrec_size();
  for (int i = 0; i < this->cityrec_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cityrec(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Get_Teach_Rec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Get_Teach_Rec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Get_Teach_Rec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Get_Teach_Rec::MergeFrom(const GS2C_Get_Teach_Rec& from) {
  GOOGLE_CHECK_NE(&from, this);
  cityrec_.MergeFrom(from.cityrec_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_currentteachid()) {
      set_currentteachid(from.currentteachid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Get_Teach_Rec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Get_Teach_Rec::CopyFrom(const GS2C_Get_Teach_Rec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Get_Teach_Rec::IsInitialized() const {

  return true;
}

void GS2C_Get_Teach_Rec::Swap(GS2C_Get_Teach_Rec* other) {
  if (other != this) {
    std::swap(currentteachid_, other->currentteachid_);
    cityrec_.Swap(&other->cityrec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Get_Teach_Rec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Get_Teach_Rec_descriptor_;
  metadata.reflection = GS2C_Get_Teach_Rec_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Request_Teach::kTeachidFieldNumber;
const int C2GS_Request_Teach::kCityidFieldNumber;
const int C2GS_Request_Teach::kHeroidFieldNumber;
#endif  // !_MSC_VER

C2GS_Request_Teach::C2GS_Request_Teach()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Request_Teach::InitAsDefaultInstance() {
}

C2GS_Request_Teach::C2GS_Request_Teach(const C2GS_Request_Teach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Request_Teach::SharedCtor() {
  _cached_size_ = 0;
  teachid_ = 0u;
  cityid_ = 0u;
  heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Request_Teach::~C2GS_Request_Teach() {
  SharedDtor();
}

void C2GS_Request_Teach::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Request_Teach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Request_Teach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Request_Teach_descriptor_;
}

const C2GS_Request_Teach& C2GS_Request_Teach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeachMap_2eproto();
  return *default_instance_;
}

C2GS_Request_Teach* C2GS_Request_Teach::default_instance_ = NULL;

C2GS_Request_Teach* C2GS_Request_Teach::New() const {
  return new C2GS_Request_Teach;
}

void C2GS_Request_Teach::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teachid_ = 0u;
    cityid_ = 0u;
    heroid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Request_Teach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 teachid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teachid_)));
          set_has_teachid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cityid;
        break;
      }

      // optional uint32 cityid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cityid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_heroid;
        break;
      }

      // optional uint32 heroid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Request_Teach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 teachid = 1;
  if (has_teachid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teachid(), output);
  }

  // optional uint32 cityid = 2;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cityid(), output);
  }

  // optional uint32 heroid = 3;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Request_Teach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 teachid = 1;
  if (has_teachid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teachid(), target);
  }

  // optional uint32 cityid = 2;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cityid(), target);
  }

  // optional uint32 heroid = 3;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Request_Teach::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 teachid = 1;
    if (has_teachid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teachid());
    }

    // optional uint32 cityid = 2;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional uint32 heroid = 3;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Request_Teach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Request_Teach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Request_Teach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Request_Teach::MergeFrom(const C2GS_Request_Teach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teachid()) {
      set_teachid(from.teachid());
    }
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Request_Teach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Request_Teach::CopyFrom(const C2GS_Request_Teach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Request_Teach::IsInitialized() const {

  return true;
}

void C2GS_Request_Teach::Swap(C2GS_Request_Teach* other) {
  if (other != this) {
    std::swap(teachid_, other->teachid_);
    std::swap(cityid_, other->cityid_);
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Request_Teach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Request_Teach_descriptor_;
  metadata.reflection = C2GS_Request_Teach_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Answer_Teach::kIsSuccessFieldNumber;
const int GS2C_Answer_Teach::kRetFieldNumber;
#endif  // !_MSC_VER

GS2C_Answer_Teach::GS2C_Answer_Teach()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Answer_Teach::InitAsDefaultInstance() {
}

GS2C_Answer_Teach::GS2C_Answer_Teach(const GS2C_Answer_Teach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Answer_Teach::SharedCtor() {
  _cached_size_ = 0;
  issuccess_ = false;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Answer_Teach::~GS2C_Answer_Teach() {
  SharedDtor();
}

void GS2C_Answer_Teach::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Answer_Teach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Answer_Teach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Answer_Teach_descriptor_;
}

const GS2C_Answer_Teach& GS2C_Answer_Teach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeachMap_2eproto();
  return *default_instance_;
}

GS2C_Answer_Teach* GS2C_Answer_Teach::default_instance_ = NULL;

GS2C_Answer_Teach* GS2C_Answer_Teach::New() const {
  return new GS2C_Answer_Teach;
}

void GS2C_Answer_Teach::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    issuccess_ = false;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Answer_Teach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isSuccess = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issuccess_)));
          set_has_issuccess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional .pb.Teach_Ret ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Teach_Ret_IsValid(value)) {
            set_ret(static_cast< ::pb::Teach_Ret >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Answer_Teach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool isSuccess = 1;
  if (has_issuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->issuccess(), output);
  }

  // optional .pb.Teach_Ret ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Answer_Teach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isSuccess = 1;
  if (has_issuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->issuccess(), target);
  }

  // optional .pb.Teach_Ret ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Answer_Teach::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isSuccess = 1;
    if (has_issuccess()) {
      total_size += 1 + 1;
    }

    // optional .pb.Teach_Ret ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Answer_Teach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Answer_Teach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Answer_Teach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Answer_Teach::MergeFrom(const GS2C_Answer_Teach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issuccess()) {
      set_issuccess(from.issuccess());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Answer_Teach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Answer_Teach::CopyFrom(const GS2C_Answer_Teach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Answer_Teach::IsInitialized() const {

  return true;
}

void GS2C_Answer_Teach::Swap(GS2C_Answer_Teach* other) {
  if (other != this) {
    std::swap(issuccess_, other->issuccess_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Answer_Teach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Answer_Teach_descriptor_;
  metadata.reflection = GS2C_Answer_Teach_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Teach_Finish::kTeachidFieldNumber;
const int GS2C_Teach_Finish::kIsfinishFieldNumber;
const int GS2C_Teach_Finish::kErrcodeFieldNumber;
const int GS2C_Teach_Finish::kRewardsFieldNumber;
#endif  // !_MSC_VER

GS2C_Teach_Finish::GS2C_Teach_Finish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Teach_Finish::InitAsDefaultInstance() {
  rewards_ = const_cast< ::pb::GS2C_LootResult*>(&::pb::GS2C_LootResult::default_instance());
}

GS2C_Teach_Finish::GS2C_Teach_Finish(const GS2C_Teach_Finish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Teach_Finish::SharedCtor() {
  _cached_size_ = 0;
  teachid_ = 0u;
  isfinish_ = false;
  errcode_ = 0u;
  rewards_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Teach_Finish::~GS2C_Teach_Finish() {
  SharedDtor();
}

void GS2C_Teach_Finish::SharedDtor() {
  if (this != default_instance_) {
    delete rewards_;
  }
}

void GS2C_Teach_Finish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Teach_Finish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Teach_Finish_descriptor_;
}

const GS2C_Teach_Finish& GS2C_Teach_Finish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeachMap_2eproto();
  return *default_instance_;
}

GS2C_Teach_Finish* GS2C_Teach_Finish::default_instance_ = NULL;

GS2C_Teach_Finish* GS2C_Teach_Finish::New() const {
  return new GS2C_Teach_Finish;
}

void GS2C_Teach_Finish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teachid_ = 0u;
    isfinish_ = false;
    errcode_ = 0u;
    if (has_rewards()) {
      if (rewards_ != NULL) rewards_->::pb::GS2C_LootResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Teach_Finish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 teachid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teachid_)));
          set_has_teachid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isfinish;
        break;
      }

      // optional bool isfinish = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isfinish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinish_)));
          set_has_isfinish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_errcode;
        break;
      }

      // optional uint32 errcode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rewards;
        break;
      }

      // optional .pb.GS2C_LootResult rewards = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Teach_Finish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 teachid = 1;
  if (has_teachid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teachid(), output);
  }

  // optional bool isfinish = 2;
  if (has_isfinish()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isfinish(), output);
  }

  // optional uint32 errcode = 3;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->errcode(), output);
  }

  // optional .pb.GS2C_LootResult rewards = 4;
  if (has_rewards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rewards(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Teach_Finish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 teachid = 1;
  if (has_teachid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teachid(), target);
  }

  // optional bool isfinish = 2;
  if (has_isfinish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isfinish(), target);
  }

  // optional uint32 errcode = 3;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->errcode(), target);
  }

  // optional .pb.GS2C_LootResult rewards = 4;
  if (has_rewards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rewards(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Teach_Finish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 teachid = 1;
    if (has_teachid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teachid());
    }

    // optional bool isfinish = 2;
    if (has_isfinish()) {
      total_size += 1 + 1;
    }

    // optional uint32 errcode = 3;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }

    // optional .pb.GS2C_LootResult rewards = 4;
    if (has_rewards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewards());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Teach_Finish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Teach_Finish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Teach_Finish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Teach_Finish::MergeFrom(const GS2C_Teach_Finish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teachid()) {
      set_teachid(from.teachid());
    }
    if (from.has_isfinish()) {
      set_isfinish(from.isfinish());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_rewards()) {
      mutable_rewards()->::pb::GS2C_LootResult::MergeFrom(from.rewards());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Teach_Finish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Teach_Finish::CopyFrom(const GS2C_Teach_Finish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Teach_Finish::IsInitialized() const {

  return true;
}

void GS2C_Teach_Finish::Swap(GS2C_Teach_Finish* other) {
  if (other != this) {
    std::swap(teachid_, other->teachid_);
    std::swap(isfinish_, other->isfinish_);
    std::swap(errcode_, other->errcode_);
    std::swap(rewards_, other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Teach_Finish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Teach_Finish_descriptor_;
  metadata.reflection = GS2C_Teach_Finish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Rush_Teach::kGroupIdFieldNumber;
const int C2GS_Rush_Teach::kIsAttackerFieldNumber;
const int C2GS_Rush_Teach::kDesCityIdFieldNumber;
const int C2GS_Rush_Teach::kHeroidFieldNumber;
#endif  // !_MSC_VER

C2GS_Rush_Teach::C2GS_Rush_Teach()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Rush_Teach::InitAsDefaultInstance() {
}

C2GS_Rush_Teach::C2GS_Rush_Teach(const C2GS_Rush_Teach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Rush_Teach::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  is_attacker_ = false;
  des_city_id_ = 0u;
  heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Rush_Teach::~C2GS_Rush_Teach() {
  SharedDtor();
}

void C2GS_Rush_Teach::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Rush_Teach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Rush_Teach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Rush_Teach_descriptor_;
}

const C2GS_Rush_Teach& C2GS_Rush_Teach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeachMap_2eproto();
  return *default_instance_;
}

C2GS_Rush_Teach* C2GS_Rush_Teach::default_instance_ = NULL;

C2GS_Rush_Teach* C2GS_Rush_Teach::New() const {
  return new C2GS_Rush_Teach;
}

void C2GS_Rush_Teach::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
    is_attacker_ = false;
    des_city_id_ = 0u;
    heroid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Rush_Teach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_attacker;
        break;
      }

      // required bool is_attacker = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_attacker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attacker_)));
          set_has_is_attacker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_des_city_id;
        break;
      }

      // required uint32 des_city_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_des_city_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &des_city_id_)));
          set_has_des_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_heroid;
        break;
      }

      // required uint32 heroid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Rush_Teach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // required bool is_attacker = 2;
  if (has_is_attacker()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_attacker(), output);
  }

  // required uint32 des_city_id = 3;
  if (has_des_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->des_city_id(), output);
  }

  // required uint32 heroid = 4;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Rush_Teach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // required bool is_attacker = 2;
  if (has_is_attacker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_attacker(), target);
  }

  // required uint32 des_city_id = 3;
  if (has_des_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->des_city_id(), target);
  }

  // required uint32 heroid = 4;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Rush_Teach::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required bool is_attacker = 2;
    if (has_is_attacker()) {
      total_size += 1 + 1;
    }

    // required uint32 des_city_id = 3;
    if (has_des_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->des_city_id());
    }

    // required uint32 heroid = 4;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Rush_Teach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Rush_Teach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Rush_Teach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Rush_Teach::MergeFrom(const C2GS_Rush_Teach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_is_attacker()) {
      set_is_attacker(from.is_attacker());
    }
    if (from.has_des_city_id()) {
      set_des_city_id(from.des_city_id());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Rush_Teach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Rush_Teach::CopyFrom(const C2GS_Rush_Teach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Rush_Teach::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void C2GS_Rush_Teach::Swap(C2GS_Rush_Teach* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(is_attacker_, other->is_attacker_);
    std::swap(des_city_id_, other->des_city_id_);
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Rush_Teach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Rush_Teach_descriptor_;
  metadata.reflection = C2GS_Rush_Teach_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Rush_Teach_Ret::kIsSuccessFieldNumber;
const int GS2C_Rush_Teach_Ret::kRetFieldNumber;
#endif  // !_MSC_VER

GS2C_Rush_Teach_Ret::GS2C_Rush_Teach_Ret()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Rush_Teach_Ret::InitAsDefaultInstance() {
}

GS2C_Rush_Teach_Ret::GS2C_Rush_Teach_Ret(const GS2C_Rush_Teach_Ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Rush_Teach_Ret::SharedCtor() {
  _cached_size_ = 0;
  issuccess_ = false;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Rush_Teach_Ret::~GS2C_Rush_Teach_Ret() {
  SharedDtor();
}

void GS2C_Rush_Teach_Ret::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Rush_Teach_Ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Rush_Teach_Ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Rush_Teach_Ret_descriptor_;
}

const GS2C_Rush_Teach_Ret& GS2C_Rush_Teach_Ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeachMap_2eproto();
  return *default_instance_;
}

GS2C_Rush_Teach_Ret* GS2C_Rush_Teach_Ret::default_instance_ = NULL;

GS2C_Rush_Teach_Ret* GS2C_Rush_Teach_Ret::New() const {
  return new GS2C_Rush_Teach_Ret;
}

void GS2C_Rush_Teach_Ret::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    issuccess_ = false;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Rush_Teach_Ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isSuccess = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issuccess_)));
          set_has_issuccess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional .pb.Teach_Ret ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Teach_Ret_IsValid(value)) {
            set_ret(static_cast< ::pb::Teach_Ret >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Rush_Teach_Ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool isSuccess = 1;
  if (has_issuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->issuccess(), output);
  }

  // optional .pb.Teach_Ret ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Rush_Teach_Ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isSuccess = 1;
  if (has_issuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->issuccess(), target);
  }

  // optional .pb.Teach_Ret ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Rush_Teach_Ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isSuccess = 1;
    if (has_issuccess()) {
      total_size += 1 + 1;
    }

    // optional .pb.Teach_Ret ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Rush_Teach_Ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Rush_Teach_Ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Rush_Teach_Ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Rush_Teach_Ret::MergeFrom(const GS2C_Rush_Teach_Ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issuccess()) {
      set_issuccess(from.issuccess());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Rush_Teach_Ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Rush_Teach_Ret::CopyFrom(const GS2C_Rush_Teach_Ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Rush_Teach_Ret::IsInitialized() const {

  return true;
}

void GS2C_Rush_Teach_Ret::Swap(GS2C_Rush_Teach_Ret* other) {
  if (other != this) {
    std::swap(issuccess_, other->issuccess_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Rush_Teach_Ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Rush_Teach_Ret_descriptor_;
  metadata.reflection = GS2C_Rush_Teach_Ret_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
