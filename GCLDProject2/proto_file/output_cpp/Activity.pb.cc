// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Activity.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Activity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* GS2C_ActivityStarBoxInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_ActivityStarBoxInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Activity_Start_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Activity_Start_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Activity_All_Active_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Activity_All_Active_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_ActivityStarBoxReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_ActivityStarBoxReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_ActivityStarNpcReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_ActivityStarNpcReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_ActivityStarBoxLevelUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_ActivityStarBoxLevelUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_ActivityStarBoxFinishCountDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_ActivityStarBoxFinishCountDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_ActivityStarBoxInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_ActivityStarBoxInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_ActivityStarDelete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_ActivityStarDelete_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_ActivityStarBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_ActivityStarBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_XILIAN_TAKE_REWARD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_XILIAN_TAKE_REWARD_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_XILIAN_TAKE_REWARD_RSP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_XILIAN_TAKE_REWARD_RSP_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_XILIAN_TAKE_TEN_REWARD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_XILIAN_TAKE_TEN_REWARD_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Purify_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Purify_Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Purify_Item_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Purify_Item_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZhengWuReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZhengWuReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Show_Dialog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Show_Dialog_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Take_Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Take_Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Take_Reward_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Take_Reward_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Take_MinZhong_Reward_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Take_MinZhong_Reward_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_GovAffairsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_GovAffairsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CelebrityEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CelebrityEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Celebrity_All_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Celebrity_All_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_UseCurrencyToTakeReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_UseCurrencyToTakeReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_UseCurrencyToTakeRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_UseCurrencyToTakeRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Celebrity_Take_Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Celebrity_Take_Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Celebrity_Take_Reward_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Celebrity_Take_Reward_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_ActivityBuyItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_ActivityBuyItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_ActivityBuyItemRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_ActivityBuyItemRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LimitedTimeShopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LimitedTimeShopInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_LimitedTimeShopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_LimitedTimeShopInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Open_Hero_Reward_Box_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Open_Hero_Reward_Box_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Open_Hero_Reward_Box_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Open_Hero_Reward_Box_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Reward_Hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Reward_Hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Reward_Hero_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Reward_Hero_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Reward_Hero_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Reward_Hero_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_Hero_Reward_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_Hero_Reward_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_Hero_Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_Hero_Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_Hero_Reward_delete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_Hero_Reward_delete_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Recharge_rebate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Recharge_rebate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Recharge_rebate_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Recharge_rebate_Rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ACTIVITY_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ACTIIVTY_STAR_BOX_NPC_REWARD_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ACTIVITY_STAR_BOX_LEVEL_UP_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* XILIAN_REWARD_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* XILIAN_RESULT_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Activity_2eproto() {
  protobuf_AddDesc_Activity_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Activity.proto");
  GOOGLE_CHECK(file != NULL);
  GS2C_ActivityStarBoxInfo_descriptor_ = file->message_type(0);
  static const int GS2C_ActivityStarBoxInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ActivityStarBoxInfo, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ActivityStarBoxInfo, next_level_need_wait_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ActivityStarBoxInfo, npc_is_opened_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ActivityStarBoxInfo, left_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ActivityStarBoxInfo, last_take_reward_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ActivityStarBoxInfo, is_all_take_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ActivityStarBoxInfo, activity_start_time_),
  };
  GS2C_ActivityStarBoxInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_ActivityStarBoxInfo_descriptor_,
      GS2C_ActivityStarBoxInfo::default_instance_,
      GS2C_ActivityStarBoxInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ActivityStarBoxInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ActivityStarBoxInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_ActivityStarBoxInfo));
  GS2C_Activity_Start_descriptor_ = file->message_type(1);
  static const int GS2C_Activity_Start_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Activity_Start, activity_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Activity_Start, open_way_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Activity_Start, activity_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Activity_Start, activity_last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Activity_Start, activity_show_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Activity_Start, server_open_time_),
  };
  GS2C_Activity_Start_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Activity_Start_descriptor_,
      GS2C_Activity_Start::default_instance_,
      GS2C_Activity_Start_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Activity_Start, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Activity_Start, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Activity_Start));
  GS2C_Activity_All_Active_Info_descriptor_ = file->message_type(2);
  static const int GS2C_Activity_All_Active_Info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Activity_All_Active_Info, info_),
  };
  GS2C_Activity_All_Active_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Activity_All_Active_Info_descriptor_,
      GS2C_Activity_All_Active_Info::default_instance_,
      GS2C_Activity_All_Active_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Activity_All_Active_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Activity_All_Active_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Activity_All_Active_Info));
  GS2C_ActivityStarBoxReward_descriptor_ = file->message_type(3);
  static const int GS2C_ActivityStarBoxReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ActivityStarBoxReward, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ActivityStarBoxReward, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ActivityStarBoxReward, star_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ActivityStarBoxReward, ret_),
  };
  GS2C_ActivityStarBoxReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_ActivityStarBoxReward_descriptor_,
      GS2C_ActivityStarBoxReward::default_instance_,
      GS2C_ActivityStarBoxReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ActivityStarBoxReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ActivityStarBoxReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_ActivityStarBoxReward));
  GS2C_ActivityStarNpcReward_descriptor_ = file->message_type(4);
  static const int GS2C_ActivityStarNpcReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ActivityStarNpcReward, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ActivityStarNpcReward, left_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ActivityStarNpcReward, take_reward_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ActivityStarNpcReward, ret_),
  };
  GS2C_ActivityStarNpcReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_ActivityStarNpcReward_descriptor_,
      GS2C_ActivityStarNpcReward::default_instance_,
      GS2C_ActivityStarNpcReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ActivityStarNpcReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ActivityStarNpcReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_ActivityStarNpcReward));
  GS2C_ActivityStarBoxLevelUp_descriptor_ = file->message_type(5);
  static const int GS2C_ActivityStarBoxLevelUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ActivityStarBoxLevelUp, result_),
  };
  GS2C_ActivityStarBoxLevelUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_ActivityStarBoxLevelUp_descriptor_,
      GS2C_ActivityStarBoxLevelUp::default_instance_,
      GS2C_ActivityStarBoxLevelUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ActivityStarBoxLevelUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ActivityStarBoxLevelUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_ActivityStarBoxLevelUp));
  GS2C_ActivityStarBoxFinishCountDown_descriptor_ = file->message_type(6);
  static const int GS2C_ActivityStarBoxFinishCountDown_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ActivityStarBoxFinishCountDown, result_),
  };
  GS2C_ActivityStarBoxFinishCountDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_ActivityStarBoxFinishCountDown_descriptor_,
      GS2C_ActivityStarBoxFinishCountDown::default_instance_,
      GS2C_ActivityStarBoxFinishCountDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ActivityStarBoxFinishCountDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ActivityStarBoxFinishCountDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_ActivityStarBoxFinishCountDown));
  GxDB_ActivityStarBoxInfo_descriptor_ = file->message_type(7);
  static const int GxDB_ActivityStarBoxInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_ActivityStarBoxInfo, is_take_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_ActivityStarBoxInfo, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_ActivityStarBoxInfo, npc_is_opened_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_ActivityStarBoxInfo, left_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_ActivityStarBoxInfo, last_take_reward_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_ActivityStarBoxInfo, operate_type_),
  };
  GxDB_ActivityStarBoxInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_ActivityStarBoxInfo_descriptor_,
      GxDB_ActivityStarBoxInfo::default_instance_,
      GxDB_ActivityStarBoxInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_ActivityStarBoxInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_ActivityStarBoxInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_ActivityStarBoxInfo));
  GxDB_ActivityStarDelete_descriptor_ = file->message_type(8);
  static const int GxDB_ActivityStarDelete_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_ActivityStarDelete, operate_type_),
  };
  GxDB_ActivityStarDelete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_ActivityStarDelete_descriptor_,
      GxDB_ActivityStarDelete::default_instance_,
      GxDB_ActivityStarDelete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_ActivityStarDelete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_ActivityStarDelete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_ActivityStarDelete));
  GxDB_ActivityStarBox_descriptor_ = file->message_type(9);
  static const int GxDB_ActivityStarBox_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_ActivityStarBox, info_),
  };
  GxDB_ActivityStarBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_ActivityStarBox_descriptor_,
      GxDB_ActivityStarBox::default_instance_,
      GxDB_ActivityStarBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_ActivityStarBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_ActivityStarBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_ActivityStarBox));
  C2GS_XILIAN_TAKE_REWARD_descriptor_ = file->message_type(10);
  static const int C2GS_XILIAN_TAKE_REWARD_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_XILIAN_TAKE_REWARD, reward_type_),
  };
  C2GS_XILIAN_TAKE_REWARD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_XILIAN_TAKE_REWARD_descriptor_,
      C2GS_XILIAN_TAKE_REWARD::default_instance_,
      C2GS_XILIAN_TAKE_REWARD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_XILIAN_TAKE_REWARD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_XILIAN_TAKE_REWARD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_XILIAN_TAKE_REWARD));
  GS2C_XILIAN_TAKE_REWARD_RSP_descriptor_ = file->message_type(11);
  static const int GS2C_XILIAN_TAKE_REWARD_RSP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_XILIAN_TAKE_REWARD_RSP, reward_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_XILIAN_TAKE_REWARD_RSP, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_XILIAN_TAKE_REWARD_RSP, ret_),
  };
  GS2C_XILIAN_TAKE_REWARD_RSP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_XILIAN_TAKE_REWARD_RSP_descriptor_,
      GS2C_XILIAN_TAKE_REWARD_RSP::default_instance_,
      GS2C_XILIAN_TAKE_REWARD_RSP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_XILIAN_TAKE_REWARD_RSP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_XILIAN_TAKE_REWARD_RSP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_XILIAN_TAKE_REWARD_RSP));
  GS2C_XILIAN_TAKE_TEN_REWARD_descriptor_ = file->message_type(12);
  static const int GS2C_XILIAN_TAKE_TEN_REWARD_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_XILIAN_TAKE_TEN_REWARD, count_),
  };
  GS2C_XILIAN_TAKE_TEN_REWARD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_XILIAN_TAKE_TEN_REWARD_descriptor_,
      GS2C_XILIAN_TAKE_TEN_REWARD::default_instance_,
      GS2C_XILIAN_TAKE_TEN_REWARD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_XILIAN_TAKE_TEN_REWARD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_XILIAN_TAKE_TEN_REWARD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_XILIAN_TAKE_TEN_REWARD));
  C2GS_Purify_Item_descriptor_ = file->message_type(13);
  static const int C2GS_Purify_Item_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Purify_Item, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Purify_Item, solt_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Purify_Item, attr_id_),
  };
  C2GS_Purify_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Purify_Item_descriptor_,
      C2GS_Purify_Item::default_instance_,
      C2GS_Purify_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Purify_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Purify_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Purify_Item));
  GS2C_Purify_Item_Rsp_descriptor_ = file->message_type(14);
  static const int GS2C_Purify_Item_Rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Purify_Item_Rsp, err_code_),
  };
  GS2C_Purify_Item_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Purify_Item_Rsp_descriptor_,
      GS2C_Purify_Item_Rsp::default_instance_,
      GS2C_Purify_Item_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Purify_Item_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Purify_Item_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Purify_Item_Rsp));
  ZhengWuReward_descriptor_ = file->message_type(15);
  static const int ZhengWuReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhengWuReward, reward_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhengWuReward, reward_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhengWuReward, cost_diamond_),
  };
  ZhengWuReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZhengWuReward_descriptor_,
      ZhengWuReward::default_instance_,
      ZhengWuReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhengWuReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhengWuReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZhengWuReward));
  GS2C_Show_Dialog_descriptor_ = file->message_type(16);
  static const int GS2C_Show_Dialog_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Show_Dialog, left_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Show_Dialog, right_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Show_Dialog, title_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Show_Dialog, left_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Show_Dialog, right_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Show_Dialog, image_name_),
  };
  GS2C_Show_Dialog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Show_Dialog_descriptor_,
      GS2C_Show_Dialog::default_instance_,
      GS2C_Show_Dialog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Show_Dialog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Show_Dialog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Show_Dialog));
  C2GS_Take_Reward_descriptor_ = file->message_type(17);
  static const int C2GS_Take_Reward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Take_Reward, reward_),
  };
  C2GS_Take_Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Take_Reward_descriptor_,
      C2GS_Take_Reward::default_instance_,
      C2GS_Take_Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Take_Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Take_Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Take_Reward));
  GS2C_Take_Reward_Rsp_descriptor_ = file->message_type(18);
  static const int GS2C_Take_Reward_Rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_Reward_Rsp, ret_),
  };
  GS2C_Take_Reward_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Take_Reward_Rsp_descriptor_,
      GS2C_Take_Reward_Rsp::default_instance_,
      GS2C_Take_Reward_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_Reward_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_Reward_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Take_Reward_Rsp));
  GS2C_Take_MinZhong_Reward_Rsp_descriptor_ = file->message_type(19);
  static const int GS2C_Take_MinZhong_Reward_Rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_MinZhong_Reward_Rsp, reward_),
  };
  GS2C_Take_MinZhong_Reward_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Take_MinZhong_Reward_Rsp_descriptor_,
      GS2C_Take_MinZhong_Reward_Rsp::default_instance_,
      GS2C_Take_MinZhong_Reward_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_MinZhong_Reward_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_MinZhong_Reward_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Take_MinZhong_Reward_Rsp));
  GxDB_GovAffairsInfo_descriptor_ = file->message_type(20);
  static const int GxDB_GovAffairsInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GovAffairsInfo, left_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GovAffairsInfo, right_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GovAffairsInfo, title_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GovAffairsInfo, left_reward_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GovAffairsInfo, left_reward_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GovAffairsInfo, right_reward_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GovAffairsInfo, right_reward_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GovAffairsInfo, cost_diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GovAffairsInfo, image_name_),
  };
  GxDB_GovAffairsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_GovAffairsInfo_descriptor_,
      GxDB_GovAffairsInfo::default_instance_,
      GxDB_GovAffairsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GovAffairsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GovAffairsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_GovAffairsInfo));
  CelebrityEvent_descriptor_ = file->message_type(21);
  static const int CelebrityEvent_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CelebrityEvent, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CelebrityEvent, event_display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CelebrityEvent, perferto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CelebrityEvent, city_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CelebrityEvent, next_fresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CelebrityEvent, daily_times_),
  };
  CelebrityEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CelebrityEvent_descriptor_,
      CelebrityEvent::default_instance_,
      CelebrityEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CelebrityEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CelebrityEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CelebrityEvent));
  GS2C_Celebrity_All_Info_descriptor_ = file->message_type(22);
  static const int GS2C_Celebrity_All_Info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Celebrity_All_Info, city_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Celebrity_All_Info, next_fresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Celebrity_All_Info, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Celebrity_All_Info, event_info_),
  };
  GS2C_Celebrity_All_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Celebrity_All_Info_descriptor_,
      GS2C_Celebrity_All_Info::default_instance_,
      GS2C_Celebrity_All_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Celebrity_All_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Celebrity_All_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Celebrity_All_Info));
  C2GS_UseCurrencyToTakeReward_descriptor_ = file->message_type(23);
  static const int C2GS_UseCurrencyToTakeReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_UseCurrencyToTakeReward, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_UseCurrencyToTakeReward, city_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_UseCurrencyToTakeReward, award_idx_),
  };
  C2GS_UseCurrencyToTakeReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_UseCurrencyToTakeReward_descriptor_,
      C2GS_UseCurrencyToTakeReward::default_instance_,
      C2GS_UseCurrencyToTakeReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_UseCurrencyToTakeReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_UseCurrencyToTakeReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_UseCurrencyToTakeReward));
  GS2C_UseCurrencyToTakeRewardRsp_descriptor_ = file->message_type(24);
  static const int GS2C_UseCurrencyToTakeRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_UseCurrencyToTakeRewardRsp, result_),
  };
  GS2C_UseCurrencyToTakeRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_UseCurrencyToTakeRewardRsp_descriptor_,
      GS2C_UseCurrencyToTakeRewardRsp::default_instance_,
      GS2C_UseCurrencyToTakeRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_UseCurrencyToTakeRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_UseCurrencyToTakeRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_UseCurrencyToTakeRewardRsp));
  C2GS_Celebrity_Take_Reward_descriptor_ = file->message_type(25);
  static const int C2GS_Celebrity_Take_Reward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Celebrity_Take_Reward, id_),
  };
  C2GS_Celebrity_Take_Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Celebrity_Take_Reward_descriptor_,
      C2GS_Celebrity_Take_Reward::default_instance_,
      C2GS_Celebrity_Take_Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Celebrity_Take_Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Celebrity_Take_Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Celebrity_Take_Reward));
  GS2C_Celebrity_Take_Reward_Rsp_descriptor_ = file->message_type(26);
  static const int GS2C_Celebrity_Take_Reward_Rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Celebrity_Take_Reward_Rsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Celebrity_Take_Reward_Rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Celebrity_Take_Reward_Rsp, reward_),
  };
  GS2C_Celebrity_Take_Reward_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Celebrity_Take_Reward_Rsp_descriptor_,
      GS2C_Celebrity_Take_Reward_Rsp::default_instance_,
      GS2C_Celebrity_Take_Reward_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Celebrity_Take_Reward_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Celebrity_Take_Reward_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Celebrity_Take_Reward_Rsp));
  C2GS_ActivityBuyItem_descriptor_ = file->message_type(27);
  static const int C2GS_ActivityBuyItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_ActivityBuyItem, id_),
  };
  C2GS_ActivityBuyItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_ActivityBuyItem_descriptor_,
      C2GS_ActivityBuyItem::default_instance_,
      C2GS_ActivityBuyItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_ActivityBuyItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_ActivityBuyItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_ActivityBuyItem));
  GS2C_ActivityBuyItemRsp_descriptor_ = file->message_type(28);
  static const int GS2C_ActivityBuyItemRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ActivityBuyItemRsp, result_),
  };
  GS2C_ActivityBuyItemRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_ActivityBuyItemRsp_descriptor_,
      GS2C_ActivityBuyItemRsp::default_instance_,
      GS2C_ActivityBuyItemRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ActivityBuyItemRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ActivityBuyItemRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_ActivityBuyItemRsp));
  LimitedTimeShopInfo_descriptor_ = file->message_type(29);
  static const int LimitedTimeShopInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitedTimeShopInfo, cost_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitedTimeShopInfo, cost_discount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitedTimeShopInfo, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitedTimeShopInfo, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitedTimeShopInfo, is_has_discount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitedTimeShopInfo, table_id_),
  };
  LimitedTimeShopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LimitedTimeShopInfo_descriptor_,
      LimitedTimeShopInfo::default_instance_,
      LimitedTimeShopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitedTimeShopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitedTimeShopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LimitedTimeShopInfo));
  GS2C_LimitedTimeShopInfo_descriptor_ = file->message_type(30);
  static const int GS2C_LimitedTimeShopInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LimitedTimeShopInfo, info_),
  };
  GS2C_LimitedTimeShopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_LimitedTimeShopInfo_descriptor_,
      GS2C_LimitedTimeShopInfo::default_instance_,
      GS2C_LimitedTimeShopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LimitedTimeShopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LimitedTimeShopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_LimitedTimeShopInfo));
  C2GS_Open_Hero_Reward_Box_descriptor_ = file->message_type(31);
  static const int C2GS_Open_Hero_Reward_Box_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Open_Hero_Reward_Box, cirital_),
  };
  C2GS_Open_Hero_Reward_Box_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Open_Hero_Reward_Box_descriptor_,
      C2GS_Open_Hero_Reward_Box::default_instance_,
      C2GS_Open_Hero_Reward_Box_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Open_Hero_Reward_Box, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Open_Hero_Reward_Box, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Open_Hero_Reward_Box));
  GS2C_Open_Hero_Reward_Box_Rsp_descriptor_ = file->message_type(32);
  static const int GS2C_Open_Hero_Reward_Box_Rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Open_Hero_Reward_Box_Rsp, rewrad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Open_Hero_Reward_Box_Rsp, ret_),
  };
  GS2C_Open_Hero_Reward_Box_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Open_Hero_Reward_Box_Rsp_descriptor_,
      GS2C_Open_Hero_Reward_Box_Rsp::default_instance_,
      GS2C_Open_Hero_Reward_Box_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Open_Hero_Reward_Box_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Open_Hero_Reward_Box_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Open_Hero_Reward_Box_Rsp));
  C2GS_Reward_Hero_descriptor_ = file->message_type(33);
  static const int C2GS_Reward_Hero_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Reward_Hero, troops_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Reward_Hero, char_id_),
  };
  C2GS_Reward_Hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Reward_Hero_descriptor_,
      C2GS_Reward_Hero::default_instance_,
      C2GS_Reward_Hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Reward_Hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Reward_Hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Reward_Hero));
  GS2C_Reward_Hero_Info_descriptor_ = file->message_type(34);
  static const int GS2C_Reward_Hero_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Reward_Hero_Info, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Reward_Hero_Info, is_first_reward_),
  };
  GS2C_Reward_Hero_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Reward_Hero_Info_descriptor_,
      GS2C_Reward_Hero_Info::default_instance_,
      GS2C_Reward_Hero_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Reward_Hero_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Reward_Hero_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Reward_Hero_Info));
  GS2C_Reward_Hero_Rsp_descriptor_ = file->message_type(35);
  static const int GS2C_Reward_Hero_Rsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Reward_Hero_Rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Reward_Hero_Rsp, critical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Reward_Hero_Rsp, char_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Reward_Hero_Rsp, char_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Reward_Hero_Rsp, char_cur_xp_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Reward_Hero_Rsp, next_char_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Reward_Hero_Rsp, char_id_),
  };
  GS2C_Reward_Hero_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Reward_Hero_Rsp_descriptor_,
      GS2C_Reward_Hero_Rsp::default_instance_,
      GS2C_Reward_Hero_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Reward_Hero_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Reward_Hero_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Reward_Hero_Rsp));
  GxDB_Hero_Reward_info_descriptor_ = file->message_type(36);
  static const int GxDB_Hero_Reward_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Hero_Reward_info, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Hero_Reward_info, has_first_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Hero_Reward_info, operate_type_),
  };
  GxDB_Hero_Reward_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_Hero_Reward_info_descriptor_,
      GxDB_Hero_Reward_info::default_instance_,
      GxDB_Hero_Reward_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Hero_Reward_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Hero_Reward_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_Hero_Reward_info));
  GxDB_Hero_Reward_descriptor_ = file->message_type(37);
  static const int GxDB_Hero_Reward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Hero_Reward, info_),
  };
  GxDB_Hero_Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_Hero_Reward_descriptor_,
      GxDB_Hero_Reward::default_instance_,
      GxDB_Hero_Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Hero_Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Hero_Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_Hero_Reward));
  GxDB_Hero_Reward_delete_descriptor_ = file->message_type(38);
  static const int GxDB_Hero_Reward_delete_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Hero_Reward_delete, operate_type_),
  };
  GxDB_Hero_Reward_delete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_Hero_Reward_delete_descriptor_,
      GxDB_Hero_Reward_delete::default_instance_,
      GxDB_Hero_Reward_delete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Hero_Reward_delete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Hero_Reward_delete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_Hero_Reward_delete));
  C2GS_Recharge_rebate_descriptor_ = file->message_type(39);
  static const int C2GS_Recharge_rebate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Recharge_rebate, id_),
  };
  C2GS_Recharge_rebate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Recharge_rebate_descriptor_,
      C2GS_Recharge_rebate::default_instance_,
      C2GS_Recharge_rebate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Recharge_rebate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Recharge_rebate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Recharge_rebate));
  GS2C_Recharge_rebate_Rsp_descriptor_ = file->message_type(40);
  static const int GS2C_Recharge_rebate_Rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Recharge_rebate_Rsp, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Recharge_rebate_Rsp, ret_),
  };
  GS2C_Recharge_rebate_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Recharge_rebate_Rsp_descriptor_,
      GS2C_Recharge_rebate_Rsp::default_instance_,
      GS2C_Recharge_rebate_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Recharge_rebate_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Recharge_rebate_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Recharge_rebate_Rsp));
  ACTIVITY_TYPE_descriptor_ = file->enum_type(0);
  ACTIIVTY_STAR_BOX_NPC_REWARD_descriptor_ = file->enum_type(1);
  ACTIVITY_STAR_BOX_LEVEL_UP_RESULT_descriptor_ = file->enum_type(2);
  ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT_descriptor_ = file->enum_type(3);
  XILIAN_REWARD_TYPE_descriptor_ = file->enum_type(4);
  XILIAN_RESULT_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Activity_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_ActivityStarBoxInfo_descriptor_, &GS2C_ActivityStarBoxInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Activity_Start_descriptor_, &GS2C_Activity_Start::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Activity_All_Active_Info_descriptor_, &GS2C_Activity_All_Active_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_ActivityStarBoxReward_descriptor_, &GS2C_ActivityStarBoxReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_ActivityStarNpcReward_descriptor_, &GS2C_ActivityStarNpcReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_ActivityStarBoxLevelUp_descriptor_, &GS2C_ActivityStarBoxLevelUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_ActivityStarBoxFinishCountDown_descriptor_, &GS2C_ActivityStarBoxFinishCountDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_ActivityStarBoxInfo_descriptor_, &GxDB_ActivityStarBoxInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_ActivityStarDelete_descriptor_, &GxDB_ActivityStarDelete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_ActivityStarBox_descriptor_, &GxDB_ActivityStarBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_XILIAN_TAKE_REWARD_descriptor_, &C2GS_XILIAN_TAKE_REWARD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_XILIAN_TAKE_REWARD_RSP_descriptor_, &GS2C_XILIAN_TAKE_REWARD_RSP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_XILIAN_TAKE_TEN_REWARD_descriptor_, &GS2C_XILIAN_TAKE_TEN_REWARD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Purify_Item_descriptor_, &C2GS_Purify_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Purify_Item_Rsp_descriptor_, &GS2C_Purify_Item_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZhengWuReward_descriptor_, &ZhengWuReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Show_Dialog_descriptor_, &GS2C_Show_Dialog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Take_Reward_descriptor_, &C2GS_Take_Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Take_Reward_Rsp_descriptor_, &GS2C_Take_Reward_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Take_MinZhong_Reward_Rsp_descriptor_, &GS2C_Take_MinZhong_Reward_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_GovAffairsInfo_descriptor_, &GxDB_GovAffairsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CelebrityEvent_descriptor_, &CelebrityEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Celebrity_All_Info_descriptor_, &GS2C_Celebrity_All_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_UseCurrencyToTakeReward_descriptor_, &C2GS_UseCurrencyToTakeReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_UseCurrencyToTakeRewardRsp_descriptor_, &GS2C_UseCurrencyToTakeRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Celebrity_Take_Reward_descriptor_, &C2GS_Celebrity_Take_Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Celebrity_Take_Reward_Rsp_descriptor_, &GS2C_Celebrity_Take_Reward_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_ActivityBuyItem_descriptor_, &C2GS_ActivityBuyItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_ActivityBuyItemRsp_descriptor_, &GS2C_ActivityBuyItemRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LimitedTimeShopInfo_descriptor_, &LimitedTimeShopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_LimitedTimeShopInfo_descriptor_, &GS2C_LimitedTimeShopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Open_Hero_Reward_Box_descriptor_, &C2GS_Open_Hero_Reward_Box::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Open_Hero_Reward_Box_Rsp_descriptor_, &GS2C_Open_Hero_Reward_Box_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Reward_Hero_descriptor_, &C2GS_Reward_Hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Reward_Hero_Info_descriptor_, &GS2C_Reward_Hero_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Reward_Hero_Rsp_descriptor_, &GS2C_Reward_Hero_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_Hero_Reward_info_descriptor_, &GxDB_Hero_Reward_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_Hero_Reward_descriptor_, &GxDB_Hero_Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_Hero_Reward_delete_descriptor_, &GxDB_Hero_Reward_delete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Recharge_rebate_descriptor_, &C2GS_Recharge_rebate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Recharge_rebate_Rsp_descriptor_, &GS2C_Recharge_rebate_Rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Activity_2eproto() {
  delete GS2C_ActivityStarBoxInfo::default_instance_;
  delete GS2C_ActivityStarBoxInfo_reflection_;
  delete GS2C_Activity_Start::default_instance_;
  delete GS2C_Activity_Start_reflection_;
  delete GS2C_Activity_All_Active_Info::default_instance_;
  delete GS2C_Activity_All_Active_Info_reflection_;
  delete GS2C_ActivityStarBoxReward::default_instance_;
  delete GS2C_ActivityStarBoxReward_reflection_;
  delete GS2C_ActivityStarNpcReward::default_instance_;
  delete GS2C_ActivityStarNpcReward_reflection_;
  delete GS2C_ActivityStarBoxLevelUp::default_instance_;
  delete GS2C_ActivityStarBoxLevelUp_reflection_;
  delete GS2C_ActivityStarBoxFinishCountDown::default_instance_;
  delete GS2C_ActivityStarBoxFinishCountDown_reflection_;
  delete GxDB_ActivityStarBoxInfo::default_instance_;
  delete GxDB_ActivityStarBoxInfo_reflection_;
  delete GxDB_ActivityStarDelete::default_instance_;
  delete GxDB_ActivityStarDelete_reflection_;
  delete GxDB_ActivityStarBox::default_instance_;
  delete GxDB_ActivityStarBox_reflection_;
  delete C2GS_XILIAN_TAKE_REWARD::default_instance_;
  delete C2GS_XILIAN_TAKE_REWARD_reflection_;
  delete GS2C_XILIAN_TAKE_REWARD_RSP::default_instance_;
  delete GS2C_XILIAN_TAKE_REWARD_RSP_reflection_;
  delete GS2C_XILIAN_TAKE_TEN_REWARD::default_instance_;
  delete GS2C_XILIAN_TAKE_TEN_REWARD_reflection_;
  delete C2GS_Purify_Item::default_instance_;
  delete C2GS_Purify_Item_reflection_;
  delete GS2C_Purify_Item_Rsp::default_instance_;
  delete GS2C_Purify_Item_Rsp_reflection_;
  delete ZhengWuReward::default_instance_;
  delete ZhengWuReward_reflection_;
  delete GS2C_Show_Dialog::default_instance_;
  delete GS2C_Show_Dialog_reflection_;
  delete C2GS_Take_Reward::default_instance_;
  delete C2GS_Take_Reward_reflection_;
  delete GS2C_Take_Reward_Rsp::default_instance_;
  delete GS2C_Take_Reward_Rsp_reflection_;
  delete GS2C_Take_MinZhong_Reward_Rsp::default_instance_;
  delete GS2C_Take_MinZhong_Reward_Rsp_reflection_;
  delete GxDB_GovAffairsInfo::default_instance_;
  delete GxDB_GovAffairsInfo_reflection_;
  delete CelebrityEvent::default_instance_;
  delete CelebrityEvent_reflection_;
  delete GS2C_Celebrity_All_Info::default_instance_;
  delete GS2C_Celebrity_All_Info_reflection_;
  delete C2GS_UseCurrencyToTakeReward::default_instance_;
  delete C2GS_UseCurrencyToTakeReward_reflection_;
  delete GS2C_UseCurrencyToTakeRewardRsp::default_instance_;
  delete GS2C_UseCurrencyToTakeRewardRsp_reflection_;
  delete C2GS_Celebrity_Take_Reward::default_instance_;
  delete C2GS_Celebrity_Take_Reward_reflection_;
  delete GS2C_Celebrity_Take_Reward_Rsp::default_instance_;
  delete GS2C_Celebrity_Take_Reward_Rsp_reflection_;
  delete C2GS_ActivityBuyItem::default_instance_;
  delete C2GS_ActivityBuyItem_reflection_;
  delete GS2C_ActivityBuyItemRsp::default_instance_;
  delete GS2C_ActivityBuyItemRsp_reflection_;
  delete LimitedTimeShopInfo::default_instance_;
  delete LimitedTimeShopInfo_reflection_;
  delete GS2C_LimitedTimeShopInfo::default_instance_;
  delete GS2C_LimitedTimeShopInfo_reflection_;
  delete C2GS_Open_Hero_Reward_Box::default_instance_;
  delete C2GS_Open_Hero_Reward_Box_reflection_;
  delete GS2C_Open_Hero_Reward_Box_Rsp::default_instance_;
  delete GS2C_Open_Hero_Reward_Box_Rsp_reflection_;
  delete C2GS_Reward_Hero::default_instance_;
  delete C2GS_Reward_Hero_reflection_;
  delete GS2C_Reward_Hero_Info::default_instance_;
  delete GS2C_Reward_Hero_Info_reflection_;
  delete GS2C_Reward_Hero_Rsp::default_instance_;
  delete GS2C_Reward_Hero_Rsp_reflection_;
  delete GxDB_Hero_Reward_info::default_instance_;
  delete GxDB_Hero_Reward_info_reflection_;
  delete GxDB_Hero_Reward::default_instance_;
  delete GxDB_Hero_Reward_reflection_;
  delete GxDB_Hero_Reward_delete::default_instance_;
  delete GxDB_Hero_Reward_delete_reflection_;
  delete C2GS_Recharge_rebate::default_instance_;
  delete C2GS_Recharge_rebate_reflection_;
  delete GS2C_Recharge_rebate_Rsp::default_instance_;
  delete GS2C_Recharge_rebate_Rsp_reflection_;
}

void protobuf_AddDesc_Activity_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_CommomDef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016Activity.proto\022\002pb\032\017CommomDef.proto\"\322\001"
    "\n\030GS2C_ActivityStarBoxInfo\022\020\n\010table_id\030\001"
    " \002(\r\022!\n\031next_level_need_wait_time\030\003 \001(\r\022"
    "\025\n\rnpc_is_opened\030\004 \001(\r\022\022\n\nleft_times\030\005 \001"
    "(\r\022\035\n\025last_take_reward_time\030\006 \001(\004\022\032\n\022is_"
    "all_take_reward\030\007 \001(\r\022\033\n\023activity_start_"
    "time\030\010 \001(\004\"\255\001\n\023GS2C_Activity_Start\022\025\n\rac"
    "tivity_type\030\001 \002(\r\022\020\n\010open_way\030\002 \002(\r\022\033\n\023a"
    "ctivity_start_time\030\003 \002(\004\022\032\n\022activity_las"
    "t_time\030\004 \002(\004\022\032\n\022activity_show_time\030\005 \002(\004"
    "\022\030\n\020server_open_time\030\006 \001(\004\"F\n\035GS2C_Activ"
    "ity_All_Active_Info\022%\n\004info\030\001 \003(\0132\027.pb.G"
    "S2C_Activity_Start\"j\n\032GS2C_ActivityStarB"
    "oxReward\022\034\n\006reward\030\001 \003(\0132\014.pb.StReward\022\r"
    "\n\005times\030\002 \001(\r\022\022\n\nstar_level\030\003 \001(\r\022\013\n\003ret"
    "\030\004 \001(\r\"u\n\032GS2C_ActivityStarNpcReward\022\034\n\006"
    "reward\030\001 \003(\0132\014.pb.StReward\022\022\n\nleft_times"
    "\030\002 \001(\r\022\030\n\020take_reward_time\030\003 \001(\004\022\013\n\003ret\030"
    "\004 \002(\r\"T\n\033GS2C_ActivityStarBoxLevelUp\0225\n\006"
    "result\030\001 \002(\0162%.pb.ACTIVITY_STAR_BOX_LEVE"
    "L_UP_RESULT\"e\n#GS2C_ActivityStarBoxFinis"
    "hCountDown\022>\n\006result\030\001 \002(\0162..pb.ACTIVITY"
    "_STAR_BOX_FINISH_COUNT_DOWN_RESULT\"\244\001\n\030G"
    "xDB_ActivityStarBoxInfo\022\026\n\016is_take_rewar"
    "d\030\001 \002(\r\022\020\n\010table_id\030\002 \002(\r\022\025\n\rnpc_is_open"
    "ed\030\003 \001(\r\022\022\n\nleft_times\030\004 \001(\r\022\035\n\025last_tak"
    "e_reward_time\030\005 \001(\004\022\024\n\014operate_type\030\006 \001("
    "\r\"/\n\027GxDB_ActivityStarDelete\022\024\n\014operate_"
    "type\030\001 \001(\r\"B\n\024GxDB_ActivityStarBox\022*\n\004in"
    "fo\030\001 \003(\0132\034.pb.GxDB_ActivityStarBoxInfo\"F"
    "\n\027C2GS_XILIAN_TAKE_REWARD\022+\n\013reward_type"
    "\030\001 \002(\0162\026.pb.XILIAN_REWARD_TYPE\"\210\001\n\033GS2C_"
    "XILIAN_TAKE_REWARD_RSP\022+\n\013reward_type\030\001 "
    "\001(\0162\026.pb.XILIAN_REWARD_TYPE\022\034\n\006reward\030\002 "
    "\003(\0132\014.pb.StReward\022\036\n\003ret\030\003 \002(\0162\021.pb.XILI"
    "AN_RESULT\",\n\033GS2C_XILIAN_TAKE_TEN_REWARD"
    "\022\r\n\005count\030\001 \002(\r\"B\n\020C2GS_Purify_Item\022\014\n\004t"
    "ype\030\001 \002(\r\022\017\n\007solt_id\030\002 \002(\r\022\017\n\007attr_id\030\003 "
    "\001(\r\"(\n\024GS2C_Purify_Item_Rsp\022\020\n\010err_code\030"
    "\001 \002(\r\"P\n\rZhengWuReward\022\023\n\013reward_type\030\001 "
    "\001(\r\022\024\n\014reward_count\030\002 \001(\r\022\024\n\014cost_diamon"
    "d\030\003 \001(\r\"\254\001\n\020GS2C_Show_Dialog\022\017\n\007left_id\030"
    "\001 \001(\r\022\020\n\010right_id\030\002 \001(\r\022\020\n\010title_id\030\003 \001("
    "\r\022&\n\013left_reward\030\004 \001(\0132\021.pb.ZhengWuRewar"
    "d\022\'\n\014right_reward\030\005 \001(\0132\021.pb.ZhengWuRewa"
    "rd\022\022\n\nimage_name\030\006 \001(\t\"5\n\020C2GS_Take_Rewa"
    "rd\022!\n\006reward\030\001 \001(\0132\021.pb.ZhengWuReward\"#\n"
    "\024GS2C_Take_Reward_Rsp\022\013\n\003ret\030\001 \001(\r\"=\n\035GS"
    "2C_Take_MinZhong_Reward_Rsp\022\034\n\006reward\030\001 "
    "\003(\0132\014.pb.StReward\"\340\001\n\023GxDB_GovAffairsInf"
    "o\022\017\n\007left_id\030\001 \001(\r\022\020\n\010right_id\030\002 \001(\r\022\020\n\010"
    "title_id\030\003 \001(\r\022\030\n\020left_reward_type\030\004 \001(\r"
    "\022\031\n\021left_reward_count\030\005 \001(\r\022\031\n\021right_rew"
    "ard_type\030\006 \001(\r\022\032\n\022right_reward_count\030\007 \001"
    "(\r\022\024\n\014cost_diamond\030\010 \001(\r\022\022\n\nimage_name\030\t"
    " \001(\t\"\230\001\n\016CelebrityEvent\022\020\n\010event_id\030\001 \001("
    "\r\022\025\n\revent_display\030\002 \001(\t\022\036\n\010perferTo\030\003 \001"
    "(\0132\014.pb.StReward\022\017\n\007city_id\030\004 \001(\r\022\027\n\017nex"
    "t_fresh_time\030\005 \001(\004\022\023\n\013daily_times\030\006 \001(\r\""
    "|\n\027GS2C_Celebrity_All_Info\022\017\n\007city_id\030\001 "
    "\001(\r\022\027\n\017next_fresh_time\030\002 \001(\004\022\017\n\007item_id\030"
    "\003 \001(\r\022&\n\nevent_info\030\004 \001(\0132\022.pb.Celebrity"
    "Event\"T\n\034C2GS_UseCurrencyToTakeReward\022\020\n"
    "\010event_id\030\001 \001(\r\022\017\n\007city_id\030\002 \001(\r\022\021\n\tawar"
    "d_idx\030\003 \001(\r\"1\n\037GS2C_UseCurrencyToTakeRew"
    "ardRsp\022\016\n\006result\030\001 \002(\r\"(\n\032C2GS_Celebrity"
    "_Take_Reward\022\n\n\002Id\030\001 \002(\r\"W\n\036GS2C_Celebri"
    "ty_Take_Reward_Rsp\022\n\n\002id\030\001 \002(\r\022\013\n\003ret\030\002 "
    "\002(\r\022\034\n\006reward\030\003 \003(\0132\014.pb.StReward\"\"\n\024C2G"
    "S_ActivityBuyItem\022\n\n\002id\030\001 \002(\004\")\n\027GS2C_Ac"
    "tivityBuyItemRsp\022\016\n\006result\030\001 \002(\r\"\234\001\n\023Lim"
    "itedTimeShopInfo\022\022\n\ncost_price\030\001 \001(\r\022\025\n\r"
    "cost_discount\030\002 \001(\r\022\021\n\tcondition\030\003 \001(\r\022\034"
    "\n\006reward\030\004 \001(\0132\014.pb.StReward\022\027\n\017is_has_d"
    "iscount\030\005 \001(\r\022\020\n\010table_id\030\006 \001(\004\"A\n\030GS2C_"
    "LimitedTimeShopInfo\022%\n\004info\030\001 \003(\0132\027.pb.L"
    "imitedTimeShopInfo\",\n\031C2GS_Open_Hero_Rew"
    "ard_Box\022\017\n\007cirital\030\001 \002(\r\"J\n\035GS2C_Open_He"
    "ro_Reward_Box_Rsp\022\034\n\006rewrad\030\001 \003(\0132\014.pb.S"
    "tReward\022\013\n\003ret\030\002 \001(\r\"6\n\020C2GS_Reward_Hero"
    "\022\021\n\ttroops_id\030\001 \002(\r\022\017\n\007char_id\030\002 \001(\r\"@\n\025"
    "GS2C_Reward_Hero_Info\022\016\n\006charId\030\001 \001(\r\022\027\n"
    "\017is_first_reward\030\002 \001(\010\"\270\001\n\024GS2C_Reward_H"
    "ero_Rsp\022\013\n\003ret\030\001 \002(\r\022\020\n\010critical\030\002 \001(\r\022\020"
    "\n\010char_exp\030\003 \001(\r\022\022\n\nchar_level\030\004 \001(\r\022\027\n\017"
    "char_cur_xp_max\030\005 \001(\r\0221\n\016next_char_info\030"
    "\006 \001(\0132\031.pb.GS2C_Reward_Hero_Info\022\017\n\007char"
    "_id\030\007 \001(\r\"W\n\025GxDB_Hero_Reward_info\022\016\n\006ch"
    "arId\030\001 \001(\r\022\030\n\020has_first_reward\030\002 \001(\010\022\024\n\014"
    "operate_type\030\003 \001(\r\";\n\020GxDB_Hero_Reward\022\'"
    "\n\004info\030\001 \003(\0132\031.pb.GxDB_Hero_Reward_info\""
    "/\n\027GxDB_Hero_Reward_delete\022\024\n\014operate_ty"
    "pe\030\001 \001(\r\"\"\n\024C2GS_Recharge_rebate\022\n\n\002id\030\001"
    " \002(\r\"E\n\030GS2C_Recharge_rebate_Rsp\022\034\n\006rewa"
    "rd\030\001 \001(\0132\014.pb.StReward\022\013\n\003ret\030\002 \002(\r*\257\002\n\r"
    "ACTIVITY_TYPE\022\025\n\021ACTIVITY_STAR_BOX\020\001\022\023\n\017"
    "ACTIVITY_XILIAN\020\002\022\031\n\025ACTIVITY_IRON_COLLE"
    "CT\020\003\022\031\n\025ACTIVITY_MAKE_FRIENDS\020\004\022\035\n\031ACTIV"
    "ITY_LIMTED_TIME_SHOP\020\005\022\030\n\024ACTIVITY_HERO_"
    "REWARD\020\006\022\032\n\026ACTIVITY_MONEY_TO_GOLD\020\007\022\035\n\031"
    "ACTIVITY_ADD_SOLIDER_RANK\020\010\022\034\n\030ACTIVITY_"
    "OCCUPATION_RANK\020\t\022\031\n\025ACTIVITY_COUNTRY_RA"
    "NK\020\n\022\017\n\013NR_ACTIVITY\020\013*a\n\034ACTIIVTY_STAR_B"
    "OX_NPC_REWARD\022\022\n\016REWRAD_SUCCESS\020\001\022\024\n\020REW"
    "ARD_CANT_TAKE\020\002\022\027\n\023REWARD_OTHER_REASON\020\003"
    "*\232\001\n!ACTIVITY_STAR_BOX_LEVEL_UP_RESULT\022\024"
    "\n\020LEVEL_UP_SUCCESS\020\001\022\034\n\030LEVEL_UP_NOT_ENO"
    "UGH_GOLD\020\002\022\020\n\014LEVEL_UP_MAX\020\003\022\026\n\022LEVEL_UP"
    "_CANT_PASS\020\004\022\027\n\023LEVEL_UP_SCORE_FULL\020\005*d\n"
    "*ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RES"
    "ULT\022\026\n\022COUNT_DOWN_SUCCESS\020\001\022\036\n\032COUNT_DOW"
    "N_NOT_ENOUGH_GOLD\020\002*G\n\022XILIAN_REWARD_TYP"
    "E\022\r\n\tUP_XILIAN\020\001\022\017\n\013MIJI_XILIAN\020\002\022\021\n\rSHE"
    "NJI_XILIAN\020\003*T\n\rXILIAN_RESULT\022\022\n\016XILIAN_"
    "SUCCESS\020\001\022\023\n\017XILIAN_HAS_TAKE\020\002\022\032\n\026XILIAN"
    "_NOT_ENOUGH_TIME\020\003", 4618);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Activity.proto", &protobuf_RegisterTypes);
  GS2C_ActivityStarBoxInfo::default_instance_ = new GS2C_ActivityStarBoxInfo();
  GS2C_Activity_Start::default_instance_ = new GS2C_Activity_Start();
  GS2C_Activity_All_Active_Info::default_instance_ = new GS2C_Activity_All_Active_Info();
  GS2C_ActivityStarBoxReward::default_instance_ = new GS2C_ActivityStarBoxReward();
  GS2C_ActivityStarNpcReward::default_instance_ = new GS2C_ActivityStarNpcReward();
  GS2C_ActivityStarBoxLevelUp::default_instance_ = new GS2C_ActivityStarBoxLevelUp();
  GS2C_ActivityStarBoxFinishCountDown::default_instance_ = new GS2C_ActivityStarBoxFinishCountDown();
  GxDB_ActivityStarBoxInfo::default_instance_ = new GxDB_ActivityStarBoxInfo();
  GxDB_ActivityStarDelete::default_instance_ = new GxDB_ActivityStarDelete();
  GxDB_ActivityStarBox::default_instance_ = new GxDB_ActivityStarBox();
  C2GS_XILIAN_TAKE_REWARD::default_instance_ = new C2GS_XILIAN_TAKE_REWARD();
  GS2C_XILIAN_TAKE_REWARD_RSP::default_instance_ = new GS2C_XILIAN_TAKE_REWARD_RSP();
  GS2C_XILIAN_TAKE_TEN_REWARD::default_instance_ = new GS2C_XILIAN_TAKE_TEN_REWARD();
  C2GS_Purify_Item::default_instance_ = new C2GS_Purify_Item();
  GS2C_Purify_Item_Rsp::default_instance_ = new GS2C_Purify_Item_Rsp();
  ZhengWuReward::default_instance_ = new ZhengWuReward();
  GS2C_Show_Dialog::default_instance_ = new GS2C_Show_Dialog();
  C2GS_Take_Reward::default_instance_ = new C2GS_Take_Reward();
  GS2C_Take_Reward_Rsp::default_instance_ = new GS2C_Take_Reward_Rsp();
  GS2C_Take_MinZhong_Reward_Rsp::default_instance_ = new GS2C_Take_MinZhong_Reward_Rsp();
  GxDB_GovAffairsInfo::default_instance_ = new GxDB_GovAffairsInfo();
  CelebrityEvent::default_instance_ = new CelebrityEvent();
  GS2C_Celebrity_All_Info::default_instance_ = new GS2C_Celebrity_All_Info();
  C2GS_UseCurrencyToTakeReward::default_instance_ = new C2GS_UseCurrencyToTakeReward();
  GS2C_UseCurrencyToTakeRewardRsp::default_instance_ = new GS2C_UseCurrencyToTakeRewardRsp();
  C2GS_Celebrity_Take_Reward::default_instance_ = new C2GS_Celebrity_Take_Reward();
  GS2C_Celebrity_Take_Reward_Rsp::default_instance_ = new GS2C_Celebrity_Take_Reward_Rsp();
  C2GS_ActivityBuyItem::default_instance_ = new C2GS_ActivityBuyItem();
  GS2C_ActivityBuyItemRsp::default_instance_ = new GS2C_ActivityBuyItemRsp();
  LimitedTimeShopInfo::default_instance_ = new LimitedTimeShopInfo();
  GS2C_LimitedTimeShopInfo::default_instance_ = new GS2C_LimitedTimeShopInfo();
  C2GS_Open_Hero_Reward_Box::default_instance_ = new C2GS_Open_Hero_Reward_Box();
  GS2C_Open_Hero_Reward_Box_Rsp::default_instance_ = new GS2C_Open_Hero_Reward_Box_Rsp();
  C2GS_Reward_Hero::default_instance_ = new C2GS_Reward_Hero();
  GS2C_Reward_Hero_Info::default_instance_ = new GS2C_Reward_Hero_Info();
  GS2C_Reward_Hero_Rsp::default_instance_ = new GS2C_Reward_Hero_Rsp();
  GxDB_Hero_Reward_info::default_instance_ = new GxDB_Hero_Reward_info();
  GxDB_Hero_Reward::default_instance_ = new GxDB_Hero_Reward();
  GxDB_Hero_Reward_delete::default_instance_ = new GxDB_Hero_Reward_delete();
  C2GS_Recharge_rebate::default_instance_ = new C2GS_Recharge_rebate();
  GS2C_Recharge_rebate_Rsp::default_instance_ = new GS2C_Recharge_rebate_Rsp();
  GS2C_ActivityStarBoxInfo::default_instance_->InitAsDefaultInstance();
  GS2C_Activity_Start::default_instance_->InitAsDefaultInstance();
  GS2C_Activity_All_Active_Info::default_instance_->InitAsDefaultInstance();
  GS2C_ActivityStarBoxReward::default_instance_->InitAsDefaultInstance();
  GS2C_ActivityStarNpcReward::default_instance_->InitAsDefaultInstance();
  GS2C_ActivityStarBoxLevelUp::default_instance_->InitAsDefaultInstance();
  GS2C_ActivityStarBoxFinishCountDown::default_instance_->InitAsDefaultInstance();
  GxDB_ActivityStarBoxInfo::default_instance_->InitAsDefaultInstance();
  GxDB_ActivityStarDelete::default_instance_->InitAsDefaultInstance();
  GxDB_ActivityStarBox::default_instance_->InitAsDefaultInstance();
  C2GS_XILIAN_TAKE_REWARD::default_instance_->InitAsDefaultInstance();
  GS2C_XILIAN_TAKE_REWARD_RSP::default_instance_->InitAsDefaultInstance();
  GS2C_XILIAN_TAKE_TEN_REWARD::default_instance_->InitAsDefaultInstance();
  C2GS_Purify_Item::default_instance_->InitAsDefaultInstance();
  GS2C_Purify_Item_Rsp::default_instance_->InitAsDefaultInstance();
  ZhengWuReward::default_instance_->InitAsDefaultInstance();
  GS2C_Show_Dialog::default_instance_->InitAsDefaultInstance();
  C2GS_Take_Reward::default_instance_->InitAsDefaultInstance();
  GS2C_Take_Reward_Rsp::default_instance_->InitAsDefaultInstance();
  GS2C_Take_MinZhong_Reward_Rsp::default_instance_->InitAsDefaultInstance();
  GxDB_GovAffairsInfo::default_instance_->InitAsDefaultInstance();
  CelebrityEvent::default_instance_->InitAsDefaultInstance();
  GS2C_Celebrity_All_Info::default_instance_->InitAsDefaultInstance();
  C2GS_UseCurrencyToTakeReward::default_instance_->InitAsDefaultInstance();
  GS2C_UseCurrencyToTakeRewardRsp::default_instance_->InitAsDefaultInstance();
  C2GS_Celebrity_Take_Reward::default_instance_->InitAsDefaultInstance();
  GS2C_Celebrity_Take_Reward_Rsp::default_instance_->InitAsDefaultInstance();
  C2GS_ActivityBuyItem::default_instance_->InitAsDefaultInstance();
  GS2C_ActivityBuyItemRsp::default_instance_->InitAsDefaultInstance();
  LimitedTimeShopInfo::default_instance_->InitAsDefaultInstance();
  GS2C_LimitedTimeShopInfo::default_instance_->InitAsDefaultInstance();
  C2GS_Open_Hero_Reward_Box::default_instance_->InitAsDefaultInstance();
  GS2C_Open_Hero_Reward_Box_Rsp::default_instance_->InitAsDefaultInstance();
  C2GS_Reward_Hero::default_instance_->InitAsDefaultInstance();
  GS2C_Reward_Hero_Info::default_instance_->InitAsDefaultInstance();
  GS2C_Reward_Hero_Rsp::default_instance_->InitAsDefaultInstance();
  GxDB_Hero_Reward_info::default_instance_->InitAsDefaultInstance();
  GxDB_Hero_Reward::default_instance_->InitAsDefaultInstance();
  GxDB_Hero_Reward_delete::default_instance_->InitAsDefaultInstance();
  C2GS_Recharge_rebate::default_instance_->InitAsDefaultInstance();
  GS2C_Recharge_rebate_Rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Activity_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Activity_2eproto {
  StaticDescriptorInitializer_Activity_2eproto() {
    protobuf_AddDesc_Activity_2eproto();
  }
} static_descriptor_initializer_Activity_2eproto_;
const ::google::protobuf::EnumDescriptor* ACTIVITY_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACTIVITY_TYPE_descriptor_;
}
bool ACTIVITY_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ACTIIVTY_STAR_BOX_NPC_REWARD_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACTIIVTY_STAR_BOX_NPC_REWARD_descriptor_;
}
bool ACTIIVTY_STAR_BOX_NPC_REWARD_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ACTIVITY_STAR_BOX_LEVEL_UP_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACTIVITY_STAR_BOX_LEVEL_UP_RESULT_descriptor_;
}
bool ACTIVITY_STAR_BOX_LEVEL_UP_RESULT_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT_descriptor_;
}
bool ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* XILIAN_REWARD_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XILIAN_REWARD_TYPE_descriptor_;
}
bool XILIAN_REWARD_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* XILIAN_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XILIAN_RESULT_descriptor_;
}
bool XILIAN_RESULT_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_ActivityStarBoxInfo::kTableIdFieldNumber;
const int GS2C_ActivityStarBoxInfo::kNextLevelNeedWaitTimeFieldNumber;
const int GS2C_ActivityStarBoxInfo::kNpcIsOpenedFieldNumber;
const int GS2C_ActivityStarBoxInfo::kLeftTimesFieldNumber;
const int GS2C_ActivityStarBoxInfo::kLastTakeRewardTimeFieldNumber;
const int GS2C_ActivityStarBoxInfo::kIsAllTakeRewardFieldNumber;
const int GS2C_ActivityStarBoxInfo::kActivityStartTimeFieldNumber;
#endif  // !_MSC_VER

GS2C_ActivityStarBoxInfo::GS2C_ActivityStarBoxInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_ActivityStarBoxInfo::InitAsDefaultInstance() {
}

GS2C_ActivityStarBoxInfo::GS2C_ActivityStarBoxInfo(const GS2C_ActivityStarBoxInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_ActivityStarBoxInfo::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = 0u;
  next_level_need_wait_time_ = 0u;
  npc_is_opened_ = 0u;
  left_times_ = 0u;
  last_take_reward_time_ = GOOGLE_ULONGLONG(0);
  is_all_take_reward_ = 0u;
  activity_start_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_ActivityStarBoxInfo::~GS2C_ActivityStarBoxInfo() {
  SharedDtor();
}

void GS2C_ActivityStarBoxInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_ActivityStarBoxInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_ActivityStarBoxInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_ActivityStarBoxInfo_descriptor_;
}

const GS2C_ActivityStarBoxInfo& GS2C_ActivityStarBoxInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

GS2C_ActivityStarBoxInfo* GS2C_ActivityStarBoxInfo::default_instance_ = NULL;

GS2C_ActivityStarBoxInfo* GS2C_ActivityStarBoxInfo::New() const {
  return new GS2C_ActivityStarBoxInfo;
}

void GS2C_ActivityStarBoxInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_id_ = 0u;
    next_level_need_wait_time_ = 0u;
    npc_is_opened_ = 0u;
    left_times_ = 0u;
    last_take_reward_time_ = GOOGLE_ULONGLONG(0);
    is_all_take_reward_ = 0u;
    activity_start_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_ActivityStarBoxInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_next_level_need_wait_time;
        break;
      }

      // optional uint32 next_level_need_wait_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_level_need_wait_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_level_need_wait_time_)));
          set_has_next_level_need_wait_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_npc_is_opened;
        break;
      }

      // optional uint32 npc_is_opened = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_is_opened:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npc_is_opened_)));
          set_has_npc_is_opened();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_left_times;
        break;
      }

      // optional uint32 left_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_times_)));
          set_has_left_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_last_take_reward_time;
        break;
      }

      // optional uint64 last_take_reward_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_take_reward_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_take_reward_time_)));
          set_has_last_take_reward_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_all_take_reward;
        break;
      }

      // optional uint32 is_all_take_reward = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_all_take_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_all_take_reward_)));
          set_has_is_all_take_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_activity_start_time;
        break;
      }

      // optional uint64 activity_start_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activity_start_time_)));
          set_has_activity_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_ActivityStarBoxInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->table_id(), output);
  }

  // optional uint32 next_level_need_wait_time = 3;
  if (has_next_level_need_wait_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->next_level_need_wait_time(), output);
  }

  // optional uint32 npc_is_opened = 4;
  if (has_npc_is_opened()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->npc_is_opened(), output);
  }

  // optional uint32 left_times = 5;
  if (has_left_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->left_times(), output);
  }

  // optional uint64 last_take_reward_time = 6;
  if (has_last_take_reward_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->last_take_reward_time(), output);
  }

  // optional uint32 is_all_take_reward = 7;
  if (has_is_all_take_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->is_all_take_reward(), output);
  }

  // optional uint64 activity_start_time = 8;
  if (has_activity_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->activity_start_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_ActivityStarBoxInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->table_id(), target);
  }

  // optional uint32 next_level_need_wait_time = 3;
  if (has_next_level_need_wait_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->next_level_need_wait_time(), target);
  }

  // optional uint32 npc_is_opened = 4;
  if (has_npc_is_opened()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->npc_is_opened(), target);
  }

  // optional uint32 left_times = 5;
  if (has_left_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->left_times(), target);
  }

  // optional uint64 last_take_reward_time = 6;
  if (has_last_take_reward_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->last_take_reward_time(), target);
  }

  // optional uint32 is_all_take_reward = 7;
  if (has_is_all_take_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->is_all_take_reward(), target);
  }

  // optional uint64 activity_start_time = 8;
  if (has_activity_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->activity_start_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_ActivityStarBoxInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_id());
    }

    // optional uint32 next_level_need_wait_time = 3;
    if (has_next_level_need_wait_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_level_need_wait_time());
    }

    // optional uint32 npc_is_opened = 4;
    if (has_npc_is_opened()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npc_is_opened());
    }

    // optional uint32 left_times = 5;
    if (has_left_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_times());
    }

    // optional uint64 last_take_reward_time = 6;
    if (has_last_take_reward_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_take_reward_time());
    }

    // optional uint32 is_all_take_reward = 7;
    if (has_is_all_take_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_all_take_reward());
    }

    // optional uint64 activity_start_time = 8;
    if (has_activity_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activity_start_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_ActivityStarBoxInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_ActivityStarBoxInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_ActivityStarBoxInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_ActivityStarBoxInfo::MergeFrom(const GS2C_ActivityStarBoxInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_next_level_need_wait_time()) {
      set_next_level_need_wait_time(from.next_level_need_wait_time());
    }
    if (from.has_npc_is_opened()) {
      set_npc_is_opened(from.npc_is_opened());
    }
    if (from.has_left_times()) {
      set_left_times(from.left_times());
    }
    if (from.has_last_take_reward_time()) {
      set_last_take_reward_time(from.last_take_reward_time());
    }
    if (from.has_is_all_take_reward()) {
      set_is_all_take_reward(from.is_all_take_reward());
    }
    if (from.has_activity_start_time()) {
      set_activity_start_time(from.activity_start_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_ActivityStarBoxInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_ActivityStarBoxInfo::CopyFrom(const GS2C_ActivityStarBoxInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_ActivityStarBoxInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_ActivityStarBoxInfo::Swap(GS2C_ActivityStarBoxInfo* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(next_level_need_wait_time_, other->next_level_need_wait_time_);
    std::swap(npc_is_opened_, other->npc_is_opened_);
    std::swap(left_times_, other->left_times_);
    std::swap(last_take_reward_time_, other->last_take_reward_time_);
    std::swap(is_all_take_reward_, other->is_all_take_reward_);
    std::swap(activity_start_time_, other->activity_start_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_ActivityStarBoxInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_ActivityStarBoxInfo_descriptor_;
  metadata.reflection = GS2C_ActivityStarBoxInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Activity_Start::kActivityTypeFieldNumber;
const int GS2C_Activity_Start::kOpenWayFieldNumber;
const int GS2C_Activity_Start::kActivityStartTimeFieldNumber;
const int GS2C_Activity_Start::kActivityLastTimeFieldNumber;
const int GS2C_Activity_Start::kActivityShowTimeFieldNumber;
const int GS2C_Activity_Start::kServerOpenTimeFieldNumber;
#endif  // !_MSC_VER

GS2C_Activity_Start::GS2C_Activity_Start()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Activity_Start::InitAsDefaultInstance() {
}

GS2C_Activity_Start::GS2C_Activity_Start(const GS2C_Activity_Start& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Activity_Start::SharedCtor() {
  _cached_size_ = 0;
  activity_type_ = 0u;
  open_way_ = 0u;
  activity_start_time_ = GOOGLE_ULONGLONG(0);
  activity_last_time_ = GOOGLE_ULONGLONG(0);
  activity_show_time_ = GOOGLE_ULONGLONG(0);
  server_open_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Activity_Start::~GS2C_Activity_Start() {
  SharedDtor();
}

void GS2C_Activity_Start::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Activity_Start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Activity_Start::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Activity_Start_descriptor_;
}

const GS2C_Activity_Start& GS2C_Activity_Start::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

GS2C_Activity_Start* GS2C_Activity_Start::default_instance_ = NULL;

GS2C_Activity_Start* GS2C_Activity_Start::New() const {
  return new GS2C_Activity_Start;
}

void GS2C_Activity_Start::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_type_ = 0u;
    open_way_ = 0u;
    activity_start_time_ = GOOGLE_ULONGLONG(0);
    activity_last_time_ = GOOGLE_ULONGLONG(0);
    activity_show_time_ = GOOGLE_ULONGLONG(0);
    server_open_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Activity_Start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 activity_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_type_)));
          set_has_activity_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_open_way;
        break;
      }

      // required uint32 open_way = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_way:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_way_)));
          set_has_open_way();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_activity_start_time;
        break;
      }

      // required uint64 activity_start_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activity_start_time_)));
          set_has_activity_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_activity_last_time;
        break;
      }

      // required uint64 activity_last_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activity_last_time_)));
          set_has_activity_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_activity_show_time;
        break;
      }

      // required uint64 activity_show_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_show_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activity_show_time_)));
          set_has_activity_show_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_server_open_time;
        break;
      }

      // optional uint64 server_open_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_open_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_open_time_)));
          set_has_server_open_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Activity_Start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 activity_type = 1;
  if (has_activity_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activity_type(), output);
  }

  // required uint32 open_way = 2;
  if (has_open_way()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->open_way(), output);
  }

  // required uint64 activity_start_time = 3;
  if (has_activity_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->activity_start_time(), output);
  }

  // required uint64 activity_last_time = 4;
  if (has_activity_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->activity_last_time(), output);
  }

  // required uint64 activity_show_time = 5;
  if (has_activity_show_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->activity_show_time(), output);
  }

  // optional uint64 server_open_time = 6;
  if (has_server_open_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->server_open_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Activity_Start::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 activity_type = 1;
  if (has_activity_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activity_type(), target);
  }

  // required uint32 open_way = 2;
  if (has_open_way()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->open_way(), target);
  }

  // required uint64 activity_start_time = 3;
  if (has_activity_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->activity_start_time(), target);
  }

  // required uint64 activity_last_time = 4;
  if (has_activity_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->activity_last_time(), target);
  }

  // required uint64 activity_show_time = 5;
  if (has_activity_show_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->activity_show_time(), target);
  }

  // optional uint64 server_open_time = 6;
  if (has_server_open_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->server_open_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Activity_Start::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 activity_type = 1;
    if (has_activity_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_type());
    }

    // required uint32 open_way = 2;
    if (has_open_way()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open_way());
    }

    // required uint64 activity_start_time = 3;
    if (has_activity_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activity_start_time());
    }

    // required uint64 activity_last_time = 4;
    if (has_activity_last_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activity_last_time());
    }

    // required uint64 activity_show_time = 5;
    if (has_activity_show_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activity_show_time());
    }

    // optional uint64 server_open_time = 6;
    if (has_server_open_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_open_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Activity_Start::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Activity_Start* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Activity_Start*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Activity_Start::MergeFrom(const GS2C_Activity_Start& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_type()) {
      set_activity_type(from.activity_type());
    }
    if (from.has_open_way()) {
      set_open_way(from.open_way());
    }
    if (from.has_activity_start_time()) {
      set_activity_start_time(from.activity_start_time());
    }
    if (from.has_activity_last_time()) {
      set_activity_last_time(from.activity_last_time());
    }
    if (from.has_activity_show_time()) {
      set_activity_show_time(from.activity_show_time());
    }
    if (from.has_server_open_time()) {
      set_server_open_time(from.server_open_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Activity_Start::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Activity_Start::CopyFrom(const GS2C_Activity_Start& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Activity_Start::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GS2C_Activity_Start::Swap(GS2C_Activity_Start* other) {
  if (other != this) {
    std::swap(activity_type_, other->activity_type_);
    std::swap(open_way_, other->open_way_);
    std::swap(activity_start_time_, other->activity_start_time_);
    std::swap(activity_last_time_, other->activity_last_time_);
    std::swap(activity_show_time_, other->activity_show_time_);
    std::swap(server_open_time_, other->server_open_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Activity_Start::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Activity_Start_descriptor_;
  metadata.reflection = GS2C_Activity_Start_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Activity_All_Active_Info::kInfoFieldNumber;
#endif  // !_MSC_VER

GS2C_Activity_All_Active_Info::GS2C_Activity_All_Active_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Activity_All_Active_Info::InitAsDefaultInstance() {
}

GS2C_Activity_All_Active_Info::GS2C_Activity_All_Active_Info(const GS2C_Activity_All_Active_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Activity_All_Active_Info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Activity_All_Active_Info::~GS2C_Activity_All_Active_Info() {
  SharedDtor();
}

void GS2C_Activity_All_Active_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Activity_All_Active_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Activity_All_Active_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Activity_All_Active_Info_descriptor_;
}

const GS2C_Activity_All_Active_Info& GS2C_Activity_All_Active_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

GS2C_Activity_All_Active_Info* GS2C_Activity_All_Active_Info::default_instance_ = NULL;

GS2C_Activity_All_Active_Info* GS2C_Activity_All_Active_Info::New() const {
  return new GS2C_Activity_All_Active_Info;
}

void GS2C_Activity_All_Active_Info::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Activity_All_Active_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GS2C_Activity_Start info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Activity_All_Active_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GS2C_Activity_Start info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Activity_All_Active_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GS2C_Activity_Start info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Activity_All_Active_Info::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GS2C_Activity_Start info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Activity_All_Active_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Activity_All_Active_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Activity_All_Active_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Activity_All_Active_Info::MergeFrom(const GS2C_Activity_All_Active_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Activity_All_Active_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Activity_All_Active_Info::CopyFrom(const GS2C_Activity_All_Active_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Activity_All_Active_Info::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Activity_All_Active_Info::Swap(GS2C_Activity_All_Active_Info* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Activity_All_Active_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Activity_All_Active_Info_descriptor_;
  metadata.reflection = GS2C_Activity_All_Active_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_ActivityStarBoxReward::kRewardFieldNumber;
const int GS2C_ActivityStarBoxReward::kTimesFieldNumber;
const int GS2C_ActivityStarBoxReward::kStarLevelFieldNumber;
const int GS2C_ActivityStarBoxReward::kRetFieldNumber;
#endif  // !_MSC_VER

GS2C_ActivityStarBoxReward::GS2C_ActivityStarBoxReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_ActivityStarBoxReward::InitAsDefaultInstance() {
}

GS2C_ActivityStarBoxReward::GS2C_ActivityStarBoxReward(const GS2C_ActivityStarBoxReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_ActivityStarBoxReward::SharedCtor() {
  _cached_size_ = 0;
  times_ = 0u;
  star_level_ = 0u;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_ActivityStarBoxReward::~GS2C_ActivityStarBoxReward() {
  SharedDtor();
}

void GS2C_ActivityStarBoxReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_ActivityStarBoxReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_ActivityStarBoxReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_ActivityStarBoxReward_descriptor_;
}

const GS2C_ActivityStarBoxReward& GS2C_ActivityStarBoxReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

GS2C_ActivityStarBoxReward* GS2C_ActivityStarBoxReward::default_instance_ = NULL;

GS2C_ActivityStarBoxReward* GS2C_ActivityStarBoxReward::New() const {
  return new GS2C_ActivityStarBoxReward;
}

void GS2C_ActivityStarBoxReward::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    times_ = 0u;
    star_level_ = 0u;
    ret_ = 0u;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_ActivityStarBoxReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.StReward reward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_reward;
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // optional uint32 times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star_level;
        break;
      }

      // optional uint32 star_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_level_)));
          set_has_star_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_ActivityStarBoxReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.StReward reward = 1;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward(i), output);
  }

  // optional uint32 times = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->times(), output);
  }

  // optional uint32 star_level = 3;
  if (has_star_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->star_level(), output);
  }

  // optional uint32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_ActivityStarBoxReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.StReward reward = 1;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward(i), target);
  }

  // optional uint32 times = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->times(), target);
  }

  // optional uint32 star_level = 3;
  if (has_star_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->star_level(), target);
  }

  // optional uint32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_ActivityStarBoxReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

    // optional uint32 star_level = 3;
    if (has_star_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_level());
    }

    // optional uint32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated .pb.StReward reward = 1;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_ActivityStarBoxReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_ActivityStarBoxReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_ActivityStarBoxReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_ActivityStarBoxReward::MergeFrom(const GS2C_ActivityStarBoxReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_star_level()) {
      set_star_level(from.star_level());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_ActivityStarBoxReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_ActivityStarBoxReward::CopyFrom(const GS2C_ActivityStarBoxReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_ActivityStarBoxReward::IsInitialized() const {

  for (int i = 0; i < reward_size(); i++) {
    if (!this->reward(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_ActivityStarBoxReward::Swap(GS2C_ActivityStarBoxReward* other) {
  if (other != this) {
    reward_.Swap(&other->reward_);
    std::swap(times_, other->times_);
    std::swap(star_level_, other->star_level_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_ActivityStarBoxReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_ActivityStarBoxReward_descriptor_;
  metadata.reflection = GS2C_ActivityStarBoxReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_ActivityStarNpcReward::kRewardFieldNumber;
const int GS2C_ActivityStarNpcReward::kLeftTimesFieldNumber;
const int GS2C_ActivityStarNpcReward::kTakeRewardTimeFieldNumber;
const int GS2C_ActivityStarNpcReward::kRetFieldNumber;
#endif  // !_MSC_VER

GS2C_ActivityStarNpcReward::GS2C_ActivityStarNpcReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_ActivityStarNpcReward::InitAsDefaultInstance() {
}

GS2C_ActivityStarNpcReward::GS2C_ActivityStarNpcReward(const GS2C_ActivityStarNpcReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_ActivityStarNpcReward::SharedCtor() {
  _cached_size_ = 0;
  left_times_ = 0u;
  take_reward_time_ = GOOGLE_ULONGLONG(0);
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_ActivityStarNpcReward::~GS2C_ActivityStarNpcReward() {
  SharedDtor();
}

void GS2C_ActivityStarNpcReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_ActivityStarNpcReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_ActivityStarNpcReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_ActivityStarNpcReward_descriptor_;
}

const GS2C_ActivityStarNpcReward& GS2C_ActivityStarNpcReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

GS2C_ActivityStarNpcReward* GS2C_ActivityStarNpcReward::default_instance_ = NULL;

GS2C_ActivityStarNpcReward* GS2C_ActivityStarNpcReward::New() const {
  return new GS2C_ActivityStarNpcReward;
}

void GS2C_ActivityStarNpcReward::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    left_times_ = 0u;
    take_reward_time_ = GOOGLE_ULONGLONG(0);
    ret_ = 0u;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_ActivityStarNpcReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.StReward reward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_reward;
        if (input->ExpectTag(16)) goto parse_left_times;
        break;
      }

      // optional uint32 left_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_times_)));
          set_has_left_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_take_reward_time;
        break;
      }

      // optional uint64 take_reward_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_take_reward_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &take_reward_time_)));
          set_has_take_reward_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // required uint32 ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_ActivityStarNpcReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.StReward reward = 1;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward(i), output);
  }

  // optional uint32 left_times = 2;
  if (has_left_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->left_times(), output);
  }

  // optional uint64 take_reward_time = 3;
  if (has_take_reward_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->take_reward_time(), output);
  }

  // required uint32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_ActivityStarNpcReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.StReward reward = 1;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward(i), target);
  }

  // optional uint32 left_times = 2;
  if (has_left_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->left_times(), target);
  }

  // optional uint64 take_reward_time = 3;
  if (has_take_reward_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->take_reward_time(), target);
  }

  // required uint32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_ActivityStarNpcReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 left_times = 2;
    if (has_left_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_times());
    }

    // optional uint64 take_reward_time = 3;
    if (has_take_reward_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->take_reward_time());
    }

    // required uint32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated .pb.StReward reward = 1;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_ActivityStarNpcReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_ActivityStarNpcReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_ActivityStarNpcReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_ActivityStarNpcReward::MergeFrom(const GS2C_ActivityStarNpcReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_left_times()) {
      set_left_times(from.left_times());
    }
    if (from.has_take_reward_time()) {
      set_take_reward_time(from.take_reward_time());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_ActivityStarNpcReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_ActivityStarNpcReward::CopyFrom(const GS2C_ActivityStarNpcReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_ActivityStarNpcReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  for (int i = 0; i < reward_size(); i++) {
    if (!this->reward(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_ActivityStarNpcReward::Swap(GS2C_ActivityStarNpcReward* other) {
  if (other != this) {
    reward_.Swap(&other->reward_);
    std::swap(left_times_, other->left_times_);
    std::swap(take_reward_time_, other->take_reward_time_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_ActivityStarNpcReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_ActivityStarNpcReward_descriptor_;
  metadata.reflection = GS2C_ActivityStarNpcReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_ActivityStarBoxLevelUp::kResultFieldNumber;
#endif  // !_MSC_VER

GS2C_ActivityStarBoxLevelUp::GS2C_ActivityStarBoxLevelUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_ActivityStarBoxLevelUp::InitAsDefaultInstance() {
}

GS2C_ActivityStarBoxLevelUp::GS2C_ActivityStarBoxLevelUp(const GS2C_ActivityStarBoxLevelUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_ActivityStarBoxLevelUp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_ActivityStarBoxLevelUp::~GS2C_ActivityStarBoxLevelUp() {
  SharedDtor();
}

void GS2C_ActivityStarBoxLevelUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_ActivityStarBoxLevelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_ActivityStarBoxLevelUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_ActivityStarBoxLevelUp_descriptor_;
}

const GS2C_ActivityStarBoxLevelUp& GS2C_ActivityStarBoxLevelUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

GS2C_ActivityStarBoxLevelUp* GS2C_ActivityStarBoxLevelUp::default_instance_ = NULL;

GS2C_ActivityStarBoxLevelUp* GS2C_ActivityStarBoxLevelUp::New() const {
  return new GS2C_ActivityStarBoxLevelUp;
}

void GS2C_ActivityStarBoxLevelUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_ActivityStarBoxLevelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.ACTIVITY_STAR_BOX_LEVEL_UP_RESULT result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ACTIVITY_STAR_BOX_LEVEL_UP_RESULT_IsValid(value)) {
            set_result(static_cast< ::pb::ACTIVITY_STAR_BOX_LEVEL_UP_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_ActivityStarBoxLevelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.ACTIVITY_STAR_BOX_LEVEL_UP_RESULT result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_ActivityStarBoxLevelUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.ACTIVITY_STAR_BOX_LEVEL_UP_RESULT result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_ActivityStarBoxLevelUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.ACTIVITY_STAR_BOX_LEVEL_UP_RESULT result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_ActivityStarBoxLevelUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_ActivityStarBoxLevelUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_ActivityStarBoxLevelUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_ActivityStarBoxLevelUp::MergeFrom(const GS2C_ActivityStarBoxLevelUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_ActivityStarBoxLevelUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_ActivityStarBoxLevelUp::CopyFrom(const GS2C_ActivityStarBoxLevelUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_ActivityStarBoxLevelUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_ActivityStarBoxLevelUp::Swap(GS2C_ActivityStarBoxLevelUp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_ActivityStarBoxLevelUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_ActivityStarBoxLevelUp_descriptor_;
  metadata.reflection = GS2C_ActivityStarBoxLevelUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_ActivityStarBoxFinishCountDown::kResultFieldNumber;
#endif  // !_MSC_VER

GS2C_ActivityStarBoxFinishCountDown::GS2C_ActivityStarBoxFinishCountDown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_ActivityStarBoxFinishCountDown::InitAsDefaultInstance() {
}

GS2C_ActivityStarBoxFinishCountDown::GS2C_ActivityStarBoxFinishCountDown(const GS2C_ActivityStarBoxFinishCountDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_ActivityStarBoxFinishCountDown::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_ActivityStarBoxFinishCountDown::~GS2C_ActivityStarBoxFinishCountDown() {
  SharedDtor();
}

void GS2C_ActivityStarBoxFinishCountDown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_ActivityStarBoxFinishCountDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_ActivityStarBoxFinishCountDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_ActivityStarBoxFinishCountDown_descriptor_;
}

const GS2C_ActivityStarBoxFinishCountDown& GS2C_ActivityStarBoxFinishCountDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

GS2C_ActivityStarBoxFinishCountDown* GS2C_ActivityStarBoxFinishCountDown::default_instance_ = NULL;

GS2C_ActivityStarBoxFinishCountDown* GS2C_ActivityStarBoxFinishCountDown::New() const {
  return new GS2C_ActivityStarBoxFinishCountDown;
}

void GS2C_ActivityStarBoxFinishCountDown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_ActivityStarBoxFinishCountDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT_IsValid(value)) {
            set_result(static_cast< ::pb::ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_ActivityStarBoxFinishCountDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_ActivityStarBoxFinishCountDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_ActivityStarBoxFinishCountDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_ActivityStarBoxFinishCountDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_ActivityStarBoxFinishCountDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_ActivityStarBoxFinishCountDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_ActivityStarBoxFinishCountDown::MergeFrom(const GS2C_ActivityStarBoxFinishCountDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_ActivityStarBoxFinishCountDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_ActivityStarBoxFinishCountDown::CopyFrom(const GS2C_ActivityStarBoxFinishCountDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_ActivityStarBoxFinishCountDown::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_ActivityStarBoxFinishCountDown::Swap(GS2C_ActivityStarBoxFinishCountDown* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_ActivityStarBoxFinishCountDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_ActivityStarBoxFinishCountDown_descriptor_;
  metadata.reflection = GS2C_ActivityStarBoxFinishCountDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_ActivityStarBoxInfo::kIsTakeRewardFieldNumber;
const int GxDB_ActivityStarBoxInfo::kTableIdFieldNumber;
const int GxDB_ActivityStarBoxInfo::kNpcIsOpenedFieldNumber;
const int GxDB_ActivityStarBoxInfo::kLeftTimesFieldNumber;
const int GxDB_ActivityStarBoxInfo::kLastTakeRewardTimeFieldNumber;
const int GxDB_ActivityStarBoxInfo::kOperateTypeFieldNumber;
#endif  // !_MSC_VER

GxDB_ActivityStarBoxInfo::GxDB_ActivityStarBoxInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_ActivityStarBoxInfo::InitAsDefaultInstance() {
}

GxDB_ActivityStarBoxInfo::GxDB_ActivityStarBoxInfo(const GxDB_ActivityStarBoxInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_ActivityStarBoxInfo::SharedCtor() {
  _cached_size_ = 0;
  is_take_reward_ = 0u;
  table_id_ = 0u;
  npc_is_opened_ = 0u;
  left_times_ = 0u;
  last_take_reward_time_ = GOOGLE_ULONGLONG(0);
  operate_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_ActivityStarBoxInfo::~GxDB_ActivityStarBoxInfo() {
  SharedDtor();
}

void GxDB_ActivityStarBoxInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_ActivityStarBoxInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_ActivityStarBoxInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_ActivityStarBoxInfo_descriptor_;
}

const GxDB_ActivityStarBoxInfo& GxDB_ActivityStarBoxInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

GxDB_ActivityStarBoxInfo* GxDB_ActivityStarBoxInfo::default_instance_ = NULL;

GxDB_ActivityStarBoxInfo* GxDB_ActivityStarBoxInfo::New() const {
  return new GxDB_ActivityStarBoxInfo;
}

void GxDB_ActivityStarBoxInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_take_reward_ = 0u;
    table_id_ = 0u;
    npc_is_opened_ = 0u;
    left_times_ = 0u;
    last_take_reward_time_ = GOOGLE_ULONGLONG(0);
    operate_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_ActivityStarBoxInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 is_take_reward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_take_reward_)));
          set_has_is_take_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_table_id;
        break;
      }

      // required uint32 table_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_npc_is_opened;
        break;
      }

      // optional uint32 npc_is_opened = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_is_opened:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npc_is_opened_)));
          set_has_npc_is_opened();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_left_times;
        break;
      }

      // optional uint32 left_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_times_)));
          set_has_left_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_take_reward_time;
        break;
      }

      // optional uint64 last_take_reward_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_take_reward_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_take_reward_time_)));
          set_has_last_take_reward_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_operate_type;
        break;
      }

      // optional uint32 operate_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_type_)));
          set_has_operate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_ActivityStarBoxInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 is_take_reward = 1;
  if (has_is_take_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->is_take_reward(), output);
  }

  // required uint32 table_id = 2;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->table_id(), output);
  }

  // optional uint32 npc_is_opened = 3;
  if (has_npc_is_opened()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->npc_is_opened(), output);
  }

  // optional uint32 left_times = 4;
  if (has_left_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->left_times(), output);
  }

  // optional uint64 last_take_reward_time = 5;
  if (has_last_take_reward_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->last_take_reward_time(), output);
  }

  // optional uint32 operate_type = 6;
  if (has_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->operate_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_ActivityStarBoxInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 is_take_reward = 1;
  if (has_is_take_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->is_take_reward(), target);
  }

  // required uint32 table_id = 2;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->table_id(), target);
  }

  // optional uint32 npc_is_opened = 3;
  if (has_npc_is_opened()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->npc_is_opened(), target);
  }

  // optional uint32 left_times = 4;
  if (has_left_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->left_times(), target);
  }

  // optional uint64 last_take_reward_time = 5;
  if (has_last_take_reward_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->last_take_reward_time(), target);
  }

  // optional uint32 operate_type = 6;
  if (has_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->operate_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_ActivityStarBoxInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 is_take_reward = 1;
    if (has_is_take_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_take_reward());
    }

    // required uint32 table_id = 2;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_id());
    }

    // optional uint32 npc_is_opened = 3;
    if (has_npc_is_opened()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npc_is_opened());
    }

    // optional uint32 left_times = 4;
    if (has_left_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_times());
    }

    // optional uint64 last_take_reward_time = 5;
    if (has_last_take_reward_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_take_reward_time());
    }

    // optional uint32 operate_type = 6;
    if (has_operate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_ActivityStarBoxInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_ActivityStarBoxInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_ActivityStarBoxInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_ActivityStarBoxInfo::MergeFrom(const GxDB_ActivityStarBoxInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_take_reward()) {
      set_is_take_reward(from.is_take_reward());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_npc_is_opened()) {
      set_npc_is_opened(from.npc_is_opened());
    }
    if (from.has_left_times()) {
      set_left_times(from.left_times());
    }
    if (from.has_last_take_reward_time()) {
      set_last_take_reward_time(from.last_take_reward_time());
    }
    if (from.has_operate_type()) {
      set_operate_type(from.operate_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_ActivityStarBoxInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_ActivityStarBoxInfo::CopyFrom(const GxDB_ActivityStarBoxInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_ActivityStarBoxInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GxDB_ActivityStarBoxInfo::Swap(GxDB_ActivityStarBoxInfo* other) {
  if (other != this) {
    std::swap(is_take_reward_, other->is_take_reward_);
    std::swap(table_id_, other->table_id_);
    std::swap(npc_is_opened_, other->npc_is_opened_);
    std::swap(left_times_, other->left_times_);
    std::swap(last_take_reward_time_, other->last_take_reward_time_);
    std::swap(operate_type_, other->operate_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_ActivityStarBoxInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_ActivityStarBoxInfo_descriptor_;
  metadata.reflection = GxDB_ActivityStarBoxInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_ActivityStarDelete::kOperateTypeFieldNumber;
#endif  // !_MSC_VER

GxDB_ActivityStarDelete::GxDB_ActivityStarDelete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_ActivityStarDelete::InitAsDefaultInstance() {
}

GxDB_ActivityStarDelete::GxDB_ActivityStarDelete(const GxDB_ActivityStarDelete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_ActivityStarDelete::SharedCtor() {
  _cached_size_ = 0;
  operate_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_ActivityStarDelete::~GxDB_ActivityStarDelete() {
  SharedDtor();
}

void GxDB_ActivityStarDelete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_ActivityStarDelete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_ActivityStarDelete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_ActivityStarDelete_descriptor_;
}

const GxDB_ActivityStarDelete& GxDB_ActivityStarDelete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

GxDB_ActivityStarDelete* GxDB_ActivityStarDelete::default_instance_ = NULL;

GxDB_ActivityStarDelete* GxDB_ActivityStarDelete::New() const {
  return new GxDB_ActivityStarDelete;
}

void GxDB_ActivityStarDelete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    operate_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_ActivityStarDelete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 operate_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_type_)));
          set_has_operate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_ActivityStarDelete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 operate_type = 1;
  if (has_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->operate_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_ActivityStarDelete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 operate_type = 1;
  if (has_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->operate_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_ActivityStarDelete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 operate_type = 1;
    if (has_operate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_ActivityStarDelete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_ActivityStarDelete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_ActivityStarDelete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_ActivityStarDelete::MergeFrom(const GxDB_ActivityStarDelete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate_type()) {
      set_operate_type(from.operate_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_ActivityStarDelete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_ActivityStarDelete::CopyFrom(const GxDB_ActivityStarDelete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_ActivityStarDelete::IsInitialized() const {

  return true;
}

void GxDB_ActivityStarDelete::Swap(GxDB_ActivityStarDelete* other) {
  if (other != this) {
    std::swap(operate_type_, other->operate_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_ActivityStarDelete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_ActivityStarDelete_descriptor_;
  metadata.reflection = GxDB_ActivityStarDelete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_ActivityStarBox::kInfoFieldNumber;
#endif  // !_MSC_VER

GxDB_ActivityStarBox::GxDB_ActivityStarBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_ActivityStarBox::InitAsDefaultInstance() {
}

GxDB_ActivityStarBox::GxDB_ActivityStarBox(const GxDB_ActivityStarBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_ActivityStarBox::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_ActivityStarBox::~GxDB_ActivityStarBox() {
  SharedDtor();
}

void GxDB_ActivityStarBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_ActivityStarBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_ActivityStarBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_ActivityStarBox_descriptor_;
}

const GxDB_ActivityStarBox& GxDB_ActivityStarBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

GxDB_ActivityStarBox* GxDB_ActivityStarBox::default_instance_ = NULL;

GxDB_ActivityStarBox* GxDB_ActivityStarBox::New() const {
  return new GxDB_ActivityStarBox;
}

void GxDB_ActivityStarBox::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_ActivityStarBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GxDB_ActivityStarBoxInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_ActivityStarBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GxDB_ActivityStarBoxInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_ActivityStarBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GxDB_ActivityStarBoxInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_ActivityStarBox::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GxDB_ActivityStarBoxInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_ActivityStarBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_ActivityStarBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_ActivityStarBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_ActivityStarBox::MergeFrom(const GxDB_ActivityStarBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_ActivityStarBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_ActivityStarBox::CopyFrom(const GxDB_ActivityStarBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_ActivityStarBox::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void GxDB_ActivityStarBox::Swap(GxDB_ActivityStarBox* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_ActivityStarBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_ActivityStarBox_descriptor_;
  metadata.reflection = GxDB_ActivityStarBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_XILIAN_TAKE_REWARD::kRewardTypeFieldNumber;
#endif  // !_MSC_VER

C2GS_XILIAN_TAKE_REWARD::C2GS_XILIAN_TAKE_REWARD()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_XILIAN_TAKE_REWARD::InitAsDefaultInstance() {
}

C2GS_XILIAN_TAKE_REWARD::C2GS_XILIAN_TAKE_REWARD(const C2GS_XILIAN_TAKE_REWARD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_XILIAN_TAKE_REWARD::SharedCtor() {
  _cached_size_ = 0;
  reward_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_XILIAN_TAKE_REWARD::~C2GS_XILIAN_TAKE_REWARD() {
  SharedDtor();
}

void C2GS_XILIAN_TAKE_REWARD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_XILIAN_TAKE_REWARD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_XILIAN_TAKE_REWARD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_XILIAN_TAKE_REWARD_descriptor_;
}

const C2GS_XILIAN_TAKE_REWARD& C2GS_XILIAN_TAKE_REWARD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

C2GS_XILIAN_TAKE_REWARD* C2GS_XILIAN_TAKE_REWARD::default_instance_ = NULL;

C2GS_XILIAN_TAKE_REWARD* C2GS_XILIAN_TAKE_REWARD::New() const {
  return new C2GS_XILIAN_TAKE_REWARD;
}

void C2GS_XILIAN_TAKE_REWARD::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reward_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_XILIAN_TAKE_REWARD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.XILIAN_REWARD_TYPE reward_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::XILIAN_REWARD_TYPE_IsValid(value)) {
            set_reward_type(static_cast< ::pb::XILIAN_REWARD_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_XILIAN_TAKE_REWARD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.XILIAN_REWARD_TYPE reward_type = 1;
  if (has_reward_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reward_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_XILIAN_TAKE_REWARD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.XILIAN_REWARD_TYPE reward_type = 1;
  if (has_reward_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reward_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_XILIAN_TAKE_REWARD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.XILIAN_REWARD_TYPE reward_type = 1;
    if (has_reward_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reward_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_XILIAN_TAKE_REWARD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_XILIAN_TAKE_REWARD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_XILIAN_TAKE_REWARD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_XILIAN_TAKE_REWARD::MergeFrom(const C2GS_XILIAN_TAKE_REWARD& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward_type()) {
      set_reward_type(from.reward_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_XILIAN_TAKE_REWARD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_XILIAN_TAKE_REWARD::CopyFrom(const C2GS_XILIAN_TAKE_REWARD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_XILIAN_TAKE_REWARD::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_XILIAN_TAKE_REWARD::Swap(C2GS_XILIAN_TAKE_REWARD* other) {
  if (other != this) {
    std::swap(reward_type_, other->reward_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_XILIAN_TAKE_REWARD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_XILIAN_TAKE_REWARD_descriptor_;
  metadata.reflection = C2GS_XILIAN_TAKE_REWARD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_XILIAN_TAKE_REWARD_RSP::kRewardTypeFieldNumber;
const int GS2C_XILIAN_TAKE_REWARD_RSP::kRewardFieldNumber;
const int GS2C_XILIAN_TAKE_REWARD_RSP::kRetFieldNumber;
#endif  // !_MSC_VER

GS2C_XILIAN_TAKE_REWARD_RSP::GS2C_XILIAN_TAKE_REWARD_RSP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_XILIAN_TAKE_REWARD_RSP::InitAsDefaultInstance() {
}

GS2C_XILIAN_TAKE_REWARD_RSP::GS2C_XILIAN_TAKE_REWARD_RSP(const GS2C_XILIAN_TAKE_REWARD_RSP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_XILIAN_TAKE_REWARD_RSP::SharedCtor() {
  _cached_size_ = 0;
  reward_type_ = 1;
  ret_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_XILIAN_TAKE_REWARD_RSP::~GS2C_XILIAN_TAKE_REWARD_RSP() {
  SharedDtor();
}

void GS2C_XILIAN_TAKE_REWARD_RSP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_XILIAN_TAKE_REWARD_RSP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_XILIAN_TAKE_REWARD_RSP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_XILIAN_TAKE_REWARD_RSP_descriptor_;
}

const GS2C_XILIAN_TAKE_REWARD_RSP& GS2C_XILIAN_TAKE_REWARD_RSP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

GS2C_XILIAN_TAKE_REWARD_RSP* GS2C_XILIAN_TAKE_REWARD_RSP::default_instance_ = NULL;

GS2C_XILIAN_TAKE_REWARD_RSP* GS2C_XILIAN_TAKE_REWARD_RSP::New() const {
  return new GS2C_XILIAN_TAKE_REWARD_RSP;
}

void GS2C_XILIAN_TAKE_REWARD_RSP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reward_type_ = 1;
    ret_ = 1;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_XILIAN_TAKE_REWARD_RSP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.XILIAN_REWARD_TYPE reward_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::XILIAN_REWARD_TYPE_IsValid(value)) {
            set_reward_type(static_cast< ::pb::XILIAN_REWARD_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // repeated .pb.StReward reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // required .pb.XILIAN_RESULT ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::XILIAN_RESULT_IsValid(value)) {
            set_ret(static_cast< ::pb::XILIAN_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_XILIAN_TAKE_REWARD_RSP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.XILIAN_REWARD_TYPE reward_type = 1;
  if (has_reward_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reward_type(), output);
  }

  // repeated .pb.StReward reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(i), output);
  }

  // required .pb.XILIAN_RESULT ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_XILIAN_TAKE_REWARD_RSP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.XILIAN_REWARD_TYPE reward_type = 1;
  if (has_reward_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reward_type(), target);
  }

  // repeated .pb.StReward reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(i), target);
  }

  // required .pb.XILIAN_RESULT ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_XILIAN_TAKE_REWARD_RSP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.XILIAN_REWARD_TYPE reward_type = 1;
    if (has_reward_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reward_type());
    }

    // required .pb.XILIAN_RESULT ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  // repeated .pb.StReward reward = 2;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_XILIAN_TAKE_REWARD_RSP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_XILIAN_TAKE_REWARD_RSP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_XILIAN_TAKE_REWARD_RSP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_XILIAN_TAKE_REWARD_RSP::MergeFrom(const GS2C_XILIAN_TAKE_REWARD_RSP& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward_type()) {
      set_reward_type(from.reward_type());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_XILIAN_TAKE_REWARD_RSP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_XILIAN_TAKE_REWARD_RSP::CopyFrom(const GS2C_XILIAN_TAKE_REWARD_RSP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_XILIAN_TAKE_REWARD_RSP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  for (int i = 0; i < reward_size(); i++) {
    if (!this->reward(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_XILIAN_TAKE_REWARD_RSP::Swap(GS2C_XILIAN_TAKE_REWARD_RSP* other) {
  if (other != this) {
    std::swap(reward_type_, other->reward_type_);
    reward_.Swap(&other->reward_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_XILIAN_TAKE_REWARD_RSP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_XILIAN_TAKE_REWARD_RSP_descriptor_;
  metadata.reflection = GS2C_XILIAN_TAKE_REWARD_RSP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_XILIAN_TAKE_TEN_REWARD::kCountFieldNumber;
#endif  // !_MSC_VER

GS2C_XILIAN_TAKE_TEN_REWARD::GS2C_XILIAN_TAKE_TEN_REWARD()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_XILIAN_TAKE_TEN_REWARD::InitAsDefaultInstance() {
}

GS2C_XILIAN_TAKE_TEN_REWARD::GS2C_XILIAN_TAKE_TEN_REWARD(const GS2C_XILIAN_TAKE_TEN_REWARD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_XILIAN_TAKE_TEN_REWARD::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_XILIAN_TAKE_TEN_REWARD::~GS2C_XILIAN_TAKE_TEN_REWARD() {
  SharedDtor();
}

void GS2C_XILIAN_TAKE_TEN_REWARD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_XILIAN_TAKE_TEN_REWARD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_XILIAN_TAKE_TEN_REWARD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_XILIAN_TAKE_TEN_REWARD_descriptor_;
}

const GS2C_XILIAN_TAKE_TEN_REWARD& GS2C_XILIAN_TAKE_TEN_REWARD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

GS2C_XILIAN_TAKE_TEN_REWARD* GS2C_XILIAN_TAKE_TEN_REWARD::default_instance_ = NULL;

GS2C_XILIAN_TAKE_TEN_REWARD* GS2C_XILIAN_TAKE_TEN_REWARD::New() const {
  return new GS2C_XILIAN_TAKE_TEN_REWARD;
}

void GS2C_XILIAN_TAKE_TEN_REWARD::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_XILIAN_TAKE_TEN_REWARD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_XILIAN_TAKE_TEN_REWARD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_XILIAN_TAKE_TEN_REWARD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_XILIAN_TAKE_TEN_REWARD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_XILIAN_TAKE_TEN_REWARD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_XILIAN_TAKE_TEN_REWARD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_XILIAN_TAKE_TEN_REWARD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_XILIAN_TAKE_TEN_REWARD::MergeFrom(const GS2C_XILIAN_TAKE_TEN_REWARD& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_XILIAN_TAKE_TEN_REWARD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_XILIAN_TAKE_TEN_REWARD::CopyFrom(const GS2C_XILIAN_TAKE_TEN_REWARD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_XILIAN_TAKE_TEN_REWARD::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_XILIAN_TAKE_TEN_REWARD::Swap(GS2C_XILIAN_TAKE_TEN_REWARD* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_XILIAN_TAKE_TEN_REWARD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_XILIAN_TAKE_TEN_REWARD_descriptor_;
  metadata.reflection = GS2C_XILIAN_TAKE_TEN_REWARD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Purify_Item::kTypeFieldNumber;
const int C2GS_Purify_Item::kSoltIdFieldNumber;
const int C2GS_Purify_Item::kAttrIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Purify_Item::C2GS_Purify_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Purify_Item::InitAsDefaultInstance() {
}

C2GS_Purify_Item::C2GS_Purify_Item(const C2GS_Purify_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Purify_Item::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  solt_id_ = 0u;
  attr_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Purify_Item::~C2GS_Purify_Item() {
  SharedDtor();
}

void C2GS_Purify_Item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Purify_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Purify_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Purify_Item_descriptor_;
}

const C2GS_Purify_Item& C2GS_Purify_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

C2GS_Purify_Item* C2GS_Purify_Item::default_instance_ = NULL;

C2GS_Purify_Item* C2GS_Purify_Item::New() const {
  return new C2GS_Purify_Item;
}

void C2GS_Purify_Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    solt_id_ = 0u;
    attr_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Purify_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_solt_id;
        break;
      }

      // required uint32 solt_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_solt_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solt_id_)));
          set_has_solt_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attr_id;
        break;
      }

      // optional uint32 attr_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_id_)));
          set_has_attr_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Purify_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 solt_id = 2;
  if (has_solt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->solt_id(), output);
  }

  // optional uint32 attr_id = 3;
  if (has_attr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attr_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Purify_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 solt_id = 2;
  if (has_solt_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->solt_id(), target);
  }

  // optional uint32 attr_id = 3;
  if (has_attr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attr_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Purify_Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 solt_id = 2;
    if (has_solt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solt_id());
    }

    // optional uint32 attr_id = 3;
    if (has_attr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Purify_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Purify_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Purify_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Purify_Item::MergeFrom(const C2GS_Purify_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_solt_id()) {
      set_solt_id(from.solt_id());
    }
    if (from.has_attr_id()) {
      set_attr_id(from.attr_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Purify_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Purify_Item::CopyFrom(const C2GS_Purify_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Purify_Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2GS_Purify_Item::Swap(C2GS_Purify_Item* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(solt_id_, other->solt_id_);
    std::swap(attr_id_, other->attr_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Purify_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Purify_Item_descriptor_;
  metadata.reflection = C2GS_Purify_Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Purify_Item_Rsp::kErrCodeFieldNumber;
#endif  // !_MSC_VER

GS2C_Purify_Item_Rsp::GS2C_Purify_Item_Rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Purify_Item_Rsp::InitAsDefaultInstance() {
}

GS2C_Purify_Item_Rsp::GS2C_Purify_Item_Rsp(const GS2C_Purify_Item_Rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Purify_Item_Rsp::SharedCtor() {
  _cached_size_ = 0;
  err_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Purify_Item_Rsp::~GS2C_Purify_Item_Rsp() {
  SharedDtor();
}

void GS2C_Purify_Item_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Purify_Item_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Purify_Item_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Purify_Item_Rsp_descriptor_;
}

const GS2C_Purify_Item_Rsp& GS2C_Purify_Item_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

GS2C_Purify_Item_Rsp* GS2C_Purify_Item_Rsp::default_instance_ = NULL;

GS2C_Purify_Item_Rsp* GS2C_Purify_Item_Rsp::New() const {
  return new GS2C_Purify_Item_Rsp;
}

void GS2C_Purify_Item_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Purify_Item_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 err_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &err_code_)));
          set_has_err_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Purify_Item_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 err_code = 1;
  if (has_err_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->err_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Purify_Item_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 err_code = 1;
  if (has_err_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->err_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Purify_Item_Rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 err_code = 1;
    if (has_err_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->err_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Purify_Item_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Purify_Item_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Purify_Item_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Purify_Item_Rsp::MergeFrom(const GS2C_Purify_Item_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_code()) {
      set_err_code(from.err_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Purify_Item_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Purify_Item_Rsp::CopyFrom(const GS2C_Purify_Item_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Purify_Item_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Purify_Item_Rsp::Swap(GS2C_Purify_Item_Rsp* other) {
  if (other != this) {
    std::swap(err_code_, other->err_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Purify_Item_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Purify_Item_Rsp_descriptor_;
  metadata.reflection = GS2C_Purify_Item_Rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZhengWuReward::kRewardTypeFieldNumber;
const int ZhengWuReward::kRewardCountFieldNumber;
const int ZhengWuReward::kCostDiamondFieldNumber;
#endif  // !_MSC_VER

ZhengWuReward::ZhengWuReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZhengWuReward::InitAsDefaultInstance() {
}

ZhengWuReward::ZhengWuReward(const ZhengWuReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZhengWuReward::SharedCtor() {
  _cached_size_ = 0;
  reward_type_ = 0u;
  reward_count_ = 0u;
  cost_diamond_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZhengWuReward::~ZhengWuReward() {
  SharedDtor();
}

void ZhengWuReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZhengWuReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZhengWuReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZhengWuReward_descriptor_;
}

const ZhengWuReward& ZhengWuReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

ZhengWuReward* ZhengWuReward::default_instance_ = NULL;

ZhengWuReward* ZhengWuReward::New() const {
  return new ZhengWuReward;
}

void ZhengWuReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reward_type_ = 0u;
    reward_count_ = 0u;
    cost_diamond_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZhengWuReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reward_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_type_)));
          set_has_reward_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward_count;
        break;
      }

      // optional uint32 reward_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_count_)));
          set_has_reward_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cost_diamond;
        break;
      }

      // optional uint32 cost_diamond = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_diamond_)));
          set_has_cost_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZhengWuReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reward_type = 1;
  if (has_reward_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reward_type(), output);
  }

  // optional uint32 reward_count = 2;
  if (has_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reward_count(), output);
  }

  // optional uint32 cost_diamond = 3;
  if (has_cost_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cost_diamond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZhengWuReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reward_type = 1;
  if (has_reward_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reward_type(), target);
  }

  // optional uint32 reward_count = 2;
  if (has_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reward_count(), target);
  }

  // optional uint32 cost_diamond = 3;
  if (has_cost_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cost_diamond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZhengWuReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reward_type = 1;
    if (has_reward_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_type());
    }

    // optional uint32 reward_count = 2;
    if (has_reward_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_count());
    }

    // optional uint32 cost_diamond = 3;
    if (has_cost_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_diamond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZhengWuReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZhengWuReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZhengWuReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZhengWuReward::MergeFrom(const ZhengWuReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward_type()) {
      set_reward_type(from.reward_type());
    }
    if (from.has_reward_count()) {
      set_reward_count(from.reward_count());
    }
    if (from.has_cost_diamond()) {
      set_cost_diamond(from.cost_diamond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZhengWuReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZhengWuReward::CopyFrom(const ZhengWuReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZhengWuReward::IsInitialized() const {

  return true;
}

void ZhengWuReward::Swap(ZhengWuReward* other) {
  if (other != this) {
    std::swap(reward_type_, other->reward_type_);
    std::swap(reward_count_, other->reward_count_);
    std::swap(cost_diamond_, other->cost_diamond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZhengWuReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZhengWuReward_descriptor_;
  metadata.reflection = ZhengWuReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Show_Dialog::kLeftIdFieldNumber;
const int GS2C_Show_Dialog::kRightIdFieldNumber;
const int GS2C_Show_Dialog::kTitleIdFieldNumber;
const int GS2C_Show_Dialog::kLeftRewardFieldNumber;
const int GS2C_Show_Dialog::kRightRewardFieldNumber;
const int GS2C_Show_Dialog::kImageNameFieldNumber;
#endif  // !_MSC_VER

GS2C_Show_Dialog::GS2C_Show_Dialog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Show_Dialog::InitAsDefaultInstance() {
  left_reward_ = const_cast< ::pb::ZhengWuReward*>(&::pb::ZhengWuReward::default_instance());
  right_reward_ = const_cast< ::pb::ZhengWuReward*>(&::pb::ZhengWuReward::default_instance());
}

GS2C_Show_Dialog::GS2C_Show_Dialog(const GS2C_Show_Dialog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Show_Dialog::SharedCtor() {
  _cached_size_ = 0;
  left_id_ = 0u;
  right_id_ = 0u;
  title_id_ = 0u;
  left_reward_ = NULL;
  right_reward_ = NULL;
  image_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Show_Dialog::~GS2C_Show_Dialog() {
  SharedDtor();
}

void GS2C_Show_Dialog::SharedDtor() {
  if (image_name_ != &::google::protobuf::internal::kEmptyString) {
    delete image_name_;
  }
  if (this != default_instance_) {
    delete left_reward_;
    delete right_reward_;
  }
}

void GS2C_Show_Dialog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Show_Dialog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Show_Dialog_descriptor_;
}

const GS2C_Show_Dialog& GS2C_Show_Dialog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

GS2C_Show_Dialog* GS2C_Show_Dialog::default_instance_ = NULL;

GS2C_Show_Dialog* GS2C_Show_Dialog::New() const {
  return new GS2C_Show_Dialog;
}

void GS2C_Show_Dialog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    left_id_ = 0u;
    right_id_ = 0u;
    title_id_ = 0u;
    if (has_left_reward()) {
      if (left_reward_ != NULL) left_reward_->::pb::ZhengWuReward::Clear();
    }
    if (has_right_reward()) {
      if (right_reward_ != NULL) right_reward_->::pb::ZhengWuReward::Clear();
    }
    if (has_image_name()) {
      if (image_name_ != &::google::protobuf::internal::kEmptyString) {
        image_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Show_Dialog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 left_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_id_)));
          set_has_left_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_right_id;
        break;
      }

      // optional uint32 right_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_right_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &right_id_)));
          set_has_right_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_title_id;
        break;
      }

      // optional uint32 title_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_title_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_id_)));
          set_has_title_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_left_reward;
        break;
      }

      // optional .pb.ZhengWuReward left_reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_left_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_right_reward;
        break;
      }

      // optional .pb.ZhengWuReward right_reward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_right_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_image_name;
        break;
      }

      // optional string image_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->image_name().data(), this->image_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Show_Dialog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 left_id = 1;
  if (has_left_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->left_id(), output);
  }

  // optional uint32 right_id = 2;
  if (has_right_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->right_id(), output);
  }

  // optional uint32 title_id = 3;
  if (has_title_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->title_id(), output);
  }

  // optional .pb.ZhengWuReward left_reward = 4;
  if (has_left_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->left_reward(), output);
  }

  // optional .pb.ZhengWuReward right_reward = 5;
  if (has_right_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->right_reward(), output);
  }

  // optional string image_name = 6;
  if (has_image_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_name().data(), this->image_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->image_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Show_Dialog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 left_id = 1;
  if (has_left_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->left_id(), target);
  }

  // optional uint32 right_id = 2;
  if (has_right_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->right_id(), target);
  }

  // optional uint32 title_id = 3;
  if (has_title_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->title_id(), target);
  }

  // optional .pb.ZhengWuReward left_reward = 4;
  if (has_left_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->left_reward(), target);
  }

  // optional .pb.ZhengWuReward right_reward = 5;
  if (has_right_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->right_reward(), target);
  }

  // optional string image_name = 6;
  if (has_image_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_name().data(), this->image_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->image_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Show_Dialog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 left_id = 1;
    if (has_left_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_id());
    }

    // optional uint32 right_id = 2;
    if (has_right_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->right_id());
    }

    // optional uint32 title_id = 3;
    if (has_title_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->title_id());
    }

    // optional .pb.ZhengWuReward left_reward = 4;
    if (has_left_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left_reward());
    }

    // optional .pb.ZhengWuReward right_reward = 5;
    if (has_right_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right_reward());
    }

    // optional string image_name = 6;
    if (has_image_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Show_Dialog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Show_Dialog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Show_Dialog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Show_Dialog::MergeFrom(const GS2C_Show_Dialog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left_id()) {
      set_left_id(from.left_id());
    }
    if (from.has_right_id()) {
      set_right_id(from.right_id());
    }
    if (from.has_title_id()) {
      set_title_id(from.title_id());
    }
    if (from.has_left_reward()) {
      mutable_left_reward()->::pb::ZhengWuReward::MergeFrom(from.left_reward());
    }
    if (from.has_right_reward()) {
      mutable_right_reward()->::pb::ZhengWuReward::MergeFrom(from.right_reward());
    }
    if (from.has_image_name()) {
      set_image_name(from.image_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Show_Dialog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Show_Dialog::CopyFrom(const GS2C_Show_Dialog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Show_Dialog::IsInitialized() const {

  return true;
}

void GS2C_Show_Dialog::Swap(GS2C_Show_Dialog* other) {
  if (other != this) {
    std::swap(left_id_, other->left_id_);
    std::swap(right_id_, other->right_id_);
    std::swap(title_id_, other->title_id_);
    std::swap(left_reward_, other->left_reward_);
    std::swap(right_reward_, other->right_reward_);
    std::swap(image_name_, other->image_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Show_Dialog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Show_Dialog_descriptor_;
  metadata.reflection = GS2C_Show_Dialog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Take_Reward::kRewardFieldNumber;
#endif  // !_MSC_VER

C2GS_Take_Reward::C2GS_Take_Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Take_Reward::InitAsDefaultInstance() {
  reward_ = const_cast< ::pb::ZhengWuReward*>(&::pb::ZhengWuReward::default_instance());
}

C2GS_Take_Reward::C2GS_Take_Reward(const C2GS_Take_Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Take_Reward::SharedCtor() {
  _cached_size_ = 0;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Take_Reward::~C2GS_Take_Reward() {
  SharedDtor();
}

void C2GS_Take_Reward::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void C2GS_Take_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Take_Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Take_Reward_descriptor_;
}

const C2GS_Take_Reward& C2GS_Take_Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

C2GS_Take_Reward* C2GS_Take_Reward::default_instance_ = NULL;

C2GS_Take_Reward* C2GS_Take_Reward::New() const {
  return new C2GS_Take_Reward;
}

void C2GS_Take_Reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_reward()) {
      if (reward_ != NULL) reward_->::pb::ZhengWuReward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Take_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ZhengWuReward reward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Take_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.ZhengWuReward reward = 1;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Take_Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.ZhengWuReward reward = 1;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Take_Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ZhengWuReward reward = 1;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Take_Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Take_Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Take_Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Take_Reward::MergeFrom(const C2GS_Take_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward()) {
      mutable_reward()->::pb::ZhengWuReward::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Take_Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Take_Reward::CopyFrom(const C2GS_Take_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Take_Reward::IsInitialized() const {

  return true;
}

void C2GS_Take_Reward::Swap(C2GS_Take_Reward* other) {
  if (other != this) {
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Take_Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Take_Reward_descriptor_;
  metadata.reflection = C2GS_Take_Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Take_Reward_Rsp::kRetFieldNumber;
#endif  // !_MSC_VER

GS2C_Take_Reward_Rsp::GS2C_Take_Reward_Rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Take_Reward_Rsp::InitAsDefaultInstance() {
}

GS2C_Take_Reward_Rsp::GS2C_Take_Reward_Rsp(const GS2C_Take_Reward_Rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Take_Reward_Rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Take_Reward_Rsp::~GS2C_Take_Reward_Rsp() {
  SharedDtor();
}

void GS2C_Take_Reward_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Take_Reward_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Take_Reward_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Take_Reward_Rsp_descriptor_;
}

const GS2C_Take_Reward_Rsp& GS2C_Take_Reward_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

GS2C_Take_Reward_Rsp* GS2C_Take_Reward_Rsp::default_instance_ = NULL;

GS2C_Take_Reward_Rsp* GS2C_Take_Reward_Rsp::New() const {
  return new GS2C_Take_Reward_Rsp;
}

void GS2C_Take_Reward_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Take_Reward_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Take_Reward_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Take_Reward_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Take_Reward_Rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Take_Reward_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Take_Reward_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Take_Reward_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Take_Reward_Rsp::MergeFrom(const GS2C_Take_Reward_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Take_Reward_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Take_Reward_Rsp::CopyFrom(const GS2C_Take_Reward_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Take_Reward_Rsp::IsInitialized() const {

  return true;
}

void GS2C_Take_Reward_Rsp::Swap(GS2C_Take_Reward_Rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Take_Reward_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Take_Reward_Rsp_descriptor_;
  metadata.reflection = GS2C_Take_Reward_Rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Take_MinZhong_Reward_Rsp::kRewardFieldNumber;
#endif  // !_MSC_VER

GS2C_Take_MinZhong_Reward_Rsp::GS2C_Take_MinZhong_Reward_Rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Take_MinZhong_Reward_Rsp::InitAsDefaultInstance() {
}

GS2C_Take_MinZhong_Reward_Rsp::GS2C_Take_MinZhong_Reward_Rsp(const GS2C_Take_MinZhong_Reward_Rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Take_MinZhong_Reward_Rsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Take_MinZhong_Reward_Rsp::~GS2C_Take_MinZhong_Reward_Rsp() {
  SharedDtor();
}

void GS2C_Take_MinZhong_Reward_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Take_MinZhong_Reward_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Take_MinZhong_Reward_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Take_MinZhong_Reward_Rsp_descriptor_;
}

const GS2C_Take_MinZhong_Reward_Rsp& GS2C_Take_MinZhong_Reward_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

GS2C_Take_MinZhong_Reward_Rsp* GS2C_Take_MinZhong_Reward_Rsp::default_instance_ = NULL;

GS2C_Take_MinZhong_Reward_Rsp* GS2C_Take_MinZhong_Reward_Rsp::New() const {
  return new GS2C_Take_MinZhong_Reward_Rsp;
}

void GS2C_Take_MinZhong_Reward_Rsp::Clear() {
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Take_MinZhong_Reward_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.StReward reward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Take_MinZhong_Reward_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.StReward reward = 1;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Take_MinZhong_Reward_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.StReward reward = 1;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Take_MinZhong_Reward_Rsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.StReward reward = 1;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Take_MinZhong_Reward_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Take_MinZhong_Reward_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Take_MinZhong_Reward_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Take_MinZhong_Reward_Rsp::MergeFrom(const GS2C_Take_MinZhong_Reward_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Take_MinZhong_Reward_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Take_MinZhong_Reward_Rsp::CopyFrom(const GS2C_Take_MinZhong_Reward_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Take_MinZhong_Reward_Rsp::IsInitialized() const {

  for (int i = 0; i < reward_size(); i++) {
    if (!this->reward(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Take_MinZhong_Reward_Rsp::Swap(GS2C_Take_MinZhong_Reward_Rsp* other) {
  if (other != this) {
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Take_MinZhong_Reward_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Take_MinZhong_Reward_Rsp_descriptor_;
  metadata.reflection = GS2C_Take_MinZhong_Reward_Rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_GovAffairsInfo::kLeftIdFieldNumber;
const int GxDB_GovAffairsInfo::kRightIdFieldNumber;
const int GxDB_GovAffairsInfo::kTitleIdFieldNumber;
const int GxDB_GovAffairsInfo::kLeftRewardTypeFieldNumber;
const int GxDB_GovAffairsInfo::kLeftRewardCountFieldNumber;
const int GxDB_GovAffairsInfo::kRightRewardTypeFieldNumber;
const int GxDB_GovAffairsInfo::kRightRewardCountFieldNumber;
const int GxDB_GovAffairsInfo::kCostDiamondFieldNumber;
const int GxDB_GovAffairsInfo::kImageNameFieldNumber;
#endif  // !_MSC_VER

GxDB_GovAffairsInfo::GxDB_GovAffairsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_GovAffairsInfo::InitAsDefaultInstance() {
}

GxDB_GovAffairsInfo::GxDB_GovAffairsInfo(const GxDB_GovAffairsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_GovAffairsInfo::SharedCtor() {
  _cached_size_ = 0;
  left_id_ = 0u;
  right_id_ = 0u;
  title_id_ = 0u;
  left_reward_type_ = 0u;
  left_reward_count_ = 0u;
  right_reward_type_ = 0u;
  right_reward_count_ = 0u;
  cost_diamond_ = 0u;
  image_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_GovAffairsInfo::~GxDB_GovAffairsInfo() {
  SharedDtor();
}

void GxDB_GovAffairsInfo::SharedDtor() {
  if (image_name_ != &::google::protobuf::internal::kEmptyString) {
    delete image_name_;
  }
  if (this != default_instance_) {
  }
}

void GxDB_GovAffairsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_GovAffairsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_GovAffairsInfo_descriptor_;
}

const GxDB_GovAffairsInfo& GxDB_GovAffairsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

GxDB_GovAffairsInfo* GxDB_GovAffairsInfo::default_instance_ = NULL;

GxDB_GovAffairsInfo* GxDB_GovAffairsInfo::New() const {
  return new GxDB_GovAffairsInfo;
}

void GxDB_GovAffairsInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    left_id_ = 0u;
    right_id_ = 0u;
    title_id_ = 0u;
    left_reward_type_ = 0u;
    left_reward_count_ = 0u;
    right_reward_type_ = 0u;
    right_reward_count_ = 0u;
    cost_diamond_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_image_name()) {
      if (image_name_ != &::google::protobuf::internal::kEmptyString) {
        image_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_GovAffairsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 left_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_id_)));
          set_has_left_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_right_id;
        break;
      }

      // optional uint32 right_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_right_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &right_id_)));
          set_has_right_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_title_id;
        break;
      }

      // optional uint32 title_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_title_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_id_)));
          set_has_title_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_left_reward_type;
        break;
      }

      // optional uint32 left_reward_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_reward_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_reward_type_)));
          set_has_left_reward_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_left_reward_count;
        break;
      }

      // optional uint32 left_reward_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_reward_count_)));
          set_has_left_reward_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_right_reward_type;
        break;
      }

      // optional uint32 right_reward_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_right_reward_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &right_reward_type_)));
          set_has_right_reward_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_right_reward_count;
        break;
      }

      // optional uint32 right_reward_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_right_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &right_reward_count_)));
          set_has_right_reward_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cost_diamond;
        break;
      }

      // optional uint32 cost_diamond = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_diamond_)));
          set_has_cost_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_image_name;
        break;
      }

      // optional string image_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->image_name().data(), this->image_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_GovAffairsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 left_id = 1;
  if (has_left_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->left_id(), output);
  }

  // optional uint32 right_id = 2;
  if (has_right_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->right_id(), output);
  }

  // optional uint32 title_id = 3;
  if (has_title_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->title_id(), output);
  }

  // optional uint32 left_reward_type = 4;
  if (has_left_reward_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->left_reward_type(), output);
  }

  // optional uint32 left_reward_count = 5;
  if (has_left_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->left_reward_count(), output);
  }

  // optional uint32 right_reward_type = 6;
  if (has_right_reward_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->right_reward_type(), output);
  }

  // optional uint32 right_reward_count = 7;
  if (has_right_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->right_reward_count(), output);
  }

  // optional uint32 cost_diamond = 8;
  if (has_cost_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->cost_diamond(), output);
  }

  // optional string image_name = 9;
  if (has_image_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_name().data(), this->image_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->image_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_GovAffairsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 left_id = 1;
  if (has_left_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->left_id(), target);
  }

  // optional uint32 right_id = 2;
  if (has_right_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->right_id(), target);
  }

  // optional uint32 title_id = 3;
  if (has_title_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->title_id(), target);
  }

  // optional uint32 left_reward_type = 4;
  if (has_left_reward_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->left_reward_type(), target);
  }

  // optional uint32 left_reward_count = 5;
  if (has_left_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->left_reward_count(), target);
  }

  // optional uint32 right_reward_type = 6;
  if (has_right_reward_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->right_reward_type(), target);
  }

  // optional uint32 right_reward_count = 7;
  if (has_right_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->right_reward_count(), target);
  }

  // optional uint32 cost_diamond = 8;
  if (has_cost_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->cost_diamond(), target);
  }

  // optional string image_name = 9;
  if (has_image_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_name().data(), this->image_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->image_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_GovAffairsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 left_id = 1;
    if (has_left_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_id());
    }

    // optional uint32 right_id = 2;
    if (has_right_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->right_id());
    }

    // optional uint32 title_id = 3;
    if (has_title_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->title_id());
    }

    // optional uint32 left_reward_type = 4;
    if (has_left_reward_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_reward_type());
    }

    // optional uint32 left_reward_count = 5;
    if (has_left_reward_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_reward_count());
    }

    // optional uint32 right_reward_type = 6;
    if (has_right_reward_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->right_reward_type());
    }

    // optional uint32 right_reward_count = 7;
    if (has_right_reward_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->right_reward_count());
    }

    // optional uint32 cost_diamond = 8;
    if (has_cost_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_diamond());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string image_name = 9;
    if (has_image_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_GovAffairsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_GovAffairsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_GovAffairsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_GovAffairsInfo::MergeFrom(const GxDB_GovAffairsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left_id()) {
      set_left_id(from.left_id());
    }
    if (from.has_right_id()) {
      set_right_id(from.right_id());
    }
    if (from.has_title_id()) {
      set_title_id(from.title_id());
    }
    if (from.has_left_reward_type()) {
      set_left_reward_type(from.left_reward_type());
    }
    if (from.has_left_reward_count()) {
      set_left_reward_count(from.left_reward_count());
    }
    if (from.has_right_reward_type()) {
      set_right_reward_type(from.right_reward_type());
    }
    if (from.has_right_reward_count()) {
      set_right_reward_count(from.right_reward_count());
    }
    if (from.has_cost_diamond()) {
      set_cost_diamond(from.cost_diamond());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_image_name()) {
      set_image_name(from.image_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_GovAffairsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_GovAffairsInfo::CopyFrom(const GxDB_GovAffairsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_GovAffairsInfo::IsInitialized() const {

  return true;
}

void GxDB_GovAffairsInfo::Swap(GxDB_GovAffairsInfo* other) {
  if (other != this) {
    std::swap(left_id_, other->left_id_);
    std::swap(right_id_, other->right_id_);
    std::swap(title_id_, other->title_id_);
    std::swap(left_reward_type_, other->left_reward_type_);
    std::swap(left_reward_count_, other->left_reward_count_);
    std::swap(right_reward_type_, other->right_reward_type_);
    std::swap(right_reward_count_, other->right_reward_count_);
    std::swap(cost_diamond_, other->cost_diamond_);
    std::swap(image_name_, other->image_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_GovAffairsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_GovAffairsInfo_descriptor_;
  metadata.reflection = GxDB_GovAffairsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CelebrityEvent::kEventIdFieldNumber;
const int CelebrityEvent::kEventDisplayFieldNumber;
const int CelebrityEvent::kPerferToFieldNumber;
const int CelebrityEvent::kCityIdFieldNumber;
const int CelebrityEvent::kNextFreshTimeFieldNumber;
const int CelebrityEvent::kDailyTimesFieldNumber;
#endif  // !_MSC_VER

CelebrityEvent::CelebrityEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CelebrityEvent::InitAsDefaultInstance() {
  perferto_ = const_cast< ::pb::StReward*>(&::pb::StReward::default_instance());
}

CelebrityEvent::CelebrityEvent(const CelebrityEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CelebrityEvent::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
  event_display_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  perferto_ = NULL;
  city_id_ = 0u;
  next_fresh_time_ = GOOGLE_ULONGLONG(0);
  daily_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CelebrityEvent::~CelebrityEvent() {
  SharedDtor();
}

void CelebrityEvent::SharedDtor() {
  if (event_display_ != &::google::protobuf::internal::kEmptyString) {
    delete event_display_;
  }
  if (this != default_instance_) {
    delete perferto_;
  }
}

void CelebrityEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CelebrityEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CelebrityEvent_descriptor_;
}

const CelebrityEvent& CelebrityEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

CelebrityEvent* CelebrityEvent::default_instance_ = NULL;

CelebrityEvent* CelebrityEvent::New() const {
  return new CelebrityEvent;
}

void CelebrityEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = 0u;
    if (has_event_display()) {
      if (event_display_ != &::google::protobuf::internal::kEmptyString) {
        event_display_->clear();
      }
    }
    if (has_perferto()) {
      if (perferto_ != NULL) perferto_->::pb::StReward::Clear();
    }
    city_id_ = 0u;
    next_fresh_time_ = GOOGLE_ULONGLONG(0);
    daily_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CelebrityEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_event_display;
        break;
      }

      // optional string event_display = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_display:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_display()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_display().data(), this->event_display().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_perferTo;
        break;
      }

      // optional .pb.StReward perferTo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_perferTo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_perferto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_city_id;
        break;
      }

      // optional uint32 city_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_next_fresh_time;
        break;
      }

      // optional uint64 next_fresh_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_fresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_fresh_time_)));
          set_has_next_fresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_daily_times;
        break;
      }

      // optional uint32 daily_times = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daily_times_)));
          set_has_daily_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CelebrityEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional string event_display = 2;
  if (has_event_display()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_display().data(), this->event_display().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->event_display(), output);
  }

  // optional .pb.StReward perferTo = 3;
  if (has_perferto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->perferto(), output);
  }

  // optional uint32 city_id = 4;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->city_id(), output);
  }

  // optional uint64 next_fresh_time = 5;
  if (has_next_fresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->next_fresh_time(), output);
  }

  // optional uint32 daily_times = 6;
  if (has_daily_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->daily_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CelebrityEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional string event_display = 2;
  if (has_event_display()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_display().data(), this->event_display().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->event_display(), target);
  }

  // optional .pb.StReward perferTo = 3;
  if (has_perferto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->perferto(), target);
  }

  // optional uint32 city_id = 4;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->city_id(), target);
  }

  // optional uint64 next_fresh_time = 5;
  if (has_next_fresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->next_fresh_time(), target);
  }

  // optional uint32 daily_times = 6;
  if (has_daily_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->daily_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CelebrityEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional string event_display = 2;
    if (has_event_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_display());
    }

    // optional .pb.StReward perferTo = 3;
    if (has_perferto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->perferto());
    }

    // optional uint32 city_id = 4;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

    // optional uint64 next_fresh_time = 5;
    if (has_next_fresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->next_fresh_time());
    }

    // optional uint32 daily_times = 6;
    if (has_daily_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daily_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CelebrityEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CelebrityEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CelebrityEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CelebrityEvent::MergeFrom(const CelebrityEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_event_display()) {
      set_event_display(from.event_display());
    }
    if (from.has_perferto()) {
      mutable_perferto()->::pb::StReward::MergeFrom(from.perferto());
    }
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
    if (from.has_next_fresh_time()) {
      set_next_fresh_time(from.next_fresh_time());
    }
    if (from.has_daily_times()) {
      set_daily_times(from.daily_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CelebrityEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CelebrityEvent::CopyFrom(const CelebrityEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CelebrityEvent::IsInitialized() const {

  if (has_perferto()) {
    if (!this->perferto().IsInitialized()) return false;
  }
  return true;
}

void CelebrityEvent::Swap(CelebrityEvent* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(event_display_, other->event_display_);
    std::swap(perferto_, other->perferto_);
    std::swap(city_id_, other->city_id_);
    std::swap(next_fresh_time_, other->next_fresh_time_);
    std::swap(daily_times_, other->daily_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CelebrityEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CelebrityEvent_descriptor_;
  metadata.reflection = CelebrityEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Celebrity_All_Info::kCityIdFieldNumber;
const int GS2C_Celebrity_All_Info::kNextFreshTimeFieldNumber;
const int GS2C_Celebrity_All_Info::kItemIdFieldNumber;
const int GS2C_Celebrity_All_Info::kEventInfoFieldNumber;
#endif  // !_MSC_VER

GS2C_Celebrity_All_Info::GS2C_Celebrity_All_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Celebrity_All_Info::InitAsDefaultInstance() {
  event_info_ = const_cast< ::pb::CelebrityEvent*>(&::pb::CelebrityEvent::default_instance());
}

GS2C_Celebrity_All_Info::GS2C_Celebrity_All_Info(const GS2C_Celebrity_All_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Celebrity_All_Info::SharedCtor() {
  _cached_size_ = 0;
  city_id_ = 0u;
  next_fresh_time_ = GOOGLE_ULONGLONG(0);
  item_id_ = 0u;
  event_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Celebrity_All_Info::~GS2C_Celebrity_All_Info() {
  SharedDtor();
}

void GS2C_Celebrity_All_Info::SharedDtor() {
  if (this != default_instance_) {
    delete event_info_;
  }
}

void GS2C_Celebrity_All_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Celebrity_All_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Celebrity_All_Info_descriptor_;
}

const GS2C_Celebrity_All_Info& GS2C_Celebrity_All_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

GS2C_Celebrity_All_Info* GS2C_Celebrity_All_Info::default_instance_ = NULL;

GS2C_Celebrity_All_Info* GS2C_Celebrity_All_Info::New() const {
  return new GS2C_Celebrity_All_Info;
}

void GS2C_Celebrity_All_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    city_id_ = 0u;
    next_fresh_time_ = GOOGLE_ULONGLONG(0);
    item_id_ = 0u;
    if (has_event_info()) {
      if (event_info_ != NULL) event_info_->::pb::CelebrityEvent::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Celebrity_All_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 city_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_next_fresh_time;
        break;
      }

      // optional uint64 next_fresh_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_fresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_fresh_time_)));
          set_has_next_fresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }

      // optional uint32 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_event_info;
        break;
      }

      // optional .pb.CelebrityEvent event_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Celebrity_All_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 city_id = 1;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->city_id(), output);
  }

  // optional uint64 next_fresh_time = 2;
  if (has_next_fresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->next_fresh_time(), output);
  }

  // optional uint32 item_id = 3;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_id(), output);
  }

  // optional .pb.CelebrityEvent event_info = 4;
  if (has_event_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->event_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Celebrity_All_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 city_id = 1;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->city_id(), target);
  }

  // optional uint64 next_fresh_time = 2;
  if (has_next_fresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->next_fresh_time(), target);
  }

  // optional uint32 item_id = 3;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_id(), target);
  }

  // optional .pb.CelebrityEvent event_info = 4;
  if (has_event_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->event_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Celebrity_All_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 city_id = 1;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

    // optional uint64 next_fresh_time = 2;
    if (has_next_fresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->next_fresh_time());
    }

    // optional uint32 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional .pb.CelebrityEvent event_info = 4;
    if (has_event_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Celebrity_All_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Celebrity_All_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Celebrity_All_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Celebrity_All_Info::MergeFrom(const GS2C_Celebrity_All_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
    if (from.has_next_fresh_time()) {
      set_next_fresh_time(from.next_fresh_time());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_event_info()) {
      mutable_event_info()->::pb::CelebrityEvent::MergeFrom(from.event_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Celebrity_All_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Celebrity_All_Info::CopyFrom(const GS2C_Celebrity_All_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Celebrity_All_Info::IsInitialized() const {

  if (has_event_info()) {
    if (!this->event_info().IsInitialized()) return false;
  }
  return true;
}

void GS2C_Celebrity_All_Info::Swap(GS2C_Celebrity_All_Info* other) {
  if (other != this) {
    std::swap(city_id_, other->city_id_);
    std::swap(next_fresh_time_, other->next_fresh_time_);
    std::swap(item_id_, other->item_id_);
    std::swap(event_info_, other->event_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Celebrity_All_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Celebrity_All_Info_descriptor_;
  metadata.reflection = GS2C_Celebrity_All_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_UseCurrencyToTakeReward::kEventIdFieldNumber;
const int C2GS_UseCurrencyToTakeReward::kCityIdFieldNumber;
const int C2GS_UseCurrencyToTakeReward::kAwardIdxFieldNumber;
#endif  // !_MSC_VER

C2GS_UseCurrencyToTakeReward::C2GS_UseCurrencyToTakeReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_UseCurrencyToTakeReward::InitAsDefaultInstance() {
}

C2GS_UseCurrencyToTakeReward::C2GS_UseCurrencyToTakeReward(const C2GS_UseCurrencyToTakeReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_UseCurrencyToTakeReward::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
  city_id_ = 0u;
  award_idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_UseCurrencyToTakeReward::~C2GS_UseCurrencyToTakeReward() {
  SharedDtor();
}

void C2GS_UseCurrencyToTakeReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_UseCurrencyToTakeReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_UseCurrencyToTakeReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_UseCurrencyToTakeReward_descriptor_;
}

const C2GS_UseCurrencyToTakeReward& C2GS_UseCurrencyToTakeReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

C2GS_UseCurrencyToTakeReward* C2GS_UseCurrencyToTakeReward::default_instance_ = NULL;

C2GS_UseCurrencyToTakeReward* C2GS_UseCurrencyToTakeReward::New() const {
  return new C2GS_UseCurrencyToTakeReward;
}

void C2GS_UseCurrencyToTakeReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = 0u;
    city_id_ = 0u;
    award_idx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_UseCurrencyToTakeReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_city_id;
        break;
      }

      // optional uint32 city_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_award_idx;
        break;
      }

      // optional uint32 award_idx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_award_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &award_idx_)));
          set_has_award_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_UseCurrencyToTakeReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional uint32 city_id = 2;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->city_id(), output);
  }

  // optional uint32 award_idx = 3;
  if (has_award_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->award_idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_UseCurrencyToTakeReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional uint32 city_id = 2;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->city_id(), target);
  }

  // optional uint32 award_idx = 3;
  if (has_award_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->award_idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_UseCurrencyToTakeReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 city_id = 2;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

    // optional uint32 award_idx = 3;
    if (has_award_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->award_idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_UseCurrencyToTakeReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_UseCurrencyToTakeReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_UseCurrencyToTakeReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_UseCurrencyToTakeReward::MergeFrom(const C2GS_UseCurrencyToTakeReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
    if (from.has_award_idx()) {
      set_award_idx(from.award_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_UseCurrencyToTakeReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_UseCurrencyToTakeReward::CopyFrom(const C2GS_UseCurrencyToTakeReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_UseCurrencyToTakeReward::IsInitialized() const {

  return true;
}

void C2GS_UseCurrencyToTakeReward::Swap(C2GS_UseCurrencyToTakeReward* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(city_id_, other->city_id_);
    std::swap(award_idx_, other->award_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_UseCurrencyToTakeReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_UseCurrencyToTakeReward_descriptor_;
  metadata.reflection = C2GS_UseCurrencyToTakeReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_UseCurrencyToTakeRewardRsp::kResultFieldNumber;
#endif  // !_MSC_VER

GS2C_UseCurrencyToTakeRewardRsp::GS2C_UseCurrencyToTakeRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_UseCurrencyToTakeRewardRsp::InitAsDefaultInstance() {
}

GS2C_UseCurrencyToTakeRewardRsp::GS2C_UseCurrencyToTakeRewardRsp(const GS2C_UseCurrencyToTakeRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_UseCurrencyToTakeRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_UseCurrencyToTakeRewardRsp::~GS2C_UseCurrencyToTakeRewardRsp() {
  SharedDtor();
}

void GS2C_UseCurrencyToTakeRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_UseCurrencyToTakeRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_UseCurrencyToTakeRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_UseCurrencyToTakeRewardRsp_descriptor_;
}

const GS2C_UseCurrencyToTakeRewardRsp& GS2C_UseCurrencyToTakeRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

GS2C_UseCurrencyToTakeRewardRsp* GS2C_UseCurrencyToTakeRewardRsp::default_instance_ = NULL;

GS2C_UseCurrencyToTakeRewardRsp* GS2C_UseCurrencyToTakeRewardRsp::New() const {
  return new GS2C_UseCurrencyToTakeRewardRsp;
}

void GS2C_UseCurrencyToTakeRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_UseCurrencyToTakeRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_UseCurrencyToTakeRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_UseCurrencyToTakeRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_UseCurrencyToTakeRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_UseCurrencyToTakeRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_UseCurrencyToTakeRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_UseCurrencyToTakeRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_UseCurrencyToTakeRewardRsp::MergeFrom(const GS2C_UseCurrencyToTakeRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_UseCurrencyToTakeRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_UseCurrencyToTakeRewardRsp::CopyFrom(const GS2C_UseCurrencyToTakeRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_UseCurrencyToTakeRewardRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_UseCurrencyToTakeRewardRsp::Swap(GS2C_UseCurrencyToTakeRewardRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_UseCurrencyToTakeRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_UseCurrencyToTakeRewardRsp_descriptor_;
  metadata.reflection = GS2C_UseCurrencyToTakeRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Celebrity_Take_Reward::kIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Celebrity_Take_Reward::C2GS_Celebrity_Take_Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Celebrity_Take_Reward::InitAsDefaultInstance() {
}

C2GS_Celebrity_Take_Reward::C2GS_Celebrity_Take_Reward(const C2GS_Celebrity_Take_Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Celebrity_Take_Reward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Celebrity_Take_Reward::~C2GS_Celebrity_Take_Reward() {
  SharedDtor();
}

void C2GS_Celebrity_Take_Reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Celebrity_Take_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Celebrity_Take_Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Celebrity_Take_Reward_descriptor_;
}

const C2GS_Celebrity_Take_Reward& C2GS_Celebrity_Take_Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

C2GS_Celebrity_Take_Reward* C2GS_Celebrity_Take_Reward::default_instance_ = NULL;

C2GS_Celebrity_Take_Reward* C2GS_Celebrity_Take_Reward::New() const {
  return new C2GS_Celebrity_Take_Reward;
}

void C2GS_Celebrity_Take_Reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Celebrity_Take_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Celebrity_Take_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Celebrity_Take_Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Celebrity_Take_Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Celebrity_Take_Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Celebrity_Take_Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Celebrity_Take_Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Celebrity_Take_Reward::MergeFrom(const C2GS_Celebrity_Take_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Celebrity_Take_Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Celebrity_Take_Reward::CopyFrom(const C2GS_Celebrity_Take_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Celebrity_Take_Reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Celebrity_Take_Reward::Swap(C2GS_Celebrity_Take_Reward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Celebrity_Take_Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Celebrity_Take_Reward_descriptor_;
  metadata.reflection = C2GS_Celebrity_Take_Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Celebrity_Take_Reward_Rsp::kIdFieldNumber;
const int GS2C_Celebrity_Take_Reward_Rsp::kRetFieldNumber;
const int GS2C_Celebrity_Take_Reward_Rsp::kRewardFieldNumber;
#endif  // !_MSC_VER

GS2C_Celebrity_Take_Reward_Rsp::GS2C_Celebrity_Take_Reward_Rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Celebrity_Take_Reward_Rsp::InitAsDefaultInstance() {
}

GS2C_Celebrity_Take_Reward_Rsp::GS2C_Celebrity_Take_Reward_Rsp(const GS2C_Celebrity_Take_Reward_Rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Celebrity_Take_Reward_Rsp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Celebrity_Take_Reward_Rsp::~GS2C_Celebrity_Take_Reward_Rsp() {
  SharedDtor();
}

void GS2C_Celebrity_Take_Reward_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Celebrity_Take_Reward_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Celebrity_Take_Reward_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Celebrity_Take_Reward_Rsp_descriptor_;
}

const GS2C_Celebrity_Take_Reward_Rsp& GS2C_Celebrity_Take_Reward_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

GS2C_Celebrity_Take_Reward_Rsp* GS2C_Celebrity_Take_Reward_Rsp::default_instance_ = NULL;

GS2C_Celebrity_Take_Reward_Rsp* GS2C_Celebrity_Take_Reward_Rsp::New() const {
  return new GS2C_Celebrity_Take_Reward_Rsp;
}

void GS2C_Celebrity_Take_Reward_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    ret_ = 0u;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Celebrity_Take_Reward_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // repeated .pb.StReward reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Celebrity_Take_Reward_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // repeated .pb.StReward reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Celebrity_Take_Reward_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // repeated .pb.StReward reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Celebrity_Take_Reward_Rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated .pb.StReward reward = 3;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Celebrity_Take_Reward_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Celebrity_Take_Reward_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Celebrity_Take_Reward_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Celebrity_Take_Reward_Rsp::MergeFrom(const GS2C_Celebrity_Take_Reward_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Celebrity_Take_Reward_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Celebrity_Take_Reward_Rsp::CopyFrom(const GS2C_Celebrity_Take_Reward_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Celebrity_Take_Reward_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < reward_size(); i++) {
    if (!this->reward(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Celebrity_Take_Reward_Rsp::Swap(GS2C_Celebrity_Take_Reward_Rsp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ret_, other->ret_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Celebrity_Take_Reward_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Celebrity_Take_Reward_Rsp_descriptor_;
  metadata.reflection = GS2C_Celebrity_Take_Reward_Rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_ActivityBuyItem::kIdFieldNumber;
#endif  // !_MSC_VER

C2GS_ActivityBuyItem::C2GS_ActivityBuyItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_ActivityBuyItem::InitAsDefaultInstance() {
}

C2GS_ActivityBuyItem::C2GS_ActivityBuyItem(const C2GS_ActivityBuyItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_ActivityBuyItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_ActivityBuyItem::~C2GS_ActivityBuyItem() {
  SharedDtor();
}

void C2GS_ActivityBuyItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_ActivityBuyItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_ActivityBuyItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_ActivityBuyItem_descriptor_;
}

const C2GS_ActivityBuyItem& C2GS_ActivityBuyItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

C2GS_ActivityBuyItem* C2GS_ActivityBuyItem::default_instance_ = NULL;

C2GS_ActivityBuyItem* C2GS_ActivityBuyItem::New() const {
  return new C2GS_ActivityBuyItem;
}

void C2GS_ActivityBuyItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_ActivityBuyItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_ActivityBuyItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_ActivityBuyItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_ActivityBuyItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_ActivityBuyItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_ActivityBuyItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_ActivityBuyItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_ActivityBuyItem::MergeFrom(const C2GS_ActivityBuyItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_ActivityBuyItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_ActivityBuyItem::CopyFrom(const C2GS_ActivityBuyItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_ActivityBuyItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_ActivityBuyItem::Swap(C2GS_ActivityBuyItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_ActivityBuyItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_ActivityBuyItem_descriptor_;
  metadata.reflection = C2GS_ActivityBuyItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_ActivityBuyItemRsp::kResultFieldNumber;
#endif  // !_MSC_VER

GS2C_ActivityBuyItemRsp::GS2C_ActivityBuyItemRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_ActivityBuyItemRsp::InitAsDefaultInstance() {
}

GS2C_ActivityBuyItemRsp::GS2C_ActivityBuyItemRsp(const GS2C_ActivityBuyItemRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_ActivityBuyItemRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_ActivityBuyItemRsp::~GS2C_ActivityBuyItemRsp() {
  SharedDtor();
}

void GS2C_ActivityBuyItemRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_ActivityBuyItemRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_ActivityBuyItemRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_ActivityBuyItemRsp_descriptor_;
}

const GS2C_ActivityBuyItemRsp& GS2C_ActivityBuyItemRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

GS2C_ActivityBuyItemRsp* GS2C_ActivityBuyItemRsp::default_instance_ = NULL;

GS2C_ActivityBuyItemRsp* GS2C_ActivityBuyItemRsp::New() const {
  return new GS2C_ActivityBuyItemRsp;
}

void GS2C_ActivityBuyItemRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_ActivityBuyItemRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_ActivityBuyItemRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_ActivityBuyItemRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_ActivityBuyItemRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_ActivityBuyItemRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_ActivityBuyItemRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_ActivityBuyItemRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_ActivityBuyItemRsp::MergeFrom(const GS2C_ActivityBuyItemRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_ActivityBuyItemRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_ActivityBuyItemRsp::CopyFrom(const GS2C_ActivityBuyItemRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_ActivityBuyItemRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_ActivityBuyItemRsp::Swap(GS2C_ActivityBuyItemRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_ActivityBuyItemRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_ActivityBuyItemRsp_descriptor_;
  metadata.reflection = GS2C_ActivityBuyItemRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LimitedTimeShopInfo::kCostPriceFieldNumber;
const int LimitedTimeShopInfo::kCostDiscountFieldNumber;
const int LimitedTimeShopInfo::kConditionFieldNumber;
const int LimitedTimeShopInfo::kRewardFieldNumber;
const int LimitedTimeShopInfo::kIsHasDiscountFieldNumber;
const int LimitedTimeShopInfo::kTableIdFieldNumber;
#endif  // !_MSC_VER

LimitedTimeShopInfo::LimitedTimeShopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LimitedTimeShopInfo::InitAsDefaultInstance() {
  reward_ = const_cast< ::pb::StReward*>(&::pb::StReward::default_instance());
}

LimitedTimeShopInfo::LimitedTimeShopInfo(const LimitedTimeShopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LimitedTimeShopInfo::SharedCtor() {
  _cached_size_ = 0;
  cost_price_ = 0u;
  cost_discount_ = 0u;
  condition_ = 0u;
  reward_ = NULL;
  is_has_discount_ = 0u;
  table_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LimitedTimeShopInfo::~LimitedTimeShopInfo() {
  SharedDtor();
}

void LimitedTimeShopInfo::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void LimitedTimeShopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LimitedTimeShopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LimitedTimeShopInfo_descriptor_;
}

const LimitedTimeShopInfo& LimitedTimeShopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

LimitedTimeShopInfo* LimitedTimeShopInfo::default_instance_ = NULL;

LimitedTimeShopInfo* LimitedTimeShopInfo::New() const {
  return new LimitedTimeShopInfo;
}

void LimitedTimeShopInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cost_price_ = 0u;
    cost_discount_ = 0u;
    condition_ = 0u;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::pb::StReward::Clear();
    }
    is_has_discount_ = 0u;
    table_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LimitedTimeShopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cost_price = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_price_)));
          set_has_cost_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cost_discount;
        break;
      }

      // optional uint32 cost_discount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_discount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_discount_)));
          set_has_cost_discount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_condition;
        break;
      }

      // optional uint32 condition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &condition_)));
          set_has_condition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reward;
        break;
      }

      // optional .pb.StReward reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_has_discount;
        break;
      }

      // optional uint32 is_has_discount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_has_discount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_has_discount_)));
          set_has_is_has_discount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_table_id;
        break;
      }

      // optional uint64 table_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LimitedTimeShopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cost_price = 1;
  if (has_cost_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cost_price(), output);
  }

  // optional uint32 cost_discount = 2;
  if (has_cost_discount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cost_discount(), output);
  }

  // optional uint32 condition = 3;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->condition(), output);
  }

  // optional .pb.StReward reward = 4;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reward(), output);
  }

  // optional uint32 is_has_discount = 5;
  if (has_is_has_discount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->is_has_discount(), output);
  }

  // optional uint64 table_id = 6;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->table_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LimitedTimeShopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cost_price = 1;
  if (has_cost_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cost_price(), target);
  }

  // optional uint32 cost_discount = 2;
  if (has_cost_discount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cost_discount(), target);
  }

  // optional uint32 condition = 3;
  if (has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->condition(), target);
  }

  // optional .pb.StReward reward = 4;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reward(), target);
  }

  // optional uint32 is_has_discount = 5;
  if (has_is_has_discount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->is_has_discount(), target);
  }

  // optional uint64 table_id = 6;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->table_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LimitedTimeShopInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cost_price = 1;
    if (has_cost_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_price());
    }

    // optional uint32 cost_discount = 2;
    if (has_cost_discount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_discount());
    }

    // optional uint32 condition = 3;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->condition());
    }

    // optional .pb.StReward reward = 4;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

    // optional uint32 is_has_discount = 5;
    if (has_is_has_discount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_has_discount());
    }

    // optional uint64 table_id = 6;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LimitedTimeShopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LimitedTimeShopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LimitedTimeShopInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LimitedTimeShopInfo::MergeFrom(const LimitedTimeShopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cost_price()) {
      set_cost_price(from.cost_price());
    }
    if (from.has_cost_discount()) {
      set_cost_discount(from.cost_discount());
    }
    if (from.has_condition()) {
      set_condition(from.condition());
    }
    if (from.has_reward()) {
      mutable_reward()->::pb::StReward::MergeFrom(from.reward());
    }
    if (from.has_is_has_discount()) {
      set_is_has_discount(from.is_has_discount());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LimitedTimeShopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LimitedTimeShopInfo::CopyFrom(const LimitedTimeShopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitedTimeShopInfo::IsInitialized() const {

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void LimitedTimeShopInfo::Swap(LimitedTimeShopInfo* other) {
  if (other != this) {
    std::swap(cost_price_, other->cost_price_);
    std::swap(cost_discount_, other->cost_discount_);
    std::swap(condition_, other->condition_);
    std::swap(reward_, other->reward_);
    std::swap(is_has_discount_, other->is_has_discount_);
    std::swap(table_id_, other->table_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LimitedTimeShopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LimitedTimeShopInfo_descriptor_;
  metadata.reflection = LimitedTimeShopInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_LimitedTimeShopInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

GS2C_LimitedTimeShopInfo::GS2C_LimitedTimeShopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_LimitedTimeShopInfo::InitAsDefaultInstance() {
}

GS2C_LimitedTimeShopInfo::GS2C_LimitedTimeShopInfo(const GS2C_LimitedTimeShopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_LimitedTimeShopInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_LimitedTimeShopInfo::~GS2C_LimitedTimeShopInfo() {
  SharedDtor();
}

void GS2C_LimitedTimeShopInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_LimitedTimeShopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_LimitedTimeShopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_LimitedTimeShopInfo_descriptor_;
}

const GS2C_LimitedTimeShopInfo& GS2C_LimitedTimeShopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

GS2C_LimitedTimeShopInfo* GS2C_LimitedTimeShopInfo::default_instance_ = NULL;

GS2C_LimitedTimeShopInfo* GS2C_LimitedTimeShopInfo::New() const {
  return new GS2C_LimitedTimeShopInfo;
}

void GS2C_LimitedTimeShopInfo::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_LimitedTimeShopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.LimitedTimeShopInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_LimitedTimeShopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.LimitedTimeShopInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_LimitedTimeShopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.LimitedTimeShopInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_LimitedTimeShopInfo::ByteSize() const {
  int total_size = 0;

  // repeated .pb.LimitedTimeShopInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_LimitedTimeShopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_LimitedTimeShopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_LimitedTimeShopInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_LimitedTimeShopInfo::MergeFrom(const GS2C_LimitedTimeShopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_LimitedTimeShopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_LimitedTimeShopInfo::CopyFrom(const GS2C_LimitedTimeShopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_LimitedTimeShopInfo::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_LimitedTimeShopInfo::Swap(GS2C_LimitedTimeShopInfo* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_LimitedTimeShopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_LimitedTimeShopInfo_descriptor_;
  metadata.reflection = GS2C_LimitedTimeShopInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Open_Hero_Reward_Box::kCiritalFieldNumber;
#endif  // !_MSC_VER

C2GS_Open_Hero_Reward_Box::C2GS_Open_Hero_Reward_Box()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Open_Hero_Reward_Box::InitAsDefaultInstance() {
}

C2GS_Open_Hero_Reward_Box::C2GS_Open_Hero_Reward_Box(const C2GS_Open_Hero_Reward_Box& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Open_Hero_Reward_Box::SharedCtor() {
  _cached_size_ = 0;
  cirital_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Open_Hero_Reward_Box::~C2GS_Open_Hero_Reward_Box() {
  SharedDtor();
}

void C2GS_Open_Hero_Reward_Box::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Open_Hero_Reward_Box::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Open_Hero_Reward_Box::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Open_Hero_Reward_Box_descriptor_;
}

const C2GS_Open_Hero_Reward_Box& C2GS_Open_Hero_Reward_Box::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

C2GS_Open_Hero_Reward_Box* C2GS_Open_Hero_Reward_Box::default_instance_ = NULL;

C2GS_Open_Hero_Reward_Box* C2GS_Open_Hero_Reward_Box::New() const {
  return new C2GS_Open_Hero_Reward_Box;
}

void C2GS_Open_Hero_Reward_Box::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cirital_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Open_Hero_Reward_Box::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cirital = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cirital_)));
          set_has_cirital();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Open_Hero_Reward_Box::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cirital = 1;
  if (has_cirital()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cirital(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Open_Hero_Reward_Box::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cirital = 1;
  if (has_cirital()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cirital(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Open_Hero_Reward_Box::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cirital = 1;
    if (has_cirital()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cirital());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Open_Hero_Reward_Box::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Open_Hero_Reward_Box* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Open_Hero_Reward_Box*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Open_Hero_Reward_Box::MergeFrom(const C2GS_Open_Hero_Reward_Box& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cirital()) {
      set_cirital(from.cirital());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Open_Hero_Reward_Box::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Open_Hero_Reward_Box::CopyFrom(const C2GS_Open_Hero_Reward_Box& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Open_Hero_Reward_Box::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Open_Hero_Reward_Box::Swap(C2GS_Open_Hero_Reward_Box* other) {
  if (other != this) {
    std::swap(cirital_, other->cirital_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Open_Hero_Reward_Box::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Open_Hero_Reward_Box_descriptor_;
  metadata.reflection = C2GS_Open_Hero_Reward_Box_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Open_Hero_Reward_Box_Rsp::kRewradFieldNumber;
const int GS2C_Open_Hero_Reward_Box_Rsp::kRetFieldNumber;
#endif  // !_MSC_VER

GS2C_Open_Hero_Reward_Box_Rsp::GS2C_Open_Hero_Reward_Box_Rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Open_Hero_Reward_Box_Rsp::InitAsDefaultInstance() {
}

GS2C_Open_Hero_Reward_Box_Rsp::GS2C_Open_Hero_Reward_Box_Rsp(const GS2C_Open_Hero_Reward_Box_Rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Open_Hero_Reward_Box_Rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Open_Hero_Reward_Box_Rsp::~GS2C_Open_Hero_Reward_Box_Rsp() {
  SharedDtor();
}

void GS2C_Open_Hero_Reward_Box_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Open_Hero_Reward_Box_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Open_Hero_Reward_Box_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Open_Hero_Reward_Box_Rsp_descriptor_;
}

const GS2C_Open_Hero_Reward_Box_Rsp& GS2C_Open_Hero_Reward_Box_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

GS2C_Open_Hero_Reward_Box_Rsp* GS2C_Open_Hero_Reward_Box_Rsp::default_instance_ = NULL;

GS2C_Open_Hero_Reward_Box_Rsp* GS2C_Open_Hero_Reward_Box_Rsp::New() const {
  return new GS2C_Open_Hero_Reward_Box_Rsp;
}

void GS2C_Open_Hero_Reward_Box_Rsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    ret_ = 0u;
  }
  rewrad_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Open_Hero_Reward_Box_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.StReward rewrad = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewrad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewrad()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rewrad;
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Open_Hero_Reward_Box_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.StReward rewrad = 1;
  for (int i = 0; i < this->rewrad_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewrad(i), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Open_Hero_Reward_Box_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.StReward rewrad = 1;
  for (int i = 0; i < this->rewrad_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewrad(i), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Open_Hero_Reward_Box_Rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated .pb.StReward rewrad = 1;
  total_size += 1 * this->rewrad_size();
  for (int i = 0; i < this->rewrad_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewrad(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Open_Hero_Reward_Box_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Open_Hero_Reward_Box_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Open_Hero_Reward_Box_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Open_Hero_Reward_Box_Rsp::MergeFrom(const GS2C_Open_Hero_Reward_Box_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewrad_.MergeFrom(from.rewrad_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Open_Hero_Reward_Box_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Open_Hero_Reward_Box_Rsp::CopyFrom(const GS2C_Open_Hero_Reward_Box_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Open_Hero_Reward_Box_Rsp::IsInitialized() const {

  for (int i = 0; i < rewrad_size(); i++) {
    if (!this->rewrad(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Open_Hero_Reward_Box_Rsp::Swap(GS2C_Open_Hero_Reward_Box_Rsp* other) {
  if (other != this) {
    rewrad_.Swap(&other->rewrad_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Open_Hero_Reward_Box_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Open_Hero_Reward_Box_Rsp_descriptor_;
  metadata.reflection = GS2C_Open_Hero_Reward_Box_Rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Reward_Hero::kTroopsIdFieldNumber;
const int C2GS_Reward_Hero::kCharIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Reward_Hero::C2GS_Reward_Hero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Reward_Hero::InitAsDefaultInstance() {
}

C2GS_Reward_Hero::C2GS_Reward_Hero(const C2GS_Reward_Hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Reward_Hero::SharedCtor() {
  _cached_size_ = 0;
  troops_id_ = 0u;
  char_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Reward_Hero::~C2GS_Reward_Hero() {
  SharedDtor();
}

void C2GS_Reward_Hero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Reward_Hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Reward_Hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Reward_Hero_descriptor_;
}

const C2GS_Reward_Hero& C2GS_Reward_Hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

C2GS_Reward_Hero* C2GS_Reward_Hero::default_instance_ = NULL;

C2GS_Reward_Hero* C2GS_Reward_Hero::New() const {
  return new C2GS_Reward_Hero;
}

void C2GS_Reward_Hero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    troops_id_ = 0u;
    char_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Reward_Hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 troops_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &troops_id_)));
          set_has_troops_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_char_id;
        break;
      }

      // optional uint32 char_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_char_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Reward_Hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 troops_id = 1;
  if (has_troops_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->troops_id(), output);
  }

  // optional uint32 char_id = 2;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->char_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Reward_Hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 troops_id = 1;
  if (has_troops_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->troops_id(), target);
  }

  // optional uint32 char_id = 2;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->char_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Reward_Hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 troops_id = 1;
    if (has_troops_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->troops_id());
    }

    // optional uint32 char_id = 2;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Reward_Hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Reward_Hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Reward_Hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Reward_Hero::MergeFrom(const C2GS_Reward_Hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_troops_id()) {
      set_troops_id(from.troops_id());
    }
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Reward_Hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Reward_Hero::CopyFrom(const C2GS_Reward_Hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Reward_Hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Reward_Hero::Swap(C2GS_Reward_Hero* other) {
  if (other != this) {
    std::swap(troops_id_, other->troops_id_);
    std::swap(char_id_, other->char_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Reward_Hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Reward_Hero_descriptor_;
  metadata.reflection = C2GS_Reward_Hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Reward_Hero_Info::kCharIdFieldNumber;
const int GS2C_Reward_Hero_Info::kIsFirstRewardFieldNumber;
#endif  // !_MSC_VER

GS2C_Reward_Hero_Info::GS2C_Reward_Hero_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Reward_Hero_Info::InitAsDefaultInstance() {
}

GS2C_Reward_Hero_Info::GS2C_Reward_Hero_Info(const GS2C_Reward_Hero_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Reward_Hero_Info::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  is_first_reward_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Reward_Hero_Info::~GS2C_Reward_Hero_Info() {
  SharedDtor();
}

void GS2C_Reward_Hero_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Reward_Hero_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Reward_Hero_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Reward_Hero_Info_descriptor_;
}

const GS2C_Reward_Hero_Info& GS2C_Reward_Hero_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

GS2C_Reward_Hero_Info* GS2C_Reward_Hero_Info::default_instance_ = NULL;

GS2C_Reward_Hero_Info* GS2C_Reward_Hero_Info::New() const {
  return new GS2C_Reward_Hero_Info;
}

void GS2C_Reward_Hero_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    is_first_reward_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Reward_Hero_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_first_reward;
        break;
      }

      // optional bool is_first_reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_first_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_first_reward_)));
          set_has_is_first_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Reward_Hero_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional bool is_first_reward = 2;
  if (has_is_first_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_first_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Reward_Hero_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional bool is_first_reward = 2;
  if (has_is_first_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_first_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Reward_Hero_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional bool is_first_reward = 2;
    if (has_is_first_reward()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Reward_Hero_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Reward_Hero_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Reward_Hero_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Reward_Hero_Info::MergeFrom(const GS2C_Reward_Hero_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_is_first_reward()) {
      set_is_first_reward(from.is_first_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Reward_Hero_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Reward_Hero_Info::CopyFrom(const GS2C_Reward_Hero_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Reward_Hero_Info::IsInitialized() const {

  return true;
}

void GS2C_Reward_Hero_Info::Swap(GS2C_Reward_Hero_Info* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(is_first_reward_, other->is_first_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Reward_Hero_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Reward_Hero_Info_descriptor_;
  metadata.reflection = GS2C_Reward_Hero_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Reward_Hero_Rsp::kRetFieldNumber;
const int GS2C_Reward_Hero_Rsp::kCriticalFieldNumber;
const int GS2C_Reward_Hero_Rsp::kCharExpFieldNumber;
const int GS2C_Reward_Hero_Rsp::kCharLevelFieldNumber;
const int GS2C_Reward_Hero_Rsp::kCharCurXpMaxFieldNumber;
const int GS2C_Reward_Hero_Rsp::kNextCharInfoFieldNumber;
const int GS2C_Reward_Hero_Rsp::kCharIdFieldNumber;
#endif  // !_MSC_VER

GS2C_Reward_Hero_Rsp::GS2C_Reward_Hero_Rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Reward_Hero_Rsp::InitAsDefaultInstance() {
  next_char_info_ = const_cast< ::pb::GS2C_Reward_Hero_Info*>(&::pb::GS2C_Reward_Hero_Info::default_instance());
}

GS2C_Reward_Hero_Rsp::GS2C_Reward_Hero_Rsp(const GS2C_Reward_Hero_Rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Reward_Hero_Rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  critical_ = 0u;
  char_exp_ = 0u;
  char_level_ = 0u;
  char_cur_xp_max_ = 0u;
  next_char_info_ = NULL;
  char_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Reward_Hero_Rsp::~GS2C_Reward_Hero_Rsp() {
  SharedDtor();
}

void GS2C_Reward_Hero_Rsp::SharedDtor() {
  if (this != default_instance_) {
    delete next_char_info_;
  }
}

void GS2C_Reward_Hero_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Reward_Hero_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Reward_Hero_Rsp_descriptor_;
}

const GS2C_Reward_Hero_Rsp& GS2C_Reward_Hero_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

GS2C_Reward_Hero_Rsp* GS2C_Reward_Hero_Rsp::default_instance_ = NULL;

GS2C_Reward_Hero_Rsp* GS2C_Reward_Hero_Rsp::New() const {
  return new GS2C_Reward_Hero_Rsp;
}

void GS2C_Reward_Hero_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    critical_ = 0u;
    char_exp_ = 0u;
    char_level_ = 0u;
    char_cur_xp_max_ = 0u;
    if (has_next_char_info()) {
      if (next_char_info_ != NULL) next_char_info_->::pb::GS2C_Reward_Hero_Info::Clear();
    }
    char_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Reward_Hero_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_critical;
        break;
      }

      // optional uint32 critical = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critical_)));
          set_has_critical();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_char_exp;
        break;
      }

      // optional uint32 char_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_char_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_exp_)));
          set_has_char_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_char_level;
        break;
      }

      // optional uint32 char_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_char_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_level_)));
          set_has_char_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_char_cur_xp_max;
        break;
      }

      // optional uint32 char_cur_xp_max = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_char_cur_xp_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_cur_xp_max_)));
          set_has_char_cur_xp_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_next_char_info;
        break;
      }

      // optional .pb.GS2C_Reward_Hero_Info next_char_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_next_char_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_next_char_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_char_id;
        break;
      }

      // optional uint32 char_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_char_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Reward_Hero_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // optional uint32 critical = 2;
  if (has_critical()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->critical(), output);
  }

  // optional uint32 char_exp = 3;
  if (has_char_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->char_exp(), output);
  }

  // optional uint32 char_level = 4;
  if (has_char_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->char_level(), output);
  }

  // optional uint32 char_cur_xp_max = 5;
  if (has_char_cur_xp_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->char_cur_xp_max(), output);
  }

  // optional .pb.GS2C_Reward_Hero_Info next_char_info = 6;
  if (has_next_char_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->next_char_info(), output);
  }

  // optional uint32 char_id = 7;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->char_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Reward_Hero_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // optional uint32 critical = 2;
  if (has_critical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->critical(), target);
  }

  // optional uint32 char_exp = 3;
  if (has_char_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->char_exp(), target);
  }

  // optional uint32 char_level = 4;
  if (has_char_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->char_level(), target);
  }

  // optional uint32 char_cur_xp_max = 5;
  if (has_char_cur_xp_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->char_cur_xp_max(), target);
  }

  // optional .pb.GS2C_Reward_Hero_Info next_char_info = 6;
  if (has_next_char_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->next_char_info(), target);
  }

  // optional uint32 char_id = 7;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->char_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Reward_Hero_Rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 critical = 2;
    if (has_critical()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critical());
    }

    // optional uint32 char_exp = 3;
    if (has_char_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_exp());
    }

    // optional uint32 char_level = 4;
    if (has_char_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_level());
    }

    // optional uint32 char_cur_xp_max = 5;
    if (has_char_cur_xp_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_cur_xp_max());
    }

    // optional .pb.GS2C_Reward_Hero_Info next_char_info = 6;
    if (has_next_char_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->next_char_info());
    }

    // optional uint32 char_id = 7;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Reward_Hero_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Reward_Hero_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Reward_Hero_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Reward_Hero_Rsp::MergeFrom(const GS2C_Reward_Hero_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_critical()) {
      set_critical(from.critical());
    }
    if (from.has_char_exp()) {
      set_char_exp(from.char_exp());
    }
    if (from.has_char_level()) {
      set_char_level(from.char_level());
    }
    if (from.has_char_cur_xp_max()) {
      set_char_cur_xp_max(from.char_cur_xp_max());
    }
    if (from.has_next_char_info()) {
      mutable_next_char_info()->::pb::GS2C_Reward_Hero_Info::MergeFrom(from.next_char_info());
    }
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Reward_Hero_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Reward_Hero_Rsp::CopyFrom(const GS2C_Reward_Hero_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Reward_Hero_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Reward_Hero_Rsp::Swap(GS2C_Reward_Hero_Rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(critical_, other->critical_);
    std::swap(char_exp_, other->char_exp_);
    std::swap(char_level_, other->char_level_);
    std::swap(char_cur_xp_max_, other->char_cur_xp_max_);
    std::swap(next_char_info_, other->next_char_info_);
    std::swap(char_id_, other->char_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Reward_Hero_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Reward_Hero_Rsp_descriptor_;
  metadata.reflection = GS2C_Reward_Hero_Rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_Hero_Reward_info::kCharIdFieldNumber;
const int GxDB_Hero_Reward_info::kHasFirstRewardFieldNumber;
const int GxDB_Hero_Reward_info::kOperateTypeFieldNumber;
#endif  // !_MSC_VER

GxDB_Hero_Reward_info::GxDB_Hero_Reward_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_Hero_Reward_info::InitAsDefaultInstance() {
}

GxDB_Hero_Reward_info::GxDB_Hero_Reward_info(const GxDB_Hero_Reward_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_Hero_Reward_info::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  has_first_reward_ = false;
  operate_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_Hero_Reward_info::~GxDB_Hero_Reward_info() {
  SharedDtor();
}

void GxDB_Hero_Reward_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_Hero_Reward_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_Hero_Reward_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_Hero_Reward_info_descriptor_;
}

const GxDB_Hero_Reward_info& GxDB_Hero_Reward_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

GxDB_Hero_Reward_info* GxDB_Hero_Reward_info::default_instance_ = NULL;

GxDB_Hero_Reward_info* GxDB_Hero_Reward_info::New() const {
  return new GxDB_Hero_Reward_info;
}

void GxDB_Hero_Reward_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    has_first_reward_ = false;
    operate_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_Hero_Reward_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_has_first_reward;
        break;
      }

      // optional bool has_first_reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_first_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_first_reward_)));
          set_has_has_first_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_operate_type;
        break;
      }

      // optional uint32 operate_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_type_)));
          set_has_operate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_Hero_Reward_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional bool has_first_reward = 2;
  if (has_has_first_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_first_reward(), output);
  }

  // optional uint32 operate_type = 3;
  if (has_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->operate_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_Hero_Reward_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional bool has_first_reward = 2;
  if (has_has_first_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->has_first_reward(), target);
  }

  // optional uint32 operate_type = 3;
  if (has_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->operate_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_Hero_Reward_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional bool has_first_reward = 2;
    if (has_has_first_reward()) {
      total_size += 1 + 1;
    }

    // optional uint32 operate_type = 3;
    if (has_operate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_Hero_Reward_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_Hero_Reward_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_Hero_Reward_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_Hero_Reward_info::MergeFrom(const GxDB_Hero_Reward_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_has_first_reward()) {
      set_has_first_reward(from.has_first_reward());
    }
    if (from.has_operate_type()) {
      set_operate_type(from.operate_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_Hero_Reward_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_Hero_Reward_info::CopyFrom(const GxDB_Hero_Reward_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_Hero_Reward_info::IsInitialized() const {

  return true;
}

void GxDB_Hero_Reward_info::Swap(GxDB_Hero_Reward_info* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(has_first_reward_, other->has_first_reward_);
    std::swap(operate_type_, other->operate_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_Hero_Reward_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_Hero_Reward_info_descriptor_;
  metadata.reflection = GxDB_Hero_Reward_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_Hero_Reward::kInfoFieldNumber;
#endif  // !_MSC_VER

GxDB_Hero_Reward::GxDB_Hero_Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_Hero_Reward::InitAsDefaultInstance() {
}

GxDB_Hero_Reward::GxDB_Hero_Reward(const GxDB_Hero_Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_Hero_Reward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_Hero_Reward::~GxDB_Hero_Reward() {
  SharedDtor();
}

void GxDB_Hero_Reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_Hero_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_Hero_Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_Hero_Reward_descriptor_;
}

const GxDB_Hero_Reward& GxDB_Hero_Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

GxDB_Hero_Reward* GxDB_Hero_Reward::default_instance_ = NULL;

GxDB_Hero_Reward* GxDB_Hero_Reward::New() const {
  return new GxDB_Hero_Reward;
}

void GxDB_Hero_Reward::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_Hero_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GxDB_Hero_Reward_info info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_Hero_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GxDB_Hero_Reward_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_Hero_Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GxDB_Hero_Reward_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_Hero_Reward::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GxDB_Hero_Reward_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_Hero_Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_Hero_Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_Hero_Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_Hero_Reward::MergeFrom(const GxDB_Hero_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_Hero_Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_Hero_Reward::CopyFrom(const GxDB_Hero_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_Hero_Reward::IsInitialized() const {

  return true;
}

void GxDB_Hero_Reward::Swap(GxDB_Hero_Reward* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_Hero_Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_Hero_Reward_descriptor_;
  metadata.reflection = GxDB_Hero_Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_Hero_Reward_delete::kOperateTypeFieldNumber;
#endif  // !_MSC_VER

GxDB_Hero_Reward_delete::GxDB_Hero_Reward_delete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_Hero_Reward_delete::InitAsDefaultInstance() {
}

GxDB_Hero_Reward_delete::GxDB_Hero_Reward_delete(const GxDB_Hero_Reward_delete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_Hero_Reward_delete::SharedCtor() {
  _cached_size_ = 0;
  operate_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_Hero_Reward_delete::~GxDB_Hero_Reward_delete() {
  SharedDtor();
}

void GxDB_Hero_Reward_delete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_Hero_Reward_delete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_Hero_Reward_delete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_Hero_Reward_delete_descriptor_;
}

const GxDB_Hero_Reward_delete& GxDB_Hero_Reward_delete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

GxDB_Hero_Reward_delete* GxDB_Hero_Reward_delete::default_instance_ = NULL;

GxDB_Hero_Reward_delete* GxDB_Hero_Reward_delete::New() const {
  return new GxDB_Hero_Reward_delete;
}

void GxDB_Hero_Reward_delete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    operate_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_Hero_Reward_delete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 operate_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_type_)));
          set_has_operate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_Hero_Reward_delete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 operate_type = 1;
  if (has_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->operate_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_Hero_Reward_delete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 operate_type = 1;
  if (has_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->operate_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_Hero_Reward_delete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 operate_type = 1;
    if (has_operate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_Hero_Reward_delete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_Hero_Reward_delete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_Hero_Reward_delete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_Hero_Reward_delete::MergeFrom(const GxDB_Hero_Reward_delete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate_type()) {
      set_operate_type(from.operate_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_Hero_Reward_delete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_Hero_Reward_delete::CopyFrom(const GxDB_Hero_Reward_delete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_Hero_Reward_delete::IsInitialized() const {

  return true;
}

void GxDB_Hero_Reward_delete::Swap(GxDB_Hero_Reward_delete* other) {
  if (other != this) {
    std::swap(operate_type_, other->operate_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_Hero_Reward_delete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_Hero_Reward_delete_descriptor_;
  metadata.reflection = GxDB_Hero_Reward_delete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Recharge_rebate::kIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Recharge_rebate::C2GS_Recharge_rebate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Recharge_rebate::InitAsDefaultInstance() {
}

C2GS_Recharge_rebate::C2GS_Recharge_rebate(const C2GS_Recharge_rebate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Recharge_rebate::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Recharge_rebate::~C2GS_Recharge_rebate() {
  SharedDtor();
}

void C2GS_Recharge_rebate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Recharge_rebate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Recharge_rebate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Recharge_rebate_descriptor_;
}

const C2GS_Recharge_rebate& C2GS_Recharge_rebate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

C2GS_Recharge_rebate* C2GS_Recharge_rebate::default_instance_ = NULL;

C2GS_Recharge_rebate* C2GS_Recharge_rebate::New() const {
  return new C2GS_Recharge_rebate;
}

void C2GS_Recharge_rebate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Recharge_rebate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Recharge_rebate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Recharge_rebate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Recharge_rebate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Recharge_rebate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Recharge_rebate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Recharge_rebate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Recharge_rebate::MergeFrom(const C2GS_Recharge_rebate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Recharge_rebate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Recharge_rebate::CopyFrom(const C2GS_Recharge_rebate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Recharge_rebate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Recharge_rebate::Swap(C2GS_Recharge_rebate* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Recharge_rebate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Recharge_rebate_descriptor_;
  metadata.reflection = C2GS_Recharge_rebate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Recharge_rebate_Rsp::kRewardFieldNumber;
const int GS2C_Recharge_rebate_Rsp::kRetFieldNumber;
#endif  // !_MSC_VER

GS2C_Recharge_rebate_Rsp::GS2C_Recharge_rebate_Rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Recharge_rebate_Rsp::InitAsDefaultInstance() {
  reward_ = const_cast< ::pb::StReward*>(&::pb::StReward::default_instance());
}

GS2C_Recharge_rebate_Rsp::GS2C_Recharge_rebate_Rsp(const GS2C_Recharge_rebate_Rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Recharge_rebate_Rsp::SharedCtor() {
  _cached_size_ = 0;
  reward_ = NULL;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Recharge_rebate_Rsp::~GS2C_Recharge_rebate_Rsp() {
  SharedDtor();
}

void GS2C_Recharge_rebate_Rsp::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void GS2C_Recharge_rebate_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Recharge_rebate_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Recharge_rebate_Rsp_descriptor_;
}

const GS2C_Recharge_rebate_Rsp& GS2C_Recharge_rebate_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

GS2C_Recharge_rebate_Rsp* GS2C_Recharge_rebate_Rsp::default_instance_ = NULL;

GS2C_Recharge_rebate_Rsp* GS2C_Recharge_rebate_Rsp::New() const {
  return new GS2C_Recharge_rebate_Rsp;
}

void GS2C_Recharge_rebate_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_reward()) {
      if (reward_ != NULL) reward_->::pb::StReward::Clear();
    }
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Recharge_rebate_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.StReward reward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Recharge_rebate_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.StReward reward = 1;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward(), output);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Recharge_rebate_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.StReward reward = 1;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward(), target);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Recharge_rebate_Rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.StReward reward = 1;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

    // required uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Recharge_rebate_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Recharge_rebate_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Recharge_rebate_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Recharge_rebate_Rsp::MergeFrom(const GS2C_Recharge_rebate_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward()) {
      mutable_reward()->::pb::StReward::MergeFrom(from.reward());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Recharge_rebate_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Recharge_rebate_Rsp::CopyFrom(const GS2C_Recharge_rebate_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Recharge_rebate_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void GS2C_Recharge_rebate_Rsp::Swap(GS2C_Recharge_rebate_Rsp* other) {
  if (other != this) {
    std::swap(reward_, other->reward_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Recharge_rebate_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Recharge_rebate_Rsp_descriptor_;
  metadata.reflection = GS2C_Recharge_rebate_Rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
