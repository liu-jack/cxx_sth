// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Item.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Item.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* GxDB_ItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_ItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_EquipInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_EquipInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_SlotItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_SlotItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Bag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Bag_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_ItemUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_ItemUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_ItemUse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_ItemUse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_ItemSellRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_ItemSellRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_SellRecordList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_SellRecordList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_SellProgramInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_SellProgramInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_SellRandomProgram_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_SellRandomProgram_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_AllSellData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_AllSellData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_LootRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_LootRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_AllLootRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_AllLootRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_LotteryFreeRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_LotteryFreeRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_AllLotteryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_AllLotteryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_LootResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_LootResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_LootShopEquipResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_LootShopEquipResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Item_2eproto() {
  protobuf_AddDesc_Item_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Item.proto");
  GOOGLE_CHECK(file != NULL);
  GxDB_ItemInfo_descriptor_ = file->message_type(0);
  static const int GxDB_ItemInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_ItemInfo, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_ItemInfo, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_ItemInfo, is_new_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_ItemInfo, is_sold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_ItemInfo, repo_end_time_),
  };
  GxDB_ItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_ItemInfo_descriptor_,
      GxDB_ItemInfo::default_instance_,
      GxDB_ItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_ItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_ItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_ItemInfo));
  GxDB_EquipInfo_descriptor_ = file->message_type(1);
  static const int GxDB_EquipInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_EquipInfo, equip_to_charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_EquipInfo, skill_attrs_),
  };
  GxDB_EquipInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_EquipInfo_descriptor_,
      GxDB_EquipInfo::default_instance_,
      GxDB_EquipInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_EquipInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_EquipInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_EquipInfo));
  GS2C_SlotItem_descriptor_ = file->message_type(2);
  static const int GS2C_SlotItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_SlotItem, is_deleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_SlotItem, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_SlotItem, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_SlotItem, equip_),
  };
  GS2C_SlotItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_SlotItem_descriptor_,
      GS2C_SlotItem::default_instance_,
      GS2C_SlotItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_SlotItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_SlotItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_SlotItem));
  GS2C_Bag_descriptor_ = file->message_type(3);
  static const int GS2C_Bag_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Bag, items_),
  };
  GS2C_Bag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Bag_descriptor_,
      GS2C_Bag::default_instance_,
      GS2C_Bag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Bag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Bag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Bag));
  C2GS_ItemUp_descriptor_ = file->message_type(4);
  static const int C2GS_ItemUp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_ItemUp, item_slot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_ItemUp, ids_),
  };
  C2GS_ItemUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_ItemUp_descriptor_,
      C2GS_ItemUp::default_instance_,
      C2GS_ItemUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_ItemUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_ItemUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_ItemUp));
  GS2C_ItemUse_descriptor_ = file->message_type(5);
  static const int GS2C_ItemUse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ItemUse, err_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ItemUse, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ItemUse, is_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ItemUse, loot_list_),
  };
  GS2C_ItemUse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_ItemUse_descriptor_,
      GS2C_ItemUse::default_instance_,
      GS2C_ItemUse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ItemUse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ItemUse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_ItemUse));
  GS2C_ItemSellRecord_descriptor_ = file->message_type(6);
  static const int GS2C_ItemSellRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ItemSellRecord, sell_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ItemSellRecord, sell_count_),
  };
  GS2C_ItemSellRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_ItemSellRecord_descriptor_,
      GS2C_ItemSellRecord::default_instance_,
      GS2C_ItemSellRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ItemSellRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ItemSellRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_ItemSellRecord));
  GS2C_SellRecordList_descriptor_ = file->message_type(7);
  static const int GS2C_SellRecordList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_SellRecordList, sell_records_),
  };
  GS2C_SellRecordList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_SellRecordList_descriptor_,
      GS2C_SellRecordList::default_instance_,
      GS2C_SellRecordList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_SellRecordList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_SellRecordList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_SellRecordList));
  GS2C_SellProgramInfo_descriptor_ = file->message_type(8);
  static const int GS2C_SellProgramInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_SellProgramInfo, program_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_SellProgramInfo, record_valid_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_SellProgramInfo, records_),
  };
  GS2C_SellProgramInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_SellProgramInfo_descriptor_,
      GS2C_SellProgramInfo::default_instance_,
      GS2C_SellProgramInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_SellProgramInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_SellProgramInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_SellProgramInfo));
  GS2C_SellRandomProgram_descriptor_ = file->message_type(9);
  static const int GS2C_SellRandomProgram_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_SellRandomProgram, victim_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_SellRandomProgram, program_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_SellRandomProgram, auto_refresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_SellRandomProgram, today_manual_refresh_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_SellRandomProgram, last_manual_refresh_time_),
  };
  GS2C_SellRandomProgram_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_SellRandomProgram_descriptor_,
      GS2C_SellRandomProgram::default_instance_,
      GS2C_SellRandomProgram_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_SellRandomProgram, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_SellRandomProgram, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_SellRandomProgram));
  GS2C_AllSellData_descriptor_ = file->message_type(10);
  static const int GS2C_AllSellData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_AllSellData, sell_program_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_AllSellData, random_programs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_AllSellData, sell_records_),
  };
  GS2C_AllSellData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_AllSellData_descriptor_,
      GS2C_AllSellData::default_instance_,
      GS2C_AllSellData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_AllSellData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_AllSellData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_AllSellData));
  GS2C_LootRecord_descriptor_ = file->message_type(11);
  static const int GS2C_LootRecord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LootRecord, loot_type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LootRecord, roll_success_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LootRecord, roll_count_),
  };
  GS2C_LootRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_LootRecord_descriptor_,
      GS2C_LootRecord::default_instance_,
      GS2C_LootRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LootRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LootRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_LootRecord));
  GS2C_AllLootRecord_descriptor_ = file->message_type(12);
  static const int GS2C_AllLootRecord_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_AllLootRecord, records_),
  };
  GS2C_AllLootRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_AllLootRecord_descriptor_,
      GS2C_AllLootRecord::default_instance_,
      GS2C_AllLootRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_AllLootRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_AllLootRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_AllLootRecord));
  GS2C_LotteryFreeRecord_descriptor_ = file->message_type(13);
  static const int GS2C_LotteryFreeRecord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LotteryFreeRecord, lottery_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LotteryFreeRecord, remain_free_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LotteryFreeRecord, next_free_lottery_time_),
  };
  GS2C_LotteryFreeRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_LotteryFreeRecord_descriptor_,
      GS2C_LotteryFreeRecord::default_instance_,
      GS2C_LotteryFreeRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LotteryFreeRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LotteryFreeRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_LotteryFreeRecord));
  GS2C_AllLotteryInfo_descriptor_ = file->message_type(14);
  static const int GS2C_AllLotteryInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_AllLotteryInfo, free_records_),
  };
  GS2C_AllLotteryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_AllLotteryInfo_descriptor_,
      GS2C_AllLotteryInfo::default_instance_,
      GS2C_AllLotteryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_AllLotteryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_AllLotteryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_AllLotteryInfo));
  GS2C_LootResult_descriptor_ = file->message_type(15);
  static const int GS2C_LootResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LootResult, err_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LootResult, loot_list_),
  };
  GS2C_LootResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_LootResult_descriptor_,
      GS2C_LootResult::default_instance_,
      GS2C_LootResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LootResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LootResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_LootResult));
  GS2C_LootShopEquipResult_descriptor_ = file->message_type(16);
  static const int GS2C_LootShopEquipResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LootShopEquipResult, err_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LootShopEquipResult, loot_list_),
  };
  GS2C_LootShopEquipResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_LootShopEquipResult_descriptor_,
      GS2C_LootShopEquipResult::default_instance_,
      GS2C_LootShopEquipResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LootShopEquipResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LootShopEquipResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_LootShopEquipResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Item_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_ItemInfo_descriptor_, &GxDB_ItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_EquipInfo_descriptor_, &GxDB_EquipInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_SlotItem_descriptor_, &GS2C_SlotItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Bag_descriptor_, &GS2C_Bag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_ItemUp_descriptor_, &C2GS_ItemUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_ItemUse_descriptor_, &GS2C_ItemUse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_ItemSellRecord_descriptor_, &GS2C_ItemSellRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_SellRecordList_descriptor_, &GS2C_SellRecordList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_SellProgramInfo_descriptor_, &GS2C_SellProgramInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_SellRandomProgram_descriptor_, &GS2C_SellRandomProgram::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_AllSellData_descriptor_, &GS2C_AllSellData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_LootRecord_descriptor_, &GS2C_LootRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_AllLootRecord_descriptor_, &GS2C_AllLootRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_LotteryFreeRecord_descriptor_, &GS2C_LotteryFreeRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_AllLotteryInfo_descriptor_, &GS2C_AllLotteryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_LootResult_descriptor_, &GS2C_LootResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_LootShopEquipResult_descriptor_, &GS2C_LootShopEquipResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Item_2eproto() {
  delete GxDB_ItemInfo::default_instance_;
  delete GxDB_ItemInfo_reflection_;
  delete GxDB_EquipInfo::default_instance_;
  delete GxDB_EquipInfo_reflection_;
  delete GS2C_SlotItem::default_instance_;
  delete GS2C_SlotItem_reflection_;
  delete GS2C_Bag::default_instance_;
  delete GS2C_Bag_reflection_;
  delete C2GS_ItemUp::default_instance_;
  delete C2GS_ItemUp_reflection_;
  delete GS2C_ItemUse::default_instance_;
  delete GS2C_ItemUse_reflection_;
  delete GS2C_ItemSellRecord::default_instance_;
  delete GS2C_ItemSellRecord_reflection_;
  delete GS2C_SellRecordList::default_instance_;
  delete GS2C_SellRecordList_reflection_;
  delete GS2C_SellProgramInfo::default_instance_;
  delete GS2C_SellProgramInfo_reflection_;
  delete GS2C_SellRandomProgram::default_instance_;
  delete GS2C_SellRandomProgram_reflection_;
  delete GS2C_AllSellData::default_instance_;
  delete GS2C_AllSellData_reflection_;
  delete GS2C_LootRecord::default_instance_;
  delete GS2C_LootRecord_reflection_;
  delete GS2C_AllLootRecord::default_instance_;
  delete GS2C_AllLootRecord_reflection_;
  delete GS2C_LotteryFreeRecord::default_instance_;
  delete GS2C_LotteryFreeRecord_reflection_;
  delete GS2C_AllLotteryInfo::default_instance_;
  delete GS2C_AllLotteryInfo_reflection_;
  delete GS2C_LootResult::default_instance_;
  delete GS2C_LootResult_reflection_;
  delete GS2C_LootShopEquipResult::default_instance_;
  delete GS2C_LootShopEquipResult_reflection_;
}

void protobuf_AddDesc_Item_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_CommomDef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nItem.proto\022\002pb\032\017CommomDef.proto\"h\n\rGxD"
    "B_ItemInfo\022\020\n\010proto_id\030\001 \001(\r\022\r\n\005count\030\002 "
    "\001(\r\022\016\n\006is_new\030\003 \001(\010\022\017\n\007is_sold\030\004 \001(\010\022\025\n\r"
    "repo_end_time\030\005 \001(\003\"M\n\016GxDB_EquipInfo\022\027\n"
    "\017equip_to_charid\030\001 \001(\r\022\"\n\013skill_attrs\030\002 "
    "\003(\0132\r.pb.PairValue\"u\n\rGS2C_SlotItem\022\022\n\ni"
    "s_deleted\030\001 \001(\010\022\014\n\004slot\030\002 \002(\r\022\037\n\004item\030\003 "
    "\001(\0132\021.pb.GxDB_ItemInfo\022!\n\005equip\030\004 \001(\0132\022."
    "pb.GxDB_EquipInfo\",\n\010GS2C_Bag\022 \n\005items\030\001"
    " \003(\0132\021.pb.GS2C_SlotItem\"@\n\013C2GS_ItemUp\022\024"
    "\n\014item_slot_id\030\001 \002(\r\022\033\n\003ids\030\002 \001(\0132\016.pb.U"
    "int32List\"h\n\014GS2C_ItemUse\022\020\n\010err_code\030\001 "
    "\001(\r\022\017\n\007item_id\030\002 \001(\r\022\017\n\007is_card\030\004 \001(\010\022$\n"
    "\tloot_list\030\003 \001(\0132\021.pb.GS2C_LootList\":\n\023G"
    "S2C_ItemSellRecord\022\017\n\007sell_id\030\001 \001(\r\022\022\n\ns"
    "ell_count\030\002 \001(\r\"D\n\023GS2C_SellRecordList\022-"
    "\n\014sell_records\030\001 \003(\0132\027.pb.GS2C_ItemSellR"
    "ecord\"o\n\024GS2C_SellProgramInfo\022\022\n\nprogram"
    "_id\030\001 \001(\r\022\031\n\021record_valid_time\030\002 \001(\003\022(\n\007"
    "records\030\003 \001(\0132\027.pb.GS2C_SellRecordList\"\242"
    "\001\n\026GS2C_SellRandomProgram\022\023\n\013victim_type"
    "\030\001 \001(\r\022\022\n\nprogram_id\030\002 \001(\r\022\031\n\021auto_refre"
    "sh_time\030\003 \001(\003\022\"\n\032today_manual_refresh_co"
    "unt\030\004 \001(\r\022 \n\030last_manual_refresh_time\030\005 "
    "\001(\003\"\254\001\n\020GS2C_AllSellData\0224\n\022sell_program"
    "_infos\030\001 \003(\0132\030.pb.GS2C_SellProgramInfo\0223"
    "\n\017random_programs\030\002 \003(\0132\032.pb.GS2C_SellRa"
    "ndomProgram\022-\n\014sell_records\030\003 \003(\0132\027.pb.G"
    "S2C_ItemSellRecord\"W\n\017GS2C_LootRecord\022\024\n"
    "\014loot_type_id\030\001 \001(\004\022\032\n\022roll_success_coun"
    "t\030\002 \001(\r\022\022\n\nroll_count\030\003 \001(\r\":\n\022GS2C_AllL"
    "ootRecord\022$\n\007records\030\001 \003(\0132\023.pb.GS2C_Loo"
    "tRecord\"i\n\026GS2C_LotteryFreeRecord\022\024\n\014lot"
    "tery_type\030\001 \001(\r\022\031\n\021remain_free_count\030\002 \001"
    "(\r\022\036\n\026next_free_lottery_time\030\003 \001(\003\"G\n\023GS"
    "2C_AllLotteryInfo\0220\n\014free_records\030\001 \003(\0132"
    "\032.pb.GS2C_LotteryFreeRecord\"I\n\017GS2C_Loot"
    "Result\022\020\n\010err_code\030\001 \001(\r\022$\n\tloot_list\030\002 "
    "\001(\0132\021.pb.GS2C_LootList\"M\n\030GS2C_LootShopE"
    "quipResult\022\020\n\010err_code\030\001 \001(\r\022\037\n\tloot_lis"
    "t\030\002 \001(\0132\014.pb.GS2C_Bag", 1621);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Item.proto", &protobuf_RegisterTypes);
  GxDB_ItemInfo::default_instance_ = new GxDB_ItemInfo();
  GxDB_EquipInfo::default_instance_ = new GxDB_EquipInfo();
  GS2C_SlotItem::default_instance_ = new GS2C_SlotItem();
  GS2C_Bag::default_instance_ = new GS2C_Bag();
  C2GS_ItemUp::default_instance_ = new C2GS_ItemUp();
  GS2C_ItemUse::default_instance_ = new GS2C_ItemUse();
  GS2C_ItemSellRecord::default_instance_ = new GS2C_ItemSellRecord();
  GS2C_SellRecordList::default_instance_ = new GS2C_SellRecordList();
  GS2C_SellProgramInfo::default_instance_ = new GS2C_SellProgramInfo();
  GS2C_SellRandomProgram::default_instance_ = new GS2C_SellRandomProgram();
  GS2C_AllSellData::default_instance_ = new GS2C_AllSellData();
  GS2C_LootRecord::default_instance_ = new GS2C_LootRecord();
  GS2C_AllLootRecord::default_instance_ = new GS2C_AllLootRecord();
  GS2C_LotteryFreeRecord::default_instance_ = new GS2C_LotteryFreeRecord();
  GS2C_AllLotteryInfo::default_instance_ = new GS2C_AllLotteryInfo();
  GS2C_LootResult::default_instance_ = new GS2C_LootResult();
  GS2C_LootShopEquipResult::default_instance_ = new GS2C_LootShopEquipResult();
  GxDB_ItemInfo::default_instance_->InitAsDefaultInstance();
  GxDB_EquipInfo::default_instance_->InitAsDefaultInstance();
  GS2C_SlotItem::default_instance_->InitAsDefaultInstance();
  GS2C_Bag::default_instance_->InitAsDefaultInstance();
  C2GS_ItemUp::default_instance_->InitAsDefaultInstance();
  GS2C_ItemUse::default_instance_->InitAsDefaultInstance();
  GS2C_ItemSellRecord::default_instance_->InitAsDefaultInstance();
  GS2C_SellRecordList::default_instance_->InitAsDefaultInstance();
  GS2C_SellProgramInfo::default_instance_->InitAsDefaultInstance();
  GS2C_SellRandomProgram::default_instance_->InitAsDefaultInstance();
  GS2C_AllSellData::default_instance_->InitAsDefaultInstance();
  GS2C_LootRecord::default_instance_->InitAsDefaultInstance();
  GS2C_AllLootRecord::default_instance_->InitAsDefaultInstance();
  GS2C_LotteryFreeRecord::default_instance_->InitAsDefaultInstance();
  GS2C_AllLotteryInfo::default_instance_->InitAsDefaultInstance();
  GS2C_LootResult::default_instance_->InitAsDefaultInstance();
  GS2C_LootShopEquipResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Item_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Item_2eproto {
  StaticDescriptorInitializer_Item_2eproto() {
    protobuf_AddDesc_Item_2eproto();
  }
} static_descriptor_initializer_Item_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GxDB_ItemInfo::kProtoIdFieldNumber;
const int GxDB_ItemInfo::kCountFieldNumber;
const int GxDB_ItemInfo::kIsNewFieldNumber;
const int GxDB_ItemInfo::kIsSoldFieldNumber;
const int GxDB_ItemInfo::kRepoEndTimeFieldNumber;
#endif  // !_MSC_VER

GxDB_ItemInfo::GxDB_ItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_ItemInfo::InitAsDefaultInstance() {
}

GxDB_ItemInfo::GxDB_ItemInfo(const GxDB_ItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_ItemInfo::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 0u;
  count_ = 0u;
  is_new_ = false;
  is_sold_ = false;
  repo_end_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_ItemInfo::~GxDB_ItemInfo() {
  SharedDtor();
}

void GxDB_ItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_ItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_ItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_ItemInfo_descriptor_;
}

const GxDB_ItemInfo& GxDB_ItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Item_2eproto();
  return *default_instance_;
}

GxDB_ItemInfo* GxDB_ItemInfo::default_instance_ = NULL;

GxDB_ItemInfo* GxDB_ItemInfo::New() const {
  return new GxDB_ItemInfo;
}

void GxDB_ItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 0u;
    count_ = 0u;
    is_new_ = false;
    is_sold_ = false;
    repo_end_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_ItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 proto_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proto_id_)));
          set_has_proto_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_new;
        break;
      }

      // optional bool is_new = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_new:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_new_)));
          set_has_is_new();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_sold;
        break;
      }

      // optional bool is_sold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_sold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_sold_)));
          set_has_is_sold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_repo_end_time;
        break;
      }

      // optional int64 repo_end_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repo_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &repo_end_time_)));
          set_has_repo_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_ItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 proto_id = 1;
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->proto_id(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // optional bool is_new = 3;
  if (has_is_new()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_new(), output);
  }

  // optional bool is_sold = 4;
  if (has_is_sold()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_sold(), output);
  }

  // optional int64 repo_end_time = 5;
  if (has_repo_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->repo_end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_ItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 proto_id = 1;
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->proto_id(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // optional bool is_new = 3;
  if (has_is_new()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_new(), target);
  }

  // optional bool is_sold = 4;
  if (has_is_sold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_sold(), target);
  }

  // optional int64 repo_end_time = 5;
  if (has_repo_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->repo_end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_ItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 proto_id = 1;
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proto_id());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional bool is_new = 3;
    if (has_is_new()) {
      total_size += 1 + 1;
    }

    // optional bool is_sold = 4;
    if (has_is_sold()) {
      total_size += 1 + 1;
    }

    // optional int64 repo_end_time = 5;
    if (has_repo_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->repo_end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_ItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_ItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_ItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_ItemInfo::MergeFrom(const GxDB_ItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_is_new()) {
      set_is_new(from.is_new());
    }
    if (from.has_is_sold()) {
      set_is_sold(from.is_sold());
    }
    if (from.has_repo_end_time()) {
      set_repo_end_time(from.repo_end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_ItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_ItemInfo::CopyFrom(const GxDB_ItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_ItemInfo::IsInitialized() const {

  return true;
}

void GxDB_ItemInfo::Swap(GxDB_ItemInfo* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(count_, other->count_);
    std::swap(is_new_, other->is_new_);
    std::swap(is_sold_, other->is_sold_);
    std::swap(repo_end_time_, other->repo_end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_ItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_ItemInfo_descriptor_;
  metadata.reflection = GxDB_ItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_EquipInfo::kEquipToCharidFieldNumber;
const int GxDB_EquipInfo::kSkillAttrsFieldNumber;
#endif  // !_MSC_VER

GxDB_EquipInfo::GxDB_EquipInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_EquipInfo::InitAsDefaultInstance() {
}

GxDB_EquipInfo::GxDB_EquipInfo(const GxDB_EquipInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_EquipInfo::SharedCtor() {
  _cached_size_ = 0;
  equip_to_charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_EquipInfo::~GxDB_EquipInfo() {
  SharedDtor();
}

void GxDB_EquipInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_EquipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_EquipInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_EquipInfo_descriptor_;
}

const GxDB_EquipInfo& GxDB_EquipInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Item_2eproto();
  return *default_instance_;
}

GxDB_EquipInfo* GxDB_EquipInfo::default_instance_ = NULL;

GxDB_EquipInfo* GxDB_EquipInfo::New() const {
  return new GxDB_EquipInfo;
}

void GxDB_EquipInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_to_charid_ = 0u;
  }
  skill_attrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_EquipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 equip_to_charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equip_to_charid_)));
          set_has_equip_to_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skill_attrs;
        break;
      }

      // repeated .pb.PairValue skill_attrs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_attrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skill_attrs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_EquipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 equip_to_charid = 1;
  if (has_equip_to_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equip_to_charid(), output);
  }

  // repeated .pb.PairValue skill_attrs = 2;
  for (int i = 0; i < this->skill_attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skill_attrs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_EquipInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 equip_to_charid = 1;
  if (has_equip_to_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->equip_to_charid(), target);
  }

  // repeated .pb.PairValue skill_attrs = 2;
  for (int i = 0; i < this->skill_attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skill_attrs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_EquipInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 equip_to_charid = 1;
    if (has_equip_to_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equip_to_charid());
    }

  }
  // repeated .pb.PairValue skill_attrs = 2;
  total_size += 1 * this->skill_attrs_size();
  for (int i = 0; i < this->skill_attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_attrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_EquipInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_EquipInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_EquipInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_EquipInfo::MergeFrom(const GxDB_EquipInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_attrs_.MergeFrom(from.skill_attrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_to_charid()) {
      set_equip_to_charid(from.equip_to_charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_EquipInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_EquipInfo::CopyFrom(const GxDB_EquipInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_EquipInfo::IsInitialized() const {

  return true;
}

void GxDB_EquipInfo::Swap(GxDB_EquipInfo* other) {
  if (other != this) {
    std::swap(equip_to_charid_, other->equip_to_charid_);
    skill_attrs_.Swap(&other->skill_attrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_EquipInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_EquipInfo_descriptor_;
  metadata.reflection = GxDB_EquipInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_SlotItem::kIsDeletedFieldNumber;
const int GS2C_SlotItem::kSlotFieldNumber;
const int GS2C_SlotItem::kItemFieldNumber;
const int GS2C_SlotItem::kEquipFieldNumber;
#endif  // !_MSC_VER

GS2C_SlotItem::GS2C_SlotItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_SlotItem::InitAsDefaultInstance() {
  item_ = const_cast< ::pb::GxDB_ItemInfo*>(&::pb::GxDB_ItemInfo::default_instance());
  equip_ = const_cast< ::pb::GxDB_EquipInfo*>(&::pb::GxDB_EquipInfo::default_instance());
}

GS2C_SlotItem::GS2C_SlotItem(const GS2C_SlotItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_SlotItem::SharedCtor() {
  _cached_size_ = 0;
  is_deleted_ = false;
  slot_ = 0u;
  item_ = NULL;
  equip_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_SlotItem::~GS2C_SlotItem() {
  SharedDtor();
}

void GS2C_SlotItem::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
    delete equip_;
  }
}

void GS2C_SlotItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_SlotItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_SlotItem_descriptor_;
}

const GS2C_SlotItem& GS2C_SlotItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Item_2eproto();
  return *default_instance_;
}

GS2C_SlotItem* GS2C_SlotItem::default_instance_ = NULL;

GS2C_SlotItem* GS2C_SlotItem::New() const {
  return new GS2C_SlotItem;
}

void GS2C_SlotItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_deleted_ = false;
    slot_ = 0u;
    if (has_item()) {
      if (item_ != NULL) item_->::pb::GxDB_ItemInfo::Clear();
    }
    if (has_equip()) {
      if (equip_ != NULL) equip_->::pb::GxDB_EquipInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_SlotItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_deleted = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_deleted_)));
          set_has_is_deleted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot;
        break;
      }

      // required uint32 slot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // optional .pb.GxDB_ItemInfo item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_equip;
        break;
      }

      // optional .pb.GxDB_EquipInfo equip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_SlotItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_deleted = 1;
  if (has_is_deleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_deleted(), output);
  }

  // required uint32 slot = 2;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot(), output);
  }

  // optional .pb.GxDB_ItemInfo item = 3;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(), output);
  }

  // optional .pb.GxDB_EquipInfo equip = 4;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->equip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_SlotItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_deleted = 1;
  if (has_is_deleted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_deleted(), target);
  }

  // required uint32 slot = 2;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot(), target);
  }

  // optional .pb.GxDB_ItemInfo item = 3;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(), target);
  }

  // optional .pb.GxDB_EquipInfo equip = 4;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->equip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_SlotItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_deleted = 1;
    if (has_is_deleted()) {
      total_size += 1 + 1;
    }

    // required uint32 slot = 2;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

    // optional .pb.GxDB_ItemInfo item = 3;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

    // optional .pb.GxDB_EquipInfo equip = 4;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_SlotItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_SlotItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_SlotItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_SlotItem::MergeFrom(const GS2C_SlotItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_deleted()) {
      set_is_deleted(from.is_deleted());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_item()) {
      mutable_item()->::pb::GxDB_ItemInfo::MergeFrom(from.item());
    }
    if (from.has_equip()) {
      mutable_equip()->::pb::GxDB_EquipInfo::MergeFrom(from.equip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_SlotItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_SlotItem::CopyFrom(const GS2C_SlotItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_SlotItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void GS2C_SlotItem::Swap(GS2C_SlotItem* other) {
  if (other != this) {
    std::swap(is_deleted_, other->is_deleted_);
    std::swap(slot_, other->slot_);
    std::swap(item_, other->item_);
    std::swap(equip_, other->equip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_SlotItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_SlotItem_descriptor_;
  metadata.reflection = GS2C_SlotItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Bag::kItemsFieldNumber;
#endif  // !_MSC_VER

GS2C_Bag::GS2C_Bag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Bag::InitAsDefaultInstance() {
}

GS2C_Bag::GS2C_Bag(const GS2C_Bag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Bag::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Bag::~GS2C_Bag() {
  SharedDtor();
}

void GS2C_Bag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Bag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Bag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Bag_descriptor_;
}

const GS2C_Bag& GS2C_Bag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Item_2eproto();
  return *default_instance_;
}

GS2C_Bag* GS2C_Bag::default_instance_ = NULL;

GS2C_Bag* GS2C_Bag::New() const {
  return new GS2C_Bag;
}

void GS2C_Bag::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Bag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GS2C_SlotItem items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Bag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GS2C_SlotItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Bag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GS2C_SlotItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Bag::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GS2C_SlotItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Bag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Bag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Bag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Bag::MergeFrom(const GS2C_Bag& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Bag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Bag::CopyFrom(const GS2C_Bag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Bag::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Bag::Swap(GS2C_Bag* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Bag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Bag_descriptor_;
  metadata.reflection = GS2C_Bag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_ItemUp::kItemSlotIdFieldNumber;
const int C2GS_ItemUp::kIdsFieldNumber;
#endif  // !_MSC_VER

C2GS_ItemUp::C2GS_ItemUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_ItemUp::InitAsDefaultInstance() {
  ids_ = const_cast< ::pb::Uint32List*>(&::pb::Uint32List::default_instance());
}

C2GS_ItemUp::C2GS_ItemUp(const C2GS_ItemUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_ItemUp::SharedCtor() {
  _cached_size_ = 0;
  item_slot_id_ = 0u;
  ids_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_ItemUp::~C2GS_ItemUp() {
  SharedDtor();
}

void C2GS_ItemUp::SharedDtor() {
  if (this != default_instance_) {
    delete ids_;
  }
}

void C2GS_ItemUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_ItemUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_ItemUp_descriptor_;
}

const C2GS_ItemUp& C2GS_ItemUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Item_2eproto();
  return *default_instance_;
}

C2GS_ItemUp* C2GS_ItemUp::default_instance_ = NULL;

C2GS_ItemUp* C2GS_ItemUp::New() const {
  return new C2GS_ItemUp;
}

void C2GS_ItemUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_slot_id_ = 0u;
    if (has_ids()) {
      if (ids_ != NULL) ids_->::pb::Uint32List::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_ItemUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_slot_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_slot_id_)));
          set_has_item_slot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ids;
        break;
      }

      // optional .pb.Uint32List ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_ItemUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 item_slot_id = 1;
  if (has_item_slot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_slot_id(), output);
  }

  // optional .pb.Uint32List ids = 2;
  if (has_ids()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ids(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_ItemUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 item_slot_id = 1;
  if (has_item_slot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_slot_id(), target);
  }

  // optional .pb.Uint32List ids = 2;
  if (has_ids()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ids(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_ItemUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 item_slot_id = 1;
    if (has_item_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_slot_id());
    }

    // optional .pb.Uint32List ids = 2;
    if (has_ids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ids());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_ItemUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_ItemUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_ItemUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_ItemUp::MergeFrom(const C2GS_ItemUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_slot_id()) {
      set_item_slot_id(from.item_slot_id());
    }
    if (from.has_ids()) {
      mutable_ids()->::pb::Uint32List::MergeFrom(from.ids());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_ItemUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_ItemUp::CopyFrom(const C2GS_ItemUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_ItemUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_ItemUp::Swap(C2GS_ItemUp* other) {
  if (other != this) {
    std::swap(item_slot_id_, other->item_slot_id_);
    std::swap(ids_, other->ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_ItemUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_ItemUp_descriptor_;
  metadata.reflection = C2GS_ItemUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_ItemUse::kErrCodeFieldNumber;
const int GS2C_ItemUse::kItemIdFieldNumber;
const int GS2C_ItemUse::kIsCardFieldNumber;
const int GS2C_ItemUse::kLootListFieldNumber;
#endif  // !_MSC_VER

GS2C_ItemUse::GS2C_ItemUse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_ItemUse::InitAsDefaultInstance() {
  loot_list_ = const_cast< ::pb::GS2C_LootList*>(&::pb::GS2C_LootList::default_instance());
}

GS2C_ItemUse::GS2C_ItemUse(const GS2C_ItemUse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_ItemUse::SharedCtor() {
  _cached_size_ = 0;
  err_code_ = 0u;
  item_id_ = 0u;
  is_card_ = false;
  loot_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_ItemUse::~GS2C_ItemUse() {
  SharedDtor();
}

void GS2C_ItemUse::SharedDtor() {
  if (this != default_instance_) {
    delete loot_list_;
  }
}

void GS2C_ItemUse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_ItemUse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_ItemUse_descriptor_;
}

const GS2C_ItemUse& GS2C_ItemUse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Item_2eproto();
  return *default_instance_;
}

GS2C_ItemUse* GS2C_ItemUse::default_instance_ = NULL;

GS2C_ItemUse* GS2C_ItemUse::New() const {
  return new GS2C_ItemUse;
}

void GS2C_ItemUse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_code_ = 0u;
    item_id_ = 0u;
    is_card_ = false;
    if (has_loot_list()) {
      if (loot_list_ != NULL) loot_list_->::pb::GS2C_LootList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_ItemUse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 err_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &err_code_)));
          set_has_err_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional uint32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_loot_list;
        break;
      }

      // optional .pb.GS2C_LootList loot_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loot_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loot_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_card;
        break;
      }

      // optional bool is_card = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_card_)));
          set_has_is_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_ItemUse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 err_code = 1;
  if (has_err_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->err_code(), output);
  }

  // optional uint32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_id(), output);
  }

  // optional .pb.GS2C_LootList loot_list = 3;
  if (has_loot_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->loot_list(), output);
  }

  // optional bool is_card = 4;
  if (has_is_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_ItemUse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 err_code = 1;
  if (has_err_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->err_code(), target);
  }

  // optional uint32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_id(), target);
  }

  // optional .pb.GS2C_LootList loot_list = 3;
  if (has_loot_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->loot_list(), target);
  }

  // optional bool is_card = 4;
  if (has_is_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_ItemUse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 err_code = 1;
    if (has_err_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->err_code());
    }

    // optional uint32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional bool is_card = 4;
    if (has_is_card()) {
      total_size += 1 + 1;
    }

    // optional .pb.GS2C_LootList loot_list = 3;
    if (has_loot_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loot_list());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_ItemUse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_ItemUse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_ItemUse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_ItemUse::MergeFrom(const GS2C_ItemUse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_code()) {
      set_err_code(from.err_code());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_is_card()) {
      set_is_card(from.is_card());
    }
    if (from.has_loot_list()) {
      mutable_loot_list()->::pb::GS2C_LootList::MergeFrom(from.loot_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_ItemUse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_ItemUse::CopyFrom(const GS2C_ItemUse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_ItemUse::IsInitialized() const {

  return true;
}

void GS2C_ItemUse::Swap(GS2C_ItemUse* other) {
  if (other != this) {
    std::swap(err_code_, other->err_code_);
    std::swap(item_id_, other->item_id_);
    std::swap(is_card_, other->is_card_);
    std::swap(loot_list_, other->loot_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_ItemUse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_ItemUse_descriptor_;
  metadata.reflection = GS2C_ItemUse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_ItemSellRecord::kSellIdFieldNumber;
const int GS2C_ItemSellRecord::kSellCountFieldNumber;
#endif  // !_MSC_VER

GS2C_ItemSellRecord::GS2C_ItemSellRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_ItemSellRecord::InitAsDefaultInstance() {
}

GS2C_ItemSellRecord::GS2C_ItemSellRecord(const GS2C_ItemSellRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_ItemSellRecord::SharedCtor() {
  _cached_size_ = 0;
  sell_id_ = 0u;
  sell_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_ItemSellRecord::~GS2C_ItemSellRecord() {
  SharedDtor();
}

void GS2C_ItemSellRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_ItemSellRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_ItemSellRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_ItemSellRecord_descriptor_;
}

const GS2C_ItemSellRecord& GS2C_ItemSellRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Item_2eproto();
  return *default_instance_;
}

GS2C_ItemSellRecord* GS2C_ItemSellRecord::default_instance_ = NULL;

GS2C_ItemSellRecord* GS2C_ItemSellRecord::New() const {
  return new GS2C_ItemSellRecord;
}

void GS2C_ItemSellRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sell_id_ = 0u;
    sell_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_ItemSellRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sell_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sell_id_)));
          set_has_sell_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sell_count;
        break;
      }

      // optional uint32 sell_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sell_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sell_count_)));
          set_has_sell_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_ItemSellRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sell_id = 1;
  if (has_sell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sell_id(), output);
  }

  // optional uint32 sell_count = 2;
  if (has_sell_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sell_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_ItemSellRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sell_id = 1;
  if (has_sell_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sell_id(), target);
  }

  // optional uint32 sell_count = 2;
  if (has_sell_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sell_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_ItemSellRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sell_id = 1;
    if (has_sell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sell_id());
    }

    // optional uint32 sell_count = 2;
    if (has_sell_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sell_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_ItemSellRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_ItemSellRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_ItemSellRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_ItemSellRecord::MergeFrom(const GS2C_ItemSellRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sell_id()) {
      set_sell_id(from.sell_id());
    }
    if (from.has_sell_count()) {
      set_sell_count(from.sell_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_ItemSellRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_ItemSellRecord::CopyFrom(const GS2C_ItemSellRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_ItemSellRecord::IsInitialized() const {

  return true;
}

void GS2C_ItemSellRecord::Swap(GS2C_ItemSellRecord* other) {
  if (other != this) {
    std::swap(sell_id_, other->sell_id_);
    std::swap(sell_count_, other->sell_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_ItemSellRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_ItemSellRecord_descriptor_;
  metadata.reflection = GS2C_ItemSellRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_SellRecordList::kSellRecordsFieldNumber;
#endif  // !_MSC_VER

GS2C_SellRecordList::GS2C_SellRecordList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_SellRecordList::InitAsDefaultInstance() {
}

GS2C_SellRecordList::GS2C_SellRecordList(const GS2C_SellRecordList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_SellRecordList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_SellRecordList::~GS2C_SellRecordList() {
  SharedDtor();
}

void GS2C_SellRecordList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_SellRecordList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_SellRecordList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_SellRecordList_descriptor_;
}

const GS2C_SellRecordList& GS2C_SellRecordList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Item_2eproto();
  return *default_instance_;
}

GS2C_SellRecordList* GS2C_SellRecordList::default_instance_ = NULL;

GS2C_SellRecordList* GS2C_SellRecordList::New() const {
  return new GS2C_SellRecordList;
}

void GS2C_SellRecordList::Clear() {
  sell_records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_SellRecordList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GS2C_ItemSellRecord sell_records = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sell_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sell_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sell_records;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_SellRecordList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GS2C_ItemSellRecord sell_records = 1;
  for (int i = 0; i < this->sell_records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sell_records(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_SellRecordList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GS2C_ItemSellRecord sell_records = 1;
  for (int i = 0; i < this->sell_records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sell_records(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_SellRecordList::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GS2C_ItemSellRecord sell_records = 1;
  total_size += 1 * this->sell_records_size();
  for (int i = 0; i < this->sell_records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sell_records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_SellRecordList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_SellRecordList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_SellRecordList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_SellRecordList::MergeFrom(const GS2C_SellRecordList& from) {
  GOOGLE_CHECK_NE(&from, this);
  sell_records_.MergeFrom(from.sell_records_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_SellRecordList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_SellRecordList::CopyFrom(const GS2C_SellRecordList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_SellRecordList::IsInitialized() const {

  return true;
}

void GS2C_SellRecordList::Swap(GS2C_SellRecordList* other) {
  if (other != this) {
    sell_records_.Swap(&other->sell_records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_SellRecordList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_SellRecordList_descriptor_;
  metadata.reflection = GS2C_SellRecordList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_SellProgramInfo::kProgramIdFieldNumber;
const int GS2C_SellProgramInfo::kRecordValidTimeFieldNumber;
const int GS2C_SellProgramInfo::kRecordsFieldNumber;
#endif  // !_MSC_VER

GS2C_SellProgramInfo::GS2C_SellProgramInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_SellProgramInfo::InitAsDefaultInstance() {
  records_ = const_cast< ::pb::GS2C_SellRecordList*>(&::pb::GS2C_SellRecordList::default_instance());
}

GS2C_SellProgramInfo::GS2C_SellProgramInfo(const GS2C_SellProgramInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_SellProgramInfo::SharedCtor() {
  _cached_size_ = 0;
  program_id_ = 0u;
  record_valid_time_ = GOOGLE_LONGLONG(0);
  records_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_SellProgramInfo::~GS2C_SellProgramInfo() {
  SharedDtor();
}

void GS2C_SellProgramInfo::SharedDtor() {
  if (this != default_instance_) {
    delete records_;
  }
}

void GS2C_SellProgramInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_SellProgramInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_SellProgramInfo_descriptor_;
}

const GS2C_SellProgramInfo& GS2C_SellProgramInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Item_2eproto();
  return *default_instance_;
}

GS2C_SellProgramInfo* GS2C_SellProgramInfo::default_instance_ = NULL;

GS2C_SellProgramInfo* GS2C_SellProgramInfo::New() const {
  return new GS2C_SellProgramInfo;
}

void GS2C_SellProgramInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    program_id_ = 0u;
    record_valid_time_ = GOOGLE_LONGLONG(0);
    if (has_records()) {
      if (records_ != NULL) records_->::pb::GS2C_SellRecordList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_SellProgramInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 program_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &program_id_)));
          set_has_program_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_record_valid_time;
        break;
      }

      // optional int64 record_valid_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_record_valid_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &record_valid_time_)));
          set_has_record_valid_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_records;
        break;
      }

      // optional .pb.GS2C_SellRecordList records = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_SellProgramInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 program_id = 1;
  if (has_program_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->program_id(), output);
  }

  // optional int64 record_valid_time = 2;
  if (has_record_valid_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->record_valid_time(), output);
  }

  // optional .pb.GS2C_SellRecordList records = 3;
  if (has_records()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->records(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_SellProgramInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 program_id = 1;
  if (has_program_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->program_id(), target);
  }

  // optional int64 record_valid_time = 2;
  if (has_record_valid_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->record_valid_time(), target);
  }

  // optional .pb.GS2C_SellRecordList records = 3;
  if (has_records()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->records(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_SellProgramInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 program_id = 1;
    if (has_program_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->program_id());
    }

    // optional int64 record_valid_time = 2;
    if (has_record_valid_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->record_valid_time());
    }

    // optional .pb.GS2C_SellRecordList records = 3;
    if (has_records()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->records());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_SellProgramInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_SellProgramInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_SellProgramInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_SellProgramInfo::MergeFrom(const GS2C_SellProgramInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_program_id()) {
      set_program_id(from.program_id());
    }
    if (from.has_record_valid_time()) {
      set_record_valid_time(from.record_valid_time());
    }
    if (from.has_records()) {
      mutable_records()->::pb::GS2C_SellRecordList::MergeFrom(from.records());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_SellProgramInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_SellProgramInfo::CopyFrom(const GS2C_SellProgramInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_SellProgramInfo::IsInitialized() const {

  return true;
}

void GS2C_SellProgramInfo::Swap(GS2C_SellProgramInfo* other) {
  if (other != this) {
    std::swap(program_id_, other->program_id_);
    std::swap(record_valid_time_, other->record_valid_time_);
    std::swap(records_, other->records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_SellProgramInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_SellProgramInfo_descriptor_;
  metadata.reflection = GS2C_SellProgramInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_SellRandomProgram::kVictimTypeFieldNumber;
const int GS2C_SellRandomProgram::kProgramIdFieldNumber;
const int GS2C_SellRandomProgram::kAutoRefreshTimeFieldNumber;
const int GS2C_SellRandomProgram::kTodayManualRefreshCountFieldNumber;
const int GS2C_SellRandomProgram::kLastManualRefreshTimeFieldNumber;
#endif  // !_MSC_VER

GS2C_SellRandomProgram::GS2C_SellRandomProgram()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_SellRandomProgram::InitAsDefaultInstance() {
}

GS2C_SellRandomProgram::GS2C_SellRandomProgram(const GS2C_SellRandomProgram& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_SellRandomProgram::SharedCtor() {
  _cached_size_ = 0;
  victim_type_ = 0u;
  program_id_ = 0u;
  auto_refresh_time_ = GOOGLE_LONGLONG(0);
  today_manual_refresh_count_ = 0u;
  last_manual_refresh_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_SellRandomProgram::~GS2C_SellRandomProgram() {
  SharedDtor();
}

void GS2C_SellRandomProgram::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_SellRandomProgram::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_SellRandomProgram::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_SellRandomProgram_descriptor_;
}

const GS2C_SellRandomProgram& GS2C_SellRandomProgram::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Item_2eproto();
  return *default_instance_;
}

GS2C_SellRandomProgram* GS2C_SellRandomProgram::default_instance_ = NULL;

GS2C_SellRandomProgram* GS2C_SellRandomProgram::New() const {
  return new GS2C_SellRandomProgram;
}

void GS2C_SellRandomProgram::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    victim_type_ = 0u;
    program_id_ = 0u;
    auto_refresh_time_ = GOOGLE_LONGLONG(0);
    today_manual_refresh_count_ = 0u;
    last_manual_refresh_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_SellRandomProgram::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 victim_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &victim_type_)));
          set_has_victim_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_program_id;
        break;
      }

      // optional uint32 program_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_program_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &program_id_)));
          set_has_program_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_auto_refresh_time;
        break;
      }

      // optional int64 auto_refresh_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &auto_refresh_time_)));
          set_has_auto_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_today_manual_refresh_count;
        break;
      }

      // optional uint32 today_manual_refresh_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_manual_refresh_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_manual_refresh_count_)));
          set_has_today_manual_refresh_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_manual_refresh_time;
        break;
      }

      // optional int64 last_manual_refresh_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_manual_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_manual_refresh_time_)));
          set_has_last_manual_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_SellRandomProgram::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 victim_type = 1;
  if (has_victim_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->victim_type(), output);
  }

  // optional uint32 program_id = 2;
  if (has_program_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->program_id(), output);
  }

  // optional int64 auto_refresh_time = 3;
  if (has_auto_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->auto_refresh_time(), output);
  }

  // optional uint32 today_manual_refresh_count = 4;
  if (has_today_manual_refresh_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->today_manual_refresh_count(), output);
  }

  // optional int64 last_manual_refresh_time = 5;
  if (has_last_manual_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->last_manual_refresh_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_SellRandomProgram::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 victim_type = 1;
  if (has_victim_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->victim_type(), target);
  }

  // optional uint32 program_id = 2;
  if (has_program_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->program_id(), target);
  }

  // optional int64 auto_refresh_time = 3;
  if (has_auto_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->auto_refresh_time(), target);
  }

  // optional uint32 today_manual_refresh_count = 4;
  if (has_today_manual_refresh_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->today_manual_refresh_count(), target);
  }

  // optional int64 last_manual_refresh_time = 5;
  if (has_last_manual_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->last_manual_refresh_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_SellRandomProgram::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 victim_type = 1;
    if (has_victim_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->victim_type());
    }

    // optional uint32 program_id = 2;
    if (has_program_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->program_id());
    }

    // optional int64 auto_refresh_time = 3;
    if (has_auto_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->auto_refresh_time());
    }

    // optional uint32 today_manual_refresh_count = 4;
    if (has_today_manual_refresh_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_manual_refresh_count());
    }

    // optional int64 last_manual_refresh_time = 5;
    if (has_last_manual_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_manual_refresh_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_SellRandomProgram::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_SellRandomProgram* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_SellRandomProgram*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_SellRandomProgram::MergeFrom(const GS2C_SellRandomProgram& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_victim_type()) {
      set_victim_type(from.victim_type());
    }
    if (from.has_program_id()) {
      set_program_id(from.program_id());
    }
    if (from.has_auto_refresh_time()) {
      set_auto_refresh_time(from.auto_refresh_time());
    }
    if (from.has_today_manual_refresh_count()) {
      set_today_manual_refresh_count(from.today_manual_refresh_count());
    }
    if (from.has_last_manual_refresh_time()) {
      set_last_manual_refresh_time(from.last_manual_refresh_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_SellRandomProgram::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_SellRandomProgram::CopyFrom(const GS2C_SellRandomProgram& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_SellRandomProgram::IsInitialized() const {

  return true;
}

void GS2C_SellRandomProgram::Swap(GS2C_SellRandomProgram* other) {
  if (other != this) {
    std::swap(victim_type_, other->victim_type_);
    std::swap(program_id_, other->program_id_);
    std::swap(auto_refresh_time_, other->auto_refresh_time_);
    std::swap(today_manual_refresh_count_, other->today_manual_refresh_count_);
    std::swap(last_manual_refresh_time_, other->last_manual_refresh_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_SellRandomProgram::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_SellRandomProgram_descriptor_;
  metadata.reflection = GS2C_SellRandomProgram_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_AllSellData::kSellProgramInfosFieldNumber;
const int GS2C_AllSellData::kRandomProgramsFieldNumber;
const int GS2C_AllSellData::kSellRecordsFieldNumber;
#endif  // !_MSC_VER

GS2C_AllSellData::GS2C_AllSellData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_AllSellData::InitAsDefaultInstance() {
}

GS2C_AllSellData::GS2C_AllSellData(const GS2C_AllSellData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_AllSellData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_AllSellData::~GS2C_AllSellData() {
  SharedDtor();
}

void GS2C_AllSellData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_AllSellData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_AllSellData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_AllSellData_descriptor_;
}

const GS2C_AllSellData& GS2C_AllSellData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Item_2eproto();
  return *default_instance_;
}

GS2C_AllSellData* GS2C_AllSellData::default_instance_ = NULL;

GS2C_AllSellData* GS2C_AllSellData::New() const {
  return new GS2C_AllSellData;
}

void GS2C_AllSellData::Clear() {
  sell_program_infos_.Clear();
  random_programs_.Clear();
  sell_records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_AllSellData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GS2C_SellProgramInfo sell_program_infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sell_program_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sell_program_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sell_program_infos;
        if (input->ExpectTag(18)) goto parse_random_programs;
        break;
      }

      // repeated .pb.GS2C_SellRandomProgram random_programs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_random_programs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_random_programs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_random_programs;
        if (input->ExpectTag(26)) goto parse_sell_records;
        break;
      }

      // repeated .pb.GS2C_ItemSellRecord sell_records = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sell_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sell_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sell_records;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_AllSellData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GS2C_SellProgramInfo sell_program_infos = 1;
  for (int i = 0; i < this->sell_program_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sell_program_infos(i), output);
  }

  // repeated .pb.GS2C_SellRandomProgram random_programs = 2;
  for (int i = 0; i < this->random_programs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->random_programs(i), output);
  }

  // repeated .pb.GS2C_ItemSellRecord sell_records = 3;
  for (int i = 0; i < this->sell_records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sell_records(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_AllSellData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GS2C_SellProgramInfo sell_program_infos = 1;
  for (int i = 0; i < this->sell_program_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sell_program_infos(i), target);
  }

  // repeated .pb.GS2C_SellRandomProgram random_programs = 2;
  for (int i = 0; i < this->random_programs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->random_programs(i), target);
  }

  // repeated .pb.GS2C_ItemSellRecord sell_records = 3;
  for (int i = 0; i < this->sell_records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sell_records(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_AllSellData::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GS2C_SellProgramInfo sell_program_infos = 1;
  total_size += 1 * this->sell_program_infos_size();
  for (int i = 0; i < this->sell_program_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sell_program_infos(i));
  }

  // repeated .pb.GS2C_SellRandomProgram random_programs = 2;
  total_size += 1 * this->random_programs_size();
  for (int i = 0; i < this->random_programs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->random_programs(i));
  }

  // repeated .pb.GS2C_ItemSellRecord sell_records = 3;
  total_size += 1 * this->sell_records_size();
  for (int i = 0; i < this->sell_records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sell_records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_AllSellData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_AllSellData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_AllSellData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_AllSellData::MergeFrom(const GS2C_AllSellData& from) {
  GOOGLE_CHECK_NE(&from, this);
  sell_program_infos_.MergeFrom(from.sell_program_infos_);
  random_programs_.MergeFrom(from.random_programs_);
  sell_records_.MergeFrom(from.sell_records_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_AllSellData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_AllSellData::CopyFrom(const GS2C_AllSellData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_AllSellData::IsInitialized() const {

  return true;
}

void GS2C_AllSellData::Swap(GS2C_AllSellData* other) {
  if (other != this) {
    sell_program_infos_.Swap(&other->sell_program_infos_);
    random_programs_.Swap(&other->random_programs_);
    sell_records_.Swap(&other->sell_records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_AllSellData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_AllSellData_descriptor_;
  metadata.reflection = GS2C_AllSellData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_LootRecord::kLootTypeIdFieldNumber;
const int GS2C_LootRecord::kRollSuccessCountFieldNumber;
const int GS2C_LootRecord::kRollCountFieldNumber;
#endif  // !_MSC_VER

GS2C_LootRecord::GS2C_LootRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_LootRecord::InitAsDefaultInstance() {
}

GS2C_LootRecord::GS2C_LootRecord(const GS2C_LootRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_LootRecord::SharedCtor() {
  _cached_size_ = 0;
  loot_type_id_ = GOOGLE_ULONGLONG(0);
  roll_success_count_ = 0u;
  roll_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_LootRecord::~GS2C_LootRecord() {
  SharedDtor();
}

void GS2C_LootRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_LootRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_LootRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_LootRecord_descriptor_;
}

const GS2C_LootRecord& GS2C_LootRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Item_2eproto();
  return *default_instance_;
}

GS2C_LootRecord* GS2C_LootRecord::default_instance_ = NULL;

GS2C_LootRecord* GS2C_LootRecord::New() const {
  return new GS2C_LootRecord;
}

void GS2C_LootRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    loot_type_id_ = GOOGLE_ULONGLONG(0);
    roll_success_count_ = 0u;
    roll_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_LootRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 loot_type_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &loot_type_id_)));
          set_has_loot_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roll_success_count;
        break;
      }

      // optional uint32 roll_success_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roll_success_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roll_success_count_)));
          set_has_roll_success_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roll_count;
        break;
      }

      // optional uint32 roll_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roll_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roll_count_)));
          set_has_roll_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_LootRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 loot_type_id = 1;
  if (has_loot_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->loot_type_id(), output);
  }

  // optional uint32 roll_success_count = 2;
  if (has_roll_success_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roll_success_count(), output);
  }

  // optional uint32 roll_count = 3;
  if (has_roll_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->roll_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_LootRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 loot_type_id = 1;
  if (has_loot_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->loot_type_id(), target);
  }

  // optional uint32 roll_success_count = 2;
  if (has_roll_success_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roll_success_count(), target);
  }

  // optional uint32 roll_count = 3;
  if (has_roll_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->roll_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_LootRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 loot_type_id = 1;
    if (has_loot_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->loot_type_id());
    }

    // optional uint32 roll_success_count = 2;
    if (has_roll_success_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roll_success_count());
    }

    // optional uint32 roll_count = 3;
    if (has_roll_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roll_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_LootRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_LootRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_LootRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_LootRecord::MergeFrom(const GS2C_LootRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loot_type_id()) {
      set_loot_type_id(from.loot_type_id());
    }
    if (from.has_roll_success_count()) {
      set_roll_success_count(from.roll_success_count());
    }
    if (from.has_roll_count()) {
      set_roll_count(from.roll_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_LootRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_LootRecord::CopyFrom(const GS2C_LootRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_LootRecord::IsInitialized() const {

  return true;
}

void GS2C_LootRecord::Swap(GS2C_LootRecord* other) {
  if (other != this) {
    std::swap(loot_type_id_, other->loot_type_id_);
    std::swap(roll_success_count_, other->roll_success_count_);
    std::swap(roll_count_, other->roll_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_LootRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_LootRecord_descriptor_;
  metadata.reflection = GS2C_LootRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_AllLootRecord::kRecordsFieldNumber;
#endif  // !_MSC_VER

GS2C_AllLootRecord::GS2C_AllLootRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_AllLootRecord::InitAsDefaultInstance() {
}

GS2C_AllLootRecord::GS2C_AllLootRecord(const GS2C_AllLootRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_AllLootRecord::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_AllLootRecord::~GS2C_AllLootRecord() {
  SharedDtor();
}

void GS2C_AllLootRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_AllLootRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_AllLootRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_AllLootRecord_descriptor_;
}

const GS2C_AllLootRecord& GS2C_AllLootRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Item_2eproto();
  return *default_instance_;
}

GS2C_AllLootRecord* GS2C_AllLootRecord::default_instance_ = NULL;

GS2C_AllLootRecord* GS2C_AllLootRecord::New() const {
  return new GS2C_AllLootRecord;
}

void GS2C_AllLootRecord::Clear() {
  records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_AllLootRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GS2C_LootRecord records = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_records;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_AllLootRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GS2C_LootRecord records = 1;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->records(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_AllLootRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GS2C_LootRecord records = 1;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->records(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_AllLootRecord::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GS2C_LootRecord records = 1;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_AllLootRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_AllLootRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_AllLootRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_AllLootRecord::MergeFrom(const GS2C_AllLootRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  records_.MergeFrom(from.records_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_AllLootRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_AllLootRecord::CopyFrom(const GS2C_AllLootRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_AllLootRecord::IsInitialized() const {

  return true;
}

void GS2C_AllLootRecord::Swap(GS2C_AllLootRecord* other) {
  if (other != this) {
    records_.Swap(&other->records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_AllLootRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_AllLootRecord_descriptor_;
  metadata.reflection = GS2C_AllLootRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_LotteryFreeRecord::kLotteryTypeFieldNumber;
const int GS2C_LotteryFreeRecord::kRemainFreeCountFieldNumber;
const int GS2C_LotteryFreeRecord::kNextFreeLotteryTimeFieldNumber;
#endif  // !_MSC_VER

GS2C_LotteryFreeRecord::GS2C_LotteryFreeRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_LotteryFreeRecord::InitAsDefaultInstance() {
}

GS2C_LotteryFreeRecord::GS2C_LotteryFreeRecord(const GS2C_LotteryFreeRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_LotteryFreeRecord::SharedCtor() {
  _cached_size_ = 0;
  lottery_type_ = 0u;
  remain_free_count_ = 0u;
  next_free_lottery_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_LotteryFreeRecord::~GS2C_LotteryFreeRecord() {
  SharedDtor();
}

void GS2C_LotteryFreeRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_LotteryFreeRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_LotteryFreeRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_LotteryFreeRecord_descriptor_;
}

const GS2C_LotteryFreeRecord& GS2C_LotteryFreeRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Item_2eproto();
  return *default_instance_;
}

GS2C_LotteryFreeRecord* GS2C_LotteryFreeRecord::default_instance_ = NULL;

GS2C_LotteryFreeRecord* GS2C_LotteryFreeRecord::New() const {
  return new GS2C_LotteryFreeRecord;
}

void GS2C_LotteryFreeRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lottery_type_ = 0u;
    remain_free_count_ = 0u;
    next_free_lottery_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_LotteryFreeRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 lottery_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lottery_type_)));
          set_has_lottery_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_remain_free_count;
        break;
      }

      // optional uint32 remain_free_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_free_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remain_free_count_)));
          set_has_remain_free_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_next_free_lottery_time;
        break;
      }

      // optional int64 next_free_lottery_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_free_lottery_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_free_lottery_time_)));
          set_has_next_free_lottery_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_LotteryFreeRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 lottery_type = 1;
  if (has_lottery_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lottery_type(), output);
  }

  // optional uint32 remain_free_count = 2;
  if (has_remain_free_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remain_free_count(), output);
  }

  // optional int64 next_free_lottery_time = 3;
  if (has_next_free_lottery_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->next_free_lottery_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_LotteryFreeRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 lottery_type = 1;
  if (has_lottery_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lottery_type(), target);
  }

  // optional uint32 remain_free_count = 2;
  if (has_remain_free_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->remain_free_count(), target);
  }

  // optional int64 next_free_lottery_time = 3;
  if (has_next_free_lottery_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->next_free_lottery_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_LotteryFreeRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 lottery_type = 1;
    if (has_lottery_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lottery_type());
    }

    // optional uint32 remain_free_count = 2;
    if (has_remain_free_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remain_free_count());
    }

    // optional int64 next_free_lottery_time = 3;
    if (has_next_free_lottery_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->next_free_lottery_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_LotteryFreeRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_LotteryFreeRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_LotteryFreeRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_LotteryFreeRecord::MergeFrom(const GS2C_LotteryFreeRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lottery_type()) {
      set_lottery_type(from.lottery_type());
    }
    if (from.has_remain_free_count()) {
      set_remain_free_count(from.remain_free_count());
    }
    if (from.has_next_free_lottery_time()) {
      set_next_free_lottery_time(from.next_free_lottery_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_LotteryFreeRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_LotteryFreeRecord::CopyFrom(const GS2C_LotteryFreeRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_LotteryFreeRecord::IsInitialized() const {

  return true;
}

void GS2C_LotteryFreeRecord::Swap(GS2C_LotteryFreeRecord* other) {
  if (other != this) {
    std::swap(lottery_type_, other->lottery_type_);
    std::swap(remain_free_count_, other->remain_free_count_);
    std::swap(next_free_lottery_time_, other->next_free_lottery_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_LotteryFreeRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_LotteryFreeRecord_descriptor_;
  metadata.reflection = GS2C_LotteryFreeRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_AllLotteryInfo::kFreeRecordsFieldNumber;
#endif  // !_MSC_VER

GS2C_AllLotteryInfo::GS2C_AllLotteryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_AllLotteryInfo::InitAsDefaultInstance() {
}

GS2C_AllLotteryInfo::GS2C_AllLotteryInfo(const GS2C_AllLotteryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_AllLotteryInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_AllLotteryInfo::~GS2C_AllLotteryInfo() {
  SharedDtor();
}

void GS2C_AllLotteryInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_AllLotteryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_AllLotteryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_AllLotteryInfo_descriptor_;
}

const GS2C_AllLotteryInfo& GS2C_AllLotteryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Item_2eproto();
  return *default_instance_;
}

GS2C_AllLotteryInfo* GS2C_AllLotteryInfo::default_instance_ = NULL;

GS2C_AllLotteryInfo* GS2C_AllLotteryInfo::New() const {
  return new GS2C_AllLotteryInfo;
}

void GS2C_AllLotteryInfo::Clear() {
  free_records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_AllLotteryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GS2C_LotteryFreeRecord free_records = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_free_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_free_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_free_records;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_AllLotteryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GS2C_LotteryFreeRecord free_records = 1;
  for (int i = 0; i < this->free_records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->free_records(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_AllLotteryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GS2C_LotteryFreeRecord free_records = 1;
  for (int i = 0; i < this->free_records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->free_records(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_AllLotteryInfo::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GS2C_LotteryFreeRecord free_records = 1;
  total_size += 1 * this->free_records_size();
  for (int i = 0; i < this->free_records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->free_records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_AllLotteryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_AllLotteryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_AllLotteryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_AllLotteryInfo::MergeFrom(const GS2C_AllLotteryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  free_records_.MergeFrom(from.free_records_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_AllLotteryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_AllLotteryInfo::CopyFrom(const GS2C_AllLotteryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_AllLotteryInfo::IsInitialized() const {

  return true;
}

void GS2C_AllLotteryInfo::Swap(GS2C_AllLotteryInfo* other) {
  if (other != this) {
    free_records_.Swap(&other->free_records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_AllLotteryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_AllLotteryInfo_descriptor_;
  metadata.reflection = GS2C_AllLotteryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_LootResult::kErrCodeFieldNumber;
const int GS2C_LootResult::kLootListFieldNumber;
#endif  // !_MSC_VER

GS2C_LootResult::GS2C_LootResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_LootResult::InitAsDefaultInstance() {
  loot_list_ = const_cast< ::pb::GS2C_LootList*>(&::pb::GS2C_LootList::default_instance());
}

GS2C_LootResult::GS2C_LootResult(const GS2C_LootResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_LootResult::SharedCtor() {
  _cached_size_ = 0;
  err_code_ = 0u;
  loot_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_LootResult::~GS2C_LootResult() {
  SharedDtor();
}

void GS2C_LootResult::SharedDtor() {
  if (this != default_instance_) {
    delete loot_list_;
  }
}

void GS2C_LootResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_LootResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_LootResult_descriptor_;
}

const GS2C_LootResult& GS2C_LootResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Item_2eproto();
  return *default_instance_;
}

GS2C_LootResult* GS2C_LootResult::default_instance_ = NULL;

GS2C_LootResult* GS2C_LootResult::New() const {
  return new GS2C_LootResult;
}

void GS2C_LootResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_code_ = 0u;
    if (has_loot_list()) {
      if (loot_list_ != NULL) loot_list_->::pb::GS2C_LootList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_LootResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 err_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &err_code_)));
          set_has_err_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_loot_list;
        break;
      }

      // optional .pb.GS2C_LootList loot_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loot_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loot_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_LootResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 err_code = 1;
  if (has_err_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->err_code(), output);
  }

  // optional .pb.GS2C_LootList loot_list = 2;
  if (has_loot_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->loot_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_LootResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 err_code = 1;
  if (has_err_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->err_code(), target);
  }

  // optional .pb.GS2C_LootList loot_list = 2;
  if (has_loot_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->loot_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_LootResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 err_code = 1;
    if (has_err_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->err_code());
    }

    // optional .pb.GS2C_LootList loot_list = 2;
    if (has_loot_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loot_list());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_LootResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_LootResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_LootResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_LootResult::MergeFrom(const GS2C_LootResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_code()) {
      set_err_code(from.err_code());
    }
    if (from.has_loot_list()) {
      mutable_loot_list()->::pb::GS2C_LootList::MergeFrom(from.loot_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_LootResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_LootResult::CopyFrom(const GS2C_LootResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_LootResult::IsInitialized() const {

  return true;
}

void GS2C_LootResult::Swap(GS2C_LootResult* other) {
  if (other != this) {
    std::swap(err_code_, other->err_code_);
    std::swap(loot_list_, other->loot_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_LootResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_LootResult_descriptor_;
  metadata.reflection = GS2C_LootResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_LootShopEquipResult::kErrCodeFieldNumber;
const int GS2C_LootShopEquipResult::kLootListFieldNumber;
#endif  // !_MSC_VER

GS2C_LootShopEquipResult::GS2C_LootShopEquipResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_LootShopEquipResult::InitAsDefaultInstance() {
  loot_list_ = const_cast< ::pb::GS2C_Bag*>(&::pb::GS2C_Bag::default_instance());
}

GS2C_LootShopEquipResult::GS2C_LootShopEquipResult(const GS2C_LootShopEquipResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_LootShopEquipResult::SharedCtor() {
  _cached_size_ = 0;
  err_code_ = 0u;
  loot_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_LootShopEquipResult::~GS2C_LootShopEquipResult() {
  SharedDtor();
}

void GS2C_LootShopEquipResult::SharedDtor() {
  if (this != default_instance_) {
    delete loot_list_;
  }
}

void GS2C_LootShopEquipResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_LootShopEquipResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_LootShopEquipResult_descriptor_;
}

const GS2C_LootShopEquipResult& GS2C_LootShopEquipResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Item_2eproto();
  return *default_instance_;
}

GS2C_LootShopEquipResult* GS2C_LootShopEquipResult::default_instance_ = NULL;

GS2C_LootShopEquipResult* GS2C_LootShopEquipResult::New() const {
  return new GS2C_LootShopEquipResult;
}

void GS2C_LootShopEquipResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_code_ = 0u;
    if (has_loot_list()) {
      if (loot_list_ != NULL) loot_list_->::pb::GS2C_Bag::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_LootShopEquipResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 err_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &err_code_)));
          set_has_err_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_loot_list;
        break;
      }

      // optional .pb.GS2C_Bag loot_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loot_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loot_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_LootShopEquipResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 err_code = 1;
  if (has_err_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->err_code(), output);
  }

  // optional .pb.GS2C_Bag loot_list = 2;
  if (has_loot_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->loot_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_LootShopEquipResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 err_code = 1;
  if (has_err_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->err_code(), target);
  }

  // optional .pb.GS2C_Bag loot_list = 2;
  if (has_loot_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->loot_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_LootShopEquipResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 err_code = 1;
    if (has_err_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->err_code());
    }

    // optional .pb.GS2C_Bag loot_list = 2;
    if (has_loot_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loot_list());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_LootShopEquipResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_LootShopEquipResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_LootShopEquipResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_LootShopEquipResult::MergeFrom(const GS2C_LootShopEquipResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_code()) {
      set_err_code(from.err_code());
    }
    if (from.has_loot_list()) {
      mutable_loot_list()->::pb::GS2C_Bag::MergeFrom(from.loot_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_LootShopEquipResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_LootShopEquipResult::CopyFrom(const GS2C_LootShopEquipResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_LootShopEquipResult::IsInitialized() const {

  if (has_loot_list()) {
    if (!this->loot_list().IsInitialized()) return false;
  }
  return true;
}

void GS2C_LootShopEquipResult::Swap(GS2C_LootShopEquipResult* other) {
  if (other != this) {
    std::swap(err_code_, other->err_code_);
    std::swap(loot_list_, other->loot_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_LootShopEquipResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_LootShopEquipResult_descriptor_;
  metadata.reflection = GS2C_LootShopEquipResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
