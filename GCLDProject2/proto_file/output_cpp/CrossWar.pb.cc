// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CrossWar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CrossWar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* Devide_Country_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Devide_Country_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2L_Devide_Country_Infos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2L_Devide_Country_Infos_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Cross_Update_Country_Durable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Cross_Update_Country_Durable_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Notice_CrossWar_State_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Notice_CrossWar_State_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2R_Update_Player_Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2R_Update_Player_Value_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2R_Update_Player_Character_Exp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2R_Update_Player_Character_Exp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Country_Cross_Star_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Country_Cross_Star_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* Country_Stars_Update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Country_Stars_Update_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Enter_Cross_War_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Enter_Cross_War_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Use_Cross_Troops_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Use_Cross_Troops_reflection_ = NULL;
const ::google::protobuf::Descriptor* CR2G_Country_Awards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CR2G_Country_Awards_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateAwardsChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateAwardsChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC2G_Update_Award_Change_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC2G_Update_Award_Change_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_TakeStarAwardRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_TakeStarAwardRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Cross_Donation_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Cross_Donation_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Cross_Donation_Datas_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Cross_Donation_Datas_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC2S_Donate_Goods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC2S_Donate_Goods_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_DONATE_RET_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_DONATE_RET_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Cross_Destroy_Task_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Cross_Destroy_Task_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Cross_Destroy_Task_Infos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Cross_Destroy_Task_Infos_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC2S_Take_Destroy_Task_Award_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC2S_Take_Destroy_Task_Award_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Take_Destroy_Task_Award_Ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Take_Destroy_Task_Award_Ret_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2CR_Attack_Capital_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2CR_Attack_Capital_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Cross_Kill_Task_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Cross_Kill_Task_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC2S_Take_Kill_Task_Award_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC2S_Take_Kill_Task_Award_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Take_Kill_Task_Award_Ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Take_Kill_Task_Award_Ret_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Cross_Ammo_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Cross_Ammo_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Cross_Ammo_Infos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Cross_Ammo_Infos_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC2S_Buy_Ammo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC2S_Buy_Ammo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Buy_Ammo_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Buy_Ammo_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Use_Attack_Hummer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Use_Attack_Hummer_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Attack_Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Attack_Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Cross_Rank_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Cross_Rank_Info_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CROSS_RET_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Donate_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ArsenalType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_CrossWar_2eproto() {
  protobuf_AddDesc_CrossWar_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CrossWar.proto");
  GOOGLE_CHECK(file != NULL);
  Devide_Country_Info_descriptor_ = file->message_type(0);
  static const int Devide_Country_Info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Devide_Country_Info, orig_country_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Devide_Country_Info, devide_country_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Devide_Country_Info, unique_index_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Devide_Country_Info, pros_degree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Devide_Country_Info, country_durable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Devide_Country_Info, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Devide_Country_Info, server_id_),
  };
  Devide_Country_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Devide_Country_Info_descriptor_,
      Devide_Country_Info::default_instance_,
      Devide_Country_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Devide_Country_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Devide_Country_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Devide_Country_Info));
  GS2L_Devide_Country_Infos_descriptor_ = file->message_type(1);
  static const int GS2L_Devide_Country_Infos_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2L_Devide_Country_Infos, countrys_),
  };
  GS2L_Devide_Country_Infos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2L_Devide_Country_Infos_descriptor_,
      GS2L_Devide_Country_Infos::default_instance_,
      GS2L_Devide_Country_Infos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2L_Devide_Country_Infos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2L_Devide_Country_Infos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2L_Devide_Country_Infos));
  GS2C_Cross_Update_Country_Durable_descriptor_ = file->message_type(2);
  static const int GS2C_Cross_Update_Country_Durable_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Update_Country_Durable, crosscountryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Update_Country_Durable, countrydurable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Update_Country_Durable, attcountryid_),
  };
  GS2C_Cross_Update_Country_Durable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Cross_Update_Country_Durable_descriptor_,
      GS2C_Cross_Update_Country_Durable::default_instance_,
      GS2C_Cross_Update_Country_Durable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Update_Country_Durable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Update_Country_Durable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Cross_Update_Country_Durable));
  GS2C_Notice_CrossWar_State_descriptor_ = file->message_type(3);
  static const int GS2C_Notice_CrossWar_State_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Notice_CrossWar_State, curstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Notice_CrossWar_State, stateendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Notice_CrossWar_State, crosscountryid_),
  };
  GS2C_Notice_CrossWar_State_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Notice_CrossWar_State_descriptor_,
      GS2C_Notice_CrossWar_State::default_instance_,
      GS2C_Notice_CrossWar_State_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Notice_CrossWar_State, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Notice_CrossWar_State, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Notice_CrossWar_State));
  GS2R_Update_Player_Value_descriptor_ = file->message_type(4);
  static const int GS2R_Update_Player_Value_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2R_Update_Player_Value, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2R_Update_Player_Value, val_),
  };
  GS2R_Update_Player_Value_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2R_Update_Player_Value_descriptor_,
      GS2R_Update_Player_Value::default_instance_,
      GS2R_Update_Player_Value_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2R_Update_Player_Value, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2R_Update_Player_Value, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2R_Update_Player_Value));
  GS2R_Update_Player_Character_Exp_descriptor_ = file->message_type(5);
  static const int GS2R_Update_Player_Character_Exp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2R_Update_Player_Character_Exp, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2R_Update_Player_Character_Exp, addexp_),
  };
  GS2R_Update_Player_Character_Exp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2R_Update_Player_Character_Exp_descriptor_,
      GS2R_Update_Player_Character_Exp::default_instance_,
      GS2R_Update_Player_Character_Exp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2R_Update_Player_Character_Exp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2R_Update_Player_Character_Exp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2R_Update_Player_Character_Exp));
  Country_Cross_Star_info_descriptor_ = file->message_type(6);
  static const int Country_Cross_Star_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country_Cross_Star_info, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country_Cross_Star_info, starnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country_Cross_Star_info, isdestroied_),
  };
  Country_Cross_Star_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Country_Cross_Star_info_descriptor_,
      Country_Cross_Star_info::default_instance_,
      Country_Cross_Star_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country_Cross_Star_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country_Cross_Star_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Country_Cross_Star_info));
  Country_Stars_Update_descriptor_ = file->message_type(7);
  static const int Country_Stars_Update_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country_Stars_Update, update_stars_),
  };
  Country_Stars_Update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Country_Stars_Update_descriptor_,
      Country_Stars_Update::default_instance_,
      Country_Stars_Update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country_Stars_Update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country_Stars_Update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Country_Stars_Update));
  GS2C_Enter_Cross_War_descriptor_ = file->message_type(8);
  static const int GS2C_Enter_Cross_War_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Enter_Cross_War, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Enter_Cross_War, cityinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Enter_Cross_War, character_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Enter_Cross_War, country_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Enter_Cross_War, cross_country_stars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Enter_Cross_War, constantid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Enter_Cross_War, doublekillendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Enter_Cross_War, hammernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Enter_Cross_War, shieldendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Enter_Cross_War, hastakestaraward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Enter_Cross_War, countrys_),
  };
  GS2C_Enter_Cross_War_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Enter_Cross_War_descriptor_,
      GS2C_Enter_Cross_War::default_instance_,
      GS2C_Enter_Cross_War_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Enter_Cross_War, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Enter_Cross_War, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Enter_Cross_War));
  C2GS_Use_Cross_Troops_descriptor_ = file->message_type(9);
  static const int C2GS_Use_Cross_Troops_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Use_Cross_Troops, destcityid_),
  };
  C2GS_Use_Cross_Troops_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Use_Cross_Troops_descriptor_,
      C2GS_Use_Cross_Troops::default_instance_,
      C2GS_Use_Cross_Troops_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Use_Cross_Troops, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Use_Cross_Troops, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Use_Cross_Troops));
  CR2G_Country_Awards_descriptor_ = file->message_type(10);
  static const int CR2G_Country_Awards_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CR2G_Country_Awards, unique_index_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CR2G_Country_Awards, defanceawardtoexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CR2G_Country_Awards, attackawardtoexp_),
  };
  CR2G_Country_Awards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CR2G_Country_Awards_descriptor_,
      CR2G_Country_Awards::default_instance_,
      CR2G_Country_Awards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CR2G_Country_Awards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CR2G_Country_Awards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CR2G_Country_Awards));
  UpdateAwardsChange_descriptor_ = file->message_type(11);
  static const int UpdateAwardsChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAwardsChange, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAwardsChange, num_),
  };
  UpdateAwardsChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateAwardsChange_descriptor_,
      UpdateAwardsChange::default_instance_,
      UpdateAwardsChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAwardsChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAwardsChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateAwardsChange));
  SC2G_Update_Award_Change_descriptor_ = file->message_type(12);
  static const int SC2G_Update_Award_Change_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_Update_Award_Change, awards_),
  };
  SC2G_Update_Award_Change_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC2G_Update_Award_Change_descriptor_,
      SC2G_Update_Award_Change::default_instance_,
      SC2G_Update_Award_Change_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_Update_Award_Change, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_Update_Award_Change, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC2G_Update_Award_Change));
  GS2C_TakeStarAwardRet_descriptor_ = file->message_type(13);
  static const int GS2C_TakeStarAwardRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_TakeStarAwardRet, ret_),
  };
  GS2C_TakeStarAwardRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_TakeStarAwardRet_descriptor_,
      GS2C_TakeStarAwardRet::default_instance_,
      GS2C_TakeStarAwardRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_TakeStarAwardRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_TakeStarAwardRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_TakeStarAwardRet));
  GS2C_Cross_Donation_Data_descriptor_ = file->message_type(14);
  static const int GS2C_Cross_Donation_Data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Donation_Data, item_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Donation_Data, count_),
  };
  GS2C_Cross_Donation_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Cross_Donation_Data_descriptor_,
      GS2C_Cross_Donation_Data::default_instance_,
      GS2C_Cross_Donation_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Donation_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Donation_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Cross_Donation_Data));
  GS2C_Cross_Donation_Datas_descriptor_ = file->message_type(15);
  static const int GS2C_Cross_Donation_Datas_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Donation_Datas, donation_datas_),
  };
  GS2C_Cross_Donation_Datas_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Cross_Donation_Datas_descriptor_,
      GS2C_Cross_Donation_Datas::default_instance_,
      GS2C_Cross_Donation_Datas_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Donation_Datas, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Donation_Datas, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Cross_Donation_Datas));
  GC2S_Donate_Goods_descriptor_ = file->message_type(16);
  static const int GC2S_Donate_Goods_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC2S_Donate_Goods, item_type_),
  };
  GC2S_Donate_Goods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC2S_Donate_Goods_descriptor_,
      GC2S_Donate_Goods::default_instance_,
      GC2S_Donate_Goods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC2S_Donate_Goods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC2S_Donate_Goods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC2S_Donate_Goods));
  GS2C_DONATE_RET_descriptor_ = file->message_type(17);
  static const int GS2C_DONATE_RET_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DONATE_RET, item_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DONATE_RET, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DONATE_RET, count_),
  };
  GS2C_DONATE_RET_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_DONATE_RET_descriptor_,
      GS2C_DONATE_RET::default_instance_,
      GS2C_DONATE_RET_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DONATE_RET, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DONATE_RET, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_DONATE_RET));
  GS2C_Cross_Destroy_Task_Info_descriptor_ = file->message_type(18);
  static const int GS2C_Cross_Destroy_Task_Info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Destroy_Task_Info, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Destroy_Task_Info, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Destroy_Task_Info, is_take_),
  };
  GS2C_Cross_Destroy_Task_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Cross_Destroy_Task_Info_descriptor_,
      GS2C_Cross_Destroy_Task_Info::default_instance_,
      GS2C_Cross_Destroy_Task_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Destroy_Task_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Destroy_Task_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Cross_Destroy_Task_Info));
  GS2C_Cross_Destroy_Task_Infos_descriptor_ = file->message_type(19);
  static const int GS2C_Cross_Destroy_Task_Infos_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Destroy_Task_Infos, task_list_),
  };
  GS2C_Cross_Destroy_Task_Infos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Cross_Destroy_Task_Infos_descriptor_,
      GS2C_Cross_Destroy_Task_Infos::default_instance_,
      GS2C_Cross_Destroy_Task_Infos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Destroy_Task_Infos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Destroy_Task_Infos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Cross_Destroy_Task_Infos));
  GC2S_Take_Destroy_Task_Award_descriptor_ = file->message_type(20);
  static const int GC2S_Take_Destroy_Task_Award_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC2S_Take_Destroy_Task_Award, task_id_),
  };
  GC2S_Take_Destroy_Task_Award_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC2S_Take_Destroy_Task_Award_descriptor_,
      GC2S_Take_Destroy_Task_Award::default_instance_,
      GC2S_Take_Destroy_Task_Award_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC2S_Take_Destroy_Task_Award, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC2S_Take_Destroy_Task_Award, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC2S_Take_Destroy_Task_Award));
  GS2C_Take_Destroy_Task_Award_Ret_descriptor_ = file->message_type(21);
  static const int GS2C_Take_Destroy_Task_Award_Ret_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_Destroy_Task_Award_Ret, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_Destroy_Task_Award_Ret, task_info_),
  };
  GS2C_Take_Destroy_Task_Award_Ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Take_Destroy_Task_Award_Ret_descriptor_,
      GS2C_Take_Destroy_Task_Award_Ret::default_instance_,
      GS2C_Take_Destroy_Task_Award_Ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_Destroy_Task_Award_Ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_Destroy_Task_Award_Ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Take_Destroy_Task_Award_Ret));
  C2CR_Attack_Capital_descriptor_ = file->message_type(22);
  static const int C2CR_Attack_Capital_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2CR_Attack_Capital, hero_in_city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2CR_Attack_Capital, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2CR_Attack_Capital, dest_city_id_),
  };
  C2CR_Attack_Capital_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2CR_Attack_Capital_descriptor_,
      C2CR_Attack_Capital::default_instance_,
      C2CR_Attack_Capital_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2CR_Attack_Capital, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2CR_Attack_Capital, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2CR_Attack_Capital));
  GS2C_Cross_Kill_Task_Info_descriptor_ = file->message_type(23);
  static const int GS2C_Cross_Kill_Task_Info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Kill_Task_Info, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Kill_Task_Info, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Kill_Task_Info, is_take_),
  };
  GS2C_Cross_Kill_Task_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Cross_Kill_Task_Info_descriptor_,
      GS2C_Cross_Kill_Task_Info::default_instance_,
      GS2C_Cross_Kill_Task_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Kill_Task_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Kill_Task_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Cross_Kill_Task_Info));
  GC2S_Take_Kill_Task_Award_descriptor_ = file->message_type(24);
  static const int GC2S_Take_Kill_Task_Award_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC2S_Take_Kill_Task_Award, phase_index_),
  };
  GC2S_Take_Kill_Task_Award_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC2S_Take_Kill_Task_Award_descriptor_,
      GC2S_Take_Kill_Task_Award::default_instance_,
      GC2S_Take_Kill_Task_Award_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC2S_Take_Kill_Task_Award, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC2S_Take_Kill_Task_Award, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC2S_Take_Kill_Task_Award));
  GS2C_Take_Kill_Task_Award_Ret_descriptor_ = file->message_type(25);
  static const int GS2C_Take_Kill_Task_Award_Ret_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_Kill_Task_Award_Ret, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_Kill_Task_Award_Ret, task_info_),
  };
  GS2C_Take_Kill_Task_Award_Ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Take_Kill_Task_Award_Ret_descriptor_,
      GS2C_Take_Kill_Task_Award_Ret::default_instance_,
      GS2C_Take_Kill_Task_Award_Ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_Kill_Task_Award_Ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_Kill_Task_Award_Ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Take_Kill_Task_Award_Ret));
  GS2C_Cross_Ammo_Info_descriptor_ = file->message_type(26);
  static const int GS2C_Cross_Ammo_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Ammo_Info, itemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Ammo_Info, remain_num_),
  };
  GS2C_Cross_Ammo_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Cross_Ammo_Info_descriptor_,
      GS2C_Cross_Ammo_Info::default_instance_,
      GS2C_Cross_Ammo_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Ammo_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Ammo_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Cross_Ammo_Info));
  GS2C_Cross_Ammo_Infos_descriptor_ = file->message_type(27);
  static const int GS2C_Cross_Ammo_Infos_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Ammo_Infos, task_list_),
  };
  GS2C_Cross_Ammo_Infos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Cross_Ammo_Infos_descriptor_,
      GS2C_Cross_Ammo_Infos::default_instance_,
      GS2C_Cross_Ammo_Infos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Ammo_Infos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Ammo_Infos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Cross_Ammo_Infos));
  GC2S_Buy_Ammo_descriptor_ = file->message_type(28);
  static const int GC2S_Buy_Ammo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC2S_Buy_Ammo, itemtype_),
  };
  GC2S_Buy_Ammo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC2S_Buy_Ammo_descriptor_,
      GC2S_Buy_Ammo::default_instance_,
      GC2S_Buy_Ammo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC2S_Buy_Ammo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC2S_Buy_Ammo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC2S_Buy_Ammo));
  GS2C_Buy_Ammo_Rsp_descriptor_ = file->message_type(29);
  static const int GS2C_Buy_Ammo_Rsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Buy_Ammo_Rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Buy_Ammo_Rsp, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Buy_Ammo_Rsp, ammo_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Buy_Ammo_Rsp, killtimeendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Buy_Ammo_Rsp, hammernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Buy_Ammo_Rsp, shieldendtime_),
  };
  GS2C_Buy_Ammo_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Buy_Ammo_Rsp_descriptor_,
      GS2C_Buy_Ammo_Rsp::default_instance_,
      GS2C_Buy_Ammo_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Buy_Ammo_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Buy_Ammo_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Buy_Ammo_Rsp));
  GS2C_Use_Attack_Hummer_descriptor_ = file->message_type(30);
  static const int GS2C_Use_Attack_Hummer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Use_Attack_Hummer, country_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Use_Attack_Hummer, heroid_),
  };
  GS2C_Use_Attack_Hummer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Use_Attack_Hummer_descriptor_,
      GS2C_Use_Attack_Hummer::default_instance_,
      GS2C_Use_Attack_Hummer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Use_Attack_Hummer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Use_Attack_Hummer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Use_Attack_Hummer));
  GS2C_Attack_Result_descriptor_ = file->message_type(31);
  static const int GS2C_Attack_Result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Attack_Result, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Attack_Result, hammernum_),
  };
  GS2C_Attack_Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Attack_Result_descriptor_,
      GS2C_Attack_Result::default_instance_,
      GS2C_Attack_Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Attack_Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Attack_Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Attack_Result));
  GS2C_Cross_Rank_Info_descriptor_ = file->message_type(32);
  static const int GS2C_Cross_Rank_Info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Rank_Info, rank_num_),
  };
  GS2C_Cross_Rank_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Cross_Rank_Info_descriptor_,
      GS2C_Cross_Rank_Info::default_instance_,
      GS2C_Cross_Rank_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Rank_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Cross_Rank_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Cross_Rank_Info));
  CROSS_RET_descriptor_ = file->enum_type(0);
  Donate_Type_descriptor_ = file->enum_type(1);
  ArsenalType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CrossWar_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Devide_Country_Info_descriptor_, &Devide_Country_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2L_Devide_Country_Infos_descriptor_, &GS2L_Devide_Country_Infos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Cross_Update_Country_Durable_descriptor_, &GS2C_Cross_Update_Country_Durable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Notice_CrossWar_State_descriptor_, &GS2C_Notice_CrossWar_State::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2R_Update_Player_Value_descriptor_, &GS2R_Update_Player_Value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2R_Update_Player_Character_Exp_descriptor_, &GS2R_Update_Player_Character_Exp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Country_Cross_Star_info_descriptor_, &Country_Cross_Star_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Country_Stars_Update_descriptor_, &Country_Stars_Update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Enter_Cross_War_descriptor_, &GS2C_Enter_Cross_War::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Use_Cross_Troops_descriptor_, &C2GS_Use_Cross_Troops::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CR2G_Country_Awards_descriptor_, &CR2G_Country_Awards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateAwardsChange_descriptor_, &UpdateAwardsChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC2G_Update_Award_Change_descriptor_, &SC2G_Update_Award_Change::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_TakeStarAwardRet_descriptor_, &GS2C_TakeStarAwardRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Cross_Donation_Data_descriptor_, &GS2C_Cross_Donation_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Cross_Donation_Datas_descriptor_, &GS2C_Cross_Donation_Datas::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC2S_Donate_Goods_descriptor_, &GC2S_Donate_Goods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_DONATE_RET_descriptor_, &GS2C_DONATE_RET::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Cross_Destroy_Task_Info_descriptor_, &GS2C_Cross_Destroy_Task_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Cross_Destroy_Task_Infos_descriptor_, &GS2C_Cross_Destroy_Task_Infos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC2S_Take_Destroy_Task_Award_descriptor_, &GC2S_Take_Destroy_Task_Award::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Take_Destroy_Task_Award_Ret_descriptor_, &GS2C_Take_Destroy_Task_Award_Ret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2CR_Attack_Capital_descriptor_, &C2CR_Attack_Capital::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Cross_Kill_Task_Info_descriptor_, &GS2C_Cross_Kill_Task_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC2S_Take_Kill_Task_Award_descriptor_, &GC2S_Take_Kill_Task_Award::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Take_Kill_Task_Award_Ret_descriptor_, &GS2C_Take_Kill_Task_Award_Ret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Cross_Ammo_Info_descriptor_, &GS2C_Cross_Ammo_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Cross_Ammo_Infos_descriptor_, &GS2C_Cross_Ammo_Infos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC2S_Buy_Ammo_descriptor_, &GC2S_Buy_Ammo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Buy_Ammo_Rsp_descriptor_, &GS2C_Buy_Ammo_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Use_Attack_Hummer_descriptor_, &GS2C_Use_Attack_Hummer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Attack_Result_descriptor_, &GS2C_Attack_Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Cross_Rank_Info_descriptor_, &GS2C_Cross_Rank_Info::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CrossWar_2eproto() {
  delete Devide_Country_Info::default_instance_;
  delete Devide_Country_Info_reflection_;
  delete GS2L_Devide_Country_Infos::default_instance_;
  delete GS2L_Devide_Country_Infos_reflection_;
  delete GS2C_Cross_Update_Country_Durable::default_instance_;
  delete GS2C_Cross_Update_Country_Durable_reflection_;
  delete GS2C_Notice_CrossWar_State::default_instance_;
  delete GS2C_Notice_CrossWar_State_reflection_;
  delete GS2R_Update_Player_Value::default_instance_;
  delete GS2R_Update_Player_Value_reflection_;
  delete GS2R_Update_Player_Character_Exp::default_instance_;
  delete GS2R_Update_Player_Character_Exp_reflection_;
  delete Country_Cross_Star_info::default_instance_;
  delete Country_Cross_Star_info_reflection_;
  delete Country_Stars_Update::default_instance_;
  delete Country_Stars_Update_reflection_;
  delete GS2C_Enter_Cross_War::default_instance_;
  delete GS2C_Enter_Cross_War_reflection_;
  delete C2GS_Use_Cross_Troops::default_instance_;
  delete C2GS_Use_Cross_Troops_reflection_;
  delete CR2G_Country_Awards::default_instance_;
  delete CR2G_Country_Awards_reflection_;
  delete UpdateAwardsChange::default_instance_;
  delete UpdateAwardsChange_reflection_;
  delete SC2G_Update_Award_Change::default_instance_;
  delete SC2G_Update_Award_Change_reflection_;
  delete GS2C_TakeStarAwardRet::default_instance_;
  delete GS2C_TakeStarAwardRet_reflection_;
  delete GS2C_Cross_Donation_Data::default_instance_;
  delete GS2C_Cross_Donation_Data_reflection_;
  delete GS2C_Cross_Donation_Datas::default_instance_;
  delete GS2C_Cross_Donation_Datas_reflection_;
  delete GC2S_Donate_Goods::default_instance_;
  delete GC2S_Donate_Goods_reflection_;
  delete GS2C_DONATE_RET::default_instance_;
  delete GS2C_DONATE_RET_reflection_;
  delete GS2C_Cross_Destroy_Task_Info::default_instance_;
  delete GS2C_Cross_Destroy_Task_Info_reflection_;
  delete GS2C_Cross_Destroy_Task_Infos::default_instance_;
  delete GS2C_Cross_Destroy_Task_Infos_reflection_;
  delete GC2S_Take_Destroy_Task_Award::default_instance_;
  delete GC2S_Take_Destroy_Task_Award_reflection_;
  delete GS2C_Take_Destroy_Task_Award_Ret::default_instance_;
  delete GS2C_Take_Destroy_Task_Award_Ret_reflection_;
  delete C2CR_Attack_Capital::default_instance_;
  delete C2CR_Attack_Capital_reflection_;
  delete GS2C_Cross_Kill_Task_Info::default_instance_;
  delete GS2C_Cross_Kill_Task_Info_reflection_;
  delete GC2S_Take_Kill_Task_Award::default_instance_;
  delete GC2S_Take_Kill_Task_Award_reflection_;
  delete GS2C_Take_Kill_Task_Award_Ret::default_instance_;
  delete GS2C_Take_Kill_Task_Award_Ret_reflection_;
  delete GS2C_Cross_Ammo_Info::default_instance_;
  delete GS2C_Cross_Ammo_Info_reflection_;
  delete GS2C_Cross_Ammo_Infos::default_instance_;
  delete GS2C_Cross_Ammo_Infos_reflection_;
  delete GC2S_Buy_Ammo::default_instance_;
  delete GC2S_Buy_Ammo_reflection_;
  delete GS2C_Buy_Ammo_Rsp::default_instance_;
  delete GS2C_Buy_Ammo_Rsp_reflection_;
  delete GS2C_Use_Attack_Hummer::default_instance_;
  delete GS2C_Use_Attack_Hummer_reflection_;
  delete GS2C_Attack_Result::default_instance_;
  delete GS2C_Attack_Result_reflection_;
  delete GS2C_Cross_Rank_Info::default_instance_;
  delete GS2C_Cross_Rank_Info_reflection_;
}

void protobuf_AddDesc_CrossWar_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_CommomDef_2eproto();
  ::pb::protobuf_AddDesc_City_2eproto();
  ::pb::protobuf_AddDesc_Character_2eproto();
  ::pb::protobuf_AddDesc_Country_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016CrossWar.proto\022\002pb\032\017CommomDef.proto\032\nC"
    "ity.proto\032\017Character.proto\032\rCountry.prot"
    "o\"\270\001\n\023Devide_Country_Info\022\027\n\017orig_countr"
    "y_id\030\001 \001(\r\022\031\n\021devide_country_id\030\002 \001(\r\022\027\n"
    "\017unique_index_id\030\003 \001(\r\022\023\n\013pros_degree\030\004 "
    "\001(\r\022\027\n\017country_durable\030\005 \001(\r\022\023\n\013server_n"
    "ame\030\006 \001(\t\022\021\n\tserver_id\030\007 \001(\r\"F\n\031GS2L_Dev"
    "ide_Country_Infos\022)\n\010countrys\030\001 \003(\0132\027.pb"
    ".Devide_Country_Info\"i\n!GS2C_Cross_Updat"
    "e_Country_Durable\022\026\n\016CrossCountryID\030\001 \001("
    "\r\022\026\n\016CountryDurable\030\002 \001(\r\022\024\n\014AttCountryI"
    "d\030\003 \001(\r\"m\n\032GS2C_Notice_CrossWar_State\022!\n"
    "\010CurState\030\001 \002(\0162\017.pb.CROSS_STATE\022\024\n\014Stat"
    "eEndTime\030\002 \001(\004\022\026\n\016CrossCountryID\030\003 \001(\r\"6"
    "\n\030GS2R_Update_Player_Value\022\r\n\005index\030\001 \001("
    "\r\022\013\n\003val\030\002 \001(\r\"B\n GS2R_Update_Player_Cha"
    "racter_Exp\022\016\n\006charid\030\001 \001(\r\022\016\n\006addExp\030\002 \001"
    "(\r\"R\n\027Country_Cross_Star_info\022\021\n\tcountry"
    "id\030\001 \001(\r\022\017\n\007starNum\030\002 \001(\r\022\023\n\013isDestroied"
    "\030\003 \001(\010\"I\n\024Country_Stars_Update\0221\n\014update"
    "_stars\030\001 \003(\0132\033.pb.Country_Cross_Star_inf"
    "o\"\361\002\n\024GS2C_Enter_Cross_War\022\022\n\nerror_code"
    "\030\001 \002(\r\022(\n\010cityInfo\030\002 \001(\0132\026.pb.GS2C_City_"
    "All_Info\0221\n\016character_info\030\003 \001(\0132\031.pb.GS"
    "2C_CharacterStorage\022\022\n\ncountry_id\030\004 \001(\r\022"
    "8\n\023cross_country_stars\030\005 \003(\0132\033.pb.Countr"
    "y_Cross_Star_info\022\022\n\nconstantID\030\006 \001(\r\022\031\n"
    "\021doubleKillEndTime\030\007 \001(\004\022\021\n\thammerNum\030\010 "
    "\001(\r\022\025\n\rshieldEndTime\030\t \001(\004\022\030\n\020hasTakeSta"
    "rAward\030\n \001(\010\022\'\n\010countrys\030\013 \001(\0132\025.pb.GS2C"
    "_Country_Info\"+\n\025C2GS_Use_Cross_Troops\022\022"
    "\n\ndestCityId\030\001 \001(\r\"c\n\023CR2G_Country_Award"
    "s\022\027\n\017unique_index_id\030\001 \001(\r\022\031\n\021defanceAwa"
    "rdToExp\030\002 \001(\r\022\030\n\020AttackAwardToExp\030\003 \001(\r\""
    "1\n\022UpdateAwardsChange\022\016\n\006itemid\030\001 \001(\r\022\013\n"
    "\003num\030\002 \001(\r\"B\n\030SC2G_Update_Award_Change\022&"
    "\n\006awards\030\001 \003(\0132\026.pb.UpdateAwardsChange\"3"
    "\n\025GS2C_TakeStarAwardRet\022\032\n\003ret\030\001 \001(\0162\r.p"
    "b.CROSS_RET\"M\n\030GS2C_Cross_Donation_Data\022"
    "\"\n\titem_type\030\001 \001(\0162\017.pb.Donate_Type\022\r\n\005c"
    "ount\030\002 \001(\r\"Q\n\031GS2C_Cross_Donation_Datas\022"
    "4\n\016donation_datas\030\001 \003(\0132\034.pb.GS2C_Cross_"
    "Donation_Data\"7\n\021GC2S_Donate_Goods\022\"\n\tit"
    "em_type\030\001 \001(\0162\017.pb.Donate_Type\"`\n\017GS2C_D"
    "ONATE_RET\022\"\n\titem_type\030\001 \001(\0162\017.pb.Donate"
    "_Type\022\032\n\003ret\030\002 \001(\0162\r.pb.CROSS_RET\022\r\n\005cou"
    "nt\030\003 \001(\r\"R\n\034GS2C_Cross_Destroy_Task_Info"
    "\022\017\n\007task_id\030\001 \001(\r\022\020\n\010progress\030\002 \001(\r\022\017\n\007i"
    "s_take\030\003 \001(\r\"T\n\035GS2C_Cross_Destroy_Task_"
    "Infos\0223\n\ttask_list\030\001 \003(\0132 .pb.GS2C_Cross"
    "_Destroy_Task_Info\"/\n\034GC2S_Take_Destroy_"
    "Task_Award\022\017\n\007task_id\030\001 \001(\r\"s\n GS2C_Take"
    "_Destroy_Task_Award_Ret\022\032\n\003ret\030\001 \001(\0162\r.p"
    "b.CROSS_RET\0223\n\ttask_info\030\002 \001(\0132 .pb.GS2C"
    "_Cross_Destroy_Task_Info\"R\n\023C2CR_Attack_"
    "Capital\022\024\n\014hero_in_city\030\001 \001(\r\022\017\n\007hero_id"
    "\030\002 \001(\r\022\024\n\014dest_city_id\030\003 \001(\r\"O\n\031GS2C_Cro"
    "ss_Kill_Task_Info\022\017\n\007task_id\030\001 \001(\r\022\020\n\010pr"
    "ogress\030\002 \001(\r\022\017\n\007is_take\030\003 \001(\r\"0\n\031GC2S_Ta"
    "ke_Kill_Task_Award\022\023\n\013phase_index\030\001 \001(\r\""
    "m\n\035GS2C_Take_Kill_Task_Award_Ret\022\032\n\003ret\030"
    "\001 \001(\0162\r.pb.CROSS_RET\0220\n\ttask_info\030\002 \001(\0132"
    "\035.pb.GS2C_Cross_Kill_Task_Info\"M\n\024GS2C_C"
    "ross_Ammo_Info\022!\n\010itemType\030\001 \001(\0162\017.pb.Ar"
    "senalType\022\022\n\nremain_num\030\002 \001(\r\"D\n\025GS2C_Cr"
    "oss_Ammo_Infos\022+\n\ttask_list\030\001 \003(\0132\030.pb.G"
    "S2C_Cross_Ammo_Info\"2\n\rGC2S_Buy_Ammo\022!\n\010"
    "itemType\030\001 \001(\0162\017.pb.ArsenalType\"\261\001\n\021GS2C"
    "_Buy_Ammo_Rsp\022\032\n\003ret\030\001 \001(\0162\r.pb.CROSS_RE"
    "T\022\020\n\010playerid\030\002 \001(\004\022+\n\tammo_info\030\003 \001(\0132\030"
    ".pb.GS2C_Cross_Ammo_Info\022\027\n\017KillTimeEndt"
    "ime\030\004 \001(\004\022\021\n\thammerNum\030\005 \001(\r\022\025\n\rshieldEn"
    "dTime\030\006 \001(\004\"<\n\026GS2C_Use_Attack_Hummer\022\022\n"
    "\ncountry_id\030\001 \001(\r\022\016\n\006heroid\030\002 \001(\r\"C\n\022GS2"
    "C_Attack_Result\022\032\n\003ret\030\001 \001(\0162\r.pb.CROSS_"
    "RET\022\021\n\thammerNum\030\002 \001(\r\"(\n\024GS2C_Cross_Ran"
    "k_Info\022\020\n\010rank_num\030\001 \001(\r*\357\003\n\tCROSS_RET\022\022"
    "\n\016Cro_Common_Suc\020\000\022\022\n\016Cro_Common_Err\020\001\022\022"
    "\n\016Cro_War_Closed\020\002\022\032\n\026Cro_War_State_Dism"
    "atch\020\003\022\035\n\031Cro_War_Donata_Troops_Max\020\004\022\025\n"
    "\021Cro_War_Cost_Lack\020\005\022\036\n\032Cro_War_Donata_S"
    "hadows_Max\020\006\022\031\n\025Cro_War_Reward_IsTake\020\007\022"
    "\035\n\031Cro_war_Player_Not_In_Lst\020\010\022\035\n\031Cro_Wa"
    "r_Task_Not_Finished\020\t\022\034\n\030Cro_War_Task_Id"
    "_Dismatch\020\n\022\027\n\023Cro_War_Offical_Err\020\013\022\023\n\017"
    "Cro_War_UpLimit\020\014\022\023\n\017Cro_War_Destroy\020\r\022\025"
    "\n\021Cro_War_No_Hammer\020\016\022\033\n\027Cro_War_Is_Same"
    "_Country\020\017\022\024\n\020Cro_War_Hero_Err\020\020\022\031\n\025Cro_"
    "War_City_Not_Link\020\021\022\025\n\021Cro_War_Cant_Rush"
    "\020\022*3\n\013Donate_Type\022\021\n\rOffice_Troops\020\000\022\021\n\r"
    "Shadow_Troops\020\001*5\n\013ArsenalType\022\n\n\006Hammer"
    "\020\001\022\016\n\nKillTroops\020\002\022\n\n\006Shield\020\003", 3670);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CrossWar.proto", &protobuf_RegisterTypes);
  Devide_Country_Info::default_instance_ = new Devide_Country_Info();
  GS2L_Devide_Country_Infos::default_instance_ = new GS2L_Devide_Country_Infos();
  GS2C_Cross_Update_Country_Durable::default_instance_ = new GS2C_Cross_Update_Country_Durable();
  GS2C_Notice_CrossWar_State::default_instance_ = new GS2C_Notice_CrossWar_State();
  GS2R_Update_Player_Value::default_instance_ = new GS2R_Update_Player_Value();
  GS2R_Update_Player_Character_Exp::default_instance_ = new GS2R_Update_Player_Character_Exp();
  Country_Cross_Star_info::default_instance_ = new Country_Cross_Star_info();
  Country_Stars_Update::default_instance_ = new Country_Stars_Update();
  GS2C_Enter_Cross_War::default_instance_ = new GS2C_Enter_Cross_War();
  C2GS_Use_Cross_Troops::default_instance_ = new C2GS_Use_Cross_Troops();
  CR2G_Country_Awards::default_instance_ = new CR2G_Country_Awards();
  UpdateAwardsChange::default_instance_ = new UpdateAwardsChange();
  SC2G_Update_Award_Change::default_instance_ = new SC2G_Update_Award_Change();
  GS2C_TakeStarAwardRet::default_instance_ = new GS2C_TakeStarAwardRet();
  GS2C_Cross_Donation_Data::default_instance_ = new GS2C_Cross_Donation_Data();
  GS2C_Cross_Donation_Datas::default_instance_ = new GS2C_Cross_Donation_Datas();
  GC2S_Donate_Goods::default_instance_ = new GC2S_Donate_Goods();
  GS2C_DONATE_RET::default_instance_ = new GS2C_DONATE_RET();
  GS2C_Cross_Destroy_Task_Info::default_instance_ = new GS2C_Cross_Destroy_Task_Info();
  GS2C_Cross_Destroy_Task_Infos::default_instance_ = new GS2C_Cross_Destroy_Task_Infos();
  GC2S_Take_Destroy_Task_Award::default_instance_ = new GC2S_Take_Destroy_Task_Award();
  GS2C_Take_Destroy_Task_Award_Ret::default_instance_ = new GS2C_Take_Destroy_Task_Award_Ret();
  C2CR_Attack_Capital::default_instance_ = new C2CR_Attack_Capital();
  GS2C_Cross_Kill_Task_Info::default_instance_ = new GS2C_Cross_Kill_Task_Info();
  GC2S_Take_Kill_Task_Award::default_instance_ = new GC2S_Take_Kill_Task_Award();
  GS2C_Take_Kill_Task_Award_Ret::default_instance_ = new GS2C_Take_Kill_Task_Award_Ret();
  GS2C_Cross_Ammo_Info::default_instance_ = new GS2C_Cross_Ammo_Info();
  GS2C_Cross_Ammo_Infos::default_instance_ = new GS2C_Cross_Ammo_Infos();
  GC2S_Buy_Ammo::default_instance_ = new GC2S_Buy_Ammo();
  GS2C_Buy_Ammo_Rsp::default_instance_ = new GS2C_Buy_Ammo_Rsp();
  GS2C_Use_Attack_Hummer::default_instance_ = new GS2C_Use_Attack_Hummer();
  GS2C_Attack_Result::default_instance_ = new GS2C_Attack_Result();
  GS2C_Cross_Rank_Info::default_instance_ = new GS2C_Cross_Rank_Info();
  Devide_Country_Info::default_instance_->InitAsDefaultInstance();
  GS2L_Devide_Country_Infos::default_instance_->InitAsDefaultInstance();
  GS2C_Cross_Update_Country_Durable::default_instance_->InitAsDefaultInstance();
  GS2C_Notice_CrossWar_State::default_instance_->InitAsDefaultInstance();
  GS2R_Update_Player_Value::default_instance_->InitAsDefaultInstance();
  GS2R_Update_Player_Character_Exp::default_instance_->InitAsDefaultInstance();
  Country_Cross_Star_info::default_instance_->InitAsDefaultInstance();
  Country_Stars_Update::default_instance_->InitAsDefaultInstance();
  GS2C_Enter_Cross_War::default_instance_->InitAsDefaultInstance();
  C2GS_Use_Cross_Troops::default_instance_->InitAsDefaultInstance();
  CR2G_Country_Awards::default_instance_->InitAsDefaultInstance();
  UpdateAwardsChange::default_instance_->InitAsDefaultInstance();
  SC2G_Update_Award_Change::default_instance_->InitAsDefaultInstance();
  GS2C_TakeStarAwardRet::default_instance_->InitAsDefaultInstance();
  GS2C_Cross_Donation_Data::default_instance_->InitAsDefaultInstance();
  GS2C_Cross_Donation_Datas::default_instance_->InitAsDefaultInstance();
  GC2S_Donate_Goods::default_instance_->InitAsDefaultInstance();
  GS2C_DONATE_RET::default_instance_->InitAsDefaultInstance();
  GS2C_Cross_Destroy_Task_Info::default_instance_->InitAsDefaultInstance();
  GS2C_Cross_Destroy_Task_Infos::default_instance_->InitAsDefaultInstance();
  GC2S_Take_Destroy_Task_Award::default_instance_->InitAsDefaultInstance();
  GS2C_Take_Destroy_Task_Award_Ret::default_instance_->InitAsDefaultInstance();
  C2CR_Attack_Capital::default_instance_->InitAsDefaultInstance();
  GS2C_Cross_Kill_Task_Info::default_instance_->InitAsDefaultInstance();
  GC2S_Take_Kill_Task_Award::default_instance_->InitAsDefaultInstance();
  GS2C_Take_Kill_Task_Award_Ret::default_instance_->InitAsDefaultInstance();
  GS2C_Cross_Ammo_Info::default_instance_->InitAsDefaultInstance();
  GS2C_Cross_Ammo_Infos::default_instance_->InitAsDefaultInstance();
  GC2S_Buy_Ammo::default_instance_->InitAsDefaultInstance();
  GS2C_Buy_Ammo_Rsp::default_instance_->InitAsDefaultInstance();
  GS2C_Use_Attack_Hummer::default_instance_->InitAsDefaultInstance();
  GS2C_Attack_Result::default_instance_->InitAsDefaultInstance();
  GS2C_Cross_Rank_Info::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CrossWar_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CrossWar_2eproto {
  StaticDescriptorInitializer_CrossWar_2eproto() {
    protobuf_AddDesc_CrossWar_2eproto();
  }
} static_descriptor_initializer_CrossWar_2eproto_;
const ::google::protobuf::EnumDescriptor* CROSS_RET_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CROSS_RET_descriptor_;
}
bool CROSS_RET_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Donate_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Donate_Type_descriptor_;
}
bool Donate_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ArsenalType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArsenalType_descriptor_;
}
bool ArsenalType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Devide_Country_Info::kOrigCountryIdFieldNumber;
const int Devide_Country_Info::kDevideCountryIdFieldNumber;
const int Devide_Country_Info::kUniqueIndexIdFieldNumber;
const int Devide_Country_Info::kProsDegreeFieldNumber;
const int Devide_Country_Info::kCountryDurableFieldNumber;
const int Devide_Country_Info::kServerNameFieldNumber;
const int Devide_Country_Info::kServerIdFieldNumber;
#endif  // !_MSC_VER

Devide_Country_Info::Devide_Country_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Devide_Country_Info::InitAsDefaultInstance() {
}

Devide_Country_Info::Devide_Country_Info(const Devide_Country_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Devide_Country_Info::SharedCtor() {
  _cached_size_ = 0;
  orig_country_id_ = 0u;
  devide_country_id_ = 0u;
  unique_index_id_ = 0u;
  pros_degree_ = 0u;
  country_durable_ = 0u;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Devide_Country_Info::~Devide_Country_Info() {
  SharedDtor();
}

void Devide_Country_Info::SharedDtor() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (this != default_instance_) {
  }
}

void Devide_Country_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Devide_Country_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Devide_Country_Info_descriptor_;
}

const Devide_Country_Info& Devide_Country_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

Devide_Country_Info* Devide_Country_Info::default_instance_ = NULL;

Devide_Country_Info* Devide_Country_Info::New() const {
  return new Devide_Country_Info;
}

void Devide_Country_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    orig_country_id_ = 0u;
    devide_country_id_ = 0u;
    unique_index_id_ = 0u;
    pros_degree_ = 0u;
    country_durable_ = 0u;
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Devide_Country_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 orig_country_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &orig_country_id_)));
          set_has_orig_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_devide_country_id;
        break;
      }

      // optional uint32 devide_country_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_devide_country_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &devide_country_id_)));
          set_has_devide_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_unique_index_id;
        break;
      }

      // optional uint32 unique_index_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unique_index_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unique_index_id_)));
          set_has_unique_index_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pros_degree;
        break;
      }

      // optional uint32 pros_degree = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pros_degree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pros_degree_)));
          set_has_pros_degree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_country_durable;
        break;
      }

      // optional uint32 country_durable = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country_durable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_durable_)));
          set_has_country_durable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_server_name;
        break;
      }

      // optional string server_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_server_id;
        break;
      }

      // optional uint32 server_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Devide_Country_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 orig_country_id = 1;
  if (has_orig_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->orig_country_id(), output);
  }

  // optional uint32 devide_country_id = 2;
  if (has_devide_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->devide_country_id(), output);
  }

  // optional uint32 unique_index_id = 3;
  if (has_unique_index_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->unique_index_id(), output);
  }

  // optional uint32 pros_degree = 4;
  if (has_pros_degree()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pros_degree(), output);
  }

  // optional uint32 country_durable = 5;
  if (has_country_durable()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->country_durable(), output);
  }

  // optional string server_name = 6;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->server_name(), output);
  }

  // optional uint32 server_id = 7;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Devide_Country_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 orig_country_id = 1;
  if (has_orig_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->orig_country_id(), target);
  }

  // optional uint32 devide_country_id = 2;
  if (has_devide_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->devide_country_id(), target);
  }

  // optional uint32 unique_index_id = 3;
  if (has_unique_index_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->unique_index_id(), target);
  }

  // optional uint32 pros_degree = 4;
  if (has_pros_degree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pros_degree(), target);
  }

  // optional uint32 country_durable = 5;
  if (has_country_durable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->country_durable(), target);
  }

  // optional string server_name = 6;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->server_name(), target);
  }

  // optional uint32 server_id = 7;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Devide_Country_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 orig_country_id = 1;
    if (has_orig_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->orig_country_id());
    }

    // optional uint32 devide_country_id = 2;
    if (has_devide_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->devide_country_id());
    }

    // optional uint32 unique_index_id = 3;
    if (has_unique_index_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unique_index_id());
    }

    // optional uint32 pros_degree = 4;
    if (has_pros_degree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pros_degree());
    }

    // optional uint32 country_durable = 5;
    if (has_country_durable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_durable());
    }

    // optional string server_name = 6;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional uint32 server_id = 7;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Devide_Country_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Devide_Country_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Devide_Country_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Devide_Country_Info::MergeFrom(const Devide_Country_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orig_country_id()) {
      set_orig_country_id(from.orig_country_id());
    }
    if (from.has_devide_country_id()) {
      set_devide_country_id(from.devide_country_id());
    }
    if (from.has_unique_index_id()) {
      set_unique_index_id(from.unique_index_id());
    }
    if (from.has_pros_degree()) {
      set_pros_degree(from.pros_degree());
    }
    if (from.has_country_durable()) {
      set_country_durable(from.country_durable());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Devide_Country_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Devide_Country_Info::CopyFrom(const Devide_Country_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Devide_Country_Info::IsInitialized() const {

  return true;
}

void Devide_Country_Info::Swap(Devide_Country_Info* other) {
  if (other != this) {
    std::swap(orig_country_id_, other->orig_country_id_);
    std::swap(devide_country_id_, other->devide_country_id_);
    std::swap(unique_index_id_, other->unique_index_id_);
    std::swap(pros_degree_, other->pros_degree_);
    std::swap(country_durable_, other->country_durable_);
    std::swap(server_name_, other->server_name_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Devide_Country_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Devide_Country_Info_descriptor_;
  metadata.reflection = Devide_Country_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2L_Devide_Country_Infos::kCountrysFieldNumber;
#endif  // !_MSC_VER

GS2L_Devide_Country_Infos::GS2L_Devide_Country_Infos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2L_Devide_Country_Infos::InitAsDefaultInstance() {
}

GS2L_Devide_Country_Infos::GS2L_Devide_Country_Infos(const GS2L_Devide_Country_Infos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2L_Devide_Country_Infos::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2L_Devide_Country_Infos::~GS2L_Devide_Country_Infos() {
  SharedDtor();
}

void GS2L_Devide_Country_Infos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2L_Devide_Country_Infos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2L_Devide_Country_Infos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2L_Devide_Country_Infos_descriptor_;
}

const GS2L_Devide_Country_Infos& GS2L_Devide_Country_Infos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

GS2L_Devide_Country_Infos* GS2L_Devide_Country_Infos::default_instance_ = NULL;

GS2L_Devide_Country_Infos* GS2L_Devide_Country_Infos::New() const {
  return new GS2L_Devide_Country_Infos;
}

void GS2L_Devide_Country_Infos::Clear() {
  countrys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2L_Devide_Country_Infos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Devide_Country_Info countrys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_countrys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_countrys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_countrys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2L_Devide_Country_Infos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.Devide_Country_Info countrys = 1;
  for (int i = 0; i < this->countrys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->countrys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2L_Devide_Country_Infos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.Devide_Country_Info countrys = 1;
  for (int i = 0; i < this->countrys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->countrys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2L_Devide_Country_Infos::ByteSize() const {
  int total_size = 0;

  // repeated .pb.Devide_Country_Info countrys = 1;
  total_size += 1 * this->countrys_size();
  for (int i = 0; i < this->countrys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->countrys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2L_Devide_Country_Infos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2L_Devide_Country_Infos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2L_Devide_Country_Infos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2L_Devide_Country_Infos::MergeFrom(const GS2L_Devide_Country_Infos& from) {
  GOOGLE_CHECK_NE(&from, this);
  countrys_.MergeFrom(from.countrys_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2L_Devide_Country_Infos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2L_Devide_Country_Infos::CopyFrom(const GS2L_Devide_Country_Infos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2L_Devide_Country_Infos::IsInitialized() const {

  return true;
}

void GS2L_Devide_Country_Infos::Swap(GS2L_Devide_Country_Infos* other) {
  if (other != this) {
    countrys_.Swap(&other->countrys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2L_Devide_Country_Infos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2L_Devide_Country_Infos_descriptor_;
  metadata.reflection = GS2L_Devide_Country_Infos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Cross_Update_Country_Durable::kCrossCountryIDFieldNumber;
const int GS2C_Cross_Update_Country_Durable::kCountryDurableFieldNumber;
const int GS2C_Cross_Update_Country_Durable::kAttCountryIdFieldNumber;
#endif  // !_MSC_VER

GS2C_Cross_Update_Country_Durable::GS2C_Cross_Update_Country_Durable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Cross_Update_Country_Durable::InitAsDefaultInstance() {
}

GS2C_Cross_Update_Country_Durable::GS2C_Cross_Update_Country_Durable(const GS2C_Cross_Update_Country_Durable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Cross_Update_Country_Durable::SharedCtor() {
  _cached_size_ = 0;
  crosscountryid_ = 0u;
  countrydurable_ = 0u;
  attcountryid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Cross_Update_Country_Durable::~GS2C_Cross_Update_Country_Durable() {
  SharedDtor();
}

void GS2C_Cross_Update_Country_Durable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Cross_Update_Country_Durable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Cross_Update_Country_Durable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Cross_Update_Country_Durable_descriptor_;
}

const GS2C_Cross_Update_Country_Durable& GS2C_Cross_Update_Country_Durable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

GS2C_Cross_Update_Country_Durable* GS2C_Cross_Update_Country_Durable::default_instance_ = NULL;

GS2C_Cross_Update_Country_Durable* GS2C_Cross_Update_Country_Durable::New() const {
  return new GS2C_Cross_Update_Country_Durable;
}

void GS2C_Cross_Update_Country_Durable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    crosscountryid_ = 0u;
    countrydurable_ = 0u;
    attcountryid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Cross_Update_Country_Durable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CrossCountryID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crosscountryid_)));
          set_has_crosscountryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CountryDurable;
        break;
      }

      // optional uint32 CountryDurable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CountryDurable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countrydurable_)));
          set_has_countrydurable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_AttCountryId;
        break;
      }

      // optional uint32 AttCountryId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AttCountryId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attcountryid_)));
          set_has_attcountryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Cross_Update_Country_Durable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 CrossCountryID = 1;
  if (has_crosscountryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->crosscountryid(), output);
  }

  // optional uint32 CountryDurable = 2;
  if (has_countrydurable()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->countrydurable(), output);
  }

  // optional uint32 AttCountryId = 3;
  if (has_attcountryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attcountryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Cross_Update_Country_Durable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CrossCountryID = 1;
  if (has_crosscountryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->crosscountryid(), target);
  }

  // optional uint32 CountryDurable = 2;
  if (has_countrydurable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->countrydurable(), target);
  }

  // optional uint32 AttCountryId = 3;
  if (has_attcountryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attcountryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Cross_Update_Country_Durable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CrossCountryID = 1;
    if (has_crosscountryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crosscountryid());
    }

    // optional uint32 CountryDurable = 2;
    if (has_countrydurable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countrydurable());
    }

    // optional uint32 AttCountryId = 3;
    if (has_attcountryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attcountryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Cross_Update_Country_Durable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Cross_Update_Country_Durable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Cross_Update_Country_Durable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Cross_Update_Country_Durable::MergeFrom(const GS2C_Cross_Update_Country_Durable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_crosscountryid()) {
      set_crosscountryid(from.crosscountryid());
    }
    if (from.has_countrydurable()) {
      set_countrydurable(from.countrydurable());
    }
    if (from.has_attcountryid()) {
      set_attcountryid(from.attcountryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Cross_Update_Country_Durable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Cross_Update_Country_Durable::CopyFrom(const GS2C_Cross_Update_Country_Durable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Cross_Update_Country_Durable::IsInitialized() const {

  return true;
}

void GS2C_Cross_Update_Country_Durable::Swap(GS2C_Cross_Update_Country_Durable* other) {
  if (other != this) {
    std::swap(crosscountryid_, other->crosscountryid_);
    std::swap(countrydurable_, other->countrydurable_);
    std::swap(attcountryid_, other->attcountryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Cross_Update_Country_Durable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Cross_Update_Country_Durable_descriptor_;
  metadata.reflection = GS2C_Cross_Update_Country_Durable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Notice_CrossWar_State::kCurStateFieldNumber;
const int GS2C_Notice_CrossWar_State::kStateEndTimeFieldNumber;
const int GS2C_Notice_CrossWar_State::kCrossCountryIDFieldNumber;
#endif  // !_MSC_VER

GS2C_Notice_CrossWar_State::GS2C_Notice_CrossWar_State()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Notice_CrossWar_State::InitAsDefaultInstance() {
}

GS2C_Notice_CrossWar_State::GS2C_Notice_CrossWar_State(const GS2C_Notice_CrossWar_State& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Notice_CrossWar_State::SharedCtor() {
  _cached_size_ = 0;
  curstate_ = 0;
  stateendtime_ = GOOGLE_ULONGLONG(0);
  crosscountryid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Notice_CrossWar_State::~GS2C_Notice_CrossWar_State() {
  SharedDtor();
}

void GS2C_Notice_CrossWar_State::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Notice_CrossWar_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Notice_CrossWar_State::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Notice_CrossWar_State_descriptor_;
}

const GS2C_Notice_CrossWar_State& GS2C_Notice_CrossWar_State::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

GS2C_Notice_CrossWar_State* GS2C_Notice_CrossWar_State::default_instance_ = NULL;

GS2C_Notice_CrossWar_State* GS2C_Notice_CrossWar_State::New() const {
  return new GS2C_Notice_CrossWar_State;
}

void GS2C_Notice_CrossWar_State::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    curstate_ = 0;
    stateendtime_ = GOOGLE_ULONGLONG(0);
    crosscountryid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Notice_CrossWar_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.CROSS_STATE CurState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::CROSS_STATE_IsValid(value)) {
            set_curstate(static_cast< ::pb::CROSS_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_StateEndTime;
        break;
      }

      // optional uint64 StateEndTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StateEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stateendtime_)));
          set_has_stateendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CrossCountryID;
        break;
      }

      // optional uint32 CrossCountryID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CrossCountryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crosscountryid_)));
          set_has_crosscountryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Notice_CrossWar_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.CROSS_STATE CurState = 1;
  if (has_curstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->curstate(), output);
  }

  // optional uint64 StateEndTime = 2;
  if (has_stateendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->stateendtime(), output);
  }

  // optional uint32 CrossCountryID = 3;
  if (has_crosscountryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crosscountryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Notice_CrossWar_State::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.CROSS_STATE CurState = 1;
  if (has_curstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->curstate(), target);
  }

  // optional uint64 StateEndTime = 2;
  if (has_stateendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->stateendtime(), target);
  }

  // optional uint32 CrossCountryID = 3;
  if (has_crosscountryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crosscountryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Notice_CrossWar_State::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.CROSS_STATE CurState = 1;
    if (has_curstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->curstate());
    }

    // optional uint64 StateEndTime = 2;
    if (has_stateendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stateendtime());
    }

    // optional uint32 CrossCountryID = 3;
    if (has_crosscountryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crosscountryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Notice_CrossWar_State::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Notice_CrossWar_State* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Notice_CrossWar_State*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Notice_CrossWar_State::MergeFrom(const GS2C_Notice_CrossWar_State& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curstate()) {
      set_curstate(from.curstate());
    }
    if (from.has_stateendtime()) {
      set_stateendtime(from.stateendtime());
    }
    if (from.has_crosscountryid()) {
      set_crosscountryid(from.crosscountryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Notice_CrossWar_State::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Notice_CrossWar_State::CopyFrom(const GS2C_Notice_CrossWar_State& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Notice_CrossWar_State::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Notice_CrossWar_State::Swap(GS2C_Notice_CrossWar_State* other) {
  if (other != this) {
    std::swap(curstate_, other->curstate_);
    std::swap(stateendtime_, other->stateendtime_);
    std::swap(crosscountryid_, other->crosscountryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Notice_CrossWar_State::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Notice_CrossWar_State_descriptor_;
  metadata.reflection = GS2C_Notice_CrossWar_State_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2R_Update_Player_Value::kIndexFieldNumber;
const int GS2R_Update_Player_Value::kValFieldNumber;
#endif  // !_MSC_VER

GS2R_Update_Player_Value::GS2R_Update_Player_Value()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2R_Update_Player_Value::InitAsDefaultInstance() {
}

GS2R_Update_Player_Value::GS2R_Update_Player_Value(const GS2R_Update_Player_Value& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2R_Update_Player_Value::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  val_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2R_Update_Player_Value::~GS2R_Update_Player_Value() {
  SharedDtor();
}

void GS2R_Update_Player_Value::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2R_Update_Player_Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2R_Update_Player_Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2R_Update_Player_Value_descriptor_;
}

const GS2R_Update_Player_Value& GS2R_Update_Player_Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

GS2R_Update_Player_Value* GS2R_Update_Player_Value::default_instance_ = NULL;

GS2R_Update_Player_Value* GS2R_Update_Player_Value::New() const {
  return new GS2R_Update_Player_Value;
}

void GS2R_Update_Player_Value::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    val_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2R_Update_Player_Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_val;
        break;
      }

      // optional uint32 val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2R_Update_Player_Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional uint32 val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2R_Update_Player_Value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional uint32 val = 2;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2R_Update_Player_Value::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2R_Update_Player_Value::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2R_Update_Player_Value* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2R_Update_Player_Value*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2R_Update_Player_Value::MergeFrom(const GS2R_Update_Player_Value& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2R_Update_Player_Value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2R_Update_Player_Value::CopyFrom(const GS2R_Update_Player_Value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2R_Update_Player_Value::IsInitialized() const {

  return true;
}

void GS2R_Update_Player_Value::Swap(GS2R_Update_Player_Value* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2R_Update_Player_Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2R_Update_Player_Value_descriptor_;
  metadata.reflection = GS2R_Update_Player_Value_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2R_Update_Player_Character_Exp::kCharidFieldNumber;
const int GS2R_Update_Player_Character_Exp::kAddExpFieldNumber;
#endif  // !_MSC_VER

GS2R_Update_Player_Character_Exp::GS2R_Update_Player_Character_Exp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2R_Update_Player_Character_Exp::InitAsDefaultInstance() {
}

GS2R_Update_Player_Character_Exp::GS2R_Update_Player_Character_Exp(const GS2R_Update_Player_Character_Exp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2R_Update_Player_Character_Exp::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  addexp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2R_Update_Player_Character_Exp::~GS2R_Update_Player_Character_Exp() {
  SharedDtor();
}

void GS2R_Update_Player_Character_Exp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2R_Update_Player_Character_Exp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2R_Update_Player_Character_Exp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2R_Update_Player_Character_Exp_descriptor_;
}

const GS2R_Update_Player_Character_Exp& GS2R_Update_Player_Character_Exp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

GS2R_Update_Player_Character_Exp* GS2R_Update_Player_Character_Exp::default_instance_ = NULL;

GS2R_Update_Player_Character_Exp* GS2R_Update_Player_Character_Exp::New() const {
  return new GS2R_Update_Player_Character_Exp;
}

void GS2R_Update_Player_Character_Exp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    addexp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2R_Update_Player_Character_Exp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_addExp;
        break;
      }

      // optional uint32 addExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addexp_)));
          set_has_addexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2R_Update_Player_Character_Exp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 addExp = 2;
  if (has_addexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->addexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2R_Update_Player_Character_Exp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 addExp = 2;
  if (has_addexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->addexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2R_Update_Player_Character_Exp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 addExp = 2;
    if (has_addexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addexp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2R_Update_Player_Character_Exp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2R_Update_Player_Character_Exp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2R_Update_Player_Character_Exp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2R_Update_Player_Character_Exp::MergeFrom(const GS2R_Update_Player_Character_Exp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_addexp()) {
      set_addexp(from.addexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2R_Update_Player_Character_Exp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2R_Update_Player_Character_Exp::CopyFrom(const GS2R_Update_Player_Character_Exp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2R_Update_Player_Character_Exp::IsInitialized() const {

  return true;
}

void GS2R_Update_Player_Character_Exp::Swap(GS2R_Update_Player_Character_Exp* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(addexp_, other->addexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2R_Update_Player_Character_Exp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2R_Update_Player_Character_Exp_descriptor_;
  metadata.reflection = GS2R_Update_Player_Character_Exp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Country_Cross_Star_info::kCountryidFieldNumber;
const int Country_Cross_Star_info::kStarNumFieldNumber;
const int Country_Cross_Star_info::kIsDestroiedFieldNumber;
#endif  // !_MSC_VER

Country_Cross_Star_info::Country_Cross_Star_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Country_Cross_Star_info::InitAsDefaultInstance() {
}

Country_Cross_Star_info::Country_Cross_Star_info(const Country_Cross_Star_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Country_Cross_Star_info::SharedCtor() {
  _cached_size_ = 0;
  countryid_ = 0u;
  starnum_ = 0u;
  isdestroied_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Country_Cross_Star_info::~Country_Cross_Star_info() {
  SharedDtor();
}

void Country_Cross_Star_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Country_Cross_Star_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Country_Cross_Star_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Country_Cross_Star_info_descriptor_;
}

const Country_Cross_Star_info& Country_Cross_Star_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

Country_Cross_Star_info* Country_Cross_Star_info::default_instance_ = NULL;

Country_Cross_Star_info* Country_Cross_Star_info::New() const {
  return new Country_Cross_Star_info;
}

void Country_Cross_Star_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    countryid_ = 0u;
    starnum_ = 0u;
    isdestroied_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Country_Cross_Star_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 countryid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countryid_)));
          set_has_countryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_starNum;
        break;
      }

      // optional uint32 starNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starnum_)));
          set_has_starnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isDestroied;
        break;
      }

      // optional bool isDestroied = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDestroied:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdestroied_)));
          set_has_isdestroied();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Country_Cross_Star_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 countryid = 1;
  if (has_countryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->countryid(), output);
  }

  // optional uint32 starNum = 2;
  if (has_starnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->starnum(), output);
  }

  // optional bool isDestroied = 3;
  if (has_isdestroied()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdestroied(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Country_Cross_Star_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 countryid = 1;
  if (has_countryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->countryid(), target);
  }

  // optional uint32 starNum = 2;
  if (has_starnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->starnum(), target);
  }

  // optional bool isDestroied = 3;
  if (has_isdestroied()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdestroied(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Country_Cross_Star_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 countryid = 1;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countryid());
    }

    // optional uint32 starNum = 2;
    if (has_starnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starnum());
    }

    // optional bool isDestroied = 3;
    if (has_isdestroied()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Country_Cross_Star_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Country_Cross_Star_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Country_Cross_Star_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Country_Cross_Star_info::MergeFrom(const Country_Cross_Star_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_countryid()) {
      set_countryid(from.countryid());
    }
    if (from.has_starnum()) {
      set_starnum(from.starnum());
    }
    if (from.has_isdestroied()) {
      set_isdestroied(from.isdestroied());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Country_Cross_Star_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Country_Cross_Star_info::CopyFrom(const Country_Cross_Star_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Country_Cross_Star_info::IsInitialized() const {

  return true;
}

void Country_Cross_Star_info::Swap(Country_Cross_Star_info* other) {
  if (other != this) {
    std::swap(countryid_, other->countryid_);
    std::swap(starnum_, other->starnum_);
    std::swap(isdestroied_, other->isdestroied_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Country_Cross_Star_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Country_Cross_Star_info_descriptor_;
  metadata.reflection = Country_Cross_Star_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Country_Stars_Update::kUpdateStarsFieldNumber;
#endif  // !_MSC_VER

Country_Stars_Update::Country_Stars_Update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Country_Stars_Update::InitAsDefaultInstance() {
}

Country_Stars_Update::Country_Stars_Update(const Country_Stars_Update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Country_Stars_Update::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Country_Stars_Update::~Country_Stars_Update() {
  SharedDtor();
}

void Country_Stars_Update::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Country_Stars_Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Country_Stars_Update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Country_Stars_Update_descriptor_;
}

const Country_Stars_Update& Country_Stars_Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

Country_Stars_Update* Country_Stars_Update::default_instance_ = NULL;

Country_Stars_Update* Country_Stars_Update::New() const {
  return new Country_Stars_Update;
}

void Country_Stars_Update::Clear() {
  update_stars_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Country_Stars_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Country_Cross_Star_info update_stars = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_stars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_update_stars()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_update_stars;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Country_Stars_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.Country_Cross_Star_info update_stars = 1;
  for (int i = 0; i < this->update_stars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->update_stars(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Country_Stars_Update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.Country_Cross_Star_info update_stars = 1;
  for (int i = 0; i < this->update_stars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->update_stars(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Country_Stars_Update::ByteSize() const {
  int total_size = 0;

  // repeated .pb.Country_Cross_Star_info update_stars = 1;
  total_size += 1 * this->update_stars_size();
  for (int i = 0; i < this->update_stars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->update_stars(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Country_Stars_Update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Country_Stars_Update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Country_Stars_Update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Country_Stars_Update::MergeFrom(const Country_Stars_Update& from) {
  GOOGLE_CHECK_NE(&from, this);
  update_stars_.MergeFrom(from.update_stars_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Country_Stars_Update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Country_Stars_Update::CopyFrom(const Country_Stars_Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Country_Stars_Update::IsInitialized() const {

  return true;
}

void Country_Stars_Update::Swap(Country_Stars_Update* other) {
  if (other != this) {
    update_stars_.Swap(&other->update_stars_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Country_Stars_Update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Country_Stars_Update_descriptor_;
  metadata.reflection = Country_Stars_Update_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Enter_Cross_War::kErrorCodeFieldNumber;
const int GS2C_Enter_Cross_War::kCityInfoFieldNumber;
const int GS2C_Enter_Cross_War::kCharacterInfoFieldNumber;
const int GS2C_Enter_Cross_War::kCountryIdFieldNumber;
const int GS2C_Enter_Cross_War::kCrossCountryStarsFieldNumber;
const int GS2C_Enter_Cross_War::kConstantIDFieldNumber;
const int GS2C_Enter_Cross_War::kDoubleKillEndTimeFieldNumber;
const int GS2C_Enter_Cross_War::kHammerNumFieldNumber;
const int GS2C_Enter_Cross_War::kShieldEndTimeFieldNumber;
const int GS2C_Enter_Cross_War::kHasTakeStarAwardFieldNumber;
const int GS2C_Enter_Cross_War::kCountrysFieldNumber;
#endif  // !_MSC_VER

GS2C_Enter_Cross_War::GS2C_Enter_Cross_War()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Enter_Cross_War::InitAsDefaultInstance() {
  cityinfo_ = const_cast< ::pb::GS2C_City_All_Info*>(&::pb::GS2C_City_All_Info::default_instance());
  character_info_ = const_cast< ::pb::GS2C_CharacterStorage*>(&::pb::GS2C_CharacterStorage::default_instance());
  countrys_ = const_cast< ::pb::GS2C_Country_Info*>(&::pb::GS2C_Country_Info::default_instance());
}

GS2C_Enter_Cross_War::GS2C_Enter_Cross_War(const GS2C_Enter_Cross_War& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Enter_Cross_War::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  cityinfo_ = NULL;
  character_info_ = NULL;
  country_id_ = 0u;
  constantid_ = 0u;
  doublekillendtime_ = GOOGLE_ULONGLONG(0);
  hammernum_ = 0u;
  shieldendtime_ = GOOGLE_ULONGLONG(0);
  hastakestaraward_ = false;
  countrys_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Enter_Cross_War::~GS2C_Enter_Cross_War() {
  SharedDtor();
}

void GS2C_Enter_Cross_War::SharedDtor() {
  if (this != default_instance_) {
    delete cityinfo_;
    delete character_info_;
    delete countrys_;
  }
}

void GS2C_Enter_Cross_War::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Enter_Cross_War::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Enter_Cross_War_descriptor_;
}

const GS2C_Enter_Cross_War& GS2C_Enter_Cross_War::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

GS2C_Enter_Cross_War* GS2C_Enter_Cross_War::default_instance_ = NULL;

GS2C_Enter_Cross_War* GS2C_Enter_Cross_War::New() const {
  return new GS2C_Enter_Cross_War;
}

void GS2C_Enter_Cross_War::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    if (has_cityinfo()) {
      if (cityinfo_ != NULL) cityinfo_->::pb::GS2C_City_All_Info::Clear();
    }
    if (has_character_info()) {
      if (character_info_ != NULL) character_info_->::pb::GS2C_CharacterStorage::Clear();
    }
    country_id_ = 0u;
    constantid_ = 0u;
    doublekillendtime_ = GOOGLE_ULONGLONG(0);
    hammernum_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    shieldendtime_ = GOOGLE_ULONGLONG(0);
    hastakestaraward_ = false;
    if (has_countrys()) {
      if (countrys_ != NULL) countrys_->::pb::GS2C_Country_Info::Clear();
    }
  }
  cross_country_stars_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Enter_Cross_War::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cityInfo;
        break;
      }

      // optional .pb.GS2C_City_All_Info cityInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cityInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cityinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_character_info;
        break;
      }

      // optional .pb.GS2C_CharacterStorage character_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_character_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_character_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_country_id;
        break;
      }

      // optional uint32 country_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_id_)));
          set_has_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cross_country_stars;
        break;
      }

      // repeated .pb.Country_Cross_Star_info cross_country_stars = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cross_country_stars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cross_country_stars()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cross_country_stars;
        if (input->ExpectTag(48)) goto parse_constantID;
        break;
      }

      // optional uint32 constantID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_constantID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &constantid_)));
          set_has_constantid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_doubleKillEndTime;
        break;
      }

      // optional uint64 doubleKillEndTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doubleKillEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &doublekillendtime_)));
          set_has_doublekillendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hammerNum;
        break;
      }

      // optional uint32 hammerNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hammerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hammernum_)));
          set_has_hammernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_shieldEndTime;
        break;
      }

      // optional uint64 shieldEndTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shieldEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &shieldendtime_)));
          set_has_shieldendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_hasTakeStarAward;
        break;
      }

      // optional bool hasTakeStarAward = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasTakeStarAward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hastakestaraward_)));
          set_has_hastakestaraward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_countrys;
        break;
      }

      // optional .pb.GS2C_Country_Info countrys = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_countrys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_countrys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Enter_Cross_War::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // optional .pb.GS2C_City_All_Info cityInfo = 2;
  if (has_cityinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cityinfo(), output);
  }

  // optional .pb.GS2C_CharacterStorage character_info = 3;
  if (has_character_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->character_info(), output);
  }

  // optional uint32 country_id = 4;
  if (has_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->country_id(), output);
  }

  // repeated .pb.Country_Cross_Star_info cross_country_stars = 5;
  for (int i = 0; i < this->cross_country_stars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cross_country_stars(i), output);
  }

  // optional uint32 constantID = 6;
  if (has_constantid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->constantid(), output);
  }

  // optional uint64 doubleKillEndTime = 7;
  if (has_doublekillendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->doublekillendtime(), output);
  }

  // optional uint32 hammerNum = 8;
  if (has_hammernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->hammernum(), output);
  }

  // optional uint64 shieldEndTime = 9;
  if (has_shieldendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->shieldendtime(), output);
  }

  // optional bool hasTakeStarAward = 10;
  if (has_hastakestaraward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->hastakestaraward(), output);
  }

  // optional .pb.GS2C_Country_Info countrys = 11;
  if (has_countrys()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->countrys(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Enter_Cross_War::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // optional .pb.GS2C_City_All_Info cityInfo = 2;
  if (has_cityinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cityinfo(), target);
  }

  // optional .pb.GS2C_CharacterStorage character_info = 3;
  if (has_character_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->character_info(), target);
  }

  // optional uint32 country_id = 4;
  if (has_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->country_id(), target);
  }

  // repeated .pb.Country_Cross_Star_info cross_country_stars = 5;
  for (int i = 0; i < this->cross_country_stars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cross_country_stars(i), target);
  }

  // optional uint32 constantID = 6;
  if (has_constantid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->constantid(), target);
  }

  // optional uint64 doubleKillEndTime = 7;
  if (has_doublekillendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->doublekillendtime(), target);
  }

  // optional uint32 hammerNum = 8;
  if (has_hammernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->hammernum(), target);
  }

  // optional uint64 shieldEndTime = 9;
  if (has_shieldendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->shieldendtime(), target);
  }

  // optional bool hasTakeStarAward = 10;
  if (has_hastakestaraward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->hastakestaraward(), target);
  }

  // optional .pb.GS2C_Country_Info countrys = 11;
  if (has_countrys()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->countrys(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Enter_Cross_War::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // optional .pb.GS2C_City_All_Info cityInfo = 2;
    if (has_cityinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cityinfo());
    }

    // optional .pb.GS2C_CharacterStorage character_info = 3;
    if (has_character_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->character_info());
    }

    // optional uint32 country_id = 4;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_id());
    }

    // optional uint32 constantID = 6;
    if (has_constantid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->constantid());
    }

    // optional uint64 doubleKillEndTime = 7;
    if (has_doublekillendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->doublekillendtime());
    }

    // optional uint32 hammerNum = 8;
    if (has_hammernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hammernum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 shieldEndTime = 9;
    if (has_shieldendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->shieldendtime());
    }

    // optional bool hasTakeStarAward = 10;
    if (has_hastakestaraward()) {
      total_size += 1 + 1;
    }

    // optional .pb.GS2C_Country_Info countrys = 11;
    if (has_countrys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->countrys());
    }

  }
  // repeated .pb.Country_Cross_Star_info cross_country_stars = 5;
  total_size += 1 * this->cross_country_stars_size();
  for (int i = 0; i < this->cross_country_stars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cross_country_stars(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Enter_Cross_War::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Enter_Cross_War* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Enter_Cross_War*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Enter_Cross_War::MergeFrom(const GS2C_Enter_Cross_War& from) {
  GOOGLE_CHECK_NE(&from, this);
  cross_country_stars_.MergeFrom(from.cross_country_stars_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_cityinfo()) {
      mutable_cityinfo()->::pb::GS2C_City_All_Info::MergeFrom(from.cityinfo());
    }
    if (from.has_character_info()) {
      mutable_character_info()->::pb::GS2C_CharacterStorage::MergeFrom(from.character_info());
    }
    if (from.has_country_id()) {
      set_country_id(from.country_id());
    }
    if (from.has_constantid()) {
      set_constantid(from.constantid());
    }
    if (from.has_doublekillendtime()) {
      set_doublekillendtime(from.doublekillendtime());
    }
    if (from.has_hammernum()) {
      set_hammernum(from.hammernum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_shieldendtime()) {
      set_shieldendtime(from.shieldendtime());
    }
    if (from.has_hastakestaraward()) {
      set_hastakestaraward(from.hastakestaraward());
    }
    if (from.has_countrys()) {
      mutable_countrys()->::pb::GS2C_Country_Info::MergeFrom(from.countrys());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Enter_Cross_War::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Enter_Cross_War::CopyFrom(const GS2C_Enter_Cross_War& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Enter_Cross_War::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_cityinfo()) {
    if (!this->cityinfo().IsInitialized()) return false;
  }
  if (has_character_info()) {
    if (!this->character_info().IsInitialized()) return false;
  }
  if (has_countrys()) {
    if (!this->countrys().IsInitialized()) return false;
  }
  return true;
}

void GS2C_Enter_Cross_War::Swap(GS2C_Enter_Cross_War* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(cityinfo_, other->cityinfo_);
    std::swap(character_info_, other->character_info_);
    std::swap(country_id_, other->country_id_);
    cross_country_stars_.Swap(&other->cross_country_stars_);
    std::swap(constantid_, other->constantid_);
    std::swap(doublekillendtime_, other->doublekillendtime_);
    std::swap(hammernum_, other->hammernum_);
    std::swap(shieldendtime_, other->shieldendtime_);
    std::swap(hastakestaraward_, other->hastakestaraward_);
    std::swap(countrys_, other->countrys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Enter_Cross_War::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Enter_Cross_War_descriptor_;
  metadata.reflection = GS2C_Enter_Cross_War_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Use_Cross_Troops::kDestCityIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Use_Cross_Troops::C2GS_Use_Cross_Troops()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Use_Cross_Troops::InitAsDefaultInstance() {
}

C2GS_Use_Cross_Troops::C2GS_Use_Cross_Troops(const C2GS_Use_Cross_Troops& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Use_Cross_Troops::SharedCtor() {
  _cached_size_ = 0;
  destcityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Use_Cross_Troops::~C2GS_Use_Cross_Troops() {
  SharedDtor();
}

void C2GS_Use_Cross_Troops::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Use_Cross_Troops::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Use_Cross_Troops::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Use_Cross_Troops_descriptor_;
}

const C2GS_Use_Cross_Troops& C2GS_Use_Cross_Troops::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

C2GS_Use_Cross_Troops* C2GS_Use_Cross_Troops::default_instance_ = NULL;

C2GS_Use_Cross_Troops* C2GS_Use_Cross_Troops::New() const {
  return new C2GS_Use_Cross_Troops;
}

void C2GS_Use_Cross_Troops::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    destcityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Use_Cross_Troops::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 destCityId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destcityid_)));
          set_has_destcityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Use_Cross_Troops::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 destCityId = 1;
  if (has_destcityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->destcityid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Use_Cross_Troops::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 destCityId = 1;
  if (has_destcityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->destcityid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Use_Cross_Troops::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 destCityId = 1;
    if (has_destcityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destcityid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Use_Cross_Troops::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Use_Cross_Troops* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Use_Cross_Troops*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Use_Cross_Troops::MergeFrom(const C2GS_Use_Cross_Troops& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_destcityid()) {
      set_destcityid(from.destcityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Use_Cross_Troops::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Use_Cross_Troops::CopyFrom(const C2GS_Use_Cross_Troops& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Use_Cross_Troops::IsInitialized() const {

  return true;
}

void C2GS_Use_Cross_Troops::Swap(C2GS_Use_Cross_Troops* other) {
  if (other != this) {
    std::swap(destcityid_, other->destcityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Use_Cross_Troops::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Use_Cross_Troops_descriptor_;
  metadata.reflection = C2GS_Use_Cross_Troops_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CR2G_Country_Awards::kUniqueIndexIdFieldNumber;
const int CR2G_Country_Awards::kDefanceAwardToExpFieldNumber;
const int CR2G_Country_Awards::kAttackAwardToExpFieldNumber;
#endif  // !_MSC_VER

CR2G_Country_Awards::CR2G_Country_Awards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CR2G_Country_Awards::InitAsDefaultInstance() {
}

CR2G_Country_Awards::CR2G_Country_Awards(const CR2G_Country_Awards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CR2G_Country_Awards::SharedCtor() {
  _cached_size_ = 0;
  unique_index_id_ = 0u;
  defanceawardtoexp_ = 0u;
  attackawardtoexp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CR2G_Country_Awards::~CR2G_Country_Awards() {
  SharedDtor();
}

void CR2G_Country_Awards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CR2G_Country_Awards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CR2G_Country_Awards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CR2G_Country_Awards_descriptor_;
}

const CR2G_Country_Awards& CR2G_Country_Awards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

CR2G_Country_Awards* CR2G_Country_Awards::default_instance_ = NULL;

CR2G_Country_Awards* CR2G_Country_Awards::New() const {
  return new CR2G_Country_Awards;
}

void CR2G_Country_Awards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unique_index_id_ = 0u;
    defanceawardtoexp_ = 0u;
    attackawardtoexp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CR2G_Country_Awards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unique_index_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unique_index_id_)));
          set_has_unique_index_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_defanceAwardToExp;
        break;
      }

      // optional uint32 defanceAwardToExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defanceAwardToExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defanceawardtoexp_)));
          set_has_defanceawardtoexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_AttackAwardToExp;
        break;
      }

      // optional uint32 AttackAwardToExp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AttackAwardToExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attackawardtoexp_)));
          set_has_attackawardtoexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CR2G_Country_Awards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 unique_index_id = 1;
  if (has_unique_index_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unique_index_id(), output);
  }

  // optional uint32 defanceAwardToExp = 2;
  if (has_defanceawardtoexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->defanceawardtoexp(), output);
  }

  // optional uint32 AttackAwardToExp = 3;
  if (has_attackawardtoexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attackawardtoexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CR2G_Country_Awards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 unique_index_id = 1;
  if (has_unique_index_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unique_index_id(), target);
  }

  // optional uint32 defanceAwardToExp = 2;
  if (has_defanceawardtoexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->defanceawardtoexp(), target);
  }

  // optional uint32 AttackAwardToExp = 3;
  if (has_attackawardtoexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attackawardtoexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CR2G_Country_Awards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 unique_index_id = 1;
    if (has_unique_index_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unique_index_id());
    }

    // optional uint32 defanceAwardToExp = 2;
    if (has_defanceawardtoexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defanceawardtoexp());
    }

    // optional uint32 AttackAwardToExp = 3;
    if (has_attackawardtoexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attackawardtoexp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CR2G_Country_Awards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CR2G_Country_Awards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CR2G_Country_Awards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CR2G_Country_Awards::MergeFrom(const CR2G_Country_Awards& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unique_index_id()) {
      set_unique_index_id(from.unique_index_id());
    }
    if (from.has_defanceawardtoexp()) {
      set_defanceawardtoexp(from.defanceawardtoexp());
    }
    if (from.has_attackawardtoexp()) {
      set_attackawardtoexp(from.attackawardtoexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CR2G_Country_Awards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CR2G_Country_Awards::CopyFrom(const CR2G_Country_Awards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CR2G_Country_Awards::IsInitialized() const {

  return true;
}

void CR2G_Country_Awards::Swap(CR2G_Country_Awards* other) {
  if (other != this) {
    std::swap(unique_index_id_, other->unique_index_id_);
    std::swap(defanceawardtoexp_, other->defanceawardtoexp_);
    std::swap(attackawardtoexp_, other->attackawardtoexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CR2G_Country_Awards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CR2G_Country_Awards_descriptor_;
  metadata.reflection = CR2G_Country_Awards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateAwardsChange::kItemidFieldNumber;
const int UpdateAwardsChange::kNumFieldNumber;
#endif  // !_MSC_VER

UpdateAwardsChange::UpdateAwardsChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateAwardsChange::InitAsDefaultInstance() {
}

UpdateAwardsChange::UpdateAwardsChange(const UpdateAwardsChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateAwardsChange::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateAwardsChange::~UpdateAwardsChange() {
  SharedDtor();
}

void UpdateAwardsChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateAwardsChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateAwardsChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateAwardsChange_descriptor_;
}

const UpdateAwardsChange& UpdateAwardsChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

UpdateAwardsChange* UpdateAwardsChange::default_instance_ = NULL;

UpdateAwardsChange* UpdateAwardsChange::New() const {
  return new UpdateAwardsChange;
}

void UpdateAwardsChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateAwardsChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateAwardsChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateAwardsChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateAwardsChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateAwardsChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateAwardsChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateAwardsChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateAwardsChange::MergeFrom(const UpdateAwardsChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateAwardsChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateAwardsChange::CopyFrom(const UpdateAwardsChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAwardsChange::IsInitialized() const {

  return true;
}

void UpdateAwardsChange::Swap(UpdateAwardsChange* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateAwardsChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateAwardsChange_descriptor_;
  metadata.reflection = UpdateAwardsChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC2G_Update_Award_Change::kAwardsFieldNumber;
#endif  // !_MSC_VER

SC2G_Update_Award_Change::SC2G_Update_Award_Change()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC2G_Update_Award_Change::InitAsDefaultInstance() {
}

SC2G_Update_Award_Change::SC2G_Update_Award_Change(const SC2G_Update_Award_Change& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC2G_Update_Award_Change::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC2G_Update_Award_Change::~SC2G_Update_Award_Change() {
  SharedDtor();
}

void SC2G_Update_Award_Change::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC2G_Update_Award_Change::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC2G_Update_Award_Change::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC2G_Update_Award_Change_descriptor_;
}

const SC2G_Update_Award_Change& SC2G_Update_Award_Change::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

SC2G_Update_Award_Change* SC2G_Update_Award_Change::default_instance_ = NULL;

SC2G_Update_Award_Change* SC2G_Update_Award_Change::New() const {
  return new SC2G_Update_Award_Change;
}

void SC2G_Update_Award_Change::Clear() {
  awards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC2G_Update_Award_Change::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.UpdateAwardsChange awards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_awards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC2G_Update_Award_Change::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.UpdateAwardsChange awards = 1;
  for (int i = 0; i < this->awards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->awards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC2G_Update_Award_Change::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.UpdateAwardsChange awards = 1;
  for (int i = 0; i < this->awards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->awards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC2G_Update_Award_Change::ByteSize() const {
  int total_size = 0;

  // repeated .pb.UpdateAwardsChange awards = 1;
  total_size += 1 * this->awards_size();
  for (int i = 0; i < this->awards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC2G_Update_Award_Change::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC2G_Update_Award_Change* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC2G_Update_Award_Change*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC2G_Update_Award_Change::MergeFrom(const SC2G_Update_Award_Change& from) {
  GOOGLE_CHECK_NE(&from, this);
  awards_.MergeFrom(from.awards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC2G_Update_Award_Change::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC2G_Update_Award_Change::CopyFrom(const SC2G_Update_Award_Change& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC2G_Update_Award_Change::IsInitialized() const {

  return true;
}

void SC2G_Update_Award_Change::Swap(SC2G_Update_Award_Change* other) {
  if (other != this) {
    awards_.Swap(&other->awards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC2G_Update_Award_Change::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC2G_Update_Award_Change_descriptor_;
  metadata.reflection = SC2G_Update_Award_Change_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_TakeStarAwardRet::kRetFieldNumber;
#endif  // !_MSC_VER

GS2C_TakeStarAwardRet::GS2C_TakeStarAwardRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_TakeStarAwardRet::InitAsDefaultInstance() {
}

GS2C_TakeStarAwardRet::GS2C_TakeStarAwardRet(const GS2C_TakeStarAwardRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_TakeStarAwardRet::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_TakeStarAwardRet::~GS2C_TakeStarAwardRet() {
  SharedDtor();
}

void GS2C_TakeStarAwardRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_TakeStarAwardRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_TakeStarAwardRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_TakeStarAwardRet_descriptor_;
}

const GS2C_TakeStarAwardRet& GS2C_TakeStarAwardRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

GS2C_TakeStarAwardRet* GS2C_TakeStarAwardRet::default_instance_ = NULL;

GS2C_TakeStarAwardRet* GS2C_TakeStarAwardRet::New() const {
  return new GS2C_TakeStarAwardRet;
}

void GS2C_TakeStarAwardRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_TakeStarAwardRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.CROSS_RET ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::CROSS_RET_IsValid(value)) {
            set_ret(static_cast< ::pb::CROSS_RET >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_TakeStarAwardRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.CROSS_RET ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_TakeStarAwardRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.CROSS_RET ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_TakeStarAwardRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.CROSS_RET ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_TakeStarAwardRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_TakeStarAwardRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_TakeStarAwardRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_TakeStarAwardRet::MergeFrom(const GS2C_TakeStarAwardRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_TakeStarAwardRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_TakeStarAwardRet::CopyFrom(const GS2C_TakeStarAwardRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_TakeStarAwardRet::IsInitialized() const {

  return true;
}

void GS2C_TakeStarAwardRet::Swap(GS2C_TakeStarAwardRet* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_TakeStarAwardRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_TakeStarAwardRet_descriptor_;
  metadata.reflection = GS2C_TakeStarAwardRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Cross_Donation_Data::kItemTypeFieldNumber;
const int GS2C_Cross_Donation_Data::kCountFieldNumber;
#endif  // !_MSC_VER

GS2C_Cross_Donation_Data::GS2C_Cross_Donation_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Cross_Donation_Data::InitAsDefaultInstance() {
}

GS2C_Cross_Donation_Data::GS2C_Cross_Donation_Data(const GS2C_Cross_Donation_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Cross_Donation_Data::SharedCtor() {
  _cached_size_ = 0;
  item_type_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Cross_Donation_Data::~GS2C_Cross_Donation_Data() {
  SharedDtor();
}

void GS2C_Cross_Donation_Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Cross_Donation_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Cross_Donation_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Cross_Donation_Data_descriptor_;
}

const GS2C_Cross_Donation_Data& GS2C_Cross_Donation_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

GS2C_Cross_Donation_Data* GS2C_Cross_Donation_Data::default_instance_ = NULL;

GS2C_Cross_Donation_Data* GS2C_Cross_Donation_Data::New() const {
  return new GS2C_Cross_Donation_Data;
}

void GS2C_Cross_Donation_Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_type_ = 0;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Cross_Donation_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.Donate_Type item_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Donate_Type_IsValid(value)) {
            set_item_type(static_cast< ::pb::Donate_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Cross_Donation_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.Donate_Type item_type = 1;
  if (has_item_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->item_type(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Cross_Donation_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.Donate_Type item_type = 1;
  if (has_item_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->item_type(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Cross_Donation_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.Donate_Type item_type = 1;
    if (has_item_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->item_type());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Cross_Donation_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Cross_Donation_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Cross_Donation_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Cross_Donation_Data::MergeFrom(const GS2C_Cross_Donation_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_type()) {
      set_item_type(from.item_type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Cross_Donation_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Cross_Donation_Data::CopyFrom(const GS2C_Cross_Donation_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Cross_Donation_Data::IsInitialized() const {

  return true;
}

void GS2C_Cross_Donation_Data::Swap(GS2C_Cross_Donation_Data* other) {
  if (other != this) {
    std::swap(item_type_, other->item_type_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Cross_Donation_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Cross_Donation_Data_descriptor_;
  metadata.reflection = GS2C_Cross_Donation_Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Cross_Donation_Datas::kDonationDatasFieldNumber;
#endif  // !_MSC_VER

GS2C_Cross_Donation_Datas::GS2C_Cross_Donation_Datas()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Cross_Donation_Datas::InitAsDefaultInstance() {
}

GS2C_Cross_Donation_Datas::GS2C_Cross_Donation_Datas(const GS2C_Cross_Donation_Datas& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Cross_Donation_Datas::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Cross_Donation_Datas::~GS2C_Cross_Donation_Datas() {
  SharedDtor();
}

void GS2C_Cross_Donation_Datas::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Cross_Donation_Datas::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Cross_Donation_Datas::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Cross_Donation_Datas_descriptor_;
}

const GS2C_Cross_Donation_Datas& GS2C_Cross_Donation_Datas::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

GS2C_Cross_Donation_Datas* GS2C_Cross_Donation_Datas::default_instance_ = NULL;

GS2C_Cross_Donation_Datas* GS2C_Cross_Donation_Datas::New() const {
  return new GS2C_Cross_Donation_Datas;
}

void GS2C_Cross_Donation_Datas::Clear() {
  donation_datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Cross_Donation_Datas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GS2C_Cross_Donation_Data donation_datas = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_donation_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_donation_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_donation_datas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Cross_Donation_Datas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GS2C_Cross_Donation_Data donation_datas = 1;
  for (int i = 0; i < this->donation_datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->donation_datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Cross_Donation_Datas::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GS2C_Cross_Donation_Data donation_datas = 1;
  for (int i = 0; i < this->donation_datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->donation_datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Cross_Donation_Datas::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GS2C_Cross_Donation_Data donation_datas = 1;
  total_size += 1 * this->donation_datas_size();
  for (int i = 0; i < this->donation_datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->donation_datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Cross_Donation_Datas::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Cross_Donation_Datas* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Cross_Donation_Datas*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Cross_Donation_Datas::MergeFrom(const GS2C_Cross_Donation_Datas& from) {
  GOOGLE_CHECK_NE(&from, this);
  donation_datas_.MergeFrom(from.donation_datas_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Cross_Donation_Datas::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Cross_Donation_Datas::CopyFrom(const GS2C_Cross_Donation_Datas& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Cross_Donation_Datas::IsInitialized() const {

  return true;
}

void GS2C_Cross_Donation_Datas::Swap(GS2C_Cross_Donation_Datas* other) {
  if (other != this) {
    donation_datas_.Swap(&other->donation_datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Cross_Donation_Datas::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Cross_Donation_Datas_descriptor_;
  metadata.reflection = GS2C_Cross_Donation_Datas_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC2S_Donate_Goods::kItemTypeFieldNumber;
#endif  // !_MSC_VER

GC2S_Donate_Goods::GC2S_Donate_Goods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC2S_Donate_Goods::InitAsDefaultInstance() {
}

GC2S_Donate_Goods::GC2S_Donate_Goods(const GC2S_Donate_Goods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC2S_Donate_Goods::SharedCtor() {
  _cached_size_ = 0;
  item_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC2S_Donate_Goods::~GC2S_Donate_Goods() {
  SharedDtor();
}

void GC2S_Donate_Goods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC2S_Donate_Goods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC2S_Donate_Goods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC2S_Donate_Goods_descriptor_;
}

const GC2S_Donate_Goods& GC2S_Donate_Goods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

GC2S_Donate_Goods* GC2S_Donate_Goods::default_instance_ = NULL;

GC2S_Donate_Goods* GC2S_Donate_Goods::New() const {
  return new GC2S_Donate_Goods;
}

void GC2S_Donate_Goods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC2S_Donate_Goods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.Donate_Type item_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Donate_Type_IsValid(value)) {
            set_item_type(static_cast< ::pb::Donate_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC2S_Donate_Goods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.Donate_Type item_type = 1;
  if (has_item_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->item_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC2S_Donate_Goods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.Donate_Type item_type = 1;
  if (has_item_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->item_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC2S_Donate_Goods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.Donate_Type item_type = 1;
    if (has_item_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->item_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC2S_Donate_Goods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC2S_Donate_Goods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC2S_Donate_Goods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC2S_Donate_Goods::MergeFrom(const GC2S_Donate_Goods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_type()) {
      set_item_type(from.item_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC2S_Donate_Goods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC2S_Donate_Goods::CopyFrom(const GC2S_Donate_Goods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC2S_Donate_Goods::IsInitialized() const {

  return true;
}

void GC2S_Donate_Goods::Swap(GC2S_Donate_Goods* other) {
  if (other != this) {
    std::swap(item_type_, other->item_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC2S_Donate_Goods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC2S_Donate_Goods_descriptor_;
  metadata.reflection = GC2S_Donate_Goods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_DONATE_RET::kItemTypeFieldNumber;
const int GS2C_DONATE_RET::kRetFieldNumber;
const int GS2C_DONATE_RET::kCountFieldNumber;
#endif  // !_MSC_VER

GS2C_DONATE_RET::GS2C_DONATE_RET()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_DONATE_RET::InitAsDefaultInstance() {
}

GS2C_DONATE_RET::GS2C_DONATE_RET(const GS2C_DONATE_RET& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_DONATE_RET::SharedCtor() {
  _cached_size_ = 0;
  item_type_ = 0;
  ret_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_DONATE_RET::~GS2C_DONATE_RET() {
  SharedDtor();
}

void GS2C_DONATE_RET::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_DONATE_RET::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_DONATE_RET::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_DONATE_RET_descriptor_;
}

const GS2C_DONATE_RET& GS2C_DONATE_RET::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

GS2C_DONATE_RET* GS2C_DONATE_RET::default_instance_ = NULL;

GS2C_DONATE_RET* GS2C_DONATE_RET::New() const {
  return new GS2C_DONATE_RET;
}

void GS2C_DONATE_RET::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_type_ = 0;
    ret_ = 0;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_DONATE_RET::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.Donate_Type item_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Donate_Type_IsValid(value)) {
            set_item_type(static_cast< ::pb::Donate_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional .pb.CROSS_RET ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::CROSS_RET_IsValid(value)) {
            set_ret(static_cast< ::pb::CROSS_RET >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_DONATE_RET::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.Donate_Type item_type = 1;
  if (has_item_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->item_type(), output);
  }

  // optional .pb.CROSS_RET ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_DONATE_RET::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.Donate_Type item_type = 1;
  if (has_item_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->item_type(), target);
  }

  // optional .pb.CROSS_RET ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_DONATE_RET::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.Donate_Type item_type = 1;
    if (has_item_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->item_type());
    }

    // optional .pb.CROSS_RET ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_DONATE_RET::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_DONATE_RET* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_DONATE_RET*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_DONATE_RET::MergeFrom(const GS2C_DONATE_RET& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_type()) {
      set_item_type(from.item_type());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_DONATE_RET::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_DONATE_RET::CopyFrom(const GS2C_DONATE_RET& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_DONATE_RET::IsInitialized() const {

  return true;
}

void GS2C_DONATE_RET::Swap(GS2C_DONATE_RET* other) {
  if (other != this) {
    std::swap(item_type_, other->item_type_);
    std::swap(ret_, other->ret_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_DONATE_RET::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_DONATE_RET_descriptor_;
  metadata.reflection = GS2C_DONATE_RET_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Cross_Destroy_Task_Info::kTaskIdFieldNumber;
const int GS2C_Cross_Destroy_Task_Info::kProgressFieldNumber;
const int GS2C_Cross_Destroy_Task_Info::kIsTakeFieldNumber;
#endif  // !_MSC_VER

GS2C_Cross_Destroy_Task_Info::GS2C_Cross_Destroy_Task_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Cross_Destroy_Task_Info::InitAsDefaultInstance() {
}

GS2C_Cross_Destroy_Task_Info::GS2C_Cross_Destroy_Task_Info(const GS2C_Cross_Destroy_Task_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Cross_Destroy_Task_Info::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  progress_ = 0u;
  is_take_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Cross_Destroy_Task_Info::~GS2C_Cross_Destroy_Task_Info() {
  SharedDtor();
}

void GS2C_Cross_Destroy_Task_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Cross_Destroy_Task_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Cross_Destroy_Task_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Cross_Destroy_Task_Info_descriptor_;
}

const GS2C_Cross_Destroy_Task_Info& GS2C_Cross_Destroy_Task_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

GS2C_Cross_Destroy_Task_Info* GS2C_Cross_Destroy_Task_Info::default_instance_ = NULL;

GS2C_Cross_Destroy_Task_Info* GS2C_Cross_Destroy_Task_Info::New() const {
  return new GS2C_Cross_Destroy_Task_Info;
}

void GS2C_Cross_Destroy_Task_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    progress_ = 0u;
    is_take_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Cross_Destroy_Task_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_progress;
        break;
      }

      // optional uint32 progress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_take;
        break;
      }

      // optional uint32 is_take = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_take:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_take_)));
          set_has_is_take();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Cross_Destroy_Task_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }

  // optional uint32 progress = 2;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->progress(), output);
  }

  // optional uint32 is_take = 3;
  if (has_is_take()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_take(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Cross_Destroy_Task_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }

  // optional uint32 progress = 2;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->progress(), target);
  }

  // optional uint32 is_take = 3;
  if (has_is_take()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_take(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Cross_Destroy_Task_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

    // optional uint32 progress = 2;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->progress());
    }

    // optional uint32 is_take = 3;
    if (has_is_take()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_take());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Cross_Destroy_Task_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Cross_Destroy_Task_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Cross_Destroy_Task_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Cross_Destroy_Task_Info::MergeFrom(const GS2C_Cross_Destroy_Task_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
    if (from.has_is_take()) {
      set_is_take(from.is_take());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Cross_Destroy_Task_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Cross_Destroy_Task_Info::CopyFrom(const GS2C_Cross_Destroy_Task_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Cross_Destroy_Task_Info::IsInitialized() const {

  return true;
}

void GS2C_Cross_Destroy_Task_Info::Swap(GS2C_Cross_Destroy_Task_Info* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(progress_, other->progress_);
    std::swap(is_take_, other->is_take_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Cross_Destroy_Task_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Cross_Destroy_Task_Info_descriptor_;
  metadata.reflection = GS2C_Cross_Destroy_Task_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Cross_Destroy_Task_Infos::kTaskListFieldNumber;
#endif  // !_MSC_VER

GS2C_Cross_Destroy_Task_Infos::GS2C_Cross_Destroy_Task_Infos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Cross_Destroy_Task_Infos::InitAsDefaultInstance() {
}

GS2C_Cross_Destroy_Task_Infos::GS2C_Cross_Destroy_Task_Infos(const GS2C_Cross_Destroy_Task_Infos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Cross_Destroy_Task_Infos::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Cross_Destroy_Task_Infos::~GS2C_Cross_Destroy_Task_Infos() {
  SharedDtor();
}

void GS2C_Cross_Destroy_Task_Infos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Cross_Destroy_Task_Infos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Cross_Destroy_Task_Infos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Cross_Destroy_Task_Infos_descriptor_;
}

const GS2C_Cross_Destroy_Task_Infos& GS2C_Cross_Destroy_Task_Infos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

GS2C_Cross_Destroy_Task_Infos* GS2C_Cross_Destroy_Task_Infos::default_instance_ = NULL;

GS2C_Cross_Destroy_Task_Infos* GS2C_Cross_Destroy_Task_Infos::New() const {
  return new GS2C_Cross_Destroy_Task_Infos;
}

void GS2C_Cross_Destroy_Task_Infos::Clear() {
  task_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Cross_Destroy_Task_Infos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GS2C_Cross_Destroy_Task_Info task_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_task_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Cross_Destroy_Task_Infos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GS2C_Cross_Destroy_Task_Info task_list = 1;
  for (int i = 0; i < this->task_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Cross_Destroy_Task_Infos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GS2C_Cross_Destroy_Task_Info task_list = 1;
  for (int i = 0; i < this->task_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Cross_Destroy_Task_Infos::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GS2C_Cross_Destroy_Task_Info task_list = 1;
  total_size += 1 * this->task_list_size();
  for (int i = 0; i < this->task_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Cross_Destroy_Task_Infos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Cross_Destroy_Task_Infos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Cross_Destroy_Task_Infos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Cross_Destroy_Task_Infos::MergeFrom(const GS2C_Cross_Destroy_Task_Infos& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_list_.MergeFrom(from.task_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Cross_Destroy_Task_Infos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Cross_Destroy_Task_Infos::CopyFrom(const GS2C_Cross_Destroy_Task_Infos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Cross_Destroy_Task_Infos::IsInitialized() const {

  return true;
}

void GS2C_Cross_Destroy_Task_Infos::Swap(GS2C_Cross_Destroy_Task_Infos* other) {
  if (other != this) {
    task_list_.Swap(&other->task_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Cross_Destroy_Task_Infos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Cross_Destroy_Task_Infos_descriptor_;
  metadata.reflection = GS2C_Cross_Destroy_Task_Infos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC2S_Take_Destroy_Task_Award::kTaskIdFieldNumber;
#endif  // !_MSC_VER

GC2S_Take_Destroy_Task_Award::GC2S_Take_Destroy_Task_Award()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC2S_Take_Destroy_Task_Award::InitAsDefaultInstance() {
}

GC2S_Take_Destroy_Task_Award::GC2S_Take_Destroy_Task_Award(const GC2S_Take_Destroy_Task_Award& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC2S_Take_Destroy_Task_Award::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC2S_Take_Destroy_Task_Award::~GC2S_Take_Destroy_Task_Award() {
  SharedDtor();
}

void GC2S_Take_Destroy_Task_Award::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC2S_Take_Destroy_Task_Award::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC2S_Take_Destroy_Task_Award::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC2S_Take_Destroy_Task_Award_descriptor_;
}

const GC2S_Take_Destroy_Task_Award& GC2S_Take_Destroy_Task_Award::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

GC2S_Take_Destroy_Task_Award* GC2S_Take_Destroy_Task_Award::default_instance_ = NULL;

GC2S_Take_Destroy_Task_Award* GC2S_Take_Destroy_Task_Award::New() const {
  return new GC2S_Take_Destroy_Task_Award;
}

void GC2S_Take_Destroy_Task_Award::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC2S_Take_Destroy_Task_Award::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC2S_Take_Destroy_Task_Award::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC2S_Take_Destroy_Task_Award::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC2S_Take_Destroy_Task_Award::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC2S_Take_Destroy_Task_Award::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC2S_Take_Destroy_Task_Award* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC2S_Take_Destroy_Task_Award*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC2S_Take_Destroy_Task_Award::MergeFrom(const GC2S_Take_Destroy_Task_Award& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC2S_Take_Destroy_Task_Award::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC2S_Take_Destroy_Task_Award::CopyFrom(const GC2S_Take_Destroy_Task_Award& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC2S_Take_Destroy_Task_Award::IsInitialized() const {

  return true;
}

void GC2S_Take_Destroy_Task_Award::Swap(GC2S_Take_Destroy_Task_Award* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC2S_Take_Destroy_Task_Award::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC2S_Take_Destroy_Task_Award_descriptor_;
  metadata.reflection = GC2S_Take_Destroy_Task_Award_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Take_Destroy_Task_Award_Ret::kRetFieldNumber;
const int GS2C_Take_Destroy_Task_Award_Ret::kTaskInfoFieldNumber;
#endif  // !_MSC_VER

GS2C_Take_Destroy_Task_Award_Ret::GS2C_Take_Destroy_Task_Award_Ret()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Take_Destroy_Task_Award_Ret::InitAsDefaultInstance() {
  task_info_ = const_cast< ::pb::GS2C_Cross_Destroy_Task_Info*>(&::pb::GS2C_Cross_Destroy_Task_Info::default_instance());
}

GS2C_Take_Destroy_Task_Award_Ret::GS2C_Take_Destroy_Task_Award_Ret(const GS2C_Take_Destroy_Task_Award_Ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Take_Destroy_Task_Award_Ret::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  task_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Take_Destroy_Task_Award_Ret::~GS2C_Take_Destroy_Task_Award_Ret() {
  SharedDtor();
}

void GS2C_Take_Destroy_Task_Award_Ret::SharedDtor() {
  if (this != default_instance_) {
    delete task_info_;
  }
}

void GS2C_Take_Destroy_Task_Award_Ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Take_Destroy_Task_Award_Ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Take_Destroy_Task_Award_Ret_descriptor_;
}

const GS2C_Take_Destroy_Task_Award_Ret& GS2C_Take_Destroy_Task_Award_Ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

GS2C_Take_Destroy_Task_Award_Ret* GS2C_Take_Destroy_Task_Award_Ret::default_instance_ = NULL;

GS2C_Take_Destroy_Task_Award_Ret* GS2C_Take_Destroy_Task_Award_Ret::New() const {
  return new GS2C_Take_Destroy_Task_Award_Ret;
}

void GS2C_Take_Destroy_Task_Award_Ret::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_task_info()) {
      if (task_info_ != NULL) task_info_->::pb::GS2C_Cross_Destroy_Task_Info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Take_Destroy_Task_Award_Ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.CROSS_RET ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::CROSS_RET_IsValid(value)) {
            set_ret(static_cast< ::pb::CROSS_RET >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task_info;
        break;
      }

      // optional .pb.GS2C_Cross_Destroy_Task_Info task_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Take_Destroy_Task_Award_Ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.CROSS_RET ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // optional .pb.GS2C_Cross_Destroy_Task_Info task_info = 2;
  if (has_task_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->task_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Take_Destroy_Task_Award_Ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.CROSS_RET ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // optional .pb.GS2C_Cross_Destroy_Task_Info task_info = 2;
  if (has_task_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->task_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Take_Destroy_Task_Award_Ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.CROSS_RET ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional .pb.GS2C_Cross_Destroy_Task_Info task_info = 2;
    if (has_task_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Take_Destroy_Task_Award_Ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Take_Destroy_Task_Award_Ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Take_Destroy_Task_Award_Ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Take_Destroy_Task_Award_Ret::MergeFrom(const GS2C_Take_Destroy_Task_Award_Ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_task_info()) {
      mutable_task_info()->::pb::GS2C_Cross_Destroy_Task_Info::MergeFrom(from.task_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Take_Destroy_Task_Award_Ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Take_Destroy_Task_Award_Ret::CopyFrom(const GS2C_Take_Destroy_Task_Award_Ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Take_Destroy_Task_Award_Ret::IsInitialized() const {

  return true;
}

void GS2C_Take_Destroy_Task_Award_Ret::Swap(GS2C_Take_Destroy_Task_Award_Ret* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(task_info_, other->task_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Take_Destroy_Task_Award_Ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Take_Destroy_Task_Award_Ret_descriptor_;
  metadata.reflection = GS2C_Take_Destroy_Task_Award_Ret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2CR_Attack_Capital::kHeroInCityFieldNumber;
const int C2CR_Attack_Capital::kHeroIdFieldNumber;
const int C2CR_Attack_Capital::kDestCityIdFieldNumber;
#endif  // !_MSC_VER

C2CR_Attack_Capital::C2CR_Attack_Capital()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2CR_Attack_Capital::InitAsDefaultInstance() {
}

C2CR_Attack_Capital::C2CR_Attack_Capital(const C2CR_Attack_Capital& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2CR_Attack_Capital::SharedCtor() {
  _cached_size_ = 0;
  hero_in_city_ = 0u;
  hero_id_ = 0u;
  dest_city_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2CR_Attack_Capital::~C2CR_Attack_Capital() {
  SharedDtor();
}

void C2CR_Attack_Capital::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2CR_Attack_Capital::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2CR_Attack_Capital::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2CR_Attack_Capital_descriptor_;
}

const C2CR_Attack_Capital& C2CR_Attack_Capital::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

C2CR_Attack_Capital* C2CR_Attack_Capital::default_instance_ = NULL;

C2CR_Attack_Capital* C2CR_Attack_Capital::New() const {
  return new C2CR_Attack_Capital;
}

void C2CR_Attack_Capital::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_in_city_ = 0u;
    hero_id_ = 0u;
    dest_city_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2CR_Attack_Capital::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hero_in_city = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_in_city_)));
          set_has_hero_in_city();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // optional uint32 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dest_city_id;
        break;
      }

      // optional uint32 dest_city_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_city_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_city_id_)));
          set_has_dest_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2CR_Attack_Capital::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 hero_in_city = 1;
  if (has_hero_in_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_in_city(), output);
  }

  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // optional uint32 dest_city_id = 3;
  if (has_dest_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dest_city_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2CR_Attack_Capital::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 hero_in_city = 1;
  if (has_hero_in_city()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_in_city(), target);
  }

  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // optional uint32 dest_city_id = 3;
  if (has_dest_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dest_city_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2CR_Attack_Capital::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 hero_in_city = 1;
    if (has_hero_in_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_in_city());
    }

    // optional uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 dest_city_id = 3;
    if (has_dest_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_city_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2CR_Attack_Capital::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2CR_Attack_Capital* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2CR_Attack_Capital*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2CR_Attack_Capital::MergeFrom(const C2CR_Attack_Capital& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_in_city()) {
      set_hero_in_city(from.hero_in_city());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_dest_city_id()) {
      set_dest_city_id(from.dest_city_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2CR_Attack_Capital::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2CR_Attack_Capital::CopyFrom(const C2CR_Attack_Capital& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2CR_Attack_Capital::IsInitialized() const {

  return true;
}

void C2CR_Attack_Capital::Swap(C2CR_Attack_Capital* other) {
  if (other != this) {
    std::swap(hero_in_city_, other->hero_in_city_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(dest_city_id_, other->dest_city_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2CR_Attack_Capital::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2CR_Attack_Capital_descriptor_;
  metadata.reflection = C2CR_Attack_Capital_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Cross_Kill_Task_Info::kTaskIdFieldNumber;
const int GS2C_Cross_Kill_Task_Info::kProgressFieldNumber;
const int GS2C_Cross_Kill_Task_Info::kIsTakeFieldNumber;
#endif  // !_MSC_VER

GS2C_Cross_Kill_Task_Info::GS2C_Cross_Kill_Task_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Cross_Kill_Task_Info::InitAsDefaultInstance() {
}

GS2C_Cross_Kill_Task_Info::GS2C_Cross_Kill_Task_Info(const GS2C_Cross_Kill_Task_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Cross_Kill_Task_Info::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  progress_ = 0u;
  is_take_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Cross_Kill_Task_Info::~GS2C_Cross_Kill_Task_Info() {
  SharedDtor();
}

void GS2C_Cross_Kill_Task_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Cross_Kill_Task_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Cross_Kill_Task_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Cross_Kill_Task_Info_descriptor_;
}

const GS2C_Cross_Kill_Task_Info& GS2C_Cross_Kill_Task_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

GS2C_Cross_Kill_Task_Info* GS2C_Cross_Kill_Task_Info::default_instance_ = NULL;

GS2C_Cross_Kill_Task_Info* GS2C_Cross_Kill_Task_Info::New() const {
  return new GS2C_Cross_Kill_Task_Info;
}

void GS2C_Cross_Kill_Task_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    progress_ = 0u;
    is_take_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Cross_Kill_Task_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_progress;
        break;
      }

      // optional uint32 progress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_take;
        break;
      }

      // optional uint32 is_take = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_take:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_take_)));
          set_has_is_take();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Cross_Kill_Task_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }

  // optional uint32 progress = 2;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->progress(), output);
  }

  // optional uint32 is_take = 3;
  if (has_is_take()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_take(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Cross_Kill_Task_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }

  // optional uint32 progress = 2;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->progress(), target);
  }

  // optional uint32 is_take = 3;
  if (has_is_take()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_take(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Cross_Kill_Task_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

    // optional uint32 progress = 2;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->progress());
    }

    // optional uint32 is_take = 3;
    if (has_is_take()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_take());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Cross_Kill_Task_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Cross_Kill_Task_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Cross_Kill_Task_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Cross_Kill_Task_Info::MergeFrom(const GS2C_Cross_Kill_Task_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
    if (from.has_is_take()) {
      set_is_take(from.is_take());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Cross_Kill_Task_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Cross_Kill_Task_Info::CopyFrom(const GS2C_Cross_Kill_Task_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Cross_Kill_Task_Info::IsInitialized() const {

  return true;
}

void GS2C_Cross_Kill_Task_Info::Swap(GS2C_Cross_Kill_Task_Info* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(progress_, other->progress_);
    std::swap(is_take_, other->is_take_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Cross_Kill_Task_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Cross_Kill_Task_Info_descriptor_;
  metadata.reflection = GS2C_Cross_Kill_Task_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC2S_Take_Kill_Task_Award::kPhaseIndexFieldNumber;
#endif  // !_MSC_VER

GC2S_Take_Kill_Task_Award::GC2S_Take_Kill_Task_Award()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC2S_Take_Kill_Task_Award::InitAsDefaultInstance() {
}

GC2S_Take_Kill_Task_Award::GC2S_Take_Kill_Task_Award(const GC2S_Take_Kill_Task_Award& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC2S_Take_Kill_Task_Award::SharedCtor() {
  _cached_size_ = 0;
  phase_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC2S_Take_Kill_Task_Award::~GC2S_Take_Kill_Task_Award() {
  SharedDtor();
}

void GC2S_Take_Kill_Task_Award::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC2S_Take_Kill_Task_Award::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC2S_Take_Kill_Task_Award::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC2S_Take_Kill_Task_Award_descriptor_;
}

const GC2S_Take_Kill_Task_Award& GC2S_Take_Kill_Task_Award::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

GC2S_Take_Kill_Task_Award* GC2S_Take_Kill_Task_Award::default_instance_ = NULL;

GC2S_Take_Kill_Task_Award* GC2S_Take_Kill_Task_Award::New() const {
  return new GC2S_Take_Kill_Task_Award;
}

void GC2S_Take_Kill_Task_Award::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phase_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC2S_Take_Kill_Task_Award::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 phase_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phase_index_)));
          set_has_phase_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC2S_Take_Kill_Task_Award::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 phase_index = 1;
  if (has_phase_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phase_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC2S_Take_Kill_Task_Award::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 phase_index = 1;
  if (has_phase_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phase_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC2S_Take_Kill_Task_Award::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 phase_index = 1;
    if (has_phase_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phase_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC2S_Take_Kill_Task_Award::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC2S_Take_Kill_Task_Award* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC2S_Take_Kill_Task_Award*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC2S_Take_Kill_Task_Award::MergeFrom(const GC2S_Take_Kill_Task_Award& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phase_index()) {
      set_phase_index(from.phase_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC2S_Take_Kill_Task_Award::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC2S_Take_Kill_Task_Award::CopyFrom(const GC2S_Take_Kill_Task_Award& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC2S_Take_Kill_Task_Award::IsInitialized() const {

  return true;
}

void GC2S_Take_Kill_Task_Award::Swap(GC2S_Take_Kill_Task_Award* other) {
  if (other != this) {
    std::swap(phase_index_, other->phase_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC2S_Take_Kill_Task_Award::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC2S_Take_Kill_Task_Award_descriptor_;
  metadata.reflection = GC2S_Take_Kill_Task_Award_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Take_Kill_Task_Award_Ret::kRetFieldNumber;
const int GS2C_Take_Kill_Task_Award_Ret::kTaskInfoFieldNumber;
#endif  // !_MSC_VER

GS2C_Take_Kill_Task_Award_Ret::GS2C_Take_Kill_Task_Award_Ret()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Take_Kill_Task_Award_Ret::InitAsDefaultInstance() {
  task_info_ = const_cast< ::pb::GS2C_Cross_Kill_Task_Info*>(&::pb::GS2C_Cross_Kill_Task_Info::default_instance());
}

GS2C_Take_Kill_Task_Award_Ret::GS2C_Take_Kill_Task_Award_Ret(const GS2C_Take_Kill_Task_Award_Ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Take_Kill_Task_Award_Ret::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  task_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Take_Kill_Task_Award_Ret::~GS2C_Take_Kill_Task_Award_Ret() {
  SharedDtor();
}

void GS2C_Take_Kill_Task_Award_Ret::SharedDtor() {
  if (this != default_instance_) {
    delete task_info_;
  }
}

void GS2C_Take_Kill_Task_Award_Ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Take_Kill_Task_Award_Ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Take_Kill_Task_Award_Ret_descriptor_;
}

const GS2C_Take_Kill_Task_Award_Ret& GS2C_Take_Kill_Task_Award_Ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

GS2C_Take_Kill_Task_Award_Ret* GS2C_Take_Kill_Task_Award_Ret::default_instance_ = NULL;

GS2C_Take_Kill_Task_Award_Ret* GS2C_Take_Kill_Task_Award_Ret::New() const {
  return new GS2C_Take_Kill_Task_Award_Ret;
}

void GS2C_Take_Kill_Task_Award_Ret::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_task_info()) {
      if (task_info_ != NULL) task_info_->::pb::GS2C_Cross_Kill_Task_Info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Take_Kill_Task_Award_Ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.CROSS_RET ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::CROSS_RET_IsValid(value)) {
            set_ret(static_cast< ::pb::CROSS_RET >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task_info;
        break;
      }

      // optional .pb.GS2C_Cross_Kill_Task_Info task_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Take_Kill_Task_Award_Ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.CROSS_RET ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // optional .pb.GS2C_Cross_Kill_Task_Info task_info = 2;
  if (has_task_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->task_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Take_Kill_Task_Award_Ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.CROSS_RET ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // optional .pb.GS2C_Cross_Kill_Task_Info task_info = 2;
  if (has_task_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->task_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Take_Kill_Task_Award_Ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.CROSS_RET ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional .pb.GS2C_Cross_Kill_Task_Info task_info = 2;
    if (has_task_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Take_Kill_Task_Award_Ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Take_Kill_Task_Award_Ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Take_Kill_Task_Award_Ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Take_Kill_Task_Award_Ret::MergeFrom(const GS2C_Take_Kill_Task_Award_Ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_task_info()) {
      mutable_task_info()->::pb::GS2C_Cross_Kill_Task_Info::MergeFrom(from.task_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Take_Kill_Task_Award_Ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Take_Kill_Task_Award_Ret::CopyFrom(const GS2C_Take_Kill_Task_Award_Ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Take_Kill_Task_Award_Ret::IsInitialized() const {

  return true;
}

void GS2C_Take_Kill_Task_Award_Ret::Swap(GS2C_Take_Kill_Task_Award_Ret* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(task_info_, other->task_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Take_Kill_Task_Award_Ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Take_Kill_Task_Award_Ret_descriptor_;
  metadata.reflection = GS2C_Take_Kill_Task_Award_Ret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Cross_Ammo_Info::kItemTypeFieldNumber;
const int GS2C_Cross_Ammo_Info::kRemainNumFieldNumber;
#endif  // !_MSC_VER

GS2C_Cross_Ammo_Info::GS2C_Cross_Ammo_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Cross_Ammo_Info::InitAsDefaultInstance() {
}

GS2C_Cross_Ammo_Info::GS2C_Cross_Ammo_Info(const GS2C_Cross_Ammo_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Cross_Ammo_Info::SharedCtor() {
  _cached_size_ = 0;
  itemtype_ = 1;
  remain_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Cross_Ammo_Info::~GS2C_Cross_Ammo_Info() {
  SharedDtor();
}

void GS2C_Cross_Ammo_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Cross_Ammo_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Cross_Ammo_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Cross_Ammo_Info_descriptor_;
}

const GS2C_Cross_Ammo_Info& GS2C_Cross_Ammo_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

GS2C_Cross_Ammo_Info* GS2C_Cross_Ammo_Info::default_instance_ = NULL;

GS2C_Cross_Ammo_Info* GS2C_Cross_Ammo_Info::New() const {
  return new GS2C_Cross_Ammo_Info;
}

void GS2C_Cross_Ammo_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemtype_ = 1;
    remain_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Cross_Ammo_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ArsenalType itemType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ArsenalType_IsValid(value)) {
            set_itemtype(static_cast< ::pb::ArsenalType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_remain_num;
        break;
      }

      // optional uint32 remain_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remain_num_)));
          set_has_remain_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Cross_Ammo_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.ArsenalType itemType = 1;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->itemtype(), output);
  }

  // optional uint32 remain_num = 2;
  if (has_remain_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remain_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Cross_Ammo_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.ArsenalType itemType = 1;
  if (has_itemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->itemtype(), target);
  }

  // optional uint32 remain_num = 2;
  if (has_remain_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->remain_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Cross_Ammo_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ArsenalType itemType = 1;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->itemtype());
    }

    // optional uint32 remain_num = 2;
    if (has_remain_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remain_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Cross_Ammo_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Cross_Ammo_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Cross_Ammo_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Cross_Ammo_Info::MergeFrom(const GS2C_Cross_Ammo_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_remain_num()) {
      set_remain_num(from.remain_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Cross_Ammo_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Cross_Ammo_Info::CopyFrom(const GS2C_Cross_Ammo_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Cross_Ammo_Info::IsInitialized() const {

  return true;
}

void GS2C_Cross_Ammo_Info::Swap(GS2C_Cross_Ammo_Info* other) {
  if (other != this) {
    std::swap(itemtype_, other->itemtype_);
    std::swap(remain_num_, other->remain_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Cross_Ammo_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Cross_Ammo_Info_descriptor_;
  metadata.reflection = GS2C_Cross_Ammo_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Cross_Ammo_Infos::kTaskListFieldNumber;
#endif  // !_MSC_VER

GS2C_Cross_Ammo_Infos::GS2C_Cross_Ammo_Infos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Cross_Ammo_Infos::InitAsDefaultInstance() {
}

GS2C_Cross_Ammo_Infos::GS2C_Cross_Ammo_Infos(const GS2C_Cross_Ammo_Infos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Cross_Ammo_Infos::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Cross_Ammo_Infos::~GS2C_Cross_Ammo_Infos() {
  SharedDtor();
}

void GS2C_Cross_Ammo_Infos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Cross_Ammo_Infos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Cross_Ammo_Infos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Cross_Ammo_Infos_descriptor_;
}

const GS2C_Cross_Ammo_Infos& GS2C_Cross_Ammo_Infos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

GS2C_Cross_Ammo_Infos* GS2C_Cross_Ammo_Infos::default_instance_ = NULL;

GS2C_Cross_Ammo_Infos* GS2C_Cross_Ammo_Infos::New() const {
  return new GS2C_Cross_Ammo_Infos;
}

void GS2C_Cross_Ammo_Infos::Clear() {
  task_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Cross_Ammo_Infos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GS2C_Cross_Ammo_Info task_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_task_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Cross_Ammo_Infos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GS2C_Cross_Ammo_Info task_list = 1;
  for (int i = 0; i < this->task_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Cross_Ammo_Infos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GS2C_Cross_Ammo_Info task_list = 1;
  for (int i = 0; i < this->task_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Cross_Ammo_Infos::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GS2C_Cross_Ammo_Info task_list = 1;
  total_size += 1 * this->task_list_size();
  for (int i = 0; i < this->task_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Cross_Ammo_Infos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Cross_Ammo_Infos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Cross_Ammo_Infos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Cross_Ammo_Infos::MergeFrom(const GS2C_Cross_Ammo_Infos& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_list_.MergeFrom(from.task_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Cross_Ammo_Infos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Cross_Ammo_Infos::CopyFrom(const GS2C_Cross_Ammo_Infos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Cross_Ammo_Infos::IsInitialized() const {

  return true;
}

void GS2C_Cross_Ammo_Infos::Swap(GS2C_Cross_Ammo_Infos* other) {
  if (other != this) {
    task_list_.Swap(&other->task_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Cross_Ammo_Infos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Cross_Ammo_Infos_descriptor_;
  metadata.reflection = GS2C_Cross_Ammo_Infos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC2S_Buy_Ammo::kItemTypeFieldNumber;
#endif  // !_MSC_VER

GC2S_Buy_Ammo::GC2S_Buy_Ammo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC2S_Buy_Ammo::InitAsDefaultInstance() {
}

GC2S_Buy_Ammo::GC2S_Buy_Ammo(const GC2S_Buy_Ammo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC2S_Buy_Ammo::SharedCtor() {
  _cached_size_ = 0;
  itemtype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC2S_Buy_Ammo::~GC2S_Buy_Ammo() {
  SharedDtor();
}

void GC2S_Buy_Ammo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC2S_Buy_Ammo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC2S_Buy_Ammo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC2S_Buy_Ammo_descriptor_;
}

const GC2S_Buy_Ammo& GC2S_Buy_Ammo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

GC2S_Buy_Ammo* GC2S_Buy_Ammo::default_instance_ = NULL;

GC2S_Buy_Ammo* GC2S_Buy_Ammo::New() const {
  return new GC2S_Buy_Ammo;
}

void GC2S_Buy_Ammo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemtype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC2S_Buy_Ammo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ArsenalType itemType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ArsenalType_IsValid(value)) {
            set_itemtype(static_cast< ::pb::ArsenalType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC2S_Buy_Ammo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.ArsenalType itemType = 1;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->itemtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC2S_Buy_Ammo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.ArsenalType itemType = 1;
  if (has_itemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->itemtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC2S_Buy_Ammo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ArsenalType itemType = 1;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->itemtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC2S_Buy_Ammo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC2S_Buy_Ammo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC2S_Buy_Ammo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC2S_Buy_Ammo::MergeFrom(const GC2S_Buy_Ammo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC2S_Buy_Ammo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC2S_Buy_Ammo::CopyFrom(const GC2S_Buy_Ammo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC2S_Buy_Ammo::IsInitialized() const {

  return true;
}

void GC2S_Buy_Ammo::Swap(GC2S_Buy_Ammo* other) {
  if (other != this) {
    std::swap(itemtype_, other->itemtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC2S_Buy_Ammo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC2S_Buy_Ammo_descriptor_;
  metadata.reflection = GC2S_Buy_Ammo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Buy_Ammo_Rsp::kRetFieldNumber;
const int GS2C_Buy_Ammo_Rsp::kPlayeridFieldNumber;
const int GS2C_Buy_Ammo_Rsp::kAmmoInfoFieldNumber;
const int GS2C_Buy_Ammo_Rsp::kKillTimeEndtimeFieldNumber;
const int GS2C_Buy_Ammo_Rsp::kHammerNumFieldNumber;
const int GS2C_Buy_Ammo_Rsp::kShieldEndTimeFieldNumber;
#endif  // !_MSC_VER

GS2C_Buy_Ammo_Rsp::GS2C_Buy_Ammo_Rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Buy_Ammo_Rsp::InitAsDefaultInstance() {
  ammo_info_ = const_cast< ::pb::GS2C_Cross_Ammo_Info*>(&::pb::GS2C_Cross_Ammo_Info::default_instance());
}

GS2C_Buy_Ammo_Rsp::GS2C_Buy_Ammo_Rsp(const GS2C_Buy_Ammo_Rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Buy_Ammo_Rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  ammo_info_ = NULL;
  killtimeendtime_ = GOOGLE_ULONGLONG(0);
  hammernum_ = 0u;
  shieldendtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Buy_Ammo_Rsp::~GS2C_Buy_Ammo_Rsp() {
  SharedDtor();
}

void GS2C_Buy_Ammo_Rsp::SharedDtor() {
  if (this != default_instance_) {
    delete ammo_info_;
  }
}

void GS2C_Buy_Ammo_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Buy_Ammo_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Buy_Ammo_Rsp_descriptor_;
}

const GS2C_Buy_Ammo_Rsp& GS2C_Buy_Ammo_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

GS2C_Buy_Ammo_Rsp* GS2C_Buy_Ammo_Rsp::default_instance_ = NULL;

GS2C_Buy_Ammo_Rsp* GS2C_Buy_Ammo_Rsp::New() const {
  return new GS2C_Buy_Ammo_Rsp;
}

void GS2C_Buy_Ammo_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_ammo_info()) {
      if (ammo_info_ != NULL) ammo_info_->::pb::GS2C_Cross_Ammo_Info::Clear();
    }
    killtimeendtime_ = GOOGLE_ULONGLONG(0);
    hammernum_ = 0u;
    shieldendtime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Buy_Ammo_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.CROSS_RET ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::CROSS_RET_IsValid(value)) {
            set_ret(static_cast< ::pb::CROSS_RET >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // optional uint64 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ammo_info;
        break;
      }

      // optional .pb.GS2C_Cross_Ammo_Info ammo_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ammo_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ammo_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_KillTimeEndtime;
        break;
      }

      // optional uint64 KillTimeEndtime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_KillTimeEndtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &killtimeendtime_)));
          set_has_killtimeendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hammerNum;
        break;
      }

      // optional uint32 hammerNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hammerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hammernum_)));
          set_has_hammernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_shieldEndTime;
        break;
      }

      // optional uint64 shieldEndTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shieldEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &shieldendtime_)));
          set_has_shieldendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Buy_Ammo_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.CROSS_RET ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // optional uint64 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // optional .pb.GS2C_Cross_Ammo_Info ammo_info = 3;
  if (has_ammo_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ammo_info(), output);
  }

  // optional uint64 KillTimeEndtime = 4;
  if (has_killtimeendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->killtimeendtime(), output);
  }

  // optional uint32 hammerNum = 5;
  if (has_hammernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hammernum(), output);
  }

  // optional uint64 shieldEndTime = 6;
  if (has_shieldendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->shieldendtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Buy_Ammo_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.CROSS_RET ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // optional uint64 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  // optional .pb.GS2C_Cross_Ammo_Info ammo_info = 3;
  if (has_ammo_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ammo_info(), target);
  }

  // optional uint64 KillTimeEndtime = 4;
  if (has_killtimeendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->killtimeendtime(), target);
  }

  // optional uint32 hammerNum = 5;
  if (has_hammernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hammernum(), target);
  }

  // optional uint64 shieldEndTime = 6;
  if (has_shieldendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->shieldendtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Buy_Ammo_Rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.CROSS_RET ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional uint64 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional .pb.GS2C_Cross_Ammo_Info ammo_info = 3;
    if (has_ammo_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ammo_info());
    }

    // optional uint64 KillTimeEndtime = 4;
    if (has_killtimeendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->killtimeendtime());
    }

    // optional uint32 hammerNum = 5;
    if (has_hammernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hammernum());
    }

    // optional uint64 shieldEndTime = 6;
    if (has_shieldendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->shieldendtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Buy_Ammo_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Buy_Ammo_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Buy_Ammo_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Buy_Ammo_Rsp::MergeFrom(const GS2C_Buy_Ammo_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_ammo_info()) {
      mutable_ammo_info()->::pb::GS2C_Cross_Ammo_Info::MergeFrom(from.ammo_info());
    }
    if (from.has_killtimeendtime()) {
      set_killtimeendtime(from.killtimeendtime());
    }
    if (from.has_hammernum()) {
      set_hammernum(from.hammernum());
    }
    if (from.has_shieldendtime()) {
      set_shieldendtime(from.shieldendtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Buy_Ammo_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Buy_Ammo_Rsp::CopyFrom(const GS2C_Buy_Ammo_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Buy_Ammo_Rsp::IsInitialized() const {

  return true;
}

void GS2C_Buy_Ammo_Rsp::Swap(GS2C_Buy_Ammo_Rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(playerid_, other->playerid_);
    std::swap(ammo_info_, other->ammo_info_);
    std::swap(killtimeendtime_, other->killtimeendtime_);
    std::swap(hammernum_, other->hammernum_);
    std::swap(shieldendtime_, other->shieldendtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Buy_Ammo_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Buy_Ammo_Rsp_descriptor_;
  metadata.reflection = GS2C_Buy_Ammo_Rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Use_Attack_Hummer::kCountryIdFieldNumber;
const int GS2C_Use_Attack_Hummer::kHeroidFieldNumber;
#endif  // !_MSC_VER

GS2C_Use_Attack_Hummer::GS2C_Use_Attack_Hummer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Use_Attack_Hummer::InitAsDefaultInstance() {
}

GS2C_Use_Attack_Hummer::GS2C_Use_Attack_Hummer(const GS2C_Use_Attack_Hummer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Use_Attack_Hummer::SharedCtor() {
  _cached_size_ = 0;
  country_id_ = 0u;
  heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Use_Attack_Hummer::~GS2C_Use_Attack_Hummer() {
  SharedDtor();
}

void GS2C_Use_Attack_Hummer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Use_Attack_Hummer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Use_Attack_Hummer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Use_Attack_Hummer_descriptor_;
}

const GS2C_Use_Attack_Hummer& GS2C_Use_Attack_Hummer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

GS2C_Use_Attack_Hummer* GS2C_Use_Attack_Hummer::default_instance_ = NULL;

GS2C_Use_Attack_Hummer* GS2C_Use_Attack_Hummer::New() const {
  return new GS2C_Use_Attack_Hummer;
}

void GS2C_Use_Attack_Hummer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    country_id_ = 0u;
    heroid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Use_Attack_Hummer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 country_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_id_)));
          set_has_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heroid;
        break;
      }

      // optional uint32 heroid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Use_Attack_Hummer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 country_id = 1;
  if (has_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->country_id(), output);
  }

  // optional uint32 heroid = 2;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Use_Attack_Hummer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 country_id = 1;
  if (has_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->country_id(), target);
  }

  // optional uint32 heroid = 2;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Use_Attack_Hummer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 country_id = 1;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_id());
    }

    // optional uint32 heroid = 2;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Use_Attack_Hummer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Use_Attack_Hummer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Use_Attack_Hummer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Use_Attack_Hummer::MergeFrom(const GS2C_Use_Attack_Hummer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country_id()) {
      set_country_id(from.country_id());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Use_Attack_Hummer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Use_Attack_Hummer::CopyFrom(const GS2C_Use_Attack_Hummer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Use_Attack_Hummer::IsInitialized() const {

  return true;
}

void GS2C_Use_Attack_Hummer::Swap(GS2C_Use_Attack_Hummer* other) {
  if (other != this) {
    std::swap(country_id_, other->country_id_);
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Use_Attack_Hummer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Use_Attack_Hummer_descriptor_;
  metadata.reflection = GS2C_Use_Attack_Hummer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Attack_Result::kRetFieldNumber;
const int GS2C_Attack_Result::kHammerNumFieldNumber;
#endif  // !_MSC_VER

GS2C_Attack_Result::GS2C_Attack_Result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Attack_Result::InitAsDefaultInstance() {
}

GS2C_Attack_Result::GS2C_Attack_Result(const GS2C_Attack_Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Attack_Result::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  hammernum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Attack_Result::~GS2C_Attack_Result() {
  SharedDtor();
}

void GS2C_Attack_Result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Attack_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Attack_Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Attack_Result_descriptor_;
}

const GS2C_Attack_Result& GS2C_Attack_Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

GS2C_Attack_Result* GS2C_Attack_Result::default_instance_ = NULL;

GS2C_Attack_Result* GS2C_Attack_Result::New() const {
  return new GS2C_Attack_Result;
}

void GS2C_Attack_Result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    hammernum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Attack_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.CROSS_RET ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::CROSS_RET_IsValid(value)) {
            set_ret(static_cast< ::pb::CROSS_RET >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hammerNum;
        break;
      }

      // optional uint32 hammerNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hammerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hammernum_)));
          set_has_hammernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Attack_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.CROSS_RET ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // optional uint32 hammerNum = 2;
  if (has_hammernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hammernum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Attack_Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.CROSS_RET ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // optional uint32 hammerNum = 2;
  if (has_hammernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hammernum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Attack_Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.CROSS_RET ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional uint32 hammerNum = 2;
    if (has_hammernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hammernum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Attack_Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Attack_Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Attack_Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Attack_Result::MergeFrom(const GS2C_Attack_Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_hammernum()) {
      set_hammernum(from.hammernum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Attack_Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Attack_Result::CopyFrom(const GS2C_Attack_Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Attack_Result::IsInitialized() const {

  return true;
}

void GS2C_Attack_Result::Swap(GS2C_Attack_Result* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(hammernum_, other->hammernum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Attack_Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Attack_Result_descriptor_;
  metadata.reflection = GS2C_Attack_Result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Cross_Rank_Info::kRankNumFieldNumber;
#endif  // !_MSC_VER

GS2C_Cross_Rank_Info::GS2C_Cross_Rank_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Cross_Rank_Info::InitAsDefaultInstance() {
}

GS2C_Cross_Rank_Info::GS2C_Cross_Rank_Info(const GS2C_Cross_Rank_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Cross_Rank_Info::SharedCtor() {
  _cached_size_ = 0;
  rank_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Cross_Rank_Info::~GS2C_Cross_Rank_Info() {
  SharedDtor();
}

void GS2C_Cross_Rank_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Cross_Rank_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Cross_Rank_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Cross_Rank_Info_descriptor_;
}

const GS2C_Cross_Rank_Info& GS2C_Cross_Rank_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossWar_2eproto();
  return *default_instance_;
}

GS2C_Cross_Rank_Info* GS2C_Cross_Rank_Info::default_instance_ = NULL;

GS2C_Cross_Rank_Info* GS2C_Cross_Rank_Info::New() const {
  return new GS2C_Cross_Rank_Info;
}

void GS2C_Cross_Rank_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Cross_Rank_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rank_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_num_)));
          set_has_rank_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Cross_Rank_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rank_num = 1;
  if (has_rank_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Cross_Rank_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rank_num = 1;
  if (has_rank_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Cross_Rank_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rank_num = 1;
    if (has_rank_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Cross_Rank_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Cross_Rank_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Cross_Rank_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Cross_Rank_Info::MergeFrom(const GS2C_Cross_Rank_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank_num()) {
      set_rank_num(from.rank_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Cross_Rank_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Cross_Rank_Info::CopyFrom(const GS2C_Cross_Rank_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Cross_Rank_Info::IsInitialized() const {

  return true;
}

void GS2C_Cross_Rank_Info::Swap(GS2C_Cross_Rank_Info* other) {
  if (other != this) {
    std::swap(rank_num_, other->rank_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Cross_Rank_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Cross_Rank_Info_descriptor_;
  metadata.reflection = GS2C_Cross_Rank_Info_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
