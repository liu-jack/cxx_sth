// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AutoCountryWar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AutoCountryWar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* C2GS_Quick_Training_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Quick_Training_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Start_Auto_Country_War_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Start_Auto_Country_War_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Reauto_Country_War_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Reauto_Country_War_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Change_Target_City_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Change_Target_City_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Auto_Country_War_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Auto_Country_War_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* Struct_Auto_Country_War_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Struct_Auto_Country_War_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_AC_Army_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_AC_Army_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_QuickTraining_Ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_QuickTraining_Ret_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Start_AC_Ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Start_AC_Ret_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_REAUTO_HERO_Ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_REAUTO_HERO_Ret_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Change_Des_Ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Change_Des_Ret_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Msg_AC_Return_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_AutoCountryWar_2eproto() {
  protobuf_AddDesc_AutoCountryWar_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AutoCountryWar.proto");
  GOOGLE_CHECK(file != NULL);
  C2GS_Quick_Training_descriptor_ = file->message_type(0);
  static const int C2GS_Quick_Training_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Quick_Training, trainid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Quick_Training, heroid_),
  };
  C2GS_Quick_Training_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Quick_Training_descriptor_,
      C2GS_Quick_Training::default_instance_,
      C2GS_Quick_Training_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Quick_Training, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Quick_Training, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Quick_Training));
  C2GS_Start_Auto_Country_War_descriptor_ = file->message_type(1);
  static const int C2GS_Start_Auto_Country_War_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Start_Auto_Country_War, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Start_Auto_Country_War, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Start_Auto_Country_War, isusegoldaddsoldier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Start_Auto_Country_War, isautocallup_),
  };
  C2GS_Start_Auto_Country_War_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Start_Auto_Country_War_descriptor_,
      C2GS_Start_Auto_Country_War::default_instance_,
      C2GS_Start_Auto_Country_War_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Start_Auto_Country_War, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Start_Auto_Country_War, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Start_Auto_Country_War));
  C2GS_Reauto_Country_War_descriptor_ = file->message_type(2);
  static const int C2GS_Reauto_Country_War_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Reauto_Country_War, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Reauto_Country_War, isjoinauto_),
  };
  C2GS_Reauto_Country_War_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Reauto_Country_War_descriptor_,
      C2GS_Reauto_Country_War::default_instance_,
      C2GS_Reauto_Country_War_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Reauto_Country_War, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Reauto_Country_War, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Reauto_Country_War));
  C2GS_Change_Target_City_descriptor_ = file->message_type(3);
  static const int C2GS_Change_Target_City_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Change_Target_City, cityid_),
  };
  C2GS_Change_Target_City_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Change_Target_City_descriptor_,
      C2GS_Change_Target_City::default_instance_,
      C2GS_Change_Target_City_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Change_Target_City, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Change_Target_City, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Change_Target_City));
  GS2C_Auto_Country_War_Info_descriptor_ = file->message_type(4);
  static const int GS2C_Auto_Country_War_Info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Auto_Country_War_Info, is_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Auto_Country_War_Info, isshutdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Auto_Country_War_Info, detaildata_),
  };
  GS2C_Auto_Country_War_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Auto_Country_War_Info_descriptor_,
      GS2C_Auto_Country_War_Info::default_instance_,
      GS2C_Auto_Country_War_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Auto_Country_War_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Auto_Country_War_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Auto_Country_War_Info));
  Struct_Auto_Country_War_descriptor_ = file->message_type(5);
  static const int Struct_Auto_Country_War_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Auto_Country_War, target_city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Auto_Country_War, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Auto_Country_War, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Auto_Country_War, killcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Auto_Country_War, expcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Auto_Country_War, occupycount_),
  };
  Struct_Auto_Country_War_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Struct_Auto_Country_War_descriptor_,
      Struct_Auto_Country_War::default_instance_,
      Struct_Auto_Country_War_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Auto_Country_War, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Auto_Country_War, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Struct_Auto_Country_War));
  GS2C_AC_Army_Info_descriptor_ = file->message_type(6);
  static const int GS2C_AC_Army_Info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_AC_Army_Info, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_AC_Army_Info, killorbekilled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_AC_Army_Info, killname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_AC_Army_Info, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_AC_Army_Info, damage_),
  };
  GS2C_AC_Army_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_AC_Army_Info_descriptor_,
      GS2C_AC_Army_Info::default_instance_,
      GS2C_AC_Army_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_AC_Army_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_AC_Army_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_AC_Army_Info));
  GS2C_QuickTraining_Ret_descriptor_ = file->message_type(7);
  static const int GS2C_QuickTraining_Ret_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_QuickTraining_Ret, ret_),
  };
  GS2C_QuickTraining_Ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_QuickTraining_Ret_descriptor_,
      GS2C_QuickTraining_Ret::default_instance_,
      GS2C_QuickTraining_Ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_QuickTraining_Ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_QuickTraining_Ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_QuickTraining_Ret));
  GS2C_Start_AC_Ret_descriptor_ = file->message_type(8);
  static const int GS2C_Start_AC_Ret_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Start_AC_Ret, ret_),
  };
  GS2C_Start_AC_Ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Start_AC_Ret_descriptor_,
      GS2C_Start_AC_Ret::default_instance_,
      GS2C_Start_AC_Ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Start_AC_Ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Start_AC_Ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Start_AC_Ret));
  GS2C_REAUTO_HERO_Ret_descriptor_ = file->message_type(9);
  static const int GS2C_REAUTO_HERO_Ret_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_REAUTO_HERO_Ret, ret_),
  };
  GS2C_REAUTO_HERO_Ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_REAUTO_HERO_Ret_descriptor_,
      GS2C_REAUTO_HERO_Ret::default_instance_,
      GS2C_REAUTO_HERO_Ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_REAUTO_HERO_Ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_REAUTO_HERO_Ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_REAUTO_HERO_Ret));
  GS2C_Change_Des_Ret_descriptor_ = file->message_type(10);
  static const int GS2C_Change_Des_Ret_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Change_Des_Ret, ret_),
  };
  GS2C_Change_Des_Ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Change_Des_Ret_descriptor_,
      GS2C_Change_Des_Ret::default_instance_,
      GS2C_Change_Des_Ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Change_Des_Ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Change_Des_Ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Change_Des_Ret));
  Msg_AC_Return_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AutoCountryWar_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Quick_Training_descriptor_, &C2GS_Quick_Training::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Start_Auto_Country_War_descriptor_, &C2GS_Start_Auto_Country_War::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Reauto_Country_War_descriptor_, &C2GS_Reauto_Country_War::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Change_Target_City_descriptor_, &C2GS_Change_Target_City::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Auto_Country_War_Info_descriptor_, &GS2C_Auto_Country_War_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Struct_Auto_Country_War_descriptor_, &Struct_Auto_Country_War::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_AC_Army_Info_descriptor_, &GS2C_AC_Army_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_QuickTraining_Ret_descriptor_, &GS2C_QuickTraining_Ret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Start_AC_Ret_descriptor_, &GS2C_Start_AC_Ret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_REAUTO_HERO_Ret_descriptor_, &GS2C_REAUTO_HERO_Ret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Change_Des_Ret_descriptor_, &GS2C_Change_Des_Ret::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AutoCountryWar_2eproto() {
  delete C2GS_Quick_Training::default_instance_;
  delete C2GS_Quick_Training_reflection_;
  delete C2GS_Start_Auto_Country_War::default_instance_;
  delete C2GS_Start_Auto_Country_War_reflection_;
  delete C2GS_Reauto_Country_War::default_instance_;
  delete C2GS_Reauto_Country_War_reflection_;
  delete C2GS_Change_Target_City::default_instance_;
  delete C2GS_Change_Target_City_reflection_;
  delete GS2C_Auto_Country_War_Info::default_instance_;
  delete GS2C_Auto_Country_War_Info_reflection_;
  delete Struct_Auto_Country_War::default_instance_;
  delete Struct_Auto_Country_War_reflection_;
  delete GS2C_AC_Army_Info::default_instance_;
  delete GS2C_AC_Army_Info_reflection_;
  delete GS2C_QuickTraining_Ret::default_instance_;
  delete GS2C_QuickTraining_Ret_reflection_;
  delete GS2C_Start_AC_Ret::default_instance_;
  delete GS2C_Start_AC_Ret_reflection_;
  delete GS2C_REAUTO_HERO_Ret::default_instance_;
  delete GS2C_REAUTO_HERO_Ret_reflection_;
  delete GS2C_Change_Des_Ret::default_instance_;
  delete GS2C_Change_Des_Ret_reflection_;
}

void protobuf_AddDesc_AutoCountryWar_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_CommomDef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024AutoCountryWar.proto\022\002pb\032\017CommomDef.pr"
    "oto\"6\n\023C2GS_Quick_Training\022\017\n\007trainid\030\001 "
    "\001(\r\022\016\n\006heroid\030\002 \003(\r\"p\n\033C2GS_Start_Auto_C"
    "ountry_War\022\016\n\006cityid\030\001 \001(\r\022\016\n\006heroid\030\002 \003"
    "(\r\022\033\n\023isUseGoldAddSoldier\030\003 \001(\010\022\024\n\014isAut"
    "oCallUp\030\004 \001(\010\"=\n\027C2GS_Reauto_Country_War"
    "\022\016\n\006heroid\030\001 \001(\r\022\022\n\nisJoinAuto\030\002 \001(\010\")\n\027"
    "C2GS_Change_Target_City\022\016\n\006cityid\030\001 \001(\r\""
    "s\n\032GS2C_Auto_Country_War_Info\022\020\n\010is_begi"
    "n\030\001 \002(\010\022\022\n\nisShutDown\030\002 \001(\010\022/\n\ndetailDat"
    "a\030\003 \001(\0132\033.pb.Struct_Auto_Country_War\"\212\001\n"
    "\027Struct_Auto_Country_War\022\023\n\013target_city\030"
    "\001 \001(\r\022\016\n\006heroid\030\002 \003(\r\022\020\n\010end_time\030\003 \001(\004\022"
    "\021\n\tkillCount\030\004 \001(\r\022\020\n\010expCount\030\005 \001(\r\022\023\n\013"
    "occupyCount\030\006 \001(\r\"n\n\021GS2C_AC_Army_Info\022\016"
    "\n\006heroid\030\001 \001(\r\022\026\n\016killorbekilled\030\002 \001(\010\022\020"
    "\n\010killname\030\003 \001(\t\022\017\n\007protoid\030\004 \001(\r\022\016\n\006dam"
    "age\030\005 \001(\r\"8\n\026GS2C_QuickTraining_Ret\022\036\n\003r"
    "et\030\001 \001(\0162\021.pb.Msg_AC_Return\"3\n\021GS2C_Star"
    "t_AC_Ret\022\036\n\003ret\030\001 \001(\0162\021.pb.Msg_AC_Return"
    "\"6\n\024GS2C_REAUTO_HERO_Ret\022\036\n\003ret\030\001 \001(\0162\021."
    "pb.Msg_AC_Return\"5\n\023GS2C_Change_Des_Ret\022"
    "\036\n\003ret\030\001 \001(\0162\021.pb.Msg_AC_Return*\214\001\n\rMsg_"
    "AC_Return\022\016\n\nAC_Success\020\001\022\013\n\007AC_Fail\020\002\022\022"
    "\n\016AC_No_Resource\020\003\022\017\n\013AC_IS_IN_AC\020\004\022\023\n\017A"
    "C_IS_NOT_IN_AC\020\005\022\023\n\017AC_DES_CITY_ERR\020\006\022\017\n"
    "\013AC_HERO_ERR\020\007", 1054);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AutoCountryWar.proto", &protobuf_RegisterTypes);
  C2GS_Quick_Training::default_instance_ = new C2GS_Quick_Training();
  C2GS_Start_Auto_Country_War::default_instance_ = new C2GS_Start_Auto_Country_War();
  C2GS_Reauto_Country_War::default_instance_ = new C2GS_Reauto_Country_War();
  C2GS_Change_Target_City::default_instance_ = new C2GS_Change_Target_City();
  GS2C_Auto_Country_War_Info::default_instance_ = new GS2C_Auto_Country_War_Info();
  Struct_Auto_Country_War::default_instance_ = new Struct_Auto_Country_War();
  GS2C_AC_Army_Info::default_instance_ = new GS2C_AC_Army_Info();
  GS2C_QuickTraining_Ret::default_instance_ = new GS2C_QuickTraining_Ret();
  GS2C_Start_AC_Ret::default_instance_ = new GS2C_Start_AC_Ret();
  GS2C_REAUTO_HERO_Ret::default_instance_ = new GS2C_REAUTO_HERO_Ret();
  GS2C_Change_Des_Ret::default_instance_ = new GS2C_Change_Des_Ret();
  C2GS_Quick_Training::default_instance_->InitAsDefaultInstance();
  C2GS_Start_Auto_Country_War::default_instance_->InitAsDefaultInstance();
  C2GS_Reauto_Country_War::default_instance_->InitAsDefaultInstance();
  C2GS_Change_Target_City::default_instance_->InitAsDefaultInstance();
  GS2C_Auto_Country_War_Info::default_instance_->InitAsDefaultInstance();
  Struct_Auto_Country_War::default_instance_->InitAsDefaultInstance();
  GS2C_AC_Army_Info::default_instance_->InitAsDefaultInstance();
  GS2C_QuickTraining_Ret::default_instance_->InitAsDefaultInstance();
  GS2C_Start_AC_Ret::default_instance_->InitAsDefaultInstance();
  GS2C_REAUTO_HERO_Ret::default_instance_->InitAsDefaultInstance();
  GS2C_Change_Des_Ret::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AutoCountryWar_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AutoCountryWar_2eproto {
  StaticDescriptorInitializer_AutoCountryWar_2eproto() {
    protobuf_AddDesc_AutoCountryWar_2eproto();
  }
} static_descriptor_initializer_AutoCountryWar_2eproto_;
const ::google::protobuf::EnumDescriptor* Msg_AC_Return_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_AC_Return_descriptor_;
}
bool Msg_AC_Return_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Quick_Training::kTrainidFieldNumber;
const int C2GS_Quick_Training::kHeroidFieldNumber;
#endif  // !_MSC_VER

C2GS_Quick_Training::C2GS_Quick_Training()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Quick_Training::InitAsDefaultInstance() {
}

C2GS_Quick_Training::C2GS_Quick_Training(const C2GS_Quick_Training& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Quick_Training::SharedCtor() {
  _cached_size_ = 0;
  trainid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Quick_Training::~C2GS_Quick_Training() {
  SharedDtor();
}

void C2GS_Quick_Training::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Quick_Training::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Quick_Training::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Quick_Training_descriptor_;
}

const C2GS_Quick_Training& C2GS_Quick_Training::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AutoCountryWar_2eproto();
  return *default_instance_;
}

C2GS_Quick_Training* C2GS_Quick_Training::default_instance_ = NULL;

C2GS_Quick_Training* C2GS_Quick_Training::New() const {
  return new C2GS_Quick_Training;
}

void C2GS_Quick_Training::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trainid_ = 0u;
  }
  heroid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Quick_Training::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 trainid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trainid_)));
          set_has_trainid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heroid;
        break;
      }

      // repeated uint32 heroid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_heroid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heroid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heroid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Quick_Training::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 trainid = 1;
  if (has_trainid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->trainid(), output);
  }

  // repeated uint32 heroid = 2;
  for (int i = 0; i < this->heroid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->heroid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Quick_Training::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 trainid = 1;
  if (has_trainid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->trainid(), target);
  }

  // repeated uint32 heroid = 2;
  for (int i = 0; i < this->heroid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->heroid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Quick_Training::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 trainid = 1;
    if (has_trainid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trainid());
    }

  }
  // repeated uint32 heroid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->heroid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heroid(i));
    }
    total_size += 1 * this->heroid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Quick_Training::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Quick_Training* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Quick_Training*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Quick_Training::MergeFrom(const C2GS_Quick_Training& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroid_.MergeFrom(from.heroid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trainid()) {
      set_trainid(from.trainid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Quick_Training::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Quick_Training::CopyFrom(const C2GS_Quick_Training& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Quick_Training::IsInitialized() const {

  return true;
}

void C2GS_Quick_Training::Swap(C2GS_Quick_Training* other) {
  if (other != this) {
    std::swap(trainid_, other->trainid_);
    heroid_.Swap(&other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Quick_Training::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Quick_Training_descriptor_;
  metadata.reflection = C2GS_Quick_Training_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Start_Auto_Country_War::kCityidFieldNumber;
const int C2GS_Start_Auto_Country_War::kHeroidFieldNumber;
const int C2GS_Start_Auto_Country_War::kIsUseGoldAddSoldierFieldNumber;
const int C2GS_Start_Auto_Country_War::kIsAutoCallUpFieldNumber;
#endif  // !_MSC_VER

C2GS_Start_Auto_Country_War::C2GS_Start_Auto_Country_War()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Start_Auto_Country_War::InitAsDefaultInstance() {
}

C2GS_Start_Auto_Country_War::C2GS_Start_Auto_Country_War(const C2GS_Start_Auto_Country_War& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Start_Auto_Country_War::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0u;
  isusegoldaddsoldier_ = false;
  isautocallup_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Start_Auto_Country_War::~C2GS_Start_Auto_Country_War() {
  SharedDtor();
}

void C2GS_Start_Auto_Country_War::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Start_Auto_Country_War::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Start_Auto_Country_War::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Start_Auto_Country_War_descriptor_;
}

const C2GS_Start_Auto_Country_War& C2GS_Start_Auto_Country_War::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AutoCountryWar_2eproto();
  return *default_instance_;
}

C2GS_Start_Auto_Country_War* C2GS_Start_Auto_Country_War::default_instance_ = NULL;

C2GS_Start_Auto_Country_War* C2GS_Start_Auto_Country_War::New() const {
  return new C2GS_Start_Auto_Country_War;
}

void C2GS_Start_Auto_Country_War::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cityid_ = 0u;
    isusegoldaddsoldier_ = false;
    isautocallup_ = false;
  }
  heroid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Start_Auto_Country_War::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cityid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heroid;
        break;
      }

      // repeated uint32 heroid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_heroid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heroid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heroid;
        if (input->ExpectTag(24)) goto parse_isUseGoldAddSoldier;
        break;
      }

      // optional bool isUseGoldAddSoldier = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isUseGoldAddSoldier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isusegoldaddsoldier_)));
          set_has_isusegoldaddsoldier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isAutoCallUp;
        break;
      }

      // optional bool isAutoCallUp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAutoCallUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isautocallup_)));
          set_has_isautocallup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Start_Auto_Country_War::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cityid = 1;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }

  // repeated uint32 heroid = 2;
  for (int i = 0; i < this->heroid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->heroid(i), output);
  }

  // optional bool isUseGoldAddSoldier = 3;
  if (has_isusegoldaddsoldier()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isusegoldaddsoldier(), output);
  }

  // optional bool isAutoCallUp = 4;
  if (has_isautocallup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isautocallup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Start_Auto_Country_War::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cityid = 1;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }

  // repeated uint32 heroid = 2;
  for (int i = 0; i < this->heroid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->heroid(i), target);
  }

  // optional bool isUseGoldAddSoldier = 3;
  if (has_isusegoldaddsoldier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isusegoldaddsoldier(), target);
  }

  // optional bool isAutoCallUp = 4;
  if (has_isautocallup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isautocallup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Start_Auto_Country_War::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cityid = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional bool isUseGoldAddSoldier = 3;
    if (has_isusegoldaddsoldier()) {
      total_size += 1 + 1;
    }

    // optional bool isAutoCallUp = 4;
    if (has_isautocallup()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 heroid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->heroid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heroid(i));
    }
    total_size += 1 * this->heroid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Start_Auto_Country_War::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Start_Auto_Country_War* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Start_Auto_Country_War*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Start_Auto_Country_War::MergeFrom(const C2GS_Start_Auto_Country_War& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroid_.MergeFrom(from.heroid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_isusegoldaddsoldier()) {
      set_isusegoldaddsoldier(from.isusegoldaddsoldier());
    }
    if (from.has_isautocallup()) {
      set_isautocallup(from.isautocallup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Start_Auto_Country_War::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Start_Auto_Country_War::CopyFrom(const C2GS_Start_Auto_Country_War& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Start_Auto_Country_War::IsInitialized() const {

  return true;
}

void C2GS_Start_Auto_Country_War::Swap(C2GS_Start_Auto_Country_War* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    heroid_.Swap(&other->heroid_);
    std::swap(isusegoldaddsoldier_, other->isusegoldaddsoldier_);
    std::swap(isautocallup_, other->isautocallup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Start_Auto_Country_War::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Start_Auto_Country_War_descriptor_;
  metadata.reflection = C2GS_Start_Auto_Country_War_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Reauto_Country_War::kHeroidFieldNumber;
const int C2GS_Reauto_Country_War::kIsJoinAutoFieldNumber;
#endif  // !_MSC_VER

C2GS_Reauto_Country_War::C2GS_Reauto_Country_War()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Reauto_Country_War::InitAsDefaultInstance() {
}

C2GS_Reauto_Country_War::C2GS_Reauto_Country_War(const C2GS_Reauto_Country_War& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Reauto_Country_War::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  isjoinauto_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Reauto_Country_War::~C2GS_Reauto_Country_War() {
  SharedDtor();
}

void C2GS_Reauto_Country_War::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Reauto_Country_War::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Reauto_Country_War::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Reauto_Country_War_descriptor_;
}

const C2GS_Reauto_Country_War& C2GS_Reauto_Country_War::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AutoCountryWar_2eproto();
  return *default_instance_;
}

C2GS_Reauto_Country_War* C2GS_Reauto_Country_War::default_instance_ = NULL;

C2GS_Reauto_Country_War* C2GS_Reauto_Country_War::New() const {
  return new C2GS_Reauto_Country_War;
}

void C2GS_Reauto_Country_War::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    isjoinauto_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Reauto_Country_War::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isJoinAuto;
        break;
      }

      // optional bool isJoinAuto = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isJoinAuto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isjoinauto_)));
          set_has_isjoinauto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Reauto_Country_War::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroid = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional bool isJoinAuto = 2;
  if (has_isjoinauto()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isjoinauto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Reauto_Country_War::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroid = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional bool isJoinAuto = 2;
  if (has_isjoinauto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isjoinauto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Reauto_Country_War::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroid = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional bool isJoinAuto = 2;
    if (has_isjoinauto()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Reauto_Country_War::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Reauto_Country_War* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Reauto_Country_War*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Reauto_Country_War::MergeFrom(const C2GS_Reauto_Country_War& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_isjoinauto()) {
      set_isjoinauto(from.isjoinauto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Reauto_Country_War::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Reauto_Country_War::CopyFrom(const C2GS_Reauto_Country_War& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Reauto_Country_War::IsInitialized() const {

  return true;
}

void C2GS_Reauto_Country_War::Swap(C2GS_Reauto_Country_War* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(isjoinauto_, other->isjoinauto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Reauto_Country_War::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Reauto_Country_War_descriptor_;
  metadata.reflection = C2GS_Reauto_Country_War_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Change_Target_City::kCityidFieldNumber;
#endif  // !_MSC_VER

C2GS_Change_Target_City::C2GS_Change_Target_City()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Change_Target_City::InitAsDefaultInstance() {
}

C2GS_Change_Target_City::C2GS_Change_Target_City(const C2GS_Change_Target_City& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Change_Target_City::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Change_Target_City::~C2GS_Change_Target_City() {
  SharedDtor();
}

void C2GS_Change_Target_City::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Change_Target_City::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Change_Target_City::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Change_Target_City_descriptor_;
}

const C2GS_Change_Target_City& C2GS_Change_Target_City::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AutoCountryWar_2eproto();
  return *default_instance_;
}

C2GS_Change_Target_City* C2GS_Change_Target_City::default_instance_ = NULL;

C2GS_Change_Target_City* C2GS_Change_Target_City::New() const {
  return new C2GS_Change_Target_City;
}

void C2GS_Change_Target_City::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Change_Target_City::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cityid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Change_Target_City::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cityid = 1;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Change_Target_City::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cityid = 1;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Change_Target_City::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cityid = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Change_Target_City::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Change_Target_City* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Change_Target_City*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Change_Target_City::MergeFrom(const C2GS_Change_Target_City& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Change_Target_City::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Change_Target_City::CopyFrom(const C2GS_Change_Target_City& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Change_Target_City::IsInitialized() const {

  return true;
}

void C2GS_Change_Target_City::Swap(C2GS_Change_Target_City* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Change_Target_City::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Change_Target_City_descriptor_;
  metadata.reflection = C2GS_Change_Target_City_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Auto_Country_War_Info::kIsBeginFieldNumber;
const int GS2C_Auto_Country_War_Info::kIsShutDownFieldNumber;
const int GS2C_Auto_Country_War_Info::kDetailDataFieldNumber;
#endif  // !_MSC_VER

GS2C_Auto_Country_War_Info::GS2C_Auto_Country_War_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Auto_Country_War_Info::InitAsDefaultInstance() {
  detaildata_ = const_cast< ::pb::Struct_Auto_Country_War*>(&::pb::Struct_Auto_Country_War::default_instance());
}

GS2C_Auto_Country_War_Info::GS2C_Auto_Country_War_Info(const GS2C_Auto_Country_War_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Auto_Country_War_Info::SharedCtor() {
  _cached_size_ = 0;
  is_begin_ = false;
  isshutdown_ = false;
  detaildata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Auto_Country_War_Info::~GS2C_Auto_Country_War_Info() {
  SharedDtor();
}

void GS2C_Auto_Country_War_Info::SharedDtor() {
  if (this != default_instance_) {
    delete detaildata_;
  }
}

void GS2C_Auto_Country_War_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Auto_Country_War_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Auto_Country_War_Info_descriptor_;
}

const GS2C_Auto_Country_War_Info& GS2C_Auto_Country_War_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AutoCountryWar_2eproto();
  return *default_instance_;
}

GS2C_Auto_Country_War_Info* GS2C_Auto_Country_War_Info::default_instance_ = NULL;

GS2C_Auto_Country_War_Info* GS2C_Auto_Country_War_Info::New() const {
  return new GS2C_Auto_Country_War_Info;
}

void GS2C_Auto_Country_War_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_begin_ = false;
    isshutdown_ = false;
    if (has_detaildata()) {
      if (detaildata_ != NULL) detaildata_->::pb::Struct_Auto_Country_War::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Auto_Country_War_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_begin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_begin_)));
          set_has_is_begin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isShutDown;
        break;
      }

      // optional bool isShutDown = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isShutDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isshutdown_)));
          set_has_isshutdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_detailData;
        break;
      }

      // optional .pb.Struct_Auto_Country_War detailData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detailData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detaildata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Auto_Country_War_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_begin = 1;
  if (has_is_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_begin(), output);
  }

  // optional bool isShutDown = 2;
  if (has_isshutdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isshutdown(), output);
  }

  // optional .pb.Struct_Auto_Country_War detailData = 3;
  if (has_detaildata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->detaildata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Auto_Country_War_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_begin = 1;
  if (has_is_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_begin(), target);
  }

  // optional bool isShutDown = 2;
  if (has_isshutdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isshutdown(), target);
  }

  // optional .pb.Struct_Auto_Country_War detailData = 3;
  if (has_detaildata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->detaildata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Auto_Country_War_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_begin = 1;
    if (has_is_begin()) {
      total_size += 1 + 1;
    }

    // optional bool isShutDown = 2;
    if (has_isshutdown()) {
      total_size += 1 + 1;
    }

    // optional .pb.Struct_Auto_Country_War detailData = 3;
    if (has_detaildata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detaildata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Auto_Country_War_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Auto_Country_War_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Auto_Country_War_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Auto_Country_War_Info::MergeFrom(const GS2C_Auto_Country_War_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_begin()) {
      set_is_begin(from.is_begin());
    }
    if (from.has_isshutdown()) {
      set_isshutdown(from.isshutdown());
    }
    if (from.has_detaildata()) {
      mutable_detaildata()->::pb::Struct_Auto_Country_War::MergeFrom(from.detaildata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Auto_Country_War_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Auto_Country_War_Info::CopyFrom(const GS2C_Auto_Country_War_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Auto_Country_War_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Auto_Country_War_Info::Swap(GS2C_Auto_Country_War_Info* other) {
  if (other != this) {
    std::swap(is_begin_, other->is_begin_);
    std::swap(isshutdown_, other->isshutdown_);
    std::swap(detaildata_, other->detaildata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Auto_Country_War_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Auto_Country_War_Info_descriptor_;
  metadata.reflection = GS2C_Auto_Country_War_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Struct_Auto_Country_War::kTargetCityFieldNumber;
const int Struct_Auto_Country_War::kHeroidFieldNumber;
const int Struct_Auto_Country_War::kEndTimeFieldNumber;
const int Struct_Auto_Country_War::kKillCountFieldNumber;
const int Struct_Auto_Country_War::kExpCountFieldNumber;
const int Struct_Auto_Country_War::kOccupyCountFieldNumber;
#endif  // !_MSC_VER

Struct_Auto_Country_War::Struct_Auto_Country_War()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Struct_Auto_Country_War::InitAsDefaultInstance() {
}

Struct_Auto_Country_War::Struct_Auto_Country_War(const Struct_Auto_Country_War& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Struct_Auto_Country_War::SharedCtor() {
  _cached_size_ = 0;
  target_city_ = 0u;
  end_time_ = GOOGLE_ULONGLONG(0);
  killcount_ = 0u;
  expcount_ = 0u;
  occupycount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Struct_Auto_Country_War::~Struct_Auto_Country_War() {
  SharedDtor();
}

void Struct_Auto_Country_War::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Struct_Auto_Country_War::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Struct_Auto_Country_War::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Struct_Auto_Country_War_descriptor_;
}

const Struct_Auto_Country_War& Struct_Auto_Country_War::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AutoCountryWar_2eproto();
  return *default_instance_;
}

Struct_Auto_Country_War* Struct_Auto_Country_War::default_instance_ = NULL;

Struct_Auto_Country_War* Struct_Auto_Country_War::New() const {
  return new Struct_Auto_Country_War;
}

void Struct_Auto_Country_War::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_city_ = 0u;
    end_time_ = GOOGLE_ULONGLONG(0);
    killcount_ = 0u;
    expcount_ = 0u;
    occupycount_ = 0u;
  }
  heroid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Struct_Auto_Country_War::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 target_city = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_city_)));
          set_has_target_city();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heroid;
        break;
      }

      // repeated uint32 heroid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_heroid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heroid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heroid;
        if (input->ExpectTag(24)) goto parse_end_time;
        break;
      }

      // optional uint64 end_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_killCount;
        break;
      }

      // optional uint32 killCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killcount_)));
          set_has_killcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_expCount;
        break;
      }

      // optional uint32 expCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expcount_)));
          set_has_expcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_occupyCount;
        break;
      }

      // optional uint32 occupyCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_occupyCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &occupycount_)));
          set_has_occupycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Struct_Auto_Country_War::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 target_city = 1;
  if (has_target_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target_city(), output);
  }

  // repeated uint32 heroid = 2;
  for (int i = 0; i < this->heroid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->heroid(i), output);
  }

  // optional uint64 end_time = 3;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->end_time(), output);
  }

  // optional uint32 killCount = 4;
  if (has_killcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->killcount(), output);
  }

  // optional uint32 expCount = 5;
  if (has_expcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->expcount(), output);
  }

  // optional uint32 occupyCount = 6;
  if (has_occupycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->occupycount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Struct_Auto_Country_War::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 target_city = 1;
  if (has_target_city()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_city(), target);
  }

  // repeated uint32 heroid = 2;
  for (int i = 0; i < this->heroid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->heroid(i), target);
  }

  // optional uint64 end_time = 3;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->end_time(), target);
  }

  // optional uint32 killCount = 4;
  if (has_killcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->killcount(), target);
  }

  // optional uint32 expCount = 5;
  if (has_expcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->expcount(), target);
  }

  // optional uint32 occupyCount = 6;
  if (has_occupycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->occupycount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Struct_Auto_Country_War::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 target_city = 1;
    if (has_target_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_city());
    }

    // optional uint64 end_time = 3;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

    // optional uint32 killCount = 4;
    if (has_killcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killcount());
    }

    // optional uint32 expCount = 5;
    if (has_expcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expcount());
    }

    // optional uint32 occupyCount = 6;
    if (has_occupycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->occupycount());
    }

  }
  // repeated uint32 heroid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->heroid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heroid(i));
    }
    total_size += 1 * this->heroid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Struct_Auto_Country_War::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Struct_Auto_Country_War* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Struct_Auto_Country_War*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Struct_Auto_Country_War::MergeFrom(const Struct_Auto_Country_War& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroid_.MergeFrom(from.heroid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_city()) {
      set_target_city(from.target_city());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_killcount()) {
      set_killcount(from.killcount());
    }
    if (from.has_expcount()) {
      set_expcount(from.expcount());
    }
    if (from.has_occupycount()) {
      set_occupycount(from.occupycount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Struct_Auto_Country_War::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Struct_Auto_Country_War::CopyFrom(const Struct_Auto_Country_War& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Struct_Auto_Country_War::IsInitialized() const {

  return true;
}

void Struct_Auto_Country_War::Swap(Struct_Auto_Country_War* other) {
  if (other != this) {
    std::swap(target_city_, other->target_city_);
    heroid_.Swap(&other->heroid_);
    std::swap(end_time_, other->end_time_);
    std::swap(killcount_, other->killcount_);
    std::swap(expcount_, other->expcount_);
    std::swap(occupycount_, other->occupycount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Struct_Auto_Country_War::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Struct_Auto_Country_War_descriptor_;
  metadata.reflection = Struct_Auto_Country_War_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_AC_Army_Info::kHeroidFieldNumber;
const int GS2C_AC_Army_Info::kKillorbekilledFieldNumber;
const int GS2C_AC_Army_Info::kKillnameFieldNumber;
const int GS2C_AC_Army_Info::kProtoidFieldNumber;
const int GS2C_AC_Army_Info::kDamageFieldNumber;
#endif  // !_MSC_VER

GS2C_AC_Army_Info::GS2C_AC_Army_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_AC_Army_Info::InitAsDefaultInstance() {
}

GS2C_AC_Army_Info::GS2C_AC_Army_Info(const GS2C_AC_Army_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_AC_Army_Info::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  killorbekilled_ = false;
  killname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  protoid_ = 0u;
  damage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_AC_Army_Info::~GS2C_AC_Army_Info() {
  SharedDtor();
}

void GS2C_AC_Army_Info::SharedDtor() {
  if (killname_ != &::google::protobuf::internal::kEmptyString) {
    delete killname_;
  }
  if (this != default_instance_) {
  }
}

void GS2C_AC_Army_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_AC_Army_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_AC_Army_Info_descriptor_;
}

const GS2C_AC_Army_Info& GS2C_AC_Army_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AutoCountryWar_2eproto();
  return *default_instance_;
}

GS2C_AC_Army_Info* GS2C_AC_Army_Info::default_instance_ = NULL;

GS2C_AC_Army_Info* GS2C_AC_Army_Info::New() const {
  return new GS2C_AC_Army_Info;
}

void GS2C_AC_Army_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    killorbekilled_ = false;
    if (has_killname()) {
      if (killname_ != &::google::protobuf::internal::kEmptyString) {
        killname_->clear();
      }
    }
    protoid_ = 0u;
    damage_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_AC_Army_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_killorbekilled;
        break;
      }

      // optional bool killorbekilled = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killorbekilled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &killorbekilled_)));
          set_has_killorbekilled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_killname;
        break;
      }

      // optional string killname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_killname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_killname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->killname().data(), this->killname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_protoid;
        break;
      }

      // optional uint32 protoid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protoid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protoid_)));
          set_has_protoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_damage;
        break;
      }

      // optional uint32 damage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_AC_Army_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroid = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional bool killorbekilled = 2;
  if (has_killorbekilled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->killorbekilled(), output);
  }

  // optional string killname = 3;
  if (has_killname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->killname().data(), this->killname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->killname(), output);
  }

  // optional uint32 protoid = 4;
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->protoid(), output);
  }

  // optional uint32 damage = 5;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->damage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_AC_Army_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroid = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional bool killorbekilled = 2;
  if (has_killorbekilled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->killorbekilled(), target);
  }

  // optional string killname = 3;
  if (has_killname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->killname().data(), this->killname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->killname(), target);
  }

  // optional uint32 protoid = 4;
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->protoid(), target);
  }

  // optional uint32 damage = 5;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->damage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_AC_Army_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroid = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional bool killorbekilled = 2;
    if (has_killorbekilled()) {
      total_size += 1 + 1;
    }

    // optional string killname = 3;
    if (has_killname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->killname());
    }

    // optional uint32 protoid = 4;
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protoid());
    }

    // optional uint32 damage = 5;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_AC_Army_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_AC_Army_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_AC_Army_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_AC_Army_Info::MergeFrom(const GS2C_AC_Army_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_killorbekilled()) {
      set_killorbekilled(from.killorbekilled());
    }
    if (from.has_killname()) {
      set_killname(from.killname());
    }
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_AC_Army_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_AC_Army_Info::CopyFrom(const GS2C_AC_Army_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_AC_Army_Info::IsInitialized() const {

  return true;
}

void GS2C_AC_Army_Info::Swap(GS2C_AC_Army_Info* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(killorbekilled_, other->killorbekilled_);
    std::swap(killname_, other->killname_);
    std::swap(protoid_, other->protoid_);
    std::swap(damage_, other->damage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_AC_Army_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_AC_Army_Info_descriptor_;
  metadata.reflection = GS2C_AC_Army_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_QuickTraining_Ret::kRetFieldNumber;
#endif  // !_MSC_VER

GS2C_QuickTraining_Ret::GS2C_QuickTraining_Ret()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_QuickTraining_Ret::InitAsDefaultInstance() {
}

GS2C_QuickTraining_Ret::GS2C_QuickTraining_Ret(const GS2C_QuickTraining_Ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_QuickTraining_Ret::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_QuickTraining_Ret::~GS2C_QuickTraining_Ret() {
  SharedDtor();
}

void GS2C_QuickTraining_Ret::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_QuickTraining_Ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_QuickTraining_Ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_QuickTraining_Ret_descriptor_;
}

const GS2C_QuickTraining_Ret& GS2C_QuickTraining_Ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AutoCountryWar_2eproto();
  return *default_instance_;
}

GS2C_QuickTraining_Ret* GS2C_QuickTraining_Ret::default_instance_ = NULL;

GS2C_QuickTraining_Ret* GS2C_QuickTraining_Ret::New() const {
  return new GS2C_QuickTraining_Ret;
}

void GS2C_QuickTraining_Ret::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_QuickTraining_Ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.Msg_AC_Return ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Msg_AC_Return_IsValid(value)) {
            set_ret(static_cast< ::pb::Msg_AC_Return >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_QuickTraining_Ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.Msg_AC_Return ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_QuickTraining_Ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.Msg_AC_Return ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_QuickTraining_Ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.Msg_AC_Return ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_QuickTraining_Ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_QuickTraining_Ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_QuickTraining_Ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_QuickTraining_Ret::MergeFrom(const GS2C_QuickTraining_Ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_QuickTraining_Ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_QuickTraining_Ret::CopyFrom(const GS2C_QuickTraining_Ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_QuickTraining_Ret::IsInitialized() const {

  return true;
}

void GS2C_QuickTraining_Ret::Swap(GS2C_QuickTraining_Ret* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_QuickTraining_Ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_QuickTraining_Ret_descriptor_;
  metadata.reflection = GS2C_QuickTraining_Ret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Start_AC_Ret::kRetFieldNumber;
#endif  // !_MSC_VER

GS2C_Start_AC_Ret::GS2C_Start_AC_Ret()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Start_AC_Ret::InitAsDefaultInstance() {
}

GS2C_Start_AC_Ret::GS2C_Start_AC_Ret(const GS2C_Start_AC_Ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Start_AC_Ret::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Start_AC_Ret::~GS2C_Start_AC_Ret() {
  SharedDtor();
}

void GS2C_Start_AC_Ret::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Start_AC_Ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Start_AC_Ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Start_AC_Ret_descriptor_;
}

const GS2C_Start_AC_Ret& GS2C_Start_AC_Ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AutoCountryWar_2eproto();
  return *default_instance_;
}

GS2C_Start_AC_Ret* GS2C_Start_AC_Ret::default_instance_ = NULL;

GS2C_Start_AC_Ret* GS2C_Start_AC_Ret::New() const {
  return new GS2C_Start_AC_Ret;
}

void GS2C_Start_AC_Ret::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Start_AC_Ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.Msg_AC_Return ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Msg_AC_Return_IsValid(value)) {
            set_ret(static_cast< ::pb::Msg_AC_Return >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Start_AC_Ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.Msg_AC_Return ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Start_AC_Ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.Msg_AC_Return ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Start_AC_Ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.Msg_AC_Return ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Start_AC_Ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Start_AC_Ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Start_AC_Ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Start_AC_Ret::MergeFrom(const GS2C_Start_AC_Ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Start_AC_Ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Start_AC_Ret::CopyFrom(const GS2C_Start_AC_Ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Start_AC_Ret::IsInitialized() const {

  return true;
}

void GS2C_Start_AC_Ret::Swap(GS2C_Start_AC_Ret* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Start_AC_Ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Start_AC_Ret_descriptor_;
  metadata.reflection = GS2C_Start_AC_Ret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_REAUTO_HERO_Ret::kRetFieldNumber;
#endif  // !_MSC_VER

GS2C_REAUTO_HERO_Ret::GS2C_REAUTO_HERO_Ret()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_REAUTO_HERO_Ret::InitAsDefaultInstance() {
}

GS2C_REAUTO_HERO_Ret::GS2C_REAUTO_HERO_Ret(const GS2C_REAUTO_HERO_Ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_REAUTO_HERO_Ret::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_REAUTO_HERO_Ret::~GS2C_REAUTO_HERO_Ret() {
  SharedDtor();
}

void GS2C_REAUTO_HERO_Ret::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_REAUTO_HERO_Ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_REAUTO_HERO_Ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_REAUTO_HERO_Ret_descriptor_;
}

const GS2C_REAUTO_HERO_Ret& GS2C_REAUTO_HERO_Ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AutoCountryWar_2eproto();
  return *default_instance_;
}

GS2C_REAUTO_HERO_Ret* GS2C_REAUTO_HERO_Ret::default_instance_ = NULL;

GS2C_REAUTO_HERO_Ret* GS2C_REAUTO_HERO_Ret::New() const {
  return new GS2C_REAUTO_HERO_Ret;
}

void GS2C_REAUTO_HERO_Ret::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_REAUTO_HERO_Ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.Msg_AC_Return ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Msg_AC_Return_IsValid(value)) {
            set_ret(static_cast< ::pb::Msg_AC_Return >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_REAUTO_HERO_Ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.Msg_AC_Return ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_REAUTO_HERO_Ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.Msg_AC_Return ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_REAUTO_HERO_Ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.Msg_AC_Return ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_REAUTO_HERO_Ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_REAUTO_HERO_Ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_REAUTO_HERO_Ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_REAUTO_HERO_Ret::MergeFrom(const GS2C_REAUTO_HERO_Ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_REAUTO_HERO_Ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_REAUTO_HERO_Ret::CopyFrom(const GS2C_REAUTO_HERO_Ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_REAUTO_HERO_Ret::IsInitialized() const {

  return true;
}

void GS2C_REAUTO_HERO_Ret::Swap(GS2C_REAUTO_HERO_Ret* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_REAUTO_HERO_Ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_REAUTO_HERO_Ret_descriptor_;
  metadata.reflection = GS2C_REAUTO_HERO_Ret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Change_Des_Ret::kRetFieldNumber;
#endif  // !_MSC_VER

GS2C_Change_Des_Ret::GS2C_Change_Des_Ret()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Change_Des_Ret::InitAsDefaultInstance() {
}

GS2C_Change_Des_Ret::GS2C_Change_Des_Ret(const GS2C_Change_Des_Ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Change_Des_Ret::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Change_Des_Ret::~GS2C_Change_Des_Ret() {
  SharedDtor();
}

void GS2C_Change_Des_Ret::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Change_Des_Ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Change_Des_Ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Change_Des_Ret_descriptor_;
}

const GS2C_Change_Des_Ret& GS2C_Change_Des_Ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AutoCountryWar_2eproto();
  return *default_instance_;
}

GS2C_Change_Des_Ret* GS2C_Change_Des_Ret::default_instance_ = NULL;

GS2C_Change_Des_Ret* GS2C_Change_Des_Ret::New() const {
  return new GS2C_Change_Des_Ret;
}

void GS2C_Change_Des_Ret::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Change_Des_Ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.Msg_AC_Return ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Msg_AC_Return_IsValid(value)) {
            set_ret(static_cast< ::pb::Msg_AC_Return >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Change_Des_Ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.Msg_AC_Return ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Change_Des_Ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.Msg_AC_Return ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Change_Des_Ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.Msg_AC_Return ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Change_Des_Ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Change_Des_Ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Change_Des_Ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Change_Des_Ret::MergeFrom(const GS2C_Change_Des_Ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Change_Des_Ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Change_Des_Ret::CopyFrom(const GS2C_Change_Des_Ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Change_Des_Ret::IsInitialized() const {

  return true;
}

void GS2C_Change_Des_Ret::Swap(GS2C_Change_Des_Ret* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Change_Des_Ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Change_Des_Ret_descriptor_;
  metadata.reflection = GS2C_Change_Des_Ret_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
