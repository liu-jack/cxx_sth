// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Stage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Stage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* GS2C_StageLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_StageLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_AllStageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_AllStageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_BattleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_BattleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_BattleResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_BattleResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Stage_2eproto() {
  protobuf_AddDesc_Stage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Stage.proto");
  GOOGLE_CHECK(file != NULL);
  GS2C_StageLevel_descriptor_ = file->message_type(0);
  static const int GS2C_StageLevel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_StageLevel, level_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_StageLevel, fight_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_StageLevel, is_clearance_),
  };
  GS2C_StageLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_StageLevel_descriptor_,
      GS2C_StageLevel::default_instance_,
      GS2C_StageLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_StageLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_StageLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_StageLevel));
  GS2C_AllStageInfo_descriptor_ = file->message_type(1);
  static const int GS2C_AllStageInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_AllStageInfo, stage_level_infos_),
  };
  GS2C_AllStageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_AllStageInfo_descriptor_,
      GS2C_AllStageInfo::default_instance_,
      GS2C_AllStageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_AllStageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_AllStageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_AllStageInfo));
  C2GS_BattleData_descriptor_ = file->message_type(2);
  static const int C2GS_BattleData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_BattleData, stage_level_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_BattleData, pre_battle_id_),
  };
  C2GS_BattleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_BattleData_descriptor_,
      C2GS_BattleData::default_instance_,
      C2GS_BattleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_BattleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_BattleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_BattleData));
  GS2C_Reward_descriptor_ = file->message_type(3);
  static const int GS2C_Reward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Reward, curency_type_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Reward, item_id_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Reward, exp_),
  };
  GS2C_Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Reward_descriptor_,
      GS2C_Reward::default_instance_,
      GS2C_Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Reward));
  GS2C_BattleResult_descriptor_ = file->message_type(4);
  static const int GS2C_BattleResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_BattleResult, err_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_BattleResult, is_battle_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_BattleResult, stage_level_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_BattleResult, battle_reward_),
  };
  GS2C_BattleResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_BattleResult_descriptor_,
      GS2C_BattleResult::default_instance_,
      GS2C_BattleResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_BattleResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_BattleResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_BattleResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Stage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_StageLevel_descriptor_, &GS2C_StageLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_AllStageInfo_descriptor_, &GS2C_AllStageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_BattleData_descriptor_, &C2GS_BattleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Reward_descriptor_, &GS2C_Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_BattleResult_descriptor_, &GS2C_BattleResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Stage_2eproto() {
  delete GS2C_StageLevel::default_instance_;
  delete GS2C_StageLevel_reflection_;
  delete GS2C_AllStageInfo::default_instance_;
  delete GS2C_AllStageInfo_reflection_;
  delete C2GS_BattleData::default_instance_;
  delete C2GS_BattleData_reflection_;
  delete GS2C_Reward::default_instance_;
  delete GS2C_Reward_reflection_;
  delete GS2C_BattleResult::default_instance_;
  delete GS2C_BattleResult_reflection_;
}

void protobuf_AddDesc_Stage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_CommomDef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Stage.proto\022\002pb\032\017CommomDef.proto\"N\n\017GS"
    "2C_StageLevel\022\020\n\010level_id\030\001 \001(\r\022\023\n\013fight"
    "_count\030\002 \001(\r\022\024\n\014is_clearance\030\003 \001(\010\"C\n\021GS"
    "2C_AllStageInfo\022.\n\021stage_level_infos\030\001 \003"
    "(\0132\023.pb.GS2C_StageLevel\"@\n\017C2GS_BattleDa"
    "ta\022\026\n\016stage_level_id\030\001 \002(\r\022\025\n\rpre_battle"
    "_id\030\002 \001(\005\"k\n\013GS2C_Reward\022)\n\022curency_type"
    "_count\030\001 \003(\0132\r.pb.PairValue\022$\n\ritem_id_c"
    "ount\030\002 \003(\0132\r.pb.PairValue\022\013\n\003exp\030\003 \001(\r\"\223"
    "\001\n\021GS2C_BattleResult\022\020\n\010err_code\030\001 \001(\r\022\025"
    "\n\ris_battle_win\030\002 \001(\010\022-\n\020stage_level_inf"
    "o\030\003 \001(\0132\023.pb.GS2C_StageLevel\022&\n\rbattle_r"
    "eward\030\004 \001(\0132\017.pb.GS2C_Reward", 508);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Stage.proto", &protobuf_RegisterTypes);
  GS2C_StageLevel::default_instance_ = new GS2C_StageLevel();
  GS2C_AllStageInfo::default_instance_ = new GS2C_AllStageInfo();
  C2GS_BattleData::default_instance_ = new C2GS_BattleData();
  GS2C_Reward::default_instance_ = new GS2C_Reward();
  GS2C_BattleResult::default_instance_ = new GS2C_BattleResult();
  GS2C_StageLevel::default_instance_->InitAsDefaultInstance();
  GS2C_AllStageInfo::default_instance_->InitAsDefaultInstance();
  C2GS_BattleData::default_instance_->InitAsDefaultInstance();
  GS2C_Reward::default_instance_->InitAsDefaultInstance();
  GS2C_BattleResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Stage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Stage_2eproto {
  StaticDescriptorInitializer_Stage_2eproto() {
    protobuf_AddDesc_Stage_2eproto();
  }
} static_descriptor_initializer_Stage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GS2C_StageLevel::kLevelIdFieldNumber;
const int GS2C_StageLevel::kFightCountFieldNumber;
const int GS2C_StageLevel::kIsClearanceFieldNumber;
#endif  // !_MSC_VER

GS2C_StageLevel::GS2C_StageLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_StageLevel::InitAsDefaultInstance() {
}

GS2C_StageLevel::GS2C_StageLevel(const GS2C_StageLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_StageLevel::SharedCtor() {
  _cached_size_ = 0;
  level_id_ = 0u;
  fight_count_ = 0u;
  is_clearance_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_StageLevel::~GS2C_StageLevel() {
  SharedDtor();
}

void GS2C_StageLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_StageLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_StageLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_StageLevel_descriptor_;
}

const GS2C_StageLevel& GS2C_StageLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Stage_2eproto();
  return *default_instance_;
}

GS2C_StageLevel* GS2C_StageLevel::default_instance_ = NULL;

GS2C_StageLevel* GS2C_StageLevel::New() const {
  return new GS2C_StageLevel;
}

void GS2C_StageLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_id_ = 0u;
    fight_count_ = 0u;
    is_clearance_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_StageLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 level_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_id_)));
          set_has_level_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fight_count;
        break;
      }

      // optional uint32 fight_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_count_)));
          set_has_fight_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_clearance;
        break;
      }

      // optional bool is_clearance = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_clearance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_clearance_)));
          set_has_is_clearance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_StageLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 level_id = 1;
  if (has_level_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level_id(), output);
  }

  // optional uint32 fight_count = 2;
  if (has_fight_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fight_count(), output);
  }

  // optional bool is_clearance = 3;
  if (has_is_clearance()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_clearance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_StageLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 level_id = 1;
  if (has_level_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level_id(), target);
  }

  // optional uint32 fight_count = 2;
  if (has_fight_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fight_count(), target);
  }

  // optional bool is_clearance = 3;
  if (has_is_clearance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_clearance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_StageLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 level_id = 1;
    if (has_level_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level_id());
    }

    // optional uint32 fight_count = 2;
    if (has_fight_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_count());
    }

    // optional bool is_clearance = 3;
    if (has_is_clearance()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_StageLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_StageLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_StageLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_StageLevel::MergeFrom(const GS2C_StageLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level_id()) {
      set_level_id(from.level_id());
    }
    if (from.has_fight_count()) {
      set_fight_count(from.fight_count());
    }
    if (from.has_is_clearance()) {
      set_is_clearance(from.is_clearance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_StageLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_StageLevel::CopyFrom(const GS2C_StageLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_StageLevel::IsInitialized() const {

  return true;
}

void GS2C_StageLevel::Swap(GS2C_StageLevel* other) {
  if (other != this) {
    std::swap(level_id_, other->level_id_);
    std::swap(fight_count_, other->fight_count_);
    std::swap(is_clearance_, other->is_clearance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_StageLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_StageLevel_descriptor_;
  metadata.reflection = GS2C_StageLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_AllStageInfo::kStageLevelInfosFieldNumber;
#endif  // !_MSC_VER

GS2C_AllStageInfo::GS2C_AllStageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_AllStageInfo::InitAsDefaultInstance() {
}

GS2C_AllStageInfo::GS2C_AllStageInfo(const GS2C_AllStageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_AllStageInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_AllStageInfo::~GS2C_AllStageInfo() {
  SharedDtor();
}

void GS2C_AllStageInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_AllStageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_AllStageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_AllStageInfo_descriptor_;
}

const GS2C_AllStageInfo& GS2C_AllStageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Stage_2eproto();
  return *default_instance_;
}

GS2C_AllStageInfo* GS2C_AllStageInfo::default_instance_ = NULL;

GS2C_AllStageInfo* GS2C_AllStageInfo::New() const {
  return new GS2C_AllStageInfo;
}

void GS2C_AllStageInfo::Clear() {
  stage_level_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_AllStageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GS2C_StageLevel stage_level_infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stage_level_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stage_level_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stage_level_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_AllStageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GS2C_StageLevel stage_level_infos = 1;
  for (int i = 0; i < this->stage_level_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stage_level_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_AllStageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GS2C_StageLevel stage_level_infos = 1;
  for (int i = 0; i < this->stage_level_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stage_level_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_AllStageInfo::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GS2C_StageLevel stage_level_infos = 1;
  total_size += 1 * this->stage_level_infos_size();
  for (int i = 0; i < this->stage_level_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stage_level_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_AllStageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_AllStageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_AllStageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_AllStageInfo::MergeFrom(const GS2C_AllStageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  stage_level_infos_.MergeFrom(from.stage_level_infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_AllStageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_AllStageInfo::CopyFrom(const GS2C_AllStageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_AllStageInfo::IsInitialized() const {

  return true;
}

void GS2C_AllStageInfo::Swap(GS2C_AllStageInfo* other) {
  if (other != this) {
    stage_level_infos_.Swap(&other->stage_level_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_AllStageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_AllStageInfo_descriptor_;
  metadata.reflection = GS2C_AllStageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_BattleData::kStageLevelIdFieldNumber;
const int C2GS_BattleData::kPreBattleIdFieldNumber;
#endif  // !_MSC_VER

C2GS_BattleData::C2GS_BattleData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_BattleData::InitAsDefaultInstance() {
}

C2GS_BattleData::C2GS_BattleData(const C2GS_BattleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_BattleData::SharedCtor() {
  _cached_size_ = 0;
  stage_level_id_ = 0u;
  pre_battle_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_BattleData::~C2GS_BattleData() {
  SharedDtor();
}

void C2GS_BattleData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_BattleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_BattleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_BattleData_descriptor_;
}

const C2GS_BattleData& C2GS_BattleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Stage_2eproto();
  return *default_instance_;
}

C2GS_BattleData* C2GS_BattleData::default_instance_ = NULL;

C2GS_BattleData* C2GS_BattleData::New() const {
  return new C2GS_BattleData;
}

void C2GS_BattleData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_level_id_ = 0u;
    pre_battle_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_BattleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 stage_level_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_level_id_)));
          set_has_stage_level_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pre_battle_id;
        break;
      }

      // optional int32 pre_battle_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pre_battle_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pre_battle_id_)));
          set_has_pre_battle_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_BattleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 stage_level_id = 1;
  if (has_stage_level_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stage_level_id(), output);
  }

  // optional int32 pre_battle_id = 2;
  if (has_pre_battle_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pre_battle_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_BattleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 stage_level_id = 1;
  if (has_stage_level_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stage_level_id(), target);
  }

  // optional int32 pre_battle_id = 2;
  if (has_pre_battle_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pre_battle_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_BattleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 stage_level_id = 1;
    if (has_stage_level_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage_level_id());
    }

    // optional int32 pre_battle_id = 2;
    if (has_pre_battle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pre_battle_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_BattleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_BattleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_BattleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_BattleData::MergeFrom(const C2GS_BattleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage_level_id()) {
      set_stage_level_id(from.stage_level_id());
    }
    if (from.has_pre_battle_id()) {
      set_pre_battle_id(from.pre_battle_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_BattleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_BattleData::CopyFrom(const C2GS_BattleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_BattleData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_BattleData::Swap(C2GS_BattleData* other) {
  if (other != this) {
    std::swap(stage_level_id_, other->stage_level_id_);
    std::swap(pre_battle_id_, other->pre_battle_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_BattleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_BattleData_descriptor_;
  metadata.reflection = C2GS_BattleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Reward::kCurencyTypeCountFieldNumber;
const int GS2C_Reward::kItemIdCountFieldNumber;
const int GS2C_Reward::kExpFieldNumber;
#endif  // !_MSC_VER

GS2C_Reward::GS2C_Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Reward::InitAsDefaultInstance() {
}

GS2C_Reward::GS2C_Reward(const GS2C_Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Reward::SharedCtor() {
  _cached_size_ = 0;
  exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Reward::~GS2C_Reward() {
  SharedDtor();
}

void GS2C_Reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Reward_descriptor_;
}

const GS2C_Reward& GS2C_Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Stage_2eproto();
  return *default_instance_;
}

GS2C_Reward* GS2C_Reward::default_instance_ = NULL;

GS2C_Reward* GS2C_Reward::New() const {
  return new GS2C_Reward;
}

void GS2C_Reward::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    exp_ = 0u;
  }
  curency_type_count_.Clear();
  item_id_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.PairValue curency_type_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_curency_type_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_curency_type_count()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_curency_type_count;
        if (input->ExpectTag(18)) goto parse_item_id_count;
        break;
      }

      // repeated .pb.PairValue item_id_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_id_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_id_count()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_id_count;
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.PairValue curency_type_count = 1;
  for (int i = 0; i < this->curency_type_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->curency_type_count(i), output);
  }

  // repeated .pb.PairValue item_id_count = 2;
  for (int i = 0; i < this->item_id_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_id_count(i), output);
  }

  // optional uint32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.PairValue curency_type_count = 1;
  for (int i = 0; i < this->curency_type_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->curency_type_count(i), target);
  }

  // repeated .pb.PairValue item_id_count = 2;
  for (int i = 0; i < this->item_id_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_id_count(i), target);
  }

  // optional uint32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

  }
  // repeated .pb.PairValue curency_type_count = 1;
  total_size += 1 * this->curency_type_count_size();
  for (int i = 0; i < this->curency_type_count_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->curency_type_count(i));
  }

  // repeated .pb.PairValue item_id_count = 2;
  total_size += 1 * this->item_id_count_size();
  for (int i = 0; i < this->item_id_count_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_id_count(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Reward::MergeFrom(const GS2C_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  curency_type_count_.MergeFrom(from.curency_type_count_);
  item_id_count_.MergeFrom(from.item_id_count_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Reward::CopyFrom(const GS2C_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Reward::IsInitialized() const {

  return true;
}

void GS2C_Reward::Swap(GS2C_Reward* other) {
  if (other != this) {
    curency_type_count_.Swap(&other->curency_type_count_);
    item_id_count_.Swap(&other->item_id_count_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Reward_descriptor_;
  metadata.reflection = GS2C_Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_BattleResult::kErrCodeFieldNumber;
const int GS2C_BattleResult::kIsBattleWinFieldNumber;
const int GS2C_BattleResult::kStageLevelInfoFieldNumber;
const int GS2C_BattleResult::kBattleRewardFieldNumber;
#endif  // !_MSC_VER

GS2C_BattleResult::GS2C_BattleResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_BattleResult::InitAsDefaultInstance() {
  stage_level_info_ = const_cast< ::pb::GS2C_StageLevel*>(&::pb::GS2C_StageLevel::default_instance());
  battle_reward_ = const_cast< ::pb::GS2C_Reward*>(&::pb::GS2C_Reward::default_instance());
}

GS2C_BattleResult::GS2C_BattleResult(const GS2C_BattleResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_BattleResult::SharedCtor() {
  _cached_size_ = 0;
  err_code_ = 0u;
  is_battle_win_ = false;
  stage_level_info_ = NULL;
  battle_reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_BattleResult::~GS2C_BattleResult() {
  SharedDtor();
}

void GS2C_BattleResult::SharedDtor() {
  if (this != default_instance_) {
    delete stage_level_info_;
    delete battle_reward_;
  }
}

void GS2C_BattleResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_BattleResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_BattleResult_descriptor_;
}

const GS2C_BattleResult& GS2C_BattleResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Stage_2eproto();
  return *default_instance_;
}

GS2C_BattleResult* GS2C_BattleResult::default_instance_ = NULL;

GS2C_BattleResult* GS2C_BattleResult::New() const {
  return new GS2C_BattleResult;
}

void GS2C_BattleResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_code_ = 0u;
    is_battle_win_ = false;
    if (has_stage_level_info()) {
      if (stage_level_info_ != NULL) stage_level_info_->::pb::GS2C_StageLevel::Clear();
    }
    if (has_battle_reward()) {
      if (battle_reward_ != NULL) battle_reward_->::pb::GS2C_Reward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_BattleResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 err_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &err_code_)));
          set_has_err_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_battle_win;
        break;
      }

      // optional bool is_battle_win = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_battle_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_battle_win_)));
          set_has_is_battle_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stage_level_info;
        break;
      }

      // optional .pb.GS2C_StageLevel stage_level_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stage_level_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stage_level_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_battle_reward;
        break;
      }

      // optional .pb.GS2C_Reward battle_reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_BattleResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 err_code = 1;
  if (has_err_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->err_code(), output);
  }

  // optional bool is_battle_win = 2;
  if (has_is_battle_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_battle_win(), output);
  }

  // optional .pb.GS2C_StageLevel stage_level_info = 3;
  if (has_stage_level_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stage_level_info(), output);
  }

  // optional .pb.GS2C_Reward battle_reward = 4;
  if (has_battle_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->battle_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_BattleResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 err_code = 1;
  if (has_err_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->err_code(), target);
  }

  // optional bool is_battle_win = 2;
  if (has_is_battle_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_battle_win(), target);
  }

  // optional .pb.GS2C_StageLevel stage_level_info = 3;
  if (has_stage_level_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stage_level_info(), target);
  }

  // optional .pb.GS2C_Reward battle_reward = 4;
  if (has_battle_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->battle_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_BattleResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 err_code = 1;
    if (has_err_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->err_code());
    }

    // optional bool is_battle_win = 2;
    if (has_is_battle_win()) {
      total_size += 1 + 1;
    }

    // optional .pb.GS2C_StageLevel stage_level_info = 3;
    if (has_stage_level_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stage_level_info());
    }

    // optional .pb.GS2C_Reward battle_reward = 4;
    if (has_battle_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_BattleResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_BattleResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_BattleResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_BattleResult::MergeFrom(const GS2C_BattleResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_code()) {
      set_err_code(from.err_code());
    }
    if (from.has_is_battle_win()) {
      set_is_battle_win(from.is_battle_win());
    }
    if (from.has_stage_level_info()) {
      mutable_stage_level_info()->::pb::GS2C_StageLevel::MergeFrom(from.stage_level_info());
    }
    if (from.has_battle_reward()) {
      mutable_battle_reward()->::pb::GS2C_Reward::MergeFrom(from.battle_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_BattleResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_BattleResult::CopyFrom(const GS2C_BattleResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_BattleResult::IsInitialized() const {

  return true;
}

void GS2C_BattleResult::Swap(GS2C_BattleResult* other) {
  if (other != this) {
    std::swap(err_code_, other->err_code_);
    std::swap(is_battle_win_, other->is_battle_win_);
    std::swap(stage_level_info_, other->stage_level_info_);
    std::swap(battle_reward_, other->battle_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_BattleResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_BattleResult_descriptor_;
  metadata.reflection = GS2C_BattleResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
