// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Altar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Altar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* SubAltar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubAltar_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Altar_All_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Altar_All_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Altar_All_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Altar_All_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Altar_Study_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Altar_Study_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Altar_Study_Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Altar_Study_Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Altar_Take_Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Altar_Take_Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Altar_Sub_Altar_LevelUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Altar_Sub_Altar_LevelUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Altar_Build_By_Token_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Altar_Build_By_Token_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Altar_Build_By_Silver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Altar_Build_By_Silver_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Altar_LevelUp_To_Open_SubAltar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Altar_LevelUp_To_Open_SubAltar_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Altar_Study_OneKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Altar_Study_OneKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Altar_Take_Reward_OneKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Altar_Take_Reward_OneKey_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Altar_2eproto() {
  protobuf_AddDesc_Altar_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Altar.proto");
  GOOGLE_CHECK(file != NULL);
  SubAltar_descriptor_ = file->message_type(0);
  static const int SubAltar_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubAltar, is_level_up_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubAltar, have_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubAltar, study_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubAltar, last_study_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubAltar, take_free_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubAltar, reward_count_),
  };
  SubAltar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubAltar_descriptor_,
      SubAltar::default_instance_,
      SubAltar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubAltar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubAltar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubAltar));
  GS2C_Altar_All_Info_descriptor_ = file->message_type(1);
  static const int GS2C_Altar_All_Info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Altar_All_Info, levle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Altar_All_Info, silver_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Altar_All_Info, sub_altar_),
  };
  GS2C_Altar_All_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Altar_All_Info_descriptor_,
      GS2C_Altar_All_Info::default_instance_,
      GS2C_Altar_All_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Altar_All_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Altar_All_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Altar_All_Info));
  C2GS_Altar_All_Info_descriptor_ = file->message_type(2);
  static const int C2GS_Altar_All_Info_offsets_[1] = {
  };
  C2GS_Altar_All_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Altar_All_Info_descriptor_,
      C2GS_Altar_All_Info::default_instance_,
      C2GS_Altar_All_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Altar_All_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Altar_All_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Altar_All_Info));
  C2GS_Altar_Study_descriptor_ = file->message_type(3);
  static const int C2GS_Altar_Study_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Altar_Study, altar_lv_),
  };
  C2GS_Altar_Study_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Altar_Study_descriptor_,
      C2GS_Altar_Study::default_instance_,
      C2GS_Altar_Study_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Altar_Study, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Altar_Study, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Altar_Study));
  GS2C_Altar_Study_Reward_descriptor_ = file->message_type(4);
  static const int GS2C_Altar_Study_Reward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Altar_Study_Reward, altar_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Altar_Study_Reward, reward_num_),
  };
  GS2C_Altar_Study_Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Altar_Study_Reward_descriptor_,
      GS2C_Altar_Study_Reward::default_instance_,
      GS2C_Altar_Study_Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Altar_Study_Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Altar_Study_Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Altar_Study_Reward));
  C2GS_Altar_Take_Reward_descriptor_ = file->message_type(5);
  static const int C2GS_Altar_Take_Reward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Altar_Take_Reward, altar_lv_),
  };
  C2GS_Altar_Take_Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Altar_Take_Reward_descriptor_,
      C2GS_Altar_Take_Reward::default_instance_,
      C2GS_Altar_Take_Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Altar_Take_Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Altar_Take_Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Altar_Take_Reward));
  C2GS_Altar_Sub_Altar_LevelUp_descriptor_ = file->message_type(6);
  static const int C2GS_Altar_Sub_Altar_LevelUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Altar_Sub_Altar_LevelUp, altar_lv_),
  };
  C2GS_Altar_Sub_Altar_LevelUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Altar_Sub_Altar_LevelUp_descriptor_,
      C2GS_Altar_Sub_Altar_LevelUp::default_instance_,
      C2GS_Altar_Sub_Altar_LevelUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Altar_Sub_Altar_LevelUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Altar_Sub_Altar_LevelUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Altar_Sub_Altar_LevelUp));
  C2GS_Altar_Build_By_Token_descriptor_ = file->message_type(7);
  static const int C2GS_Altar_Build_By_Token_offsets_[1] = {
  };
  C2GS_Altar_Build_By_Token_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Altar_Build_By_Token_descriptor_,
      C2GS_Altar_Build_By_Token::default_instance_,
      C2GS_Altar_Build_By_Token_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Altar_Build_By_Token, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Altar_Build_By_Token, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Altar_Build_By_Token));
  C2GS_Altar_Build_By_Silver_descriptor_ = file->message_type(8);
  static const int C2GS_Altar_Build_By_Silver_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Altar_Build_By_Silver, is_fast_),
  };
  C2GS_Altar_Build_By_Silver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Altar_Build_By_Silver_descriptor_,
      C2GS_Altar_Build_By_Silver::default_instance_,
      C2GS_Altar_Build_By_Silver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Altar_Build_By_Silver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Altar_Build_By_Silver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Altar_Build_By_Silver));
  C2GS_Altar_LevelUp_To_Open_SubAltar_descriptor_ = file->message_type(9);
  static const int C2GS_Altar_LevelUp_To_Open_SubAltar_offsets_[1] = {
  };
  C2GS_Altar_LevelUp_To_Open_SubAltar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Altar_LevelUp_To_Open_SubAltar_descriptor_,
      C2GS_Altar_LevelUp_To_Open_SubAltar::default_instance_,
      C2GS_Altar_LevelUp_To_Open_SubAltar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Altar_LevelUp_To_Open_SubAltar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Altar_LevelUp_To_Open_SubAltar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Altar_LevelUp_To_Open_SubAltar));
  C2GS_Altar_Study_OneKey_descriptor_ = file->message_type(10);
  static const int C2GS_Altar_Study_OneKey_offsets_[1] = {
  };
  C2GS_Altar_Study_OneKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Altar_Study_OneKey_descriptor_,
      C2GS_Altar_Study_OneKey::default_instance_,
      C2GS_Altar_Study_OneKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Altar_Study_OneKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Altar_Study_OneKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Altar_Study_OneKey));
  C2GS_Altar_Take_Reward_OneKey_descriptor_ = file->message_type(11);
  static const int C2GS_Altar_Take_Reward_OneKey_offsets_[1] = {
  };
  C2GS_Altar_Take_Reward_OneKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Altar_Take_Reward_OneKey_descriptor_,
      C2GS_Altar_Take_Reward_OneKey::default_instance_,
      C2GS_Altar_Take_Reward_OneKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Altar_Take_Reward_OneKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Altar_Take_Reward_OneKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Altar_Take_Reward_OneKey));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Altar_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubAltar_descriptor_, &SubAltar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Altar_All_Info_descriptor_, &GS2C_Altar_All_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Altar_All_Info_descriptor_, &C2GS_Altar_All_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Altar_Study_descriptor_, &C2GS_Altar_Study::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Altar_Study_Reward_descriptor_, &GS2C_Altar_Study_Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Altar_Take_Reward_descriptor_, &C2GS_Altar_Take_Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Altar_Sub_Altar_LevelUp_descriptor_, &C2GS_Altar_Sub_Altar_LevelUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Altar_Build_By_Token_descriptor_, &C2GS_Altar_Build_By_Token::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Altar_Build_By_Silver_descriptor_, &C2GS_Altar_Build_By_Silver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Altar_LevelUp_To_Open_SubAltar_descriptor_, &C2GS_Altar_LevelUp_To_Open_SubAltar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Altar_Study_OneKey_descriptor_, &C2GS_Altar_Study_OneKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Altar_Take_Reward_OneKey_descriptor_, &C2GS_Altar_Take_Reward_OneKey::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Altar_2eproto() {
  delete SubAltar::default_instance_;
  delete SubAltar_reflection_;
  delete GS2C_Altar_All_Info::default_instance_;
  delete GS2C_Altar_All_Info_reflection_;
  delete C2GS_Altar_All_Info::default_instance_;
  delete C2GS_Altar_All_Info_reflection_;
  delete C2GS_Altar_Study::default_instance_;
  delete C2GS_Altar_Study_reflection_;
  delete GS2C_Altar_Study_Reward::default_instance_;
  delete GS2C_Altar_Study_Reward_reflection_;
  delete C2GS_Altar_Take_Reward::default_instance_;
  delete C2GS_Altar_Take_Reward_reflection_;
  delete C2GS_Altar_Sub_Altar_LevelUp::default_instance_;
  delete C2GS_Altar_Sub_Altar_LevelUp_reflection_;
  delete C2GS_Altar_Build_By_Token::default_instance_;
  delete C2GS_Altar_Build_By_Token_reflection_;
  delete C2GS_Altar_Build_By_Silver::default_instance_;
  delete C2GS_Altar_Build_By_Silver_reflection_;
  delete C2GS_Altar_LevelUp_To_Open_SubAltar::default_instance_;
  delete C2GS_Altar_LevelUp_To_Open_SubAltar_reflection_;
  delete C2GS_Altar_Study_OneKey::default_instance_;
  delete C2GS_Altar_Study_OneKey_reflection_;
  delete C2GS_Altar_Take_Reward_OneKey::default_instance_;
  delete C2GS_Altar_Take_Reward_OneKey_reflection_;
}

void protobuf_AddDesc_Altar_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_CommomDef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Altar.proto\022\002pb\032\017CommomDef.proto\"\220\001\n\010S"
    "ubAltar\022\023\n\013is_level_up\030\001 \002(\010\022\023\n\013have_rew"
    "ard\030\002 \002(\010\022\023\n\013study_times\030\003 \002(\r\022\027\n\017last_s"
    "tudy_time\030\004 \002(\004\022\026\n\016take_free_time\030\005 \001(\004\022"
    "\024\n\014reward_count\030\006 \001(\r\"Z\n\023GS2C_Altar_All_"
    "Info\022\r\n\005levle\030\001 \001(\r\022\023\n\013silver_coin\030\002 \001(\r"
    "\022\037\n\tsub_altar\030\003 \003(\0132\014.pb.SubAltar\"\025\n\023C2G"
    "S_Altar_All_Info\"$\n\020C2GS_Altar_Study\022\020\n\010"
    "altar_lv\030\001 \002(\r\"\?\n\027GS2C_Altar_Study_Rewar"
    "d\022\020\n\010altar_lv\030\001 \002(\r\022\022\n\nreward_num\030\002 \002(\r\""
    "*\n\026C2GS_Altar_Take_Reward\022\020\n\010altar_lv\030\001 "
    "\002(\r\"0\n\034C2GS_Altar_Sub_Altar_LevelUp\022\020\n\010a"
    "ltar_lv\030\001 \002(\r\"\033\n\031C2GS_Altar_Build_By_Tok"
    "en\"-\n\032C2GS_Altar_Build_By_Silver\022\017\n\007is_f"
    "ast\030\001 \002(\010\"%\n#C2GS_Altar_LevelUp_To_Open_"
    "SubAltar\"\031\n\027C2GS_Altar_Study_OneKey\"\037\n\035C"
    "2GS_Altar_Take_Reward_OneKey", 668);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Altar.proto", &protobuf_RegisterTypes);
  SubAltar::default_instance_ = new SubAltar();
  GS2C_Altar_All_Info::default_instance_ = new GS2C_Altar_All_Info();
  C2GS_Altar_All_Info::default_instance_ = new C2GS_Altar_All_Info();
  C2GS_Altar_Study::default_instance_ = new C2GS_Altar_Study();
  GS2C_Altar_Study_Reward::default_instance_ = new GS2C_Altar_Study_Reward();
  C2GS_Altar_Take_Reward::default_instance_ = new C2GS_Altar_Take_Reward();
  C2GS_Altar_Sub_Altar_LevelUp::default_instance_ = new C2GS_Altar_Sub_Altar_LevelUp();
  C2GS_Altar_Build_By_Token::default_instance_ = new C2GS_Altar_Build_By_Token();
  C2GS_Altar_Build_By_Silver::default_instance_ = new C2GS_Altar_Build_By_Silver();
  C2GS_Altar_LevelUp_To_Open_SubAltar::default_instance_ = new C2GS_Altar_LevelUp_To_Open_SubAltar();
  C2GS_Altar_Study_OneKey::default_instance_ = new C2GS_Altar_Study_OneKey();
  C2GS_Altar_Take_Reward_OneKey::default_instance_ = new C2GS_Altar_Take_Reward_OneKey();
  SubAltar::default_instance_->InitAsDefaultInstance();
  GS2C_Altar_All_Info::default_instance_->InitAsDefaultInstance();
  C2GS_Altar_All_Info::default_instance_->InitAsDefaultInstance();
  C2GS_Altar_Study::default_instance_->InitAsDefaultInstance();
  GS2C_Altar_Study_Reward::default_instance_->InitAsDefaultInstance();
  C2GS_Altar_Take_Reward::default_instance_->InitAsDefaultInstance();
  C2GS_Altar_Sub_Altar_LevelUp::default_instance_->InitAsDefaultInstance();
  C2GS_Altar_Build_By_Token::default_instance_->InitAsDefaultInstance();
  C2GS_Altar_Build_By_Silver::default_instance_->InitAsDefaultInstance();
  C2GS_Altar_LevelUp_To_Open_SubAltar::default_instance_->InitAsDefaultInstance();
  C2GS_Altar_Study_OneKey::default_instance_->InitAsDefaultInstance();
  C2GS_Altar_Take_Reward_OneKey::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Altar_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Altar_2eproto {
  StaticDescriptorInitializer_Altar_2eproto() {
    protobuf_AddDesc_Altar_2eproto();
  }
} static_descriptor_initializer_Altar_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SubAltar::kIsLevelUpFieldNumber;
const int SubAltar::kHaveRewardFieldNumber;
const int SubAltar::kStudyTimesFieldNumber;
const int SubAltar::kLastStudyTimeFieldNumber;
const int SubAltar::kTakeFreeTimeFieldNumber;
const int SubAltar::kRewardCountFieldNumber;
#endif  // !_MSC_VER

SubAltar::SubAltar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubAltar::InitAsDefaultInstance() {
}

SubAltar::SubAltar(const SubAltar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubAltar::SharedCtor() {
  _cached_size_ = 0;
  is_level_up_ = false;
  have_reward_ = false;
  study_times_ = 0u;
  last_study_time_ = GOOGLE_ULONGLONG(0);
  take_free_time_ = GOOGLE_ULONGLONG(0);
  reward_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubAltar::~SubAltar() {
  SharedDtor();
}

void SubAltar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubAltar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubAltar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubAltar_descriptor_;
}

const SubAltar& SubAltar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Altar_2eproto();
  return *default_instance_;
}

SubAltar* SubAltar::default_instance_ = NULL;

SubAltar* SubAltar::New() const {
  return new SubAltar;
}

void SubAltar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_level_up_ = false;
    have_reward_ = false;
    study_times_ = 0u;
    last_study_time_ = GOOGLE_ULONGLONG(0);
    take_free_time_ = GOOGLE_ULONGLONG(0);
    reward_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubAltar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_level_up = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_level_up_)));
          set_has_is_level_up();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_have_reward;
        break;
      }

      // required bool have_reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_reward_)));
          set_has_have_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_study_times;
        break;
      }

      // required uint32 study_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_study_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &study_times_)));
          set_has_study_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_study_time;
        break;
      }

      // required uint64 last_study_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_study_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_study_time_)));
          set_has_last_study_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_take_free_time;
        break;
      }

      // optional uint64 take_free_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_take_free_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &take_free_time_)));
          set_has_take_free_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_reward_count;
        break;
      }

      // optional uint32 reward_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_count_)));
          set_has_reward_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubAltar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_level_up = 1;
  if (has_is_level_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_level_up(), output);
  }

  // required bool have_reward = 2;
  if (has_have_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->have_reward(), output);
  }

  // required uint32 study_times = 3;
  if (has_study_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->study_times(), output);
  }

  // required uint64 last_study_time = 4;
  if (has_last_study_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->last_study_time(), output);
  }

  // optional uint64 take_free_time = 5;
  if (has_take_free_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->take_free_time(), output);
  }

  // optional uint32 reward_count = 6;
  if (has_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->reward_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubAltar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_level_up = 1;
  if (has_is_level_up()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_level_up(), target);
  }

  // required bool have_reward = 2;
  if (has_have_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->have_reward(), target);
  }

  // required uint32 study_times = 3;
  if (has_study_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->study_times(), target);
  }

  // required uint64 last_study_time = 4;
  if (has_last_study_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->last_study_time(), target);
  }

  // optional uint64 take_free_time = 5;
  if (has_take_free_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->take_free_time(), target);
  }

  // optional uint32 reward_count = 6;
  if (has_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->reward_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubAltar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_level_up = 1;
    if (has_is_level_up()) {
      total_size += 1 + 1;
    }

    // required bool have_reward = 2;
    if (has_have_reward()) {
      total_size += 1 + 1;
    }

    // required uint32 study_times = 3;
    if (has_study_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->study_times());
    }

    // required uint64 last_study_time = 4;
    if (has_last_study_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_study_time());
    }

    // optional uint64 take_free_time = 5;
    if (has_take_free_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->take_free_time());
    }

    // optional uint32 reward_count = 6;
    if (has_reward_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubAltar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubAltar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubAltar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubAltar::MergeFrom(const SubAltar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_level_up()) {
      set_is_level_up(from.is_level_up());
    }
    if (from.has_have_reward()) {
      set_have_reward(from.have_reward());
    }
    if (from.has_study_times()) {
      set_study_times(from.study_times());
    }
    if (from.has_last_study_time()) {
      set_last_study_time(from.last_study_time());
    }
    if (from.has_take_free_time()) {
      set_take_free_time(from.take_free_time());
    }
    if (from.has_reward_count()) {
      set_reward_count(from.reward_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubAltar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubAltar::CopyFrom(const SubAltar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubAltar::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SubAltar::Swap(SubAltar* other) {
  if (other != this) {
    std::swap(is_level_up_, other->is_level_up_);
    std::swap(have_reward_, other->have_reward_);
    std::swap(study_times_, other->study_times_);
    std::swap(last_study_time_, other->last_study_time_);
    std::swap(take_free_time_, other->take_free_time_);
    std::swap(reward_count_, other->reward_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubAltar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubAltar_descriptor_;
  metadata.reflection = SubAltar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Altar_All_Info::kLevleFieldNumber;
const int GS2C_Altar_All_Info::kSilverCoinFieldNumber;
const int GS2C_Altar_All_Info::kSubAltarFieldNumber;
#endif  // !_MSC_VER

GS2C_Altar_All_Info::GS2C_Altar_All_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Altar_All_Info::InitAsDefaultInstance() {
}

GS2C_Altar_All_Info::GS2C_Altar_All_Info(const GS2C_Altar_All_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Altar_All_Info::SharedCtor() {
  _cached_size_ = 0;
  levle_ = 0u;
  silver_coin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Altar_All_Info::~GS2C_Altar_All_Info() {
  SharedDtor();
}

void GS2C_Altar_All_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Altar_All_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Altar_All_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Altar_All_Info_descriptor_;
}

const GS2C_Altar_All_Info& GS2C_Altar_All_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Altar_2eproto();
  return *default_instance_;
}

GS2C_Altar_All_Info* GS2C_Altar_All_Info::default_instance_ = NULL;

GS2C_Altar_All_Info* GS2C_Altar_All_Info::New() const {
  return new GS2C_Altar_All_Info;
}

void GS2C_Altar_All_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levle_ = 0u;
    silver_coin_ = 0u;
  }
  sub_altar_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Altar_All_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 levle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levle_)));
          set_has_levle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_silver_coin;
        break;
      }

      // optional uint32 silver_coin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_silver_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &silver_coin_)));
          set_has_silver_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sub_altar;
        break;
      }

      // repeated .pb.SubAltar sub_altar = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sub_altar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sub_altar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sub_altar;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Altar_All_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 levle = 1;
  if (has_levle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->levle(), output);
  }

  // optional uint32 silver_coin = 2;
  if (has_silver_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->silver_coin(), output);
  }

  // repeated .pb.SubAltar sub_altar = 3;
  for (int i = 0; i < this->sub_altar_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sub_altar(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Altar_All_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 levle = 1;
  if (has_levle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->levle(), target);
  }

  // optional uint32 silver_coin = 2;
  if (has_silver_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->silver_coin(), target);
  }

  // repeated .pb.SubAltar sub_altar = 3;
  for (int i = 0; i < this->sub_altar_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sub_altar(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Altar_All_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 levle = 1;
    if (has_levle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levle());
    }

    // optional uint32 silver_coin = 2;
    if (has_silver_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->silver_coin());
    }

  }
  // repeated .pb.SubAltar sub_altar = 3;
  total_size += 1 * this->sub_altar_size();
  for (int i = 0; i < this->sub_altar_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sub_altar(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Altar_All_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Altar_All_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Altar_All_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Altar_All_Info::MergeFrom(const GS2C_Altar_All_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  sub_altar_.MergeFrom(from.sub_altar_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levle()) {
      set_levle(from.levle());
    }
    if (from.has_silver_coin()) {
      set_silver_coin(from.silver_coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Altar_All_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Altar_All_Info::CopyFrom(const GS2C_Altar_All_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Altar_All_Info::IsInitialized() const {

  for (int i = 0; i < sub_altar_size(); i++) {
    if (!this->sub_altar(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Altar_All_Info::Swap(GS2C_Altar_All_Info* other) {
  if (other != this) {
    std::swap(levle_, other->levle_);
    std::swap(silver_coin_, other->silver_coin_);
    sub_altar_.Swap(&other->sub_altar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Altar_All_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Altar_All_Info_descriptor_;
  metadata.reflection = GS2C_Altar_All_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_Altar_All_Info::C2GS_Altar_All_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Altar_All_Info::InitAsDefaultInstance() {
}

C2GS_Altar_All_Info::C2GS_Altar_All_Info(const C2GS_Altar_All_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Altar_All_Info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Altar_All_Info::~C2GS_Altar_All_Info() {
  SharedDtor();
}

void C2GS_Altar_All_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Altar_All_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Altar_All_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Altar_All_Info_descriptor_;
}

const C2GS_Altar_All_Info& C2GS_Altar_All_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Altar_2eproto();
  return *default_instance_;
}

C2GS_Altar_All_Info* C2GS_Altar_All_Info::default_instance_ = NULL;

C2GS_Altar_All_Info* C2GS_Altar_All_Info::New() const {
  return new C2GS_Altar_All_Info;
}

void C2GS_Altar_All_Info::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Altar_All_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_Altar_All_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Altar_All_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Altar_All_Info::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Altar_All_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Altar_All_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Altar_All_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Altar_All_Info::MergeFrom(const C2GS_Altar_All_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Altar_All_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Altar_All_Info::CopyFrom(const C2GS_Altar_All_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Altar_All_Info::IsInitialized() const {

  return true;
}

void C2GS_Altar_All_Info::Swap(C2GS_Altar_All_Info* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Altar_All_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Altar_All_Info_descriptor_;
  metadata.reflection = C2GS_Altar_All_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Altar_Study::kAltarLvFieldNumber;
#endif  // !_MSC_VER

C2GS_Altar_Study::C2GS_Altar_Study()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Altar_Study::InitAsDefaultInstance() {
}

C2GS_Altar_Study::C2GS_Altar_Study(const C2GS_Altar_Study& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Altar_Study::SharedCtor() {
  _cached_size_ = 0;
  altar_lv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Altar_Study::~C2GS_Altar_Study() {
  SharedDtor();
}

void C2GS_Altar_Study::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Altar_Study::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Altar_Study::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Altar_Study_descriptor_;
}

const C2GS_Altar_Study& C2GS_Altar_Study::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Altar_2eproto();
  return *default_instance_;
}

C2GS_Altar_Study* C2GS_Altar_Study::default_instance_ = NULL;

C2GS_Altar_Study* C2GS_Altar_Study::New() const {
  return new C2GS_Altar_Study;
}

void C2GS_Altar_Study::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    altar_lv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Altar_Study::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 altar_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &altar_lv_)));
          set_has_altar_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Altar_Study::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 altar_lv = 1;
  if (has_altar_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->altar_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Altar_Study::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 altar_lv = 1;
  if (has_altar_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->altar_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Altar_Study::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 altar_lv = 1;
    if (has_altar_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->altar_lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Altar_Study::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Altar_Study* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Altar_Study*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Altar_Study::MergeFrom(const C2GS_Altar_Study& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_altar_lv()) {
      set_altar_lv(from.altar_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Altar_Study::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Altar_Study::CopyFrom(const C2GS_Altar_Study& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Altar_Study::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Altar_Study::Swap(C2GS_Altar_Study* other) {
  if (other != this) {
    std::swap(altar_lv_, other->altar_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Altar_Study::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Altar_Study_descriptor_;
  metadata.reflection = C2GS_Altar_Study_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Altar_Study_Reward::kAltarLvFieldNumber;
const int GS2C_Altar_Study_Reward::kRewardNumFieldNumber;
#endif  // !_MSC_VER

GS2C_Altar_Study_Reward::GS2C_Altar_Study_Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Altar_Study_Reward::InitAsDefaultInstance() {
}

GS2C_Altar_Study_Reward::GS2C_Altar_Study_Reward(const GS2C_Altar_Study_Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Altar_Study_Reward::SharedCtor() {
  _cached_size_ = 0;
  altar_lv_ = 0u;
  reward_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Altar_Study_Reward::~GS2C_Altar_Study_Reward() {
  SharedDtor();
}

void GS2C_Altar_Study_Reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Altar_Study_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Altar_Study_Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Altar_Study_Reward_descriptor_;
}

const GS2C_Altar_Study_Reward& GS2C_Altar_Study_Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Altar_2eproto();
  return *default_instance_;
}

GS2C_Altar_Study_Reward* GS2C_Altar_Study_Reward::default_instance_ = NULL;

GS2C_Altar_Study_Reward* GS2C_Altar_Study_Reward::New() const {
  return new GS2C_Altar_Study_Reward;
}

void GS2C_Altar_Study_Reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    altar_lv_ = 0u;
    reward_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Altar_Study_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 altar_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &altar_lv_)));
          set_has_altar_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward_num;
        break;
      }

      // required uint32 reward_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_num_)));
          set_has_reward_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Altar_Study_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 altar_lv = 1;
  if (has_altar_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->altar_lv(), output);
  }

  // required uint32 reward_num = 2;
  if (has_reward_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reward_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Altar_Study_Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 altar_lv = 1;
  if (has_altar_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->altar_lv(), target);
  }

  // required uint32 reward_num = 2;
  if (has_reward_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reward_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Altar_Study_Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 altar_lv = 1;
    if (has_altar_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->altar_lv());
    }

    // required uint32 reward_num = 2;
    if (has_reward_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Altar_Study_Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Altar_Study_Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Altar_Study_Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Altar_Study_Reward::MergeFrom(const GS2C_Altar_Study_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_altar_lv()) {
      set_altar_lv(from.altar_lv());
    }
    if (from.has_reward_num()) {
      set_reward_num(from.reward_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Altar_Study_Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Altar_Study_Reward::CopyFrom(const GS2C_Altar_Study_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Altar_Study_Reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GS2C_Altar_Study_Reward::Swap(GS2C_Altar_Study_Reward* other) {
  if (other != this) {
    std::swap(altar_lv_, other->altar_lv_);
    std::swap(reward_num_, other->reward_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Altar_Study_Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Altar_Study_Reward_descriptor_;
  metadata.reflection = GS2C_Altar_Study_Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Altar_Take_Reward::kAltarLvFieldNumber;
#endif  // !_MSC_VER

C2GS_Altar_Take_Reward::C2GS_Altar_Take_Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Altar_Take_Reward::InitAsDefaultInstance() {
}

C2GS_Altar_Take_Reward::C2GS_Altar_Take_Reward(const C2GS_Altar_Take_Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Altar_Take_Reward::SharedCtor() {
  _cached_size_ = 0;
  altar_lv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Altar_Take_Reward::~C2GS_Altar_Take_Reward() {
  SharedDtor();
}

void C2GS_Altar_Take_Reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Altar_Take_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Altar_Take_Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Altar_Take_Reward_descriptor_;
}

const C2GS_Altar_Take_Reward& C2GS_Altar_Take_Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Altar_2eproto();
  return *default_instance_;
}

C2GS_Altar_Take_Reward* C2GS_Altar_Take_Reward::default_instance_ = NULL;

C2GS_Altar_Take_Reward* C2GS_Altar_Take_Reward::New() const {
  return new C2GS_Altar_Take_Reward;
}

void C2GS_Altar_Take_Reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    altar_lv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Altar_Take_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 altar_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &altar_lv_)));
          set_has_altar_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Altar_Take_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 altar_lv = 1;
  if (has_altar_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->altar_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Altar_Take_Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 altar_lv = 1;
  if (has_altar_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->altar_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Altar_Take_Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 altar_lv = 1;
    if (has_altar_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->altar_lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Altar_Take_Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Altar_Take_Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Altar_Take_Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Altar_Take_Reward::MergeFrom(const C2GS_Altar_Take_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_altar_lv()) {
      set_altar_lv(from.altar_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Altar_Take_Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Altar_Take_Reward::CopyFrom(const C2GS_Altar_Take_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Altar_Take_Reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Altar_Take_Reward::Swap(C2GS_Altar_Take_Reward* other) {
  if (other != this) {
    std::swap(altar_lv_, other->altar_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Altar_Take_Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Altar_Take_Reward_descriptor_;
  metadata.reflection = C2GS_Altar_Take_Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Altar_Sub_Altar_LevelUp::kAltarLvFieldNumber;
#endif  // !_MSC_VER

C2GS_Altar_Sub_Altar_LevelUp::C2GS_Altar_Sub_Altar_LevelUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Altar_Sub_Altar_LevelUp::InitAsDefaultInstance() {
}

C2GS_Altar_Sub_Altar_LevelUp::C2GS_Altar_Sub_Altar_LevelUp(const C2GS_Altar_Sub_Altar_LevelUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Altar_Sub_Altar_LevelUp::SharedCtor() {
  _cached_size_ = 0;
  altar_lv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Altar_Sub_Altar_LevelUp::~C2GS_Altar_Sub_Altar_LevelUp() {
  SharedDtor();
}

void C2GS_Altar_Sub_Altar_LevelUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Altar_Sub_Altar_LevelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Altar_Sub_Altar_LevelUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Altar_Sub_Altar_LevelUp_descriptor_;
}

const C2GS_Altar_Sub_Altar_LevelUp& C2GS_Altar_Sub_Altar_LevelUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Altar_2eproto();
  return *default_instance_;
}

C2GS_Altar_Sub_Altar_LevelUp* C2GS_Altar_Sub_Altar_LevelUp::default_instance_ = NULL;

C2GS_Altar_Sub_Altar_LevelUp* C2GS_Altar_Sub_Altar_LevelUp::New() const {
  return new C2GS_Altar_Sub_Altar_LevelUp;
}

void C2GS_Altar_Sub_Altar_LevelUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    altar_lv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Altar_Sub_Altar_LevelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 altar_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &altar_lv_)));
          set_has_altar_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Altar_Sub_Altar_LevelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 altar_lv = 1;
  if (has_altar_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->altar_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Altar_Sub_Altar_LevelUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 altar_lv = 1;
  if (has_altar_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->altar_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Altar_Sub_Altar_LevelUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 altar_lv = 1;
    if (has_altar_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->altar_lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Altar_Sub_Altar_LevelUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Altar_Sub_Altar_LevelUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Altar_Sub_Altar_LevelUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Altar_Sub_Altar_LevelUp::MergeFrom(const C2GS_Altar_Sub_Altar_LevelUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_altar_lv()) {
      set_altar_lv(from.altar_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Altar_Sub_Altar_LevelUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Altar_Sub_Altar_LevelUp::CopyFrom(const C2GS_Altar_Sub_Altar_LevelUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Altar_Sub_Altar_LevelUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Altar_Sub_Altar_LevelUp::Swap(C2GS_Altar_Sub_Altar_LevelUp* other) {
  if (other != this) {
    std::swap(altar_lv_, other->altar_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Altar_Sub_Altar_LevelUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Altar_Sub_Altar_LevelUp_descriptor_;
  metadata.reflection = C2GS_Altar_Sub_Altar_LevelUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_Altar_Build_By_Token::C2GS_Altar_Build_By_Token()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Altar_Build_By_Token::InitAsDefaultInstance() {
}

C2GS_Altar_Build_By_Token::C2GS_Altar_Build_By_Token(const C2GS_Altar_Build_By_Token& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Altar_Build_By_Token::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Altar_Build_By_Token::~C2GS_Altar_Build_By_Token() {
  SharedDtor();
}

void C2GS_Altar_Build_By_Token::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Altar_Build_By_Token::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Altar_Build_By_Token::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Altar_Build_By_Token_descriptor_;
}

const C2GS_Altar_Build_By_Token& C2GS_Altar_Build_By_Token::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Altar_2eproto();
  return *default_instance_;
}

C2GS_Altar_Build_By_Token* C2GS_Altar_Build_By_Token::default_instance_ = NULL;

C2GS_Altar_Build_By_Token* C2GS_Altar_Build_By_Token::New() const {
  return new C2GS_Altar_Build_By_Token;
}

void C2GS_Altar_Build_By_Token::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Altar_Build_By_Token::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_Altar_Build_By_Token::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Altar_Build_By_Token::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Altar_Build_By_Token::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Altar_Build_By_Token::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Altar_Build_By_Token* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Altar_Build_By_Token*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Altar_Build_By_Token::MergeFrom(const C2GS_Altar_Build_By_Token& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Altar_Build_By_Token::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Altar_Build_By_Token::CopyFrom(const C2GS_Altar_Build_By_Token& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Altar_Build_By_Token::IsInitialized() const {

  return true;
}

void C2GS_Altar_Build_By_Token::Swap(C2GS_Altar_Build_By_Token* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Altar_Build_By_Token::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Altar_Build_By_Token_descriptor_;
  metadata.reflection = C2GS_Altar_Build_By_Token_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Altar_Build_By_Silver::kIsFastFieldNumber;
#endif  // !_MSC_VER

C2GS_Altar_Build_By_Silver::C2GS_Altar_Build_By_Silver()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Altar_Build_By_Silver::InitAsDefaultInstance() {
}

C2GS_Altar_Build_By_Silver::C2GS_Altar_Build_By_Silver(const C2GS_Altar_Build_By_Silver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Altar_Build_By_Silver::SharedCtor() {
  _cached_size_ = 0;
  is_fast_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Altar_Build_By_Silver::~C2GS_Altar_Build_By_Silver() {
  SharedDtor();
}

void C2GS_Altar_Build_By_Silver::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Altar_Build_By_Silver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Altar_Build_By_Silver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Altar_Build_By_Silver_descriptor_;
}

const C2GS_Altar_Build_By_Silver& C2GS_Altar_Build_By_Silver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Altar_2eproto();
  return *default_instance_;
}

C2GS_Altar_Build_By_Silver* C2GS_Altar_Build_By_Silver::default_instance_ = NULL;

C2GS_Altar_Build_By_Silver* C2GS_Altar_Build_By_Silver::New() const {
  return new C2GS_Altar_Build_By_Silver;
}

void C2GS_Altar_Build_By_Silver::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_fast_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Altar_Build_By_Silver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_fast = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_fast_)));
          set_has_is_fast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Altar_Build_By_Silver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_fast = 1;
  if (has_is_fast()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_fast(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Altar_Build_By_Silver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_fast = 1;
  if (has_is_fast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_fast(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Altar_Build_By_Silver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_fast = 1;
    if (has_is_fast()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Altar_Build_By_Silver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Altar_Build_By_Silver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Altar_Build_By_Silver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Altar_Build_By_Silver::MergeFrom(const C2GS_Altar_Build_By_Silver& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_fast()) {
      set_is_fast(from.is_fast());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Altar_Build_By_Silver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Altar_Build_By_Silver::CopyFrom(const C2GS_Altar_Build_By_Silver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Altar_Build_By_Silver::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Altar_Build_By_Silver::Swap(C2GS_Altar_Build_By_Silver* other) {
  if (other != this) {
    std::swap(is_fast_, other->is_fast_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Altar_Build_By_Silver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Altar_Build_By_Silver_descriptor_;
  metadata.reflection = C2GS_Altar_Build_By_Silver_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_Altar_LevelUp_To_Open_SubAltar::C2GS_Altar_LevelUp_To_Open_SubAltar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Altar_LevelUp_To_Open_SubAltar::InitAsDefaultInstance() {
}

C2GS_Altar_LevelUp_To_Open_SubAltar::C2GS_Altar_LevelUp_To_Open_SubAltar(const C2GS_Altar_LevelUp_To_Open_SubAltar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Altar_LevelUp_To_Open_SubAltar::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Altar_LevelUp_To_Open_SubAltar::~C2GS_Altar_LevelUp_To_Open_SubAltar() {
  SharedDtor();
}

void C2GS_Altar_LevelUp_To_Open_SubAltar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Altar_LevelUp_To_Open_SubAltar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Altar_LevelUp_To_Open_SubAltar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Altar_LevelUp_To_Open_SubAltar_descriptor_;
}

const C2GS_Altar_LevelUp_To_Open_SubAltar& C2GS_Altar_LevelUp_To_Open_SubAltar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Altar_2eproto();
  return *default_instance_;
}

C2GS_Altar_LevelUp_To_Open_SubAltar* C2GS_Altar_LevelUp_To_Open_SubAltar::default_instance_ = NULL;

C2GS_Altar_LevelUp_To_Open_SubAltar* C2GS_Altar_LevelUp_To_Open_SubAltar::New() const {
  return new C2GS_Altar_LevelUp_To_Open_SubAltar;
}

void C2GS_Altar_LevelUp_To_Open_SubAltar::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Altar_LevelUp_To_Open_SubAltar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_Altar_LevelUp_To_Open_SubAltar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Altar_LevelUp_To_Open_SubAltar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Altar_LevelUp_To_Open_SubAltar::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Altar_LevelUp_To_Open_SubAltar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Altar_LevelUp_To_Open_SubAltar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Altar_LevelUp_To_Open_SubAltar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Altar_LevelUp_To_Open_SubAltar::MergeFrom(const C2GS_Altar_LevelUp_To_Open_SubAltar& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Altar_LevelUp_To_Open_SubAltar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Altar_LevelUp_To_Open_SubAltar::CopyFrom(const C2GS_Altar_LevelUp_To_Open_SubAltar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Altar_LevelUp_To_Open_SubAltar::IsInitialized() const {

  return true;
}

void C2GS_Altar_LevelUp_To_Open_SubAltar::Swap(C2GS_Altar_LevelUp_To_Open_SubAltar* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Altar_LevelUp_To_Open_SubAltar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Altar_LevelUp_To_Open_SubAltar_descriptor_;
  metadata.reflection = C2GS_Altar_LevelUp_To_Open_SubAltar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_Altar_Study_OneKey::C2GS_Altar_Study_OneKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Altar_Study_OneKey::InitAsDefaultInstance() {
}

C2GS_Altar_Study_OneKey::C2GS_Altar_Study_OneKey(const C2GS_Altar_Study_OneKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Altar_Study_OneKey::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Altar_Study_OneKey::~C2GS_Altar_Study_OneKey() {
  SharedDtor();
}

void C2GS_Altar_Study_OneKey::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Altar_Study_OneKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Altar_Study_OneKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Altar_Study_OneKey_descriptor_;
}

const C2GS_Altar_Study_OneKey& C2GS_Altar_Study_OneKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Altar_2eproto();
  return *default_instance_;
}

C2GS_Altar_Study_OneKey* C2GS_Altar_Study_OneKey::default_instance_ = NULL;

C2GS_Altar_Study_OneKey* C2GS_Altar_Study_OneKey::New() const {
  return new C2GS_Altar_Study_OneKey;
}

void C2GS_Altar_Study_OneKey::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Altar_Study_OneKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_Altar_Study_OneKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Altar_Study_OneKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Altar_Study_OneKey::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Altar_Study_OneKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Altar_Study_OneKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Altar_Study_OneKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Altar_Study_OneKey::MergeFrom(const C2GS_Altar_Study_OneKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Altar_Study_OneKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Altar_Study_OneKey::CopyFrom(const C2GS_Altar_Study_OneKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Altar_Study_OneKey::IsInitialized() const {

  return true;
}

void C2GS_Altar_Study_OneKey::Swap(C2GS_Altar_Study_OneKey* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Altar_Study_OneKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Altar_Study_OneKey_descriptor_;
  metadata.reflection = C2GS_Altar_Study_OneKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_Altar_Take_Reward_OneKey::C2GS_Altar_Take_Reward_OneKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Altar_Take_Reward_OneKey::InitAsDefaultInstance() {
}

C2GS_Altar_Take_Reward_OneKey::C2GS_Altar_Take_Reward_OneKey(const C2GS_Altar_Take_Reward_OneKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Altar_Take_Reward_OneKey::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Altar_Take_Reward_OneKey::~C2GS_Altar_Take_Reward_OneKey() {
  SharedDtor();
}

void C2GS_Altar_Take_Reward_OneKey::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Altar_Take_Reward_OneKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Altar_Take_Reward_OneKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Altar_Take_Reward_OneKey_descriptor_;
}

const C2GS_Altar_Take_Reward_OneKey& C2GS_Altar_Take_Reward_OneKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Altar_2eproto();
  return *default_instance_;
}

C2GS_Altar_Take_Reward_OneKey* C2GS_Altar_Take_Reward_OneKey::default_instance_ = NULL;

C2GS_Altar_Take_Reward_OneKey* C2GS_Altar_Take_Reward_OneKey::New() const {
  return new C2GS_Altar_Take_Reward_OneKey;
}

void C2GS_Altar_Take_Reward_OneKey::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Altar_Take_Reward_OneKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_Altar_Take_Reward_OneKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Altar_Take_Reward_OneKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Altar_Take_Reward_OneKey::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Altar_Take_Reward_OneKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Altar_Take_Reward_OneKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Altar_Take_Reward_OneKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Altar_Take_Reward_OneKey::MergeFrom(const C2GS_Altar_Take_Reward_OneKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Altar_Take_Reward_OneKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Altar_Take_Reward_OneKey::CopyFrom(const C2GS_Altar_Take_Reward_OneKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Altar_Take_Reward_OneKey::IsInitialized() const {

  return true;
}

void C2GS_Altar_Take_Reward_OneKey::Swap(C2GS_Altar_Take_Reward_OneKey* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Altar_Take_Reward_OneKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Altar_Take_Reward_OneKey_descriptor_;
  metadata.reflection = C2GS_Altar_Take_Reward_OneKey_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
