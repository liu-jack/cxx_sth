// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DbProxy.proto

#ifndef PROTOBUF_DbProxy_2eproto__INCLUDED
#define PROTOBUF_DbProxy_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "GameServer.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DbProxy_2eproto();
void protobuf_AssignDesc_DbProxy_2eproto();
void protobuf_ShutdownFile_DbProxy_2eproto();

class DB2G_Error;
class DB2G_OperateResPon;
class GxDB_AccountId;
class GxDB_AccountData;
class GxDB_CharacterId;

// ===================================================================

class DB2G_Error : public ::google::protobuf::Message {
 public:
  DB2G_Error();
  virtual ~DB2G_Error();

  DB2G_Error(const DB2G_Error& from);

  inline DB2G_Error& operator=(const DB2G_Error& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB2G_Error& default_instance();

  void Swap(DB2G_Error* other);

  // implements Message ----------------------------------------------

  DB2G_Error* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB2G_Error& from);
  void MergeFrom(const DB2G_Error& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  inline void set_allocated_info(::std::string* info);

  // @@protoc_insertion_point(class_scope:pb.DB2G_Error)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DbProxy_2eproto();
  friend void protobuf_AssignDesc_DbProxy_2eproto();
  friend void protobuf_ShutdownFile_DbProxy_2eproto();

  void InitAsDefaultInstance();
  static DB2G_Error* default_instance_;
};
// -------------------------------------------------------------------

class DB2G_OperateResPon : public ::google::protobuf::Message {
 public:
  DB2G_OperateResPon();
  virtual ~DB2G_OperateResPon();

  DB2G_OperateResPon(const DB2G_OperateResPon& from);

  inline DB2G_OperateResPon& operator=(const DB2G_OperateResPon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB2G_OperateResPon& default_instance();

  void Swap(DB2G_OperateResPon* other);

  // implements Message ----------------------------------------------

  DB2G_OperateResPon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB2G_OperateResPon& from);
  void MergeFrom(const DB2G_OperateResPon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 player_guid = 1;
  inline bool has_player_guid() const;
  inline void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 player_guid() const;
  inline void set_player_guid(::google::protobuf::uint64 value);

  // optional string to_name = 2;
  inline bool has_to_name() const;
  inline void clear_to_name();
  static const int kToNameFieldNumber = 2;
  inline const ::std::string& to_name() const;
  inline void set_to_name(const ::std::string& value);
  inline void set_to_name(const char* value);
  inline void set_to_name(const char* value, size_t size);
  inline ::std::string* mutable_to_name();
  inline ::std::string* release_to_name();
  inline void set_allocated_to_name(::std::string* to_name);

  // required bool operate_result = 3;
  inline bool has_operate_result() const;
  inline void clear_operate_result();
  static const int kOperateResultFieldNumber = 3;
  inline bool operate_result() const;
  inline void set_operate_result(bool value);

  // @@protoc_insertion_point(class_scope:pb.DB2G_OperateResPon)
 private:
  inline void set_has_player_guid();
  inline void clear_has_player_guid();
  inline void set_has_to_name();
  inline void clear_has_to_name();
  inline void set_has_operate_result();
  inline void clear_has_operate_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_guid_;
  ::std::string* to_name_;
  bool operate_result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DbProxy_2eproto();
  friend void protobuf_AssignDesc_DbProxy_2eproto();
  friend void protobuf_ShutdownFile_DbProxy_2eproto();

  void InitAsDefaultInstance();
  static DB2G_OperateResPon* default_instance_;
};
// -------------------------------------------------------------------

class GxDB_AccountId : public ::google::protobuf::Message {
 public:
  GxDB_AccountId();
  virtual ~GxDB_AccountId();

  GxDB_AccountId(const GxDB_AccountId& from);

  inline GxDB_AccountId& operator=(const GxDB_AccountId& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GxDB_AccountId& default_instance();

  void Swap(GxDB_AccountId* other);

  // implements Message ----------------------------------------------

  GxDB_AccountId* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GxDB_AccountId& from);
  void MergeFrom(const GxDB_AccountId& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string account_name = 1;
  inline bool has_account_name() const;
  inline void clear_account_name();
  static const int kAccountNameFieldNumber = 1;
  inline const ::std::string& account_name() const;
  inline void set_account_name(const ::std::string& value);
  inline void set_account_name(const char* value);
  inline void set_account_name(const char* value, size_t size);
  inline ::std::string* mutable_account_name();
  inline ::std::string* release_account_name();
  inline void set_allocated_account_name(::std::string* account_name);

  // @@protoc_insertion_point(class_scope:pb.GxDB_AccountId)
 private:
  inline void set_has_account_name();
  inline void clear_has_account_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DbProxy_2eproto();
  friend void protobuf_AssignDesc_DbProxy_2eproto();
  friend void protobuf_ShutdownFile_DbProxy_2eproto();

  void InitAsDefaultInstance();
  static GxDB_AccountId* default_instance_;
};
// -------------------------------------------------------------------

class GxDB_AccountData : public ::google::protobuf::Message {
 public:
  GxDB_AccountData();
  virtual ~GxDB_AccountData();

  GxDB_AccountData(const GxDB_AccountData& from);

  inline GxDB_AccountData& operator=(const GxDB_AccountData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GxDB_AccountData& default_instance();

  void Swap(GxDB_AccountData* other);

  // implements Message ----------------------------------------------

  GxDB_AccountData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GxDB_AccountData& from);
  void MergeFrom(const GxDB_AccountData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string account_name = 1;
  inline bool has_account_name() const;
  inline void clear_account_name();
  static const int kAccountNameFieldNumber = 1;
  inline const ::std::string& account_name() const;
  inline void set_account_name(const ::std::string& value);
  inline void set_account_name(const char* value);
  inline void set_account_name(const char* value, size_t size);
  inline ::std::string* mutable_account_name();
  inline ::std::string* release_account_name();
  inline void set_allocated_account_name(::std::string* account_name);

  // repeated string character_name = 2;
  inline int character_name_size() const;
  inline void clear_character_name();
  static const int kCharacterNameFieldNumber = 2;
  inline const ::std::string& character_name(int index) const;
  inline ::std::string* mutable_character_name(int index);
  inline void set_character_name(int index, const ::std::string& value);
  inline void set_character_name(int index, const char* value);
  inline void set_character_name(int index, const char* value, size_t size);
  inline ::std::string* add_character_name();
  inline void add_character_name(const ::std::string& value);
  inline void add_character_name(const char* value);
  inline void add_character_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& character_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_character_name();

  // @@protoc_insertion_point(class_scope:pb.GxDB_AccountData)
 private:
  inline void set_has_account_name();
  inline void clear_has_account_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> character_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DbProxy_2eproto();
  friend void protobuf_AssignDesc_DbProxy_2eproto();
  friend void protobuf_ShutdownFile_DbProxy_2eproto();

  void InitAsDefaultInstance();
  static GxDB_AccountData* default_instance_;
};
// -------------------------------------------------------------------

class GxDB_CharacterId : public ::google::protobuf::Message {
 public:
  GxDB_CharacterId();
  virtual ~GxDB_CharacterId();

  GxDB_CharacterId(const GxDB_CharacterId& from);

  inline GxDB_CharacterId& operator=(const GxDB_CharacterId& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GxDB_CharacterId& default_instance();

  void Swap(GxDB_CharacterId* other);

  // implements Message ----------------------------------------------

  GxDB_CharacterId* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GxDB_CharacterId& from);
  void MergeFrom(const GxDB_CharacterId& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 character_id = 1;
  inline bool has_character_id() const;
  inline void clear_character_id();
  static const int kCharacterIdFieldNumber = 1;
  inline ::google::protobuf::uint64 character_id() const;
  inline void set_character_id(::google::protobuf::uint64 value);

  // optional uint32 region_id = 2;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 region_id() const;
  inline void set_region_id(::google::protobuf::uint32 value);

  // optional uint32 server_id = 3;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 3;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // optional uint32 account_id = 4;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 4;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional string character_name = 5;
  inline bool has_character_name() const;
  inline void clear_character_name();
  static const int kCharacterNameFieldNumber = 5;
  inline const ::std::string& character_name() const;
  inline void set_character_name(const ::std::string& value);
  inline void set_character_name(const char* value);
  inline void set_character_name(const char* value, size_t size);
  inline ::std::string* mutable_character_name();
  inline ::std::string* release_character_name();
  inline void set_allocated_character_name(::std::string* character_name);

  // optional uint32 is_new = 6 [default = 0];
  inline bool has_is_new() const;
  inline void clear_is_new();
  static const int kIsNewFieldNumber = 6;
  inline ::google::protobuf::uint32 is_new() const;
  inline void set_is_new(::google::protobuf::uint32 value);

  // optional uint32 is_del = 7 [default = 0];
  inline bool has_is_del() const;
  inline void clear_is_del();
  static const int kIsDelFieldNumber = 7;
  inline ::google::protobuf::uint32 is_del() const;
  inline void set_is_del(::google::protobuf::uint32 value);

  // optional string delete_time = 8;
  inline bool has_delete_time() const;
  inline void clear_delete_time();
  static const int kDeleteTimeFieldNumber = 8;
  inline const ::std::string& delete_time() const;
  inline void set_delete_time(const ::std::string& value);
  inline void set_delete_time(const char* value);
  inline void set_delete_time(const char* value, size_t size);
  inline ::std::string* mutable_delete_time();
  inline ::std::string* release_delete_time();
  inline void set_allocated_delete_time(::std::string* delete_time);

  // @@protoc_insertion_point(class_scope:pb.GxDB_CharacterId)
 private:
  inline void set_has_character_id();
  inline void clear_has_character_id();
  inline void set_has_region_id();
  inline void clear_has_region_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_character_name();
  inline void clear_has_character_name();
  inline void set_has_is_new();
  inline void clear_has_is_new();
  inline void set_has_is_del();
  inline void clear_has_is_del();
  inline void set_has_delete_time();
  inline void clear_has_delete_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 character_id_;
  ::google::protobuf::uint32 region_id_;
  ::google::protobuf::uint32 server_id_;
  ::std::string* character_name_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 is_new_;
  ::std::string* delete_time_;
  ::google::protobuf::uint32 is_del_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_DbProxy_2eproto();
  friend void protobuf_AssignDesc_DbProxy_2eproto();
  friend void protobuf_ShutdownFile_DbProxy_2eproto();

  void InitAsDefaultInstance();
  static GxDB_CharacterId* default_instance_;
};
// ===================================================================


// ===================================================================

// DB2G_Error

// optional string info = 2;
inline bool DB2G_Error::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB2G_Error::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB2G_Error::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB2G_Error::clear_info() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& DB2G_Error::info() const {
  return *info_;
}
inline void DB2G_Error::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void DB2G_Error::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void DB2G_Error::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB2G_Error::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  return info_;
}
inline ::std::string* DB2G_Error::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DB2G_Error::set_allocated_info(::std::string* info) {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (info) {
    set_has_info();
    info_ = info;
  } else {
    clear_has_info();
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DB2G_OperateResPon

// optional uint64 player_guid = 1;
inline bool DB2G_OperateResPon::has_player_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB2G_OperateResPon::set_has_player_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB2G_OperateResPon::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB2G_OperateResPon::clear_player_guid() {
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
}
inline ::google::protobuf::uint64 DB2G_OperateResPon::player_guid() const {
  return player_guid_;
}
inline void DB2G_OperateResPon::set_player_guid(::google::protobuf::uint64 value) {
  set_has_player_guid();
  player_guid_ = value;
}

// optional string to_name = 2;
inline bool DB2G_OperateResPon::has_to_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB2G_OperateResPon::set_has_to_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB2G_OperateResPon::clear_has_to_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB2G_OperateResPon::clear_to_name() {
  if (to_name_ != &::google::protobuf::internal::kEmptyString) {
    to_name_->clear();
  }
  clear_has_to_name();
}
inline const ::std::string& DB2G_OperateResPon::to_name() const {
  return *to_name_;
}
inline void DB2G_OperateResPon::set_to_name(const ::std::string& value) {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  to_name_->assign(value);
}
inline void DB2G_OperateResPon::set_to_name(const char* value) {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  to_name_->assign(value);
}
inline void DB2G_OperateResPon::set_to_name(const char* value, size_t size) {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  to_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB2G_OperateResPon::mutable_to_name() {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  return to_name_;
}
inline ::std::string* DB2G_OperateResPon::release_to_name() {
  clear_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_name_;
    to_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DB2G_OperateResPon::set_allocated_to_name(::std::string* to_name) {
  if (to_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_name_;
  }
  if (to_name) {
    set_has_to_name();
    to_name_ = to_name;
  } else {
    clear_has_to_name();
    to_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool operate_result = 3;
inline bool DB2G_OperateResPon::has_operate_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB2G_OperateResPon::set_has_operate_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB2G_OperateResPon::clear_has_operate_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB2G_OperateResPon::clear_operate_result() {
  operate_result_ = false;
  clear_has_operate_result();
}
inline bool DB2G_OperateResPon::operate_result() const {
  return operate_result_;
}
inline void DB2G_OperateResPon::set_operate_result(bool value) {
  set_has_operate_result();
  operate_result_ = value;
}

// -------------------------------------------------------------------

// GxDB_AccountId

// required string account_name = 1;
inline bool GxDB_AccountId::has_account_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GxDB_AccountId::set_has_account_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GxDB_AccountId::clear_has_account_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GxDB_AccountId::clear_account_name() {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    account_name_->clear();
  }
  clear_has_account_name();
}
inline const ::std::string& GxDB_AccountId::account_name() const {
  return *account_name_;
}
inline void GxDB_AccountId::set_account_name(const ::std::string& value) {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  account_name_->assign(value);
}
inline void GxDB_AccountId::set_account_name(const char* value) {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  account_name_->assign(value);
}
inline void GxDB_AccountId::set_account_name(const char* value, size_t size) {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  account_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GxDB_AccountId::mutable_account_name() {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  return account_name_;
}
inline ::std::string* GxDB_AccountId::release_account_name() {
  clear_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_name_;
    account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GxDB_AccountId::set_allocated_account_name(::std::string* account_name) {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_;
  }
  if (account_name) {
    set_has_account_name();
    account_name_ = account_name;
  } else {
    clear_has_account_name();
    account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GxDB_AccountData

// required string account_name = 1;
inline bool GxDB_AccountData::has_account_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GxDB_AccountData::set_has_account_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GxDB_AccountData::clear_has_account_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GxDB_AccountData::clear_account_name() {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    account_name_->clear();
  }
  clear_has_account_name();
}
inline const ::std::string& GxDB_AccountData::account_name() const {
  return *account_name_;
}
inline void GxDB_AccountData::set_account_name(const ::std::string& value) {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  account_name_->assign(value);
}
inline void GxDB_AccountData::set_account_name(const char* value) {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  account_name_->assign(value);
}
inline void GxDB_AccountData::set_account_name(const char* value, size_t size) {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  account_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GxDB_AccountData::mutable_account_name() {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  return account_name_;
}
inline ::std::string* GxDB_AccountData::release_account_name() {
  clear_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_name_;
    account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GxDB_AccountData::set_allocated_account_name(::std::string* account_name) {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_;
  }
  if (account_name) {
    set_has_account_name();
    account_name_ = account_name;
  } else {
    clear_has_account_name();
    account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string character_name = 2;
inline int GxDB_AccountData::character_name_size() const {
  return character_name_.size();
}
inline void GxDB_AccountData::clear_character_name() {
  character_name_.Clear();
}
inline const ::std::string& GxDB_AccountData::character_name(int index) const {
  return character_name_.Get(index);
}
inline ::std::string* GxDB_AccountData::mutable_character_name(int index) {
  return character_name_.Mutable(index);
}
inline void GxDB_AccountData::set_character_name(int index, const ::std::string& value) {
  character_name_.Mutable(index)->assign(value);
}
inline void GxDB_AccountData::set_character_name(int index, const char* value) {
  character_name_.Mutable(index)->assign(value);
}
inline void GxDB_AccountData::set_character_name(int index, const char* value, size_t size) {
  character_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GxDB_AccountData::add_character_name() {
  return character_name_.Add();
}
inline void GxDB_AccountData::add_character_name(const ::std::string& value) {
  character_name_.Add()->assign(value);
}
inline void GxDB_AccountData::add_character_name(const char* value) {
  character_name_.Add()->assign(value);
}
inline void GxDB_AccountData::add_character_name(const char* value, size_t size) {
  character_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GxDB_AccountData::character_name() const {
  return character_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GxDB_AccountData::mutable_character_name() {
  return &character_name_;
}

// -------------------------------------------------------------------

// GxDB_CharacterId

// required uint64 character_id = 1;
inline bool GxDB_CharacterId::has_character_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GxDB_CharacterId::set_has_character_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GxDB_CharacterId::clear_has_character_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GxDB_CharacterId::clear_character_id() {
  character_id_ = GOOGLE_ULONGLONG(0);
  clear_has_character_id();
}
inline ::google::protobuf::uint64 GxDB_CharacterId::character_id() const {
  return character_id_;
}
inline void GxDB_CharacterId::set_character_id(::google::protobuf::uint64 value) {
  set_has_character_id();
  character_id_ = value;
}

// optional uint32 region_id = 2;
inline bool GxDB_CharacterId::has_region_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GxDB_CharacterId::set_has_region_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GxDB_CharacterId::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GxDB_CharacterId::clear_region_id() {
  region_id_ = 0u;
  clear_has_region_id();
}
inline ::google::protobuf::uint32 GxDB_CharacterId::region_id() const {
  return region_id_;
}
inline void GxDB_CharacterId::set_region_id(::google::protobuf::uint32 value) {
  set_has_region_id();
  region_id_ = value;
}

// optional uint32 server_id = 3;
inline bool GxDB_CharacterId::has_server_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GxDB_CharacterId::set_has_server_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GxDB_CharacterId::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GxDB_CharacterId::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 GxDB_CharacterId::server_id() const {
  return server_id_;
}
inline void GxDB_CharacterId::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional uint32 account_id = 4;
inline bool GxDB_CharacterId::has_account_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GxDB_CharacterId::set_has_account_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GxDB_CharacterId::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GxDB_CharacterId::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 GxDB_CharacterId::account_id() const {
  return account_id_;
}
inline void GxDB_CharacterId::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}

// optional string character_name = 5;
inline bool GxDB_CharacterId::has_character_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GxDB_CharacterId::set_has_character_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GxDB_CharacterId::clear_has_character_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GxDB_CharacterId::clear_character_name() {
  if (character_name_ != &::google::protobuf::internal::kEmptyString) {
    character_name_->clear();
  }
  clear_has_character_name();
}
inline const ::std::string& GxDB_CharacterId::character_name() const {
  return *character_name_;
}
inline void GxDB_CharacterId::set_character_name(const ::std::string& value) {
  set_has_character_name();
  if (character_name_ == &::google::protobuf::internal::kEmptyString) {
    character_name_ = new ::std::string;
  }
  character_name_->assign(value);
}
inline void GxDB_CharacterId::set_character_name(const char* value) {
  set_has_character_name();
  if (character_name_ == &::google::protobuf::internal::kEmptyString) {
    character_name_ = new ::std::string;
  }
  character_name_->assign(value);
}
inline void GxDB_CharacterId::set_character_name(const char* value, size_t size) {
  set_has_character_name();
  if (character_name_ == &::google::protobuf::internal::kEmptyString) {
    character_name_ = new ::std::string;
  }
  character_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GxDB_CharacterId::mutable_character_name() {
  set_has_character_name();
  if (character_name_ == &::google::protobuf::internal::kEmptyString) {
    character_name_ = new ::std::string;
  }
  return character_name_;
}
inline ::std::string* GxDB_CharacterId::release_character_name() {
  clear_has_character_name();
  if (character_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = character_name_;
    character_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GxDB_CharacterId::set_allocated_character_name(::std::string* character_name) {
  if (character_name_ != &::google::protobuf::internal::kEmptyString) {
    delete character_name_;
  }
  if (character_name) {
    set_has_character_name();
    character_name_ = character_name;
  } else {
    clear_has_character_name();
    character_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 is_new = 6 [default = 0];
inline bool GxDB_CharacterId::has_is_new() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GxDB_CharacterId::set_has_is_new() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GxDB_CharacterId::clear_has_is_new() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GxDB_CharacterId::clear_is_new() {
  is_new_ = 0u;
  clear_has_is_new();
}
inline ::google::protobuf::uint32 GxDB_CharacterId::is_new() const {
  return is_new_;
}
inline void GxDB_CharacterId::set_is_new(::google::protobuf::uint32 value) {
  set_has_is_new();
  is_new_ = value;
}

// optional uint32 is_del = 7 [default = 0];
inline bool GxDB_CharacterId::has_is_del() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GxDB_CharacterId::set_has_is_del() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GxDB_CharacterId::clear_has_is_del() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GxDB_CharacterId::clear_is_del() {
  is_del_ = 0u;
  clear_has_is_del();
}
inline ::google::protobuf::uint32 GxDB_CharacterId::is_del() const {
  return is_del_;
}
inline void GxDB_CharacterId::set_is_del(::google::protobuf::uint32 value) {
  set_has_is_del();
  is_del_ = value;
}

// optional string delete_time = 8;
inline bool GxDB_CharacterId::has_delete_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GxDB_CharacterId::set_has_delete_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GxDB_CharacterId::clear_has_delete_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GxDB_CharacterId::clear_delete_time() {
  if (delete_time_ != &::google::protobuf::internal::kEmptyString) {
    delete_time_->clear();
  }
  clear_has_delete_time();
}
inline const ::std::string& GxDB_CharacterId::delete_time() const {
  return *delete_time_;
}
inline void GxDB_CharacterId::set_delete_time(const ::std::string& value) {
  set_has_delete_time();
  if (delete_time_ == &::google::protobuf::internal::kEmptyString) {
    delete_time_ = new ::std::string;
  }
  delete_time_->assign(value);
}
inline void GxDB_CharacterId::set_delete_time(const char* value) {
  set_has_delete_time();
  if (delete_time_ == &::google::protobuf::internal::kEmptyString) {
    delete_time_ = new ::std::string;
  }
  delete_time_->assign(value);
}
inline void GxDB_CharacterId::set_delete_time(const char* value, size_t size) {
  set_has_delete_time();
  if (delete_time_ == &::google::protobuf::internal::kEmptyString) {
    delete_time_ = new ::std::string;
  }
  delete_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GxDB_CharacterId::mutable_delete_time() {
  set_has_delete_time();
  if (delete_time_ == &::google::protobuf::internal::kEmptyString) {
    delete_time_ = new ::std::string;
  }
  return delete_time_;
}
inline ::std::string* GxDB_CharacterId::release_delete_time() {
  clear_has_delete_time();
  if (delete_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = delete_time_;
    delete_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GxDB_CharacterId::set_allocated_delete_time(::std::string* delete_time) {
  if (delete_time_ != &::google::protobuf::internal::kEmptyString) {
    delete delete_time_;
  }
  if (delete_time) {
    set_has_delete_time();
    delete_time_ = delete_time;
  } else {
    clear_has_delete_time();
    delete_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DbProxy_2eproto__INCLUDED
