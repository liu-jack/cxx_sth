// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Item.proto

#ifndef PROTOBUF_Item_2eproto__INCLUDED
#define PROTOBUF_Item_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommomDef.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Item_2eproto();
void protobuf_AssignDesc_Item_2eproto();
void protobuf_ShutdownFile_Item_2eproto();

class GxDB_ItemInfo;
class GxDB_EquipInfo;
class GS2C_SlotItem;
class GS2C_Bag;
class C2GS_ItemUp;
class GS2C_ItemUse;
class GS2C_ItemSellRecord;
class GS2C_SellRecordList;
class GS2C_SellProgramInfo;
class GS2C_SellRandomProgram;
class GS2C_AllSellData;
class GS2C_LootRecord;
class GS2C_AllLootRecord;
class GS2C_LotteryFreeRecord;
class GS2C_AllLotteryInfo;
class GS2C_LootResult;
class GS2C_LootShopEquipResult;

// ===================================================================

class GxDB_ItemInfo : public ::google::protobuf::Message {
 public:
  GxDB_ItemInfo();
  virtual ~GxDB_ItemInfo();

  GxDB_ItemInfo(const GxDB_ItemInfo& from);

  inline GxDB_ItemInfo& operator=(const GxDB_ItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GxDB_ItemInfo& default_instance();

  void Swap(GxDB_ItemInfo* other);

  // implements Message ----------------------------------------------

  GxDB_ItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GxDB_ItemInfo& from);
  void MergeFrom(const GxDB_ItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 proto_id = 1;
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::google::protobuf::uint32 proto_id() const;
  inline void set_proto_id(::google::protobuf::uint32 value);

  // optional uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional bool is_new = 3;
  inline bool has_is_new() const;
  inline void clear_is_new();
  static const int kIsNewFieldNumber = 3;
  inline bool is_new() const;
  inline void set_is_new(bool value);

  // optional bool is_sold = 4;
  inline bool has_is_sold() const;
  inline void clear_is_sold();
  static const int kIsSoldFieldNumber = 4;
  inline bool is_sold() const;
  inline void set_is_sold(bool value);

  // optional int64 repo_end_time = 5;
  inline bool has_repo_end_time() const;
  inline void clear_repo_end_time();
  static const int kRepoEndTimeFieldNumber = 5;
  inline ::google::protobuf::int64 repo_end_time() const;
  inline void set_repo_end_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.GxDB_ItemInfo)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_is_new();
  inline void clear_has_is_new();
  inline void set_has_is_sold();
  inline void clear_has_is_sold();
  inline void set_has_repo_end_time();
  inline void clear_has_repo_end_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 proto_id_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::int64 repo_end_time_;
  bool is_new_;
  bool is_sold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Item_2eproto();
  friend void protobuf_AssignDesc_Item_2eproto();
  friend void protobuf_ShutdownFile_Item_2eproto();

  void InitAsDefaultInstance();
  static GxDB_ItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class GxDB_EquipInfo : public ::google::protobuf::Message {
 public:
  GxDB_EquipInfo();
  virtual ~GxDB_EquipInfo();

  GxDB_EquipInfo(const GxDB_EquipInfo& from);

  inline GxDB_EquipInfo& operator=(const GxDB_EquipInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GxDB_EquipInfo& default_instance();

  void Swap(GxDB_EquipInfo* other);

  // implements Message ----------------------------------------------

  GxDB_EquipInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GxDB_EquipInfo& from);
  void MergeFrom(const GxDB_EquipInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 equip_to_charid = 1;
  inline bool has_equip_to_charid() const;
  inline void clear_equip_to_charid();
  static const int kEquipToCharidFieldNumber = 1;
  inline ::google::protobuf::uint32 equip_to_charid() const;
  inline void set_equip_to_charid(::google::protobuf::uint32 value);

  // repeated .pb.PairValue skill_attrs = 2;
  inline int skill_attrs_size() const;
  inline void clear_skill_attrs();
  static const int kSkillAttrsFieldNumber = 2;
  inline const ::pb::PairValue& skill_attrs(int index) const;
  inline ::pb::PairValue* mutable_skill_attrs(int index);
  inline ::pb::PairValue* add_skill_attrs();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::PairValue >&
      skill_attrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::PairValue >*
      mutable_skill_attrs();

  // @@protoc_insertion_point(class_scope:pb.GxDB_EquipInfo)
 private:
  inline void set_has_equip_to_charid();
  inline void clear_has_equip_to_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::PairValue > skill_attrs_;
  ::google::protobuf::uint32 equip_to_charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Item_2eproto();
  friend void protobuf_AssignDesc_Item_2eproto();
  friend void protobuf_ShutdownFile_Item_2eproto();

  void InitAsDefaultInstance();
  static GxDB_EquipInfo* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_SlotItem : public ::google::protobuf::Message {
 public:
  GS2C_SlotItem();
  virtual ~GS2C_SlotItem();

  GS2C_SlotItem(const GS2C_SlotItem& from);

  inline GS2C_SlotItem& operator=(const GS2C_SlotItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_SlotItem& default_instance();

  void Swap(GS2C_SlotItem* other);

  // implements Message ----------------------------------------------

  GS2C_SlotItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_SlotItem& from);
  void MergeFrom(const GS2C_SlotItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_deleted = 1;
  inline bool has_is_deleted() const;
  inline void clear_is_deleted();
  static const int kIsDeletedFieldNumber = 1;
  inline bool is_deleted() const;
  inline void set_is_deleted(bool value);

  // required uint32 slot = 2;
  inline bool has_slot() const;
  inline void clear_slot();
  static const int kSlotFieldNumber = 2;
  inline ::google::protobuf::uint32 slot() const;
  inline void set_slot(::google::protobuf::uint32 value);

  // optional .pb.GxDB_ItemInfo item = 3;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 3;
  inline const ::pb::GxDB_ItemInfo& item() const;
  inline ::pb::GxDB_ItemInfo* mutable_item();
  inline ::pb::GxDB_ItemInfo* release_item();
  inline void set_allocated_item(::pb::GxDB_ItemInfo* item);

  // optional .pb.GxDB_EquipInfo equip = 4;
  inline bool has_equip() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 4;
  inline const ::pb::GxDB_EquipInfo& equip() const;
  inline ::pb::GxDB_EquipInfo* mutable_equip();
  inline ::pb::GxDB_EquipInfo* release_equip();
  inline void set_allocated_equip(::pb::GxDB_EquipInfo* equip);

  // @@protoc_insertion_point(class_scope:pb.GS2C_SlotItem)
 private:
  inline void set_has_is_deleted();
  inline void clear_has_is_deleted();
  inline void set_has_slot();
  inline void clear_has_slot();
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_equip();
  inline void clear_has_equip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool is_deleted_;
  ::google::protobuf::uint32 slot_;
  ::pb::GxDB_ItemInfo* item_;
  ::pb::GxDB_EquipInfo* equip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Item_2eproto();
  friend void protobuf_AssignDesc_Item_2eproto();
  friend void protobuf_ShutdownFile_Item_2eproto();

  void InitAsDefaultInstance();
  static GS2C_SlotItem* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Bag : public ::google::protobuf::Message {
 public:
  GS2C_Bag();
  virtual ~GS2C_Bag();

  GS2C_Bag(const GS2C_Bag& from);

  inline GS2C_Bag& operator=(const GS2C_Bag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Bag& default_instance();

  void Swap(GS2C_Bag* other);

  // implements Message ----------------------------------------------

  GS2C_Bag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Bag& from);
  void MergeFrom(const GS2C_Bag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.GS2C_SlotItem items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::pb::GS2C_SlotItem& items(int index) const;
  inline ::pb::GS2C_SlotItem* mutable_items(int index);
  inline ::pb::GS2C_SlotItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_SlotItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_SlotItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:pb.GS2C_Bag)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::GS2C_SlotItem > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Item_2eproto();
  friend void protobuf_AssignDesc_Item_2eproto();
  friend void protobuf_ShutdownFile_Item_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Bag* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_ItemUp : public ::google::protobuf::Message {
 public:
  C2GS_ItemUp();
  virtual ~C2GS_ItemUp();

  C2GS_ItemUp(const C2GS_ItemUp& from);

  inline C2GS_ItemUp& operator=(const C2GS_ItemUp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_ItemUp& default_instance();

  void Swap(C2GS_ItemUp* other);

  // implements Message ----------------------------------------------

  C2GS_ItemUp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_ItemUp& from);
  void MergeFrom(const C2GS_ItemUp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 item_slot_id = 1;
  inline bool has_item_slot_id() const;
  inline void clear_item_slot_id();
  static const int kItemSlotIdFieldNumber = 1;
  inline ::google::protobuf::uint32 item_slot_id() const;
  inline void set_item_slot_id(::google::protobuf::uint32 value);

  // optional .pb.Uint32List ids = 2;
  inline bool has_ids() const;
  inline void clear_ids();
  static const int kIdsFieldNumber = 2;
  inline const ::pb::Uint32List& ids() const;
  inline ::pb::Uint32List* mutable_ids();
  inline ::pb::Uint32List* release_ids();
  inline void set_allocated_ids(::pb::Uint32List* ids);

  // @@protoc_insertion_point(class_scope:pb.C2GS_ItemUp)
 private:
  inline void set_has_item_slot_id();
  inline void clear_has_item_slot_id();
  inline void set_has_ids();
  inline void clear_has_ids();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::Uint32List* ids_;
  ::google::protobuf::uint32 item_slot_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Item_2eproto();
  friend void protobuf_AssignDesc_Item_2eproto();
  friend void protobuf_ShutdownFile_Item_2eproto();

  void InitAsDefaultInstance();
  static C2GS_ItemUp* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_ItemUse : public ::google::protobuf::Message {
 public:
  GS2C_ItemUse();
  virtual ~GS2C_ItemUse();

  GS2C_ItemUse(const GS2C_ItemUse& from);

  inline GS2C_ItemUse& operator=(const GS2C_ItemUse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_ItemUse& default_instance();

  void Swap(GS2C_ItemUse* other);

  // implements Message ----------------------------------------------

  GS2C_ItemUse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_ItemUse& from);
  void MergeFrom(const GS2C_ItemUse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 err_code = 1;
  inline bool has_err_code() const;
  inline void clear_err_code();
  static const int kErrCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 err_code() const;
  inline void set_err_code(::google::protobuf::uint32 value);

  // optional uint32 item_id = 2;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // optional bool is_card = 4;
  inline bool has_is_card() const;
  inline void clear_is_card();
  static const int kIsCardFieldNumber = 4;
  inline bool is_card() const;
  inline void set_is_card(bool value);

  // optional .pb.GS2C_LootList loot_list = 3;
  inline bool has_loot_list() const;
  inline void clear_loot_list();
  static const int kLootListFieldNumber = 3;
  inline const ::pb::GS2C_LootList& loot_list() const;
  inline ::pb::GS2C_LootList* mutable_loot_list();
  inline ::pb::GS2C_LootList* release_loot_list();
  inline void set_allocated_loot_list(::pb::GS2C_LootList* loot_list);

  // @@protoc_insertion_point(class_scope:pb.GS2C_ItemUse)
 private:
  inline void set_has_err_code();
  inline void clear_has_err_code();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_is_card();
  inline void clear_has_is_card();
  inline void set_has_loot_list();
  inline void clear_has_loot_list();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 err_code_;
  ::google::protobuf::uint32 item_id_;
  ::pb::GS2C_LootList* loot_list_;
  bool is_card_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Item_2eproto();
  friend void protobuf_AssignDesc_Item_2eproto();
  friend void protobuf_ShutdownFile_Item_2eproto();

  void InitAsDefaultInstance();
  static GS2C_ItemUse* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_ItemSellRecord : public ::google::protobuf::Message {
 public:
  GS2C_ItemSellRecord();
  virtual ~GS2C_ItemSellRecord();

  GS2C_ItemSellRecord(const GS2C_ItemSellRecord& from);

  inline GS2C_ItemSellRecord& operator=(const GS2C_ItemSellRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_ItemSellRecord& default_instance();

  void Swap(GS2C_ItemSellRecord* other);

  // implements Message ----------------------------------------------

  GS2C_ItemSellRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_ItemSellRecord& from);
  void MergeFrom(const GS2C_ItemSellRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sell_id = 1;
  inline bool has_sell_id() const;
  inline void clear_sell_id();
  static const int kSellIdFieldNumber = 1;
  inline ::google::protobuf::uint32 sell_id() const;
  inline void set_sell_id(::google::protobuf::uint32 value);

  // optional uint32 sell_count = 2;
  inline bool has_sell_count() const;
  inline void clear_sell_count();
  static const int kSellCountFieldNumber = 2;
  inline ::google::protobuf::uint32 sell_count() const;
  inline void set_sell_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_ItemSellRecord)
 private:
  inline void set_has_sell_id();
  inline void clear_has_sell_id();
  inline void set_has_sell_count();
  inline void clear_has_sell_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 sell_id_;
  ::google::protobuf::uint32 sell_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Item_2eproto();
  friend void protobuf_AssignDesc_Item_2eproto();
  friend void protobuf_ShutdownFile_Item_2eproto();

  void InitAsDefaultInstance();
  static GS2C_ItemSellRecord* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_SellRecordList : public ::google::protobuf::Message {
 public:
  GS2C_SellRecordList();
  virtual ~GS2C_SellRecordList();

  GS2C_SellRecordList(const GS2C_SellRecordList& from);

  inline GS2C_SellRecordList& operator=(const GS2C_SellRecordList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_SellRecordList& default_instance();

  void Swap(GS2C_SellRecordList* other);

  // implements Message ----------------------------------------------

  GS2C_SellRecordList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_SellRecordList& from);
  void MergeFrom(const GS2C_SellRecordList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.GS2C_ItemSellRecord sell_records = 1;
  inline int sell_records_size() const;
  inline void clear_sell_records();
  static const int kSellRecordsFieldNumber = 1;
  inline const ::pb::GS2C_ItemSellRecord& sell_records(int index) const;
  inline ::pb::GS2C_ItemSellRecord* mutable_sell_records(int index);
  inline ::pb::GS2C_ItemSellRecord* add_sell_records();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_ItemSellRecord >&
      sell_records() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_ItemSellRecord >*
      mutable_sell_records();

  // @@protoc_insertion_point(class_scope:pb.GS2C_SellRecordList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::GS2C_ItemSellRecord > sell_records_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Item_2eproto();
  friend void protobuf_AssignDesc_Item_2eproto();
  friend void protobuf_ShutdownFile_Item_2eproto();

  void InitAsDefaultInstance();
  static GS2C_SellRecordList* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_SellProgramInfo : public ::google::protobuf::Message {
 public:
  GS2C_SellProgramInfo();
  virtual ~GS2C_SellProgramInfo();

  GS2C_SellProgramInfo(const GS2C_SellProgramInfo& from);

  inline GS2C_SellProgramInfo& operator=(const GS2C_SellProgramInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_SellProgramInfo& default_instance();

  void Swap(GS2C_SellProgramInfo* other);

  // implements Message ----------------------------------------------

  GS2C_SellProgramInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_SellProgramInfo& from);
  void MergeFrom(const GS2C_SellProgramInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 program_id = 1;
  inline bool has_program_id() const;
  inline void clear_program_id();
  static const int kProgramIdFieldNumber = 1;
  inline ::google::protobuf::uint32 program_id() const;
  inline void set_program_id(::google::protobuf::uint32 value);

  // optional int64 record_valid_time = 2;
  inline bool has_record_valid_time() const;
  inline void clear_record_valid_time();
  static const int kRecordValidTimeFieldNumber = 2;
  inline ::google::protobuf::int64 record_valid_time() const;
  inline void set_record_valid_time(::google::protobuf::int64 value);

  // optional .pb.GS2C_SellRecordList records = 3;
  inline bool has_records() const;
  inline void clear_records();
  static const int kRecordsFieldNumber = 3;
  inline const ::pb::GS2C_SellRecordList& records() const;
  inline ::pb::GS2C_SellRecordList* mutable_records();
  inline ::pb::GS2C_SellRecordList* release_records();
  inline void set_allocated_records(::pb::GS2C_SellRecordList* records);

  // @@protoc_insertion_point(class_scope:pb.GS2C_SellProgramInfo)
 private:
  inline void set_has_program_id();
  inline void clear_has_program_id();
  inline void set_has_record_valid_time();
  inline void clear_has_record_valid_time();
  inline void set_has_records();
  inline void clear_has_records();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 record_valid_time_;
  ::pb::GS2C_SellRecordList* records_;
  ::google::protobuf::uint32 program_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Item_2eproto();
  friend void protobuf_AssignDesc_Item_2eproto();
  friend void protobuf_ShutdownFile_Item_2eproto();

  void InitAsDefaultInstance();
  static GS2C_SellProgramInfo* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_SellRandomProgram : public ::google::protobuf::Message {
 public:
  GS2C_SellRandomProgram();
  virtual ~GS2C_SellRandomProgram();

  GS2C_SellRandomProgram(const GS2C_SellRandomProgram& from);

  inline GS2C_SellRandomProgram& operator=(const GS2C_SellRandomProgram& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_SellRandomProgram& default_instance();

  void Swap(GS2C_SellRandomProgram* other);

  // implements Message ----------------------------------------------

  GS2C_SellRandomProgram* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_SellRandomProgram& from);
  void MergeFrom(const GS2C_SellRandomProgram& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 victim_type = 1;
  inline bool has_victim_type() const;
  inline void clear_victim_type();
  static const int kVictimTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 victim_type() const;
  inline void set_victim_type(::google::protobuf::uint32 value);

  // optional uint32 program_id = 2;
  inline bool has_program_id() const;
  inline void clear_program_id();
  static const int kProgramIdFieldNumber = 2;
  inline ::google::protobuf::uint32 program_id() const;
  inline void set_program_id(::google::protobuf::uint32 value);

  // optional int64 auto_refresh_time = 3;
  inline bool has_auto_refresh_time() const;
  inline void clear_auto_refresh_time();
  static const int kAutoRefreshTimeFieldNumber = 3;
  inline ::google::protobuf::int64 auto_refresh_time() const;
  inline void set_auto_refresh_time(::google::protobuf::int64 value);

  // optional uint32 today_manual_refresh_count = 4;
  inline bool has_today_manual_refresh_count() const;
  inline void clear_today_manual_refresh_count();
  static const int kTodayManualRefreshCountFieldNumber = 4;
  inline ::google::protobuf::uint32 today_manual_refresh_count() const;
  inline void set_today_manual_refresh_count(::google::protobuf::uint32 value);

  // optional int64 last_manual_refresh_time = 5;
  inline bool has_last_manual_refresh_time() const;
  inline void clear_last_manual_refresh_time();
  static const int kLastManualRefreshTimeFieldNumber = 5;
  inline ::google::protobuf::int64 last_manual_refresh_time() const;
  inline void set_last_manual_refresh_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_SellRandomProgram)
 private:
  inline void set_has_victim_type();
  inline void clear_has_victim_type();
  inline void set_has_program_id();
  inline void clear_has_program_id();
  inline void set_has_auto_refresh_time();
  inline void clear_has_auto_refresh_time();
  inline void set_has_today_manual_refresh_count();
  inline void clear_has_today_manual_refresh_count();
  inline void set_has_last_manual_refresh_time();
  inline void clear_has_last_manual_refresh_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 victim_type_;
  ::google::protobuf::uint32 program_id_;
  ::google::protobuf::int64 auto_refresh_time_;
  ::google::protobuf::int64 last_manual_refresh_time_;
  ::google::protobuf::uint32 today_manual_refresh_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Item_2eproto();
  friend void protobuf_AssignDesc_Item_2eproto();
  friend void protobuf_ShutdownFile_Item_2eproto();

  void InitAsDefaultInstance();
  static GS2C_SellRandomProgram* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_AllSellData : public ::google::protobuf::Message {
 public:
  GS2C_AllSellData();
  virtual ~GS2C_AllSellData();

  GS2C_AllSellData(const GS2C_AllSellData& from);

  inline GS2C_AllSellData& operator=(const GS2C_AllSellData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_AllSellData& default_instance();

  void Swap(GS2C_AllSellData* other);

  // implements Message ----------------------------------------------

  GS2C_AllSellData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_AllSellData& from);
  void MergeFrom(const GS2C_AllSellData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.GS2C_SellProgramInfo sell_program_infos = 1;
  inline int sell_program_infos_size() const;
  inline void clear_sell_program_infos();
  static const int kSellProgramInfosFieldNumber = 1;
  inline const ::pb::GS2C_SellProgramInfo& sell_program_infos(int index) const;
  inline ::pb::GS2C_SellProgramInfo* mutable_sell_program_infos(int index);
  inline ::pb::GS2C_SellProgramInfo* add_sell_program_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_SellProgramInfo >&
      sell_program_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_SellProgramInfo >*
      mutable_sell_program_infos();

  // repeated .pb.GS2C_SellRandomProgram random_programs = 2;
  inline int random_programs_size() const;
  inline void clear_random_programs();
  static const int kRandomProgramsFieldNumber = 2;
  inline const ::pb::GS2C_SellRandomProgram& random_programs(int index) const;
  inline ::pb::GS2C_SellRandomProgram* mutable_random_programs(int index);
  inline ::pb::GS2C_SellRandomProgram* add_random_programs();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_SellRandomProgram >&
      random_programs() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_SellRandomProgram >*
      mutable_random_programs();

  // repeated .pb.GS2C_ItemSellRecord sell_records = 3;
  inline int sell_records_size() const;
  inline void clear_sell_records();
  static const int kSellRecordsFieldNumber = 3;
  inline const ::pb::GS2C_ItemSellRecord& sell_records(int index) const;
  inline ::pb::GS2C_ItemSellRecord* mutable_sell_records(int index);
  inline ::pb::GS2C_ItemSellRecord* add_sell_records();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_ItemSellRecord >&
      sell_records() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_ItemSellRecord >*
      mutable_sell_records();

  // @@protoc_insertion_point(class_scope:pb.GS2C_AllSellData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::GS2C_SellProgramInfo > sell_program_infos_;
  ::google::protobuf::RepeatedPtrField< ::pb::GS2C_SellRandomProgram > random_programs_;
  ::google::protobuf::RepeatedPtrField< ::pb::GS2C_ItemSellRecord > sell_records_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Item_2eproto();
  friend void protobuf_AssignDesc_Item_2eproto();
  friend void protobuf_ShutdownFile_Item_2eproto();

  void InitAsDefaultInstance();
  static GS2C_AllSellData* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_LootRecord : public ::google::protobuf::Message {
 public:
  GS2C_LootRecord();
  virtual ~GS2C_LootRecord();

  GS2C_LootRecord(const GS2C_LootRecord& from);

  inline GS2C_LootRecord& operator=(const GS2C_LootRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_LootRecord& default_instance();

  void Swap(GS2C_LootRecord* other);

  // implements Message ----------------------------------------------

  GS2C_LootRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_LootRecord& from);
  void MergeFrom(const GS2C_LootRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 loot_type_id = 1;
  inline bool has_loot_type_id() const;
  inline void clear_loot_type_id();
  static const int kLootTypeIdFieldNumber = 1;
  inline ::google::protobuf::uint64 loot_type_id() const;
  inline void set_loot_type_id(::google::protobuf::uint64 value);

  // optional uint32 roll_success_count = 2;
  inline bool has_roll_success_count() const;
  inline void clear_roll_success_count();
  static const int kRollSuccessCountFieldNumber = 2;
  inline ::google::protobuf::uint32 roll_success_count() const;
  inline void set_roll_success_count(::google::protobuf::uint32 value);

  // optional uint32 roll_count = 3;
  inline bool has_roll_count() const;
  inline void clear_roll_count();
  static const int kRollCountFieldNumber = 3;
  inline ::google::protobuf::uint32 roll_count() const;
  inline void set_roll_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_LootRecord)
 private:
  inline void set_has_loot_type_id();
  inline void clear_has_loot_type_id();
  inline void set_has_roll_success_count();
  inline void clear_has_roll_success_count();
  inline void set_has_roll_count();
  inline void clear_has_roll_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 loot_type_id_;
  ::google::protobuf::uint32 roll_success_count_;
  ::google::protobuf::uint32 roll_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Item_2eproto();
  friend void protobuf_AssignDesc_Item_2eproto();
  friend void protobuf_ShutdownFile_Item_2eproto();

  void InitAsDefaultInstance();
  static GS2C_LootRecord* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_AllLootRecord : public ::google::protobuf::Message {
 public:
  GS2C_AllLootRecord();
  virtual ~GS2C_AllLootRecord();

  GS2C_AllLootRecord(const GS2C_AllLootRecord& from);

  inline GS2C_AllLootRecord& operator=(const GS2C_AllLootRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_AllLootRecord& default_instance();

  void Swap(GS2C_AllLootRecord* other);

  // implements Message ----------------------------------------------

  GS2C_AllLootRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_AllLootRecord& from);
  void MergeFrom(const GS2C_AllLootRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.GS2C_LootRecord records = 1;
  inline int records_size() const;
  inline void clear_records();
  static const int kRecordsFieldNumber = 1;
  inline const ::pb::GS2C_LootRecord& records(int index) const;
  inline ::pb::GS2C_LootRecord* mutable_records(int index);
  inline ::pb::GS2C_LootRecord* add_records();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_LootRecord >&
      records() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_LootRecord >*
      mutable_records();

  // @@protoc_insertion_point(class_scope:pb.GS2C_AllLootRecord)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::GS2C_LootRecord > records_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Item_2eproto();
  friend void protobuf_AssignDesc_Item_2eproto();
  friend void protobuf_ShutdownFile_Item_2eproto();

  void InitAsDefaultInstance();
  static GS2C_AllLootRecord* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_LotteryFreeRecord : public ::google::protobuf::Message {
 public:
  GS2C_LotteryFreeRecord();
  virtual ~GS2C_LotteryFreeRecord();

  GS2C_LotteryFreeRecord(const GS2C_LotteryFreeRecord& from);

  inline GS2C_LotteryFreeRecord& operator=(const GS2C_LotteryFreeRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_LotteryFreeRecord& default_instance();

  void Swap(GS2C_LotteryFreeRecord* other);

  // implements Message ----------------------------------------------

  GS2C_LotteryFreeRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_LotteryFreeRecord& from);
  void MergeFrom(const GS2C_LotteryFreeRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 lottery_type = 1;
  inline bool has_lottery_type() const;
  inline void clear_lottery_type();
  static const int kLotteryTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 lottery_type() const;
  inline void set_lottery_type(::google::protobuf::uint32 value);

  // optional uint32 remain_free_count = 2;
  inline bool has_remain_free_count() const;
  inline void clear_remain_free_count();
  static const int kRemainFreeCountFieldNumber = 2;
  inline ::google::protobuf::uint32 remain_free_count() const;
  inline void set_remain_free_count(::google::protobuf::uint32 value);

  // optional int64 next_free_lottery_time = 3;
  inline bool has_next_free_lottery_time() const;
  inline void clear_next_free_lottery_time();
  static const int kNextFreeLotteryTimeFieldNumber = 3;
  inline ::google::protobuf::int64 next_free_lottery_time() const;
  inline void set_next_free_lottery_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_LotteryFreeRecord)
 private:
  inline void set_has_lottery_type();
  inline void clear_has_lottery_type();
  inline void set_has_remain_free_count();
  inline void clear_has_remain_free_count();
  inline void set_has_next_free_lottery_time();
  inline void clear_has_next_free_lottery_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 lottery_type_;
  ::google::protobuf::uint32 remain_free_count_;
  ::google::protobuf::int64 next_free_lottery_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Item_2eproto();
  friend void protobuf_AssignDesc_Item_2eproto();
  friend void protobuf_ShutdownFile_Item_2eproto();

  void InitAsDefaultInstance();
  static GS2C_LotteryFreeRecord* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_AllLotteryInfo : public ::google::protobuf::Message {
 public:
  GS2C_AllLotteryInfo();
  virtual ~GS2C_AllLotteryInfo();

  GS2C_AllLotteryInfo(const GS2C_AllLotteryInfo& from);

  inline GS2C_AllLotteryInfo& operator=(const GS2C_AllLotteryInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_AllLotteryInfo& default_instance();

  void Swap(GS2C_AllLotteryInfo* other);

  // implements Message ----------------------------------------------

  GS2C_AllLotteryInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_AllLotteryInfo& from);
  void MergeFrom(const GS2C_AllLotteryInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.GS2C_LotteryFreeRecord free_records = 1;
  inline int free_records_size() const;
  inline void clear_free_records();
  static const int kFreeRecordsFieldNumber = 1;
  inline const ::pb::GS2C_LotteryFreeRecord& free_records(int index) const;
  inline ::pb::GS2C_LotteryFreeRecord* mutable_free_records(int index);
  inline ::pb::GS2C_LotteryFreeRecord* add_free_records();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_LotteryFreeRecord >&
      free_records() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_LotteryFreeRecord >*
      mutable_free_records();

  // @@protoc_insertion_point(class_scope:pb.GS2C_AllLotteryInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::GS2C_LotteryFreeRecord > free_records_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Item_2eproto();
  friend void protobuf_AssignDesc_Item_2eproto();
  friend void protobuf_ShutdownFile_Item_2eproto();

  void InitAsDefaultInstance();
  static GS2C_AllLotteryInfo* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_LootResult : public ::google::protobuf::Message {
 public:
  GS2C_LootResult();
  virtual ~GS2C_LootResult();

  GS2C_LootResult(const GS2C_LootResult& from);

  inline GS2C_LootResult& operator=(const GS2C_LootResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_LootResult& default_instance();

  void Swap(GS2C_LootResult* other);

  // implements Message ----------------------------------------------

  GS2C_LootResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_LootResult& from);
  void MergeFrom(const GS2C_LootResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 err_code = 1;
  inline bool has_err_code() const;
  inline void clear_err_code();
  static const int kErrCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 err_code() const;
  inline void set_err_code(::google::protobuf::uint32 value);

  // optional .pb.GS2C_LootList loot_list = 2;
  inline bool has_loot_list() const;
  inline void clear_loot_list();
  static const int kLootListFieldNumber = 2;
  inline const ::pb::GS2C_LootList& loot_list() const;
  inline ::pb::GS2C_LootList* mutable_loot_list();
  inline ::pb::GS2C_LootList* release_loot_list();
  inline void set_allocated_loot_list(::pb::GS2C_LootList* loot_list);

  // @@protoc_insertion_point(class_scope:pb.GS2C_LootResult)
 private:
  inline void set_has_err_code();
  inline void clear_has_err_code();
  inline void set_has_loot_list();
  inline void clear_has_loot_list();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::GS2C_LootList* loot_list_;
  ::google::protobuf::uint32 err_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Item_2eproto();
  friend void protobuf_AssignDesc_Item_2eproto();
  friend void protobuf_ShutdownFile_Item_2eproto();

  void InitAsDefaultInstance();
  static GS2C_LootResult* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_LootShopEquipResult : public ::google::protobuf::Message {
 public:
  GS2C_LootShopEquipResult();
  virtual ~GS2C_LootShopEquipResult();

  GS2C_LootShopEquipResult(const GS2C_LootShopEquipResult& from);

  inline GS2C_LootShopEquipResult& operator=(const GS2C_LootShopEquipResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_LootShopEquipResult& default_instance();

  void Swap(GS2C_LootShopEquipResult* other);

  // implements Message ----------------------------------------------

  GS2C_LootShopEquipResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_LootShopEquipResult& from);
  void MergeFrom(const GS2C_LootShopEquipResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 err_code = 1;
  inline bool has_err_code() const;
  inline void clear_err_code();
  static const int kErrCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 err_code() const;
  inline void set_err_code(::google::protobuf::uint32 value);

  // optional .pb.GS2C_Bag loot_list = 2;
  inline bool has_loot_list() const;
  inline void clear_loot_list();
  static const int kLootListFieldNumber = 2;
  inline const ::pb::GS2C_Bag& loot_list() const;
  inline ::pb::GS2C_Bag* mutable_loot_list();
  inline ::pb::GS2C_Bag* release_loot_list();
  inline void set_allocated_loot_list(::pb::GS2C_Bag* loot_list);

  // @@protoc_insertion_point(class_scope:pb.GS2C_LootShopEquipResult)
 private:
  inline void set_has_err_code();
  inline void clear_has_err_code();
  inline void set_has_loot_list();
  inline void clear_has_loot_list();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::GS2C_Bag* loot_list_;
  ::google::protobuf::uint32 err_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Item_2eproto();
  friend void protobuf_AssignDesc_Item_2eproto();
  friend void protobuf_ShutdownFile_Item_2eproto();

  void InitAsDefaultInstance();
  static GS2C_LootShopEquipResult* default_instance_;
};
// ===================================================================


// ===================================================================

// GxDB_ItemInfo

// optional uint32 proto_id = 1;
inline bool GxDB_ItemInfo::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GxDB_ItemInfo::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GxDB_ItemInfo::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GxDB_ItemInfo::clear_proto_id() {
  proto_id_ = 0u;
  clear_has_proto_id();
}
inline ::google::protobuf::uint32 GxDB_ItemInfo::proto_id() const {
  return proto_id_;
}
inline void GxDB_ItemInfo::set_proto_id(::google::protobuf::uint32 value) {
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 count = 2;
inline bool GxDB_ItemInfo::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GxDB_ItemInfo::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GxDB_ItemInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GxDB_ItemInfo::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 GxDB_ItemInfo::count() const {
  return count_;
}
inline void GxDB_ItemInfo::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// optional bool is_new = 3;
inline bool GxDB_ItemInfo::has_is_new() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GxDB_ItemInfo::set_has_is_new() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GxDB_ItemInfo::clear_has_is_new() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GxDB_ItemInfo::clear_is_new() {
  is_new_ = false;
  clear_has_is_new();
}
inline bool GxDB_ItemInfo::is_new() const {
  return is_new_;
}
inline void GxDB_ItemInfo::set_is_new(bool value) {
  set_has_is_new();
  is_new_ = value;
}

// optional bool is_sold = 4;
inline bool GxDB_ItemInfo::has_is_sold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GxDB_ItemInfo::set_has_is_sold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GxDB_ItemInfo::clear_has_is_sold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GxDB_ItemInfo::clear_is_sold() {
  is_sold_ = false;
  clear_has_is_sold();
}
inline bool GxDB_ItemInfo::is_sold() const {
  return is_sold_;
}
inline void GxDB_ItemInfo::set_is_sold(bool value) {
  set_has_is_sold();
  is_sold_ = value;
}

// optional int64 repo_end_time = 5;
inline bool GxDB_ItemInfo::has_repo_end_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GxDB_ItemInfo::set_has_repo_end_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GxDB_ItemInfo::clear_has_repo_end_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GxDB_ItemInfo::clear_repo_end_time() {
  repo_end_time_ = GOOGLE_LONGLONG(0);
  clear_has_repo_end_time();
}
inline ::google::protobuf::int64 GxDB_ItemInfo::repo_end_time() const {
  return repo_end_time_;
}
inline void GxDB_ItemInfo::set_repo_end_time(::google::protobuf::int64 value) {
  set_has_repo_end_time();
  repo_end_time_ = value;
}

// -------------------------------------------------------------------

// GxDB_EquipInfo

// optional uint32 equip_to_charid = 1;
inline bool GxDB_EquipInfo::has_equip_to_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GxDB_EquipInfo::set_has_equip_to_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GxDB_EquipInfo::clear_has_equip_to_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GxDB_EquipInfo::clear_equip_to_charid() {
  equip_to_charid_ = 0u;
  clear_has_equip_to_charid();
}
inline ::google::protobuf::uint32 GxDB_EquipInfo::equip_to_charid() const {
  return equip_to_charid_;
}
inline void GxDB_EquipInfo::set_equip_to_charid(::google::protobuf::uint32 value) {
  set_has_equip_to_charid();
  equip_to_charid_ = value;
}

// repeated .pb.PairValue skill_attrs = 2;
inline int GxDB_EquipInfo::skill_attrs_size() const {
  return skill_attrs_.size();
}
inline void GxDB_EquipInfo::clear_skill_attrs() {
  skill_attrs_.Clear();
}
inline const ::pb::PairValue& GxDB_EquipInfo::skill_attrs(int index) const {
  return skill_attrs_.Get(index);
}
inline ::pb::PairValue* GxDB_EquipInfo::mutable_skill_attrs(int index) {
  return skill_attrs_.Mutable(index);
}
inline ::pb::PairValue* GxDB_EquipInfo::add_skill_attrs() {
  return skill_attrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::PairValue >&
GxDB_EquipInfo::skill_attrs() const {
  return skill_attrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::PairValue >*
GxDB_EquipInfo::mutable_skill_attrs() {
  return &skill_attrs_;
}

// -------------------------------------------------------------------

// GS2C_SlotItem

// optional bool is_deleted = 1;
inline bool GS2C_SlotItem::has_is_deleted() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_SlotItem::set_has_is_deleted() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_SlotItem::clear_has_is_deleted() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_SlotItem::clear_is_deleted() {
  is_deleted_ = false;
  clear_has_is_deleted();
}
inline bool GS2C_SlotItem::is_deleted() const {
  return is_deleted_;
}
inline void GS2C_SlotItem::set_is_deleted(bool value) {
  set_has_is_deleted();
  is_deleted_ = value;
}

// required uint32 slot = 2;
inline bool GS2C_SlotItem::has_slot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_SlotItem::set_has_slot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_SlotItem::clear_has_slot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_SlotItem::clear_slot() {
  slot_ = 0u;
  clear_has_slot();
}
inline ::google::protobuf::uint32 GS2C_SlotItem::slot() const {
  return slot_;
}
inline void GS2C_SlotItem::set_slot(::google::protobuf::uint32 value) {
  set_has_slot();
  slot_ = value;
}

// optional .pb.GxDB_ItemInfo item = 3;
inline bool GS2C_SlotItem::has_item() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_SlotItem::set_has_item() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_SlotItem::clear_has_item() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_SlotItem::clear_item() {
  if (item_ != NULL) item_->::pb::GxDB_ItemInfo::Clear();
  clear_has_item();
}
inline const ::pb::GxDB_ItemInfo& GS2C_SlotItem::item() const {
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::pb::GxDB_ItemInfo* GS2C_SlotItem::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::pb::GxDB_ItemInfo;
  return item_;
}
inline ::pb::GxDB_ItemInfo* GS2C_SlotItem::release_item() {
  clear_has_item();
  ::pb::GxDB_ItemInfo* temp = item_;
  item_ = NULL;
  return temp;
}
inline void GS2C_SlotItem::set_allocated_item(::pb::GxDB_ItemInfo* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
}

// optional .pb.GxDB_EquipInfo equip = 4;
inline bool GS2C_SlotItem::has_equip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_SlotItem::set_has_equip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_SlotItem::clear_has_equip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_SlotItem::clear_equip() {
  if (equip_ != NULL) equip_->::pb::GxDB_EquipInfo::Clear();
  clear_has_equip();
}
inline const ::pb::GxDB_EquipInfo& GS2C_SlotItem::equip() const {
  return equip_ != NULL ? *equip_ : *default_instance_->equip_;
}
inline ::pb::GxDB_EquipInfo* GS2C_SlotItem::mutable_equip() {
  set_has_equip();
  if (equip_ == NULL) equip_ = new ::pb::GxDB_EquipInfo;
  return equip_;
}
inline ::pb::GxDB_EquipInfo* GS2C_SlotItem::release_equip() {
  clear_has_equip();
  ::pb::GxDB_EquipInfo* temp = equip_;
  equip_ = NULL;
  return temp;
}
inline void GS2C_SlotItem::set_allocated_equip(::pb::GxDB_EquipInfo* equip) {
  delete equip_;
  equip_ = equip;
  if (equip) {
    set_has_equip();
  } else {
    clear_has_equip();
  }
}

// -------------------------------------------------------------------

// GS2C_Bag

// repeated .pb.GS2C_SlotItem items = 1;
inline int GS2C_Bag::items_size() const {
  return items_.size();
}
inline void GS2C_Bag::clear_items() {
  items_.Clear();
}
inline const ::pb::GS2C_SlotItem& GS2C_Bag::items(int index) const {
  return items_.Get(index);
}
inline ::pb::GS2C_SlotItem* GS2C_Bag::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::pb::GS2C_SlotItem* GS2C_Bag::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_SlotItem >&
GS2C_Bag::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_SlotItem >*
GS2C_Bag::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// C2GS_ItemUp

// required uint32 item_slot_id = 1;
inline bool C2GS_ItemUp::has_item_slot_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_ItemUp::set_has_item_slot_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_ItemUp::clear_has_item_slot_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_ItemUp::clear_item_slot_id() {
  item_slot_id_ = 0u;
  clear_has_item_slot_id();
}
inline ::google::protobuf::uint32 C2GS_ItemUp::item_slot_id() const {
  return item_slot_id_;
}
inline void C2GS_ItemUp::set_item_slot_id(::google::protobuf::uint32 value) {
  set_has_item_slot_id();
  item_slot_id_ = value;
}

// optional .pb.Uint32List ids = 2;
inline bool C2GS_ItemUp::has_ids() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_ItemUp::set_has_ids() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_ItemUp::clear_has_ids() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_ItemUp::clear_ids() {
  if (ids_ != NULL) ids_->::pb::Uint32List::Clear();
  clear_has_ids();
}
inline const ::pb::Uint32List& C2GS_ItemUp::ids() const {
  return ids_ != NULL ? *ids_ : *default_instance_->ids_;
}
inline ::pb::Uint32List* C2GS_ItemUp::mutable_ids() {
  set_has_ids();
  if (ids_ == NULL) ids_ = new ::pb::Uint32List;
  return ids_;
}
inline ::pb::Uint32List* C2GS_ItemUp::release_ids() {
  clear_has_ids();
  ::pb::Uint32List* temp = ids_;
  ids_ = NULL;
  return temp;
}
inline void C2GS_ItemUp::set_allocated_ids(::pb::Uint32List* ids) {
  delete ids_;
  ids_ = ids;
  if (ids) {
    set_has_ids();
  } else {
    clear_has_ids();
  }
}

// -------------------------------------------------------------------

// GS2C_ItemUse

// optional uint32 err_code = 1;
inline bool GS2C_ItemUse::has_err_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_ItemUse::set_has_err_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_ItemUse::clear_has_err_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_ItemUse::clear_err_code() {
  err_code_ = 0u;
  clear_has_err_code();
}
inline ::google::protobuf::uint32 GS2C_ItemUse::err_code() const {
  return err_code_;
}
inline void GS2C_ItemUse::set_err_code(::google::protobuf::uint32 value) {
  set_has_err_code();
  err_code_ = value;
}

// optional uint32 item_id = 2;
inline bool GS2C_ItemUse::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_ItemUse::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_ItemUse::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_ItemUse::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 GS2C_ItemUse::item_id() const {
  return item_id_;
}
inline void GS2C_ItemUse::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional bool is_card = 4;
inline bool GS2C_ItemUse::has_is_card() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_ItemUse::set_has_is_card() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_ItemUse::clear_has_is_card() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_ItemUse::clear_is_card() {
  is_card_ = false;
  clear_has_is_card();
}
inline bool GS2C_ItemUse::is_card() const {
  return is_card_;
}
inline void GS2C_ItemUse::set_is_card(bool value) {
  set_has_is_card();
  is_card_ = value;
}

// optional .pb.GS2C_LootList loot_list = 3;
inline bool GS2C_ItemUse::has_loot_list() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_ItemUse::set_has_loot_list() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_ItemUse::clear_has_loot_list() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_ItemUse::clear_loot_list() {
  if (loot_list_ != NULL) loot_list_->::pb::GS2C_LootList::Clear();
  clear_has_loot_list();
}
inline const ::pb::GS2C_LootList& GS2C_ItemUse::loot_list() const {
  return loot_list_ != NULL ? *loot_list_ : *default_instance_->loot_list_;
}
inline ::pb::GS2C_LootList* GS2C_ItemUse::mutable_loot_list() {
  set_has_loot_list();
  if (loot_list_ == NULL) loot_list_ = new ::pb::GS2C_LootList;
  return loot_list_;
}
inline ::pb::GS2C_LootList* GS2C_ItemUse::release_loot_list() {
  clear_has_loot_list();
  ::pb::GS2C_LootList* temp = loot_list_;
  loot_list_ = NULL;
  return temp;
}
inline void GS2C_ItemUse::set_allocated_loot_list(::pb::GS2C_LootList* loot_list) {
  delete loot_list_;
  loot_list_ = loot_list;
  if (loot_list) {
    set_has_loot_list();
  } else {
    clear_has_loot_list();
  }
}

// -------------------------------------------------------------------

// GS2C_ItemSellRecord

// optional uint32 sell_id = 1;
inline bool GS2C_ItemSellRecord::has_sell_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_ItemSellRecord::set_has_sell_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_ItemSellRecord::clear_has_sell_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_ItemSellRecord::clear_sell_id() {
  sell_id_ = 0u;
  clear_has_sell_id();
}
inline ::google::protobuf::uint32 GS2C_ItemSellRecord::sell_id() const {
  return sell_id_;
}
inline void GS2C_ItemSellRecord::set_sell_id(::google::protobuf::uint32 value) {
  set_has_sell_id();
  sell_id_ = value;
}

// optional uint32 sell_count = 2;
inline bool GS2C_ItemSellRecord::has_sell_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_ItemSellRecord::set_has_sell_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_ItemSellRecord::clear_has_sell_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_ItemSellRecord::clear_sell_count() {
  sell_count_ = 0u;
  clear_has_sell_count();
}
inline ::google::protobuf::uint32 GS2C_ItemSellRecord::sell_count() const {
  return sell_count_;
}
inline void GS2C_ItemSellRecord::set_sell_count(::google::protobuf::uint32 value) {
  set_has_sell_count();
  sell_count_ = value;
}

// -------------------------------------------------------------------

// GS2C_SellRecordList

// repeated .pb.GS2C_ItemSellRecord sell_records = 1;
inline int GS2C_SellRecordList::sell_records_size() const {
  return sell_records_.size();
}
inline void GS2C_SellRecordList::clear_sell_records() {
  sell_records_.Clear();
}
inline const ::pb::GS2C_ItemSellRecord& GS2C_SellRecordList::sell_records(int index) const {
  return sell_records_.Get(index);
}
inline ::pb::GS2C_ItemSellRecord* GS2C_SellRecordList::mutable_sell_records(int index) {
  return sell_records_.Mutable(index);
}
inline ::pb::GS2C_ItemSellRecord* GS2C_SellRecordList::add_sell_records() {
  return sell_records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_ItemSellRecord >&
GS2C_SellRecordList::sell_records() const {
  return sell_records_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_ItemSellRecord >*
GS2C_SellRecordList::mutable_sell_records() {
  return &sell_records_;
}

// -------------------------------------------------------------------

// GS2C_SellProgramInfo

// optional uint32 program_id = 1;
inline bool GS2C_SellProgramInfo::has_program_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_SellProgramInfo::set_has_program_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_SellProgramInfo::clear_has_program_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_SellProgramInfo::clear_program_id() {
  program_id_ = 0u;
  clear_has_program_id();
}
inline ::google::protobuf::uint32 GS2C_SellProgramInfo::program_id() const {
  return program_id_;
}
inline void GS2C_SellProgramInfo::set_program_id(::google::protobuf::uint32 value) {
  set_has_program_id();
  program_id_ = value;
}

// optional int64 record_valid_time = 2;
inline bool GS2C_SellProgramInfo::has_record_valid_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_SellProgramInfo::set_has_record_valid_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_SellProgramInfo::clear_has_record_valid_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_SellProgramInfo::clear_record_valid_time() {
  record_valid_time_ = GOOGLE_LONGLONG(0);
  clear_has_record_valid_time();
}
inline ::google::protobuf::int64 GS2C_SellProgramInfo::record_valid_time() const {
  return record_valid_time_;
}
inline void GS2C_SellProgramInfo::set_record_valid_time(::google::protobuf::int64 value) {
  set_has_record_valid_time();
  record_valid_time_ = value;
}

// optional .pb.GS2C_SellRecordList records = 3;
inline bool GS2C_SellProgramInfo::has_records() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_SellProgramInfo::set_has_records() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_SellProgramInfo::clear_has_records() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_SellProgramInfo::clear_records() {
  if (records_ != NULL) records_->::pb::GS2C_SellRecordList::Clear();
  clear_has_records();
}
inline const ::pb::GS2C_SellRecordList& GS2C_SellProgramInfo::records() const {
  return records_ != NULL ? *records_ : *default_instance_->records_;
}
inline ::pb::GS2C_SellRecordList* GS2C_SellProgramInfo::mutable_records() {
  set_has_records();
  if (records_ == NULL) records_ = new ::pb::GS2C_SellRecordList;
  return records_;
}
inline ::pb::GS2C_SellRecordList* GS2C_SellProgramInfo::release_records() {
  clear_has_records();
  ::pb::GS2C_SellRecordList* temp = records_;
  records_ = NULL;
  return temp;
}
inline void GS2C_SellProgramInfo::set_allocated_records(::pb::GS2C_SellRecordList* records) {
  delete records_;
  records_ = records;
  if (records) {
    set_has_records();
  } else {
    clear_has_records();
  }
}

// -------------------------------------------------------------------

// GS2C_SellRandomProgram

// optional uint32 victim_type = 1;
inline bool GS2C_SellRandomProgram::has_victim_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_SellRandomProgram::set_has_victim_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_SellRandomProgram::clear_has_victim_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_SellRandomProgram::clear_victim_type() {
  victim_type_ = 0u;
  clear_has_victim_type();
}
inline ::google::protobuf::uint32 GS2C_SellRandomProgram::victim_type() const {
  return victim_type_;
}
inline void GS2C_SellRandomProgram::set_victim_type(::google::protobuf::uint32 value) {
  set_has_victim_type();
  victim_type_ = value;
}

// optional uint32 program_id = 2;
inline bool GS2C_SellRandomProgram::has_program_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_SellRandomProgram::set_has_program_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_SellRandomProgram::clear_has_program_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_SellRandomProgram::clear_program_id() {
  program_id_ = 0u;
  clear_has_program_id();
}
inline ::google::protobuf::uint32 GS2C_SellRandomProgram::program_id() const {
  return program_id_;
}
inline void GS2C_SellRandomProgram::set_program_id(::google::protobuf::uint32 value) {
  set_has_program_id();
  program_id_ = value;
}

// optional int64 auto_refresh_time = 3;
inline bool GS2C_SellRandomProgram::has_auto_refresh_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_SellRandomProgram::set_has_auto_refresh_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_SellRandomProgram::clear_has_auto_refresh_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_SellRandomProgram::clear_auto_refresh_time() {
  auto_refresh_time_ = GOOGLE_LONGLONG(0);
  clear_has_auto_refresh_time();
}
inline ::google::protobuf::int64 GS2C_SellRandomProgram::auto_refresh_time() const {
  return auto_refresh_time_;
}
inline void GS2C_SellRandomProgram::set_auto_refresh_time(::google::protobuf::int64 value) {
  set_has_auto_refresh_time();
  auto_refresh_time_ = value;
}

// optional uint32 today_manual_refresh_count = 4;
inline bool GS2C_SellRandomProgram::has_today_manual_refresh_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_SellRandomProgram::set_has_today_manual_refresh_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_SellRandomProgram::clear_has_today_manual_refresh_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_SellRandomProgram::clear_today_manual_refresh_count() {
  today_manual_refresh_count_ = 0u;
  clear_has_today_manual_refresh_count();
}
inline ::google::protobuf::uint32 GS2C_SellRandomProgram::today_manual_refresh_count() const {
  return today_manual_refresh_count_;
}
inline void GS2C_SellRandomProgram::set_today_manual_refresh_count(::google::protobuf::uint32 value) {
  set_has_today_manual_refresh_count();
  today_manual_refresh_count_ = value;
}

// optional int64 last_manual_refresh_time = 5;
inline bool GS2C_SellRandomProgram::has_last_manual_refresh_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GS2C_SellRandomProgram::set_has_last_manual_refresh_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GS2C_SellRandomProgram::clear_has_last_manual_refresh_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GS2C_SellRandomProgram::clear_last_manual_refresh_time() {
  last_manual_refresh_time_ = GOOGLE_LONGLONG(0);
  clear_has_last_manual_refresh_time();
}
inline ::google::protobuf::int64 GS2C_SellRandomProgram::last_manual_refresh_time() const {
  return last_manual_refresh_time_;
}
inline void GS2C_SellRandomProgram::set_last_manual_refresh_time(::google::protobuf::int64 value) {
  set_has_last_manual_refresh_time();
  last_manual_refresh_time_ = value;
}

// -------------------------------------------------------------------

// GS2C_AllSellData

// repeated .pb.GS2C_SellProgramInfo sell_program_infos = 1;
inline int GS2C_AllSellData::sell_program_infos_size() const {
  return sell_program_infos_.size();
}
inline void GS2C_AllSellData::clear_sell_program_infos() {
  sell_program_infos_.Clear();
}
inline const ::pb::GS2C_SellProgramInfo& GS2C_AllSellData::sell_program_infos(int index) const {
  return sell_program_infos_.Get(index);
}
inline ::pb::GS2C_SellProgramInfo* GS2C_AllSellData::mutable_sell_program_infos(int index) {
  return sell_program_infos_.Mutable(index);
}
inline ::pb::GS2C_SellProgramInfo* GS2C_AllSellData::add_sell_program_infos() {
  return sell_program_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_SellProgramInfo >&
GS2C_AllSellData::sell_program_infos() const {
  return sell_program_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_SellProgramInfo >*
GS2C_AllSellData::mutable_sell_program_infos() {
  return &sell_program_infos_;
}

// repeated .pb.GS2C_SellRandomProgram random_programs = 2;
inline int GS2C_AllSellData::random_programs_size() const {
  return random_programs_.size();
}
inline void GS2C_AllSellData::clear_random_programs() {
  random_programs_.Clear();
}
inline const ::pb::GS2C_SellRandomProgram& GS2C_AllSellData::random_programs(int index) const {
  return random_programs_.Get(index);
}
inline ::pb::GS2C_SellRandomProgram* GS2C_AllSellData::mutable_random_programs(int index) {
  return random_programs_.Mutable(index);
}
inline ::pb::GS2C_SellRandomProgram* GS2C_AllSellData::add_random_programs() {
  return random_programs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_SellRandomProgram >&
GS2C_AllSellData::random_programs() const {
  return random_programs_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_SellRandomProgram >*
GS2C_AllSellData::mutable_random_programs() {
  return &random_programs_;
}

// repeated .pb.GS2C_ItemSellRecord sell_records = 3;
inline int GS2C_AllSellData::sell_records_size() const {
  return sell_records_.size();
}
inline void GS2C_AllSellData::clear_sell_records() {
  sell_records_.Clear();
}
inline const ::pb::GS2C_ItemSellRecord& GS2C_AllSellData::sell_records(int index) const {
  return sell_records_.Get(index);
}
inline ::pb::GS2C_ItemSellRecord* GS2C_AllSellData::mutable_sell_records(int index) {
  return sell_records_.Mutable(index);
}
inline ::pb::GS2C_ItemSellRecord* GS2C_AllSellData::add_sell_records() {
  return sell_records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_ItemSellRecord >&
GS2C_AllSellData::sell_records() const {
  return sell_records_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_ItemSellRecord >*
GS2C_AllSellData::mutable_sell_records() {
  return &sell_records_;
}

// -------------------------------------------------------------------

// GS2C_LootRecord

// optional uint64 loot_type_id = 1;
inline bool GS2C_LootRecord::has_loot_type_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_LootRecord::set_has_loot_type_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_LootRecord::clear_has_loot_type_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_LootRecord::clear_loot_type_id() {
  loot_type_id_ = GOOGLE_ULONGLONG(0);
  clear_has_loot_type_id();
}
inline ::google::protobuf::uint64 GS2C_LootRecord::loot_type_id() const {
  return loot_type_id_;
}
inline void GS2C_LootRecord::set_loot_type_id(::google::protobuf::uint64 value) {
  set_has_loot_type_id();
  loot_type_id_ = value;
}

// optional uint32 roll_success_count = 2;
inline bool GS2C_LootRecord::has_roll_success_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_LootRecord::set_has_roll_success_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_LootRecord::clear_has_roll_success_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_LootRecord::clear_roll_success_count() {
  roll_success_count_ = 0u;
  clear_has_roll_success_count();
}
inline ::google::protobuf::uint32 GS2C_LootRecord::roll_success_count() const {
  return roll_success_count_;
}
inline void GS2C_LootRecord::set_roll_success_count(::google::protobuf::uint32 value) {
  set_has_roll_success_count();
  roll_success_count_ = value;
}

// optional uint32 roll_count = 3;
inline bool GS2C_LootRecord::has_roll_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_LootRecord::set_has_roll_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_LootRecord::clear_has_roll_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_LootRecord::clear_roll_count() {
  roll_count_ = 0u;
  clear_has_roll_count();
}
inline ::google::protobuf::uint32 GS2C_LootRecord::roll_count() const {
  return roll_count_;
}
inline void GS2C_LootRecord::set_roll_count(::google::protobuf::uint32 value) {
  set_has_roll_count();
  roll_count_ = value;
}

// -------------------------------------------------------------------

// GS2C_AllLootRecord

// repeated .pb.GS2C_LootRecord records = 1;
inline int GS2C_AllLootRecord::records_size() const {
  return records_.size();
}
inline void GS2C_AllLootRecord::clear_records() {
  records_.Clear();
}
inline const ::pb::GS2C_LootRecord& GS2C_AllLootRecord::records(int index) const {
  return records_.Get(index);
}
inline ::pb::GS2C_LootRecord* GS2C_AllLootRecord::mutable_records(int index) {
  return records_.Mutable(index);
}
inline ::pb::GS2C_LootRecord* GS2C_AllLootRecord::add_records() {
  return records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_LootRecord >&
GS2C_AllLootRecord::records() const {
  return records_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_LootRecord >*
GS2C_AllLootRecord::mutable_records() {
  return &records_;
}

// -------------------------------------------------------------------

// GS2C_LotteryFreeRecord

// optional uint32 lottery_type = 1;
inline bool GS2C_LotteryFreeRecord::has_lottery_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_LotteryFreeRecord::set_has_lottery_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_LotteryFreeRecord::clear_has_lottery_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_LotteryFreeRecord::clear_lottery_type() {
  lottery_type_ = 0u;
  clear_has_lottery_type();
}
inline ::google::protobuf::uint32 GS2C_LotteryFreeRecord::lottery_type() const {
  return lottery_type_;
}
inline void GS2C_LotteryFreeRecord::set_lottery_type(::google::protobuf::uint32 value) {
  set_has_lottery_type();
  lottery_type_ = value;
}

// optional uint32 remain_free_count = 2;
inline bool GS2C_LotteryFreeRecord::has_remain_free_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_LotteryFreeRecord::set_has_remain_free_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_LotteryFreeRecord::clear_has_remain_free_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_LotteryFreeRecord::clear_remain_free_count() {
  remain_free_count_ = 0u;
  clear_has_remain_free_count();
}
inline ::google::protobuf::uint32 GS2C_LotteryFreeRecord::remain_free_count() const {
  return remain_free_count_;
}
inline void GS2C_LotteryFreeRecord::set_remain_free_count(::google::protobuf::uint32 value) {
  set_has_remain_free_count();
  remain_free_count_ = value;
}

// optional int64 next_free_lottery_time = 3;
inline bool GS2C_LotteryFreeRecord::has_next_free_lottery_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_LotteryFreeRecord::set_has_next_free_lottery_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_LotteryFreeRecord::clear_has_next_free_lottery_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_LotteryFreeRecord::clear_next_free_lottery_time() {
  next_free_lottery_time_ = GOOGLE_LONGLONG(0);
  clear_has_next_free_lottery_time();
}
inline ::google::protobuf::int64 GS2C_LotteryFreeRecord::next_free_lottery_time() const {
  return next_free_lottery_time_;
}
inline void GS2C_LotteryFreeRecord::set_next_free_lottery_time(::google::protobuf::int64 value) {
  set_has_next_free_lottery_time();
  next_free_lottery_time_ = value;
}

// -------------------------------------------------------------------

// GS2C_AllLotteryInfo

// repeated .pb.GS2C_LotteryFreeRecord free_records = 1;
inline int GS2C_AllLotteryInfo::free_records_size() const {
  return free_records_.size();
}
inline void GS2C_AllLotteryInfo::clear_free_records() {
  free_records_.Clear();
}
inline const ::pb::GS2C_LotteryFreeRecord& GS2C_AllLotteryInfo::free_records(int index) const {
  return free_records_.Get(index);
}
inline ::pb::GS2C_LotteryFreeRecord* GS2C_AllLotteryInfo::mutable_free_records(int index) {
  return free_records_.Mutable(index);
}
inline ::pb::GS2C_LotteryFreeRecord* GS2C_AllLotteryInfo::add_free_records() {
  return free_records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_LotteryFreeRecord >&
GS2C_AllLotteryInfo::free_records() const {
  return free_records_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_LotteryFreeRecord >*
GS2C_AllLotteryInfo::mutable_free_records() {
  return &free_records_;
}

// -------------------------------------------------------------------

// GS2C_LootResult

// optional uint32 err_code = 1;
inline bool GS2C_LootResult::has_err_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_LootResult::set_has_err_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_LootResult::clear_has_err_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_LootResult::clear_err_code() {
  err_code_ = 0u;
  clear_has_err_code();
}
inline ::google::protobuf::uint32 GS2C_LootResult::err_code() const {
  return err_code_;
}
inline void GS2C_LootResult::set_err_code(::google::protobuf::uint32 value) {
  set_has_err_code();
  err_code_ = value;
}

// optional .pb.GS2C_LootList loot_list = 2;
inline bool GS2C_LootResult::has_loot_list() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_LootResult::set_has_loot_list() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_LootResult::clear_has_loot_list() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_LootResult::clear_loot_list() {
  if (loot_list_ != NULL) loot_list_->::pb::GS2C_LootList::Clear();
  clear_has_loot_list();
}
inline const ::pb::GS2C_LootList& GS2C_LootResult::loot_list() const {
  return loot_list_ != NULL ? *loot_list_ : *default_instance_->loot_list_;
}
inline ::pb::GS2C_LootList* GS2C_LootResult::mutable_loot_list() {
  set_has_loot_list();
  if (loot_list_ == NULL) loot_list_ = new ::pb::GS2C_LootList;
  return loot_list_;
}
inline ::pb::GS2C_LootList* GS2C_LootResult::release_loot_list() {
  clear_has_loot_list();
  ::pb::GS2C_LootList* temp = loot_list_;
  loot_list_ = NULL;
  return temp;
}
inline void GS2C_LootResult::set_allocated_loot_list(::pb::GS2C_LootList* loot_list) {
  delete loot_list_;
  loot_list_ = loot_list;
  if (loot_list) {
    set_has_loot_list();
  } else {
    clear_has_loot_list();
  }
}

// -------------------------------------------------------------------

// GS2C_LootShopEquipResult

// optional uint32 err_code = 1;
inline bool GS2C_LootShopEquipResult::has_err_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_LootShopEquipResult::set_has_err_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_LootShopEquipResult::clear_has_err_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_LootShopEquipResult::clear_err_code() {
  err_code_ = 0u;
  clear_has_err_code();
}
inline ::google::protobuf::uint32 GS2C_LootShopEquipResult::err_code() const {
  return err_code_;
}
inline void GS2C_LootShopEquipResult::set_err_code(::google::protobuf::uint32 value) {
  set_has_err_code();
  err_code_ = value;
}

// optional .pb.GS2C_Bag loot_list = 2;
inline bool GS2C_LootShopEquipResult::has_loot_list() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_LootShopEquipResult::set_has_loot_list() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_LootShopEquipResult::clear_has_loot_list() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_LootShopEquipResult::clear_loot_list() {
  if (loot_list_ != NULL) loot_list_->::pb::GS2C_Bag::Clear();
  clear_has_loot_list();
}
inline const ::pb::GS2C_Bag& GS2C_LootShopEquipResult::loot_list() const {
  return loot_list_ != NULL ? *loot_list_ : *default_instance_->loot_list_;
}
inline ::pb::GS2C_Bag* GS2C_LootShopEquipResult::mutable_loot_list() {
  set_has_loot_list();
  if (loot_list_ == NULL) loot_list_ = new ::pb::GS2C_Bag;
  return loot_list_;
}
inline ::pb::GS2C_Bag* GS2C_LootShopEquipResult::release_loot_list() {
  clear_has_loot_list();
  ::pb::GS2C_Bag* temp = loot_list_;
  loot_list_ = NULL;
  return temp;
}
inline void GS2C_LootShopEquipResult::set_allocated_loot_list(::pb::GS2C_Bag* loot_list) {
  delete loot_list_;
  loot_list_ = loot_list;
  if (loot_list) {
    set_has_loot_list();
  } else {
    clear_has_loot_list();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Item_2eproto__INCLUDED
