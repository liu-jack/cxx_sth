// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Country.proto

#ifndef PROTOBUF_Country_2eproto__INCLUDED
#define PROTOBUF_Country_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommomDef.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Country_2eproto();
void protobuf_AssignDesc_Country_2eproto();
void protobuf_ShutdownFile_Country_2eproto();

class CountyLevelUpTaskPlayer;
class MonsterCity;
class MonsterCityLst;
class CountryCrossWarInfo;
class CrossWarInfo;
class CountyInfo;
class Country_Levle_Up_Task_Rank;
class C2GS_Country_Info;
class GS2C_Country_Info;
class Struct_Country_Task_Base;
class Struct_Country_Task_City;
class GS2C_Country_Task_Info;
class GS2C_Country_Task_Player;
class C2GS_Country_Task_Reward;
class GS2C_Country_Task_Reward_Ret;
class Country_Task_Result;
class GS2C_Country_Task_End;
class Struct_Country_Pk_Player_mirror;
class Struct_Country_Pk_History;
class Struct_Country_Pk_Info;
class C2GS_Country_Task_Pk_Challenge;
class GS2C_Monster_City_All_Info;
class C2GS_Monster_City_Donate;
class GS2C_Monster_City_Donate;
class C2GS_Monster_City_Start_Invade;
class GS2C_Monster_City_Invade_Rsp;
class GS2C_Country_Task_Insvest;
class GS2C_Country_Invest_Player;
class C2GS_Country_Invest_Donate;
class GS2C_Country_Invest_Donate_Ret;
class C2GS_Country_Invest_Take_Reward;
class GS2C_Country_Invest_Take_Reward;
class GS2C_Country_Invest_Clear_CD_Ret;
class GS2C_Country_Task_Occupy;
class GS2C_Country_Occupy_Player;
class C2GS_Country_Occupy_Take_Reward;
class GS2C_Country_Occupy_Take_Reward;
class OneTaskInfo;
class GS2C_PersonalTask_Info;
class C2GS_PersonalTask_One;
class C2GS_PersonalTask_Take_Award;
class GS2C_PersonalTask_Take_Award;
class GS2C_Notice_Country_NPC_NextTime;
class GS2C_Country_Task_DefenceBorderland;
class GS2C_Country_DefenceBorderland_Player;
class C2GS_Country_DefenceBorderland_Take_Reward;
class GS2C_Country_DefenceBorderland_Take_Reward;

enum CROSS_STATE {
  State_Null = 0,
  State_Collect_Info = 1,
  State_Devide = 2,
  State_Prepare = 3,
  State_Preview = 4,
  State_Start = 5,
  State_Award = 6
};
bool CROSS_STATE_IsValid(int value);
const CROSS_STATE CROSS_STATE_MIN = State_Null;
const CROSS_STATE CROSS_STATE_MAX = State_Award;
const int CROSS_STATE_ARRAYSIZE = CROSS_STATE_MAX + 1;

const ::google::protobuf::EnumDescriptor* CROSS_STATE_descriptor();
inline const ::std::string& CROSS_STATE_Name(CROSS_STATE value) {
  return ::google::protobuf::internal::NameOfEnum(
    CROSS_STATE_descriptor(), value);
}
inline bool CROSS_STATE_Parse(
    const ::std::string& name, CROSS_STATE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CROSS_STATE>(
    CROSS_STATE_descriptor(), name, value);
}
enum E_MONSTER_CITY {
  M_OPERATE_SUCCESS = 1,
  M_OPERATE_NO_TODAY_INVADE_TIME = 2,
  M_OPERATE_GOLD_NOT_ENOUGH = 3,
  M_OPERATE_ITEM_NOT_ENOUGH = 4,
  M_OPERATE_NO_INVADE_TIME = 5,
  M_OPERATE_OFFICE_ID_NOT_MATCH = 6
};
bool E_MONSTER_CITY_IsValid(int value);
const E_MONSTER_CITY E_MONSTER_CITY_MIN = M_OPERATE_SUCCESS;
const E_MONSTER_CITY E_MONSTER_CITY_MAX = M_OPERATE_OFFICE_ID_NOT_MATCH;
const int E_MONSTER_CITY_ARRAYSIZE = E_MONSTER_CITY_MAX + 1;

const ::google::protobuf::EnumDescriptor* E_MONSTER_CITY_descriptor();
inline const ::std::string& E_MONSTER_CITY_Name(E_MONSTER_CITY value) {
  return ::google::protobuf::internal::NameOfEnum(
    E_MONSTER_CITY_descriptor(), value);
}
inline bool E_MONSTER_CITY_Parse(
    const ::std::string& name, E_MONSTER_CITY* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E_MONSTER_CITY>(
    E_MONSTER_CITY_descriptor(), name, value);
}
enum Country_Task_Err {
  TaskErr = 1,
  investUpperErr = 2,
  investStageNotMatch = 3,
  investInCD = 4,
  investNoMoney = 5,
  rewardHasTaken = 6,
  stageNotInvested = 7,
  OccupyStageNotMatch = 8,
  stageNotOccupied = 9,
  NoRecord = 10,
  StageNotMatch = 11,
  TaskNotFind = 12,
  TaskIsNotFinished = 13
};
bool Country_Task_Err_IsValid(int value);
const Country_Task_Err Country_Task_Err_MIN = TaskErr;
const Country_Task_Err Country_Task_Err_MAX = TaskIsNotFinished;
const int Country_Task_Err_ARRAYSIZE = Country_Task_Err_MAX + 1;

const ::google::protobuf::EnumDescriptor* Country_Task_Err_descriptor();
inline const ::std::string& Country_Task_Err_Name(Country_Task_Err value) {
  return ::google::protobuf::internal::NameOfEnum(
    Country_Task_Err_descriptor(), value);
}
inline bool Country_Task_Err_Parse(
    const ::std::string& name, Country_Task_Err* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Country_Task_Err>(
    Country_Task_Err_descriptor(), name, value);
}
// ===================================================================

class CountyLevelUpTaskPlayer : public ::google::protobuf::Message {
 public:
  CountyLevelUpTaskPlayer();
  virtual ~CountyLevelUpTaskPlayer();

  CountyLevelUpTaskPlayer(const CountyLevelUpTaskPlayer& from);

  inline CountyLevelUpTaskPlayer& operator=(const CountyLevelUpTaskPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountyLevelUpTaskPlayer& default_instance();

  void Swap(CountyLevelUpTaskPlayer* other);

  // implements Message ----------------------------------------------

  CountyLevelUpTaskPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountyLevelUpTaskPlayer& from);
  void MergeFrom(const CountyLevelUpTaskPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 playerid() const;
  inline void set_playerid(::google::protobuf::uint64 value);

  // required uint32 country = 2;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 2;
  inline ::google::protobuf::uint32 country() const;
  inline void set_country(::google::protobuf::uint32 value);

  // required uint32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // required uint32 statistic_kill = 4;
  inline bool has_statistic_kill() const;
  inline void clear_statistic_kill();
  static const int kStatisticKillFieldNumber = 4;
  inline ::google::protobuf::uint32 statistic_kill() const;
  inline void set_statistic_kill(::google::protobuf::uint32 value);

  // required bool is_take_reward = 5;
  inline bool has_is_take_reward() const;
  inline void clear_is_take_reward();
  static const int kIsTakeRewardFieldNumber = 5;
  inline bool is_take_reward() const;
  inline void set_is_take_reward(bool value);

  // @@protoc_insertion_point(class_scope:pb.CountyLevelUpTaskPlayer)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_statistic_kill();
  inline void clear_has_statistic_kill();
  inline void set_has_is_take_reward();
  inline void clear_has_is_take_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint32 country_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 statistic_kill_;
  bool is_take_reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static CountyLevelUpTaskPlayer* default_instance_;
};
// -------------------------------------------------------------------

class MonsterCity : public ::google::protobuf::Message {
 public:
  MonsterCity();
  virtual ~MonsterCity();

  MonsterCity(const MonsterCity& from);

  inline MonsterCity& operator=(const MonsterCity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MonsterCity& default_instance();

  void Swap(MonsterCity* other);

  // implements Message ----------------------------------------------

  MonsterCity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonsterCity& from);
  void MergeFrom(const MonsterCity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 donation_money = 1;
  inline bool has_donation_money() const;
  inline void clear_donation_money();
  static const int kDonationMoneyFieldNumber = 1;
  inline ::google::protobuf::uint32 donation_money() const;
  inline void set_donation_money(::google::protobuf::uint32 value);

  // required uint32 friend_val = 2;
  inline bool has_friend_val() const;
  inline void clear_friend_val();
  static const int kFriendValFieldNumber = 2;
  inline ::google::protobuf::uint32 friend_val() const;
  inline void set_friend_val(::google::protobuf::uint32 value);

  // required uint32 moster_level = 3;
  inline bool has_moster_level() const;
  inline void clear_moster_level();
  static const int kMosterLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 moster_level() const;
  inline void set_moster_level(::google::protobuf::uint32 value);

  // required uint32 invade_cnt = 4;
  inline bool has_invade_cnt() const;
  inline void clear_invade_cnt();
  static const int kInvadeCntFieldNumber = 4;
  inline ::google::protobuf::uint32 invade_cnt() const;
  inline void set_invade_cnt(::google::protobuf::uint32 value);

  // required uint32 today_invade_count = 5;
  inline bool has_today_invade_count() const;
  inline void clear_today_invade_count();
  static const int kTodayInvadeCountFieldNumber = 5;
  inline ::google::protobuf::uint32 today_invade_count() const;
  inline void set_today_invade_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.MonsterCity)
 private:
  inline void set_has_donation_money();
  inline void clear_has_donation_money();
  inline void set_has_friend_val();
  inline void clear_has_friend_val();
  inline void set_has_moster_level();
  inline void clear_has_moster_level();
  inline void set_has_invade_cnt();
  inline void clear_has_invade_cnt();
  inline void set_has_today_invade_count();
  inline void clear_has_today_invade_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 donation_money_;
  ::google::protobuf::uint32 friend_val_;
  ::google::protobuf::uint32 moster_level_;
  ::google::protobuf::uint32 invade_cnt_;
  ::google::protobuf::uint32 today_invade_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static MonsterCity* default_instance_;
};
// -------------------------------------------------------------------

class MonsterCityLst : public ::google::protobuf::Message {
 public:
  MonsterCityLst();
  virtual ~MonsterCityLst();

  MonsterCityLst(const MonsterCityLst& from);

  inline MonsterCityLst& operator=(const MonsterCityLst& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MonsterCityLst& default_instance();

  void Swap(MonsterCityLst* other);

  // implements Message ----------------------------------------------

  MonsterCityLst* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonsterCityLst& from);
  void MergeFrom(const MonsterCityLst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.MonsterCity list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::pb::MonsterCity& list(int index) const;
  inline ::pb::MonsterCity* mutable_list(int index);
  inline ::pb::MonsterCity* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::MonsterCity >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::MonsterCity >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:pb.MonsterCityLst)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::MonsterCity > list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static MonsterCityLst* default_instance_;
};
// -------------------------------------------------------------------

class CountryCrossWarInfo : public ::google::protobuf::Message {
 public:
  CountryCrossWarInfo();
  virtual ~CountryCrossWarInfo();

  CountryCrossWarInfo(const CountryCrossWarInfo& from);

  inline CountryCrossWarInfo& operator=(const CountryCrossWarInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountryCrossWarInfo& default_instance();

  void Swap(CountryCrossWarInfo* other);

  // implements Message ----------------------------------------------

  CountryCrossWarInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountryCrossWarInfo& from);
  void MergeFrom(const CountryCrossWarInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required .pb.CrossWarInfo cross_war_info = 2;
  inline bool has_cross_war_info() const;
  inline void clear_cross_war_info();
  static const int kCrossWarInfoFieldNumber = 2;
  inline const ::pb::CrossWarInfo& cross_war_info() const;
  inline ::pb::CrossWarInfo* mutable_cross_war_info();
  inline ::pb::CrossWarInfo* release_cross_war_info();
  inline void set_allocated_cross_war_info(::pb::CrossWarInfo* cross_war_info);

  // @@protoc_insertion_point(class_scope:pb.CountryCrossWarInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cross_war_info();
  inline void clear_has_cross_war_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::CrossWarInfo* cross_war_info_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static CountryCrossWarInfo* default_instance_;
};
// -------------------------------------------------------------------

class CrossWarInfo : public ::google::protobuf::Message {
 public:
  CrossWarInfo();
  virtual ~CrossWarInfo();

  CrossWarInfo(const CrossWarInfo& from);

  inline CrossWarInfo& operator=(const CrossWarInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CrossWarInfo& default_instance();

  void Swap(CrossWarInfo* other);

  // implements Message ----------------------------------------------

  CrossWarInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CrossWarInfo& from);
  void MergeFrom(const CrossWarInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_open_cross_war = 1;
  inline bool has_is_open_cross_war() const;
  inline void clear_is_open_cross_war();
  static const int kIsOpenCrossWarFieldNumber = 1;
  inline bool is_open_cross_war() const;
  inline void set_is_open_cross_war(bool value);

  // optional bool is_open_anabasis = 2;
  inline bool has_is_open_anabasis() const;
  inline void clear_is_open_anabasis();
  static const int kIsOpenAnabasisFieldNumber = 2;
  inline bool is_open_anabasis() const;
  inline void set_is_open_anabasis(bool value);

  // optional .pb.CROSS_STATE cross_state = 3;
  inline bool has_cross_state() const;
  inline void clear_cross_state();
  static const int kCrossStateFieldNumber = 3;
  inline ::pb::CROSS_STATE cross_state() const;
  inline void set_cross_state(::pb::CROSS_STATE value);

  // optional .pb.CROSS_STATE anabasis_state = 4;
  inline bool has_anabasis_state() const;
  inline void clear_anabasis_state();
  static const int kAnabasisStateFieldNumber = 4;
  inline ::pb::CROSS_STATE anabasis_state() const;
  inline void set_anabasis_state(::pb::CROSS_STATE value);

  // optional uint64 cross_war_start_time = 5;
  inline bool has_cross_war_start_time() const;
  inline void clear_cross_war_start_time();
  static const int kCrossWarStartTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 cross_war_start_time() const;
  inline void set_cross_war_start_time(::google::protobuf::uint64 value);

  // optional string cross_server_ip = 6;
  inline bool has_cross_server_ip() const;
  inline void clear_cross_server_ip();
  static const int kCrossServerIpFieldNumber = 6;
  inline const ::std::string& cross_server_ip() const;
  inline void set_cross_server_ip(const ::std::string& value);
  inline void set_cross_server_ip(const char* value);
  inline void set_cross_server_ip(const char* value, size_t size);
  inline ::std::string* mutable_cross_server_ip();
  inline ::std::string* release_cross_server_ip();
  inline void set_allocated_cross_server_ip(::std::string* cross_server_ip);

  // optional string cross_server_port = 7;
  inline bool has_cross_server_port() const;
  inline void clear_cross_server_port();
  static const int kCrossServerPortFieldNumber = 7;
  inline const ::std::string& cross_server_port() const;
  inline void set_cross_server_port(const ::std::string& value);
  inline void set_cross_server_port(const char* value);
  inline void set_cross_server_port(const char* value, size_t size);
  inline ::std::string* mutable_cross_server_port();
  inline ::std::string* release_cross_server_port();
  inline void set_allocated_cross_server_port(::std::string* cross_server_port);

  // optional bool is_anabasis = 8;
  inline bool has_is_anabasis() const;
  inline void clear_is_anabasis();
  static const int kIsAnabasisFieldNumber = 8;
  inline bool is_anabasis() const;
  inline void set_is_anabasis(bool value);

  // optional uint64 anabasis_start_time = 9;
  inline bool has_anabasis_start_time() const;
  inline void clear_anabasis_start_time();
  static const int kAnabasisStartTimeFieldNumber = 9;
  inline ::google::protobuf::uint64 anabasis_start_time() const;
  inline void set_anabasis_start_time(::google::protobuf::uint64 value);

  // optional string anabasis_server_ip = 10;
  inline bool has_anabasis_server_ip() const;
  inline void clear_anabasis_server_ip();
  static const int kAnabasisServerIpFieldNumber = 10;
  inline const ::std::string& anabasis_server_ip() const;
  inline void set_anabasis_server_ip(const ::std::string& value);
  inline void set_anabasis_server_ip(const char* value);
  inline void set_anabasis_server_ip(const char* value, size_t size);
  inline ::std::string* mutable_anabasis_server_ip();
  inline ::std::string* release_anabasis_server_ip();
  inline void set_allocated_anabasis_server_ip(::std::string* anabasis_server_ip);

  // optional string anabasis_server_port = 11;
  inline bool has_anabasis_server_port() const;
  inline void clear_anabasis_server_port();
  static const int kAnabasisServerPortFieldNumber = 11;
  inline const ::std::string& anabasis_server_port() const;
  inline void set_anabasis_server_port(const ::std::string& value);
  inline void set_anabasis_server_port(const char* value);
  inline void set_anabasis_server_port(const char* value, size_t size);
  inline ::std::string* mutable_anabasis_server_port();
  inline ::std::string* release_anabasis_server_port();
  inline void set_allocated_anabasis_server_port(::std::string* anabasis_server_port);

  // @@protoc_insertion_point(class_scope:pb.CrossWarInfo)
 private:
  inline void set_has_is_open_cross_war();
  inline void clear_has_is_open_cross_war();
  inline void set_has_is_open_anabasis();
  inline void clear_has_is_open_anabasis();
  inline void set_has_cross_state();
  inline void clear_has_cross_state();
  inline void set_has_anabasis_state();
  inline void clear_has_anabasis_state();
  inline void set_has_cross_war_start_time();
  inline void clear_has_cross_war_start_time();
  inline void set_has_cross_server_ip();
  inline void clear_has_cross_server_ip();
  inline void set_has_cross_server_port();
  inline void clear_has_cross_server_port();
  inline void set_has_is_anabasis();
  inline void clear_has_is_anabasis();
  inline void set_has_anabasis_start_time();
  inline void clear_has_anabasis_start_time();
  inline void set_has_anabasis_server_ip();
  inline void clear_has_anabasis_server_ip();
  inline void set_has_anabasis_server_port();
  inline void clear_has_anabasis_server_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int cross_state_;
  bool is_open_cross_war_;
  bool is_open_anabasis_;
  bool is_anabasis_;
  ::google::protobuf::uint64 cross_war_start_time_;
  ::std::string* cross_server_ip_;
  ::std::string* cross_server_port_;
  ::google::protobuf::uint64 anabasis_start_time_;
  ::std::string* anabasis_server_ip_;
  ::std::string* anabasis_server_port_;
  int anabasis_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static CrossWarInfo* default_instance_;
};
// -------------------------------------------------------------------

class CountyInfo : public ::google::protobuf::Message {
 public:
  CountyInfo();
  virtual ~CountyInfo();

  CountyInfo(const CountyInfo& from);

  inline CountyInfo& operator=(const CountyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountyInfo& default_instance();

  void Swap(CountyInfo* other);

  // implements Message ----------------------------------------------

  CountyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountyInfo& from);
  void MergeFrom(const CountyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // required uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 donate_times = 4;
  inline bool has_donate_times() const;
  inline void clear_donate_times();
  static const int kDonateTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 donate_times() const;
  inline void set_donate_times(::google::protobuf::uint32 value);

  // required uint32 country_npc_level = 5;
  inline bool has_country_npc_level() const;
  inline void clear_country_npc_level();
  static const int kCountryNpcLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 country_npc_level() const;
  inline void set_country_npc_level(::google::protobuf::uint32 value);

  // required uint32 country_npc_exp = 6;
  inline bool has_country_npc_exp() const;
  inline void clear_country_npc_exp();
  static const int kCountryNpcExpFieldNumber = 6;
  inline ::google::protobuf::uint32 country_npc_exp() const;
  inline void set_country_npc_exp(::google::protobuf::uint32 value);

  // optional uint32 have_city_cnt = 7;
  inline bool has_have_city_cnt() const;
  inline void clear_have_city_cnt();
  static const int kHaveCityCntFieldNumber = 7;
  inline ::google::protobuf::uint32 have_city_cnt() const;
  inline void set_have_city_cnt(::google::protobuf::uint32 value);

  // optional uint64 open_level_up_task_time = 8;
  inline bool has_open_level_up_task_time() const;
  inline void clear_open_level_up_task_time();
  static const int kOpenLevelUpTaskTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 open_level_up_task_time() const;
  inline void set_open_level_up_task_time(::google::protobuf::uint64 value);

  // optional uint32 cur_level_do_task_cnt = 9;
  inline bool has_cur_level_do_task_cnt() const;
  inline void clear_cur_level_do_task_cnt();
  static const int kCurLevelDoTaskCntFieldNumber = 9;
  inline ::google::protobuf::uint32 cur_level_do_task_cnt() const;
  inline void set_cur_level_do_task_cnt(::google::protobuf::uint32 value);

  // optional uint32 kill_monster_num = 10;
  inline bool has_kill_monster_num() const;
  inline void clear_kill_monster_num();
  static const int kKillMonsterNumFieldNumber = 10;
  inline ::google::protobuf::uint32 kill_monster_num() const;
  inline void set_kill_monster_num(::google::protobuf::uint32 value);

  // optional bool is_monster_task_open = 11;
  inline bool has_is_monster_task_open() const;
  inline void clear_is_monster_task_open();
  static const int kIsMonsterTaskOpenFieldNumber = 11;
  inline bool is_monster_task_open() const;
  inline void set_is_monster_task_open(bool value);

  // optional bool is_monster_task_succeed = 12;
  inline bool has_is_monster_task_succeed() const;
  inline void clear_is_monster_task_succeed();
  static const int kIsMonsterTaskSucceedFieldNumber = 12;
  inline bool is_monster_task_succeed() const;
  inline void set_is_monster_task_succeed(bool value);

  // optional .pb.CrossWarInfo cross_war_info = 13;
  inline bool has_cross_war_info() const;
  inline void clear_cross_war_info();
  static const int kCrossWarInfoFieldNumber = 13;
  inline const ::pb::CrossWarInfo& cross_war_info() const;
  inline ::pb::CrossWarInfo* mutable_cross_war_info();
  inline ::pb::CrossWarInfo* release_cross_war_info();
  inline void set_allocated_cross_war_info(::pb::CrossWarInfo* cross_war_info);

  // optional .pb.MonsterCityLst monster_city_lst = 14;
  inline bool has_monster_city_lst() const;
  inline void clear_monster_city_lst();
  static const int kMonsterCityLstFieldNumber = 14;
  inline const ::pb::MonsterCityLst& monster_city_lst() const;
  inline ::pb::MonsterCityLst* mutable_monster_city_lst();
  inline ::pb::MonsterCityLst* release_monster_city_lst();
  inline void set_allocated_monster_city_lst(::pb::MonsterCityLst* monster_city_lst);

  // optional uint64 last_check_npc_exp = 15;
  inline bool has_last_check_npc_exp() const;
  inline void clear_last_check_npc_exp();
  static const int kLastCheckNpcExpFieldNumber = 15;
  inline ::google::protobuf::uint64 last_check_npc_exp() const;
  inline void set_last_check_npc_exp(::google::protobuf::uint64 value);

  // optional uint32 npc_level_id = 16;
  inline bool has_npc_level_id() const;
  inline void clear_npc_level_id();
  static const int kNpcLevelIdFieldNumber = 16;
  inline ::google::protobuf::uint32 npc_level_id() const;
  inline void set_npc_level_id(::google::protobuf::uint32 value);

  // optional uint32 tuntian_level = 17;
  inline bool has_tuntian_level() const;
  inline void clear_tuntian_level();
  static const int kTuntianLevelFieldNumber = 17;
  inline ::google::protobuf::uint32 tuntian_level() const;
  inline void set_tuntian_level(::google::protobuf::uint32 value);

  // optional uint64 tuntian_exp = 18;
  inline bool has_tuntian_exp() const;
  inline void clear_tuntian_exp();
  static const int kTuntianExpFieldNumber = 18;
  inline ::google::protobuf::uint64 tuntian_exp() const;
  inline void set_tuntian_exp(::google::protobuf::uint64 value);

  // optional uint32 Prosperity_Degree = 19;
  inline bool has_prosperity_degree() const;
  inline void clear_prosperity_degree();
  static const int kProsperityDegreeFieldNumber = 19;
  inline ::google::protobuf::uint32 prosperity_degree() const;
  inline void set_prosperity_degree(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.CountyInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_donate_times();
  inline void clear_has_donate_times();
  inline void set_has_country_npc_level();
  inline void clear_has_country_npc_level();
  inline void set_has_country_npc_exp();
  inline void clear_has_country_npc_exp();
  inline void set_has_have_city_cnt();
  inline void clear_has_have_city_cnt();
  inline void set_has_open_level_up_task_time();
  inline void clear_has_open_level_up_task_time();
  inline void set_has_cur_level_do_task_cnt();
  inline void clear_has_cur_level_do_task_cnt();
  inline void set_has_kill_monster_num();
  inline void clear_has_kill_monster_num();
  inline void set_has_is_monster_task_open();
  inline void clear_has_is_monster_task_open();
  inline void set_has_is_monster_task_succeed();
  inline void clear_has_is_monster_task_succeed();
  inline void set_has_cross_war_info();
  inline void clear_has_cross_war_info();
  inline void set_has_monster_city_lst();
  inline void clear_has_monster_city_lst();
  inline void set_has_last_check_npc_exp();
  inline void clear_has_last_check_npc_exp();
  inline void set_has_npc_level_id();
  inline void clear_has_npc_level_id();
  inline void set_has_tuntian_level();
  inline void clear_has_tuntian_level();
  inline void set_has_tuntian_exp();
  inline void clear_has_tuntian_exp();
  inline void set_has_prosperity_degree();
  inline void clear_has_prosperity_degree();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 donate_times_;
  ::google::protobuf::uint32 country_npc_level_;
  ::google::protobuf::uint32 country_npc_exp_;
  ::google::protobuf::uint64 open_level_up_task_time_;
  ::google::protobuf::uint32 have_city_cnt_;
  ::google::protobuf::uint32 cur_level_do_task_cnt_;
  ::google::protobuf::uint32 kill_monster_num_;
  bool is_monster_task_open_;
  bool is_monster_task_succeed_;
  ::pb::CrossWarInfo* cross_war_info_;
  ::pb::MonsterCityLst* monster_city_lst_;
  ::google::protobuf::uint64 last_check_npc_exp_;
  ::google::protobuf::uint32 npc_level_id_;
  ::google::protobuf::uint32 tuntian_level_;
  ::google::protobuf::uint64 tuntian_exp_;
  ::google::protobuf::uint32 prosperity_degree_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static CountyInfo* default_instance_;
};
// -------------------------------------------------------------------

class Country_Levle_Up_Task_Rank : public ::google::protobuf::Message {
 public:
  Country_Levle_Up_Task_Rank();
  virtual ~Country_Levle_Up_Task_Rank();

  Country_Levle_Up_Task_Rank(const Country_Levle_Up_Task_Rank& from);

  inline Country_Levle_Up_Task_Rank& operator=(const Country_Levle_Up_Task_Rank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Country_Levle_Up_Task_Rank& default_instance();

  void Swap(Country_Levle_Up_Task_Rank* other);

  // implements Message ----------------------------------------------

  Country_Levle_Up_Task_Rank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Country_Levle_Up_Task_Rank& from);
  void MergeFrom(const Country_Levle_Up_Task_Rank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 country = 1;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 1;
  inline ::google::protobuf::uint32 country() const;
  inline void set_country(::google::protobuf::uint32 value);

  // repeated .pb.CountyLevelUpTaskPlayer player_lst = 2;
  inline int player_lst_size() const;
  inline void clear_player_lst();
  static const int kPlayerLstFieldNumber = 2;
  inline const ::pb::CountyLevelUpTaskPlayer& player_lst(int index) const;
  inline ::pb::CountyLevelUpTaskPlayer* mutable_player_lst(int index);
  inline ::pb::CountyLevelUpTaskPlayer* add_player_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::CountyLevelUpTaskPlayer >&
      player_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::CountyLevelUpTaskPlayer >*
      mutable_player_lst();

  // @@protoc_insertion_point(class_scope:pb.Country_Levle_Up_Task_Rank)
 private:
  inline void set_has_country();
  inline void clear_has_country();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::CountyLevelUpTaskPlayer > player_lst_;
  ::google::protobuf::uint32 country_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static Country_Levle_Up_Task_Rank* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Country_Info : public ::google::protobuf::Message {
 public:
  C2GS_Country_Info();
  virtual ~C2GS_Country_Info();

  C2GS_Country_Info(const C2GS_Country_Info& from);

  inline C2GS_Country_Info& operator=(const C2GS_Country_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Country_Info& default_instance();

  void Swap(C2GS_Country_Info* other);

  // implements Message ----------------------------------------------

  C2GS_Country_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Country_Info& from);
  void MergeFrom(const C2GS_Country_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Country_Info)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Country_Info* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Country_Info : public ::google::protobuf::Message {
 public:
  GS2C_Country_Info();
  virtual ~GS2C_Country_Info();

  GS2C_Country_Info(const GS2C_Country_Info& from);

  inline GS2C_Country_Info& operator=(const GS2C_Country_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Country_Info& default_instance();

  void Swap(GS2C_Country_Info* other);

  // implements Message ----------------------------------------------

  GS2C_Country_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Country_Info& from);
  void MergeFrom(const GS2C_Country_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.CountyInfo country = 1;
  inline int country_size() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 1;
  inline const ::pb::CountyInfo& country(int index) const;
  inline ::pb::CountyInfo* mutable_country(int index);
  inline ::pb::CountyInfo* add_country();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::CountyInfo >&
      country() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::CountyInfo >*
      mutable_country();

  // @@protoc_insertion_point(class_scope:pb.GS2C_Country_Info)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::CountyInfo > country_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Country_Info* default_instance_;
};
// -------------------------------------------------------------------

class Struct_Country_Task_Base : public ::google::protobuf::Message {
 public:
  Struct_Country_Task_Base();
  virtual ~Struct_Country_Task_Base();

  Struct_Country_Task_Base(const Struct_Country_Task_Base& from);

  inline Struct_Country_Task_Base& operator=(const Struct_Country_Task_Base& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Struct_Country_Task_Base& default_instance();

  void Swap(Struct_Country_Task_Base* other);

  // implements Message ----------------------------------------------

  Struct_Country_Task_Base* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Struct_Country_Task_Base& from);
  void MergeFrom(const Struct_Country_Task_Base& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_begin = 1;
  inline bool has_is_begin() const;
  inline void clear_is_begin();
  static const int kIsBeginFieldNumber = 1;
  inline bool is_begin() const;
  inline void set_is_begin(bool value);

  // optional uint32 cur_stage = 2;
  inline bool has_cur_stage() const;
  inline void clear_cur_stage();
  static const int kCurStageFieldNumber = 2;
  inline ::google::protobuf::uint32 cur_stage() const;
  inline void set_cur_stage(::google::protobuf::uint32 value);

  // optional uint64 cur_stage_begin_time = 3;
  inline bool has_cur_stage_begin_time() const;
  inline void clear_cur_stage_begin_time();
  static const int kCurStageBeginTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 cur_stage_begin_time() const;
  inline void set_cur_stage_begin_time(::google::protobuf::uint64 value);

  // optional bool is_waiting_state = 4;
  inline bool has_is_waiting_state() const;
  inline void clear_is_waiting_state();
  static const int kIsWaitingStateFieldNumber = 4;
  inline bool is_waiting_state() const;
  inline void set_is_waiting_state(bool value);

  // repeated uint32 cur_stage_begin_country_citys = 5;
  inline int cur_stage_begin_country_citys_size() const;
  inline void clear_cur_stage_begin_country_citys();
  static const int kCurStageBeginCountryCitysFieldNumber = 5;
  inline ::google::protobuf::uint32 cur_stage_begin_country_citys(int index) const;
  inline void set_cur_stage_begin_country_citys(int index, ::google::protobuf::uint32 value);
  inline void add_cur_stage_begin_country_citys(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cur_stage_begin_country_citys() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cur_stage_begin_country_citys();

  // repeated uint32 cur_stage_now_country_occupy_citys = 6;
  inline int cur_stage_now_country_occupy_citys_size() const;
  inline void clear_cur_stage_now_country_occupy_citys();
  static const int kCurStageNowCountryOccupyCitysFieldNumber = 6;
  inline ::google::protobuf::uint32 cur_stage_now_country_occupy_citys(int index) const;
  inline void set_cur_stage_now_country_occupy_citys(int index, ::google::protobuf::uint32 value);
  inline void add_cur_stage_now_country_occupy_citys(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cur_stage_now_country_occupy_citys() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cur_stage_now_country_occupy_citys();

  // repeated uint32 cur_stage_target_num = 7;
  inline int cur_stage_target_num_size() const;
  inline void clear_cur_stage_target_num();
  static const int kCurStageTargetNumFieldNumber = 7;
  inline ::google::protobuf::uint32 cur_stage_target_num(int index) const;
  inline void set_cur_stage_target_num(int index, ::google::protobuf::uint32 value);
  inline void add_cur_stage_target_num(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cur_stage_target_num() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cur_stage_target_num();

  // repeated uint32 cur_stage_now_country_invest_money = 8;
  inline int cur_stage_now_country_invest_money_size() const;
  inline void clear_cur_stage_now_country_invest_money();
  static const int kCurStageNowCountryInvestMoneyFieldNumber = 8;
  inline ::google::protobuf::uint32 cur_stage_now_country_invest_money(int index) const;
  inline void set_cur_stage_now_country_invest_money(int index, ::google::protobuf::uint32 value);
  inline void add_cur_stage_now_country_invest_money(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cur_stage_now_country_invest_money() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cur_stage_now_country_invest_money();

  // repeated bool is_country_failed = 9;
  inline int is_country_failed_size() const;
  inline void clear_is_country_failed();
  static const int kIsCountryFailedFieldNumber = 9;
  inline bool is_country_failed(int index) const;
  inline void set_is_country_failed(int index, bool value);
  inline void add_is_country_failed(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      is_country_failed() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_is_country_failed();

  // repeated uint32 country_score = 10;
  inline int country_score_size() const;
  inline void clear_country_score();
  static const int kCountryScoreFieldNumber = 10;
  inline ::google::protobuf::uint32 country_score(int index) const;
  inline void set_country_score(int index, ::google::protobuf::uint32 value);
  inline void add_country_score(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      country_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_country_score();

  // repeated uint32 cur_stage_fighting_city_num = 11;
  inline int cur_stage_fighting_city_num_size() const;
  inline void clear_cur_stage_fighting_city_num();
  static const int kCurStageFightingCityNumFieldNumber = 11;
  inline ::google::protobuf::uint32 cur_stage_fighting_city_num(int index) const;
  inline void set_cur_stage_fighting_city_num(int index, ::google::protobuf::uint32 value);
  inline void add_cur_stage_fighting_city_num(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cur_stage_fighting_city_num() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cur_stage_fighting_city_num();

  // @@protoc_insertion_point(class_scope:pb.Struct_Country_Task_Base)
 private:
  inline void set_has_is_begin();
  inline void clear_has_is_begin();
  inline void set_has_cur_stage();
  inline void clear_has_cur_stage();
  inline void set_has_cur_stage_begin_time();
  inline void clear_has_cur_stage_begin_time();
  inline void set_has_is_waiting_state();
  inline void clear_has_is_waiting_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cur_stage_;
  bool is_begin_;
  bool is_waiting_state_;
  ::google::protobuf::uint64 cur_stage_begin_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cur_stage_begin_country_citys_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cur_stage_now_country_occupy_citys_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cur_stage_target_num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cur_stage_now_country_invest_money_;
  ::google::protobuf::RepeatedField< bool > is_country_failed_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > country_score_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cur_stage_fighting_city_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static Struct_Country_Task_Base* default_instance_;
};
// -------------------------------------------------------------------

class Struct_Country_Task_City : public ::google::protobuf::Message {
 public:
  Struct_Country_Task_City();
  virtual ~Struct_Country_Task_City();

  Struct_Country_Task_City(const Struct_Country_Task_City& from);

  inline Struct_Country_Task_City& operator=(const Struct_Country_Task_City& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Struct_Country_Task_City& default_instance();

  void Swap(Struct_Country_Task_City* other);

  // implements Message ----------------------------------------------

  Struct_Country_Task_City* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Struct_Country_Task_City& from);
  void MergeFrom(const Struct_Country_Task_City& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 city_id = 1;
  inline bool has_city_id() const;
  inline void clear_city_id();
  static const int kCityIdFieldNumber = 1;
  inline ::google::protobuf::uint32 city_id() const;
  inline void set_city_id(::google::protobuf::uint32 value);

  // required uint64 end_time = 2;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 end_time() const;
  inline void set_end_time(::google::protobuf::uint64 value);

  // optional uint32 win_country = 3;
  inline bool has_win_country() const;
  inline void clear_win_country();
  static const int kWinCountryFieldNumber = 3;
  inline ::google::protobuf::uint32 win_country() const;
  inline void set_win_country(::google::protobuf::uint32 value);

  // optional uint32 origin_country = 4;
  inline bool has_origin_country() const;
  inline void clear_origin_country();
  static const int kOriginCountryFieldNumber = 4;
  inline ::google::protobuf::uint32 origin_country() const;
  inline void set_origin_country(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.Struct_Country_Task_City)
 private:
  inline void set_has_city_id();
  inline void clear_has_city_id();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_win_country();
  inline void clear_has_win_country();
  inline void set_has_origin_country();
  inline void clear_has_origin_country();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 end_time_;
  ::google::protobuf::uint32 city_id_;
  ::google::protobuf::uint32 win_country_;
  ::google::protobuf::uint32 origin_country_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static Struct_Country_Task_City* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Country_Task_Info : public ::google::protobuf::Message {
 public:
  GS2C_Country_Task_Info();
  virtual ~GS2C_Country_Task_Info();

  GS2C_Country_Task_Info(const GS2C_Country_Task_Info& from);

  inline GS2C_Country_Task_Info& operator=(const GS2C_Country_Task_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Country_Task_Info& default_instance();

  void Swap(GS2C_Country_Task_Info* other);

  // implements Message ----------------------------------------------

  GS2C_Country_Task_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Country_Task_Info& from);
  void MergeFrom(const GS2C_Country_Task_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_running = 1;
  inline bool has_is_running() const;
  inline void clear_is_running();
  static const int kIsRunningFieldNumber = 1;
  inline bool is_running() const;
  inline void set_is_running(bool value);

  // repeated .pb.Struct_Country_Task_City city = 2;
  inline int city_size() const;
  inline void clear_city();
  static const int kCityFieldNumber = 2;
  inline const ::pb::Struct_Country_Task_City& city(int index) const;
  inline ::pb::Struct_Country_Task_City* mutable_city(int index);
  inline ::pb::Struct_Country_Task_City* add_city();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Struct_Country_Task_City >&
      city() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Struct_Country_Task_City >*
      mutable_city();

  // optional .pb.Struct_Country_Task_Base base = 3;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 3;
  inline const ::pb::Struct_Country_Task_Base& base() const;
  inline ::pb::Struct_Country_Task_Base* mutable_base();
  inline ::pb::Struct_Country_Task_Base* release_base();
  inline void set_allocated_base(::pb::Struct_Country_Task_Base* base);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Country_Task_Info)
 private:
  inline void set_has_is_running();
  inline void clear_has_is_running();
  inline void set_has_base();
  inline void clear_has_base();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::Struct_Country_Task_City > city_;
  ::pb::Struct_Country_Task_Base* base_;
  bool is_running_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Country_Task_Info* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Country_Task_Player : public ::google::protobuf::Message {
 public:
  GS2C_Country_Task_Player();
  virtual ~GS2C_Country_Task_Player();

  GS2C_Country_Task_Player(const GS2C_Country_Task_Player& from);

  inline GS2C_Country_Task_Player& operator=(const GS2C_Country_Task_Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Country_Task_Player& default_instance();

  void Swap(GS2C_Country_Task_Player* other);

  // implements Message ----------------------------------------------

  GS2C_Country_Task_Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Country_Task_Player& from);
  void MergeFrom(const GS2C_Country_Task_Player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // required uint32 kill_count = 2;
  inline bool has_kill_count() const;
  inline void clear_kill_count();
  static const int kKillCountFieldNumber = 2;
  inline ::google::protobuf::uint32 kill_count() const;
  inline void set_kill_count(::google::protobuf::uint32 value);

  // repeated bool is_take_reward = 3;
  inline int is_take_reward_size() const;
  inline void clear_is_take_reward();
  static const int kIsTakeRewardFieldNumber = 3;
  inline bool is_take_reward(int index) const;
  inline void set_is_take_reward(int index, bool value);
  inline void add_is_take_reward(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      is_take_reward() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_is_take_reward();

  // repeated uint32 task_end_rank = 4;
  inline int task_end_rank_size() const;
  inline void clear_task_end_rank();
  static const int kTaskEndRankFieldNumber = 4;
  inline ::google::protobuf::uint32 task_end_rank(int index) const;
  inline void set_task_end_rank(int index, ::google::protobuf::uint32 value);
  inline void add_task_end_rank(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      task_end_rank() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_task_end_rank();

  // repeated .pb.GS2C_LootList rank_reward = 5;
  inline int rank_reward_size() const;
  inline void clear_rank_reward();
  static const int kRankRewardFieldNumber = 5;
  inline const ::pb::GS2C_LootList& rank_reward(int index) const;
  inline ::pb::GS2C_LootList* mutable_rank_reward(int index);
  inline ::pb::GS2C_LootList* add_rank_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_LootList >&
      rank_reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_LootList >*
      mutable_rank_reward();

  // optional .pb.GS2C_LootList win_reward = 6;
  inline bool has_win_reward() const;
  inline void clear_win_reward();
  static const int kWinRewardFieldNumber = 6;
  inline const ::pb::GS2C_LootList& win_reward() const;
  inline ::pb::GS2C_LootList* mutable_win_reward();
  inline ::pb::GS2C_LootList* release_win_reward();
  inline void set_allocated_win_reward(::pb::GS2C_LootList* win_reward);

  // optional uint64 cd_time = 7;
  inline bool has_cd_time() const;
  inline void clear_cd_time();
  static const int kCdTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 cd_time() const;
  inline void set_cd_time(::google::protobuf::uint64 value);

  // optional .pb.Struct_Country_Pk_Info pk_info = 8;
  inline bool has_pk_info() const;
  inline void clear_pk_info();
  static const int kPkInfoFieldNumber = 8;
  inline const ::pb::Struct_Country_Pk_Info& pk_info() const;
  inline ::pb::Struct_Country_Pk_Info* mutable_pk_info();
  inline ::pb::Struct_Country_Pk_Info* release_pk_info();
  inline void set_allocated_pk_info(::pb::Struct_Country_Pk_Info* pk_info);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Country_Task_Player)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_kill_count();
  inline void clear_has_kill_count();
  inline void set_has_win_reward();
  inline void clear_has_win_reward();
  inline void set_has_cd_time();
  inline void clear_has_cd_time();
  inline void set_has_pk_info();
  inline void clear_has_pk_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 kill_count_;
  ::google::protobuf::RepeatedField< bool > is_take_reward_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > task_end_rank_;
  ::google::protobuf::RepeatedPtrField< ::pb::GS2C_LootList > rank_reward_;
  ::pb::GS2C_LootList* win_reward_;
  ::google::protobuf::uint64 cd_time_;
  ::pb::Struct_Country_Pk_Info* pk_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Country_Task_Player* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Country_Task_Reward : public ::google::protobuf::Message {
 public:
  C2GS_Country_Task_Reward();
  virtual ~C2GS_Country_Task_Reward();

  C2GS_Country_Task_Reward(const C2GS_Country_Task_Reward& from);

  inline C2GS_Country_Task_Reward& operator=(const C2GS_Country_Task_Reward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Country_Task_Reward& default_instance();

  void Swap(C2GS_Country_Task_Reward* other);

  // implements Message ----------------------------------------------

  C2GS_Country_Task_Reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Country_Task_Reward& from);
  void MergeFrom(const C2GS_Country_Task_Reward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 task_idx = 1;
  inline bool has_task_idx() const;
  inline void clear_task_idx();
  static const int kTaskIdxFieldNumber = 1;
  inline ::google::protobuf::uint32 task_idx() const;
  inline void set_task_idx(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Country_Task_Reward)
 private:
  inline void set_has_task_idx();
  inline void clear_has_task_idx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 task_idx_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Country_Task_Reward* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Country_Task_Reward_Ret : public ::google::protobuf::Message {
 public:
  GS2C_Country_Task_Reward_Ret();
  virtual ~GS2C_Country_Task_Reward_Ret();

  GS2C_Country_Task_Reward_Ret(const GS2C_Country_Task_Reward_Ret& from);

  inline GS2C_Country_Task_Reward_Ret& operator=(const GS2C_Country_Task_Reward_Ret& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Country_Task_Reward_Ret& default_instance();

  void Swap(GS2C_Country_Task_Reward_Ret* other);

  // implements Message ----------------------------------------------

  GS2C_Country_Task_Reward_Ret* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Country_Task_Reward_Ret& from);
  void MergeFrom(const GS2C_Country_Task_Reward_Ret& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isSuccess = 1;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIsSuccessFieldNumber = 1;
  inline bool issuccess() const;
  inline void set_issuccess(bool value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Country_Task_Reward_Ret)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool issuccess_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Country_Task_Reward_Ret* default_instance_;
};
// -------------------------------------------------------------------

class Country_Task_Result : public ::google::protobuf::Message {
 public:
  Country_Task_Result();
  virtual ~Country_Task_Result();

  Country_Task_Result(const Country_Task_Result& from);

  inline Country_Task_Result& operator=(const Country_Task_Result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Country_Task_Result& default_instance();

  void Swap(Country_Task_Result* other);

  // implements Message ----------------------------------------------

  Country_Task_Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Country_Task_Result& from);
  void MergeFrom(const Country_Task_Result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint32 kill_count = 2;
  inline bool has_kill_count() const;
  inline void clear_kill_count();
  static const int kKillCountFieldNumber = 2;
  inline ::google::protobuf::uint32 kill_count() const;
  inline void set_kill_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.Country_Task_Result)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_kill_count();
  inline void clear_has_kill_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 kill_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static Country_Task_Result* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Country_Task_End : public ::google::protobuf::Message {
 public:
  GS2C_Country_Task_End();
  virtual ~GS2C_Country_Task_End();

  GS2C_Country_Task_End(const GS2C_Country_Task_End& from);

  inline GS2C_Country_Task_End& operator=(const GS2C_Country_Task_End& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Country_Task_End& default_instance();

  void Swap(GS2C_Country_Task_End* other);

  // implements Message ----------------------------------------------

  GS2C_Country_Task_End* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Country_Task_End& from);
  void MergeFrom(const GS2C_Country_Task_End& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 city_id = 1;
  inline bool has_city_id() const;
  inline void clear_city_id();
  static const int kCityIdFieldNumber = 1;
  inline ::google::protobuf::uint32 city_id() const;
  inline void set_city_id(::google::protobuf::uint32 value);

  // optional .pb.Country_Task_Result result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline const ::pb::Country_Task_Result& result() const;
  inline ::pb::Country_Task_Result* mutable_result();
  inline ::pb::Country_Task_Result* release_result();
  inline void set_allocated_result(::pb::Country_Task_Result* result);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Country_Task_End)
 private:
  inline void set_has_city_id();
  inline void clear_has_city_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::Country_Task_Result* result_;
  ::google::protobuf::uint32 city_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Country_Task_End* default_instance_;
};
// -------------------------------------------------------------------

class Struct_Country_Pk_Player_mirror : public ::google::protobuf::Message {
 public:
  Struct_Country_Pk_Player_mirror();
  virtual ~Struct_Country_Pk_Player_mirror();

  Struct_Country_Pk_Player_mirror(const Struct_Country_Pk_Player_mirror& from);

  inline Struct_Country_Pk_Player_mirror& operator=(const Struct_Country_Pk_Player_mirror& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Struct_Country_Pk_Player_mirror& default_instance();

  void Swap(Struct_Country_Pk_Player_mirror* other);

  // implements Message ----------------------------------------------

  Struct_Country_Pk_Player_mirror* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Struct_Country_Pk_Player_mirror& from);
  void MergeFrom(const Struct_Country_Pk_Player_mirror& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 head_id = 1;
  inline bool has_head_id() const;
  inline void clear_head_id();
  static const int kHeadIdFieldNumber = 1;
  inline ::google::protobuf::uint32 head_id() const;
  inline void set_head_id(::google::protobuf::uint32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // repeated uint32 card_tid = 4;
  inline int card_tid_size() const;
  inline void clear_card_tid();
  static const int kCardTidFieldNumber = 4;
  inline ::google::protobuf::uint32 card_tid(int index) const;
  inline void set_card_tid(int index, ::google::protobuf::uint32 value);
  inline void add_card_tid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      card_tid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_card_tid();

  // repeated uint32 card_lv = 5;
  inline int card_lv_size() const;
  inline void clear_card_lv();
  static const int kCardLvFieldNumber = 5;
  inline ::google::protobuf::uint32 card_lv(int index) const;
  inline void set_card_lv(int index, ::google::protobuf::uint32 value);
  inline void add_card_lv(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      card_lv() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_card_lv();

  // @@protoc_insertion_point(class_scope:pb.Struct_Country_Pk_Player_mirror)
 private:
  inline void set_has_head_id();
  inline void clear_has_head_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 head_id_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > card_tid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > card_lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static Struct_Country_Pk_Player_mirror* default_instance_;
};
// -------------------------------------------------------------------

class Struct_Country_Pk_History : public ::google::protobuf::Message {
 public:
  Struct_Country_Pk_History();
  virtual ~Struct_Country_Pk_History();

  Struct_Country_Pk_History(const Struct_Country_Pk_History& from);

  inline Struct_Country_Pk_History& operator=(const Struct_Country_Pk_History& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Struct_Country_Pk_History& default_instance();

  void Swap(Struct_Country_Pk_History* other);

  // implements Message ----------------------------------------------

  Struct_Country_Pk_History* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Struct_Country_Pk_History& from);
  void MergeFrom(const Struct_Country_Pk_History& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string rival_name = 1;
  inline bool has_rival_name() const;
  inline void clear_rival_name();
  static const int kRivalNameFieldNumber = 1;
  inline const ::std::string& rival_name() const;
  inline void set_rival_name(const ::std::string& value);
  inline void set_rival_name(const char* value);
  inline void set_rival_name(const char* value, size_t size);
  inline ::std::string* mutable_rival_name();
  inline ::std::string* release_rival_name();
  inline void set_allocated_rival_name(::std::string* rival_name);

  // required bool rival_is_att = 2;
  inline bool has_rival_is_att() const;
  inline void clear_rival_is_att();
  static const int kRivalIsAttFieldNumber = 2;
  inline bool rival_is_att() const;
  inline void set_rival_is_att(bool value);

  // required bool rival_is_win = 3;
  inline bool has_rival_is_win() const;
  inline void clear_rival_is_win();
  static const int kRivalIsWinFieldNumber = 3;
  inline bool rival_is_win() const;
  inline void set_rival_is_win(bool value);

  // required uint32 my_score_change = 4;
  inline bool has_my_score_change() const;
  inline void clear_my_score_change();
  static const int kMyScoreChangeFieldNumber = 4;
  inline ::google::protobuf::uint32 my_score_change() const;
  inline void set_my_score_change(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.Struct_Country_Pk_History)
 private:
  inline void set_has_rival_name();
  inline void clear_has_rival_name();
  inline void set_has_rival_is_att();
  inline void clear_has_rival_is_att();
  inline void set_has_rival_is_win();
  inline void clear_has_rival_is_win();
  inline void set_has_my_score_change();
  inline void clear_has_my_score_change();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* rival_name_;
  bool rival_is_att_;
  bool rival_is_win_;
  ::google::protobuf::uint32 my_score_change_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static Struct_Country_Pk_History* default_instance_;
};
// -------------------------------------------------------------------

class Struct_Country_Pk_Info : public ::google::protobuf::Message {
 public:
  Struct_Country_Pk_Info();
  virtual ~Struct_Country_Pk_Info();

  Struct_Country_Pk_Info(const Struct_Country_Pk_Info& from);

  inline Struct_Country_Pk_Info& operator=(const Struct_Country_Pk_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Struct_Country_Pk_Info& default_instance();

  void Swap(Struct_Country_Pk_Info* other);

  // implements Message ----------------------------------------------

  Struct_Country_Pk_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Struct_Country_Pk_Info& from);
  void MergeFrom(const Struct_Country_Pk_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string recent_player_name = 1;
  inline int recent_player_name_size() const;
  inline void clear_recent_player_name();
  static const int kRecentPlayerNameFieldNumber = 1;
  inline const ::std::string& recent_player_name(int index) const;
  inline ::std::string* mutable_recent_player_name(int index);
  inline void set_recent_player_name(int index, const ::std::string& value);
  inline void set_recent_player_name(int index, const char* value);
  inline void set_recent_player_name(int index, const char* value, size_t size);
  inline ::std::string* add_recent_player_name();
  inline void add_recent_player_name(const ::std::string& value);
  inline void add_recent_player_name(const char* value);
  inline void add_recent_player_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& recent_player_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_recent_player_name();

  // repeated uint32 recent_player_score = 2;
  inline int recent_player_score_size() const;
  inline void clear_recent_player_score();
  static const int kRecentPlayerScoreFieldNumber = 2;
  inline ::google::protobuf::uint32 recent_player_score(int index) const;
  inline void set_recent_player_score(int index, ::google::protobuf::uint32 value);
  inline void add_recent_player_score(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      recent_player_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_recent_player_score();

  // repeated uint32 recent_player_country = 3;
  inline int recent_player_country_size() const;
  inline void clear_recent_player_country();
  static const int kRecentPlayerCountryFieldNumber = 3;
  inline ::google::protobuf::uint32 recent_player_country(int index) const;
  inline void set_recent_player_country(int index, ::google::protobuf::uint32 value);
  inline void add_recent_player_country(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      recent_player_country() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_recent_player_country();

  // required string rank_no1_name = 4;
  inline bool has_rank_no1_name() const;
  inline void clear_rank_no1_name();
  static const int kRankNo1NameFieldNumber = 4;
  inline const ::std::string& rank_no1_name() const;
  inline void set_rank_no1_name(const ::std::string& value);
  inline void set_rank_no1_name(const char* value);
  inline void set_rank_no1_name(const char* value, size_t size);
  inline ::std::string* mutable_rank_no1_name();
  inline ::std::string* release_rank_no1_name();
  inline void set_allocated_rank_no1_name(::std::string* rank_no1_name);

  // repeated .pb.Struct_Country_Pk_Player_mirror mirror_list = 5;
  inline int mirror_list_size() const;
  inline void clear_mirror_list();
  static const int kMirrorListFieldNumber = 5;
  inline const ::pb::Struct_Country_Pk_Player_mirror& mirror_list(int index) const;
  inline ::pb::Struct_Country_Pk_Player_mirror* mutable_mirror_list(int index);
  inline ::pb::Struct_Country_Pk_Player_mirror* add_mirror_list();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Struct_Country_Pk_Player_mirror >&
      mirror_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Struct_Country_Pk_Player_mirror >*
      mutable_mirror_list();

  // repeated .pb.Struct_Country_Pk_History pk_history = 6;
  inline int pk_history_size() const;
  inline void clear_pk_history();
  static const int kPkHistoryFieldNumber = 6;
  inline const ::pb::Struct_Country_Pk_History& pk_history(int index) const;
  inline ::pb::Struct_Country_Pk_History* mutable_pk_history(int index);
  inline ::pb::Struct_Country_Pk_History* add_pk_history();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Struct_Country_Pk_History >&
      pk_history() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Struct_Country_Pk_History >*
      mutable_pk_history();

  // required bool is_pking = 7;
  inline bool has_is_pking() const;
  inline void clear_is_pking();
  static const int kIsPkingFieldNumber = 7;
  inline bool is_pking() const;
  inline void set_is_pking(bool value);

  // required uint32 total_win = 8;
  inline bool has_total_win() const;
  inline void clear_total_win();
  static const int kTotalWinFieldNumber = 8;
  inline ::google::protobuf::uint32 total_win() const;
  inline void set_total_win(::google::protobuf::uint32 value);

  // required uint32 total_lose = 9;
  inline bool has_total_lose() const;
  inline void clear_total_lose();
  static const int kTotalLoseFieldNumber = 9;
  inline ::google::protobuf::uint32 total_lose() const;
  inline void set_total_lose(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.Struct_Country_Pk_Info)
 private:
  inline void set_has_rank_no1_name();
  inline void clear_has_rank_no1_name();
  inline void set_has_is_pking();
  inline void clear_has_is_pking();
  inline void set_has_total_win();
  inline void clear_has_total_win();
  inline void set_has_total_lose();
  inline void clear_has_total_lose();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> recent_player_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > recent_player_score_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > recent_player_country_;
  ::std::string* rank_no1_name_;
  ::google::protobuf::RepeatedPtrField< ::pb::Struct_Country_Pk_Player_mirror > mirror_list_;
  ::google::protobuf::RepeatedPtrField< ::pb::Struct_Country_Pk_History > pk_history_;
  bool is_pking_;
  ::google::protobuf::uint32 total_win_;
  ::google::protobuf::uint32 total_lose_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static Struct_Country_Pk_Info* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Country_Task_Pk_Challenge : public ::google::protobuf::Message {
 public:
  C2GS_Country_Task_Pk_Challenge();
  virtual ~C2GS_Country_Task_Pk_Challenge();

  C2GS_Country_Task_Pk_Challenge(const C2GS_Country_Task_Pk_Challenge& from);

  inline C2GS_Country_Task_Pk_Challenge& operator=(const C2GS_Country_Task_Pk_Challenge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Country_Task_Pk_Challenge& default_instance();

  void Swap(C2GS_Country_Task_Pk_Challenge* other);

  // implements Message ----------------------------------------------

  C2GS_Country_Task_Pk_Challenge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Country_Task_Pk_Challenge& from);
  void MergeFrom(const C2GS_Country_Task_Pk_Challenge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 idx = 1;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 1;
  inline ::google::protobuf::uint32 idx() const;
  inline void set_idx(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Country_Task_Pk_Challenge)
 private:
  inline void set_has_idx();
  inline void clear_has_idx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 idx_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Country_Task_Pk_Challenge* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Monster_City_All_Info : public ::google::protobuf::Message {
 public:
  GS2C_Monster_City_All_Info();
  virtual ~GS2C_Monster_City_All_Info();

  GS2C_Monster_City_All_Info(const GS2C_Monster_City_All_Info& from);

  inline GS2C_Monster_City_All_Info& operator=(const GS2C_Monster_City_All_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Monster_City_All_Info& default_instance();

  void Swap(GS2C_Monster_City_All_Info* other);

  // implements Message ----------------------------------------------

  GS2C_Monster_City_All_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Monster_City_All_Info& from);
  void MergeFrom(const GS2C_Monster_City_All_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.MonsterCityLst all_info = 1;
  inline bool has_all_info() const;
  inline void clear_all_info();
  static const int kAllInfoFieldNumber = 1;
  inline const ::pb::MonsterCityLst& all_info() const;
  inline ::pb::MonsterCityLst* mutable_all_info();
  inline ::pb::MonsterCityLst* release_all_info();
  inline void set_allocated_all_info(::pb::MonsterCityLst* all_info);

  // optional uint64 CDEndTime = 2;
  inline bool has_cdendtime() const;
  inline void clear_cdendtime();
  static const int kCDEndTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 cdendtime() const;
  inline void set_cdendtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Monster_City_All_Info)
 private:
  inline void set_has_all_info();
  inline void clear_has_all_info();
  inline void set_has_cdendtime();
  inline void clear_has_cdendtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::MonsterCityLst* all_info_;
  ::google::protobuf::uint64 cdendtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Monster_City_All_Info* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Monster_City_Donate : public ::google::protobuf::Message {
 public:
  C2GS_Monster_City_Donate();
  virtual ~C2GS_Monster_City_Donate();

  C2GS_Monster_City_Donate(const C2GS_Monster_City_Donate& from);

  inline C2GS_Monster_City_Donate& operator=(const C2GS_Monster_City_Donate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Monster_City_Donate& default_instance();

  void Swap(C2GS_Monster_City_Donate* other);

  // implements Message ----------------------------------------------

  C2GS_Monster_City_Donate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Monster_City_Donate& from);
  void MergeFrom(const C2GS_Monster_City_Donate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 dest_country_id = 1;
  inline bool has_dest_country_id() const;
  inline void clear_dest_country_id();
  static const int kDestCountryIdFieldNumber = 1;
  inline ::google::protobuf::uint32 dest_country_id() const;
  inline void set_dest_country_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Monster_City_Donate)
 private:
  inline void set_has_dest_country_id();
  inline void clear_has_dest_country_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 dest_country_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Monster_City_Donate* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Monster_City_Donate : public ::google::protobuf::Message {
 public:
  GS2C_Monster_City_Donate();
  virtual ~GS2C_Monster_City_Donate();

  GS2C_Monster_City_Donate(const GS2C_Monster_City_Donate& from);

  inline GS2C_Monster_City_Donate& operator=(const GS2C_Monster_City_Donate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Monster_City_Donate& default_instance();

  void Swap(GS2C_Monster_City_Donate* other);

  // implements Message ----------------------------------------------

  GS2C_Monster_City_Donate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Monster_City_Donate& from);
  void MergeFrom(const GS2C_Monster_City_Donate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.StReward reward = 1;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 1;
  inline const ::pb::StReward& reward() const;
  inline ::pb::StReward* mutable_reward();
  inline ::pb::StReward* release_reward();
  inline void set_allocated_reward(::pb::StReward* reward);

  // optional .pb.MonsterCity info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::pb::MonsterCity& info() const;
  inline ::pb::MonsterCity* mutable_info();
  inline ::pb::MonsterCity* release_info();
  inline void set_allocated_info(::pb::MonsterCity* info);

  // optional uint64 CDEndTime = 3;
  inline bool has_cdendtime() const;
  inline void clear_cdendtime();
  static const int kCDEndTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 cdendtime() const;
  inline void set_cdendtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Monster_City_Donate)
 private:
  inline void set_has_reward();
  inline void clear_has_reward();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_cdendtime();
  inline void clear_has_cdendtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::StReward* reward_;
  ::pb::MonsterCity* info_;
  ::google::protobuf::uint64 cdendtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Monster_City_Donate* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Monster_City_Start_Invade : public ::google::protobuf::Message {
 public:
  C2GS_Monster_City_Start_Invade();
  virtual ~C2GS_Monster_City_Start_Invade();

  C2GS_Monster_City_Start_Invade(const C2GS_Monster_City_Start_Invade& from);

  inline C2GS_Monster_City_Start_Invade& operator=(const C2GS_Monster_City_Start_Invade& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Monster_City_Start_Invade& default_instance();

  void Swap(C2GS_Monster_City_Start_Invade* other);

  // implements Message ----------------------------------------------

  C2GS_Monster_City_Start_Invade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Monster_City_Start_Invade& from);
  void MergeFrom(const C2GS_Monster_City_Start_Invade& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 dest_country_id = 1;
  inline bool has_dest_country_id() const;
  inline void clear_dest_country_id();
  static const int kDestCountryIdFieldNumber = 1;
  inline ::google::protobuf::uint32 dest_country_id() const;
  inline void set_dest_country_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Monster_City_Start_Invade)
 private:
  inline void set_has_dest_country_id();
  inline void clear_has_dest_country_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 dest_country_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Monster_City_Start_Invade* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Monster_City_Invade_Rsp : public ::google::protobuf::Message {
 public:
  GS2C_Monster_City_Invade_Rsp();
  virtual ~GS2C_Monster_City_Invade_Rsp();

  GS2C_Monster_City_Invade_Rsp(const GS2C_Monster_City_Invade_Rsp& from);

  inline GS2C_Monster_City_Invade_Rsp& operator=(const GS2C_Monster_City_Invade_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Monster_City_Invade_Rsp& default_instance();

  void Swap(GS2C_Monster_City_Invade_Rsp* other);

  // implements Message ----------------------------------------------

  GS2C_Monster_City_Invade_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Monster_City_Invade_Rsp& from);
  void MergeFrom(const GS2C_Monster_City_Invade_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional .pb.MonsterCity info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::pb::MonsterCity& info() const;
  inline ::pb::MonsterCity* mutable_info();
  inline ::pb::MonsterCity* release_info();
  inline void set_allocated_info(::pb::MonsterCity* info);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Monster_City_Invade_Rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::MonsterCity* info_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Monster_City_Invade_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Country_Task_Insvest : public ::google::protobuf::Message {
 public:
  GS2C_Country_Task_Insvest();
  virtual ~GS2C_Country_Task_Insvest();

  GS2C_Country_Task_Insvest(const GS2C_Country_Task_Insvest& from);

  inline GS2C_Country_Task_Insvest& operator=(const GS2C_Country_Task_Insvest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Country_Task_Insvest& default_instance();

  void Swap(GS2C_Country_Task_Insvest* other);

  // implements Message ----------------------------------------------

  GS2C_Country_Task_Insvest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Country_Task_Insvest& from);
  void MergeFrom(const GS2C_Country_Task_Insvest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_begin = 1;
  inline bool has_is_begin() const;
  inline void clear_is_begin();
  static const int kIsBeginFieldNumber = 1;
  inline bool is_begin() const;
  inline void set_is_begin(bool value);

  // optional uint32 cur_stage = 2;
  inline bool has_cur_stage() const;
  inline void clear_cur_stage();
  static const int kCurStageFieldNumber = 2;
  inline ::google::protobuf::uint32 cur_stage() const;
  inline void set_cur_stage(::google::protobuf::uint32 value);

  // optional uint64 cur_stage_begin_time = 3;
  inline bool has_cur_stage_begin_time() const;
  inline void clear_cur_stage_begin_time();
  static const int kCurStageBeginTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 cur_stage_begin_time() const;
  inline void set_cur_stage_begin_time(::google::protobuf::uint64 value);

  // repeated uint32 cur_stage_now_country_invest_money = 4;
  inline int cur_stage_now_country_invest_money_size() const;
  inline void clear_cur_stage_now_country_invest_money();
  static const int kCurStageNowCountryInvestMoneyFieldNumber = 4;
  inline ::google::protobuf::uint32 cur_stage_now_country_invest_money(int index) const;
  inline void set_cur_stage_now_country_invest_money(int index, ::google::protobuf::uint32 value);
  inline void add_cur_stage_now_country_invest_money(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cur_stage_now_country_invest_money() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cur_stage_now_country_invest_money();

  // @@protoc_insertion_point(class_scope:pb.GS2C_Country_Task_Insvest)
 private:
  inline void set_has_is_begin();
  inline void clear_has_is_begin();
  inline void set_has_cur_stage();
  inline void clear_has_cur_stage();
  inline void set_has_cur_stage_begin_time();
  inline void clear_has_cur_stage_begin_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool is_begin_;
  ::google::protobuf::uint32 cur_stage_;
  ::google::protobuf::uint64 cur_stage_begin_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cur_stage_now_country_invest_money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Country_Task_Insvest* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Country_Invest_Player : public ::google::protobuf::Message {
 public:
  GS2C_Country_Invest_Player();
  virtual ~GS2C_Country_Invest_Player();

  GS2C_Country_Invest_Player(const GS2C_Country_Invest_Player& from);

  inline GS2C_Country_Invest_Player& operator=(const GS2C_Country_Invest_Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Country_Invest_Player& default_instance();

  void Swap(GS2C_Country_Invest_Player* other);

  // implements Message ----------------------------------------------

  GS2C_Country_Invest_Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Country_Invest_Player& from);
  void MergeFrom(const GS2C_Country_Invest_Player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 stageID = 1;
  inline bool has_stageid() const;
  inline void clear_stageid();
  static const int kStageIDFieldNumber = 1;
  inline ::google::protobuf::uint32 stageid() const;
  inline void set_stageid(::google::protobuf::uint32 value);

  // optional uint32 rankID = 2;
  inline bool has_rankid() const;
  inline void clear_rankid();
  static const int kRankIDFieldNumber = 2;
  inline ::google::protobuf::uint32 rankid() const;
  inline void set_rankid(::google::protobuf::uint32 value);

  // optional uint32 donateNum = 3;
  inline bool has_donatenum() const;
  inline void clear_donatenum();
  static const int kDonateNumFieldNumber = 3;
  inline ::google::protobuf::uint32 donatenum() const;
  inline void set_donatenum(::google::protobuf::uint32 value);

  // optional bool is_take_reward = 4;
  inline bool has_is_take_reward() const;
  inline void clear_is_take_reward();
  static const int kIsTakeRewardFieldNumber = 4;
  inline bool is_take_reward() const;
  inline void set_is_take_reward(bool value);

  // optional bool canTakeExReward = 5;
  inline bool has_cantakeexreward() const;
  inline void clear_cantakeexreward();
  static const int kCanTakeExRewardFieldNumber = 5;
  inline bool cantakeexreward() const;
  inline void set_cantakeexreward(bool value);

  // optional uint64 cd_time = 6;
  inline bool has_cd_time() const;
  inline void clear_cd_time();
  static const int kCdTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 cd_time() const;
  inline void set_cd_time(::google::protobuf::uint64 value);

  // optional .pb.GS2C_LootList rank_reward = 7;
  inline bool has_rank_reward() const;
  inline void clear_rank_reward();
  static const int kRankRewardFieldNumber = 7;
  inline const ::pb::GS2C_LootList& rank_reward() const;
  inline ::pb::GS2C_LootList* mutable_rank_reward();
  inline ::pb::GS2C_LootList* release_rank_reward();
  inline void set_allocated_rank_reward(::pb::GS2C_LootList* rank_reward);

  // optional .pb.GS2C_LootList win_reward = 8;
  inline bool has_win_reward() const;
  inline void clear_win_reward();
  static const int kWinRewardFieldNumber = 8;
  inline const ::pb::GS2C_LootList& win_reward() const;
  inline ::pb::GS2C_LootList* mutable_win_reward();
  inline ::pb::GS2C_LootList* release_win_reward();
  inline void set_allocated_win_reward(::pb::GS2C_LootList* win_reward);

  // optional uint32 total_donate = 9;
  inline bool has_total_donate() const;
  inline void clear_total_donate();
  static const int kTotalDonateFieldNumber = 9;
  inline ::google::protobuf::uint32 total_donate() const;
  inline void set_total_donate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Country_Invest_Player)
 private:
  inline void set_has_stageid();
  inline void clear_has_stageid();
  inline void set_has_rankid();
  inline void clear_has_rankid();
  inline void set_has_donatenum();
  inline void clear_has_donatenum();
  inline void set_has_is_take_reward();
  inline void clear_has_is_take_reward();
  inline void set_has_cantakeexreward();
  inline void clear_has_cantakeexreward();
  inline void set_has_cd_time();
  inline void clear_has_cd_time();
  inline void set_has_rank_reward();
  inline void clear_has_rank_reward();
  inline void set_has_win_reward();
  inline void clear_has_win_reward();
  inline void set_has_total_donate();
  inline void clear_has_total_donate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 stageid_;
  ::google::protobuf::uint32 rankid_;
  ::google::protobuf::uint32 donatenum_;
  bool is_take_reward_;
  bool cantakeexreward_;
  ::google::protobuf::uint64 cd_time_;
  ::pb::GS2C_LootList* rank_reward_;
  ::pb::GS2C_LootList* win_reward_;
  ::google::protobuf::uint32 total_donate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Country_Invest_Player* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Country_Invest_Donate : public ::google::protobuf::Message {
 public:
  C2GS_Country_Invest_Donate();
  virtual ~C2GS_Country_Invest_Donate();

  C2GS_Country_Invest_Donate(const C2GS_Country_Invest_Donate& from);

  inline C2GS_Country_Invest_Donate& operator=(const C2GS_Country_Invest_Donate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Country_Invest_Donate& default_instance();

  void Swap(C2GS_Country_Invest_Donate* other);

  // implements Message ----------------------------------------------

  C2GS_Country_Invest_Donate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Country_Invest_Donate& from);
  void MergeFrom(const C2GS_Country_Invest_Donate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 stage = 1;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 1;
  inline ::google::protobuf::uint32 stage() const;
  inline void set_stage(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Country_Invest_Donate)
 private:
  inline void set_has_stage();
  inline void clear_has_stage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 stage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Country_Invest_Donate* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Country_Invest_Donate_Ret : public ::google::protobuf::Message {
 public:
  GS2C_Country_Invest_Donate_Ret();
  virtual ~GS2C_Country_Invest_Donate_Ret();

  GS2C_Country_Invest_Donate_Ret(const GS2C_Country_Invest_Donate_Ret& from);

  inline GS2C_Country_Invest_Donate_Ret& operator=(const GS2C_Country_Invest_Donate_Ret& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Country_Invest_Donate_Ret& default_instance();

  void Swap(GS2C_Country_Invest_Donate_Ret* other);

  // implements Message ----------------------------------------------

  GS2C_Country_Invest_Donate_Ret* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Country_Invest_Donate_Ret& from);
  void MergeFrom(const GS2C_Country_Invest_Donate_Ret& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isSuccess = 1;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIsSuccessFieldNumber = 1;
  inline bool issuccess() const;
  inline void set_issuccess(bool value);

  // optional .pb.Country_Task_Err errRet = 2;
  inline bool has_errret() const;
  inline void clear_errret();
  static const int kErrRetFieldNumber = 2;
  inline ::pb::Country_Task_Err errret() const;
  inline void set_errret(::pb::Country_Task_Err value);

  // optional uint32 my_invest_money = 3;
  inline bool has_my_invest_money() const;
  inline void clear_my_invest_money();
  static const int kMyInvestMoneyFieldNumber = 3;
  inline ::google::protobuf::uint32 my_invest_money() const;
  inline void set_my_invest_money(::google::protobuf::uint32 value);

  // optional uint32 country_invest_money = 4;
  inline bool has_country_invest_money() const;
  inline void clear_country_invest_money();
  static const int kCountryInvestMoneyFieldNumber = 4;
  inline ::google::protobuf::uint32 country_invest_money() const;
  inline void set_country_invest_money(::google::protobuf::uint32 value);

  // optional uint64 cd_time = 5;
  inline bool has_cd_time() const;
  inline void clear_cd_time();
  static const int kCdTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 cd_time() const;
  inline void set_cd_time(::google::protobuf::uint64 value);

  // optional uint32 total_donate = 6;
  inline bool has_total_donate() const;
  inline void clear_total_donate();
  static const int kTotalDonateFieldNumber = 6;
  inline ::google::protobuf::uint32 total_donate() const;
  inline void set_total_donate(::google::protobuf::uint32 value);

  // optional .pb.GS2C_LootList successAward = 7;
  inline bool has_successaward() const;
  inline void clear_successaward();
  static const int kSuccessAwardFieldNumber = 7;
  inline const ::pb::GS2C_LootList& successaward() const;
  inline ::pb::GS2C_LootList* mutable_successaward();
  inline ::pb::GS2C_LootList* release_successaward();
  inline void set_allocated_successaward(::pb::GS2C_LootList* successaward);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Country_Invest_Donate_Ret)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();
  inline void set_has_errret();
  inline void clear_has_errret();
  inline void set_has_my_invest_money();
  inline void clear_has_my_invest_money();
  inline void set_has_country_invest_money();
  inline void clear_has_country_invest_money();
  inline void set_has_cd_time();
  inline void clear_has_cd_time();
  inline void set_has_total_donate();
  inline void clear_has_total_donate();
  inline void set_has_successaward();
  inline void clear_has_successaward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool issuccess_;
  int errret_;
  ::google::protobuf::uint32 my_invest_money_;
  ::google::protobuf::uint32 country_invest_money_;
  ::google::protobuf::uint64 cd_time_;
  ::pb::GS2C_LootList* successaward_;
  ::google::protobuf::uint32 total_donate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Country_Invest_Donate_Ret* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Country_Invest_Take_Reward : public ::google::protobuf::Message {
 public:
  C2GS_Country_Invest_Take_Reward();
  virtual ~C2GS_Country_Invest_Take_Reward();

  C2GS_Country_Invest_Take_Reward(const C2GS_Country_Invest_Take_Reward& from);

  inline C2GS_Country_Invest_Take_Reward& operator=(const C2GS_Country_Invest_Take_Reward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Country_Invest_Take_Reward& default_instance();

  void Swap(C2GS_Country_Invest_Take_Reward* other);

  // implements Message ----------------------------------------------

  C2GS_Country_Invest_Take_Reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Country_Invest_Take_Reward& from);
  void MergeFrom(const C2GS_Country_Invest_Take_Reward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 stage = 1;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 1;
  inline ::google::protobuf::uint32 stage() const;
  inline void set_stage(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Country_Invest_Take_Reward)
 private:
  inline void set_has_stage();
  inline void clear_has_stage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 stage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Country_Invest_Take_Reward* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Country_Invest_Take_Reward : public ::google::protobuf::Message {
 public:
  GS2C_Country_Invest_Take_Reward();
  virtual ~GS2C_Country_Invest_Take_Reward();

  GS2C_Country_Invest_Take_Reward(const GS2C_Country_Invest_Take_Reward& from);

  inline GS2C_Country_Invest_Take_Reward& operator=(const GS2C_Country_Invest_Take_Reward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Country_Invest_Take_Reward& default_instance();

  void Swap(GS2C_Country_Invest_Take_Reward* other);

  // implements Message ----------------------------------------------

  GS2C_Country_Invest_Take_Reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Country_Invest_Take_Reward& from);
  void MergeFrom(const GS2C_Country_Invest_Take_Reward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isSuccess = 1;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIsSuccessFieldNumber = 1;
  inline bool issuccess() const;
  inline void set_issuccess(bool value);

  // optional .pb.Country_Task_Err errRet = 2;
  inline bool has_errret() const;
  inline void clear_errret();
  static const int kErrRetFieldNumber = 2;
  inline ::pb::Country_Task_Err errret() const;
  inline void set_errret(::pb::Country_Task_Err value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Country_Invest_Take_Reward)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();
  inline void set_has_errret();
  inline void clear_has_errret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool issuccess_;
  int errret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Country_Invest_Take_Reward* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Country_Invest_Clear_CD_Ret : public ::google::protobuf::Message {
 public:
  GS2C_Country_Invest_Clear_CD_Ret();
  virtual ~GS2C_Country_Invest_Clear_CD_Ret();

  GS2C_Country_Invest_Clear_CD_Ret(const GS2C_Country_Invest_Clear_CD_Ret& from);

  inline GS2C_Country_Invest_Clear_CD_Ret& operator=(const GS2C_Country_Invest_Clear_CD_Ret& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Country_Invest_Clear_CD_Ret& default_instance();

  void Swap(GS2C_Country_Invest_Clear_CD_Ret* other);

  // implements Message ----------------------------------------------

  GS2C_Country_Invest_Clear_CD_Ret* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Country_Invest_Clear_CD_Ret& from);
  void MergeFrom(const GS2C_Country_Invest_Clear_CD_Ret& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isSuccess = 1;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIsSuccessFieldNumber = 1;
  inline bool issuccess() const;
  inline void set_issuccess(bool value);

  // optional .pb.Country_Task_Err errRet = 2;
  inline bool has_errret() const;
  inline void clear_errret();
  static const int kErrRetFieldNumber = 2;
  inline ::pb::Country_Task_Err errret() const;
  inline void set_errret(::pb::Country_Task_Err value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Country_Invest_Clear_CD_Ret)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();
  inline void set_has_errret();
  inline void clear_has_errret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool issuccess_;
  int errret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Country_Invest_Clear_CD_Ret* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Country_Task_Occupy : public ::google::protobuf::Message {
 public:
  GS2C_Country_Task_Occupy();
  virtual ~GS2C_Country_Task_Occupy();

  GS2C_Country_Task_Occupy(const GS2C_Country_Task_Occupy& from);

  inline GS2C_Country_Task_Occupy& operator=(const GS2C_Country_Task_Occupy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Country_Task_Occupy& default_instance();

  void Swap(GS2C_Country_Task_Occupy* other);

  // implements Message ----------------------------------------------

  GS2C_Country_Task_Occupy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Country_Task_Occupy& from);
  void MergeFrom(const GS2C_Country_Task_Occupy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_begin = 1;
  inline bool has_is_begin() const;
  inline void clear_is_begin();
  static const int kIsBeginFieldNumber = 1;
  inline bool is_begin() const;
  inline void set_is_begin(bool value);

  // optional uint32 cur_stage = 2;
  inline bool has_cur_stage() const;
  inline void clear_cur_stage();
  static const int kCurStageFieldNumber = 2;
  inline ::google::protobuf::uint32 cur_stage() const;
  inline void set_cur_stage(::google::protobuf::uint32 value);

  // optional uint64 cur_stage_begin_time = 3;
  inline bool has_cur_stage_begin_time() const;
  inline void clear_cur_stage_begin_time();
  static const int kCurStageBeginTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 cur_stage_begin_time() const;
  inline void set_cur_stage_begin_time(::google::protobuf::uint64 value);

  // repeated uint32 cur_stage_now_country_have_citys = 4;
  inline int cur_stage_now_country_have_citys_size() const;
  inline void clear_cur_stage_now_country_have_citys();
  static const int kCurStageNowCountryHaveCitysFieldNumber = 4;
  inline ::google::protobuf::uint32 cur_stage_now_country_have_citys(int index) const;
  inline void set_cur_stage_now_country_have_citys(int index, ::google::protobuf::uint32 value);
  inline void add_cur_stage_now_country_have_citys(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cur_stage_now_country_have_citys() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cur_stage_now_country_have_citys();

  // repeated uint32 cur_stage_begin_have_citys = 5;
  inline int cur_stage_begin_have_citys_size() const;
  inline void clear_cur_stage_begin_have_citys();
  static const int kCurStageBeginHaveCitysFieldNumber = 5;
  inline ::google::protobuf::uint32 cur_stage_begin_have_citys(int index) const;
  inline void set_cur_stage_begin_have_citys(int index, ::google::protobuf::uint32 value);
  inline void add_cur_stage_begin_have_citys(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cur_stage_begin_have_citys() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cur_stage_begin_have_citys();

  // repeated uint32 need_total_citys = 6;
  inline int need_total_citys_size() const;
  inline void clear_need_total_citys();
  static const int kNeedTotalCitysFieldNumber = 6;
  inline ::google::protobuf::uint32 need_total_citys(int index) const;
  inline void set_need_total_citys(int index, ::google::protobuf::uint32 value);
  inline void add_need_total_citys(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      need_total_citys() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_need_total_citys();

  // @@protoc_insertion_point(class_scope:pb.GS2C_Country_Task_Occupy)
 private:
  inline void set_has_is_begin();
  inline void clear_has_is_begin();
  inline void set_has_cur_stage();
  inline void clear_has_cur_stage();
  inline void set_has_cur_stage_begin_time();
  inline void clear_has_cur_stage_begin_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool is_begin_;
  ::google::protobuf::uint32 cur_stage_;
  ::google::protobuf::uint64 cur_stage_begin_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cur_stage_now_country_have_citys_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cur_stage_begin_have_citys_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > need_total_citys_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Country_Task_Occupy* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Country_Occupy_Player : public ::google::protobuf::Message {
 public:
  GS2C_Country_Occupy_Player();
  virtual ~GS2C_Country_Occupy_Player();

  GS2C_Country_Occupy_Player(const GS2C_Country_Occupy_Player& from);

  inline GS2C_Country_Occupy_Player& operator=(const GS2C_Country_Occupy_Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Country_Occupy_Player& default_instance();

  void Swap(GS2C_Country_Occupy_Player* other);

  // implements Message ----------------------------------------------

  GS2C_Country_Occupy_Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Country_Occupy_Player& from);
  void MergeFrom(const GS2C_Country_Occupy_Player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 stageID = 1;
  inline bool has_stageid() const;
  inline void clear_stageid();
  static const int kStageIDFieldNumber = 1;
  inline ::google::protobuf::uint32 stageid() const;
  inline void set_stageid(::google::protobuf::uint32 value);

  // optional uint32 rankID = 2;
  inline bool has_rankid() const;
  inline void clear_rankid();
  static const int kRankIDFieldNumber = 2;
  inline ::google::protobuf::uint32 rankid() const;
  inline void set_rankid(::google::protobuf::uint32 value);

  // optional uint32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional bool is_take_reward = 4;
  inline bool has_is_take_reward() const;
  inline void clear_is_take_reward();
  static const int kIsTakeRewardFieldNumber = 4;
  inline bool is_take_reward() const;
  inline void set_is_take_reward(bool value);

  // optional bool canTakeExReward = 5;
  inline bool has_cantakeexreward() const;
  inline void clear_cantakeexreward();
  static const int kCanTakeExRewardFieldNumber = 5;
  inline bool cantakeexreward() const;
  inline void set_cantakeexreward(bool value);

  // optional .pb.GS2C_LootList rank_reward = 6;
  inline bool has_rank_reward() const;
  inline void clear_rank_reward();
  static const int kRankRewardFieldNumber = 6;
  inline const ::pb::GS2C_LootList& rank_reward() const;
  inline ::pb::GS2C_LootList* mutable_rank_reward();
  inline ::pb::GS2C_LootList* release_rank_reward();
  inline void set_allocated_rank_reward(::pb::GS2C_LootList* rank_reward);

  // optional .pb.GS2C_LootList win_reward = 7;
  inline bool has_win_reward() const;
  inline void clear_win_reward();
  static const int kWinRewardFieldNumber = 7;
  inline const ::pb::GS2C_LootList& win_reward() const;
  inline ::pb::GS2C_LootList* mutable_win_reward();
  inline ::pb::GS2C_LootList* release_win_reward();
  inline void set_allocated_win_reward(::pb::GS2C_LootList* win_reward);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Country_Occupy_Player)
 private:
  inline void set_has_stageid();
  inline void clear_has_stageid();
  inline void set_has_rankid();
  inline void clear_has_rankid();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_is_take_reward();
  inline void clear_has_is_take_reward();
  inline void set_has_cantakeexreward();
  inline void clear_has_cantakeexreward();
  inline void set_has_rank_reward();
  inline void clear_has_rank_reward();
  inline void set_has_win_reward();
  inline void clear_has_win_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 stageid_;
  ::google::protobuf::uint32 rankid_;
  ::google::protobuf::uint32 rank_;
  bool is_take_reward_;
  bool cantakeexreward_;
  ::pb::GS2C_LootList* rank_reward_;
  ::pb::GS2C_LootList* win_reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Country_Occupy_Player* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Country_Occupy_Take_Reward : public ::google::protobuf::Message {
 public:
  C2GS_Country_Occupy_Take_Reward();
  virtual ~C2GS_Country_Occupy_Take_Reward();

  C2GS_Country_Occupy_Take_Reward(const C2GS_Country_Occupy_Take_Reward& from);

  inline C2GS_Country_Occupy_Take_Reward& operator=(const C2GS_Country_Occupy_Take_Reward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Country_Occupy_Take_Reward& default_instance();

  void Swap(C2GS_Country_Occupy_Take_Reward* other);

  // implements Message ----------------------------------------------

  C2GS_Country_Occupy_Take_Reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Country_Occupy_Take_Reward& from);
  void MergeFrom(const C2GS_Country_Occupy_Take_Reward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 stage = 1;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 1;
  inline ::google::protobuf::uint32 stage() const;
  inline void set_stage(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Country_Occupy_Take_Reward)
 private:
  inline void set_has_stage();
  inline void clear_has_stage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 stage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Country_Occupy_Take_Reward* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Country_Occupy_Take_Reward : public ::google::protobuf::Message {
 public:
  GS2C_Country_Occupy_Take_Reward();
  virtual ~GS2C_Country_Occupy_Take_Reward();

  GS2C_Country_Occupy_Take_Reward(const GS2C_Country_Occupy_Take_Reward& from);

  inline GS2C_Country_Occupy_Take_Reward& operator=(const GS2C_Country_Occupy_Take_Reward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Country_Occupy_Take_Reward& default_instance();

  void Swap(GS2C_Country_Occupy_Take_Reward* other);

  // implements Message ----------------------------------------------

  GS2C_Country_Occupy_Take_Reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Country_Occupy_Take_Reward& from);
  void MergeFrom(const GS2C_Country_Occupy_Take_Reward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isSuccess = 1;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIsSuccessFieldNumber = 1;
  inline bool issuccess() const;
  inline void set_issuccess(bool value);

  // optional .pb.Country_Task_Err errRet = 2;
  inline bool has_errret() const;
  inline void clear_errret();
  static const int kErrRetFieldNumber = 2;
  inline ::pb::Country_Task_Err errret() const;
  inline void set_errret(::pb::Country_Task_Err value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Country_Occupy_Take_Reward)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();
  inline void set_has_errret();
  inline void clear_has_errret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool issuccess_;
  int errret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Country_Occupy_Take_Reward* default_instance_;
};
// -------------------------------------------------------------------

class OneTaskInfo : public ::google::protobuf::Message {
 public:
  OneTaskInfo();
  virtual ~OneTaskInfo();

  OneTaskInfo(const OneTaskInfo& from);

  inline OneTaskInfo& operator=(const OneTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneTaskInfo& default_instance();

  void Swap(OneTaskInfo* other);

  // implements Message ----------------------------------------------

  OneTaskInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OneTaskInfo& from);
  void MergeFrom(const OneTaskInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 stageid = 1;
  inline bool has_stageid() const;
  inline void clear_stageid();
  static const int kStageidFieldNumber = 1;
  inline ::google::protobuf::uint32 stageid() const;
  inline void set_stageid(::google::protobuf::uint32 value);

  // optional uint32 taskid = 2;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskidFieldNumber = 2;
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // optional uint32 curCompletion = 3;
  inline bool has_curcompletion() const;
  inline void clear_curcompletion();
  static const int kCurCompletionFieldNumber = 3;
  inline ::google::protobuf::uint32 curcompletion() const;
  inline void set_curcompletion(::google::protobuf::uint32 value);

  // optional bool isTakeAward = 4;
  inline bool has_istakeaward() const;
  inline void clear_istakeaward();
  static const int kIsTakeAwardFieldNumber = 4;
  inline bool istakeaward() const;
  inline void set_istakeaward(bool value);

  // @@protoc_insertion_point(class_scope:pb.OneTaskInfo)
 private:
  inline void set_has_stageid();
  inline void clear_has_stageid();
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_curcompletion();
  inline void clear_has_curcompletion();
  inline void set_has_istakeaward();
  inline void clear_has_istakeaward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 stageid_;
  ::google::protobuf::uint32 taskid_;
  ::google::protobuf::uint32 curcompletion_;
  bool istakeaward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static OneTaskInfo* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_PersonalTask_Info : public ::google::protobuf::Message {
 public:
  GS2C_PersonalTask_Info();
  virtual ~GS2C_PersonalTask_Info();

  GS2C_PersonalTask_Info(const GS2C_PersonalTask_Info& from);

  inline GS2C_PersonalTask_Info& operator=(const GS2C_PersonalTask_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_PersonalTask_Info& default_instance();

  void Swap(GS2C_PersonalTask_Info* other);

  // implements Message ----------------------------------------------

  GS2C_PersonalTask_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_PersonalTask_Info& from);
  void MergeFrom(const GS2C_PersonalTask_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_begin = 1;
  inline bool has_is_begin() const;
  inline void clear_is_begin();
  static const int kIsBeginFieldNumber = 1;
  inline bool is_begin() const;
  inline void set_is_begin(bool value);

  // optional uint32 curStage = 2;
  inline bool has_curstage() const;
  inline void clear_curstage();
  static const int kCurStageFieldNumber = 2;
  inline ::google::protobuf::uint32 curstage() const;
  inline void set_curstage(::google::protobuf::uint32 value);

  // optional uint32 curSubStage = 3;
  inline bool has_cursubstage() const;
  inline void clear_cursubstage();
  static const int kCurSubStageFieldNumber = 3;
  inline ::google::protobuf::uint32 cursubstage() const;
  inline void set_cursubstage(::google::protobuf::uint32 value);

  // optional uint64 taskBeginTime = 4;
  inline bool has_taskbegintime() const;
  inline void clear_taskbegintime();
  static const int kTaskBeginTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 taskbegintime() const;
  inline void set_taskbegintime(::google::protobuf::uint64 value);

  // repeated .pb.OneTaskInfo tasks = 5;
  inline int tasks_size() const;
  inline void clear_tasks();
  static const int kTasksFieldNumber = 5;
  inline const ::pb::OneTaskInfo& tasks(int index) const;
  inline ::pb::OneTaskInfo* mutable_tasks(int index);
  inline ::pb::OneTaskInfo* add_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::OneTaskInfo >&
      tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::OneTaskInfo >*
      mutable_tasks();

  // @@protoc_insertion_point(class_scope:pb.GS2C_PersonalTask_Info)
 private:
  inline void set_has_is_begin();
  inline void clear_has_is_begin();
  inline void set_has_curstage();
  inline void clear_has_curstage();
  inline void set_has_cursubstage();
  inline void clear_has_cursubstage();
  inline void set_has_taskbegintime();
  inline void clear_has_taskbegintime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool is_begin_;
  ::google::protobuf::uint32 curstage_;
  ::google::protobuf::uint64 taskbegintime_;
  ::google::protobuf::RepeatedPtrField< ::pb::OneTaskInfo > tasks_;
  ::google::protobuf::uint32 cursubstage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static GS2C_PersonalTask_Info* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_PersonalTask_One : public ::google::protobuf::Message {
 public:
  C2GS_PersonalTask_One();
  virtual ~C2GS_PersonalTask_One();

  C2GS_PersonalTask_One(const C2GS_PersonalTask_One& from);

  inline C2GS_PersonalTask_One& operator=(const C2GS_PersonalTask_One& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_PersonalTask_One& default_instance();

  void Swap(C2GS_PersonalTask_One* other);

  // implements Message ----------------------------------------------

  C2GS_PersonalTask_One* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_PersonalTask_One& from);
  void MergeFrom(const C2GS_PersonalTask_One& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 taskid = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskidFieldNumber = 1;
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_PersonalTask_One)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 taskid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static C2GS_PersonalTask_One* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_PersonalTask_Take_Award : public ::google::protobuf::Message {
 public:
  C2GS_PersonalTask_Take_Award();
  virtual ~C2GS_PersonalTask_Take_Award();

  C2GS_PersonalTask_Take_Award(const C2GS_PersonalTask_Take_Award& from);

  inline C2GS_PersonalTask_Take_Award& operator=(const C2GS_PersonalTask_Take_Award& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_PersonalTask_Take_Award& default_instance();

  void Swap(C2GS_PersonalTask_Take_Award* other);

  // implements Message ----------------------------------------------

  C2GS_PersonalTask_Take_Award* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_PersonalTask_Take_Award& from);
  void MergeFrom(const C2GS_PersonalTask_Take_Award& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 taskid = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskidFieldNumber = 1;
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_PersonalTask_Take_Award)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 taskid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static C2GS_PersonalTask_Take_Award* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_PersonalTask_Take_Award : public ::google::protobuf::Message {
 public:
  GS2C_PersonalTask_Take_Award();
  virtual ~GS2C_PersonalTask_Take_Award();

  GS2C_PersonalTask_Take_Award(const GS2C_PersonalTask_Take_Award& from);

  inline GS2C_PersonalTask_Take_Award& operator=(const GS2C_PersonalTask_Take_Award& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_PersonalTask_Take_Award& default_instance();

  void Swap(GS2C_PersonalTask_Take_Award* other);

  // implements Message ----------------------------------------------

  GS2C_PersonalTask_Take_Award* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_PersonalTask_Take_Award& from);
  void MergeFrom(const GS2C_PersonalTask_Take_Award& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isSuccess = 1;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIsSuccessFieldNumber = 1;
  inline bool issuccess() const;
  inline void set_issuccess(bool value);

  // optional .pb.Country_Task_Err errRet = 2;
  inline bool has_errret() const;
  inline void clear_errret();
  static const int kErrRetFieldNumber = 2;
  inline ::pb::Country_Task_Err errret() const;
  inline void set_errret(::pb::Country_Task_Err value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_PersonalTask_Take_Award)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();
  inline void set_has_errret();
  inline void clear_has_errret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool issuccess_;
  int errret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static GS2C_PersonalTask_Take_Award* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Notice_Country_NPC_NextTime : public ::google::protobuf::Message {
 public:
  GS2C_Notice_Country_NPC_NextTime();
  virtual ~GS2C_Notice_Country_NPC_NextTime();

  GS2C_Notice_Country_NPC_NextTime(const GS2C_Notice_Country_NPC_NextTime& from);

  inline GS2C_Notice_Country_NPC_NextTime& operator=(const GS2C_Notice_Country_NPC_NextTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Notice_Country_NPC_NextTime& default_instance();

  void Swap(GS2C_Notice_Country_NPC_NextTime* other);

  // implements Message ----------------------------------------------

  GS2C_Notice_Country_NPC_NextTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Notice_Country_NPC_NextTime& from);
  void MergeFrom(const GS2C_Notice_Country_NPC_NextTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 npcType = 1;
  inline bool has_npctype() const;
  inline void clear_npctype();
  static const int kNpcTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 npctype() const;
  inline void set_npctype(::google::protobuf::uint32 value);

  // optional uint64 nextTime = 2;
  inline bool has_nexttime() const;
  inline void clear_nexttime();
  static const int kNextTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 nexttime() const;
  inline void set_nexttime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Notice_Country_NPC_NextTime)
 private:
  inline void set_has_npctype();
  inline void clear_has_npctype();
  inline void set_has_nexttime();
  inline void clear_has_nexttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 nexttime_;
  ::google::protobuf::uint32 npctype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Notice_Country_NPC_NextTime* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Country_Task_DefenceBorderland : public ::google::protobuf::Message {
 public:
  GS2C_Country_Task_DefenceBorderland();
  virtual ~GS2C_Country_Task_DefenceBorderland();

  GS2C_Country_Task_DefenceBorderland(const GS2C_Country_Task_DefenceBorderland& from);

  inline GS2C_Country_Task_DefenceBorderland& operator=(const GS2C_Country_Task_DefenceBorderland& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Country_Task_DefenceBorderland& default_instance();

  void Swap(GS2C_Country_Task_DefenceBorderland* other);

  // implements Message ----------------------------------------------

  GS2C_Country_Task_DefenceBorderland* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Country_Task_DefenceBorderland& from);
  void MergeFrom(const GS2C_Country_Task_DefenceBorderland& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_begin = 1;
  inline bool has_is_begin() const;
  inline void clear_is_begin();
  static const int kIsBeginFieldNumber = 1;
  inline bool is_begin() const;
  inline void set_is_begin(bool value);

  // optional uint32 cur_stage = 2;
  inline bool has_cur_stage() const;
  inline void clear_cur_stage();
  static const int kCurStageFieldNumber = 2;
  inline ::google::protobuf::uint32 cur_stage() const;
  inline void set_cur_stage(::google::protobuf::uint32 value);

  // optional uint32 cur_sub_stage = 3;
  inline bool has_cur_sub_stage() const;
  inline void clear_cur_sub_stage();
  static const int kCurSubStageFieldNumber = 3;
  inline ::google::protobuf::uint32 cur_sub_stage() const;
  inline void set_cur_sub_stage(::google::protobuf::uint32 value);

  // optional uint64 cur_stage_end_time = 4;
  inline bool has_cur_stage_end_time() const;
  inline void clear_cur_stage_end_time();
  static const int kCurStageEndTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 cur_stage_end_time() const;
  inline void set_cur_stage_end_time(::google::protobuf::uint64 value);

  // optional uint64 cur_sub_stage_end_time = 5;
  inline bool has_cur_sub_stage_end_time() const;
  inline void clear_cur_sub_stage_end_time();
  static const int kCurSubStageEndTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 cur_sub_stage_end_time() const;
  inline void set_cur_sub_stage_end_time(::google::protobuf::uint64 value);

  // repeated bool is_country_failed = 6;
  inline int is_country_failed_size() const;
  inline void clear_is_country_failed();
  static const int kIsCountryFailedFieldNumber = 6;
  inline bool is_country_failed(int index) const;
  inline void set_is_country_failed(int index, bool value);
  inline void add_is_country_failed(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      is_country_failed() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_is_country_failed();

  // repeated uint32 cityid_monster_attack = 7;
  inline int cityid_monster_attack_size() const;
  inline void clear_cityid_monster_attack();
  static const int kCityidMonsterAttackFieldNumber = 7;
  inline ::google::protobuf::uint32 cityid_monster_attack(int index) const;
  inline void set_cityid_monster_attack(int index, ::google::protobuf::uint32 value);
  inline void add_cityid_monster_attack(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cityid_monster_attack() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cityid_monster_attack();

  // @@protoc_insertion_point(class_scope:pb.GS2C_Country_Task_DefenceBorderland)
 private:
  inline void set_has_is_begin();
  inline void clear_has_is_begin();
  inline void set_has_cur_stage();
  inline void clear_has_cur_stage();
  inline void set_has_cur_sub_stage();
  inline void clear_has_cur_sub_stage();
  inline void set_has_cur_stage_end_time();
  inline void clear_has_cur_stage_end_time();
  inline void set_has_cur_sub_stage_end_time();
  inline void clear_has_cur_sub_stage_end_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool is_begin_;
  ::google::protobuf::uint32 cur_stage_;
  ::google::protobuf::uint64 cur_stage_end_time_;
  ::google::protobuf::uint64 cur_sub_stage_end_time_;
  ::google::protobuf::RepeatedField< bool > is_country_failed_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cityid_monster_attack_;
  ::google::protobuf::uint32 cur_sub_stage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Country_Task_DefenceBorderland* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Country_DefenceBorderland_Player : public ::google::protobuf::Message {
 public:
  GS2C_Country_DefenceBorderland_Player();
  virtual ~GS2C_Country_DefenceBorderland_Player();

  GS2C_Country_DefenceBorderland_Player(const GS2C_Country_DefenceBorderland_Player& from);

  inline GS2C_Country_DefenceBorderland_Player& operator=(const GS2C_Country_DefenceBorderland_Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Country_DefenceBorderland_Player& default_instance();

  void Swap(GS2C_Country_DefenceBorderland_Player* other);

  // implements Message ----------------------------------------------

  GS2C_Country_DefenceBorderland_Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Country_DefenceBorderland_Player& from);
  void MergeFrom(const GS2C_Country_DefenceBorderland_Player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 stageID = 1;
  inline bool has_stageid() const;
  inline void clear_stageid();
  static const int kStageIDFieldNumber = 1;
  inline ::google::protobuf::uint32 stageid() const;
  inline void set_stageid(::google::protobuf::uint32 value);

  // optional uint32 rankID = 2;
  inline bool has_rankid() const;
  inline void clear_rankid();
  static const int kRankIDFieldNumber = 2;
  inline ::google::protobuf::uint32 rankid() const;
  inline void set_rankid(::google::protobuf::uint32 value);

  // optional uint32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint32 killNum = 4;
  inline bool has_killnum() const;
  inline void clear_killnum();
  static const int kKillNumFieldNumber = 4;
  inline ::google::protobuf::uint32 killnum() const;
  inline void set_killnum(::google::protobuf::uint32 value);

  // optional bool is_take_reward = 5;
  inline bool has_is_take_reward() const;
  inline void clear_is_take_reward();
  static const int kIsTakeRewardFieldNumber = 5;
  inline bool is_take_reward() const;
  inline void set_is_take_reward(bool value);

  // optional bool canTakeExReward = 6;
  inline bool has_cantakeexreward() const;
  inline void clear_cantakeexreward();
  static const int kCanTakeExRewardFieldNumber = 6;
  inline bool cantakeexreward() const;
  inline void set_cantakeexreward(bool value);

  // optional .pb.GS2C_LootList rank_reward = 7;
  inline bool has_rank_reward() const;
  inline void clear_rank_reward();
  static const int kRankRewardFieldNumber = 7;
  inline const ::pb::GS2C_LootList& rank_reward() const;
  inline ::pb::GS2C_LootList* mutable_rank_reward();
  inline ::pb::GS2C_LootList* release_rank_reward();
  inline void set_allocated_rank_reward(::pb::GS2C_LootList* rank_reward);

  // optional .pb.GS2C_LootList win_reward = 8;
  inline bool has_win_reward() const;
  inline void clear_win_reward();
  static const int kWinRewardFieldNumber = 8;
  inline const ::pb::GS2C_LootList& win_reward() const;
  inline ::pb::GS2C_LootList* mutable_win_reward();
  inline ::pb::GS2C_LootList* release_win_reward();
  inline void set_allocated_win_reward(::pb::GS2C_LootList* win_reward);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Country_DefenceBorderland_Player)
 private:
  inline void set_has_stageid();
  inline void clear_has_stageid();
  inline void set_has_rankid();
  inline void clear_has_rankid();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_killnum();
  inline void clear_has_killnum();
  inline void set_has_is_take_reward();
  inline void clear_has_is_take_reward();
  inline void set_has_cantakeexreward();
  inline void clear_has_cantakeexreward();
  inline void set_has_rank_reward();
  inline void clear_has_rank_reward();
  inline void set_has_win_reward();
  inline void clear_has_win_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 stageid_;
  ::google::protobuf::uint32 rankid_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 killnum_;
  ::pb::GS2C_LootList* rank_reward_;
  ::pb::GS2C_LootList* win_reward_;
  bool is_take_reward_;
  bool cantakeexreward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Country_DefenceBorderland_Player* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Country_DefenceBorderland_Take_Reward : public ::google::protobuf::Message {
 public:
  C2GS_Country_DefenceBorderland_Take_Reward();
  virtual ~C2GS_Country_DefenceBorderland_Take_Reward();

  C2GS_Country_DefenceBorderland_Take_Reward(const C2GS_Country_DefenceBorderland_Take_Reward& from);

  inline C2GS_Country_DefenceBorderland_Take_Reward& operator=(const C2GS_Country_DefenceBorderland_Take_Reward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Country_DefenceBorderland_Take_Reward& default_instance();

  void Swap(C2GS_Country_DefenceBorderland_Take_Reward* other);

  // implements Message ----------------------------------------------

  C2GS_Country_DefenceBorderland_Take_Reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Country_DefenceBorderland_Take_Reward& from);
  void MergeFrom(const C2GS_Country_DefenceBorderland_Take_Reward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 stage = 1;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 1;
  inline ::google::protobuf::uint32 stage() const;
  inline void set_stage(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Country_DefenceBorderland_Take_Reward)
 private:
  inline void set_has_stage();
  inline void clear_has_stage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 stage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Country_DefenceBorderland_Take_Reward* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Country_DefenceBorderland_Take_Reward : public ::google::protobuf::Message {
 public:
  GS2C_Country_DefenceBorderland_Take_Reward();
  virtual ~GS2C_Country_DefenceBorderland_Take_Reward();

  GS2C_Country_DefenceBorderland_Take_Reward(const GS2C_Country_DefenceBorderland_Take_Reward& from);

  inline GS2C_Country_DefenceBorderland_Take_Reward& operator=(const GS2C_Country_DefenceBorderland_Take_Reward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Country_DefenceBorderland_Take_Reward& default_instance();

  void Swap(GS2C_Country_DefenceBorderland_Take_Reward* other);

  // implements Message ----------------------------------------------

  GS2C_Country_DefenceBorderland_Take_Reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Country_DefenceBorderland_Take_Reward& from);
  void MergeFrom(const GS2C_Country_DefenceBorderland_Take_Reward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isSuccess = 1;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIsSuccessFieldNumber = 1;
  inline bool issuccess() const;
  inline void set_issuccess(bool value);

  // optional .pb.Country_Task_Err errRet = 2;
  inline bool has_errret() const;
  inline void clear_errret();
  static const int kErrRetFieldNumber = 2;
  inline ::pb::Country_Task_Err errret() const;
  inline void set_errret(::pb::Country_Task_Err value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Country_DefenceBorderland_Take_Reward)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();
  inline void set_has_errret();
  inline void clear_has_errret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool issuccess_;
  int errret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2eproto();
  friend void protobuf_AssignDesc_Country_2eproto();
  friend void protobuf_ShutdownFile_Country_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Country_DefenceBorderland_Take_Reward* default_instance_;
};
// ===================================================================


// ===================================================================

// CountyLevelUpTaskPlayer

// required uint64 playerId = 1;
inline bool CountyLevelUpTaskPlayer::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountyLevelUpTaskPlayer::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountyLevelUpTaskPlayer::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountyLevelUpTaskPlayer::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::uint64 CountyLevelUpTaskPlayer::playerid() const {
  return playerid_;
}
inline void CountyLevelUpTaskPlayer::set_playerid(::google::protobuf::uint64 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 country = 2;
inline bool CountyLevelUpTaskPlayer::has_country() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CountyLevelUpTaskPlayer::set_has_country() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CountyLevelUpTaskPlayer::clear_has_country() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CountyLevelUpTaskPlayer::clear_country() {
  country_ = 0u;
  clear_has_country();
}
inline ::google::protobuf::uint32 CountyLevelUpTaskPlayer::country() const {
  return country_;
}
inline void CountyLevelUpTaskPlayer::set_country(::google::protobuf::uint32 value) {
  set_has_country();
  country_ = value;
}

// required uint32 rank = 3;
inline bool CountyLevelUpTaskPlayer::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CountyLevelUpTaskPlayer::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CountyLevelUpTaskPlayer::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CountyLevelUpTaskPlayer::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 CountyLevelUpTaskPlayer::rank() const {
  return rank_;
}
inline void CountyLevelUpTaskPlayer::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// required uint32 statistic_kill = 4;
inline bool CountyLevelUpTaskPlayer::has_statistic_kill() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CountyLevelUpTaskPlayer::set_has_statistic_kill() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CountyLevelUpTaskPlayer::clear_has_statistic_kill() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CountyLevelUpTaskPlayer::clear_statistic_kill() {
  statistic_kill_ = 0u;
  clear_has_statistic_kill();
}
inline ::google::protobuf::uint32 CountyLevelUpTaskPlayer::statistic_kill() const {
  return statistic_kill_;
}
inline void CountyLevelUpTaskPlayer::set_statistic_kill(::google::protobuf::uint32 value) {
  set_has_statistic_kill();
  statistic_kill_ = value;
}

// required bool is_take_reward = 5;
inline bool CountyLevelUpTaskPlayer::has_is_take_reward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CountyLevelUpTaskPlayer::set_has_is_take_reward() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CountyLevelUpTaskPlayer::clear_has_is_take_reward() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CountyLevelUpTaskPlayer::clear_is_take_reward() {
  is_take_reward_ = false;
  clear_has_is_take_reward();
}
inline bool CountyLevelUpTaskPlayer::is_take_reward() const {
  return is_take_reward_;
}
inline void CountyLevelUpTaskPlayer::set_is_take_reward(bool value) {
  set_has_is_take_reward();
  is_take_reward_ = value;
}

// -------------------------------------------------------------------

// MonsterCity

// required uint32 donation_money = 1;
inline bool MonsterCity::has_donation_money() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonsterCity::set_has_donation_money() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MonsterCity::clear_has_donation_money() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MonsterCity::clear_donation_money() {
  donation_money_ = 0u;
  clear_has_donation_money();
}
inline ::google::protobuf::uint32 MonsterCity::donation_money() const {
  return donation_money_;
}
inline void MonsterCity::set_donation_money(::google::protobuf::uint32 value) {
  set_has_donation_money();
  donation_money_ = value;
}

// required uint32 friend_val = 2;
inline bool MonsterCity::has_friend_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MonsterCity::set_has_friend_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MonsterCity::clear_has_friend_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MonsterCity::clear_friend_val() {
  friend_val_ = 0u;
  clear_has_friend_val();
}
inline ::google::protobuf::uint32 MonsterCity::friend_val() const {
  return friend_val_;
}
inline void MonsterCity::set_friend_val(::google::protobuf::uint32 value) {
  set_has_friend_val();
  friend_val_ = value;
}

// required uint32 moster_level = 3;
inline bool MonsterCity::has_moster_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MonsterCity::set_has_moster_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MonsterCity::clear_has_moster_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MonsterCity::clear_moster_level() {
  moster_level_ = 0u;
  clear_has_moster_level();
}
inline ::google::protobuf::uint32 MonsterCity::moster_level() const {
  return moster_level_;
}
inline void MonsterCity::set_moster_level(::google::protobuf::uint32 value) {
  set_has_moster_level();
  moster_level_ = value;
}

// required uint32 invade_cnt = 4;
inline bool MonsterCity::has_invade_cnt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MonsterCity::set_has_invade_cnt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MonsterCity::clear_has_invade_cnt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MonsterCity::clear_invade_cnt() {
  invade_cnt_ = 0u;
  clear_has_invade_cnt();
}
inline ::google::protobuf::uint32 MonsterCity::invade_cnt() const {
  return invade_cnt_;
}
inline void MonsterCity::set_invade_cnt(::google::protobuf::uint32 value) {
  set_has_invade_cnt();
  invade_cnt_ = value;
}

// required uint32 today_invade_count = 5;
inline bool MonsterCity::has_today_invade_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MonsterCity::set_has_today_invade_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MonsterCity::clear_has_today_invade_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MonsterCity::clear_today_invade_count() {
  today_invade_count_ = 0u;
  clear_has_today_invade_count();
}
inline ::google::protobuf::uint32 MonsterCity::today_invade_count() const {
  return today_invade_count_;
}
inline void MonsterCity::set_today_invade_count(::google::protobuf::uint32 value) {
  set_has_today_invade_count();
  today_invade_count_ = value;
}

// -------------------------------------------------------------------

// MonsterCityLst

// repeated .pb.MonsterCity list = 1;
inline int MonsterCityLst::list_size() const {
  return list_.size();
}
inline void MonsterCityLst::clear_list() {
  list_.Clear();
}
inline const ::pb::MonsterCity& MonsterCityLst::list(int index) const {
  return list_.Get(index);
}
inline ::pb::MonsterCity* MonsterCityLst::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::pb::MonsterCity* MonsterCityLst::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::MonsterCity >&
MonsterCityLst::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::MonsterCity >*
MonsterCityLst::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// CountryCrossWarInfo

// required uint32 id = 1;
inline bool CountryCrossWarInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountryCrossWarInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountryCrossWarInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountryCrossWarInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CountryCrossWarInfo::id() const {
  return id_;
}
inline void CountryCrossWarInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required .pb.CrossWarInfo cross_war_info = 2;
inline bool CountryCrossWarInfo::has_cross_war_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CountryCrossWarInfo::set_has_cross_war_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CountryCrossWarInfo::clear_has_cross_war_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CountryCrossWarInfo::clear_cross_war_info() {
  if (cross_war_info_ != NULL) cross_war_info_->::pb::CrossWarInfo::Clear();
  clear_has_cross_war_info();
}
inline const ::pb::CrossWarInfo& CountryCrossWarInfo::cross_war_info() const {
  return cross_war_info_ != NULL ? *cross_war_info_ : *default_instance_->cross_war_info_;
}
inline ::pb::CrossWarInfo* CountryCrossWarInfo::mutable_cross_war_info() {
  set_has_cross_war_info();
  if (cross_war_info_ == NULL) cross_war_info_ = new ::pb::CrossWarInfo;
  return cross_war_info_;
}
inline ::pb::CrossWarInfo* CountryCrossWarInfo::release_cross_war_info() {
  clear_has_cross_war_info();
  ::pb::CrossWarInfo* temp = cross_war_info_;
  cross_war_info_ = NULL;
  return temp;
}
inline void CountryCrossWarInfo::set_allocated_cross_war_info(::pb::CrossWarInfo* cross_war_info) {
  delete cross_war_info_;
  cross_war_info_ = cross_war_info;
  if (cross_war_info) {
    set_has_cross_war_info();
  } else {
    clear_has_cross_war_info();
  }
}

// -------------------------------------------------------------------

// CrossWarInfo

// optional bool is_open_cross_war = 1;
inline bool CrossWarInfo::has_is_open_cross_war() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CrossWarInfo::set_has_is_open_cross_war() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CrossWarInfo::clear_has_is_open_cross_war() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CrossWarInfo::clear_is_open_cross_war() {
  is_open_cross_war_ = false;
  clear_has_is_open_cross_war();
}
inline bool CrossWarInfo::is_open_cross_war() const {
  return is_open_cross_war_;
}
inline void CrossWarInfo::set_is_open_cross_war(bool value) {
  set_has_is_open_cross_war();
  is_open_cross_war_ = value;
}

// optional bool is_open_anabasis = 2;
inline bool CrossWarInfo::has_is_open_anabasis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CrossWarInfo::set_has_is_open_anabasis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CrossWarInfo::clear_has_is_open_anabasis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CrossWarInfo::clear_is_open_anabasis() {
  is_open_anabasis_ = false;
  clear_has_is_open_anabasis();
}
inline bool CrossWarInfo::is_open_anabasis() const {
  return is_open_anabasis_;
}
inline void CrossWarInfo::set_is_open_anabasis(bool value) {
  set_has_is_open_anabasis();
  is_open_anabasis_ = value;
}

// optional .pb.CROSS_STATE cross_state = 3;
inline bool CrossWarInfo::has_cross_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CrossWarInfo::set_has_cross_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CrossWarInfo::clear_has_cross_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CrossWarInfo::clear_cross_state() {
  cross_state_ = 0;
  clear_has_cross_state();
}
inline ::pb::CROSS_STATE CrossWarInfo::cross_state() const {
  return static_cast< ::pb::CROSS_STATE >(cross_state_);
}
inline void CrossWarInfo::set_cross_state(::pb::CROSS_STATE value) {
  assert(::pb::CROSS_STATE_IsValid(value));
  set_has_cross_state();
  cross_state_ = value;
}

// optional .pb.CROSS_STATE anabasis_state = 4;
inline bool CrossWarInfo::has_anabasis_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CrossWarInfo::set_has_anabasis_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CrossWarInfo::clear_has_anabasis_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CrossWarInfo::clear_anabasis_state() {
  anabasis_state_ = 0;
  clear_has_anabasis_state();
}
inline ::pb::CROSS_STATE CrossWarInfo::anabasis_state() const {
  return static_cast< ::pb::CROSS_STATE >(anabasis_state_);
}
inline void CrossWarInfo::set_anabasis_state(::pb::CROSS_STATE value) {
  assert(::pb::CROSS_STATE_IsValid(value));
  set_has_anabasis_state();
  anabasis_state_ = value;
}

// optional uint64 cross_war_start_time = 5;
inline bool CrossWarInfo::has_cross_war_start_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CrossWarInfo::set_has_cross_war_start_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CrossWarInfo::clear_has_cross_war_start_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CrossWarInfo::clear_cross_war_start_time() {
  cross_war_start_time_ = GOOGLE_ULONGLONG(0);
  clear_has_cross_war_start_time();
}
inline ::google::protobuf::uint64 CrossWarInfo::cross_war_start_time() const {
  return cross_war_start_time_;
}
inline void CrossWarInfo::set_cross_war_start_time(::google::protobuf::uint64 value) {
  set_has_cross_war_start_time();
  cross_war_start_time_ = value;
}

// optional string cross_server_ip = 6;
inline bool CrossWarInfo::has_cross_server_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CrossWarInfo::set_has_cross_server_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CrossWarInfo::clear_has_cross_server_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CrossWarInfo::clear_cross_server_ip() {
  if (cross_server_ip_ != &::google::protobuf::internal::kEmptyString) {
    cross_server_ip_->clear();
  }
  clear_has_cross_server_ip();
}
inline const ::std::string& CrossWarInfo::cross_server_ip() const {
  return *cross_server_ip_;
}
inline void CrossWarInfo::set_cross_server_ip(const ::std::string& value) {
  set_has_cross_server_ip();
  if (cross_server_ip_ == &::google::protobuf::internal::kEmptyString) {
    cross_server_ip_ = new ::std::string;
  }
  cross_server_ip_->assign(value);
}
inline void CrossWarInfo::set_cross_server_ip(const char* value) {
  set_has_cross_server_ip();
  if (cross_server_ip_ == &::google::protobuf::internal::kEmptyString) {
    cross_server_ip_ = new ::std::string;
  }
  cross_server_ip_->assign(value);
}
inline void CrossWarInfo::set_cross_server_ip(const char* value, size_t size) {
  set_has_cross_server_ip();
  if (cross_server_ip_ == &::google::protobuf::internal::kEmptyString) {
    cross_server_ip_ = new ::std::string;
  }
  cross_server_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CrossWarInfo::mutable_cross_server_ip() {
  set_has_cross_server_ip();
  if (cross_server_ip_ == &::google::protobuf::internal::kEmptyString) {
    cross_server_ip_ = new ::std::string;
  }
  return cross_server_ip_;
}
inline ::std::string* CrossWarInfo::release_cross_server_ip() {
  clear_has_cross_server_ip();
  if (cross_server_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cross_server_ip_;
    cross_server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CrossWarInfo::set_allocated_cross_server_ip(::std::string* cross_server_ip) {
  if (cross_server_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete cross_server_ip_;
  }
  if (cross_server_ip) {
    set_has_cross_server_ip();
    cross_server_ip_ = cross_server_ip;
  } else {
    clear_has_cross_server_ip();
    cross_server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string cross_server_port = 7;
inline bool CrossWarInfo::has_cross_server_port() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CrossWarInfo::set_has_cross_server_port() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CrossWarInfo::clear_has_cross_server_port() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CrossWarInfo::clear_cross_server_port() {
  if (cross_server_port_ != &::google::protobuf::internal::kEmptyString) {
    cross_server_port_->clear();
  }
  clear_has_cross_server_port();
}
inline const ::std::string& CrossWarInfo::cross_server_port() const {
  return *cross_server_port_;
}
inline void CrossWarInfo::set_cross_server_port(const ::std::string& value) {
  set_has_cross_server_port();
  if (cross_server_port_ == &::google::protobuf::internal::kEmptyString) {
    cross_server_port_ = new ::std::string;
  }
  cross_server_port_->assign(value);
}
inline void CrossWarInfo::set_cross_server_port(const char* value) {
  set_has_cross_server_port();
  if (cross_server_port_ == &::google::protobuf::internal::kEmptyString) {
    cross_server_port_ = new ::std::string;
  }
  cross_server_port_->assign(value);
}
inline void CrossWarInfo::set_cross_server_port(const char* value, size_t size) {
  set_has_cross_server_port();
  if (cross_server_port_ == &::google::protobuf::internal::kEmptyString) {
    cross_server_port_ = new ::std::string;
  }
  cross_server_port_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CrossWarInfo::mutable_cross_server_port() {
  set_has_cross_server_port();
  if (cross_server_port_ == &::google::protobuf::internal::kEmptyString) {
    cross_server_port_ = new ::std::string;
  }
  return cross_server_port_;
}
inline ::std::string* CrossWarInfo::release_cross_server_port() {
  clear_has_cross_server_port();
  if (cross_server_port_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cross_server_port_;
    cross_server_port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CrossWarInfo::set_allocated_cross_server_port(::std::string* cross_server_port) {
  if (cross_server_port_ != &::google::protobuf::internal::kEmptyString) {
    delete cross_server_port_;
  }
  if (cross_server_port) {
    set_has_cross_server_port();
    cross_server_port_ = cross_server_port;
  } else {
    clear_has_cross_server_port();
    cross_server_port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool is_anabasis = 8;
inline bool CrossWarInfo::has_is_anabasis() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CrossWarInfo::set_has_is_anabasis() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CrossWarInfo::clear_has_is_anabasis() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CrossWarInfo::clear_is_anabasis() {
  is_anabasis_ = false;
  clear_has_is_anabasis();
}
inline bool CrossWarInfo::is_anabasis() const {
  return is_anabasis_;
}
inline void CrossWarInfo::set_is_anabasis(bool value) {
  set_has_is_anabasis();
  is_anabasis_ = value;
}

// optional uint64 anabasis_start_time = 9;
inline bool CrossWarInfo::has_anabasis_start_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CrossWarInfo::set_has_anabasis_start_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CrossWarInfo::clear_has_anabasis_start_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CrossWarInfo::clear_anabasis_start_time() {
  anabasis_start_time_ = GOOGLE_ULONGLONG(0);
  clear_has_anabasis_start_time();
}
inline ::google::protobuf::uint64 CrossWarInfo::anabasis_start_time() const {
  return anabasis_start_time_;
}
inline void CrossWarInfo::set_anabasis_start_time(::google::protobuf::uint64 value) {
  set_has_anabasis_start_time();
  anabasis_start_time_ = value;
}

// optional string anabasis_server_ip = 10;
inline bool CrossWarInfo::has_anabasis_server_ip() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CrossWarInfo::set_has_anabasis_server_ip() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CrossWarInfo::clear_has_anabasis_server_ip() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CrossWarInfo::clear_anabasis_server_ip() {
  if (anabasis_server_ip_ != &::google::protobuf::internal::kEmptyString) {
    anabasis_server_ip_->clear();
  }
  clear_has_anabasis_server_ip();
}
inline const ::std::string& CrossWarInfo::anabasis_server_ip() const {
  return *anabasis_server_ip_;
}
inline void CrossWarInfo::set_anabasis_server_ip(const ::std::string& value) {
  set_has_anabasis_server_ip();
  if (anabasis_server_ip_ == &::google::protobuf::internal::kEmptyString) {
    anabasis_server_ip_ = new ::std::string;
  }
  anabasis_server_ip_->assign(value);
}
inline void CrossWarInfo::set_anabasis_server_ip(const char* value) {
  set_has_anabasis_server_ip();
  if (anabasis_server_ip_ == &::google::protobuf::internal::kEmptyString) {
    anabasis_server_ip_ = new ::std::string;
  }
  anabasis_server_ip_->assign(value);
}
inline void CrossWarInfo::set_anabasis_server_ip(const char* value, size_t size) {
  set_has_anabasis_server_ip();
  if (anabasis_server_ip_ == &::google::protobuf::internal::kEmptyString) {
    anabasis_server_ip_ = new ::std::string;
  }
  anabasis_server_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CrossWarInfo::mutable_anabasis_server_ip() {
  set_has_anabasis_server_ip();
  if (anabasis_server_ip_ == &::google::protobuf::internal::kEmptyString) {
    anabasis_server_ip_ = new ::std::string;
  }
  return anabasis_server_ip_;
}
inline ::std::string* CrossWarInfo::release_anabasis_server_ip() {
  clear_has_anabasis_server_ip();
  if (anabasis_server_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = anabasis_server_ip_;
    anabasis_server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CrossWarInfo::set_allocated_anabasis_server_ip(::std::string* anabasis_server_ip) {
  if (anabasis_server_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete anabasis_server_ip_;
  }
  if (anabasis_server_ip) {
    set_has_anabasis_server_ip();
    anabasis_server_ip_ = anabasis_server_ip;
  } else {
    clear_has_anabasis_server_ip();
    anabasis_server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string anabasis_server_port = 11;
inline bool CrossWarInfo::has_anabasis_server_port() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CrossWarInfo::set_has_anabasis_server_port() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CrossWarInfo::clear_has_anabasis_server_port() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CrossWarInfo::clear_anabasis_server_port() {
  if (anabasis_server_port_ != &::google::protobuf::internal::kEmptyString) {
    anabasis_server_port_->clear();
  }
  clear_has_anabasis_server_port();
}
inline const ::std::string& CrossWarInfo::anabasis_server_port() const {
  return *anabasis_server_port_;
}
inline void CrossWarInfo::set_anabasis_server_port(const ::std::string& value) {
  set_has_anabasis_server_port();
  if (anabasis_server_port_ == &::google::protobuf::internal::kEmptyString) {
    anabasis_server_port_ = new ::std::string;
  }
  anabasis_server_port_->assign(value);
}
inline void CrossWarInfo::set_anabasis_server_port(const char* value) {
  set_has_anabasis_server_port();
  if (anabasis_server_port_ == &::google::protobuf::internal::kEmptyString) {
    anabasis_server_port_ = new ::std::string;
  }
  anabasis_server_port_->assign(value);
}
inline void CrossWarInfo::set_anabasis_server_port(const char* value, size_t size) {
  set_has_anabasis_server_port();
  if (anabasis_server_port_ == &::google::protobuf::internal::kEmptyString) {
    anabasis_server_port_ = new ::std::string;
  }
  anabasis_server_port_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CrossWarInfo::mutable_anabasis_server_port() {
  set_has_anabasis_server_port();
  if (anabasis_server_port_ == &::google::protobuf::internal::kEmptyString) {
    anabasis_server_port_ = new ::std::string;
  }
  return anabasis_server_port_;
}
inline ::std::string* CrossWarInfo::release_anabasis_server_port() {
  clear_has_anabasis_server_port();
  if (anabasis_server_port_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = anabasis_server_port_;
    anabasis_server_port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CrossWarInfo::set_allocated_anabasis_server_port(::std::string* anabasis_server_port) {
  if (anabasis_server_port_ != &::google::protobuf::internal::kEmptyString) {
    delete anabasis_server_port_;
  }
  if (anabasis_server_port) {
    set_has_anabasis_server_port();
    anabasis_server_port_ = anabasis_server_port;
  } else {
    clear_has_anabasis_server_port();
    anabasis_server_port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CountyInfo

// required uint32 id = 1;
inline bool CountyInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountyInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountyInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountyInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CountyInfo::id() const {
  return id_;
}
inline void CountyInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 exp = 2;
inline bool CountyInfo::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CountyInfo::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CountyInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CountyInfo::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 CountyInfo::exp() const {
  return exp_;
}
inline void CountyInfo::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// required uint32 level = 3;
inline bool CountyInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CountyInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CountyInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CountyInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CountyInfo::level() const {
  return level_;
}
inline void CountyInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 donate_times = 4;
inline bool CountyInfo::has_donate_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CountyInfo::set_has_donate_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CountyInfo::clear_has_donate_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CountyInfo::clear_donate_times() {
  donate_times_ = 0u;
  clear_has_donate_times();
}
inline ::google::protobuf::uint32 CountyInfo::donate_times() const {
  return donate_times_;
}
inline void CountyInfo::set_donate_times(::google::protobuf::uint32 value) {
  set_has_donate_times();
  donate_times_ = value;
}

// required uint32 country_npc_level = 5;
inline bool CountyInfo::has_country_npc_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CountyInfo::set_has_country_npc_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CountyInfo::clear_has_country_npc_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CountyInfo::clear_country_npc_level() {
  country_npc_level_ = 0u;
  clear_has_country_npc_level();
}
inline ::google::protobuf::uint32 CountyInfo::country_npc_level() const {
  return country_npc_level_;
}
inline void CountyInfo::set_country_npc_level(::google::protobuf::uint32 value) {
  set_has_country_npc_level();
  country_npc_level_ = value;
}

// required uint32 country_npc_exp = 6;
inline bool CountyInfo::has_country_npc_exp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CountyInfo::set_has_country_npc_exp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CountyInfo::clear_has_country_npc_exp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CountyInfo::clear_country_npc_exp() {
  country_npc_exp_ = 0u;
  clear_has_country_npc_exp();
}
inline ::google::protobuf::uint32 CountyInfo::country_npc_exp() const {
  return country_npc_exp_;
}
inline void CountyInfo::set_country_npc_exp(::google::protobuf::uint32 value) {
  set_has_country_npc_exp();
  country_npc_exp_ = value;
}

// optional uint32 have_city_cnt = 7;
inline bool CountyInfo::has_have_city_cnt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CountyInfo::set_has_have_city_cnt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CountyInfo::clear_has_have_city_cnt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CountyInfo::clear_have_city_cnt() {
  have_city_cnt_ = 0u;
  clear_has_have_city_cnt();
}
inline ::google::protobuf::uint32 CountyInfo::have_city_cnt() const {
  return have_city_cnt_;
}
inline void CountyInfo::set_have_city_cnt(::google::protobuf::uint32 value) {
  set_has_have_city_cnt();
  have_city_cnt_ = value;
}

// optional uint64 open_level_up_task_time = 8;
inline bool CountyInfo::has_open_level_up_task_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CountyInfo::set_has_open_level_up_task_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CountyInfo::clear_has_open_level_up_task_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CountyInfo::clear_open_level_up_task_time() {
  open_level_up_task_time_ = GOOGLE_ULONGLONG(0);
  clear_has_open_level_up_task_time();
}
inline ::google::protobuf::uint64 CountyInfo::open_level_up_task_time() const {
  return open_level_up_task_time_;
}
inline void CountyInfo::set_open_level_up_task_time(::google::protobuf::uint64 value) {
  set_has_open_level_up_task_time();
  open_level_up_task_time_ = value;
}

// optional uint32 cur_level_do_task_cnt = 9;
inline bool CountyInfo::has_cur_level_do_task_cnt() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CountyInfo::set_has_cur_level_do_task_cnt() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CountyInfo::clear_has_cur_level_do_task_cnt() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CountyInfo::clear_cur_level_do_task_cnt() {
  cur_level_do_task_cnt_ = 0u;
  clear_has_cur_level_do_task_cnt();
}
inline ::google::protobuf::uint32 CountyInfo::cur_level_do_task_cnt() const {
  return cur_level_do_task_cnt_;
}
inline void CountyInfo::set_cur_level_do_task_cnt(::google::protobuf::uint32 value) {
  set_has_cur_level_do_task_cnt();
  cur_level_do_task_cnt_ = value;
}

// optional uint32 kill_monster_num = 10;
inline bool CountyInfo::has_kill_monster_num() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CountyInfo::set_has_kill_monster_num() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CountyInfo::clear_has_kill_monster_num() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CountyInfo::clear_kill_monster_num() {
  kill_monster_num_ = 0u;
  clear_has_kill_monster_num();
}
inline ::google::protobuf::uint32 CountyInfo::kill_monster_num() const {
  return kill_monster_num_;
}
inline void CountyInfo::set_kill_monster_num(::google::protobuf::uint32 value) {
  set_has_kill_monster_num();
  kill_monster_num_ = value;
}

// optional bool is_monster_task_open = 11;
inline bool CountyInfo::has_is_monster_task_open() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CountyInfo::set_has_is_monster_task_open() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CountyInfo::clear_has_is_monster_task_open() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CountyInfo::clear_is_monster_task_open() {
  is_monster_task_open_ = false;
  clear_has_is_monster_task_open();
}
inline bool CountyInfo::is_monster_task_open() const {
  return is_monster_task_open_;
}
inline void CountyInfo::set_is_monster_task_open(bool value) {
  set_has_is_monster_task_open();
  is_monster_task_open_ = value;
}

// optional bool is_monster_task_succeed = 12;
inline bool CountyInfo::has_is_monster_task_succeed() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CountyInfo::set_has_is_monster_task_succeed() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CountyInfo::clear_has_is_monster_task_succeed() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CountyInfo::clear_is_monster_task_succeed() {
  is_monster_task_succeed_ = false;
  clear_has_is_monster_task_succeed();
}
inline bool CountyInfo::is_monster_task_succeed() const {
  return is_monster_task_succeed_;
}
inline void CountyInfo::set_is_monster_task_succeed(bool value) {
  set_has_is_monster_task_succeed();
  is_monster_task_succeed_ = value;
}

// optional .pb.CrossWarInfo cross_war_info = 13;
inline bool CountyInfo::has_cross_war_info() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CountyInfo::set_has_cross_war_info() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CountyInfo::clear_has_cross_war_info() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CountyInfo::clear_cross_war_info() {
  if (cross_war_info_ != NULL) cross_war_info_->::pb::CrossWarInfo::Clear();
  clear_has_cross_war_info();
}
inline const ::pb::CrossWarInfo& CountyInfo::cross_war_info() const {
  return cross_war_info_ != NULL ? *cross_war_info_ : *default_instance_->cross_war_info_;
}
inline ::pb::CrossWarInfo* CountyInfo::mutable_cross_war_info() {
  set_has_cross_war_info();
  if (cross_war_info_ == NULL) cross_war_info_ = new ::pb::CrossWarInfo;
  return cross_war_info_;
}
inline ::pb::CrossWarInfo* CountyInfo::release_cross_war_info() {
  clear_has_cross_war_info();
  ::pb::CrossWarInfo* temp = cross_war_info_;
  cross_war_info_ = NULL;
  return temp;
}
inline void CountyInfo::set_allocated_cross_war_info(::pb::CrossWarInfo* cross_war_info) {
  delete cross_war_info_;
  cross_war_info_ = cross_war_info;
  if (cross_war_info) {
    set_has_cross_war_info();
  } else {
    clear_has_cross_war_info();
  }
}

// optional .pb.MonsterCityLst monster_city_lst = 14;
inline bool CountyInfo::has_monster_city_lst() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CountyInfo::set_has_monster_city_lst() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CountyInfo::clear_has_monster_city_lst() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CountyInfo::clear_monster_city_lst() {
  if (monster_city_lst_ != NULL) monster_city_lst_->::pb::MonsterCityLst::Clear();
  clear_has_monster_city_lst();
}
inline const ::pb::MonsterCityLst& CountyInfo::monster_city_lst() const {
  return monster_city_lst_ != NULL ? *monster_city_lst_ : *default_instance_->monster_city_lst_;
}
inline ::pb::MonsterCityLst* CountyInfo::mutable_monster_city_lst() {
  set_has_monster_city_lst();
  if (monster_city_lst_ == NULL) monster_city_lst_ = new ::pb::MonsterCityLst;
  return monster_city_lst_;
}
inline ::pb::MonsterCityLst* CountyInfo::release_monster_city_lst() {
  clear_has_monster_city_lst();
  ::pb::MonsterCityLst* temp = monster_city_lst_;
  monster_city_lst_ = NULL;
  return temp;
}
inline void CountyInfo::set_allocated_monster_city_lst(::pb::MonsterCityLst* monster_city_lst) {
  delete monster_city_lst_;
  monster_city_lst_ = monster_city_lst;
  if (monster_city_lst) {
    set_has_monster_city_lst();
  } else {
    clear_has_monster_city_lst();
  }
}

// optional uint64 last_check_npc_exp = 15;
inline bool CountyInfo::has_last_check_npc_exp() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CountyInfo::set_has_last_check_npc_exp() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CountyInfo::clear_has_last_check_npc_exp() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CountyInfo::clear_last_check_npc_exp() {
  last_check_npc_exp_ = GOOGLE_ULONGLONG(0);
  clear_has_last_check_npc_exp();
}
inline ::google::protobuf::uint64 CountyInfo::last_check_npc_exp() const {
  return last_check_npc_exp_;
}
inline void CountyInfo::set_last_check_npc_exp(::google::protobuf::uint64 value) {
  set_has_last_check_npc_exp();
  last_check_npc_exp_ = value;
}

// optional uint32 npc_level_id = 16;
inline bool CountyInfo::has_npc_level_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CountyInfo::set_has_npc_level_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CountyInfo::clear_has_npc_level_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CountyInfo::clear_npc_level_id() {
  npc_level_id_ = 0u;
  clear_has_npc_level_id();
}
inline ::google::protobuf::uint32 CountyInfo::npc_level_id() const {
  return npc_level_id_;
}
inline void CountyInfo::set_npc_level_id(::google::protobuf::uint32 value) {
  set_has_npc_level_id();
  npc_level_id_ = value;
}

// optional uint32 tuntian_level = 17;
inline bool CountyInfo::has_tuntian_level() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CountyInfo::set_has_tuntian_level() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CountyInfo::clear_has_tuntian_level() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CountyInfo::clear_tuntian_level() {
  tuntian_level_ = 0u;
  clear_has_tuntian_level();
}
inline ::google::protobuf::uint32 CountyInfo::tuntian_level() const {
  return tuntian_level_;
}
inline void CountyInfo::set_tuntian_level(::google::protobuf::uint32 value) {
  set_has_tuntian_level();
  tuntian_level_ = value;
}

// optional uint64 tuntian_exp = 18;
inline bool CountyInfo::has_tuntian_exp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CountyInfo::set_has_tuntian_exp() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CountyInfo::clear_has_tuntian_exp() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CountyInfo::clear_tuntian_exp() {
  tuntian_exp_ = GOOGLE_ULONGLONG(0);
  clear_has_tuntian_exp();
}
inline ::google::protobuf::uint64 CountyInfo::tuntian_exp() const {
  return tuntian_exp_;
}
inline void CountyInfo::set_tuntian_exp(::google::protobuf::uint64 value) {
  set_has_tuntian_exp();
  tuntian_exp_ = value;
}

// optional uint32 Prosperity_Degree = 19;
inline bool CountyInfo::has_prosperity_degree() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CountyInfo::set_has_prosperity_degree() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CountyInfo::clear_has_prosperity_degree() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CountyInfo::clear_prosperity_degree() {
  prosperity_degree_ = 0u;
  clear_has_prosperity_degree();
}
inline ::google::protobuf::uint32 CountyInfo::prosperity_degree() const {
  return prosperity_degree_;
}
inline void CountyInfo::set_prosperity_degree(::google::protobuf::uint32 value) {
  set_has_prosperity_degree();
  prosperity_degree_ = value;
}

// -------------------------------------------------------------------

// Country_Levle_Up_Task_Rank

// required uint32 country = 1;
inline bool Country_Levle_Up_Task_Rank::has_country() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Country_Levle_Up_Task_Rank::set_has_country() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Country_Levle_Up_Task_Rank::clear_has_country() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Country_Levle_Up_Task_Rank::clear_country() {
  country_ = 0u;
  clear_has_country();
}
inline ::google::protobuf::uint32 Country_Levle_Up_Task_Rank::country() const {
  return country_;
}
inline void Country_Levle_Up_Task_Rank::set_country(::google::protobuf::uint32 value) {
  set_has_country();
  country_ = value;
}

// repeated .pb.CountyLevelUpTaskPlayer player_lst = 2;
inline int Country_Levle_Up_Task_Rank::player_lst_size() const {
  return player_lst_.size();
}
inline void Country_Levle_Up_Task_Rank::clear_player_lst() {
  player_lst_.Clear();
}
inline const ::pb::CountyLevelUpTaskPlayer& Country_Levle_Up_Task_Rank::player_lst(int index) const {
  return player_lst_.Get(index);
}
inline ::pb::CountyLevelUpTaskPlayer* Country_Levle_Up_Task_Rank::mutable_player_lst(int index) {
  return player_lst_.Mutable(index);
}
inline ::pb::CountyLevelUpTaskPlayer* Country_Levle_Up_Task_Rank::add_player_lst() {
  return player_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::CountyLevelUpTaskPlayer >&
Country_Levle_Up_Task_Rank::player_lst() const {
  return player_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::CountyLevelUpTaskPlayer >*
Country_Levle_Up_Task_Rank::mutable_player_lst() {
  return &player_lst_;
}

// -------------------------------------------------------------------

// C2GS_Country_Info

// required uint32 id = 1;
inline bool C2GS_Country_Info::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Country_Info::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Country_Info::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Country_Info::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 C2GS_Country_Info::id() const {
  return id_;
}
inline void C2GS_Country_Info::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// GS2C_Country_Info

// repeated .pb.CountyInfo country = 1;
inline int GS2C_Country_Info::country_size() const {
  return country_.size();
}
inline void GS2C_Country_Info::clear_country() {
  country_.Clear();
}
inline const ::pb::CountyInfo& GS2C_Country_Info::country(int index) const {
  return country_.Get(index);
}
inline ::pb::CountyInfo* GS2C_Country_Info::mutable_country(int index) {
  return country_.Mutable(index);
}
inline ::pb::CountyInfo* GS2C_Country_Info::add_country() {
  return country_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::CountyInfo >&
GS2C_Country_Info::country() const {
  return country_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::CountyInfo >*
GS2C_Country_Info::mutable_country() {
  return &country_;
}

// -------------------------------------------------------------------

// Struct_Country_Task_Base

// required bool is_begin = 1;
inline bool Struct_Country_Task_Base::has_is_begin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Struct_Country_Task_Base::set_has_is_begin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Struct_Country_Task_Base::clear_has_is_begin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Struct_Country_Task_Base::clear_is_begin() {
  is_begin_ = false;
  clear_has_is_begin();
}
inline bool Struct_Country_Task_Base::is_begin() const {
  return is_begin_;
}
inline void Struct_Country_Task_Base::set_is_begin(bool value) {
  set_has_is_begin();
  is_begin_ = value;
}

// optional uint32 cur_stage = 2;
inline bool Struct_Country_Task_Base::has_cur_stage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Struct_Country_Task_Base::set_has_cur_stage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Struct_Country_Task_Base::clear_has_cur_stage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Struct_Country_Task_Base::clear_cur_stage() {
  cur_stage_ = 0u;
  clear_has_cur_stage();
}
inline ::google::protobuf::uint32 Struct_Country_Task_Base::cur_stage() const {
  return cur_stage_;
}
inline void Struct_Country_Task_Base::set_cur_stage(::google::protobuf::uint32 value) {
  set_has_cur_stage();
  cur_stage_ = value;
}

// optional uint64 cur_stage_begin_time = 3;
inline bool Struct_Country_Task_Base::has_cur_stage_begin_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Struct_Country_Task_Base::set_has_cur_stage_begin_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Struct_Country_Task_Base::clear_has_cur_stage_begin_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Struct_Country_Task_Base::clear_cur_stage_begin_time() {
  cur_stage_begin_time_ = GOOGLE_ULONGLONG(0);
  clear_has_cur_stage_begin_time();
}
inline ::google::protobuf::uint64 Struct_Country_Task_Base::cur_stage_begin_time() const {
  return cur_stage_begin_time_;
}
inline void Struct_Country_Task_Base::set_cur_stage_begin_time(::google::protobuf::uint64 value) {
  set_has_cur_stage_begin_time();
  cur_stage_begin_time_ = value;
}

// optional bool is_waiting_state = 4;
inline bool Struct_Country_Task_Base::has_is_waiting_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Struct_Country_Task_Base::set_has_is_waiting_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Struct_Country_Task_Base::clear_has_is_waiting_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Struct_Country_Task_Base::clear_is_waiting_state() {
  is_waiting_state_ = false;
  clear_has_is_waiting_state();
}
inline bool Struct_Country_Task_Base::is_waiting_state() const {
  return is_waiting_state_;
}
inline void Struct_Country_Task_Base::set_is_waiting_state(bool value) {
  set_has_is_waiting_state();
  is_waiting_state_ = value;
}

// repeated uint32 cur_stage_begin_country_citys = 5;
inline int Struct_Country_Task_Base::cur_stage_begin_country_citys_size() const {
  return cur_stage_begin_country_citys_.size();
}
inline void Struct_Country_Task_Base::clear_cur_stage_begin_country_citys() {
  cur_stage_begin_country_citys_.Clear();
}
inline ::google::protobuf::uint32 Struct_Country_Task_Base::cur_stage_begin_country_citys(int index) const {
  return cur_stage_begin_country_citys_.Get(index);
}
inline void Struct_Country_Task_Base::set_cur_stage_begin_country_citys(int index, ::google::protobuf::uint32 value) {
  cur_stage_begin_country_citys_.Set(index, value);
}
inline void Struct_Country_Task_Base::add_cur_stage_begin_country_citys(::google::protobuf::uint32 value) {
  cur_stage_begin_country_citys_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Struct_Country_Task_Base::cur_stage_begin_country_citys() const {
  return cur_stage_begin_country_citys_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Struct_Country_Task_Base::mutable_cur_stage_begin_country_citys() {
  return &cur_stage_begin_country_citys_;
}

// repeated uint32 cur_stage_now_country_occupy_citys = 6;
inline int Struct_Country_Task_Base::cur_stage_now_country_occupy_citys_size() const {
  return cur_stage_now_country_occupy_citys_.size();
}
inline void Struct_Country_Task_Base::clear_cur_stage_now_country_occupy_citys() {
  cur_stage_now_country_occupy_citys_.Clear();
}
inline ::google::protobuf::uint32 Struct_Country_Task_Base::cur_stage_now_country_occupy_citys(int index) const {
  return cur_stage_now_country_occupy_citys_.Get(index);
}
inline void Struct_Country_Task_Base::set_cur_stage_now_country_occupy_citys(int index, ::google::protobuf::uint32 value) {
  cur_stage_now_country_occupy_citys_.Set(index, value);
}
inline void Struct_Country_Task_Base::add_cur_stage_now_country_occupy_citys(::google::protobuf::uint32 value) {
  cur_stage_now_country_occupy_citys_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Struct_Country_Task_Base::cur_stage_now_country_occupy_citys() const {
  return cur_stage_now_country_occupy_citys_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Struct_Country_Task_Base::mutable_cur_stage_now_country_occupy_citys() {
  return &cur_stage_now_country_occupy_citys_;
}

// repeated uint32 cur_stage_target_num = 7;
inline int Struct_Country_Task_Base::cur_stage_target_num_size() const {
  return cur_stage_target_num_.size();
}
inline void Struct_Country_Task_Base::clear_cur_stage_target_num() {
  cur_stage_target_num_.Clear();
}
inline ::google::protobuf::uint32 Struct_Country_Task_Base::cur_stage_target_num(int index) const {
  return cur_stage_target_num_.Get(index);
}
inline void Struct_Country_Task_Base::set_cur_stage_target_num(int index, ::google::protobuf::uint32 value) {
  cur_stage_target_num_.Set(index, value);
}
inline void Struct_Country_Task_Base::add_cur_stage_target_num(::google::protobuf::uint32 value) {
  cur_stage_target_num_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Struct_Country_Task_Base::cur_stage_target_num() const {
  return cur_stage_target_num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Struct_Country_Task_Base::mutable_cur_stage_target_num() {
  return &cur_stage_target_num_;
}

// repeated uint32 cur_stage_now_country_invest_money = 8;
inline int Struct_Country_Task_Base::cur_stage_now_country_invest_money_size() const {
  return cur_stage_now_country_invest_money_.size();
}
inline void Struct_Country_Task_Base::clear_cur_stage_now_country_invest_money() {
  cur_stage_now_country_invest_money_.Clear();
}
inline ::google::protobuf::uint32 Struct_Country_Task_Base::cur_stage_now_country_invest_money(int index) const {
  return cur_stage_now_country_invest_money_.Get(index);
}
inline void Struct_Country_Task_Base::set_cur_stage_now_country_invest_money(int index, ::google::protobuf::uint32 value) {
  cur_stage_now_country_invest_money_.Set(index, value);
}
inline void Struct_Country_Task_Base::add_cur_stage_now_country_invest_money(::google::protobuf::uint32 value) {
  cur_stage_now_country_invest_money_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Struct_Country_Task_Base::cur_stage_now_country_invest_money() const {
  return cur_stage_now_country_invest_money_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Struct_Country_Task_Base::mutable_cur_stage_now_country_invest_money() {
  return &cur_stage_now_country_invest_money_;
}

// repeated bool is_country_failed = 9;
inline int Struct_Country_Task_Base::is_country_failed_size() const {
  return is_country_failed_.size();
}
inline void Struct_Country_Task_Base::clear_is_country_failed() {
  is_country_failed_.Clear();
}
inline bool Struct_Country_Task_Base::is_country_failed(int index) const {
  return is_country_failed_.Get(index);
}
inline void Struct_Country_Task_Base::set_is_country_failed(int index, bool value) {
  is_country_failed_.Set(index, value);
}
inline void Struct_Country_Task_Base::add_is_country_failed(bool value) {
  is_country_failed_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
Struct_Country_Task_Base::is_country_failed() const {
  return is_country_failed_;
}
inline ::google::protobuf::RepeatedField< bool >*
Struct_Country_Task_Base::mutable_is_country_failed() {
  return &is_country_failed_;
}

// repeated uint32 country_score = 10;
inline int Struct_Country_Task_Base::country_score_size() const {
  return country_score_.size();
}
inline void Struct_Country_Task_Base::clear_country_score() {
  country_score_.Clear();
}
inline ::google::protobuf::uint32 Struct_Country_Task_Base::country_score(int index) const {
  return country_score_.Get(index);
}
inline void Struct_Country_Task_Base::set_country_score(int index, ::google::protobuf::uint32 value) {
  country_score_.Set(index, value);
}
inline void Struct_Country_Task_Base::add_country_score(::google::protobuf::uint32 value) {
  country_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Struct_Country_Task_Base::country_score() const {
  return country_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Struct_Country_Task_Base::mutable_country_score() {
  return &country_score_;
}

// repeated uint32 cur_stage_fighting_city_num = 11;
inline int Struct_Country_Task_Base::cur_stage_fighting_city_num_size() const {
  return cur_stage_fighting_city_num_.size();
}
inline void Struct_Country_Task_Base::clear_cur_stage_fighting_city_num() {
  cur_stage_fighting_city_num_.Clear();
}
inline ::google::protobuf::uint32 Struct_Country_Task_Base::cur_stage_fighting_city_num(int index) const {
  return cur_stage_fighting_city_num_.Get(index);
}
inline void Struct_Country_Task_Base::set_cur_stage_fighting_city_num(int index, ::google::protobuf::uint32 value) {
  cur_stage_fighting_city_num_.Set(index, value);
}
inline void Struct_Country_Task_Base::add_cur_stage_fighting_city_num(::google::protobuf::uint32 value) {
  cur_stage_fighting_city_num_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Struct_Country_Task_Base::cur_stage_fighting_city_num() const {
  return cur_stage_fighting_city_num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Struct_Country_Task_Base::mutable_cur_stage_fighting_city_num() {
  return &cur_stage_fighting_city_num_;
}

// -------------------------------------------------------------------

// Struct_Country_Task_City

// required uint32 city_id = 1;
inline bool Struct_Country_Task_City::has_city_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Struct_Country_Task_City::set_has_city_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Struct_Country_Task_City::clear_has_city_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Struct_Country_Task_City::clear_city_id() {
  city_id_ = 0u;
  clear_has_city_id();
}
inline ::google::protobuf::uint32 Struct_Country_Task_City::city_id() const {
  return city_id_;
}
inline void Struct_Country_Task_City::set_city_id(::google::protobuf::uint32 value) {
  set_has_city_id();
  city_id_ = value;
}

// required uint64 end_time = 2;
inline bool Struct_Country_Task_City::has_end_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Struct_Country_Task_City::set_has_end_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Struct_Country_Task_City::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Struct_Country_Task_City::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::uint64 Struct_Country_Task_City::end_time() const {
  return end_time_;
}
inline void Struct_Country_Task_City::set_end_time(::google::protobuf::uint64 value) {
  set_has_end_time();
  end_time_ = value;
}

// optional uint32 win_country = 3;
inline bool Struct_Country_Task_City::has_win_country() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Struct_Country_Task_City::set_has_win_country() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Struct_Country_Task_City::clear_has_win_country() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Struct_Country_Task_City::clear_win_country() {
  win_country_ = 0u;
  clear_has_win_country();
}
inline ::google::protobuf::uint32 Struct_Country_Task_City::win_country() const {
  return win_country_;
}
inline void Struct_Country_Task_City::set_win_country(::google::protobuf::uint32 value) {
  set_has_win_country();
  win_country_ = value;
}

// optional uint32 origin_country = 4;
inline bool Struct_Country_Task_City::has_origin_country() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Struct_Country_Task_City::set_has_origin_country() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Struct_Country_Task_City::clear_has_origin_country() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Struct_Country_Task_City::clear_origin_country() {
  origin_country_ = 0u;
  clear_has_origin_country();
}
inline ::google::protobuf::uint32 Struct_Country_Task_City::origin_country() const {
  return origin_country_;
}
inline void Struct_Country_Task_City::set_origin_country(::google::protobuf::uint32 value) {
  set_has_origin_country();
  origin_country_ = value;
}

// -------------------------------------------------------------------

// GS2C_Country_Task_Info

// optional bool is_running = 1;
inline bool GS2C_Country_Task_Info::has_is_running() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Country_Task_Info::set_has_is_running() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Country_Task_Info::clear_has_is_running() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Country_Task_Info::clear_is_running() {
  is_running_ = false;
  clear_has_is_running();
}
inline bool GS2C_Country_Task_Info::is_running() const {
  return is_running_;
}
inline void GS2C_Country_Task_Info::set_is_running(bool value) {
  set_has_is_running();
  is_running_ = value;
}

// repeated .pb.Struct_Country_Task_City city = 2;
inline int GS2C_Country_Task_Info::city_size() const {
  return city_.size();
}
inline void GS2C_Country_Task_Info::clear_city() {
  city_.Clear();
}
inline const ::pb::Struct_Country_Task_City& GS2C_Country_Task_Info::city(int index) const {
  return city_.Get(index);
}
inline ::pb::Struct_Country_Task_City* GS2C_Country_Task_Info::mutable_city(int index) {
  return city_.Mutable(index);
}
inline ::pb::Struct_Country_Task_City* GS2C_Country_Task_Info::add_city() {
  return city_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Struct_Country_Task_City >&
GS2C_Country_Task_Info::city() const {
  return city_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Struct_Country_Task_City >*
GS2C_Country_Task_Info::mutable_city() {
  return &city_;
}

// optional .pb.Struct_Country_Task_Base base = 3;
inline bool GS2C_Country_Task_Info::has_base() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Country_Task_Info::set_has_base() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Country_Task_Info::clear_has_base() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Country_Task_Info::clear_base() {
  if (base_ != NULL) base_->::pb::Struct_Country_Task_Base::Clear();
  clear_has_base();
}
inline const ::pb::Struct_Country_Task_Base& GS2C_Country_Task_Info::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::pb::Struct_Country_Task_Base* GS2C_Country_Task_Info::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::pb::Struct_Country_Task_Base;
  return base_;
}
inline ::pb::Struct_Country_Task_Base* GS2C_Country_Task_Info::release_base() {
  clear_has_base();
  ::pb::Struct_Country_Task_Base* temp = base_;
  base_ = NULL;
  return temp;
}
inline void GS2C_Country_Task_Info::set_allocated_base(::pb::Struct_Country_Task_Base* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
}

// -------------------------------------------------------------------

// GS2C_Country_Task_Player

// required uint32 rank = 1;
inline bool GS2C_Country_Task_Player::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Country_Task_Player::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Country_Task_Player::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Country_Task_Player::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 GS2C_Country_Task_Player::rank() const {
  return rank_;
}
inline void GS2C_Country_Task_Player::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// required uint32 kill_count = 2;
inline bool GS2C_Country_Task_Player::has_kill_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Country_Task_Player::set_has_kill_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Country_Task_Player::clear_has_kill_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Country_Task_Player::clear_kill_count() {
  kill_count_ = 0u;
  clear_has_kill_count();
}
inline ::google::protobuf::uint32 GS2C_Country_Task_Player::kill_count() const {
  return kill_count_;
}
inline void GS2C_Country_Task_Player::set_kill_count(::google::protobuf::uint32 value) {
  set_has_kill_count();
  kill_count_ = value;
}

// repeated bool is_take_reward = 3;
inline int GS2C_Country_Task_Player::is_take_reward_size() const {
  return is_take_reward_.size();
}
inline void GS2C_Country_Task_Player::clear_is_take_reward() {
  is_take_reward_.Clear();
}
inline bool GS2C_Country_Task_Player::is_take_reward(int index) const {
  return is_take_reward_.Get(index);
}
inline void GS2C_Country_Task_Player::set_is_take_reward(int index, bool value) {
  is_take_reward_.Set(index, value);
}
inline void GS2C_Country_Task_Player::add_is_take_reward(bool value) {
  is_take_reward_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
GS2C_Country_Task_Player::is_take_reward() const {
  return is_take_reward_;
}
inline ::google::protobuf::RepeatedField< bool >*
GS2C_Country_Task_Player::mutable_is_take_reward() {
  return &is_take_reward_;
}

// repeated uint32 task_end_rank = 4;
inline int GS2C_Country_Task_Player::task_end_rank_size() const {
  return task_end_rank_.size();
}
inline void GS2C_Country_Task_Player::clear_task_end_rank() {
  task_end_rank_.Clear();
}
inline ::google::protobuf::uint32 GS2C_Country_Task_Player::task_end_rank(int index) const {
  return task_end_rank_.Get(index);
}
inline void GS2C_Country_Task_Player::set_task_end_rank(int index, ::google::protobuf::uint32 value) {
  task_end_rank_.Set(index, value);
}
inline void GS2C_Country_Task_Player::add_task_end_rank(::google::protobuf::uint32 value) {
  task_end_rank_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GS2C_Country_Task_Player::task_end_rank() const {
  return task_end_rank_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GS2C_Country_Task_Player::mutable_task_end_rank() {
  return &task_end_rank_;
}

// repeated .pb.GS2C_LootList rank_reward = 5;
inline int GS2C_Country_Task_Player::rank_reward_size() const {
  return rank_reward_.size();
}
inline void GS2C_Country_Task_Player::clear_rank_reward() {
  rank_reward_.Clear();
}
inline const ::pb::GS2C_LootList& GS2C_Country_Task_Player::rank_reward(int index) const {
  return rank_reward_.Get(index);
}
inline ::pb::GS2C_LootList* GS2C_Country_Task_Player::mutable_rank_reward(int index) {
  return rank_reward_.Mutable(index);
}
inline ::pb::GS2C_LootList* GS2C_Country_Task_Player::add_rank_reward() {
  return rank_reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_LootList >&
GS2C_Country_Task_Player::rank_reward() const {
  return rank_reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_LootList >*
GS2C_Country_Task_Player::mutable_rank_reward() {
  return &rank_reward_;
}

// optional .pb.GS2C_LootList win_reward = 6;
inline bool GS2C_Country_Task_Player::has_win_reward() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GS2C_Country_Task_Player::set_has_win_reward() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GS2C_Country_Task_Player::clear_has_win_reward() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GS2C_Country_Task_Player::clear_win_reward() {
  if (win_reward_ != NULL) win_reward_->::pb::GS2C_LootList::Clear();
  clear_has_win_reward();
}
inline const ::pb::GS2C_LootList& GS2C_Country_Task_Player::win_reward() const {
  return win_reward_ != NULL ? *win_reward_ : *default_instance_->win_reward_;
}
inline ::pb::GS2C_LootList* GS2C_Country_Task_Player::mutable_win_reward() {
  set_has_win_reward();
  if (win_reward_ == NULL) win_reward_ = new ::pb::GS2C_LootList;
  return win_reward_;
}
inline ::pb::GS2C_LootList* GS2C_Country_Task_Player::release_win_reward() {
  clear_has_win_reward();
  ::pb::GS2C_LootList* temp = win_reward_;
  win_reward_ = NULL;
  return temp;
}
inline void GS2C_Country_Task_Player::set_allocated_win_reward(::pb::GS2C_LootList* win_reward) {
  delete win_reward_;
  win_reward_ = win_reward;
  if (win_reward) {
    set_has_win_reward();
  } else {
    clear_has_win_reward();
  }
}

// optional uint64 cd_time = 7;
inline bool GS2C_Country_Task_Player::has_cd_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GS2C_Country_Task_Player::set_has_cd_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GS2C_Country_Task_Player::clear_has_cd_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GS2C_Country_Task_Player::clear_cd_time() {
  cd_time_ = GOOGLE_ULONGLONG(0);
  clear_has_cd_time();
}
inline ::google::protobuf::uint64 GS2C_Country_Task_Player::cd_time() const {
  return cd_time_;
}
inline void GS2C_Country_Task_Player::set_cd_time(::google::protobuf::uint64 value) {
  set_has_cd_time();
  cd_time_ = value;
}

// optional .pb.Struct_Country_Pk_Info pk_info = 8;
inline bool GS2C_Country_Task_Player::has_pk_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GS2C_Country_Task_Player::set_has_pk_info() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GS2C_Country_Task_Player::clear_has_pk_info() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GS2C_Country_Task_Player::clear_pk_info() {
  if (pk_info_ != NULL) pk_info_->::pb::Struct_Country_Pk_Info::Clear();
  clear_has_pk_info();
}
inline const ::pb::Struct_Country_Pk_Info& GS2C_Country_Task_Player::pk_info() const {
  return pk_info_ != NULL ? *pk_info_ : *default_instance_->pk_info_;
}
inline ::pb::Struct_Country_Pk_Info* GS2C_Country_Task_Player::mutable_pk_info() {
  set_has_pk_info();
  if (pk_info_ == NULL) pk_info_ = new ::pb::Struct_Country_Pk_Info;
  return pk_info_;
}
inline ::pb::Struct_Country_Pk_Info* GS2C_Country_Task_Player::release_pk_info() {
  clear_has_pk_info();
  ::pb::Struct_Country_Pk_Info* temp = pk_info_;
  pk_info_ = NULL;
  return temp;
}
inline void GS2C_Country_Task_Player::set_allocated_pk_info(::pb::Struct_Country_Pk_Info* pk_info) {
  delete pk_info_;
  pk_info_ = pk_info;
  if (pk_info) {
    set_has_pk_info();
  } else {
    clear_has_pk_info();
  }
}

// -------------------------------------------------------------------

// C2GS_Country_Task_Reward

// required uint32 task_idx = 1;
inline bool C2GS_Country_Task_Reward::has_task_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Country_Task_Reward::set_has_task_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Country_Task_Reward::clear_has_task_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Country_Task_Reward::clear_task_idx() {
  task_idx_ = 0u;
  clear_has_task_idx();
}
inline ::google::protobuf::uint32 C2GS_Country_Task_Reward::task_idx() const {
  return task_idx_;
}
inline void C2GS_Country_Task_Reward::set_task_idx(::google::protobuf::uint32 value) {
  set_has_task_idx();
  task_idx_ = value;
}

// -------------------------------------------------------------------

// GS2C_Country_Task_Reward_Ret

// required bool isSuccess = 1;
inline bool GS2C_Country_Task_Reward_Ret::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Country_Task_Reward_Ret::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Country_Task_Reward_Ret::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Country_Task_Reward_Ret::clear_issuccess() {
  issuccess_ = false;
  clear_has_issuccess();
}
inline bool GS2C_Country_Task_Reward_Ret::issuccess() const {
  return issuccess_;
}
inline void GS2C_Country_Task_Reward_Ret::set_issuccess(bool value) {
  set_has_issuccess();
  issuccess_ = value;
}

// -------------------------------------------------------------------

// Country_Task_Result

// optional uint32 rank = 1;
inline bool Country_Task_Result::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Country_Task_Result::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Country_Task_Result::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Country_Task_Result::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 Country_Task_Result::rank() const {
  return rank_;
}
inline void Country_Task_Result::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint32 kill_count = 2;
inline bool Country_Task_Result::has_kill_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Country_Task_Result::set_has_kill_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Country_Task_Result::clear_has_kill_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Country_Task_Result::clear_kill_count() {
  kill_count_ = 0u;
  clear_has_kill_count();
}
inline ::google::protobuf::uint32 Country_Task_Result::kill_count() const {
  return kill_count_;
}
inline void Country_Task_Result::set_kill_count(::google::protobuf::uint32 value) {
  set_has_kill_count();
  kill_count_ = value;
}

// -------------------------------------------------------------------

// GS2C_Country_Task_End

// required uint32 city_id = 1;
inline bool GS2C_Country_Task_End::has_city_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Country_Task_End::set_has_city_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Country_Task_End::clear_has_city_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Country_Task_End::clear_city_id() {
  city_id_ = 0u;
  clear_has_city_id();
}
inline ::google::protobuf::uint32 GS2C_Country_Task_End::city_id() const {
  return city_id_;
}
inline void GS2C_Country_Task_End::set_city_id(::google::protobuf::uint32 value) {
  set_has_city_id();
  city_id_ = value;
}

// optional .pb.Country_Task_Result result = 2;
inline bool GS2C_Country_Task_End::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Country_Task_End::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Country_Task_End::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Country_Task_End::clear_result() {
  if (result_ != NULL) result_->::pb::Country_Task_Result::Clear();
  clear_has_result();
}
inline const ::pb::Country_Task_Result& GS2C_Country_Task_End::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::pb::Country_Task_Result* GS2C_Country_Task_End::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::pb::Country_Task_Result;
  return result_;
}
inline ::pb::Country_Task_Result* GS2C_Country_Task_End::release_result() {
  clear_has_result();
  ::pb::Country_Task_Result* temp = result_;
  result_ = NULL;
  return temp;
}
inline void GS2C_Country_Task_End::set_allocated_result(::pb::Country_Task_Result* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
}

// -------------------------------------------------------------------

// Struct_Country_Pk_Player_mirror

// required uint32 head_id = 1;
inline bool Struct_Country_Pk_Player_mirror::has_head_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Struct_Country_Pk_Player_mirror::set_has_head_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Struct_Country_Pk_Player_mirror::clear_has_head_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Struct_Country_Pk_Player_mirror::clear_head_id() {
  head_id_ = 0u;
  clear_has_head_id();
}
inline ::google::protobuf::uint32 Struct_Country_Pk_Player_mirror::head_id() const {
  return head_id_;
}
inline void Struct_Country_Pk_Player_mirror::set_head_id(::google::protobuf::uint32 value) {
  set_has_head_id();
  head_id_ = value;
}

// required string name = 2;
inline bool Struct_Country_Pk_Player_mirror::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Struct_Country_Pk_Player_mirror::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Struct_Country_Pk_Player_mirror::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Struct_Country_Pk_Player_mirror::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Struct_Country_Pk_Player_mirror::name() const {
  return *name_;
}
inline void Struct_Country_Pk_Player_mirror::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Struct_Country_Pk_Player_mirror::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Struct_Country_Pk_Player_mirror::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Struct_Country_Pk_Player_mirror::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Struct_Country_Pk_Player_mirror::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Struct_Country_Pk_Player_mirror::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 level = 3;
inline bool Struct_Country_Pk_Player_mirror::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Struct_Country_Pk_Player_mirror::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Struct_Country_Pk_Player_mirror::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Struct_Country_Pk_Player_mirror::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 Struct_Country_Pk_Player_mirror::level() const {
  return level_;
}
inline void Struct_Country_Pk_Player_mirror::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// repeated uint32 card_tid = 4;
inline int Struct_Country_Pk_Player_mirror::card_tid_size() const {
  return card_tid_.size();
}
inline void Struct_Country_Pk_Player_mirror::clear_card_tid() {
  card_tid_.Clear();
}
inline ::google::protobuf::uint32 Struct_Country_Pk_Player_mirror::card_tid(int index) const {
  return card_tid_.Get(index);
}
inline void Struct_Country_Pk_Player_mirror::set_card_tid(int index, ::google::protobuf::uint32 value) {
  card_tid_.Set(index, value);
}
inline void Struct_Country_Pk_Player_mirror::add_card_tid(::google::protobuf::uint32 value) {
  card_tid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Struct_Country_Pk_Player_mirror::card_tid() const {
  return card_tid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Struct_Country_Pk_Player_mirror::mutable_card_tid() {
  return &card_tid_;
}

// repeated uint32 card_lv = 5;
inline int Struct_Country_Pk_Player_mirror::card_lv_size() const {
  return card_lv_.size();
}
inline void Struct_Country_Pk_Player_mirror::clear_card_lv() {
  card_lv_.Clear();
}
inline ::google::protobuf::uint32 Struct_Country_Pk_Player_mirror::card_lv(int index) const {
  return card_lv_.Get(index);
}
inline void Struct_Country_Pk_Player_mirror::set_card_lv(int index, ::google::protobuf::uint32 value) {
  card_lv_.Set(index, value);
}
inline void Struct_Country_Pk_Player_mirror::add_card_lv(::google::protobuf::uint32 value) {
  card_lv_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Struct_Country_Pk_Player_mirror::card_lv() const {
  return card_lv_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Struct_Country_Pk_Player_mirror::mutable_card_lv() {
  return &card_lv_;
}

// -------------------------------------------------------------------

// Struct_Country_Pk_History

// required string rival_name = 1;
inline bool Struct_Country_Pk_History::has_rival_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Struct_Country_Pk_History::set_has_rival_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Struct_Country_Pk_History::clear_has_rival_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Struct_Country_Pk_History::clear_rival_name() {
  if (rival_name_ != &::google::protobuf::internal::kEmptyString) {
    rival_name_->clear();
  }
  clear_has_rival_name();
}
inline const ::std::string& Struct_Country_Pk_History::rival_name() const {
  return *rival_name_;
}
inline void Struct_Country_Pk_History::set_rival_name(const ::std::string& value) {
  set_has_rival_name();
  if (rival_name_ == &::google::protobuf::internal::kEmptyString) {
    rival_name_ = new ::std::string;
  }
  rival_name_->assign(value);
}
inline void Struct_Country_Pk_History::set_rival_name(const char* value) {
  set_has_rival_name();
  if (rival_name_ == &::google::protobuf::internal::kEmptyString) {
    rival_name_ = new ::std::string;
  }
  rival_name_->assign(value);
}
inline void Struct_Country_Pk_History::set_rival_name(const char* value, size_t size) {
  set_has_rival_name();
  if (rival_name_ == &::google::protobuf::internal::kEmptyString) {
    rival_name_ = new ::std::string;
  }
  rival_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Struct_Country_Pk_History::mutable_rival_name() {
  set_has_rival_name();
  if (rival_name_ == &::google::protobuf::internal::kEmptyString) {
    rival_name_ = new ::std::string;
  }
  return rival_name_;
}
inline ::std::string* Struct_Country_Pk_History::release_rival_name() {
  clear_has_rival_name();
  if (rival_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rival_name_;
    rival_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Struct_Country_Pk_History::set_allocated_rival_name(::std::string* rival_name) {
  if (rival_name_ != &::google::protobuf::internal::kEmptyString) {
    delete rival_name_;
  }
  if (rival_name) {
    set_has_rival_name();
    rival_name_ = rival_name;
  } else {
    clear_has_rival_name();
    rival_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool rival_is_att = 2;
inline bool Struct_Country_Pk_History::has_rival_is_att() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Struct_Country_Pk_History::set_has_rival_is_att() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Struct_Country_Pk_History::clear_has_rival_is_att() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Struct_Country_Pk_History::clear_rival_is_att() {
  rival_is_att_ = false;
  clear_has_rival_is_att();
}
inline bool Struct_Country_Pk_History::rival_is_att() const {
  return rival_is_att_;
}
inline void Struct_Country_Pk_History::set_rival_is_att(bool value) {
  set_has_rival_is_att();
  rival_is_att_ = value;
}

// required bool rival_is_win = 3;
inline bool Struct_Country_Pk_History::has_rival_is_win() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Struct_Country_Pk_History::set_has_rival_is_win() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Struct_Country_Pk_History::clear_has_rival_is_win() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Struct_Country_Pk_History::clear_rival_is_win() {
  rival_is_win_ = false;
  clear_has_rival_is_win();
}
inline bool Struct_Country_Pk_History::rival_is_win() const {
  return rival_is_win_;
}
inline void Struct_Country_Pk_History::set_rival_is_win(bool value) {
  set_has_rival_is_win();
  rival_is_win_ = value;
}

// required uint32 my_score_change = 4;
inline bool Struct_Country_Pk_History::has_my_score_change() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Struct_Country_Pk_History::set_has_my_score_change() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Struct_Country_Pk_History::clear_has_my_score_change() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Struct_Country_Pk_History::clear_my_score_change() {
  my_score_change_ = 0u;
  clear_has_my_score_change();
}
inline ::google::protobuf::uint32 Struct_Country_Pk_History::my_score_change() const {
  return my_score_change_;
}
inline void Struct_Country_Pk_History::set_my_score_change(::google::protobuf::uint32 value) {
  set_has_my_score_change();
  my_score_change_ = value;
}

// -------------------------------------------------------------------

// Struct_Country_Pk_Info

// repeated string recent_player_name = 1;
inline int Struct_Country_Pk_Info::recent_player_name_size() const {
  return recent_player_name_.size();
}
inline void Struct_Country_Pk_Info::clear_recent_player_name() {
  recent_player_name_.Clear();
}
inline const ::std::string& Struct_Country_Pk_Info::recent_player_name(int index) const {
  return recent_player_name_.Get(index);
}
inline ::std::string* Struct_Country_Pk_Info::mutable_recent_player_name(int index) {
  return recent_player_name_.Mutable(index);
}
inline void Struct_Country_Pk_Info::set_recent_player_name(int index, const ::std::string& value) {
  recent_player_name_.Mutable(index)->assign(value);
}
inline void Struct_Country_Pk_Info::set_recent_player_name(int index, const char* value) {
  recent_player_name_.Mutable(index)->assign(value);
}
inline void Struct_Country_Pk_Info::set_recent_player_name(int index, const char* value, size_t size) {
  recent_player_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Struct_Country_Pk_Info::add_recent_player_name() {
  return recent_player_name_.Add();
}
inline void Struct_Country_Pk_Info::add_recent_player_name(const ::std::string& value) {
  recent_player_name_.Add()->assign(value);
}
inline void Struct_Country_Pk_Info::add_recent_player_name(const char* value) {
  recent_player_name_.Add()->assign(value);
}
inline void Struct_Country_Pk_Info::add_recent_player_name(const char* value, size_t size) {
  recent_player_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Struct_Country_Pk_Info::recent_player_name() const {
  return recent_player_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Struct_Country_Pk_Info::mutable_recent_player_name() {
  return &recent_player_name_;
}

// repeated uint32 recent_player_score = 2;
inline int Struct_Country_Pk_Info::recent_player_score_size() const {
  return recent_player_score_.size();
}
inline void Struct_Country_Pk_Info::clear_recent_player_score() {
  recent_player_score_.Clear();
}
inline ::google::protobuf::uint32 Struct_Country_Pk_Info::recent_player_score(int index) const {
  return recent_player_score_.Get(index);
}
inline void Struct_Country_Pk_Info::set_recent_player_score(int index, ::google::protobuf::uint32 value) {
  recent_player_score_.Set(index, value);
}
inline void Struct_Country_Pk_Info::add_recent_player_score(::google::protobuf::uint32 value) {
  recent_player_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Struct_Country_Pk_Info::recent_player_score() const {
  return recent_player_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Struct_Country_Pk_Info::mutable_recent_player_score() {
  return &recent_player_score_;
}

// repeated uint32 recent_player_country = 3;
inline int Struct_Country_Pk_Info::recent_player_country_size() const {
  return recent_player_country_.size();
}
inline void Struct_Country_Pk_Info::clear_recent_player_country() {
  recent_player_country_.Clear();
}
inline ::google::protobuf::uint32 Struct_Country_Pk_Info::recent_player_country(int index) const {
  return recent_player_country_.Get(index);
}
inline void Struct_Country_Pk_Info::set_recent_player_country(int index, ::google::protobuf::uint32 value) {
  recent_player_country_.Set(index, value);
}
inline void Struct_Country_Pk_Info::add_recent_player_country(::google::protobuf::uint32 value) {
  recent_player_country_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Struct_Country_Pk_Info::recent_player_country() const {
  return recent_player_country_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Struct_Country_Pk_Info::mutable_recent_player_country() {
  return &recent_player_country_;
}

// required string rank_no1_name = 4;
inline bool Struct_Country_Pk_Info::has_rank_no1_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Struct_Country_Pk_Info::set_has_rank_no1_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Struct_Country_Pk_Info::clear_has_rank_no1_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Struct_Country_Pk_Info::clear_rank_no1_name() {
  if (rank_no1_name_ != &::google::protobuf::internal::kEmptyString) {
    rank_no1_name_->clear();
  }
  clear_has_rank_no1_name();
}
inline const ::std::string& Struct_Country_Pk_Info::rank_no1_name() const {
  return *rank_no1_name_;
}
inline void Struct_Country_Pk_Info::set_rank_no1_name(const ::std::string& value) {
  set_has_rank_no1_name();
  if (rank_no1_name_ == &::google::protobuf::internal::kEmptyString) {
    rank_no1_name_ = new ::std::string;
  }
  rank_no1_name_->assign(value);
}
inline void Struct_Country_Pk_Info::set_rank_no1_name(const char* value) {
  set_has_rank_no1_name();
  if (rank_no1_name_ == &::google::protobuf::internal::kEmptyString) {
    rank_no1_name_ = new ::std::string;
  }
  rank_no1_name_->assign(value);
}
inline void Struct_Country_Pk_Info::set_rank_no1_name(const char* value, size_t size) {
  set_has_rank_no1_name();
  if (rank_no1_name_ == &::google::protobuf::internal::kEmptyString) {
    rank_no1_name_ = new ::std::string;
  }
  rank_no1_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Struct_Country_Pk_Info::mutable_rank_no1_name() {
  set_has_rank_no1_name();
  if (rank_no1_name_ == &::google::protobuf::internal::kEmptyString) {
    rank_no1_name_ = new ::std::string;
  }
  return rank_no1_name_;
}
inline ::std::string* Struct_Country_Pk_Info::release_rank_no1_name() {
  clear_has_rank_no1_name();
  if (rank_no1_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rank_no1_name_;
    rank_no1_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Struct_Country_Pk_Info::set_allocated_rank_no1_name(::std::string* rank_no1_name) {
  if (rank_no1_name_ != &::google::protobuf::internal::kEmptyString) {
    delete rank_no1_name_;
  }
  if (rank_no1_name) {
    set_has_rank_no1_name();
    rank_no1_name_ = rank_no1_name;
  } else {
    clear_has_rank_no1_name();
    rank_no1_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .pb.Struct_Country_Pk_Player_mirror mirror_list = 5;
inline int Struct_Country_Pk_Info::mirror_list_size() const {
  return mirror_list_.size();
}
inline void Struct_Country_Pk_Info::clear_mirror_list() {
  mirror_list_.Clear();
}
inline const ::pb::Struct_Country_Pk_Player_mirror& Struct_Country_Pk_Info::mirror_list(int index) const {
  return mirror_list_.Get(index);
}
inline ::pb::Struct_Country_Pk_Player_mirror* Struct_Country_Pk_Info::mutable_mirror_list(int index) {
  return mirror_list_.Mutable(index);
}
inline ::pb::Struct_Country_Pk_Player_mirror* Struct_Country_Pk_Info::add_mirror_list() {
  return mirror_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Struct_Country_Pk_Player_mirror >&
Struct_Country_Pk_Info::mirror_list() const {
  return mirror_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Struct_Country_Pk_Player_mirror >*
Struct_Country_Pk_Info::mutable_mirror_list() {
  return &mirror_list_;
}

// repeated .pb.Struct_Country_Pk_History pk_history = 6;
inline int Struct_Country_Pk_Info::pk_history_size() const {
  return pk_history_.size();
}
inline void Struct_Country_Pk_Info::clear_pk_history() {
  pk_history_.Clear();
}
inline const ::pb::Struct_Country_Pk_History& Struct_Country_Pk_Info::pk_history(int index) const {
  return pk_history_.Get(index);
}
inline ::pb::Struct_Country_Pk_History* Struct_Country_Pk_Info::mutable_pk_history(int index) {
  return pk_history_.Mutable(index);
}
inline ::pb::Struct_Country_Pk_History* Struct_Country_Pk_Info::add_pk_history() {
  return pk_history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Struct_Country_Pk_History >&
Struct_Country_Pk_Info::pk_history() const {
  return pk_history_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Struct_Country_Pk_History >*
Struct_Country_Pk_Info::mutable_pk_history() {
  return &pk_history_;
}

// required bool is_pking = 7;
inline bool Struct_Country_Pk_Info::has_is_pking() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Struct_Country_Pk_Info::set_has_is_pking() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Struct_Country_Pk_Info::clear_has_is_pking() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Struct_Country_Pk_Info::clear_is_pking() {
  is_pking_ = false;
  clear_has_is_pking();
}
inline bool Struct_Country_Pk_Info::is_pking() const {
  return is_pking_;
}
inline void Struct_Country_Pk_Info::set_is_pking(bool value) {
  set_has_is_pking();
  is_pking_ = value;
}

// required uint32 total_win = 8;
inline bool Struct_Country_Pk_Info::has_total_win() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Struct_Country_Pk_Info::set_has_total_win() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Struct_Country_Pk_Info::clear_has_total_win() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Struct_Country_Pk_Info::clear_total_win() {
  total_win_ = 0u;
  clear_has_total_win();
}
inline ::google::protobuf::uint32 Struct_Country_Pk_Info::total_win() const {
  return total_win_;
}
inline void Struct_Country_Pk_Info::set_total_win(::google::protobuf::uint32 value) {
  set_has_total_win();
  total_win_ = value;
}

// required uint32 total_lose = 9;
inline bool Struct_Country_Pk_Info::has_total_lose() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Struct_Country_Pk_Info::set_has_total_lose() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Struct_Country_Pk_Info::clear_has_total_lose() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Struct_Country_Pk_Info::clear_total_lose() {
  total_lose_ = 0u;
  clear_has_total_lose();
}
inline ::google::protobuf::uint32 Struct_Country_Pk_Info::total_lose() const {
  return total_lose_;
}
inline void Struct_Country_Pk_Info::set_total_lose(::google::protobuf::uint32 value) {
  set_has_total_lose();
  total_lose_ = value;
}

// -------------------------------------------------------------------

// C2GS_Country_Task_Pk_Challenge

// required uint32 idx = 1;
inline bool C2GS_Country_Task_Pk_Challenge::has_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Country_Task_Pk_Challenge::set_has_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Country_Task_Pk_Challenge::clear_has_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Country_Task_Pk_Challenge::clear_idx() {
  idx_ = 0u;
  clear_has_idx();
}
inline ::google::protobuf::uint32 C2GS_Country_Task_Pk_Challenge::idx() const {
  return idx_;
}
inline void C2GS_Country_Task_Pk_Challenge::set_idx(::google::protobuf::uint32 value) {
  set_has_idx();
  idx_ = value;
}

// -------------------------------------------------------------------

// GS2C_Monster_City_All_Info

// optional .pb.MonsterCityLst all_info = 1;
inline bool GS2C_Monster_City_All_Info::has_all_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Monster_City_All_Info::set_has_all_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Monster_City_All_Info::clear_has_all_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Monster_City_All_Info::clear_all_info() {
  if (all_info_ != NULL) all_info_->::pb::MonsterCityLst::Clear();
  clear_has_all_info();
}
inline const ::pb::MonsterCityLst& GS2C_Monster_City_All_Info::all_info() const {
  return all_info_ != NULL ? *all_info_ : *default_instance_->all_info_;
}
inline ::pb::MonsterCityLst* GS2C_Monster_City_All_Info::mutable_all_info() {
  set_has_all_info();
  if (all_info_ == NULL) all_info_ = new ::pb::MonsterCityLst;
  return all_info_;
}
inline ::pb::MonsterCityLst* GS2C_Monster_City_All_Info::release_all_info() {
  clear_has_all_info();
  ::pb::MonsterCityLst* temp = all_info_;
  all_info_ = NULL;
  return temp;
}
inline void GS2C_Monster_City_All_Info::set_allocated_all_info(::pb::MonsterCityLst* all_info) {
  delete all_info_;
  all_info_ = all_info;
  if (all_info) {
    set_has_all_info();
  } else {
    clear_has_all_info();
  }
}

// optional uint64 CDEndTime = 2;
inline bool GS2C_Monster_City_All_Info::has_cdendtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Monster_City_All_Info::set_has_cdendtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Monster_City_All_Info::clear_has_cdendtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Monster_City_All_Info::clear_cdendtime() {
  cdendtime_ = GOOGLE_ULONGLONG(0);
  clear_has_cdendtime();
}
inline ::google::protobuf::uint64 GS2C_Monster_City_All_Info::cdendtime() const {
  return cdendtime_;
}
inline void GS2C_Monster_City_All_Info::set_cdendtime(::google::protobuf::uint64 value) {
  set_has_cdendtime();
  cdendtime_ = value;
}

// -------------------------------------------------------------------

// C2GS_Monster_City_Donate

// required uint32 dest_country_id = 1;
inline bool C2GS_Monster_City_Donate::has_dest_country_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Monster_City_Donate::set_has_dest_country_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Monster_City_Donate::clear_has_dest_country_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Monster_City_Donate::clear_dest_country_id() {
  dest_country_id_ = 0u;
  clear_has_dest_country_id();
}
inline ::google::protobuf::uint32 C2GS_Monster_City_Donate::dest_country_id() const {
  return dest_country_id_;
}
inline void C2GS_Monster_City_Donate::set_dest_country_id(::google::protobuf::uint32 value) {
  set_has_dest_country_id();
  dest_country_id_ = value;
}

// -------------------------------------------------------------------

// GS2C_Monster_City_Donate

// optional .pb.StReward reward = 1;
inline bool GS2C_Monster_City_Donate::has_reward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Monster_City_Donate::set_has_reward() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Monster_City_Donate::clear_has_reward() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Monster_City_Donate::clear_reward() {
  if (reward_ != NULL) reward_->::pb::StReward::Clear();
  clear_has_reward();
}
inline const ::pb::StReward& GS2C_Monster_City_Donate::reward() const {
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::pb::StReward* GS2C_Monster_City_Donate::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::pb::StReward;
  return reward_;
}
inline ::pb::StReward* GS2C_Monster_City_Donate::release_reward() {
  clear_has_reward();
  ::pb::StReward* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void GS2C_Monster_City_Donate::set_allocated_reward(::pb::StReward* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
}

// optional .pb.MonsterCity info = 2;
inline bool GS2C_Monster_City_Donate::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Monster_City_Donate::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Monster_City_Donate::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Monster_City_Donate::clear_info() {
  if (info_ != NULL) info_->::pb::MonsterCity::Clear();
  clear_has_info();
}
inline const ::pb::MonsterCity& GS2C_Monster_City_Donate::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::pb::MonsterCity* GS2C_Monster_City_Donate::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::pb::MonsterCity;
  return info_;
}
inline ::pb::MonsterCity* GS2C_Monster_City_Donate::release_info() {
  clear_has_info();
  ::pb::MonsterCity* temp = info_;
  info_ = NULL;
  return temp;
}
inline void GS2C_Monster_City_Donate::set_allocated_info(::pb::MonsterCity* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// optional uint64 CDEndTime = 3;
inline bool GS2C_Monster_City_Donate::has_cdendtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Monster_City_Donate::set_has_cdendtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Monster_City_Donate::clear_has_cdendtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Monster_City_Donate::clear_cdendtime() {
  cdendtime_ = GOOGLE_ULONGLONG(0);
  clear_has_cdendtime();
}
inline ::google::protobuf::uint64 GS2C_Monster_City_Donate::cdendtime() const {
  return cdendtime_;
}
inline void GS2C_Monster_City_Donate::set_cdendtime(::google::protobuf::uint64 value) {
  set_has_cdendtime();
  cdendtime_ = value;
}

// -------------------------------------------------------------------

// C2GS_Monster_City_Start_Invade

// required uint32 dest_country_id = 1;
inline bool C2GS_Monster_City_Start_Invade::has_dest_country_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Monster_City_Start_Invade::set_has_dest_country_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Monster_City_Start_Invade::clear_has_dest_country_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Monster_City_Start_Invade::clear_dest_country_id() {
  dest_country_id_ = 0u;
  clear_has_dest_country_id();
}
inline ::google::protobuf::uint32 C2GS_Monster_City_Start_Invade::dest_country_id() const {
  return dest_country_id_;
}
inline void C2GS_Monster_City_Start_Invade::set_dest_country_id(::google::protobuf::uint32 value) {
  set_has_dest_country_id();
  dest_country_id_ = value;
}

// -------------------------------------------------------------------

// GS2C_Monster_City_Invade_Rsp

// optional uint32 ret = 1;
inline bool GS2C_Monster_City_Invade_Rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Monster_City_Invade_Rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Monster_City_Invade_Rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Monster_City_Invade_Rsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 GS2C_Monster_City_Invade_Rsp::ret() const {
  return ret_;
}
inline void GS2C_Monster_City_Invade_Rsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .pb.MonsterCity info = 2;
inline bool GS2C_Monster_City_Invade_Rsp::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Monster_City_Invade_Rsp::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Monster_City_Invade_Rsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Monster_City_Invade_Rsp::clear_info() {
  if (info_ != NULL) info_->::pb::MonsterCity::Clear();
  clear_has_info();
}
inline const ::pb::MonsterCity& GS2C_Monster_City_Invade_Rsp::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::pb::MonsterCity* GS2C_Monster_City_Invade_Rsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::pb::MonsterCity;
  return info_;
}
inline ::pb::MonsterCity* GS2C_Monster_City_Invade_Rsp::release_info() {
  clear_has_info();
  ::pb::MonsterCity* temp = info_;
  info_ = NULL;
  return temp;
}
inline void GS2C_Monster_City_Invade_Rsp::set_allocated_info(::pb::MonsterCity* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// GS2C_Country_Task_Insvest

// required bool is_begin = 1;
inline bool GS2C_Country_Task_Insvest::has_is_begin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Country_Task_Insvest::set_has_is_begin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Country_Task_Insvest::clear_has_is_begin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Country_Task_Insvest::clear_is_begin() {
  is_begin_ = false;
  clear_has_is_begin();
}
inline bool GS2C_Country_Task_Insvest::is_begin() const {
  return is_begin_;
}
inline void GS2C_Country_Task_Insvest::set_is_begin(bool value) {
  set_has_is_begin();
  is_begin_ = value;
}

// optional uint32 cur_stage = 2;
inline bool GS2C_Country_Task_Insvest::has_cur_stage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Country_Task_Insvest::set_has_cur_stage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Country_Task_Insvest::clear_has_cur_stage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Country_Task_Insvest::clear_cur_stage() {
  cur_stage_ = 0u;
  clear_has_cur_stage();
}
inline ::google::protobuf::uint32 GS2C_Country_Task_Insvest::cur_stage() const {
  return cur_stage_;
}
inline void GS2C_Country_Task_Insvest::set_cur_stage(::google::protobuf::uint32 value) {
  set_has_cur_stage();
  cur_stage_ = value;
}

// optional uint64 cur_stage_begin_time = 3;
inline bool GS2C_Country_Task_Insvest::has_cur_stage_begin_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Country_Task_Insvest::set_has_cur_stage_begin_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Country_Task_Insvest::clear_has_cur_stage_begin_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Country_Task_Insvest::clear_cur_stage_begin_time() {
  cur_stage_begin_time_ = GOOGLE_ULONGLONG(0);
  clear_has_cur_stage_begin_time();
}
inline ::google::protobuf::uint64 GS2C_Country_Task_Insvest::cur_stage_begin_time() const {
  return cur_stage_begin_time_;
}
inline void GS2C_Country_Task_Insvest::set_cur_stage_begin_time(::google::protobuf::uint64 value) {
  set_has_cur_stage_begin_time();
  cur_stage_begin_time_ = value;
}

// repeated uint32 cur_stage_now_country_invest_money = 4;
inline int GS2C_Country_Task_Insvest::cur_stage_now_country_invest_money_size() const {
  return cur_stage_now_country_invest_money_.size();
}
inline void GS2C_Country_Task_Insvest::clear_cur_stage_now_country_invest_money() {
  cur_stage_now_country_invest_money_.Clear();
}
inline ::google::protobuf::uint32 GS2C_Country_Task_Insvest::cur_stage_now_country_invest_money(int index) const {
  return cur_stage_now_country_invest_money_.Get(index);
}
inline void GS2C_Country_Task_Insvest::set_cur_stage_now_country_invest_money(int index, ::google::protobuf::uint32 value) {
  cur_stage_now_country_invest_money_.Set(index, value);
}
inline void GS2C_Country_Task_Insvest::add_cur_stage_now_country_invest_money(::google::protobuf::uint32 value) {
  cur_stage_now_country_invest_money_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GS2C_Country_Task_Insvest::cur_stage_now_country_invest_money() const {
  return cur_stage_now_country_invest_money_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GS2C_Country_Task_Insvest::mutable_cur_stage_now_country_invest_money() {
  return &cur_stage_now_country_invest_money_;
}

// -------------------------------------------------------------------

// GS2C_Country_Invest_Player

// optional uint32 stageID = 1;
inline bool GS2C_Country_Invest_Player::has_stageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Country_Invest_Player::set_has_stageid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Country_Invest_Player::clear_has_stageid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Country_Invest_Player::clear_stageid() {
  stageid_ = 0u;
  clear_has_stageid();
}
inline ::google::protobuf::uint32 GS2C_Country_Invest_Player::stageid() const {
  return stageid_;
}
inline void GS2C_Country_Invest_Player::set_stageid(::google::protobuf::uint32 value) {
  set_has_stageid();
  stageid_ = value;
}

// optional uint32 rankID = 2;
inline bool GS2C_Country_Invest_Player::has_rankid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Country_Invest_Player::set_has_rankid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Country_Invest_Player::clear_has_rankid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Country_Invest_Player::clear_rankid() {
  rankid_ = 0u;
  clear_has_rankid();
}
inline ::google::protobuf::uint32 GS2C_Country_Invest_Player::rankid() const {
  return rankid_;
}
inline void GS2C_Country_Invest_Player::set_rankid(::google::protobuf::uint32 value) {
  set_has_rankid();
  rankid_ = value;
}

// optional uint32 donateNum = 3;
inline bool GS2C_Country_Invest_Player::has_donatenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Country_Invest_Player::set_has_donatenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Country_Invest_Player::clear_has_donatenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Country_Invest_Player::clear_donatenum() {
  donatenum_ = 0u;
  clear_has_donatenum();
}
inline ::google::protobuf::uint32 GS2C_Country_Invest_Player::donatenum() const {
  return donatenum_;
}
inline void GS2C_Country_Invest_Player::set_donatenum(::google::protobuf::uint32 value) {
  set_has_donatenum();
  donatenum_ = value;
}

// optional bool is_take_reward = 4;
inline bool GS2C_Country_Invest_Player::has_is_take_reward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Country_Invest_Player::set_has_is_take_reward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Country_Invest_Player::clear_has_is_take_reward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Country_Invest_Player::clear_is_take_reward() {
  is_take_reward_ = false;
  clear_has_is_take_reward();
}
inline bool GS2C_Country_Invest_Player::is_take_reward() const {
  return is_take_reward_;
}
inline void GS2C_Country_Invest_Player::set_is_take_reward(bool value) {
  set_has_is_take_reward();
  is_take_reward_ = value;
}

// optional bool canTakeExReward = 5;
inline bool GS2C_Country_Invest_Player::has_cantakeexreward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GS2C_Country_Invest_Player::set_has_cantakeexreward() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GS2C_Country_Invest_Player::clear_has_cantakeexreward() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GS2C_Country_Invest_Player::clear_cantakeexreward() {
  cantakeexreward_ = false;
  clear_has_cantakeexreward();
}
inline bool GS2C_Country_Invest_Player::cantakeexreward() const {
  return cantakeexreward_;
}
inline void GS2C_Country_Invest_Player::set_cantakeexreward(bool value) {
  set_has_cantakeexreward();
  cantakeexreward_ = value;
}

// optional uint64 cd_time = 6;
inline bool GS2C_Country_Invest_Player::has_cd_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GS2C_Country_Invest_Player::set_has_cd_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GS2C_Country_Invest_Player::clear_has_cd_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GS2C_Country_Invest_Player::clear_cd_time() {
  cd_time_ = GOOGLE_ULONGLONG(0);
  clear_has_cd_time();
}
inline ::google::protobuf::uint64 GS2C_Country_Invest_Player::cd_time() const {
  return cd_time_;
}
inline void GS2C_Country_Invest_Player::set_cd_time(::google::protobuf::uint64 value) {
  set_has_cd_time();
  cd_time_ = value;
}

// optional .pb.GS2C_LootList rank_reward = 7;
inline bool GS2C_Country_Invest_Player::has_rank_reward() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GS2C_Country_Invest_Player::set_has_rank_reward() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GS2C_Country_Invest_Player::clear_has_rank_reward() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GS2C_Country_Invest_Player::clear_rank_reward() {
  if (rank_reward_ != NULL) rank_reward_->::pb::GS2C_LootList::Clear();
  clear_has_rank_reward();
}
inline const ::pb::GS2C_LootList& GS2C_Country_Invest_Player::rank_reward() const {
  return rank_reward_ != NULL ? *rank_reward_ : *default_instance_->rank_reward_;
}
inline ::pb::GS2C_LootList* GS2C_Country_Invest_Player::mutable_rank_reward() {
  set_has_rank_reward();
  if (rank_reward_ == NULL) rank_reward_ = new ::pb::GS2C_LootList;
  return rank_reward_;
}
inline ::pb::GS2C_LootList* GS2C_Country_Invest_Player::release_rank_reward() {
  clear_has_rank_reward();
  ::pb::GS2C_LootList* temp = rank_reward_;
  rank_reward_ = NULL;
  return temp;
}
inline void GS2C_Country_Invest_Player::set_allocated_rank_reward(::pb::GS2C_LootList* rank_reward) {
  delete rank_reward_;
  rank_reward_ = rank_reward;
  if (rank_reward) {
    set_has_rank_reward();
  } else {
    clear_has_rank_reward();
  }
}

// optional .pb.GS2C_LootList win_reward = 8;
inline bool GS2C_Country_Invest_Player::has_win_reward() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GS2C_Country_Invest_Player::set_has_win_reward() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GS2C_Country_Invest_Player::clear_has_win_reward() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GS2C_Country_Invest_Player::clear_win_reward() {
  if (win_reward_ != NULL) win_reward_->::pb::GS2C_LootList::Clear();
  clear_has_win_reward();
}
inline const ::pb::GS2C_LootList& GS2C_Country_Invest_Player::win_reward() const {
  return win_reward_ != NULL ? *win_reward_ : *default_instance_->win_reward_;
}
inline ::pb::GS2C_LootList* GS2C_Country_Invest_Player::mutable_win_reward() {
  set_has_win_reward();
  if (win_reward_ == NULL) win_reward_ = new ::pb::GS2C_LootList;
  return win_reward_;
}
inline ::pb::GS2C_LootList* GS2C_Country_Invest_Player::release_win_reward() {
  clear_has_win_reward();
  ::pb::GS2C_LootList* temp = win_reward_;
  win_reward_ = NULL;
  return temp;
}
inline void GS2C_Country_Invest_Player::set_allocated_win_reward(::pb::GS2C_LootList* win_reward) {
  delete win_reward_;
  win_reward_ = win_reward;
  if (win_reward) {
    set_has_win_reward();
  } else {
    clear_has_win_reward();
  }
}

// optional uint32 total_donate = 9;
inline bool GS2C_Country_Invest_Player::has_total_donate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GS2C_Country_Invest_Player::set_has_total_donate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GS2C_Country_Invest_Player::clear_has_total_donate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GS2C_Country_Invest_Player::clear_total_donate() {
  total_donate_ = 0u;
  clear_has_total_donate();
}
inline ::google::protobuf::uint32 GS2C_Country_Invest_Player::total_donate() const {
  return total_donate_;
}
inline void GS2C_Country_Invest_Player::set_total_donate(::google::protobuf::uint32 value) {
  set_has_total_donate();
  total_donate_ = value;
}

// -------------------------------------------------------------------

// C2GS_Country_Invest_Donate

// optional uint32 stage = 1;
inline bool C2GS_Country_Invest_Donate::has_stage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Country_Invest_Donate::set_has_stage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Country_Invest_Donate::clear_has_stage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Country_Invest_Donate::clear_stage() {
  stage_ = 0u;
  clear_has_stage();
}
inline ::google::protobuf::uint32 C2GS_Country_Invest_Donate::stage() const {
  return stage_;
}
inline void C2GS_Country_Invest_Donate::set_stage(::google::protobuf::uint32 value) {
  set_has_stage();
  stage_ = value;
}

// -------------------------------------------------------------------

// GS2C_Country_Invest_Donate_Ret

// required bool isSuccess = 1;
inline bool GS2C_Country_Invest_Donate_Ret::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Country_Invest_Donate_Ret::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Country_Invest_Donate_Ret::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Country_Invest_Donate_Ret::clear_issuccess() {
  issuccess_ = false;
  clear_has_issuccess();
}
inline bool GS2C_Country_Invest_Donate_Ret::issuccess() const {
  return issuccess_;
}
inline void GS2C_Country_Invest_Donate_Ret::set_issuccess(bool value) {
  set_has_issuccess();
  issuccess_ = value;
}

// optional .pb.Country_Task_Err errRet = 2;
inline bool GS2C_Country_Invest_Donate_Ret::has_errret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Country_Invest_Donate_Ret::set_has_errret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Country_Invest_Donate_Ret::clear_has_errret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Country_Invest_Donate_Ret::clear_errret() {
  errret_ = 1;
  clear_has_errret();
}
inline ::pb::Country_Task_Err GS2C_Country_Invest_Donate_Ret::errret() const {
  return static_cast< ::pb::Country_Task_Err >(errret_);
}
inline void GS2C_Country_Invest_Donate_Ret::set_errret(::pb::Country_Task_Err value) {
  assert(::pb::Country_Task_Err_IsValid(value));
  set_has_errret();
  errret_ = value;
}

// optional uint32 my_invest_money = 3;
inline bool GS2C_Country_Invest_Donate_Ret::has_my_invest_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Country_Invest_Donate_Ret::set_has_my_invest_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Country_Invest_Donate_Ret::clear_has_my_invest_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Country_Invest_Donate_Ret::clear_my_invest_money() {
  my_invest_money_ = 0u;
  clear_has_my_invest_money();
}
inline ::google::protobuf::uint32 GS2C_Country_Invest_Donate_Ret::my_invest_money() const {
  return my_invest_money_;
}
inline void GS2C_Country_Invest_Donate_Ret::set_my_invest_money(::google::protobuf::uint32 value) {
  set_has_my_invest_money();
  my_invest_money_ = value;
}

// optional uint32 country_invest_money = 4;
inline bool GS2C_Country_Invest_Donate_Ret::has_country_invest_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Country_Invest_Donate_Ret::set_has_country_invest_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Country_Invest_Donate_Ret::clear_has_country_invest_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Country_Invest_Donate_Ret::clear_country_invest_money() {
  country_invest_money_ = 0u;
  clear_has_country_invest_money();
}
inline ::google::protobuf::uint32 GS2C_Country_Invest_Donate_Ret::country_invest_money() const {
  return country_invest_money_;
}
inline void GS2C_Country_Invest_Donate_Ret::set_country_invest_money(::google::protobuf::uint32 value) {
  set_has_country_invest_money();
  country_invest_money_ = value;
}

// optional uint64 cd_time = 5;
inline bool GS2C_Country_Invest_Donate_Ret::has_cd_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GS2C_Country_Invest_Donate_Ret::set_has_cd_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GS2C_Country_Invest_Donate_Ret::clear_has_cd_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GS2C_Country_Invest_Donate_Ret::clear_cd_time() {
  cd_time_ = GOOGLE_ULONGLONG(0);
  clear_has_cd_time();
}
inline ::google::protobuf::uint64 GS2C_Country_Invest_Donate_Ret::cd_time() const {
  return cd_time_;
}
inline void GS2C_Country_Invest_Donate_Ret::set_cd_time(::google::protobuf::uint64 value) {
  set_has_cd_time();
  cd_time_ = value;
}

// optional uint32 total_donate = 6;
inline bool GS2C_Country_Invest_Donate_Ret::has_total_donate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GS2C_Country_Invest_Donate_Ret::set_has_total_donate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GS2C_Country_Invest_Donate_Ret::clear_has_total_donate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GS2C_Country_Invest_Donate_Ret::clear_total_donate() {
  total_donate_ = 0u;
  clear_has_total_donate();
}
inline ::google::protobuf::uint32 GS2C_Country_Invest_Donate_Ret::total_donate() const {
  return total_donate_;
}
inline void GS2C_Country_Invest_Donate_Ret::set_total_donate(::google::protobuf::uint32 value) {
  set_has_total_donate();
  total_donate_ = value;
}

// optional .pb.GS2C_LootList successAward = 7;
inline bool GS2C_Country_Invest_Donate_Ret::has_successaward() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GS2C_Country_Invest_Donate_Ret::set_has_successaward() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GS2C_Country_Invest_Donate_Ret::clear_has_successaward() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GS2C_Country_Invest_Donate_Ret::clear_successaward() {
  if (successaward_ != NULL) successaward_->::pb::GS2C_LootList::Clear();
  clear_has_successaward();
}
inline const ::pb::GS2C_LootList& GS2C_Country_Invest_Donate_Ret::successaward() const {
  return successaward_ != NULL ? *successaward_ : *default_instance_->successaward_;
}
inline ::pb::GS2C_LootList* GS2C_Country_Invest_Donate_Ret::mutable_successaward() {
  set_has_successaward();
  if (successaward_ == NULL) successaward_ = new ::pb::GS2C_LootList;
  return successaward_;
}
inline ::pb::GS2C_LootList* GS2C_Country_Invest_Donate_Ret::release_successaward() {
  clear_has_successaward();
  ::pb::GS2C_LootList* temp = successaward_;
  successaward_ = NULL;
  return temp;
}
inline void GS2C_Country_Invest_Donate_Ret::set_allocated_successaward(::pb::GS2C_LootList* successaward) {
  delete successaward_;
  successaward_ = successaward;
  if (successaward) {
    set_has_successaward();
  } else {
    clear_has_successaward();
  }
}

// -------------------------------------------------------------------

// C2GS_Country_Invest_Take_Reward

// optional uint32 stage = 1;
inline bool C2GS_Country_Invest_Take_Reward::has_stage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Country_Invest_Take_Reward::set_has_stage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Country_Invest_Take_Reward::clear_has_stage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Country_Invest_Take_Reward::clear_stage() {
  stage_ = 0u;
  clear_has_stage();
}
inline ::google::protobuf::uint32 C2GS_Country_Invest_Take_Reward::stage() const {
  return stage_;
}
inline void C2GS_Country_Invest_Take_Reward::set_stage(::google::protobuf::uint32 value) {
  set_has_stage();
  stage_ = value;
}

// -------------------------------------------------------------------

// GS2C_Country_Invest_Take_Reward

// required bool isSuccess = 1;
inline bool GS2C_Country_Invest_Take_Reward::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Country_Invest_Take_Reward::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Country_Invest_Take_Reward::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Country_Invest_Take_Reward::clear_issuccess() {
  issuccess_ = false;
  clear_has_issuccess();
}
inline bool GS2C_Country_Invest_Take_Reward::issuccess() const {
  return issuccess_;
}
inline void GS2C_Country_Invest_Take_Reward::set_issuccess(bool value) {
  set_has_issuccess();
  issuccess_ = value;
}

// optional .pb.Country_Task_Err errRet = 2;
inline bool GS2C_Country_Invest_Take_Reward::has_errret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Country_Invest_Take_Reward::set_has_errret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Country_Invest_Take_Reward::clear_has_errret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Country_Invest_Take_Reward::clear_errret() {
  errret_ = 1;
  clear_has_errret();
}
inline ::pb::Country_Task_Err GS2C_Country_Invest_Take_Reward::errret() const {
  return static_cast< ::pb::Country_Task_Err >(errret_);
}
inline void GS2C_Country_Invest_Take_Reward::set_errret(::pb::Country_Task_Err value) {
  assert(::pb::Country_Task_Err_IsValid(value));
  set_has_errret();
  errret_ = value;
}

// -------------------------------------------------------------------

// GS2C_Country_Invest_Clear_CD_Ret

// required bool isSuccess = 1;
inline bool GS2C_Country_Invest_Clear_CD_Ret::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Country_Invest_Clear_CD_Ret::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Country_Invest_Clear_CD_Ret::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Country_Invest_Clear_CD_Ret::clear_issuccess() {
  issuccess_ = false;
  clear_has_issuccess();
}
inline bool GS2C_Country_Invest_Clear_CD_Ret::issuccess() const {
  return issuccess_;
}
inline void GS2C_Country_Invest_Clear_CD_Ret::set_issuccess(bool value) {
  set_has_issuccess();
  issuccess_ = value;
}

// optional .pb.Country_Task_Err errRet = 2;
inline bool GS2C_Country_Invest_Clear_CD_Ret::has_errret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Country_Invest_Clear_CD_Ret::set_has_errret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Country_Invest_Clear_CD_Ret::clear_has_errret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Country_Invest_Clear_CD_Ret::clear_errret() {
  errret_ = 1;
  clear_has_errret();
}
inline ::pb::Country_Task_Err GS2C_Country_Invest_Clear_CD_Ret::errret() const {
  return static_cast< ::pb::Country_Task_Err >(errret_);
}
inline void GS2C_Country_Invest_Clear_CD_Ret::set_errret(::pb::Country_Task_Err value) {
  assert(::pb::Country_Task_Err_IsValid(value));
  set_has_errret();
  errret_ = value;
}

// -------------------------------------------------------------------

// GS2C_Country_Task_Occupy

// required bool is_begin = 1;
inline bool GS2C_Country_Task_Occupy::has_is_begin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Country_Task_Occupy::set_has_is_begin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Country_Task_Occupy::clear_has_is_begin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Country_Task_Occupy::clear_is_begin() {
  is_begin_ = false;
  clear_has_is_begin();
}
inline bool GS2C_Country_Task_Occupy::is_begin() const {
  return is_begin_;
}
inline void GS2C_Country_Task_Occupy::set_is_begin(bool value) {
  set_has_is_begin();
  is_begin_ = value;
}

// optional uint32 cur_stage = 2;
inline bool GS2C_Country_Task_Occupy::has_cur_stage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Country_Task_Occupy::set_has_cur_stage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Country_Task_Occupy::clear_has_cur_stage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Country_Task_Occupy::clear_cur_stage() {
  cur_stage_ = 0u;
  clear_has_cur_stage();
}
inline ::google::protobuf::uint32 GS2C_Country_Task_Occupy::cur_stage() const {
  return cur_stage_;
}
inline void GS2C_Country_Task_Occupy::set_cur_stage(::google::protobuf::uint32 value) {
  set_has_cur_stage();
  cur_stage_ = value;
}

// optional uint64 cur_stage_begin_time = 3;
inline bool GS2C_Country_Task_Occupy::has_cur_stage_begin_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Country_Task_Occupy::set_has_cur_stage_begin_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Country_Task_Occupy::clear_has_cur_stage_begin_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Country_Task_Occupy::clear_cur_stage_begin_time() {
  cur_stage_begin_time_ = GOOGLE_ULONGLONG(0);
  clear_has_cur_stage_begin_time();
}
inline ::google::protobuf::uint64 GS2C_Country_Task_Occupy::cur_stage_begin_time() const {
  return cur_stage_begin_time_;
}
inline void GS2C_Country_Task_Occupy::set_cur_stage_begin_time(::google::protobuf::uint64 value) {
  set_has_cur_stage_begin_time();
  cur_stage_begin_time_ = value;
}

// repeated uint32 cur_stage_now_country_have_citys = 4;
inline int GS2C_Country_Task_Occupy::cur_stage_now_country_have_citys_size() const {
  return cur_stage_now_country_have_citys_.size();
}
inline void GS2C_Country_Task_Occupy::clear_cur_stage_now_country_have_citys() {
  cur_stage_now_country_have_citys_.Clear();
}
inline ::google::protobuf::uint32 GS2C_Country_Task_Occupy::cur_stage_now_country_have_citys(int index) const {
  return cur_stage_now_country_have_citys_.Get(index);
}
inline void GS2C_Country_Task_Occupy::set_cur_stage_now_country_have_citys(int index, ::google::protobuf::uint32 value) {
  cur_stage_now_country_have_citys_.Set(index, value);
}
inline void GS2C_Country_Task_Occupy::add_cur_stage_now_country_have_citys(::google::protobuf::uint32 value) {
  cur_stage_now_country_have_citys_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GS2C_Country_Task_Occupy::cur_stage_now_country_have_citys() const {
  return cur_stage_now_country_have_citys_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GS2C_Country_Task_Occupy::mutable_cur_stage_now_country_have_citys() {
  return &cur_stage_now_country_have_citys_;
}

// repeated uint32 cur_stage_begin_have_citys = 5;
inline int GS2C_Country_Task_Occupy::cur_stage_begin_have_citys_size() const {
  return cur_stage_begin_have_citys_.size();
}
inline void GS2C_Country_Task_Occupy::clear_cur_stage_begin_have_citys() {
  cur_stage_begin_have_citys_.Clear();
}
inline ::google::protobuf::uint32 GS2C_Country_Task_Occupy::cur_stage_begin_have_citys(int index) const {
  return cur_stage_begin_have_citys_.Get(index);
}
inline void GS2C_Country_Task_Occupy::set_cur_stage_begin_have_citys(int index, ::google::protobuf::uint32 value) {
  cur_stage_begin_have_citys_.Set(index, value);
}
inline void GS2C_Country_Task_Occupy::add_cur_stage_begin_have_citys(::google::protobuf::uint32 value) {
  cur_stage_begin_have_citys_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GS2C_Country_Task_Occupy::cur_stage_begin_have_citys() const {
  return cur_stage_begin_have_citys_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GS2C_Country_Task_Occupy::mutable_cur_stage_begin_have_citys() {
  return &cur_stage_begin_have_citys_;
}

// repeated uint32 need_total_citys = 6;
inline int GS2C_Country_Task_Occupy::need_total_citys_size() const {
  return need_total_citys_.size();
}
inline void GS2C_Country_Task_Occupy::clear_need_total_citys() {
  need_total_citys_.Clear();
}
inline ::google::protobuf::uint32 GS2C_Country_Task_Occupy::need_total_citys(int index) const {
  return need_total_citys_.Get(index);
}
inline void GS2C_Country_Task_Occupy::set_need_total_citys(int index, ::google::protobuf::uint32 value) {
  need_total_citys_.Set(index, value);
}
inline void GS2C_Country_Task_Occupy::add_need_total_citys(::google::protobuf::uint32 value) {
  need_total_citys_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GS2C_Country_Task_Occupy::need_total_citys() const {
  return need_total_citys_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GS2C_Country_Task_Occupy::mutable_need_total_citys() {
  return &need_total_citys_;
}

// -------------------------------------------------------------------

// GS2C_Country_Occupy_Player

// optional uint32 stageID = 1;
inline bool GS2C_Country_Occupy_Player::has_stageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Country_Occupy_Player::set_has_stageid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Country_Occupy_Player::clear_has_stageid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Country_Occupy_Player::clear_stageid() {
  stageid_ = 0u;
  clear_has_stageid();
}
inline ::google::protobuf::uint32 GS2C_Country_Occupy_Player::stageid() const {
  return stageid_;
}
inline void GS2C_Country_Occupy_Player::set_stageid(::google::protobuf::uint32 value) {
  set_has_stageid();
  stageid_ = value;
}

// optional uint32 rankID = 2;
inline bool GS2C_Country_Occupy_Player::has_rankid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Country_Occupy_Player::set_has_rankid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Country_Occupy_Player::clear_has_rankid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Country_Occupy_Player::clear_rankid() {
  rankid_ = 0u;
  clear_has_rankid();
}
inline ::google::protobuf::uint32 GS2C_Country_Occupy_Player::rankid() const {
  return rankid_;
}
inline void GS2C_Country_Occupy_Player::set_rankid(::google::protobuf::uint32 value) {
  set_has_rankid();
  rankid_ = value;
}

// optional uint32 rank = 3;
inline bool GS2C_Country_Occupy_Player::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Country_Occupy_Player::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Country_Occupy_Player::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Country_Occupy_Player::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 GS2C_Country_Occupy_Player::rank() const {
  return rank_;
}
inline void GS2C_Country_Occupy_Player::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// optional bool is_take_reward = 4;
inline bool GS2C_Country_Occupy_Player::has_is_take_reward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Country_Occupy_Player::set_has_is_take_reward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Country_Occupy_Player::clear_has_is_take_reward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Country_Occupy_Player::clear_is_take_reward() {
  is_take_reward_ = false;
  clear_has_is_take_reward();
}
inline bool GS2C_Country_Occupy_Player::is_take_reward() const {
  return is_take_reward_;
}
inline void GS2C_Country_Occupy_Player::set_is_take_reward(bool value) {
  set_has_is_take_reward();
  is_take_reward_ = value;
}

// optional bool canTakeExReward = 5;
inline bool GS2C_Country_Occupy_Player::has_cantakeexreward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GS2C_Country_Occupy_Player::set_has_cantakeexreward() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GS2C_Country_Occupy_Player::clear_has_cantakeexreward() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GS2C_Country_Occupy_Player::clear_cantakeexreward() {
  cantakeexreward_ = false;
  clear_has_cantakeexreward();
}
inline bool GS2C_Country_Occupy_Player::cantakeexreward() const {
  return cantakeexreward_;
}
inline void GS2C_Country_Occupy_Player::set_cantakeexreward(bool value) {
  set_has_cantakeexreward();
  cantakeexreward_ = value;
}

// optional .pb.GS2C_LootList rank_reward = 6;
inline bool GS2C_Country_Occupy_Player::has_rank_reward() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GS2C_Country_Occupy_Player::set_has_rank_reward() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GS2C_Country_Occupy_Player::clear_has_rank_reward() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GS2C_Country_Occupy_Player::clear_rank_reward() {
  if (rank_reward_ != NULL) rank_reward_->::pb::GS2C_LootList::Clear();
  clear_has_rank_reward();
}
inline const ::pb::GS2C_LootList& GS2C_Country_Occupy_Player::rank_reward() const {
  return rank_reward_ != NULL ? *rank_reward_ : *default_instance_->rank_reward_;
}
inline ::pb::GS2C_LootList* GS2C_Country_Occupy_Player::mutable_rank_reward() {
  set_has_rank_reward();
  if (rank_reward_ == NULL) rank_reward_ = new ::pb::GS2C_LootList;
  return rank_reward_;
}
inline ::pb::GS2C_LootList* GS2C_Country_Occupy_Player::release_rank_reward() {
  clear_has_rank_reward();
  ::pb::GS2C_LootList* temp = rank_reward_;
  rank_reward_ = NULL;
  return temp;
}
inline void GS2C_Country_Occupy_Player::set_allocated_rank_reward(::pb::GS2C_LootList* rank_reward) {
  delete rank_reward_;
  rank_reward_ = rank_reward;
  if (rank_reward) {
    set_has_rank_reward();
  } else {
    clear_has_rank_reward();
  }
}

// optional .pb.GS2C_LootList win_reward = 7;
inline bool GS2C_Country_Occupy_Player::has_win_reward() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GS2C_Country_Occupy_Player::set_has_win_reward() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GS2C_Country_Occupy_Player::clear_has_win_reward() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GS2C_Country_Occupy_Player::clear_win_reward() {
  if (win_reward_ != NULL) win_reward_->::pb::GS2C_LootList::Clear();
  clear_has_win_reward();
}
inline const ::pb::GS2C_LootList& GS2C_Country_Occupy_Player::win_reward() const {
  return win_reward_ != NULL ? *win_reward_ : *default_instance_->win_reward_;
}
inline ::pb::GS2C_LootList* GS2C_Country_Occupy_Player::mutable_win_reward() {
  set_has_win_reward();
  if (win_reward_ == NULL) win_reward_ = new ::pb::GS2C_LootList;
  return win_reward_;
}
inline ::pb::GS2C_LootList* GS2C_Country_Occupy_Player::release_win_reward() {
  clear_has_win_reward();
  ::pb::GS2C_LootList* temp = win_reward_;
  win_reward_ = NULL;
  return temp;
}
inline void GS2C_Country_Occupy_Player::set_allocated_win_reward(::pb::GS2C_LootList* win_reward) {
  delete win_reward_;
  win_reward_ = win_reward;
  if (win_reward) {
    set_has_win_reward();
  } else {
    clear_has_win_reward();
  }
}

// -------------------------------------------------------------------

// C2GS_Country_Occupy_Take_Reward

// optional uint32 stage = 1;
inline bool C2GS_Country_Occupy_Take_Reward::has_stage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Country_Occupy_Take_Reward::set_has_stage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Country_Occupy_Take_Reward::clear_has_stage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Country_Occupy_Take_Reward::clear_stage() {
  stage_ = 0u;
  clear_has_stage();
}
inline ::google::protobuf::uint32 C2GS_Country_Occupy_Take_Reward::stage() const {
  return stage_;
}
inline void C2GS_Country_Occupy_Take_Reward::set_stage(::google::protobuf::uint32 value) {
  set_has_stage();
  stage_ = value;
}

// -------------------------------------------------------------------

// GS2C_Country_Occupy_Take_Reward

// required bool isSuccess = 1;
inline bool GS2C_Country_Occupy_Take_Reward::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Country_Occupy_Take_Reward::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Country_Occupy_Take_Reward::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Country_Occupy_Take_Reward::clear_issuccess() {
  issuccess_ = false;
  clear_has_issuccess();
}
inline bool GS2C_Country_Occupy_Take_Reward::issuccess() const {
  return issuccess_;
}
inline void GS2C_Country_Occupy_Take_Reward::set_issuccess(bool value) {
  set_has_issuccess();
  issuccess_ = value;
}

// optional .pb.Country_Task_Err errRet = 2;
inline bool GS2C_Country_Occupy_Take_Reward::has_errret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Country_Occupy_Take_Reward::set_has_errret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Country_Occupy_Take_Reward::clear_has_errret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Country_Occupy_Take_Reward::clear_errret() {
  errret_ = 1;
  clear_has_errret();
}
inline ::pb::Country_Task_Err GS2C_Country_Occupy_Take_Reward::errret() const {
  return static_cast< ::pb::Country_Task_Err >(errret_);
}
inline void GS2C_Country_Occupy_Take_Reward::set_errret(::pb::Country_Task_Err value) {
  assert(::pb::Country_Task_Err_IsValid(value));
  set_has_errret();
  errret_ = value;
}

// -------------------------------------------------------------------

// OneTaskInfo

// optional uint32 stageid = 1;
inline bool OneTaskInfo::has_stageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneTaskInfo::set_has_stageid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneTaskInfo::clear_has_stageid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneTaskInfo::clear_stageid() {
  stageid_ = 0u;
  clear_has_stageid();
}
inline ::google::protobuf::uint32 OneTaskInfo::stageid() const {
  return stageid_;
}
inline void OneTaskInfo::set_stageid(::google::protobuf::uint32 value) {
  set_has_stageid();
  stageid_ = value;
}

// optional uint32 taskid = 2;
inline bool OneTaskInfo::has_taskid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OneTaskInfo::set_has_taskid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OneTaskInfo::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OneTaskInfo::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 OneTaskInfo::taskid() const {
  return taskid_;
}
inline void OneTaskInfo::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
}

// optional uint32 curCompletion = 3;
inline bool OneTaskInfo::has_curcompletion() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OneTaskInfo::set_has_curcompletion() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OneTaskInfo::clear_has_curcompletion() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OneTaskInfo::clear_curcompletion() {
  curcompletion_ = 0u;
  clear_has_curcompletion();
}
inline ::google::protobuf::uint32 OneTaskInfo::curcompletion() const {
  return curcompletion_;
}
inline void OneTaskInfo::set_curcompletion(::google::protobuf::uint32 value) {
  set_has_curcompletion();
  curcompletion_ = value;
}

// optional bool isTakeAward = 4;
inline bool OneTaskInfo::has_istakeaward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OneTaskInfo::set_has_istakeaward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OneTaskInfo::clear_has_istakeaward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OneTaskInfo::clear_istakeaward() {
  istakeaward_ = false;
  clear_has_istakeaward();
}
inline bool OneTaskInfo::istakeaward() const {
  return istakeaward_;
}
inline void OneTaskInfo::set_istakeaward(bool value) {
  set_has_istakeaward();
  istakeaward_ = value;
}

// -------------------------------------------------------------------

// GS2C_PersonalTask_Info

// optional bool is_begin = 1;
inline bool GS2C_PersonalTask_Info::has_is_begin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_PersonalTask_Info::set_has_is_begin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_PersonalTask_Info::clear_has_is_begin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_PersonalTask_Info::clear_is_begin() {
  is_begin_ = false;
  clear_has_is_begin();
}
inline bool GS2C_PersonalTask_Info::is_begin() const {
  return is_begin_;
}
inline void GS2C_PersonalTask_Info::set_is_begin(bool value) {
  set_has_is_begin();
  is_begin_ = value;
}

// optional uint32 curStage = 2;
inline bool GS2C_PersonalTask_Info::has_curstage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_PersonalTask_Info::set_has_curstage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_PersonalTask_Info::clear_has_curstage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_PersonalTask_Info::clear_curstage() {
  curstage_ = 0u;
  clear_has_curstage();
}
inline ::google::protobuf::uint32 GS2C_PersonalTask_Info::curstage() const {
  return curstage_;
}
inline void GS2C_PersonalTask_Info::set_curstage(::google::protobuf::uint32 value) {
  set_has_curstage();
  curstage_ = value;
}

// optional uint32 curSubStage = 3;
inline bool GS2C_PersonalTask_Info::has_cursubstage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_PersonalTask_Info::set_has_cursubstage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_PersonalTask_Info::clear_has_cursubstage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_PersonalTask_Info::clear_cursubstage() {
  cursubstage_ = 0u;
  clear_has_cursubstage();
}
inline ::google::protobuf::uint32 GS2C_PersonalTask_Info::cursubstage() const {
  return cursubstage_;
}
inline void GS2C_PersonalTask_Info::set_cursubstage(::google::protobuf::uint32 value) {
  set_has_cursubstage();
  cursubstage_ = value;
}

// optional uint64 taskBeginTime = 4;
inline bool GS2C_PersonalTask_Info::has_taskbegintime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_PersonalTask_Info::set_has_taskbegintime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_PersonalTask_Info::clear_has_taskbegintime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_PersonalTask_Info::clear_taskbegintime() {
  taskbegintime_ = GOOGLE_ULONGLONG(0);
  clear_has_taskbegintime();
}
inline ::google::protobuf::uint64 GS2C_PersonalTask_Info::taskbegintime() const {
  return taskbegintime_;
}
inline void GS2C_PersonalTask_Info::set_taskbegintime(::google::protobuf::uint64 value) {
  set_has_taskbegintime();
  taskbegintime_ = value;
}

// repeated .pb.OneTaskInfo tasks = 5;
inline int GS2C_PersonalTask_Info::tasks_size() const {
  return tasks_.size();
}
inline void GS2C_PersonalTask_Info::clear_tasks() {
  tasks_.Clear();
}
inline const ::pb::OneTaskInfo& GS2C_PersonalTask_Info::tasks(int index) const {
  return tasks_.Get(index);
}
inline ::pb::OneTaskInfo* GS2C_PersonalTask_Info::mutable_tasks(int index) {
  return tasks_.Mutable(index);
}
inline ::pb::OneTaskInfo* GS2C_PersonalTask_Info::add_tasks() {
  return tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::OneTaskInfo >&
GS2C_PersonalTask_Info::tasks() const {
  return tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::OneTaskInfo >*
GS2C_PersonalTask_Info::mutable_tasks() {
  return &tasks_;
}

// -------------------------------------------------------------------

// C2GS_PersonalTask_One

// required uint32 taskid = 1;
inline bool C2GS_PersonalTask_One::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_PersonalTask_One::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_PersonalTask_One::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_PersonalTask_One::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 C2GS_PersonalTask_One::taskid() const {
  return taskid_;
}
inline void C2GS_PersonalTask_One::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
}

// -------------------------------------------------------------------

// C2GS_PersonalTask_Take_Award

// optional uint32 taskid = 1;
inline bool C2GS_PersonalTask_Take_Award::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_PersonalTask_Take_Award::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_PersonalTask_Take_Award::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_PersonalTask_Take_Award::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 C2GS_PersonalTask_Take_Award::taskid() const {
  return taskid_;
}
inline void C2GS_PersonalTask_Take_Award::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
}

// -------------------------------------------------------------------

// GS2C_PersonalTask_Take_Award

// required bool isSuccess = 1;
inline bool GS2C_PersonalTask_Take_Award::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_PersonalTask_Take_Award::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_PersonalTask_Take_Award::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_PersonalTask_Take_Award::clear_issuccess() {
  issuccess_ = false;
  clear_has_issuccess();
}
inline bool GS2C_PersonalTask_Take_Award::issuccess() const {
  return issuccess_;
}
inline void GS2C_PersonalTask_Take_Award::set_issuccess(bool value) {
  set_has_issuccess();
  issuccess_ = value;
}

// optional .pb.Country_Task_Err errRet = 2;
inline bool GS2C_PersonalTask_Take_Award::has_errret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_PersonalTask_Take_Award::set_has_errret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_PersonalTask_Take_Award::clear_has_errret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_PersonalTask_Take_Award::clear_errret() {
  errret_ = 1;
  clear_has_errret();
}
inline ::pb::Country_Task_Err GS2C_PersonalTask_Take_Award::errret() const {
  return static_cast< ::pb::Country_Task_Err >(errret_);
}
inline void GS2C_PersonalTask_Take_Award::set_errret(::pb::Country_Task_Err value) {
  assert(::pb::Country_Task_Err_IsValid(value));
  set_has_errret();
  errret_ = value;
}

// -------------------------------------------------------------------

// GS2C_Notice_Country_NPC_NextTime

// optional uint32 npcType = 1;
inline bool GS2C_Notice_Country_NPC_NextTime::has_npctype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Notice_Country_NPC_NextTime::set_has_npctype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Notice_Country_NPC_NextTime::clear_has_npctype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Notice_Country_NPC_NextTime::clear_npctype() {
  npctype_ = 0u;
  clear_has_npctype();
}
inline ::google::protobuf::uint32 GS2C_Notice_Country_NPC_NextTime::npctype() const {
  return npctype_;
}
inline void GS2C_Notice_Country_NPC_NextTime::set_npctype(::google::protobuf::uint32 value) {
  set_has_npctype();
  npctype_ = value;
}

// optional uint64 nextTime = 2;
inline bool GS2C_Notice_Country_NPC_NextTime::has_nexttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Notice_Country_NPC_NextTime::set_has_nexttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Notice_Country_NPC_NextTime::clear_has_nexttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Notice_Country_NPC_NextTime::clear_nexttime() {
  nexttime_ = GOOGLE_ULONGLONG(0);
  clear_has_nexttime();
}
inline ::google::protobuf::uint64 GS2C_Notice_Country_NPC_NextTime::nexttime() const {
  return nexttime_;
}
inline void GS2C_Notice_Country_NPC_NextTime::set_nexttime(::google::protobuf::uint64 value) {
  set_has_nexttime();
  nexttime_ = value;
}

// -------------------------------------------------------------------

// GS2C_Country_Task_DefenceBorderland

// required bool is_begin = 1;
inline bool GS2C_Country_Task_DefenceBorderland::has_is_begin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Country_Task_DefenceBorderland::set_has_is_begin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Country_Task_DefenceBorderland::clear_has_is_begin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Country_Task_DefenceBorderland::clear_is_begin() {
  is_begin_ = false;
  clear_has_is_begin();
}
inline bool GS2C_Country_Task_DefenceBorderland::is_begin() const {
  return is_begin_;
}
inline void GS2C_Country_Task_DefenceBorderland::set_is_begin(bool value) {
  set_has_is_begin();
  is_begin_ = value;
}

// optional uint32 cur_stage = 2;
inline bool GS2C_Country_Task_DefenceBorderland::has_cur_stage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Country_Task_DefenceBorderland::set_has_cur_stage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Country_Task_DefenceBorderland::clear_has_cur_stage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Country_Task_DefenceBorderland::clear_cur_stage() {
  cur_stage_ = 0u;
  clear_has_cur_stage();
}
inline ::google::protobuf::uint32 GS2C_Country_Task_DefenceBorderland::cur_stage() const {
  return cur_stage_;
}
inline void GS2C_Country_Task_DefenceBorderland::set_cur_stage(::google::protobuf::uint32 value) {
  set_has_cur_stage();
  cur_stage_ = value;
}

// optional uint32 cur_sub_stage = 3;
inline bool GS2C_Country_Task_DefenceBorderland::has_cur_sub_stage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Country_Task_DefenceBorderland::set_has_cur_sub_stage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Country_Task_DefenceBorderland::clear_has_cur_sub_stage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Country_Task_DefenceBorderland::clear_cur_sub_stage() {
  cur_sub_stage_ = 0u;
  clear_has_cur_sub_stage();
}
inline ::google::protobuf::uint32 GS2C_Country_Task_DefenceBorderland::cur_sub_stage() const {
  return cur_sub_stage_;
}
inline void GS2C_Country_Task_DefenceBorderland::set_cur_sub_stage(::google::protobuf::uint32 value) {
  set_has_cur_sub_stage();
  cur_sub_stage_ = value;
}

// optional uint64 cur_stage_end_time = 4;
inline bool GS2C_Country_Task_DefenceBorderland::has_cur_stage_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Country_Task_DefenceBorderland::set_has_cur_stage_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Country_Task_DefenceBorderland::clear_has_cur_stage_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Country_Task_DefenceBorderland::clear_cur_stage_end_time() {
  cur_stage_end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_cur_stage_end_time();
}
inline ::google::protobuf::uint64 GS2C_Country_Task_DefenceBorderland::cur_stage_end_time() const {
  return cur_stage_end_time_;
}
inline void GS2C_Country_Task_DefenceBorderland::set_cur_stage_end_time(::google::protobuf::uint64 value) {
  set_has_cur_stage_end_time();
  cur_stage_end_time_ = value;
}

// optional uint64 cur_sub_stage_end_time = 5;
inline bool GS2C_Country_Task_DefenceBorderland::has_cur_sub_stage_end_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GS2C_Country_Task_DefenceBorderland::set_has_cur_sub_stage_end_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GS2C_Country_Task_DefenceBorderland::clear_has_cur_sub_stage_end_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GS2C_Country_Task_DefenceBorderland::clear_cur_sub_stage_end_time() {
  cur_sub_stage_end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_cur_sub_stage_end_time();
}
inline ::google::protobuf::uint64 GS2C_Country_Task_DefenceBorderland::cur_sub_stage_end_time() const {
  return cur_sub_stage_end_time_;
}
inline void GS2C_Country_Task_DefenceBorderland::set_cur_sub_stage_end_time(::google::protobuf::uint64 value) {
  set_has_cur_sub_stage_end_time();
  cur_sub_stage_end_time_ = value;
}

// repeated bool is_country_failed = 6;
inline int GS2C_Country_Task_DefenceBorderland::is_country_failed_size() const {
  return is_country_failed_.size();
}
inline void GS2C_Country_Task_DefenceBorderland::clear_is_country_failed() {
  is_country_failed_.Clear();
}
inline bool GS2C_Country_Task_DefenceBorderland::is_country_failed(int index) const {
  return is_country_failed_.Get(index);
}
inline void GS2C_Country_Task_DefenceBorderland::set_is_country_failed(int index, bool value) {
  is_country_failed_.Set(index, value);
}
inline void GS2C_Country_Task_DefenceBorderland::add_is_country_failed(bool value) {
  is_country_failed_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
GS2C_Country_Task_DefenceBorderland::is_country_failed() const {
  return is_country_failed_;
}
inline ::google::protobuf::RepeatedField< bool >*
GS2C_Country_Task_DefenceBorderland::mutable_is_country_failed() {
  return &is_country_failed_;
}

// repeated uint32 cityid_monster_attack = 7;
inline int GS2C_Country_Task_DefenceBorderland::cityid_monster_attack_size() const {
  return cityid_monster_attack_.size();
}
inline void GS2C_Country_Task_DefenceBorderland::clear_cityid_monster_attack() {
  cityid_monster_attack_.Clear();
}
inline ::google::protobuf::uint32 GS2C_Country_Task_DefenceBorderland::cityid_monster_attack(int index) const {
  return cityid_monster_attack_.Get(index);
}
inline void GS2C_Country_Task_DefenceBorderland::set_cityid_monster_attack(int index, ::google::protobuf::uint32 value) {
  cityid_monster_attack_.Set(index, value);
}
inline void GS2C_Country_Task_DefenceBorderland::add_cityid_monster_attack(::google::protobuf::uint32 value) {
  cityid_monster_attack_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GS2C_Country_Task_DefenceBorderland::cityid_monster_attack() const {
  return cityid_monster_attack_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GS2C_Country_Task_DefenceBorderland::mutable_cityid_monster_attack() {
  return &cityid_monster_attack_;
}

// -------------------------------------------------------------------

// GS2C_Country_DefenceBorderland_Player

// optional uint32 stageID = 1;
inline bool GS2C_Country_DefenceBorderland_Player::has_stageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Country_DefenceBorderland_Player::set_has_stageid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Country_DefenceBorderland_Player::clear_has_stageid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Country_DefenceBorderland_Player::clear_stageid() {
  stageid_ = 0u;
  clear_has_stageid();
}
inline ::google::protobuf::uint32 GS2C_Country_DefenceBorderland_Player::stageid() const {
  return stageid_;
}
inline void GS2C_Country_DefenceBorderland_Player::set_stageid(::google::protobuf::uint32 value) {
  set_has_stageid();
  stageid_ = value;
}

// optional uint32 rankID = 2;
inline bool GS2C_Country_DefenceBorderland_Player::has_rankid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Country_DefenceBorderland_Player::set_has_rankid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Country_DefenceBorderland_Player::clear_has_rankid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Country_DefenceBorderland_Player::clear_rankid() {
  rankid_ = 0u;
  clear_has_rankid();
}
inline ::google::protobuf::uint32 GS2C_Country_DefenceBorderland_Player::rankid() const {
  return rankid_;
}
inline void GS2C_Country_DefenceBorderland_Player::set_rankid(::google::protobuf::uint32 value) {
  set_has_rankid();
  rankid_ = value;
}

// optional uint32 rank = 3;
inline bool GS2C_Country_DefenceBorderland_Player::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Country_DefenceBorderland_Player::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Country_DefenceBorderland_Player::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Country_DefenceBorderland_Player::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 GS2C_Country_DefenceBorderland_Player::rank() const {
  return rank_;
}
inline void GS2C_Country_DefenceBorderland_Player::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint32 killNum = 4;
inline bool GS2C_Country_DefenceBorderland_Player::has_killnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Country_DefenceBorderland_Player::set_has_killnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Country_DefenceBorderland_Player::clear_has_killnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Country_DefenceBorderland_Player::clear_killnum() {
  killnum_ = 0u;
  clear_has_killnum();
}
inline ::google::protobuf::uint32 GS2C_Country_DefenceBorderland_Player::killnum() const {
  return killnum_;
}
inline void GS2C_Country_DefenceBorderland_Player::set_killnum(::google::protobuf::uint32 value) {
  set_has_killnum();
  killnum_ = value;
}

// optional bool is_take_reward = 5;
inline bool GS2C_Country_DefenceBorderland_Player::has_is_take_reward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GS2C_Country_DefenceBorderland_Player::set_has_is_take_reward() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GS2C_Country_DefenceBorderland_Player::clear_has_is_take_reward() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GS2C_Country_DefenceBorderland_Player::clear_is_take_reward() {
  is_take_reward_ = false;
  clear_has_is_take_reward();
}
inline bool GS2C_Country_DefenceBorderland_Player::is_take_reward() const {
  return is_take_reward_;
}
inline void GS2C_Country_DefenceBorderland_Player::set_is_take_reward(bool value) {
  set_has_is_take_reward();
  is_take_reward_ = value;
}

// optional bool canTakeExReward = 6;
inline bool GS2C_Country_DefenceBorderland_Player::has_cantakeexreward() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GS2C_Country_DefenceBorderland_Player::set_has_cantakeexreward() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GS2C_Country_DefenceBorderland_Player::clear_has_cantakeexreward() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GS2C_Country_DefenceBorderland_Player::clear_cantakeexreward() {
  cantakeexreward_ = false;
  clear_has_cantakeexreward();
}
inline bool GS2C_Country_DefenceBorderland_Player::cantakeexreward() const {
  return cantakeexreward_;
}
inline void GS2C_Country_DefenceBorderland_Player::set_cantakeexreward(bool value) {
  set_has_cantakeexreward();
  cantakeexreward_ = value;
}

// optional .pb.GS2C_LootList rank_reward = 7;
inline bool GS2C_Country_DefenceBorderland_Player::has_rank_reward() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GS2C_Country_DefenceBorderland_Player::set_has_rank_reward() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GS2C_Country_DefenceBorderland_Player::clear_has_rank_reward() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GS2C_Country_DefenceBorderland_Player::clear_rank_reward() {
  if (rank_reward_ != NULL) rank_reward_->::pb::GS2C_LootList::Clear();
  clear_has_rank_reward();
}
inline const ::pb::GS2C_LootList& GS2C_Country_DefenceBorderland_Player::rank_reward() const {
  return rank_reward_ != NULL ? *rank_reward_ : *default_instance_->rank_reward_;
}
inline ::pb::GS2C_LootList* GS2C_Country_DefenceBorderland_Player::mutable_rank_reward() {
  set_has_rank_reward();
  if (rank_reward_ == NULL) rank_reward_ = new ::pb::GS2C_LootList;
  return rank_reward_;
}
inline ::pb::GS2C_LootList* GS2C_Country_DefenceBorderland_Player::release_rank_reward() {
  clear_has_rank_reward();
  ::pb::GS2C_LootList* temp = rank_reward_;
  rank_reward_ = NULL;
  return temp;
}
inline void GS2C_Country_DefenceBorderland_Player::set_allocated_rank_reward(::pb::GS2C_LootList* rank_reward) {
  delete rank_reward_;
  rank_reward_ = rank_reward;
  if (rank_reward) {
    set_has_rank_reward();
  } else {
    clear_has_rank_reward();
  }
}

// optional .pb.GS2C_LootList win_reward = 8;
inline bool GS2C_Country_DefenceBorderland_Player::has_win_reward() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GS2C_Country_DefenceBorderland_Player::set_has_win_reward() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GS2C_Country_DefenceBorderland_Player::clear_has_win_reward() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GS2C_Country_DefenceBorderland_Player::clear_win_reward() {
  if (win_reward_ != NULL) win_reward_->::pb::GS2C_LootList::Clear();
  clear_has_win_reward();
}
inline const ::pb::GS2C_LootList& GS2C_Country_DefenceBorderland_Player::win_reward() const {
  return win_reward_ != NULL ? *win_reward_ : *default_instance_->win_reward_;
}
inline ::pb::GS2C_LootList* GS2C_Country_DefenceBorderland_Player::mutable_win_reward() {
  set_has_win_reward();
  if (win_reward_ == NULL) win_reward_ = new ::pb::GS2C_LootList;
  return win_reward_;
}
inline ::pb::GS2C_LootList* GS2C_Country_DefenceBorderland_Player::release_win_reward() {
  clear_has_win_reward();
  ::pb::GS2C_LootList* temp = win_reward_;
  win_reward_ = NULL;
  return temp;
}
inline void GS2C_Country_DefenceBorderland_Player::set_allocated_win_reward(::pb::GS2C_LootList* win_reward) {
  delete win_reward_;
  win_reward_ = win_reward;
  if (win_reward) {
    set_has_win_reward();
  } else {
    clear_has_win_reward();
  }
}

// -------------------------------------------------------------------

// C2GS_Country_DefenceBorderland_Take_Reward

// optional uint32 stage = 1;
inline bool C2GS_Country_DefenceBorderland_Take_Reward::has_stage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Country_DefenceBorderland_Take_Reward::set_has_stage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Country_DefenceBorderland_Take_Reward::clear_has_stage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Country_DefenceBorderland_Take_Reward::clear_stage() {
  stage_ = 0u;
  clear_has_stage();
}
inline ::google::protobuf::uint32 C2GS_Country_DefenceBorderland_Take_Reward::stage() const {
  return stage_;
}
inline void C2GS_Country_DefenceBorderland_Take_Reward::set_stage(::google::protobuf::uint32 value) {
  set_has_stage();
  stage_ = value;
}

// -------------------------------------------------------------------

// GS2C_Country_DefenceBorderland_Take_Reward

// required bool isSuccess = 1;
inline bool GS2C_Country_DefenceBorderland_Take_Reward::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Country_DefenceBorderland_Take_Reward::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Country_DefenceBorderland_Take_Reward::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Country_DefenceBorderland_Take_Reward::clear_issuccess() {
  issuccess_ = false;
  clear_has_issuccess();
}
inline bool GS2C_Country_DefenceBorderland_Take_Reward::issuccess() const {
  return issuccess_;
}
inline void GS2C_Country_DefenceBorderland_Take_Reward::set_issuccess(bool value) {
  set_has_issuccess();
  issuccess_ = value;
}

// optional .pb.Country_Task_Err errRet = 2;
inline bool GS2C_Country_DefenceBorderland_Take_Reward::has_errret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Country_DefenceBorderland_Take_Reward::set_has_errret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Country_DefenceBorderland_Take_Reward::clear_has_errret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Country_DefenceBorderland_Take_Reward::clear_errret() {
  errret_ = 1;
  clear_has_errret();
}
inline ::pb::Country_Task_Err GS2C_Country_DefenceBorderland_Take_Reward::errret() const {
  return static_cast< ::pb::Country_Task_Err >(errret_);
}
inline void GS2C_Country_DefenceBorderland_Take_Reward::set_errret(::pb::Country_Task_Err value) {
  assert(::pb::Country_Task_Err_IsValid(value));
  set_has_errret();
  errret_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::CROSS_STATE>() {
  return ::pb::CROSS_STATE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::E_MONSTER_CITY>() {
  return ::pb::E_MONSTER_CITY_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::Country_Task_Err>() {
  return ::pb::Country_Task_Err_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Country_2eproto__INCLUDED
