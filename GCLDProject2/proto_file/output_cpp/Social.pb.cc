// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Social.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Social.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* GS2C_Chat_Respon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Chat_Respon_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Chat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Chat_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_ChatInfoData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_ChatInfoData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerTeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerTeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerBaseData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerBaseData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Get_Player_Info_Respone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Get_Player_Info_Respone_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Friend_Ap_Opearate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Friend_Ap_Opearate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Friend_Ap_Opearate_Res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Friend_Ap_Opearate_Res_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Friend_Ap_Opearate_Res_opt_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Friend_Ap_Opearate_Res_opt_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_list_Record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_list_Record_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_FriendAdd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_FriendAdd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_FriendAdd_Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_FriendAdd_Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_FriendAdd_Respon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_FriendAdd_Respon_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_FriendAdd_Respon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_FriendAdd_Respon_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_FriendDel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_FriendDel_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_FriendDel_Respon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_FriendDel_Respon_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_FriendListInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_FriendListInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Friend_Search_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Friend_Search_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Friend_Search_Respone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Friend_Search_Respone_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_FriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_FriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_GuildInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_GuildInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_GMember_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_GMember_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_Guild_Member_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_Guild_Member_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_Guild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_Guild_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_Guilds_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_Guilds_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Guild_Leaderboard_Search_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Guild_Leaderboard_Search_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Guild_Leaderboard_Search_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Guild_Leaderboard_Search_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Guild_Player_Search_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Guild_Player_Search_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Guild_Player_Search_Respone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Guild_Player_Search_Respone_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Guild_Add_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Guild_Add_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Guild_Add_Respon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Guild_Add_Respon_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Guild_Change_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Guild_Change_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Get_Guild_Info_Respon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Get_Guild_Info_Respon_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_GuildInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_GuildInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_GuildInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_GuildInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_GuildInviteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_GuildInviteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_GuildInviteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_GuildInviteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_GuildInviterApproval_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_GuildInviterApproval_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_GuildInviterApprovalResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_GuildInviterApprovalResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_GuildInvite_Repeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_GuildInvite_Repeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_GuildInvite_Repeat_Operate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_GuildInvite_Repeat_Operate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_GuildInvite_Repeat_Operate_Respon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_GuildInvite_Repeat_Operate_Respon_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_GuildQuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_GuildQuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_GuildQuit_Respon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_GuildQuit_Respon_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_GuildMemberQuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_GuildMemberQuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_GuildDisband_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_GuildDisband_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_GuildUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_GuildUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_GuildUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_GuildUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Guild_Autority_Operate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Guild_Autority_Operate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Guild_Autority_Operate_Respon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Guild_Autority_Operate_Respon_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_GuildUpdate_Member_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_GuildUpdate_Member_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_GuildUpdate_Member_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_GuildUpdate_Member_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Update_Respon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Update_Respon_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_GuildName_Check_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_GuildName_Check_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_GuildName_Check_Respon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_GuildName_Check_Respon_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Guild_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Guild_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Guild_Dynamic_Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Guild_Dynamic_Event_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Guild_Dynamic_Event_Log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Guild_Dynamic_Event_Log_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2G_GuildUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2G_GuildUpdate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CHAT_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgPlayerBaseDataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ENUM_FRIEND_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FRIEND_SEARCH_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FRIEND_SEARCH_TYPE_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GUILD_DYNAMIC_EVENT_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Social_2eproto() {
  protobuf_AddDesc_Social_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Social.proto");
  GOOGLE_CHECK(file != NULL);
  GS2C_Chat_Respon_descriptor_ = file->message_type(0);
  static const int GS2C_Chat_Respon_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Chat_Respon, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Chat_Respon, from_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Chat_Respon, to_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Chat_Respon, from_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Chat_Respon, to_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Chat_Respon, from_vip_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Chat_Respon, to_vip_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Chat_Respon, from_card_proid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Chat_Respon, to_card_proid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Chat_Respon, facial_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Chat_Respon, chat_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Chat_Respon, send_time_),
  };
  GS2C_Chat_Respon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Chat_Respon_descriptor_,
      GS2C_Chat_Respon::default_instance_,
      GS2C_Chat_Respon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Chat_Respon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Chat_Respon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Chat_Respon));
  C2GS_Chat_descriptor_ = file->message_type(1);
  static const int C2GS_Chat_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Chat, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Chat, to_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Chat, to_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Chat, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Chat, card_proid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Chat, facial_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Chat, chat_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Chat, send_time_),
  };
  C2GS_Chat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Chat_descriptor_,
      C2GS_Chat::default_instance_,
      C2GS_Chat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Chat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Chat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Chat));
  GxDB_ChatInfoData_descriptor_ = file->message_type(2);
  static const int GxDB_ChatInfoData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_ChatInfoData, expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_ChatInfoData, chat_),
  };
  GxDB_ChatInfoData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_ChatInfoData_descriptor_,
      GxDB_ChatInfoData::default_instance_,
      GxDB_ChatInfoData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_ChatInfoData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_ChatInfoData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_ChatInfoData));
  MsgPlayerBaseInfo_descriptor_ = file->message_type(3);
  static const int MsgPlayerBaseInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseInfo, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseInfo, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseInfo, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseInfo, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseInfo, isonline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseInfo, last_login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseInfo, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseInfo, card_proid_),
  };
  MsgPlayerBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerBaseInfo_descriptor_,
      MsgPlayerBaseInfo::default_instance_,
      MsgPlayerBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerBaseInfo));
  MsgPlayerTeamInfo_descriptor_ = file->message_type(4);
  static const int MsgPlayerTeamInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerTeamInfo, bag_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerTeamInfo, character_info_),
  };
  MsgPlayerTeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerTeamInfo_descriptor_,
      MsgPlayerTeamInfo::default_instance_,
      MsgPlayerTeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerTeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerTeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerTeamInfo));
  MsgPlayerBaseData_descriptor_ = file->message_type(5);
  static const int MsgPlayerBaseData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, team_info_),
  };
  MsgPlayerBaseData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerBaseData_descriptor_,
      MsgPlayerBaseData::default_instance_,
      MsgPlayerBaseData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerBaseData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerBaseData));
  GS2C_Get_Player_Info_Respone_descriptor_ = file->message_type(6);
  static const int GS2C_Get_Player_Info_Respone_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Get_Player_Info_Respone, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Get_Player_Info_Respone, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Get_Player_Info_Respone, your_guid_),
  };
  GS2C_Get_Player_Info_Respone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Get_Player_Info_Respone_descriptor_,
      GS2C_Get_Player_Info_Respone::default_instance_,
      GS2C_Get_Player_Info_Respone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Get_Player_Info_Respone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Get_Player_Info_Respone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Get_Player_Info_Respone));
  C2GS_Friend_Ap_Opearate_descriptor_ = file->message_type(7);
  static const int C2GS_Friend_Ap_Opearate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Friend_Ap_Opearate, friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Friend_Ap_Opearate, your_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Friend_Ap_Opearate, is_send_),
  };
  C2GS_Friend_Ap_Opearate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Friend_Ap_Opearate_descriptor_,
      C2GS_Friend_Ap_Opearate::default_instance_,
      C2GS_Friend_Ap_Opearate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Friend_Ap_Opearate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Friend_Ap_Opearate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Friend_Ap_Opearate));
  GS2C_Friend_Ap_Opearate_Res_descriptor_ = file->message_type(8);
  static const int GS2C_Friend_Ap_Opearate_Res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Friend_Ap_Opearate_Res, op_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Friend_Ap_Opearate_Res, your_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Friend_Ap_Opearate_Res, is_send_),
  };
  GS2C_Friend_Ap_Opearate_Res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Friend_Ap_Opearate_Res_descriptor_,
      GS2C_Friend_Ap_Opearate_Res::default_instance_,
      GS2C_Friend_Ap_Opearate_Res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Friend_Ap_Opearate_Res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Friend_Ap_Opearate_Res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Friend_Ap_Opearate_Res));
  GS2C_Friend_Ap_Opearate_Res_opt_result_descriptor_ = GS2C_Friend_Ap_Opearate_Res_descriptor_->nested_type(0);
  static const int GS2C_Friend_Ap_Opearate_Res_opt_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Friend_Ap_Opearate_Res_opt_result, opt_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Friend_Ap_Opearate_Res_opt_result, is_succeed_),
  };
  GS2C_Friend_Ap_Opearate_Res_opt_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Friend_Ap_Opearate_Res_opt_result_descriptor_,
      GS2C_Friend_Ap_Opearate_Res_opt_result::default_instance_,
      GS2C_Friend_Ap_Opearate_Res_opt_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Friend_Ap_Opearate_Res_opt_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Friend_Ap_Opearate_Res_opt_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Friend_Ap_Opearate_Res_opt_result));
  Friend_list_Record_descriptor_ = file->message_type(9);
  static const int Friend_list_Record_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_list_Record, friend_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_list_Record, friend_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_list_Record, head_icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_list_Record, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_list_Record, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_list_Record, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_list_Record, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_list_Record, friend_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_list_Record, is_send_ap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_list_Record, is_receive_ap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_list_Record, is_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_list_Record, last_onlin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_list_Record, request_time_),
  };
  Friend_list_Record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Friend_list_Record_descriptor_,
      Friend_list_Record::default_instance_,
      Friend_list_Record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_list_Record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_list_Record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Friend_list_Record));
  C2GS_FriendAdd_descriptor_ = file->message_type(10);
  static const int C2GS_FriendAdd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_FriendAdd, add_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_FriendAdd, add_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_FriendAdd, add_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_FriendAdd, add_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_FriendAdd, is_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_FriendAdd, your_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_FriendAdd, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_FriendAdd, is_from_add_pannel_),
  };
  C2GS_FriendAdd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_FriendAdd_descriptor_,
      C2GS_FriendAdd::default_instance_,
      C2GS_FriendAdd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_FriendAdd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_FriendAdd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_FriendAdd));
  GS2C_FriendAdd_Result_descriptor_ = file->message_type(11);
  static const int GS2C_FriendAdd_Result_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_FriendAdd_Result, errorcode_),
  };
  GS2C_FriendAdd_Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_FriendAdd_Result_descriptor_,
      GS2C_FriendAdd_Result::default_instance_,
      GS2C_FriendAdd_Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_FriendAdd_Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_FriendAdd_Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_FriendAdd_Result));
  C2GS_FriendAdd_Respon_descriptor_ = file->message_type(12);
  static const int C2GS_FriendAdd_Respon_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_FriendAdd_Respon, is_accept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_FriendAdd_Respon, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_FriendAdd_Respon, your_guid_),
  };
  C2GS_FriendAdd_Respon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_FriendAdd_Respon_descriptor_,
      C2GS_FriendAdd_Respon::default_instance_,
      C2GS_FriendAdd_Respon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_FriendAdd_Respon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_FriendAdd_Respon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_FriendAdd_Respon));
  GS2C_FriendAdd_Respon_descriptor_ = file->message_type(13);
  static const int GS2C_FriendAdd_Respon_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_FriendAdd_Respon, is_accept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_FriendAdd_Respon, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_FriendAdd_Respon, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_FriendAdd_Respon, is_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_FriendAdd_Respon, is_reply_),
  };
  GS2C_FriendAdd_Respon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_FriendAdd_Respon_descriptor_,
      GS2C_FriendAdd_Respon::default_instance_,
      GS2C_FriendAdd_Respon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_FriendAdd_Respon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_FriendAdd_Respon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_FriendAdd_Respon));
  C2GS_FriendDel_descriptor_ = file->message_type(14);
  static const int C2GS_FriendDel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_FriendDel, del_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_FriendDel, is_for_friend_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_FriendDel, your_guid_),
  };
  C2GS_FriendDel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_FriendDel_descriptor_,
      C2GS_FriendDel::default_instance_,
      C2GS_FriendDel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_FriendDel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_FriendDel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_FriendDel));
  GS2C_FriendDel_Respon_descriptor_ = file->message_type(15);
  static const int GS2C_FriendDel_Respon_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_FriendDel_Respon, is_suscess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_FriendDel_Respon, is_for_friend_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_FriendDel_Respon, friend_guid_),
  };
  GS2C_FriendDel_Respon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_FriendDel_Respon_descriptor_,
      GS2C_FriendDel_Respon::default_instance_,
      GS2C_FriendDel_Respon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_FriendDel_Respon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_FriendDel_Respon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_FriendDel_Respon));
  GS2C_FriendListInfo_descriptor_ = file->message_type(16);
  static const int GS2C_FriendListInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_FriendListInfo, friends_),
  };
  GS2C_FriendListInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_FriendListInfo_descriptor_,
      GS2C_FriendListInfo::default_instance_,
      GS2C_FriendListInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_FriendListInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_FriendListInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_FriendListInfo));
  C2GS_Friend_Search_descriptor_ = file->message_type(17);
  static const int C2GS_Friend_Search_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Friend_Search, search_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Friend_Search, is_search_by_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Friend_Search, search_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Friend_Search, search_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Friend_Search, your_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Friend_Search, max_count_),
  };
  C2GS_Friend_Search_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Friend_Search_descriptor_,
      C2GS_Friend_Search::default_instance_,
      C2GS_Friend_Search_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Friend_Search, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Friend_Search, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Friend_Search));
  GS2C_Friend_Search_Respone_descriptor_ = file->message_type(18);
  static const int GS2C_Friend_Search_Respone_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Friend_Search_Respone, search_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Friend_Search_Respone, search_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Friend_Search_Respone, your_guid_),
  };
  GS2C_Friend_Search_Respone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Friend_Search_Respone_descriptor_,
      GS2C_Friend_Search_Respone::default_instance_,
      GS2C_Friend_Search_Respone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Friend_Search_Respone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Friend_Search_Respone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Friend_Search_Respone));
  GxDB_FriendInfo_descriptor_ = file->message_type(19);
  static const int GxDB_FriendInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_FriendInfo, my_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_FriendInfo, friend_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_FriendInfo, send_ap_ids_),
  };
  GxDB_FriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_FriendInfo_descriptor_,
      GxDB_FriendInfo::default_instance_,
      GxDB_FriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_FriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_FriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_FriendInfo));
  GxDB_GuildInfo_descriptor_ = file->message_type(20);
  static const int GxDB_GuildInfo_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GuildInfo, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GuildInfo, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GuildInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GuildInfo, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GuildInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GuildInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GuildInfo, prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GuildInfo, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GuildInfo, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GuildInfo, notice_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GuildInfo, notice_creater_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GuildInfo, notice_creater_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GuildInfo, guild_owner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GuildInfo, guild_owner_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GuildInfo, members_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GuildInfo, members_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GuildInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GuildInfo, last_rank_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GuildInfo, logs_),
  };
  GxDB_GuildInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_GuildInfo_descriptor_,
      GxDB_GuildInfo::default_instance_,
      GxDB_GuildInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GuildInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GuildInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_GuildInfo));
  GxDB_GMember_Info_descriptor_ = file->message_type(21);
  static const int GxDB_GMember_Info_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GMember_Info, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GMember_Info, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GMember_Info, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GMember_Info, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GMember_Info, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GMember_Info, jointime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GMember_Info, lastactivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GMember_Info, guildcontributions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GMember_Info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GMember_Info, isonline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GMember_Info, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GMember_Info, request_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GMember_Info, invite_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GMember_Info, request_expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GMember_Info, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GMember_Info, head_icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GMember_Info, is_send_ap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GMember_Info, is_receive_ap_),
  };
  GxDB_GMember_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_GMember_Info_descriptor_,
      GxDB_GMember_Info::default_instance_,
      GxDB_GMember_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GMember_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_GMember_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_GMember_Info));
  GxDB_Guild_Member_descriptor_ = file->message_type(22);
  static const int GxDB_Guild_Member_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Guild_Member, memberinfo_),
  };
  GxDB_Guild_Member_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_Guild_Member_descriptor_,
      GxDB_Guild_Member::default_instance_,
      GxDB_Guild_Member_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Guild_Member, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Guild_Member, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_Guild_Member));
  GxDB_Guild_descriptor_ = file->message_type(23);
  static const int GxDB_Guild_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Guild, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Guild, guild_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Guild, members_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Guild, request_list_),
  };
  GxDB_Guild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_Guild_descriptor_,
      GxDB_Guild::default_instance_,
      GxDB_Guild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Guild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Guild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_Guild));
  GxDB_Guilds_descriptor_ = file->message_type(24);
  static const int GxDB_Guilds_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Guilds, guildinfos_),
  };
  GxDB_Guilds_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_Guilds_descriptor_,
      GxDB_Guilds::default_instance_,
      GxDB_Guilds_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Guilds, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Guilds, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_Guilds));
  C2GS_Guild_Leaderboard_Search_descriptor_ = file->message_type(25);
  static const int C2GS_Guild_Leaderboard_Search_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Guild_Leaderboard_Search, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Guild_Leaderboard_Search, key_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Guild_Leaderboard_Search, your_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Guild_Leaderboard_Search, is_leaderboard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Guild_Leaderboard_Search, is_by_name_),
  };
  C2GS_Guild_Leaderboard_Search_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Guild_Leaderboard_Search_descriptor_,
      C2GS_Guild_Leaderboard_Search::default_instance_,
      C2GS_Guild_Leaderboard_Search_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Guild_Leaderboard_Search, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Guild_Leaderboard_Search, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Guild_Leaderboard_Search));
  GS2C_Guild_Leaderboard_Search_descriptor_ = file->message_type(26);
  static const int GS2C_Guild_Leaderboard_Search_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Leaderboard_Search, guild_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Leaderboard_Search, is_leaderboard_),
  };
  GS2C_Guild_Leaderboard_Search_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Guild_Leaderboard_Search_descriptor_,
      GS2C_Guild_Leaderboard_Search::default_instance_,
      GS2C_Guild_Leaderboard_Search_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Leaderboard_Search, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Leaderboard_Search, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Guild_Leaderboard_Search));
  C2GS_Guild_Player_Search_descriptor_ = file->message_type(27);
  static const int C2GS_Guild_Player_Search_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Guild_Player_Search, is_member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Guild_Player_Search, search_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Guild_Player_Search, your_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Guild_Player_Search, max_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Guild_Player_Search, guild_id_),
  };
  C2GS_Guild_Player_Search_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Guild_Player_Search_descriptor_,
      C2GS_Guild_Player_Search::default_instance_,
      C2GS_Guild_Player_Search_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Guild_Player_Search, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Guild_Player_Search, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Guild_Player_Search));
  GS2C_Guild_Player_Search_Respone_descriptor_ = file->message_type(28);
  static const int GS2C_Guild_Player_Search_Respone_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Player_Search_Respone, search_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Player_Search_Respone, memberinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Player_Search_Respone, is_member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Player_Search_Respone, your_guid_),
  };
  GS2C_Guild_Player_Search_Respone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Guild_Player_Search_Respone_descriptor_,
      GS2C_Guild_Player_Search_Respone::default_instance_,
      GS2C_Guild_Player_Search_Respone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Player_Search_Respone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Player_Search_Respone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Guild_Player_Search_Respone));
  C2GS_Guild_Add_descriptor_ = file->message_type(29);
  static const int C2GS_Guild_Add_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Guild_Add, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Guild_Add, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Guild_Add, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Guild_Add, your_guid_),
  };
  C2GS_Guild_Add_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Guild_Add_descriptor_,
      C2GS_Guild_Add::default_instance_,
      C2GS_Guild_Add_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Guild_Add, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Guild_Add, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Guild_Add));
  GS2C_Guild_Add_Respon_descriptor_ = file->message_type(30);
  static const int GS2C_Guild_Add_Respon_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Add_Respon, add_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Add_Respon, guild_),
  };
  GS2C_Guild_Add_Respon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Guild_Add_Respon_descriptor_,
      GS2C_Guild_Add_Respon::default_instance_,
      GS2C_Guild_Add_Respon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Add_Respon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Add_Respon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Guild_Add_Respon));
  GS2C_Guild_Change_descriptor_ = file->message_type(31);
  static const int GS2C_Guild_Change_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Change, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Change, name_),
  };
  GS2C_Guild_Change_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Guild_Change_descriptor_,
      GS2C_Guild_Change::default_instance_,
      GS2C_Guild_Change_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Change, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Change, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Guild_Change));
  GS2C_Get_Guild_Info_Respon_descriptor_ = file->message_type(32);
  static const int GS2C_Get_Guild_Info_Respon_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Get_Guild_Info_Respon, isget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Get_Guild_Info_Respon, guild_),
  };
  GS2C_Get_Guild_Info_Respon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Get_Guild_Info_Respon_descriptor_,
      GS2C_Get_Guild_Info_Respon::default_instance_,
      GS2C_Get_Guild_Info_Respon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Get_Guild_Info_Respon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Get_Guild_Info_Respon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Get_Guild_Info_Respon));
  C2GS_GuildInvite_descriptor_ = file->message_type(33);
  static const int C2GS_GuildInvite_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildInvite, is_by_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildInvite, is_by_guild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildInvite, invitee_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildInvite, invitee_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildInvite, your_guid_),
  };
  C2GS_GuildInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_GuildInvite_descriptor_,
      C2GS_GuildInvite::default_instance_,
      C2GS_GuildInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_GuildInvite));
  GS2C_GuildInvite_descriptor_ = file->message_type(34);
  static const int GS2C_GuildInvite_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildInvite, inviter_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildInvite, inviter_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildInvite, is_invite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildInvite, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildInvite, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildInvite, to_guid_),
  };
  GS2C_GuildInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_GuildInvite_descriptor_,
      GS2C_GuildInvite::default_instance_,
      GS2C_GuildInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_GuildInvite));
  C2GS_GuildInviteResponse_descriptor_ = file->message_type(35);
  static const int C2GS_GuildInviteResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildInviteResponse, is_accept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildInviteResponse, inviter_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildInviteResponse, your_guid_),
  };
  C2GS_GuildInviteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_GuildInviteResponse_descriptor_,
      C2GS_GuildInviteResponse::default_instance_,
      C2GS_GuildInviteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildInviteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildInviteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_GuildInviteResponse));
  GS2C_GuildInviteResponse_descriptor_ = file->message_type(36);
  static const int GS2C_GuildInviteResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildInviteResponse, is_accept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildInviteResponse, player_guids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildInviteResponse, erro_code_),
  };
  GS2C_GuildInviteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_GuildInviteResponse_descriptor_,
      GS2C_GuildInviteResponse::default_instance_,
      GS2C_GuildInviteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildInviteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildInviteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_GuildInviteResponse));
  C2GS_GuildInviterApproval_descriptor_ = file->message_type(37);
  static const int C2GS_GuildInviterApproval_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildInviterApproval, is_accept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildInviterApproval, inviter_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildInviterApproval, your_guid_),
  };
  C2GS_GuildInviterApproval_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_GuildInviterApproval_descriptor_,
      C2GS_GuildInviterApproval::default_instance_,
      C2GS_GuildInviterApproval_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildInviterApproval, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildInviterApproval, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_GuildInviterApproval));
  GS2C_GuildInviterApprovalResponse_descriptor_ = file->message_type(38);
  static const int GS2C_GuildInviterApprovalResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildInviterApprovalResponse, is_accept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildInviterApprovalResponse, player_guids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildInviterApprovalResponse, erro_code_),
  };
  GS2C_GuildInviterApprovalResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_GuildInviterApprovalResponse_descriptor_,
      GS2C_GuildInviterApprovalResponse::default_instance_,
      GS2C_GuildInviterApprovalResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildInviterApprovalResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildInviterApprovalResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_GuildInviterApprovalResponse));
  GS2C_GuildInvite_Repeat_descriptor_ = file->message_type(39);
  static const int GS2C_GuildInvite_Repeat_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildInvite_Repeat, cur_guild_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildInvite_Repeat, cur_guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildInvite_Repeat, new_guild_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildInvite_Repeat, new_guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildInvite_Repeat, inviterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildInvite_Repeat, inviteeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildInvite_Repeat, is_invite_),
  };
  GS2C_GuildInvite_Repeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_GuildInvite_Repeat_descriptor_,
      GS2C_GuildInvite_Repeat::default_instance_,
      GS2C_GuildInvite_Repeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildInvite_Repeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildInvite_Repeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_GuildInvite_Repeat));
  C2GS_GuildInvite_Repeat_Operate_descriptor_ = file->message_type(40);
  static const int C2GS_GuildInvite_Repeat_Operate_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildInvite_Repeat_Operate, is_replace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildInvite_Repeat_Operate, cur_guild_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildInvite_Repeat_Operate, cur_guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildInvite_Repeat_Operate, new_guild_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildInvite_Repeat_Operate, new_guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildInvite_Repeat_Operate, inviterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildInvite_Repeat_Operate, inviteeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildInvite_Repeat_Operate, is_invite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildInvite_Repeat_Operate, your_guid_),
  };
  C2GS_GuildInvite_Repeat_Operate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_GuildInvite_Repeat_Operate_descriptor_,
      C2GS_GuildInvite_Repeat_Operate::default_instance_,
      C2GS_GuildInvite_Repeat_Operate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildInvite_Repeat_Operate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildInvite_Repeat_Operate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_GuildInvite_Repeat_Operate));
  GS2C_GuildInvite_Repeat_Operate_Respon_descriptor_ = file->message_type(41);
  static const int GS2C_GuildInvite_Repeat_Operate_Respon_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildInvite_Repeat_Operate_Respon, is_replace_),
  };
  GS2C_GuildInvite_Repeat_Operate_Respon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_GuildInvite_Repeat_Operate_Respon_descriptor_,
      GS2C_GuildInvite_Repeat_Operate_Respon::default_instance_,
      GS2C_GuildInvite_Repeat_Operate_Respon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildInvite_Repeat_Operate_Respon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildInvite_Repeat_Operate_Respon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_GuildInvite_Repeat_Operate_Respon));
  C2GS_GuildQuit_descriptor_ = file->message_type(42);
  static const int C2GS_GuildQuit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildQuit, quit_member_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildQuit, your_guid_),
  };
  C2GS_GuildQuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_GuildQuit_descriptor_,
      C2GS_GuildQuit::default_instance_,
      C2GS_GuildQuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildQuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildQuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_GuildQuit));
  GS2C_GuildQuit_Respon_descriptor_ = file->message_type(43);
  static const int GS2C_GuildQuit_Respon_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildQuit_Respon, quit_result_),
  };
  GS2C_GuildQuit_Respon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_GuildQuit_Respon_descriptor_,
      GS2C_GuildQuit_Respon::default_instance_,
      GS2C_GuildQuit_Respon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildQuit_Respon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildQuit_Respon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_GuildQuit_Respon));
  GS2C_GuildMemberQuit_descriptor_ = file->message_type(44);
  static const int GS2C_GuildMemberQuit_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildMemberQuit, is_kicked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildMemberQuit, quit_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildMemberQuit, is_disband_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildMemberQuit, is_quit_),
  };
  GS2C_GuildMemberQuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_GuildMemberQuit_descriptor_,
      GS2C_GuildMemberQuit::default_instance_,
      GS2C_GuildMemberQuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildMemberQuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildMemberQuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_GuildMemberQuit));
  GS2C_GuildDisband_descriptor_ = file->message_type(45);
  static const int GS2C_GuildDisband_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildDisband, is_kicked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildDisband, is_disband_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildDisband, is_quit_),
  };
  GS2C_GuildDisband_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_GuildDisband_descriptor_,
      GS2C_GuildDisband::default_instance_,
      GS2C_GuildDisband_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildDisband, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildDisband, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_GuildDisband));
  C2GS_GuildUpdate_descriptor_ = file->message_type(46);
  static const int C2GS_GuildUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildUpdate, update_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildUpdate, guild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildUpdate, your_guid_),
  };
  C2GS_GuildUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_GuildUpdate_descriptor_,
      C2GS_GuildUpdate::default_instance_,
      C2GS_GuildUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_GuildUpdate));
  GS2C_GuildUpdate_descriptor_ = file->message_type(47);
  static const int GS2C_GuildUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildUpdate, update_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildUpdate, guild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildUpdate, update_guid_),
  };
  GS2C_GuildUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_GuildUpdate_descriptor_,
      GS2C_GuildUpdate::default_instance_,
      GS2C_GuildUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_GuildUpdate));
  C2GS_Guild_Autority_Operate_descriptor_ = file->message_type(48);
  static const int C2GS_Guild_Autority_Operate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Guild_Autority_Operate, target_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Guild_Autority_Operate, target_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Guild_Autority_Operate, your_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Guild_Autority_Operate, your_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Guild_Autority_Operate, operate_type_),
  };
  C2GS_Guild_Autority_Operate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Guild_Autority_Operate_descriptor_,
      C2GS_Guild_Autority_Operate::default_instance_,
      C2GS_Guild_Autority_Operate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Guild_Autority_Operate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Guild_Autority_Operate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Guild_Autority_Operate));
  GS2C_Guild_Autority_Operate_Respon_descriptor_ = file->message_type(49);
  static const int GS2C_Guild_Autority_Operate_Respon_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Autority_Operate_Respon, target_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Autority_Operate_Respon, target_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Autority_Operate_Respon, operater_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Autority_Operate_Respon, operater_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Autority_Operate_Respon, operate_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Autority_Operate_Respon, operate_result_),
  };
  GS2C_Guild_Autority_Operate_Respon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Guild_Autority_Operate_Respon_descriptor_,
      GS2C_Guild_Autority_Operate_Respon::default_instance_,
      GS2C_Guild_Autority_Operate_Respon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Autority_Operate_Respon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Autority_Operate_Respon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Guild_Autority_Operate_Respon));
  C2GS_GuildUpdate_Member_descriptor_ = file->message_type(50);
  static const int C2GS_GuildUpdate_Member_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildUpdate_Member, update_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildUpdate_Member, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildUpdate_Member, your_guid_),
  };
  C2GS_GuildUpdate_Member_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_GuildUpdate_Member_descriptor_,
      C2GS_GuildUpdate_Member::default_instance_,
      C2GS_GuildUpdate_Member_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildUpdate_Member, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildUpdate_Member, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_GuildUpdate_Member));
  GS2C_GuildUpdate_Member_descriptor_ = file->message_type(51);
  static const int GS2C_GuildUpdate_Member_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildUpdate_Member, update_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildUpdate_Member, member_),
  };
  GS2C_GuildUpdate_Member_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_GuildUpdate_Member_descriptor_,
      GS2C_GuildUpdate_Member::default_instance_,
      GS2C_GuildUpdate_Member_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildUpdate_Member, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildUpdate_Member, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_GuildUpdate_Member));
  GS2C_Update_Respon_descriptor_ = file->message_type(52);
  static const int GS2C_Update_Respon_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Update_Respon, update_result_),
  };
  GS2C_Update_Respon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Update_Respon_descriptor_,
      GS2C_Update_Respon::default_instance_,
      GS2C_Update_Respon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Update_Respon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Update_Respon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Update_Respon));
  C2GS_GuildName_Check_descriptor_ = file->message_type(53);
  static const int C2GS_GuildName_Check_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildName_Check, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildName_Check, your_guid_),
  };
  C2GS_GuildName_Check_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_GuildName_Check_descriptor_,
      C2GS_GuildName_Check::default_instance_,
      C2GS_GuildName_Check_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildName_Check, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GuildName_Check, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_GuildName_Check));
  GS2C_GuildName_Check_Respon_descriptor_ = file->message_type(54);
  static const int GS2C_GuildName_Check_Respon_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildName_Check_Respon, is_can_use_),
  };
  GS2C_GuildName_Check_Respon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_GuildName_Check_Respon_descriptor_,
      GS2C_GuildName_Check_Respon::default_instance_,
      GS2C_GuildName_Check_Respon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildName_Check_Respon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GuildName_Check_Respon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_GuildName_Check_Respon));
  GS2C_Guild_Notify_descriptor_ = file->message_type(55);
  static const int GS2C_Guild_Notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Notify, notify_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Notify, approval_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Notify, approval_name_),
  };
  GS2C_Guild_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Guild_Notify_descriptor_,
      GS2C_Guild_Notify::default_instance_,
      GS2C_Guild_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Guild_Notify));
  GS2C_Guild_Dynamic_Event_descriptor_ = file->message_type(56);
  static const int GS2C_Guild_Dynamic_Event_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Dynamic_Event, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Dynamic_Event, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Dynamic_Event, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Dynamic_Event, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Dynamic_Event, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Dynamic_Event, id_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Dynamic_Event, str_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Dynamic_Event, event_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Dynamic_Event, item_guid_),
  };
  GS2C_Guild_Dynamic_Event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Guild_Dynamic_Event_descriptor_,
      GS2C_Guild_Dynamic_Event::default_instance_,
      GS2C_Guild_Dynamic_Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Dynamic_Event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Dynamic_Event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Guild_Dynamic_Event));
  GS2C_Guild_Dynamic_Event_Log_descriptor_ = file->message_type(57);
  static const int GS2C_Guild_Dynamic_Event_Log_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Dynamic_Event_Log, guild_evens_),
  };
  GS2C_Guild_Dynamic_Event_Log_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Guild_Dynamic_Event_Log_descriptor_,
      GS2C_Guild_Dynamic_Event_Log::default_instance_,
      GS2C_Guild_Dynamic_Event_Log_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Dynamic_Event_Log, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Guild_Dynamic_Event_Log, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Guild_Dynamic_Event_Log));
  GS2G_GuildUpdate_descriptor_ = file->message_type(58);
  static const int GS2G_GuildUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2G_GuildUpdate, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2G_GuildUpdate, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2G_GuildUpdate, guild_name_),
  };
  GS2G_GuildUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2G_GuildUpdate_descriptor_,
      GS2G_GuildUpdate::default_instance_,
      GS2G_GuildUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2G_GuildUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2G_GuildUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2G_GuildUpdate));
  CHAT_TYPE_descriptor_ = file->enum_type(0);
  MsgPlayerBaseDataType_descriptor_ = file->enum_type(1);
  ENUM_FRIEND_TYPE_descriptor_ = file->enum_type(2);
  FRIEND_SEARCH_TYPE_descriptor_ = file->enum_type(3);
  FRIEND_SEARCH_TYPE_RESULT_descriptor_ = file->enum_type(4);
  GUILD_DYNAMIC_EVENT_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Social_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Chat_Respon_descriptor_, &GS2C_Chat_Respon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Chat_descriptor_, &C2GS_Chat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_ChatInfoData_descriptor_, &GxDB_ChatInfoData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerBaseInfo_descriptor_, &MsgPlayerBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerTeamInfo_descriptor_, &MsgPlayerTeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerBaseData_descriptor_, &MsgPlayerBaseData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Get_Player_Info_Respone_descriptor_, &GS2C_Get_Player_Info_Respone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Friend_Ap_Opearate_descriptor_, &C2GS_Friend_Ap_Opearate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Friend_Ap_Opearate_Res_descriptor_, &GS2C_Friend_Ap_Opearate_Res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Friend_Ap_Opearate_Res_opt_result_descriptor_, &GS2C_Friend_Ap_Opearate_Res_opt_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Friend_list_Record_descriptor_, &Friend_list_Record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_FriendAdd_descriptor_, &C2GS_FriendAdd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_FriendAdd_Result_descriptor_, &GS2C_FriendAdd_Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_FriendAdd_Respon_descriptor_, &C2GS_FriendAdd_Respon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_FriendAdd_Respon_descriptor_, &GS2C_FriendAdd_Respon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_FriendDel_descriptor_, &C2GS_FriendDel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_FriendDel_Respon_descriptor_, &GS2C_FriendDel_Respon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_FriendListInfo_descriptor_, &GS2C_FriendListInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Friend_Search_descriptor_, &C2GS_Friend_Search::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Friend_Search_Respone_descriptor_, &GS2C_Friend_Search_Respone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_FriendInfo_descriptor_, &GxDB_FriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_GuildInfo_descriptor_, &GxDB_GuildInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_GMember_Info_descriptor_, &GxDB_GMember_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_Guild_Member_descriptor_, &GxDB_Guild_Member::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_Guild_descriptor_, &GxDB_Guild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_Guilds_descriptor_, &GxDB_Guilds::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Guild_Leaderboard_Search_descriptor_, &C2GS_Guild_Leaderboard_Search::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Guild_Leaderboard_Search_descriptor_, &GS2C_Guild_Leaderboard_Search::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Guild_Player_Search_descriptor_, &C2GS_Guild_Player_Search::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Guild_Player_Search_Respone_descriptor_, &GS2C_Guild_Player_Search_Respone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Guild_Add_descriptor_, &C2GS_Guild_Add::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Guild_Add_Respon_descriptor_, &GS2C_Guild_Add_Respon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Guild_Change_descriptor_, &GS2C_Guild_Change::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Get_Guild_Info_Respon_descriptor_, &GS2C_Get_Guild_Info_Respon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_GuildInvite_descriptor_, &C2GS_GuildInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_GuildInvite_descriptor_, &GS2C_GuildInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_GuildInviteResponse_descriptor_, &C2GS_GuildInviteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_GuildInviteResponse_descriptor_, &GS2C_GuildInviteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_GuildInviterApproval_descriptor_, &C2GS_GuildInviterApproval::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_GuildInviterApprovalResponse_descriptor_, &GS2C_GuildInviterApprovalResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_GuildInvite_Repeat_descriptor_, &GS2C_GuildInvite_Repeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_GuildInvite_Repeat_Operate_descriptor_, &C2GS_GuildInvite_Repeat_Operate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_GuildInvite_Repeat_Operate_Respon_descriptor_, &GS2C_GuildInvite_Repeat_Operate_Respon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_GuildQuit_descriptor_, &C2GS_GuildQuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_GuildQuit_Respon_descriptor_, &GS2C_GuildQuit_Respon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_GuildMemberQuit_descriptor_, &GS2C_GuildMemberQuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_GuildDisband_descriptor_, &GS2C_GuildDisband::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_GuildUpdate_descriptor_, &C2GS_GuildUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_GuildUpdate_descriptor_, &GS2C_GuildUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Guild_Autority_Operate_descriptor_, &C2GS_Guild_Autority_Operate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Guild_Autority_Operate_Respon_descriptor_, &GS2C_Guild_Autority_Operate_Respon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_GuildUpdate_Member_descriptor_, &C2GS_GuildUpdate_Member::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_GuildUpdate_Member_descriptor_, &GS2C_GuildUpdate_Member::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Update_Respon_descriptor_, &GS2C_Update_Respon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_GuildName_Check_descriptor_, &C2GS_GuildName_Check::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_GuildName_Check_Respon_descriptor_, &GS2C_GuildName_Check_Respon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Guild_Notify_descriptor_, &GS2C_Guild_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Guild_Dynamic_Event_descriptor_, &GS2C_Guild_Dynamic_Event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Guild_Dynamic_Event_Log_descriptor_, &GS2C_Guild_Dynamic_Event_Log::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2G_GuildUpdate_descriptor_, &GS2G_GuildUpdate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Social_2eproto() {
  delete GS2C_Chat_Respon::default_instance_;
  delete GS2C_Chat_Respon_reflection_;
  delete C2GS_Chat::default_instance_;
  delete C2GS_Chat_reflection_;
  delete GxDB_ChatInfoData::default_instance_;
  delete GxDB_ChatInfoData_reflection_;
  delete MsgPlayerBaseInfo::default_instance_;
  delete MsgPlayerBaseInfo_reflection_;
  delete MsgPlayerTeamInfo::default_instance_;
  delete MsgPlayerTeamInfo_reflection_;
  delete MsgPlayerBaseData::default_instance_;
  delete MsgPlayerBaseData_reflection_;
  delete GS2C_Get_Player_Info_Respone::default_instance_;
  delete GS2C_Get_Player_Info_Respone_reflection_;
  delete C2GS_Friend_Ap_Opearate::default_instance_;
  delete C2GS_Friend_Ap_Opearate_reflection_;
  delete GS2C_Friend_Ap_Opearate_Res::default_instance_;
  delete GS2C_Friend_Ap_Opearate_Res_reflection_;
  delete GS2C_Friend_Ap_Opearate_Res_opt_result::default_instance_;
  delete GS2C_Friend_Ap_Opearate_Res_opt_result_reflection_;
  delete Friend_list_Record::default_instance_;
  delete Friend_list_Record_reflection_;
  delete C2GS_FriendAdd::default_instance_;
  delete C2GS_FriendAdd_reflection_;
  delete GS2C_FriendAdd_Result::default_instance_;
  delete GS2C_FriendAdd_Result_reflection_;
  delete C2GS_FriendAdd_Respon::default_instance_;
  delete C2GS_FriendAdd_Respon_reflection_;
  delete GS2C_FriendAdd_Respon::default_instance_;
  delete GS2C_FriendAdd_Respon_reflection_;
  delete C2GS_FriendDel::default_instance_;
  delete C2GS_FriendDel_reflection_;
  delete GS2C_FriendDel_Respon::default_instance_;
  delete GS2C_FriendDel_Respon_reflection_;
  delete GS2C_FriendListInfo::default_instance_;
  delete GS2C_FriendListInfo_reflection_;
  delete C2GS_Friend_Search::default_instance_;
  delete C2GS_Friend_Search_reflection_;
  delete GS2C_Friend_Search_Respone::default_instance_;
  delete GS2C_Friend_Search_Respone_reflection_;
  delete GxDB_FriendInfo::default_instance_;
  delete GxDB_FriendInfo_reflection_;
  delete GxDB_GuildInfo::default_instance_;
  delete GxDB_GuildInfo_reflection_;
  delete GxDB_GMember_Info::default_instance_;
  delete GxDB_GMember_Info_reflection_;
  delete GxDB_Guild_Member::default_instance_;
  delete GxDB_Guild_Member_reflection_;
  delete GxDB_Guild::default_instance_;
  delete GxDB_Guild_reflection_;
  delete GxDB_Guilds::default_instance_;
  delete GxDB_Guilds_reflection_;
  delete C2GS_Guild_Leaderboard_Search::default_instance_;
  delete C2GS_Guild_Leaderboard_Search_reflection_;
  delete GS2C_Guild_Leaderboard_Search::default_instance_;
  delete GS2C_Guild_Leaderboard_Search_reflection_;
  delete C2GS_Guild_Player_Search::default_instance_;
  delete C2GS_Guild_Player_Search_reflection_;
  delete GS2C_Guild_Player_Search_Respone::default_instance_;
  delete GS2C_Guild_Player_Search_Respone_reflection_;
  delete C2GS_Guild_Add::default_instance_;
  delete C2GS_Guild_Add_reflection_;
  delete GS2C_Guild_Add_Respon::default_instance_;
  delete GS2C_Guild_Add_Respon_reflection_;
  delete GS2C_Guild_Change::default_instance_;
  delete GS2C_Guild_Change_reflection_;
  delete GS2C_Get_Guild_Info_Respon::default_instance_;
  delete GS2C_Get_Guild_Info_Respon_reflection_;
  delete C2GS_GuildInvite::default_instance_;
  delete C2GS_GuildInvite_reflection_;
  delete GS2C_GuildInvite::default_instance_;
  delete GS2C_GuildInvite_reflection_;
  delete C2GS_GuildInviteResponse::default_instance_;
  delete C2GS_GuildInviteResponse_reflection_;
  delete GS2C_GuildInviteResponse::default_instance_;
  delete GS2C_GuildInviteResponse_reflection_;
  delete C2GS_GuildInviterApproval::default_instance_;
  delete C2GS_GuildInviterApproval_reflection_;
  delete GS2C_GuildInviterApprovalResponse::default_instance_;
  delete GS2C_GuildInviterApprovalResponse_reflection_;
  delete GS2C_GuildInvite_Repeat::default_instance_;
  delete GS2C_GuildInvite_Repeat_reflection_;
  delete C2GS_GuildInvite_Repeat_Operate::default_instance_;
  delete C2GS_GuildInvite_Repeat_Operate_reflection_;
  delete GS2C_GuildInvite_Repeat_Operate_Respon::default_instance_;
  delete GS2C_GuildInvite_Repeat_Operate_Respon_reflection_;
  delete C2GS_GuildQuit::default_instance_;
  delete C2GS_GuildQuit_reflection_;
  delete GS2C_GuildQuit_Respon::default_instance_;
  delete GS2C_GuildQuit_Respon_reflection_;
  delete GS2C_GuildMemberQuit::default_instance_;
  delete GS2C_GuildMemberQuit_reflection_;
  delete GS2C_GuildDisband::default_instance_;
  delete GS2C_GuildDisband_reflection_;
  delete C2GS_GuildUpdate::default_instance_;
  delete C2GS_GuildUpdate_reflection_;
  delete GS2C_GuildUpdate::default_instance_;
  delete GS2C_GuildUpdate_reflection_;
  delete C2GS_Guild_Autority_Operate::default_instance_;
  delete C2GS_Guild_Autority_Operate_reflection_;
  delete GS2C_Guild_Autority_Operate_Respon::default_instance_;
  delete GS2C_Guild_Autority_Operate_Respon_reflection_;
  delete C2GS_GuildUpdate_Member::default_instance_;
  delete C2GS_GuildUpdate_Member_reflection_;
  delete GS2C_GuildUpdate_Member::default_instance_;
  delete GS2C_GuildUpdate_Member_reflection_;
  delete GS2C_Update_Respon::default_instance_;
  delete GS2C_Update_Respon_reflection_;
  delete C2GS_GuildName_Check::default_instance_;
  delete C2GS_GuildName_Check_reflection_;
  delete GS2C_GuildName_Check_Respon::default_instance_;
  delete GS2C_GuildName_Check_Respon_reflection_;
  delete GS2C_Guild_Notify::default_instance_;
  delete GS2C_Guild_Notify_reflection_;
  delete GS2C_Guild_Dynamic_Event::default_instance_;
  delete GS2C_Guild_Dynamic_Event_reflection_;
  delete GS2C_Guild_Dynamic_Event_Log::default_instance_;
  delete GS2C_Guild_Dynamic_Event_Log_reflection_;
  delete GS2G_GuildUpdate::default_instance_;
  delete GS2G_GuildUpdate_reflection_;
}

void protobuf_AddDesc_Social_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_Item_2eproto();
  ::pb::protobuf_AddDesc_Character_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Social.proto\022\002pb\032\nItem.proto\032\017Characte"
    "r.proto\"\210\002\n\020GS2C_Chat_Respon\022\033\n\004type\030\001 \002"
    "(\0162\r.pb.CHAT_TYPE\022\021\n\tfrom_guid\030\002 \001(\004\022\017\n\007"
    "to_guid\030\003 \001(\004\022\021\n\tfrom_name\030\004 \001(\t\022\017\n\007to_n"
    "ame\030\005 \001(\t\022\023\n\013from_vip_lv\030\006 \001(\005\022\021\n\tto_vip"
    "_lv\030\007 \001(\005\022\027\n\017from_card_proid\030\010 \001(\005\022\025\n\rto"
    "_card_proid\030\t \001(\005\022\021\n\tfacial_id\030\n \001(\005\022\021\n\t"
    "chat_info\030\013 \001(\t\022\021\n\tsend_time\030\014 \001(\004\"\252\001\n\tC"
    "2GS_Chat\022\033\n\004type\030\001 \002(\0162\r.pb.CHAT_TYPE\022\017\n"
    "\007to_guid\030\002 \001(\004\022\017\n\007to_name\030\003 \001(\t\022\021\n\tvip_l"
    "evel\030\004 \001(\005\022\022\n\ncard_proid\030\005 \001(\005\022\021\n\tfacial"
    "_id\030\006 \001(\005\022\021\n\tchat_info\030\007 \001(\t\022\021\n\tsend_tim"
    "e\030\010 \001(\004\"L\n\021GxDB_ChatInfoData\022\023\n\013expire_t"
    "ime\030\001 \001(\004\022\"\n\004chat\030\002 \001(\0132\024.pb.GS2C_Chat_R"
    "espon\"\313\001\n\021MsgPlayerBaseInfo\022\020\n\010playerId\030"
    "\001 \001(\004\022\023\n\013player_name\030\002 \001(\t\022\020\n\010guild_id\030\003"
    " \001(\004\022\022\n\nguild_name\030\004 \001(\t\022\r\n\005level\030\005 \001(\r\022"
    "\021\n\tvip_level\030\006 \001(\r\022\020\n\010isonline\030\007 \001(\010\022\022\n\n"
    "last_login\030\010 \001(\004\022\r\n\005power\030\t \001(\r\022\022\n\ncard_"
    "proid\030\n \001(\r\"f\n\021MsgPlayerTeamInfo\022\036\n\010bag_"
    "info\030\001 \001(\0132\014.pb.GS2C_Bag\0221\n\016character_in"
    "fo\030\002 \001(\0132\031.pb.GS2C_CharacterStorage\"b\n\021M"
    "sgPlayerBaseData\022#\n\004info\030\001 \001(\0132\025.pb.MsgP"
    "layerBaseInfo\022(\n\tteam_info\030\002 \001(\0132\025.pb.Ms"
    "gPlayerTeamInfo\"f\n\034GS2C_Get_Player_Info_"
    "Respone\022\016\n\006result\030\001 \001(\r\022#\n\004info\030\002 \001(\0132\025."
    "pb.MsgPlayerBaseData\022\021\n\tyour_guid\030\003 \002(\004\""
    "N\n\027C2GS_Friend_Ap_Opearate\022\017\n\007friends\030\001 "
    "\003(\004\022\021\n\tyour_guid\030\002 \002(\004\022\017\n\007is_send\030\003 \002(\010\""
    "\261\001\n\033GS2C_Friend_Ap_Opearate_Res\022<\n\010op_in"
    "fos\030\001 \003(\0132*.pb.GS2C_Friend_Ap_Opearate_R"
    "es.opt_result\022\021\n\tyour_guid\030\002 \002(\004\022\017\n\007is_s"
    "end\030\003 \002(\010\0320\n\nopt_result\022\016\n\006opt_id\030\001 \002(\004\022"
    "\022\n\nis_succeed\030\002 \002(\010\"\230\002\n\022Friend_list_Reco"
    "rd\022\023\n\013friend_name\030\001 \001(\t\022\023\n\013friend_guid\030\002"
    " \001(\004\022\021\n\thead_icon\030\003 \001(\r\022\021\n\tvip_level\030\004 \001"
    "(\r\022\r\n\005level\030\005 \001(\r\022\r\n\005power\030\006 \001(\r\022\022\n\nguil"
    "d_name\030\007 \001(\t\022\023\n\013friend_type\030\010 \001(\r\022\022\n\nis_"
    "send_ap\030\t \001(\010\022\025\n\ris_receive_ap\030\n \001(\010\022\021\n\t"
    "is_online\030\013 \001(\010\022\027\n\017last_onlin_time\030\014 \001(\004"
    "\022\024\n\014request_time\030\r \001(\004\"\305\001\n\016C2GS_FriendAd"
    "d\022\022\n\nadd_method\030\001 \002(\r\022\020\n\010add_name\030\002 \001(\t\022"
    "\020\n\010add_guid\030\003 \001(\004\022\016\n\006add_id\030\004 \001(\r\022\024\n\006is_"
    "add\030\005 \002(\010:\004true\022\021\n\tyour_guid\030\006 \002(\004\022&\n\006re"
    "cord\030\007 \001(\0132\026.pb.Friend_list_Record\022\032\n\022is"
    "_from_add_pannel\030\010 \001(\010\"*\n\025GS2C_FriendAdd"
    "_Result\022\021\n\terrorCode\030\001 \001(\r\"e\n\025C2GS_Frien"
    "dAdd_Respon\022\021\n\tis_accept\030\001 \002(\010\022&\n\006record"
    "\030\002 \002(\0132\026.pb.Friend_list_Record\022\021\n\tyour_g"
    "uid\030\003 \002(\004\"\232\001\n\025GS2C_FriendAdd_Respon\022\027\n\ti"
    "s_accept\030\001 \002(\010:\004true\022&\n\006record\030\002 \001(\0132\026.p"
    "b.Friend_list_Record\022\021\n\terrorCode\030\003 \001(\r\022"
    "\024\n\006is_add\030\004 \002(\010:\004true\022\027\n\010is_reply\030\005 \001(\010:"
    "\005false\"W\n\016C2GS_FriendDel\022\020\n\010del_guid\030\001 \001"
    "(\004\022 \n\022is_for_friend_list\030\002 \002(\010:\004true\022\021\n\t"
    "your_guid\030\003 \002(\004\"b\n\025GS2C_FriendDel_Respon"
    "\022\022\n\nis_suscess\030\001 \002(\010\022 \n\022is_for_friend_li"
    "st\030\002 \002(\010:\004true\022\023\n\013friend_guid\030\003 \001(\004\">\n\023G"
    "S2C_FriendListInfo\022\'\n\007friends\030\001 \003(\0132\026.pb"
    ".Friend_list_Record\"\222\001\n\022C2GS_Friend_Sear"
    "ch\022\023\n\013search_type\030\001 \002(\r\022\031\n\021is_search_by_"
    "name\030\002 \001(\010\022\023\n\013search_name\030\003 \001(\t\022\021\n\tsearc"
    "h_id\030\004 \001(\004\022\021\n\tyour_guid\030\005 \001(\004\022\021\n\tmax_cou"
    "nt\030\006 \001(\r\"v\n\032GS2C_Friend_Search_Respone\022\025"
    "\n\rsearch_result\030\001 \001(\r\022.\n\016search_players\030"
    "\002 \003(\0132\026.pb.Friend_list_Record\022\021\n\tyour_gu"
    "id\030\003 \001(\004\"}\n\017GxDB_FriendInfo\022\'\n\007my_info\030\001"
    " \001(\0132\026.pb.Friend_list_Record\022,\n\013friend_l"
    "ist\030\002 \001(\0132\027.pb.GS2C_FriendListInfo\022\023\n\013se"
    "nd_ap_ids\030\003 \001(\t\"\245\003\n\016GxDB_GuildInfo\022\020\n\010gu"
    "ild_id\030\001 \002(\004\022\014\n\004icon\030\002 \002(\r\022\014\n\004name\030\003 \002(\t"
    "\022\023\n\013create_time\030\004 \001(\004\022\r\n\005level\030\005 \001(\r\022\013\n\003"
    "exp\030\006 \001(\r\022\020\n\010prestige\030\007 \001(\r\022\016\n\006active\030\010 "
    "\001(\r\022\016\n\006notice\030\t \001(\t\022\023\n\013notice_time\030\n \001(\004"
    "\022\031\n\021notice_creater_id\030\013 \001(\004\022\033\n\023notice_cr"
    "eater_name\030\014 \001(\t\022\026\n\016guild_owner_id\030\r \001(\004"
    "\022\030\n\020guild_owner_name\030\016 \001(\t\022\025\n\rmembers_co"
    "unt\030\017 \001(\r\022\025\n\rmembers_limit\030\020 \001(\r\022\r\n\005scor"
    "e\030\021 \001(\r\022\026\n\016last_rank_time\030\022 \001(\004\022.\n\004logs\030"
    "\023 \001(\0132 .pb.GS2C_Guild_Dynamic_Event_Log\""
    "\376\002\n\021GxDB_GMember_Info\022\020\n\010playerId\030\001 \001(\004\022"
    "\023\n\013player_name\030\002 \001(\t\022\020\n\010guild_id\030\003 \001(\004\022\022"
    "\n\nguild_name\030\004 \001(\t\022\r\n\005title\030\005 \001(\r\022\020\n\010joi"
    "nTime\030\006 \001(\004\022\026\n\016lastActiveTime\030\007 \001(\004\022\032\n\022g"
    "uildcontributions\030\010 \001(\r\022\r\n\005level\030\t \001(\r\022\020"
    "\n\010isonline\030\n \001(\010\022\021\n\tvip_level\030\013 \001(\r\022\024\n\014r"
    "equest_flag\030\014 \001(\010\022\023\n\013invite_flag\030\r \001(\010\022\033"
    "\n\023request_expire_time\030\016 \001(\004\022\r\n\005power\030\017 \001"
    "(\r\022\021\n\thead_icon\030\020 \001(\r\022\022\n\nis_send_ap\030\021 \003("
    "\004\022\025\n\ris_receive_ap\030\022 \003(\004\">\n\021GxDB_Guild_M"
    "ember\022)\n\nmemberinfo\030\001 \003(\0132\025.pb.GxDB_GMem"
    "ber_Info\"\240\001\n\nGxDB_Guild\022\020\n\010guild_id\030\001 \001("
    "\004\022&\n\nguild_info\030\002 \001(\0132\022.pb.GxDB_GuildInf"
    "o\022+\n\014members_info\030\003 \001(\0132\025.pb.GxDB_Guild_"
    "Member\022+\n\014request_list\030\004 \001(\0132\025.pb.GxDB_G"
    "uild_Member\"1\n\013GxDB_Guilds\022\"\n\nguildinfos"
    "\030\001 \003(\0132\016.pb.GxDB_Guild\"\201\001\n\035C2GS_Guild_Le"
    "aderboard_Search\022\013\n\003key\030\001 \001(\t\022\016\n\006key_id\030"
    "\002 \001(\r\022\021\n\tyour_guid\030\003 \002(\004\022\034\n\016is_leaderboa"
    "rd\030\004 \002(\010:\004true\022\022\n\nis_by_name\030\005 \001(\010\"f\n\035GS"
    "2C_Guild_Leaderboard_Search\022\'\n\013guild_inf"
    "os\030\001 \003(\0132\022.pb.GxDB_GuildInfo\022\034\n\016is_leade"
    "rboard\030\002 \001(\010:\004true\"\200\001\n\030C2GS_Guild_Player"
    "_Search\022\027\n\tis_member\030\001 \002(\010:\004true\022\023\n\013sear"
    "ch_name\030\002 \001(\t\022\021\n\tyour_guid\030\003 \002(\004\022\021\n\tmax_"
    "count\030\004 \002(\r\022\020\n\010guild_id\030\005 \002(\004\"\221\001\n GS2C_G"
    "uild_Player_Search_Respone\022\025\n\rsearch_res"
    "ult\030\001 \001(\r\022*\n\013memberinfos\030\002 \003(\0132\025.pb.GxDB"
    "_GMember_Info\022\027\n\tis_member\030\003 \002(\010:\004true\022\021"
    "\n\tyour_guid\030\004 \002(\004\"U\n\016C2GS_Guild_Add\022\022\n\ng"
    "uild_name\030\001 \002(\t\022\016\n\006notice\030\002 \001(\t\022\014\n\004icon\030"
    "\003 \002(\r\022\021\n\tyour_guid\030\004 \002(\004\"J\n\025GS2C_Guild_A"
    "dd_Respon\022\022\n\nadd_result\030\001 \002(\005\022\035\n\005guild\030\002"
    " \001(\0132\016.pb.GxDB_Guild\"3\n\021GS2C_Guild_Chang"
    "e\022\020\n\010playerId\030\001 \002(\004\022\014\n\004name\030\002 \002(\t\"J\n\032GS2"
    "C_Get_Guild_Info_Respon\022\r\n\005isGet\030\001 \002(\010\022\035"
    "\n\005guild\030\002 \001(\0132\016.pb.GxDB_Guild\"\207\001\n\020C2GS_G"
    "uildInvite\022\030\n\nis_by_guid\030\001 \001(\010:\004true\022\032\n\013"
    "is_by_guild\030\002 \001(\010:\005false\022\024\n\014invitee_name"
    "\030\003 \001(\t\022\024\n\014invitee_guid\030\004 \001(\004\022\021\n\tyour_gui"
    "d\030\005 \002(\004\"\213\001\n\020GS2C_GuildInvite\022\024\n\014inviter_"
    "guid\030\001 \002(\004\022\024\n\014inviter_name\030\002 \002(\t\022\027\n\tis_i"
    "nvite\030\003 \001(\010:\004true\022\022\n\nguild_name\030\004 \001(\t\022\r\n"
    "\005title\030\005 \001(\r\022\017\n\007to_guid\030\006 \001(\004\"V\n\030C2GS_Gu"
    "ildInviteResponse\022\021\n\tis_accept\030\001 \002(\010\022\024\n\014"
    "inviter_guid\030\002 \002(\004\022\021\n\tyour_guid\030\003 \002(\004\"V\n"
    "\030GS2C_GuildInviteResponse\022\021\n\tis_accept\030\001"
    " \002(\010\022\024\n\014player_guids\030\002 \003(\004\022\021\n\terro_code\030"
    "\003 \001(\005\"W\n\031C2GS_GuildInviterApproval\022\021\n\tis"
    "_accept\030\001 \002(\010\022\024\n\014inviter_guid\030\002 \002(\004\022\021\n\ty"
    "our_guid\030\003 \002(\004\"_\n!GS2C_GuildInviterAppro"
    "valResponse\022\021\n\tis_accept\030\001 \002(\010\022\024\n\014player"
    "_guids\030\002 \003(\004\022\021\n\terro_code\030\003 \001(\005\"\270\001\n\027GS2C"
    "_GuildInvite_Repeat\022\026\n\016cur_guild_guid\030\001 "
    "\002(\004\022\026\n\016cur_guild_name\030\002 \002(\t\022\026\n\016new_guild"
    "_guid\030\003 \002(\004\022\026\n\016new_guild_name\030\004 \002(\t\022\021\n\ti"
    "nviterId\030\005 \002(\004\022\021\n\tinviteeId\030\006 \002(\004\022\027\n\tis_"
    "invite\030\007 \001(\010:\004true\"\356\001\n\037C2GS_GuildInvite_"
    "Repeat_Operate\022\031\n\nis_replace\030\001 \001(\010:\005fals"
    "e\022\026\n\016cur_guild_guid\030\002 \002(\004\022\026\n\016cur_guild_n"
    "ame\030\003 \002(\t\022\026\n\016new_guild_guid\030\004 \002(\004\022\026\n\016new"
    "_guild_name\030\005 \002(\t\022\021\n\tinviterId\030\006 \002(\004\022\021\n\t"
    "inviteeId\030\007 \002(\004\022\027\n\tis_invite\030\010 \001(\010:\004true"
    "\022\021\n\tyour_guid\030\t \002(\004\"C\n&GS2C_GuildInvite_"
    "Repeat_Operate_Respon\022\031\n\nis_replace\030\001 \001("
    "\010:\005false\"=\n\016C2GS_GuildQuit\022\030\n\020quit_membe"
    "r_guid\030\001 \002(\004\022\021\n\tyour_guid\030\002 \002(\004\",\n\025GS2C_"
    "GuildQuit_Respon\022\023\n\013quit_result\030\001 \002(\r\"v\n"
    "\024GS2C_GuildMemberQuit\022\030\n\tis_kicked\030\001 \002(\010"
    ":\005false\022\021\n\tquit_guid\030\002 \002(\004\022\031\n\nis_disband"
    "\030\003 \001(\010:\005false\022\026\n\007is_quit\030\004 \001(\010:\005false\"`\n"
    "\021GS2C_GuildDisband\022\030\n\tis_kicked\030\001 \002(\010:\005f"
    "alse\022\031\n\nis_disband\030\002 \001(\010:\005false\022\026\n\007is_qu"
    "it\030\003 \001(\010:\005false\"Y\n\020C2GS_GuildUpdate\022\023\n\013u"
    "pdate_flag\030\001 \002(\r\022\035\n\005guild\030\002 \001(\0132\016.pb.GxD"
    "B_Guild\022\021\n\tyour_guid\030\003 \002(\004\"[\n\020GS2C_Guild"
    "Update\022\023\n\013update_flag\030\001 \002(\r\022\035\n\005guild\030\002 \001"
    "(\0132\016.pb.GxDB_Guild\022\023\n\013update_guid\030\003 \002(\004\""
    "\203\001\n\033C2GS_Guild_Autority_Operate\022\023\n\013targe"
    "t_guid\030\001 \002(\004\022\023\n\013target_name\030\002 \002(\t\022\021\n\tyou"
    "r_guid\030\003 \002(\004\022\021\n\tyour_name\030\004 \002(\t\022\024\n\014opera"
    "te_type\030\005 \001(\r\"\252\001\n\"GS2C_Guild_Autority_Op"
    "erate_Respon\022\023\n\013target_guid\030\001 \002(\004\022\023\n\013tar"
    "get_name\030\002 \002(\t\022\025\n\roperater_guid\030\003 \002(\004\022\025\n"
    "\roperater_name\030\004 \002(\t\022\024\n\014operate_type\030\005 \001"
    "(\r\022\026\n\016operate_result\030\006 \002(\r\"h\n\027C2GS_Guild"
    "Update_Member\022\023\n\013update_flag\030\001 \002(\r\022%\n\006me"
    "mber\030\002 \001(\0132\025.pb.GxDB_GMember_Info\022\021\n\tyou"
    "r_guid\030\003 \002(\004\"U\n\027GS2C_GuildUpdate_Member\022"
    "\023\n\013update_flag\030\001 \002(\r\022%\n\006member\030\002 \001(\0132\025.p"
    "b.GxDB_GMember_Info\"+\n\022GS2C_Update_Respo"
    "n\022\025\n\rupdate_result\030\001 \002(\r\"=\n\024C2GS_GuildNa"
    "me_Check\022\022\n\nguild_name\030\001 \002(\t\022\021\n\tyour_gui"
    "d\030\002 \002(\004\"1\n\033GS2C_GuildName_Check_Respon\022\022"
    "\n\nis_can_use\030\001 \002(\010\"V\n\021GS2C_Guild_Notify\022"
    "\023\n\013notify_type\030\001 \002(\r\022\025\n\rapproval_guid\030\002 "
    "\001(\004\022\025\n\rapproval_name\030\003 \001(\t\"\341\001\n\030GS2C_Guil"
    "d_Dynamic_Event\022+\n\nevent_type\030\001 \001(\0162\027.pb"
    ".GUILD_DYNAMIC_EVENT\022\020\n\010guild_id\030\002 \001(\004\022\022"
    "\n\nguild_name\030\003 \001(\t\022\021\n\tplayer_id\030\004 \001(\004\022\023\n"
    "\013player_name\030\005 \001(\t\022\020\n\010id_value\030\006 \001(\r\022\021\n\t"
    "str_value\030\007 \001(\t\022\022\n\nevent_time\030\010 \001(\004\022\021\n\ti"
    "tem_guid\030\t \001(\004\"Q\n\034GS2C_Guild_Dynamic_Eve"
    "nt_Log\0221\n\013guild_evens\030\001 \003(\0132\034.pb.GS2C_Gu"
    "ild_Dynamic_Event\"F\n\020GS2G_GuildUpdate\022\014\n"
    "\004type\030\001 \002(\r\022\020\n\010guild_id\030\002 \002(\004\022\022\n\nguild_n"
    "ame\030\003 \001(\t*g\n\tCHAT_TYPE\022\020\n\014CHAT_COUNTRY\020\001"
    "\022\016\n\nCHAT_WORLD\020\002\022\017\n\013CHAT_SYSTEM\020\003\022\022\n\016CHA"
    "T_COMBAT_BC\020\004\022\023\n\017CHAT_TYPE_COUNT\020\005*Z\n\025Ms"
    "gPlayerBaseDataType\022\030\n\024PALYER_BASE_DATA_"
    "ALL\020\000\022\'\n#PLAYER_BASE_DATA_JUST_PVP_BASE_"
    "INFO\020\001*\220\001\n\020ENUM_FRIEND_TYPE\022\026\n\022FRIEND_TY"
    "PE_FRIEND\020\000\022\027\n\023FRIEND_TYPE_IGNORES\020\001\022\030\n\024"
    "FRIEND_TYPE_INVITERS\020\002\022\032\n\026FRIEND_TYPE_RE"
    "COMMENDS\020\003\022\025\n\021FRIEND_TYPE_COUNT\020\004*m\n\022FRI"
    "END_SEARCH_TYPE\022\033\n\027FRIEND_SEARCH_IN_FRIE"
    "ND\020\000\022\030\n\024FRIEND_SEARCH_PLAYER\020\001\022 \n\034FRIEND"
    "_SEARCH_RECOMMENDATION\020\002*\\\n\031FRIEND_SEARC"
    "H_TYPE_RESULT\022 \n\034FRIEND_SEARCH_RESULT_SU"
    "CCESS\020\001\022\035\n\031FRIEND_SEARCH_RESULT_FAIL\020\002*\271"
    "\002\n\023GUILD_DYNAMIC_EVENT\022\026\n\022GUILD_EVENT_NO"
    "RMAL\020\001\022\024\n\020GUILD_EVENT_JOIN\020\002\022\025\n\021GUILD_EV"
    "ENT_LEAVE\020\003\022\037\n\033GUILD_EVENT_CHANGE_POSITI"
    "ON\020\004\022\033\n\027GUILD_EVENT_CHANGE_NAME\020\005\022\033\n\027GUI"
    "LD_EVENT_CHANGE_ICON\020\006\022\035\n\031GUILD_EVENT_CH"
    "ANGE_NOTICE\020\007\022\037\n\033GUILD_EVENT_MEMBER_GET_"
    "ITEM\020\010\022\037\n\033GUILD_EVENT_MEMBER_BUY_ITEM\020\t\022"
    "!\n\035GUILD_EVENT_MEMBER_CREAT_ITEM\020\n", 8314);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Social.proto", &protobuf_RegisterTypes);
  GS2C_Chat_Respon::default_instance_ = new GS2C_Chat_Respon();
  C2GS_Chat::default_instance_ = new C2GS_Chat();
  GxDB_ChatInfoData::default_instance_ = new GxDB_ChatInfoData();
  MsgPlayerBaseInfo::default_instance_ = new MsgPlayerBaseInfo();
  MsgPlayerTeamInfo::default_instance_ = new MsgPlayerTeamInfo();
  MsgPlayerBaseData::default_instance_ = new MsgPlayerBaseData();
  GS2C_Get_Player_Info_Respone::default_instance_ = new GS2C_Get_Player_Info_Respone();
  C2GS_Friend_Ap_Opearate::default_instance_ = new C2GS_Friend_Ap_Opearate();
  GS2C_Friend_Ap_Opearate_Res::default_instance_ = new GS2C_Friend_Ap_Opearate_Res();
  GS2C_Friend_Ap_Opearate_Res_opt_result::default_instance_ = new GS2C_Friend_Ap_Opearate_Res_opt_result();
  Friend_list_Record::default_instance_ = new Friend_list_Record();
  C2GS_FriendAdd::default_instance_ = new C2GS_FriendAdd();
  GS2C_FriendAdd_Result::default_instance_ = new GS2C_FriendAdd_Result();
  C2GS_FriendAdd_Respon::default_instance_ = new C2GS_FriendAdd_Respon();
  GS2C_FriendAdd_Respon::default_instance_ = new GS2C_FriendAdd_Respon();
  C2GS_FriendDel::default_instance_ = new C2GS_FriendDel();
  GS2C_FriendDel_Respon::default_instance_ = new GS2C_FriendDel_Respon();
  GS2C_FriendListInfo::default_instance_ = new GS2C_FriendListInfo();
  C2GS_Friend_Search::default_instance_ = new C2GS_Friend_Search();
  GS2C_Friend_Search_Respone::default_instance_ = new GS2C_Friend_Search_Respone();
  GxDB_FriendInfo::default_instance_ = new GxDB_FriendInfo();
  GxDB_GuildInfo::default_instance_ = new GxDB_GuildInfo();
  GxDB_GMember_Info::default_instance_ = new GxDB_GMember_Info();
  GxDB_Guild_Member::default_instance_ = new GxDB_Guild_Member();
  GxDB_Guild::default_instance_ = new GxDB_Guild();
  GxDB_Guilds::default_instance_ = new GxDB_Guilds();
  C2GS_Guild_Leaderboard_Search::default_instance_ = new C2GS_Guild_Leaderboard_Search();
  GS2C_Guild_Leaderboard_Search::default_instance_ = new GS2C_Guild_Leaderboard_Search();
  C2GS_Guild_Player_Search::default_instance_ = new C2GS_Guild_Player_Search();
  GS2C_Guild_Player_Search_Respone::default_instance_ = new GS2C_Guild_Player_Search_Respone();
  C2GS_Guild_Add::default_instance_ = new C2GS_Guild_Add();
  GS2C_Guild_Add_Respon::default_instance_ = new GS2C_Guild_Add_Respon();
  GS2C_Guild_Change::default_instance_ = new GS2C_Guild_Change();
  GS2C_Get_Guild_Info_Respon::default_instance_ = new GS2C_Get_Guild_Info_Respon();
  C2GS_GuildInvite::default_instance_ = new C2GS_GuildInvite();
  GS2C_GuildInvite::default_instance_ = new GS2C_GuildInvite();
  C2GS_GuildInviteResponse::default_instance_ = new C2GS_GuildInviteResponse();
  GS2C_GuildInviteResponse::default_instance_ = new GS2C_GuildInviteResponse();
  C2GS_GuildInviterApproval::default_instance_ = new C2GS_GuildInviterApproval();
  GS2C_GuildInviterApprovalResponse::default_instance_ = new GS2C_GuildInviterApprovalResponse();
  GS2C_GuildInvite_Repeat::default_instance_ = new GS2C_GuildInvite_Repeat();
  C2GS_GuildInvite_Repeat_Operate::default_instance_ = new C2GS_GuildInvite_Repeat_Operate();
  GS2C_GuildInvite_Repeat_Operate_Respon::default_instance_ = new GS2C_GuildInvite_Repeat_Operate_Respon();
  C2GS_GuildQuit::default_instance_ = new C2GS_GuildQuit();
  GS2C_GuildQuit_Respon::default_instance_ = new GS2C_GuildQuit_Respon();
  GS2C_GuildMemberQuit::default_instance_ = new GS2C_GuildMemberQuit();
  GS2C_GuildDisband::default_instance_ = new GS2C_GuildDisband();
  C2GS_GuildUpdate::default_instance_ = new C2GS_GuildUpdate();
  GS2C_GuildUpdate::default_instance_ = new GS2C_GuildUpdate();
  C2GS_Guild_Autority_Operate::default_instance_ = new C2GS_Guild_Autority_Operate();
  GS2C_Guild_Autority_Operate_Respon::default_instance_ = new GS2C_Guild_Autority_Operate_Respon();
  C2GS_GuildUpdate_Member::default_instance_ = new C2GS_GuildUpdate_Member();
  GS2C_GuildUpdate_Member::default_instance_ = new GS2C_GuildUpdate_Member();
  GS2C_Update_Respon::default_instance_ = new GS2C_Update_Respon();
  C2GS_GuildName_Check::default_instance_ = new C2GS_GuildName_Check();
  GS2C_GuildName_Check_Respon::default_instance_ = new GS2C_GuildName_Check_Respon();
  GS2C_Guild_Notify::default_instance_ = new GS2C_Guild_Notify();
  GS2C_Guild_Dynamic_Event::default_instance_ = new GS2C_Guild_Dynamic_Event();
  GS2C_Guild_Dynamic_Event_Log::default_instance_ = new GS2C_Guild_Dynamic_Event_Log();
  GS2G_GuildUpdate::default_instance_ = new GS2G_GuildUpdate();
  GS2C_Chat_Respon::default_instance_->InitAsDefaultInstance();
  C2GS_Chat::default_instance_->InitAsDefaultInstance();
  GxDB_ChatInfoData::default_instance_->InitAsDefaultInstance();
  MsgPlayerBaseInfo::default_instance_->InitAsDefaultInstance();
  MsgPlayerTeamInfo::default_instance_->InitAsDefaultInstance();
  MsgPlayerBaseData::default_instance_->InitAsDefaultInstance();
  GS2C_Get_Player_Info_Respone::default_instance_->InitAsDefaultInstance();
  C2GS_Friend_Ap_Opearate::default_instance_->InitAsDefaultInstance();
  GS2C_Friend_Ap_Opearate_Res::default_instance_->InitAsDefaultInstance();
  GS2C_Friend_Ap_Opearate_Res_opt_result::default_instance_->InitAsDefaultInstance();
  Friend_list_Record::default_instance_->InitAsDefaultInstance();
  C2GS_FriendAdd::default_instance_->InitAsDefaultInstance();
  GS2C_FriendAdd_Result::default_instance_->InitAsDefaultInstance();
  C2GS_FriendAdd_Respon::default_instance_->InitAsDefaultInstance();
  GS2C_FriendAdd_Respon::default_instance_->InitAsDefaultInstance();
  C2GS_FriendDel::default_instance_->InitAsDefaultInstance();
  GS2C_FriendDel_Respon::default_instance_->InitAsDefaultInstance();
  GS2C_FriendListInfo::default_instance_->InitAsDefaultInstance();
  C2GS_Friend_Search::default_instance_->InitAsDefaultInstance();
  GS2C_Friend_Search_Respone::default_instance_->InitAsDefaultInstance();
  GxDB_FriendInfo::default_instance_->InitAsDefaultInstance();
  GxDB_GuildInfo::default_instance_->InitAsDefaultInstance();
  GxDB_GMember_Info::default_instance_->InitAsDefaultInstance();
  GxDB_Guild_Member::default_instance_->InitAsDefaultInstance();
  GxDB_Guild::default_instance_->InitAsDefaultInstance();
  GxDB_Guilds::default_instance_->InitAsDefaultInstance();
  C2GS_Guild_Leaderboard_Search::default_instance_->InitAsDefaultInstance();
  GS2C_Guild_Leaderboard_Search::default_instance_->InitAsDefaultInstance();
  C2GS_Guild_Player_Search::default_instance_->InitAsDefaultInstance();
  GS2C_Guild_Player_Search_Respone::default_instance_->InitAsDefaultInstance();
  C2GS_Guild_Add::default_instance_->InitAsDefaultInstance();
  GS2C_Guild_Add_Respon::default_instance_->InitAsDefaultInstance();
  GS2C_Guild_Change::default_instance_->InitAsDefaultInstance();
  GS2C_Get_Guild_Info_Respon::default_instance_->InitAsDefaultInstance();
  C2GS_GuildInvite::default_instance_->InitAsDefaultInstance();
  GS2C_GuildInvite::default_instance_->InitAsDefaultInstance();
  C2GS_GuildInviteResponse::default_instance_->InitAsDefaultInstance();
  GS2C_GuildInviteResponse::default_instance_->InitAsDefaultInstance();
  C2GS_GuildInviterApproval::default_instance_->InitAsDefaultInstance();
  GS2C_GuildInviterApprovalResponse::default_instance_->InitAsDefaultInstance();
  GS2C_GuildInvite_Repeat::default_instance_->InitAsDefaultInstance();
  C2GS_GuildInvite_Repeat_Operate::default_instance_->InitAsDefaultInstance();
  GS2C_GuildInvite_Repeat_Operate_Respon::default_instance_->InitAsDefaultInstance();
  C2GS_GuildQuit::default_instance_->InitAsDefaultInstance();
  GS2C_GuildQuit_Respon::default_instance_->InitAsDefaultInstance();
  GS2C_GuildMemberQuit::default_instance_->InitAsDefaultInstance();
  GS2C_GuildDisband::default_instance_->InitAsDefaultInstance();
  C2GS_GuildUpdate::default_instance_->InitAsDefaultInstance();
  GS2C_GuildUpdate::default_instance_->InitAsDefaultInstance();
  C2GS_Guild_Autority_Operate::default_instance_->InitAsDefaultInstance();
  GS2C_Guild_Autority_Operate_Respon::default_instance_->InitAsDefaultInstance();
  C2GS_GuildUpdate_Member::default_instance_->InitAsDefaultInstance();
  GS2C_GuildUpdate_Member::default_instance_->InitAsDefaultInstance();
  GS2C_Update_Respon::default_instance_->InitAsDefaultInstance();
  C2GS_GuildName_Check::default_instance_->InitAsDefaultInstance();
  GS2C_GuildName_Check_Respon::default_instance_->InitAsDefaultInstance();
  GS2C_Guild_Notify::default_instance_->InitAsDefaultInstance();
  GS2C_Guild_Dynamic_Event::default_instance_->InitAsDefaultInstance();
  GS2C_Guild_Dynamic_Event_Log::default_instance_->InitAsDefaultInstance();
  GS2G_GuildUpdate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Social_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Social_2eproto {
  StaticDescriptorInitializer_Social_2eproto() {
    protobuf_AddDesc_Social_2eproto();
  }
} static_descriptor_initializer_Social_2eproto_;
const ::google::protobuf::EnumDescriptor* CHAT_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CHAT_TYPE_descriptor_;
}
bool CHAT_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MsgPlayerBaseDataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerBaseDataType_descriptor_;
}
bool MsgPlayerBaseDataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ENUM_FRIEND_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ENUM_FRIEND_TYPE_descriptor_;
}
bool ENUM_FRIEND_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FRIEND_SEARCH_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FRIEND_SEARCH_TYPE_descriptor_;
}
bool FRIEND_SEARCH_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FRIEND_SEARCH_TYPE_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FRIEND_SEARCH_TYPE_RESULT_descriptor_;
}
bool FRIEND_SEARCH_TYPE_RESULT_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GUILD_DYNAMIC_EVENT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GUILD_DYNAMIC_EVENT_descriptor_;
}
bool GUILD_DYNAMIC_EVENT_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Chat_Respon::kTypeFieldNumber;
const int GS2C_Chat_Respon::kFromGuidFieldNumber;
const int GS2C_Chat_Respon::kToGuidFieldNumber;
const int GS2C_Chat_Respon::kFromNameFieldNumber;
const int GS2C_Chat_Respon::kToNameFieldNumber;
const int GS2C_Chat_Respon::kFromVipLvFieldNumber;
const int GS2C_Chat_Respon::kToVipLvFieldNumber;
const int GS2C_Chat_Respon::kFromCardProidFieldNumber;
const int GS2C_Chat_Respon::kToCardProidFieldNumber;
const int GS2C_Chat_Respon::kFacialIdFieldNumber;
const int GS2C_Chat_Respon::kChatInfoFieldNumber;
const int GS2C_Chat_Respon::kSendTimeFieldNumber;
#endif  // !_MSC_VER

GS2C_Chat_Respon::GS2C_Chat_Respon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Chat_Respon::InitAsDefaultInstance() {
}

GS2C_Chat_Respon::GS2C_Chat_Respon(const GS2C_Chat_Respon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Chat_Respon::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  from_guid_ = GOOGLE_ULONGLONG(0);
  to_guid_ = GOOGLE_ULONGLONG(0);
  from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_vip_lv_ = 0;
  to_vip_lv_ = 0;
  from_card_proid_ = 0;
  to_card_proid_ = 0;
  facial_id_ = 0;
  chat_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  send_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Chat_Respon::~GS2C_Chat_Respon() {
  SharedDtor();
}

void GS2C_Chat_Respon::SharedDtor() {
  if (from_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_name_;
  }
  if (to_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_name_;
  }
  if (chat_info_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_info_;
  }
  if (this != default_instance_) {
  }
}

void GS2C_Chat_Respon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Chat_Respon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Chat_Respon_descriptor_;
}

const GS2C_Chat_Respon& GS2C_Chat_Respon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GS2C_Chat_Respon* GS2C_Chat_Respon::default_instance_ = NULL;

GS2C_Chat_Respon* GS2C_Chat_Respon::New() const {
  return new GS2C_Chat_Respon;
}

void GS2C_Chat_Respon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    from_guid_ = GOOGLE_ULONGLONG(0);
    to_guid_ = GOOGLE_ULONGLONG(0);
    if (has_from_name()) {
      if (from_name_ != &::google::protobuf::internal::kEmptyString) {
        from_name_->clear();
      }
    }
    if (has_to_name()) {
      if (to_name_ != &::google::protobuf::internal::kEmptyString) {
        to_name_->clear();
      }
    }
    from_vip_lv_ = 0;
    to_vip_lv_ = 0;
    from_card_proid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    to_card_proid_ = 0;
    facial_id_ = 0;
    if (has_chat_info()) {
      if (chat_info_ != &::google::protobuf::internal::kEmptyString) {
        chat_info_->clear();
      }
    }
    send_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Chat_Respon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.CHAT_TYPE type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::CHAT_TYPE_IsValid(value)) {
            set_type(static_cast< ::pb::CHAT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_from_guid;
        break;
      }

      // optional uint64 from_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_guid_)));
          set_has_from_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_to_guid;
        break;
      }

      // optional uint64 to_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_guid_)));
          set_has_to_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_from_name;
        break;
      }

      // optional string from_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_name().data(), this->from_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_to_name;
        break;
      }

      // optional string to_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to_name().data(), this->to_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_from_vip_lv;
        break;
      }

      // optional int32 from_vip_lv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_vip_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_vip_lv_)));
          set_has_from_vip_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_to_vip_lv;
        break;
      }

      // optional int32 to_vip_lv = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_vip_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_vip_lv_)));
          set_has_to_vip_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_from_card_proid;
        break;
      }

      // optional int32 from_card_proid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_card_proid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_card_proid_)));
          set_has_from_card_proid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_to_card_proid;
        break;
      }

      // optional int32 to_card_proid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_card_proid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_card_proid_)));
          set_has_to_card_proid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_facial_id;
        break;
      }

      // optional int32 facial_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_facial_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &facial_id_)));
          set_has_facial_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_chat_info;
        break;
      }

      // optional string chat_info = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chat_info().data(), this->chat_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_send_time;
        break;
      }

      // optional uint64 send_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &send_time_)));
          set_has_send_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Chat_Respon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.CHAT_TYPE type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 from_guid = 2;
  if (has_from_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->from_guid(), output);
  }

  // optional uint64 to_guid = 3;
  if (has_to_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->to_guid(), output);
  }

  // optional string from_name = 4;
  if (has_from_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_name().data(), this->from_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->from_name(), output);
  }

  // optional string to_name = 5;
  if (has_to_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_name().data(), this->to_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->to_name(), output);
  }

  // optional int32 from_vip_lv = 6;
  if (has_from_vip_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->from_vip_lv(), output);
  }

  // optional int32 to_vip_lv = 7;
  if (has_to_vip_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->to_vip_lv(), output);
  }

  // optional int32 from_card_proid = 8;
  if (has_from_card_proid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->from_card_proid(), output);
  }

  // optional int32 to_card_proid = 9;
  if (has_to_card_proid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->to_card_proid(), output);
  }

  // optional int32 facial_id = 10;
  if (has_facial_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->facial_id(), output);
  }

  // optional string chat_info = 11;
  if (has_chat_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chat_info().data(), this->chat_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->chat_info(), output);
  }

  // optional uint64 send_time = 12;
  if (has_send_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->send_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Chat_Respon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.CHAT_TYPE type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 from_guid = 2;
  if (has_from_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->from_guid(), target);
  }

  // optional uint64 to_guid = 3;
  if (has_to_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->to_guid(), target);
  }

  // optional string from_name = 4;
  if (has_from_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_name().data(), this->from_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->from_name(), target);
  }

  // optional string to_name = 5;
  if (has_to_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_name().data(), this->to_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->to_name(), target);
  }

  // optional int32 from_vip_lv = 6;
  if (has_from_vip_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->from_vip_lv(), target);
  }

  // optional int32 to_vip_lv = 7;
  if (has_to_vip_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->to_vip_lv(), target);
  }

  // optional int32 from_card_proid = 8;
  if (has_from_card_proid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->from_card_proid(), target);
  }

  // optional int32 to_card_proid = 9;
  if (has_to_card_proid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->to_card_proid(), target);
  }

  // optional int32 facial_id = 10;
  if (has_facial_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->facial_id(), target);
  }

  // optional string chat_info = 11;
  if (has_chat_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chat_info().data(), this->chat_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->chat_info(), target);
  }

  // optional uint64 send_time = 12;
  if (has_send_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->send_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Chat_Respon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.CHAT_TYPE type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 from_guid = 2;
    if (has_from_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_guid());
    }

    // optional uint64 to_guid = 3;
    if (has_to_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_guid());
    }

    // optional string from_name = 4;
    if (has_from_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_name());
    }

    // optional string to_name = 5;
    if (has_to_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_name());
    }

    // optional int32 from_vip_lv = 6;
    if (has_from_vip_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from_vip_lv());
    }

    // optional int32 to_vip_lv = 7;
    if (has_to_vip_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->to_vip_lv());
    }

    // optional int32 from_card_proid = 8;
    if (has_from_card_proid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from_card_proid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 to_card_proid = 9;
    if (has_to_card_proid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->to_card_proid());
    }

    // optional int32 facial_id = 10;
    if (has_facial_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->facial_id());
    }

    // optional string chat_info = 11;
    if (has_chat_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chat_info());
    }

    // optional uint64 send_time = 12;
    if (has_send_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->send_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Chat_Respon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Chat_Respon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Chat_Respon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Chat_Respon::MergeFrom(const GS2C_Chat_Respon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_from_guid()) {
      set_from_guid(from.from_guid());
    }
    if (from.has_to_guid()) {
      set_to_guid(from.to_guid());
    }
    if (from.has_from_name()) {
      set_from_name(from.from_name());
    }
    if (from.has_to_name()) {
      set_to_name(from.to_name());
    }
    if (from.has_from_vip_lv()) {
      set_from_vip_lv(from.from_vip_lv());
    }
    if (from.has_to_vip_lv()) {
      set_to_vip_lv(from.to_vip_lv());
    }
    if (from.has_from_card_proid()) {
      set_from_card_proid(from.from_card_proid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_to_card_proid()) {
      set_to_card_proid(from.to_card_proid());
    }
    if (from.has_facial_id()) {
      set_facial_id(from.facial_id());
    }
    if (from.has_chat_info()) {
      set_chat_info(from.chat_info());
    }
    if (from.has_send_time()) {
      set_send_time(from.send_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Chat_Respon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Chat_Respon::CopyFrom(const GS2C_Chat_Respon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Chat_Respon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Chat_Respon::Swap(GS2C_Chat_Respon* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(from_guid_, other->from_guid_);
    std::swap(to_guid_, other->to_guid_);
    std::swap(from_name_, other->from_name_);
    std::swap(to_name_, other->to_name_);
    std::swap(from_vip_lv_, other->from_vip_lv_);
    std::swap(to_vip_lv_, other->to_vip_lv_);
    std::swap(from_card_proid_, other->from_card_proid_);
    std::swap(to_card_proid_, other->to_card_proid_);
    std::swap(facial_id_, other->facial_id_);
    std::swap(chat_info_, other->chat_info_);
    std::swap(send_time_, other->send_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Chat_Respon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Chat_Respon_descriptor_;
  metadata.reflection = GS2C_Chat_Respon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Chat::kTypeFieldNumber;
const int C2GS_Chat::kToGuidFieldNumber;
const int C2GS_Chat::kToNameFieldNumber;
const int C2GS_Chat::kVipLevelFieldNumber;
const int C2GS_Chat::kCardProidFieldNumber;
const int C2GS_Chat::kFacialIdFieldNumber;
const int C2GS_Chat::kChatInfoFieldNumber;
const int C2GS_Chat::kSendTimeFieldNumber;
#endif  // !_MSC_VER

C2GS_Chat::C2GS_Chat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Chat::InitAsDefaultInstance() {
}

C2GS_Chat::C2GS_Chat(const C2GS_Chat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Chat::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  to_guid_ = GOOGLE_ULONGLONG(0);
  to_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vip_level_ = 0;
  card_proid_ = 0;
  facial_id_ = 0;
  chat_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  send_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Chat::~C2GS_Chat() {
  SharedDtor();
}

void C2GS_Chat::SharedDtor() {
  if (to_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_name_;
  }
  if (chat_info_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_info_;
  }
  if (this != default_instance_) {
  }
}

void C2GS_Chat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Chat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Chat_descriptor_;
}

const C2GS_Chat& C2GS_Chat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

C2GS_Chat* C2GS_Chat::default_instance_ = NULL;

C2GS_Chat* C2GS_Chat::New() const {
  return new C2GS_Chat;
}

void C2GS_Chat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    to_guid_ = GOOGLE_ULONGLONG(0);
    if (has_to_name()) {
      if (to_name_ != &::google::protobuf::internal::kEmptyString) {
        to_name_->clear();
      }
    }
    vip_level_ = 0;
    card_proid_ = 0;
    facial_id_ = 0;
    if (has_chat_info()) {
      if (chat_info_ != &::google::protobuf::internal::kEmptyString) {
        chat_info_->clear();
      }
    }
    send_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Chat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.CHAT_TYPE type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::CHAT_TYPE_IsValid(value)) {
            set_type(static_cast< ::pb::CHAT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_to_guid;
        break;
      }

      // optional uint64 to_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_guid_)));
          set_has_to_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_to_name;
        break;
      }

      // optional string to_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to_name().data(), this->to_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vip_level;
        break;
      }

      // optional int32 vip_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_card_proid;
        break;
      }

      // optional int32 card_proid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_proid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_proid_)));
          set_has_card_proid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_facial_id;
        break;
      }

      // optional int32 facial_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_facial_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &facial_id_)));
          set_has_facial_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_chat_info;
        break;
      }

      // optional string chat_info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chat_info().data(), this->chat_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_send_time;
        break;
      }

      // optional uint64 send_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &send_time_)));
          set_has_send_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Chat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.CHAT_TYPE type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 to_guid = 2;
  if (has_to_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->to_guid(), output);
  }

  // optional string to_name = 3;
  if (has_to_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_name().data(), this->to_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->to_name(), output);
  }

  // optional int32 vip_level = 4;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vip_level(), output);
  }

  // optional int32 card_proid = 5;
  if (has_card_proid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->card_proid(), output);
  }

  // optional int32 facial_id = 6;
  if (has_facial_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->facial_id(), output);
  }

  // optional string chat_info = 7;
  if (has_chat_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chat_info().data(), this->chat_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->chat_info(), output);
  }

  // optional uint64 send_time = 8;
  if (has_send_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->send_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Chat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.CHAT_TYPE type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 to_guid = 2;
  if (has_to_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->to_guid(), target);
  }

  // optional string to_name = 3;
  if (has_to_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_name().data(), this->to_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->to_name(), target);
  }

  // optional int32 vip_level = 4;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->vip_level(), target);
  }

  // optional int32 card_proid = 5;
  if (has_card_proid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->card_proid(), target);
  }

  // optional int32 facial_id = 6;
  if (has_facial_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->facial_id(), target);
  }

  // optional string chat_info = 7;
  if (has_chat_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chat_info().data(), this->chat_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->chat_info(), target);
  }

  // optional uint64 send_time = 8;
  if (has_send_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->send_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Chat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.CHAT_TYPE type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 to_guid = 2;
    if (has_to_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_guid());
    }

    // optional string to_name = 3;
    if (has_to_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_name());
    }

    // optional int32 vip_level = 4;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }

    // optional int32 card_proid = 5;
    if (has_card_proid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_proid());
    }

    // optional int32 facial_id = 6;
    if (has_facial_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->facial_id());
    }

    // optional string chat_info = 7;
    if (has_chat_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chat_info());
    }

    // optional uint64 send_time = 8;
    if (has_send_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->send_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Chat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Chat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Chat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Chat::MergeFrom(const C2GS_Chat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_to_guid()) {
      set_to_guid(from.to_guid());
    }
    if (from.has_to_name()) {
      set_to_name(from.to_name());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_card_proid()) {
      set_card_proid(from.card_proid());
    }
    if (from.has_facial_id()) {
      set_facial_id(from.facial_id());
    }
    if (from.has_chat_info()) {
      set_chat_info(from.chat_info());
    }
    if (from.has_send_time()) {
      set_send_time(from.send_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Chat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Chat::CopyFrom(const C2GS_Chat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Chat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Chat::Swap(C2GS_Chat* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(to_guid_, other->to_guid_);
    std::swap(to_name_, other->to_name_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(card_proid_, other->card_proid_);
    std::swap(facial_id_, other->facial_id_);
    std::swap(chat_info_, other->chat_info_);
    std::swap(send_time_, other->send_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Chat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Chat_descriptor_;
  metadata.reflection = C2GS_Chat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_ChatInfoData::kExpireTimeFieldNumber;
const int GxDB_ChatInfoData::kChatFieldNumber;
#endif  // !_MSC_VER

GxDB_ChatInfoData::GxDB_ChatInfoData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_ChatInfoData::InitAsDefaultInstance() {
  chat_ = const_cast< ::pb::GS2C_Chat_Respon*>(&::pb::GS2C_Chat_Respon::default_instance());
}

GxDB_ChatInfoData::GxDB_ChatInfoData(const GxDB_ChatInfoData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_ChatInfoData::SharedCtor() {
  _cached_size_ = 0;
  expire_time_ = GOOGLE_ULONGLONG(0);
  chat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_ChatInfoData::~GxDB_ChatInfoData() {
  SharedDtor();
}

void GxDB_ChatInfoData::SharedDtor() {
  if (this != default_instance_) {
    delete chat_;
  }
}

void GxDB_ChatInfoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_ChatInfoData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_ChatInfoData_descriptor_;
}

const GxDB_ChatInfoData& GxDB_ChatInfoData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GxDB_ChatInfoData* GxDB_ChatInfoData::default_instance_ = NULL;

GxDB_ChatInfoData* GxDB_ChatInfoData::New() const {
  return new GxDB_ChatInfoData;
}

void GxDB_ChatInfoData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    expire_time_ = GOOGLE_ULONGLONG(0);
    if (has_chat()) {
      if (chat_ != NULL) chat_->::pb::GS2C_Chat_Respon::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_ChatInfoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 expire_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chat;
        break;
      }

      // optional .pb.GS2C_Chat_Respon chat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_ChatInfoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 expire_time = 1;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->expire_time(), output);
  }

  // optional .pb.GS2C_Chat_Respon chat = 2;
  if (has_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_ChatInfoData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 expire_time = 1;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->expire_time(), target);
  }

  // optional .pb.GS2C_Chat_Respon chat = 2;
  if (has_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_ChatInfoData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 expire_time = 1;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expire_time());
    }

    // optional .pb.GS2C_Chat_Respon chat = 2;
    if (has_chat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_ChatInfoData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_ChatInfoData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_ChatInfoData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_ChatInfoData::MergeFrom(const GxDB_ChatInfoData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
    if (from.has_chat()) {
      mutable_chat()->::pb::GS2C_Chat_Respon::MergeFrom(from.chat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_ChatInfoData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_ChatInfoData::CopyFrom(const GxDB_ChatInfoData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_ChatInfoData::IsInitialized() const {

  if (has_chat()) {
    if (!this->chat().IsInitialized()) return false;
  }
  return true;
}

void GxDB_ChatInfoData::Swap(GxDB_ChatInfoData* other) {
  if (other != this) {
    std::swap(expire_time_, other->expire_time_);
    std::swap(chat_, other->chat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_ChatInfoData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_ChatInfoData_descriptor_;
  metadata.reflection = GxDB_ChatInfoData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerBaseInfo::kPlayerIdFieldNumber;
const int MsgPlayerBaseInfo::kPlayerNameFieldNumber;
const int MsgPlayerBaseInfo::kGuildIdFieldNumber;
const int MsgPlayerBaseInfo::kGuildNameFieldNumber;
const int MsgPlayerBaseInfo::kLevelFieldNumber;
const int MsgPlayerBaseInfo::kVipLevelFieldNumber;
const int MsgPlayerBaseInfo::kIsonlineFieldNumber;
const int MsgPlayerBaseInfo::kLastLoginFieldNumber;
const int MsgPlayerBaseInfo::kPowerFieldNumber;
const int MsgPlayerBaseInfo::kCardProidFieldNumber;
#endif  // !_MSC_VER

MsgPlayerBaseInfo::MsgPlayerBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgPlayerBaseInfo::InitAsDefaultInstance() {
}

MsgPlayerBaseInfo::MsgPlayerBaseInfo(const MsgPlayerBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgPlayerBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guild_id_ = GOOGLE_ULONGLONG(0);
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  vip_level_ = 0u;
  isonline_ = false;
  last_login_ = GOOGLE_ULONGLONG(0);
  power_ = 0u;
  card_proid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerBaseInfo::~MsgPlayerBaseInfo() {
  SharedDtor();
}

void MsgPlayerBaseInfo::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (this != default_instance_) {
  }
}

void MsgPlayerBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerBaseInfo_descriptor_;
}

const MsgPlayerBaseInfo& MsgPlayerBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

MsgPlayerBaseInfo* MsgPlayerBaseInfo::default_instance_ = NULL;

MsgPlayerBaseInfo* MsgPlayerBaseInfo::New() const {
  return new MsgPlayerBaseInfo;
}

void MsgPlayerBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    guild_id_ = GOOGLE_ULONGLONG(0);
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
    level_ = 0u;
    vip_level_ = 0u;
    isonline_ = false;
    last_login_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    power_ = 0u;
    card_proid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guild_id;
        break;
      }

      // optional uint64 guild_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_guild_name;
        break;
      }

      // optional string guild_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isonline;
        break;
      }

      // optional bool isonline = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isonline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isonline_)));
          set_has_isonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_last_login;
        break;
      }

      // optional uint64 last_login = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_login:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_login_)));
          set_has_last_login();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_power;
        break;
      }

      // optional uint32 power = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_card_proid;
        break;
      }

      // optional uint32 card_proid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_proid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_proid_)));
          set_has_card_proid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPlayerBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_name(), output);
  }

  // optional uint64 guild_id = 3;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guild_id(), output);
  }

  // optional string guild_name = 4;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->guild_name(), output);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint32 vip_level = 6;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->vip_level(), output);
  }

  // optional bool isonline = 7;
  if (has_isonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isonline(), output);
  }

  // optional uint64 last_login = 8;
  if (has_last_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->last_login(), output);
  }

  // optional uint32 power = 9;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->power(), output);
  }

  // optional uint32 card_proid = 10;
  if (has_card_proid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->card_proid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPlayerBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // optional uint64 guild_id = 3;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guild_id(), target);
  }

  // optional string guild_name = 4;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guild_name(), target);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint32 vip_level = 6;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->vip_level(), target);
  }

  // optional bool isonline = 7;
  if (has_isonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isonline(), target);
  }

  // optional uint64 last_login = 8;
  if (has_last_login()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->last_login(), target);
  }

  // optional uint32 power = 9;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->power(), target);
  }

  // optional uint32 card_proid = 10;
  if (has_card_proid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->card_proid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPlayerBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional uint64 guild_id = 3;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_id());
    }

    // optional string guild_name = 4;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 vip_level = 6;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

    // optional bool isonline = 7;
    if (has_isonline()) {
      total_size += 1 + 1;
    }

    // optional uint64 last_login = 8;
    if (has_last_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_login());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 power = 9;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power());
    }

    // optional uint32 card_proid = 10;
    if (has_card_proid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_proid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerBaseInfo::MergeFrom(const MsgPlayerBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_isonline()) {
      set_isonline(from.isonline());
    }
    if (from.has_last_login()) {
      set_last_login(from.last_login());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_card_proid()) {
      set_card_proid(from.card_proid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerBaseInfo::CopyFrom(const MsgPlayerBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerBaseInfo::IsInitialized() const {

  return true;
}

void MsgPlayerBaseInfo::Swap(MsgPlayerBaseInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(player_name_, other->player_name_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(level_, other->level_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(isonline_, other->isonline_);
    std::swap(last_login_, other->last_login_);
    std::swap(power_, other->power_);
    std::swap(card_proid_, other->card_proid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerBaseInfo_descriptor_;
  metadata.reflection = MsgPlayerBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerTeamInfo::kBagInfoFieldNumber;
const int MsgPlayerTeamInfo::kCharacterInfoFieldNumber;
#endif  // !_MSC_VER

MsgPlayerTeamInfo::MsgPlayerTeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgPlayerTeamInfo::InitAsDefaultInstance() {
  bag_info_ = const_cast< ::pb::GS2C_Bag*>(&::pb::GS2C_Bag::default_instance());
  character_info_ = const_cast< ::pb::GS2C_CharacterStorage*>(&::pb::GS2C_CharacterStorage::default_instance());
}

MsgPlayerTeamInfo::MsgPlayerTeamInfo(const MsgPlayerTeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgPlayerTeamInfo::SharedCtor() {
  _cached_size_ = 0;
  bag_info_ = NULL;
  character_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerTeamInfo::~MsgPlayerTeamInfo() {
  SharedDtor();
}

void MsgPlayerTeamInfo::SharedDtor() {
  if (this != default_instance_) {
    delete bag_info_;
    delete character_info_;
  }
}

void MsgPlayerTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerTeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerTeamInfo_descriptor_;
}

const MsgPlayerTeamInfo& MsgPlayerTeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

MsgPlayerTeamInfo* MsgPlayerTeamInfo::default_instance_ = NULL;

MsgPlayerTeamInfo* MsgPlayerTeamInfo::New() const {
  return new MsgPlayerTeamInfo;
}

void MsgPlayerTeamInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bag_info()) {
      if (bag_info_ != NULL) bag_info_->::pb::GS2C_Bag::Clear();
    }
    if (has_character_info()) {
      if (character_info_ != NULL) character_info_->::pb::GS2C_CharacterStorage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.GS2C_Bag bag_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bag_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_character_info;
        break;
      }

      // optional .pb.GS2C_CharacterStorage character_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_character_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_character_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPlayerTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.GS2C_Bag bag_info = 1;
  if (has_bag_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bag_info(), output);
  }

  // optional .pb.GS2C_CharacterStorage character_info = 2;
  if (has_character_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->character_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPlayerTeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.GS2C_Bag bag_info = 1;
  if (has_bag_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bag_info(), target);
  }

  // optional .pb.GS2C_CharacterStorage character_info = 2;
  if (has_character_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->character_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPlayerTeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.GS2C_Bag bag_info = 1;
    if (has_bag_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bag_info());
    }

    // optional .pb.GS2C_CharacterStorage character_info = 2;
    if (has_character_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->character_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerTeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerTeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerTeamInfo::MergeFrom(const MsgPlayerTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bag_info()) {
      mutable_bag_info()->::pb::GS2C_Bag::MergeFrom(from.bag_info());
    }
    if (from.has_character_info()) {
      mutable_character_info()->::pb::GS2C_CharacterStorage::MergeFrom(from.character_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerTeamInfo::CopyFrom(const MsgPlayerTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerTeamInfo::IsInitialized() const {

  if (has_bag_info()) {
    if (!this->bag_info().IsInitialized()) return false;
  }
  if (has_character_info()) {
    if (!this->character_info().IsInitialized()) return false;
  }
  return true;
}

void MsgPlayerTeamInfo::Swap(MsgPlayerTeamInfo* other) {
  if (other != this) {
    std::swap(bag_info_, other->bag_info_);
    std::swap(character_info_, other->character_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerTeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerTeamInfo_descriptor_;
  metadata.reflection = MsgPlayerTeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerBaseData::kInfoFieldNumber;
const int MsgPlayerBaseData::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

MsgPlayerBaseData::MsgPlayerBaseData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgPlayerBaseData::InitAsDefaultInstance() {
  info_ = const_cast< ::pb::MsgPlayerBaseInfo*>(&::pb::MsgPlayerBaseInfo::default_instance());
  team_info_ = const_cast< ::pb::MsgPlayerTeamInfo*>(&::pb::MsgPlayerTeamInfo::default_instance());
}

MsgPlayerBaseData::MsgPlayerBaseData(const MsgPlayerBaseData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgPlayerBaseData::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  team_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerBaseData::~MsgPlayerBaseData() {
  SharedDtor();
}

void MsgPlayerBaseData::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete team_info_;
  }
}

void MsgPlayerBaseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerBaseData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerBaseData_descriptor_;
}

const MsgPlayerBaseData& MsgPlayerBaseData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

MsgPlayerBaseData* MsgPlayerBaseData::default_instance_ = NULL;

MsgPlayerBaseData* MsgPlayerBaseData::New() const {
  return new MsgPlayerBaseData;
}

void MsgPlayerBaseData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::pb::MsgPlayerBaseInfo::Clear();
    }
    if (has_team_info()) {
      if (team_info_ != NULL) team_info_->::pb::MsgPlayerTeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerBaseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.MsgPlayerBaseInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_team_info;
        break;
      }

      // optional .pb.MsgPlayerTeamInfo team_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPlayerBaseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.MsgPlayerBaseInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // optional .pb.MsgPlayerTeamInfo team_info = 2;
  if (has_team_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->team_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPlayerBaseData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.MsgPlayerBaseInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // optional .pb.MsgPlayerTeamInfo team_info = 2;
  if (has_team_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->team_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPlayerBaseData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.MsgPlayerBaseInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .pb.MsgPlayerTeamInfo team_info = 2;
    if (has_team_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerBaseData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerBaseData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerBaseData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerBaseData::MergeFrom(const MsgPlayerBaseData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::pb::MsgPlayerBaseInfo::MergeFrom(from.info());
    }
    if (from.has_team_info()) {
      mutable_team_info()->::pb::MsgPlayerTeamInfo::MergeFrom(from.team_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerBaseData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerBaseData::CopyFrom(const MsgPlayerBaseData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerBaseData::IsInitialized() const {

  if (has_team_info()) {
    if (!this->team_info().IsInitialized()) return false;
  }
  return true;
}

void MsgPlayerBaseData::Swap(MsgPlayerBaseData* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(team_info_, other->team_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerBaseData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerBaseData_descriptor_;
  metadata.reflection = MsgPlayerBaseData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Get_Player_Info_Respone::kResultFieldNumber;
const int GS2C_Get_Player_Info_Respone::kInfoFieldNumber;
const int GS2C_Get_Player_Info_Respone::kYourGuidFieldNumber;
#endif  // !_MSC_VER

GS2C_Get_Player_Info_Respone::GS2C_Get_Player_Info_Respone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Get_Player_Info_Respone::InitAsDefaultInstance() {
  info_ = const_cast< ::pb::MsgPlayerBaseData*>(&::pb::MsgPlayerBaseData::default_instance());
}

GS2C_Get_Player_Info_Respone::GS2C_Get_Player_Info_Respone(const GS2C_Get_Player_Info_Respone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Get_Player_Info_Respone::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  info_ = NULL;
  your_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Get_Player_Info_Respone::~GS2C_Get_Player_Info_Respone() {
  SharedDtor();
}

void GS2C_Get_Player_Info_Respone::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void GS2C_Get_Player_Info_Respone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Get_Player_Info_Respone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Get_Player_Info_Respone_descriptor_;
}

const GS2C_Get_Player_Info_Respone& GS2C_Get_Player_Info_Respone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GS2C_Get_Player_Info_Respone* GS2C_Get_Player_Info_Respone::default_instance_ = NULL;

GS2C_Get_Player_Info_Respone* GS2C_Get_Player_Info_Respone::New() const {
  return new GS2C_Get_Player_Info_Respone;
}

void GS2C_Get_Player_Info_Respone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::pb::MsgPlayerBaseData::Clear();
    }
    your_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Get_Player_Info_Respone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .pb.MsgPlayerBaseData info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_your_guid;
        break;
      }

      // required uint64 your_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_your_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &your_guid_)));
          set_has_your_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Get_Player_Info_Respone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional .pb.MsgPlayerBaseData info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  // required uint64 your_guid = 3;
  if (has_your_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->your_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Get_Player_Info_Respone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional .pb.MsgPlayerBaseData info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  // required uint64 your_guid = 3;
  if (has_your_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->your_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Get_Player_Info_Respone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional .pb.MsgPlayerBaseData info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // required uint64 your_guid = 3;
    if (has_your_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->your_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Get_Player_Info_Respone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Get_Player_Info_Respone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Get_Player_Info_Respone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Get_Player_Info_Respone::MergeFrom(const GS2C_Get_Player_Info_Respone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_info()) {
      mutable_info()->::pb::MsgPlayerBaseData::MergeFrom(from.info());
    }
    if (from.has_your_guid()) {
      set_your_guid(from.your_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Get_Player_Info_Respone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Get_Player_Info_Respone::CopyFrom(const GS2C_Get_Player_Info_Respone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Get_Player_Info_Respone::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void GS2C_Get_Player_Info_Respone::Swap(GS2C_Get_Player_Info_Respone* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(info_, other->info_);
    std::swap(your_guid_, other->your_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Get_Player_Info_Respone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Get_Player_Info_Respone_descriptor_;
  metadata.reflection = GS2C_Get_Player_Info_Respone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Friend_Ap_Opearate::kFriendsFieldNumber;
const int C2GS_Friend_Ap_Opearate::kYourGuidFieldNumber;
const int C2GS_Friend_Ap_Opearate::kIsSendFieldNumber;
#endif  // !_MSC_VER

C2GS_Friend_Ap_Opearate::C2GS_Friend_Ap_Opearate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Friend_Ap_Opearate::InitAsDefaultInstance() {
}

C2GS_Friend_Ap_Opearate::C2GS_Friend_Ap_Opearate(const C2GS_Friend_Ap_Opearate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Friend_Ap_Opearate::SharedCtor() {
  _cached_size_ = 0;
  your_guid_ = GOOGLE_ULONGLONG(0);
  is_send_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Friend_Ap_Opearate::~C2GS_Friend_Ap_Opearate() {
  SharedDtor();
}

void C2GS_Friend_Ap_Opearate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Friend_Ap_Opearate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Friend_Ap_Opearate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Friend_Ap_Opearate_descriptor_;
}

const C2GS_Friend_Ap_Opearate& C2GS_Friend_Ap_Opearate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

C2GS_Friend_Ap_Opearate* C2GS_Friend_Ap_Opearate::default_instance_ = NULL;

C2GS_Friend_Ap_Opearate* C2GS_Friend_Ap_Opearate::New() const {
  return new C2GS_Friend_Ap_Opearate;
}

void C2GS_Friend_Ap_Opearate::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    your_guid_ = GOOGLE_ULONGLONG(0);
    is_send_ = false;
  }
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Friend_Ap_Opearate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 friends = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friends:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_friends())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_friends())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_friends;
        if (input->ExpectTag(16)) goto parse_your_guid;
        break;
      }

      // required uint64 your_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_your_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &your_guid_)));
          set_has_your_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_send;
        break;
      }

      // required bool is_send = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_send:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_send_)));
          set_has_is_send();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Friend_Ap_Opearate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->friends(i), output);
  }

  // required uint64 your_guid = 2;
  if (has_your_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->your_guid(), output);
  }

  // required bool is_send = 3;
  if (has_is_send()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_send(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Friend_Ap_Opearate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->friends(i), target);
  }

  // required uint64 your_guid = 2;
  if (has_your_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->your_guid(), target);
  }

  // required bool is_send = 3;
  if (has_is_send()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_send(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Friend_Ap_Opearate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint64 your_guid = 2;
    if (has_your_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->your_guid());
    }

    // required bool is_send = 3;
    if (has_is_send()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint64 friends = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->friends_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->friends(i));
    }
    total_size += 1 * this->friends_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Friend_Ap_Opearate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Friend_Ap_Opearate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Friend_Ap_Opearate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Friend_Ap_Opearate::MergeFrom(const C2GS_Friend_Ap_Opearate& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_your_guid()) {
      set_your_guid(from.your_guid());
    }
    if (from.has_is_send()) {
      set_is_send(from.is_send());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Friend_Ap_Opearate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Friend_Ap_Opearate::CopyFrom(const C2GS_Friend_Ap_Opearate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Friend_Ap_Opearate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void C2GS_Friend_Ap_Opearate::Swap(C2GS_Friend_Ap_Opearate* other) {
  if (other != this) {
    friends_.Swap(&other->friends_);
    std::swap(your_guid_, other->your_guid_);
    std::swap(is_send_, other->is_send_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Friend_Ap_Opearate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Friend_Ap_Opearate_descriptor_;
  metadata.reflection = C2GS_Friend_Ap_Opearate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Friend_Ap_Opearate_Res_opt_result::kOptIdFieldNumber;
const int GS2C_Friend_Ap_Opearate_Res_opt_result::kIsSucceedFieldNumber;
#endif  // !_MSC_VER

GS2C_Friend_Ap_Opearate_Res_opt_result::GS2C_Friend_Ap_Opearate_Res_opt_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Friend_Ap_Opearate_Res_opt_result::InitAsDefaultInstance() {
}

GS2C_Friend_Ap_Opearate_Res_opt_result::GS2C_Friend_Ap_Opearate_Res_opt_result(const GS2C_Friend_Ap_Opearate_Res_opt_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Friend_Ap_Opearate_Res_opt_result::SharedCtor() {
  _cached_size_ = 0;
  opt_id_ = GOOGLE_ULONGLONG(0);
  is_succeed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Friend_Ap_Opearate_Res_opt_result::~GS2C_Friend_Ap_Opearate_Res_opt_result() {
  SharedDtor();
}

void GS2C_Friend_Ap_Opearate_Res_opt_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Friend_Ap_Opearate_Res_opt_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Friend_Ap_Opearate_Res_opt_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Friend_Ap_Opearate_Res_opt_result_descriptor_;
}

const GS2C_Friend_Ap_Opearate_Res_opt_result& GS2C_Friend_Ap_Opearate_Res_opt_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GS2C_Friend_Ap_Opearate_Res_opt_result* GS2C_Friend_Ap_Opearate_Res_opt_result::default_instance_ = NULL;

GS2C_Friend_Ap_Opearate_Res_opt_result* GS2C_Friend_Ap_Opearate_Res_opt_result::New() const {
  return new GS2C_Friend_Ap_Opearate_Res_opt_result;
}

void GS2C_Friend_Ap_Opearate_Res_opt_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opt_id_ = GOOGLE_ULONGLONG(0);
    is_succeed_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Friend_Ap_Opearate_Res_opt_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 opt_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &opt_id_)));
          set_has_opt_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_succeed;
        break;
      }

      // required bool is_succeed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_succeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_succeed_)));
          set_has_is_succeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Friend_Ap_Opearate_Res_opt_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 opt_id = 1;
  if (has_opt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->opt_id(), output);
  }

  // required bool is_succeed = 2;
  if (has_is_succeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_succeed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Friend_Ap_Opearate_Res_opt_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 opt_id = 1;
  if (has_opt_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->opt_id(), target);
  }

  // required bool is_succeed = 2;
  if (has_is_succeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_succeed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Friend_Ap_Opearate_Res_opt_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 opt_id = 1;
    if (has_opt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->opt_id());
    }

    // required bool is_succeed = 2;
    if (has_is_succeed()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Friend_Ap_Opearate_Res_opt_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Friend_Ap_Opearate_Res_opt_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Friend_Ap_Opearate_Res_opt_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Friend_Ap_Opearate_Res_opt_result::MergeFrom(const GS2C_Friend_Ap_Opearate_Res_opt_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt_id()) {
      set_opt_id(from.opt_id());
    }
    if (from.has_is_succeed()) {
      set_is_succeed(from.is_succeed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Friend_Ap_Opearate_Res_opt_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Friend_Ap_Opearate_Res_opt_result::CopyFrom(const GS2C_Friend_Ap_Opearate_Res_opt_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Friend_Ap_Opearate_Res_opt_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GS2C_Friend_Ap_Opearate_Res_opt_result::Swap(GS2C_Friend_Ap_Opearate_Res_opt_result* other) {
  if (other != this) {
    std::swap(opt_id_, other->opt_id_);
    std::swap(is_succeed_, other->is_succeed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Friend_Ap_Opearate_Res_opt_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Friend_Ap_Opearate_Res_opt_result_descriptor_;
  metadata.reflection = GS2C_Friend_Ap_Opearate_Res_opt_result_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GS2C_Friend_Ap_Opearate_Res::kOpInfosFieldNumber;
const int GS2C_Friend_Ap_Opearate_Res::kYourGuidFieldNumber;
const int GS2C_Friend_Ap_Opearate_Res::kIsSendFieldNumber;
#endif  // !_MSC_VER

GS2C_Friend_Ap_Opearate_Res::GS2C_Friend_Ap_Opearate_Res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Friend_Ap_Opearate_Res::InitAsDefaultInstance() {
}

GS2C_Friend_Ap_Opearate_Res::GS2C_Friend_Ap_Opearate_Res(const GS2C_Friend_Ap_Opearate_Res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Friend_Ap_Opearate_Res::SharedCtor() {
  _cached_size_ = 0;
  your_guid_ = GOOGLE_ULONGLONG(0);
  is_send_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Friend_Ap_Opearate_Res::~GS2C_Friend_Ap_Opearate_Res() {
  SharedDtor();
}

void GS2C_Friend_Ap_Opearate_Res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Friend_Ap_Opearate_Res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Friend_Ap_Opearate_Res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Friend_Ap_Opearate_Res_descriptor_;
}

const GS2C_Friend_Ap_Opearate_Res& GS2C_Friend_Ap_Opearate_Res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GS2C_Friend_Ap_Opearate_Res* GS2C_Friend_Ap_Opearate_Res::default_instance_ = NULL;

GS2C_Friend_Ap_Opearate_Res* GS2C_Friend_Ap_Opearate_Res::New() const {
  return new GS2C_Friend_Ap_Opearate_Res;
}

void GS2C_Friend_Ap_Opearate_Res::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    your_guid_ = GOOGLE_ULONGLONG(0);
    is_send_ = false;
  }
  op_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Friend_Ap_Opearate_Res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GS2C_Friend_Ap_Opearate_Res.opt_result op_infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_op_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_op_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_op_infos;
        if (input->ExpectTag(16)) goto parse_your_guid;
        break;
      }

      // required uint64 your_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_your_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &your_guid_)));
          set_has_your_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_send;
        break;
      }

      // required bool is_send = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_send:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_send_)));
          set_has_is_send();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Friend_Ap_Opearate_Res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GS2C_Friend_Ap_Opearate_Res.opt_result op_infos = 1;
  for (int i = 0; i < this->op_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->op_infos(i), output);
  }

  // required uint64 your_guid = 2;
  if (has_your_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->your_guid(), output);
  }

  // required bool is_send = 3;
  if (has_is_send()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_send(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Friend_Ap_Opearate_Res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GS2C_Friend_Ap_Opearate_Res.opt_result op_infos = 1;
  for (int i = 0; i < this->op_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->op_infos(i), target);
  }

  // required uint64 your_guid = 2;
  if (has_your_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->your_guid(), target);
  }

  // required bool is_send = 3;
  if (has_is_send()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_send(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Friend_Ap_Opearate_Res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint64 your_guid = 2;
    if (has_your_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->your_guid());
    }

    // required bool is_send = 3;
    if (has_is_send()) {
      total_size += 1 + 1;
    }

  }
  // repeated .pb.GS2C_Friend_Ap_Opearate_Res.opt_result op_infos = 1;
  total_size += 1 * this->op_infos_size();
  for (int i = 0; i < this->op_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->op_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Friend_Ap_Opearate_Res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Friend_Ap_Opearate_Res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Friend_Ap_Opearate_Res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Friend_Ap_Opearate_Res::MergeFrom(const GS2C_Friend_Ap_Opearate_Res& from) {
  GOOGLE_CHECK_NE(&from, this);
  op_infos_.MergeFrom(from.op_infos_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_your_guid()) {
      set_your_guid(from.your_guid());
    }
    if (from.has_is_send()) {
      set_is_send(from.is_send());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Friend_Ap_Opearate_Res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Friend_Ap_Opearate_Res::CopyFrom(const GS2C_Friend_Ap_Opearate_Res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Friend_Ap_Opearate_Res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  for (int i = 0; i < op_infos_size(); i++) {
    if (!this->op_infos(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Friend_Ap_Opearate_Res::Swap(GS2C_Friend_Ap_Opearate_Res* other) {
  if (other != this) {
    op_infos_.Swap(&other->op_infos_);
    std::swap(your_guid_, other->your_guid_);
    std::swap(is_send_, other->is_send_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Friend_Ap_Opearate_Res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Friend_Ap_Opearate_Res_descriptor_;
  metadata.reflection = GS2C_Friend_Ap_Opearate_Res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Friend_list_Record::kFriendNameFieldNumber;
const int Friend_list_Record::kFriendGuidFieldNumber;
const int Friend_list_Record::kHeadIconFieldNumber;
const int Friend_list_Record::kVipLevelFieldNumber;
const int Friend_list_Record::kLevelFieldNumber;
const int Friend_list_Record::kPowerFieldNumber;
const int Friend_list_Record::kGuildNameFieldNumber;
const int Friend_list_Record::kFriendTypeFieldNumber;
const int Friend_list_Record::kIsSendApFieldNumber;
const int Friend_list_Record::kIsReceiveApFieldNumber;
const int Friend_list_Record::kIsOnlineFieldNumber;
const int Friend_list_Record::kLastOnlinTimeFieldNumber;
const int Friend_list_Record::kRequestTimeFieldNumber;
#endif  // !_MSC_VER

Friend_list_Record::Friend_list_Record()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Friend_list_Record::InitAsDefaultInstance() {
}

Friend_list_Record::Friend_list_Record(const Friend_list_Record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Friend_list_Record::SharedCtor() {
  _cached_size_ = 0;
  friend_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  friend_guid_ = GOOGLE_ULONGLONG(0);
  head_icon_ = 0u;
  vip_level_ = 0u;
  level_ = 0u;
  power_ = 0u;
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  friend_type_ = 0u;
  is_send_ap_ = false;
  is_receive_ap_ = false;
  is_online_ = false;
  last_onlin_time_ = GOOGLE_ULONGLONG(0);
  request_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friend_list_Record::~Friend_list_Record() {
  SharedDtor();
}

void Friend_list_Record::SharedDtor() {
  if (friend_name_ != &::google::protobuf::internal::kEmptyString) {
    delete friend_name_;
  }
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (this != default_instance_) {
  }
}

void Friend_list_Record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend_list_Record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_list_Record_descriptor_;
}

const Friend_list_Record& Friend_list_Record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

Friend_list_Record* Friend_list_Record::default_instance_ = NULL;

Friend_list_Record* Friend_list_Record::New() const {
  return new Friend_list_Record;
}

void Friend_list_Record::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_friend_name()) {
      if (friend_name_ != &::google::protobuf::internal::kEmptyString) {
        friend_name_->clear();
      }
    }
    friend_guid_ = GOOGLE_ULONGLONG(0);
    head_icon_ = 0u;
    vip_level_ = 0u;
    level_ = 0u;
    power_ = 0u;
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
    friend_type_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_send_ap_ = false;
    is_receive_ap_ = false;
    is_online_ = false;
    last_onlin_time_ = GOOGLE_ULONGLONG(0);
    request_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Friend_list_Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string friend_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friend_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->friend_name().data(), this->friend_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_friend_guid;
        break;
      }

      // optional uint64 friend_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_guid_)));
          set_has_friend_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_head_icon;
        break;
      }

      // optional uint32 head_icon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_icon_)));
          set_has_head_icon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_power;
        break;
      }

      // optional uint32 power = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_guild_name;
        break;
      }

      // optional string guild_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_friend_type;
        break;
      }

      // optional uint32 friend_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend_type_)));
          set_has_friend_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_is_send_ap;
        break;
      }

      // optional bool is_send_ap = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_send_ap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_send_ap_)));
          set_has_is_send_ap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_is_receive_ap;
        break;
      }

      // optional bool is_receive_ap = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_receive_ap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_receive_ap_)));
          set_has_is_receive_ap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_is_online;
        break;
      }

      // optional bool is_online = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_online_)));
          set_has_is_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_last_onlin_time;
        break;
      }

      // optional uint64 last_onlin_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_onlin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_onlin_time_)));
          set_has_last_onlin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_request_time;
        break;
      }

      // optional uint64 request_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_request_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_time_)));
          set_has_request_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Friend_list_Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string friend_name = 1;
  if (has_friend_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friend_name().data(), this->friend_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->friend_name(), output);
  }

  // optional uint64 friend_guid = 2;
  if (has_friend_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->friend_guid(), output);
  }

  // optional uint32 head_icon = 3;
  if (has_head_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->head_icon(), output);
  }

  // optional uint32 vip_level = 4;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->vip_level(), output);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint32 power = 6;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->power(), output);
  }

  // optional string guild_name = 7;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->guild_name(), output);
  }

  // optional uint32 friend_type = 8;
  if (has_friend_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->friend_type(), output);
  }

  // optional bool is_send_ap = 9;
  if (has_is_send_ap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_send_ap(), output);
  }

  // optional bool is_receive_ap = 10;
  if (has_is_receive_ap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_receive_ap(), output);
  }

  // optional bool is_online = 11;
  if (has_is_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_online(), output);
  }

  // optional uint64 last_onlin_time = 12;
  if (has_last_onlin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->last_onlin_time(), output);
  }

  // optional uint64 request_time = 13;
  if (has_request_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->request_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Friend_list_Record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string friend_name = 1;
  if (has_friend_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friend_name().data(), this->friend_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->friend_name(), target);
  }

  // optional uint64 friend_guid = 2;
  if (has_friend_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->friend_guid(), target);
  }

  // optional uint32 head_icon = 3;
  if (has_head_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->head_icon(), target);
  }

  // optional uint32 vip_level = 4;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->vip_level(), target);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint32 power = 6;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->power(), target);
  }

  // optional string guild_name = 7;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->guild_name(), target);
  }

  // optional uint32 friend_type = 8;
  if (has_friend_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->friend_type(), target);
  }

  // optional bool is_send_ap = 9;
  if (has_is_send_ap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_send_ap(), target);
  }

  // optional bool is_receive_ap = 10;
  if (has_is_receive_ap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_receive_ap(), target);
  }

  // optional bool is_online = 11;
  if (has_is_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_online(), target);
  }

  // optional uint64 last_onlin_time = 12;
  if (has_last_onlin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->last_onlin_time(), target);
  }

  // optional uint64 request_time = 13;
  if (has_request_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->request_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Friend_list_Record::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string friend_name = 1;
    if (has_friend_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friend_name());
    }

    // optional uint64 friend_guid = 2;
    if (has_friend_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_guid());
    }

    // optional uint32 head_icon = 3;
    if (has_head_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_icon());
    }

    // optional uint32 vip_level = 4;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 power = 6;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power());
    }

    // optional string guild_name = 7;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

    // optional uint32 friend_type = 8;
    if (has_friend_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friend_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool is_send_ap = 9;
    if (has_is_send_ap()) {
      total_size += 1 + 1;
    }

    // optional bool is_receive_ap = 10;
    if (has_is_receive_ap()) {
      total_size += 1 + 1;
    }

    // optional bool is_online = 11;
    if (has_is_online()) {
      total_size += 1 + 1;
    }

    // optional uint64 last_onlin_time = 12;
    if (has_last_onlin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_onlin_time());
    }

    // optional uint64 request_time = 13;
    if (has_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend_list_Record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Friend_list_Record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friend_list_Record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friend_list_Record::MergeFrom(const Friend_list_Record& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_name()) {
      set_friend_name(from.friend_name());
    }
    if (from.has_friend_guid()) {
      set_friend_guid(from.friend_guid());
    }
    if (from.has_head_icon()) {
      set_head_icon(from.head_icon());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_friend_type()) {
      set_friend_type(from.friend_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_send_ap()) {
      set_is_send_ap(from.is_send_ap());
    }
    if (from.has_is_receive_ap()) {
      set_is_receive_ap(from.is_receive_ap());
    }
    if (from.has_is_online()) {
      set_is_online(from.is_online());
    }
    if (from.has_last_onlin_time()) {
      set_last_onlin_time(from.last_onlin_time());
    }
    if (from.has_request_time()) {
      set_request_time(from.request_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Friend_list_Record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend_list_Record::CopyFrom(const Friend_list_Record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend_list_Record::IsInitialized() const {

  return true;
}

void Friend_list_Record::Swap(Friend_list_Record* other) {
  if (other != this) {
    std::swap(friend_name_, other->friend_name_);
    std::swap(friend_guid_, other->friend_guid_);
    std::swap(head_icon_, other->head_icon_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(level_, other->level_);
    std::swap(power_, other->power_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(friend_type_, other->friend_type_);
    std::swap(is_send_ap_, other->is_send_ap_);
    std::swap(is_receive_ap_, other->is_receive_ap_);
    std::swap(is_online_, other->is_online_);
    std::swap(last_onlin_time_, other->last_onlin_time_);
    std::swap(request_time_, other->request_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Friend_list_Record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_list_Record_descriptor_;
  metadata.reflection = Friend_list_Record_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_FriendAdd::kAddMethodFieldNumber;
const int C2GS_FriendAdd::kAddNameFieldNumber;
const int C2GS_FriendAdd::kAddGuidFieldNumber;
const int C2GS_FriendAdd::kAddIdFieldNumber;
const int C2GS_FriendAdd::kIsAddFieldNumber;
const int C2GS_FriendAdd::kYourGuidFieldNumber;
const int C2GS_FriendAdd::kRecordFieldNumber;
const int C2GS_FriendAdd::kIsFromAddPannelFieldNumber;
#endif  // !_MSC_VER

C2GS_FriendAdd::C2GS_FriendAdd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_FriendAdd::InitAsDefaultInstance() {
  record_ = const_cast< ::pb::Friend_list_Record*>(&::pb::Friend_list_Record::default_instance());
}

C2GS_FriendAdd::C2GS_FriendAdd(const C2GS_FriendAdd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_FriendAdd::SharedCtor() {
  _cached_size_ = 0;
  add_method_ = 0u;
  add_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  add_guid_ = GOOGLE_ULONGLONG(0);
  add_id_ = 0u;
  is_add_ = true;
  your_guid_ = GOOGLE_ULONGLONG(0);
  record_ = NULL;
  is_from_add_pannel_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_FriendAdd::~C2GS_FriendAdd() {
  SharedDtor();
}

void C2GS_FriendAdd::SharedDtor() {
  if (add_name_ != &::google::protobuf::internal::kEmptyString) {
    delete add_name_;
  }
  if (this != default_instance_) {
    delete record_;
  }
}

void C2GS_FriendAdd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_FriendAdd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_FriendAdd_descriptor_;
}

const C2GS_FriendAdd& C2GS_FriendAdd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

C2GS_FriendAdd* C2GS_FriendAdd::default_instance_ = NULL;

C2GS_FriendAdd* C2GS_FriendAdd::New() const {
  return new C2GS_FriendAdd;
}

void C2GS_FriendAdd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    add_method_ = 0u;
    if (has_add_name()) {
      if (add_name_ != &::google::protobuf::internal::kEmptyString) {
        add_name_->clear();
      }
    }
    add_guid_ = GOOGLE_ULONGLONG(0);
    add_id_ = 0u;
    is_add_ = true;
    your_guid_ = GOOGLE_ULONGLONG(0);
    if (has_record()) {
      if (record_ != NULL) record_->::pb::Friend_list_Record::Clear();
    }
    is_from_add_pannel_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_FriendAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 add_method = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_method_)));
          set_has_add_method();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_add_name;
        break;
      }

      // optional string add_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_add_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_add_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->add_name().data(), this->add_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_add_guid;
        break;
      }

      // optional uint64 add_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &add_guid_)));
          set_has_add_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_add_id;
        break;
      }

      // optional uint32 add_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_id_)));
          set_has_add_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_add;
        break;
      }

      // required bool is_add = 5 [default = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_add_)));
          set_has_is_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_your_guid;
        break;
      }

      // required uint64 your_guid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_your_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &your_guid_)));
          set_has_your_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_record;
        break;
      }

      // optional .pb.Friend_list_Record record = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_is_from_add_pannel;
        break;
      }

      // optional bool is_from_add_pannel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_from_add_pannel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_from_add_pannel_)));
          set_has_is_from_add_pannel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_FriendAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 add_method = 1;
  if (has_add_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->add_method(), output);
  }

  // optional string add_name = 2;
  if (has_add_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->add_name().data(), this->add_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->add_name(), output);
  }

  // optional uint64 add_guid = 3;
  if (has_add_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->add_guid(), output);
  }

  // optional uint32 add_id = 4;
  if (has_add_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->add_id(), output);
  }

  // required bool is_add = 5 [default = true];
  if (has_is_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_add(), output);
  }

  // required uint64 your_guid = 6;
  if (has_your_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->your_guid(), output);
  }

  // optional .pb.Friend_list_Record record = 7;
  if (has_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->record(), output);
  }

  // optional bool is_from_add_pannel = 8;
  if (has_is_from_add_pannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_from_add_pannel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_FriendAdd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 add_method = 1;
  if (has_add_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->add_method(), target);
  }

  // optional string add_name = 2;
  if (has_add_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->add_name().data(), this->add_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->add_name(), target);
  }

  // optional uint64 add_guid = 3;
  if (has_add_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->add_guid(), target);
  }

  // optional uint32 add_id = 4;
  if (has_add_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->add_id(), target);
  }

  // required bool is_add = 5 [default = true];
  if (has_is_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_add(), target);
  }

  // required uint64 your_guid = 6;
  if (has_your_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->your_guid(), target);
  }

  // optional .pb.Friend_list_Record record = 7;
  if (has_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->record(), target);
  }

  // optional bool is_from_add_pannel = 8;
  if (has_is_from_add_pannel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_from_add_pannel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_FriendAdd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 add_method = 1;
    if (has_add_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_method());
    }

    // optional string add_name = 2;
    if (has_add_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->add_name());
    }

    // optional uint64 add_guid = 3;
    if (has_add_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->add_guid());
    }

    // optional uint32 add_id = 4;
    if (has_add_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_id());
    }

    // required bool is_add = 5 [default = true];
    if (has_is_add()) {
      total_size += 1 + 1;
    }

    // required uint64 your_guid = 6;
    if (has_your_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->your_guid());
    }

    // optional .pb.Friend_list_Record record = 7;
    if (has_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record());
    }

    // optional bool is_from_add_pannel = 8;
    if (has_is_from_add_pannel()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_FriendAdd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_FriendAdd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_FriendAdd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_FriendAdd::MergeFrom(const C2GS_FriendAdd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_add_method()) {
      set_add_method(from.add_method());
    }
    if (from.has_add_name()) {
      set_add_name(from.add_name());
    }
    if (from.has_add_guid()) {
      set_add_guid(from.add_guid());
    }
    if (from.has_add_id()) {
      set_add_id(from.add_id());
    }
    if (from.has_is_add()) {
      set_is_add(from.is_add());
    }
    if (from.has_your_guid()) {
      set_your_guid(from.your_guid());
    }
    if (from.has_record()) {
      mutable_record()->::pb::Friend_list_Record::MergeFrom(from.record());
    }
    if (from.has_is_from_add_pannel()) {
      set_is_from_add_pannel(from.is_from_add_pannel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_FriendAdd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_FriendAdd::CopyFrom(const C2GS_FriendAdd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_FriendAdd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000031) != 0x00000031) return false;

  return true;
}

void C2GS_FriendAdd::Swap(C2GS_FriendAdd* other) {
  if (other != this) {
    std::swap(add_method_, other->add_method_);
    std::swap(add_name_, other->add_name_);
    std::swap(add_guid_, other->add_guid_);
    std::swap(add_id_, other->add_id_);
    std::swap(is_add_, other->is_add_);
    std::swap(your_guid_, other->your_guid_);
    std::swap(record_, other->record_);
    std::swap(is_from_add_pannel_, other->is_from_add_pannel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_FriendAdd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_FriendAdd_descriptor_;
  metadata.reflection = C2GS_FriendAdd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_FriendAdd_Result::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GS2C_FriendAdd_Result::GS2C_FriendAdd_Result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_FriendAdd_Result::InitAsDefaultInstance() {
}

GS2C_FriendAdd_Result::GS2C_FriendAdd_Result(const GS2C_FriendAdd_Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_FriendAdd_Result::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_FriendAdd_Result::~GS2C_FriendAdd_Result() {
  SharedDtor();
}

void GS2C_FriendAdd_Result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_FriendAdd_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_FriendAdd_Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_FriendAdd_Result_descriptor_;
}

const GS2C_FriendAdd_Result& GS2C_FriendAdd_Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GS2C_FriendAdd_Result* GS2C_FriendAdd_Result::default_instance_ = NULL;

GS2C_FriendAdd_Result* GS2C_FriendAdd_Result::New() const {
  return new GS2C_FriendAdd_Result;
}

void GS2C_FriendAdd_Result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_FriendAdd_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 errorCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_FriendAdd_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 errorCode = 1;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_FriendAdd_Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 errorCode = 1;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_FriendAdd_Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 errorCode = 1;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_FriendAdd_Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_FriendAdd_Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_FriendAdd_Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_FriendAdd_Result::MergeFrom(const GS2C_FriendAdd_Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_FriendAdd_Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_FriendAdd_Result::CopyFrom(const GS2C_FriendAdd_Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_FriendAdd_Result::IsInitialized() const {

  return true;
}

void GS2C_FriendAdd_Result::Swap(GS2C_FriendAdd_Result* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_FriendAdd_Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_FriendAdd_Result_descriptor_;
  metadata.reflection = GS2C_FriendAdd_Result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_FriendAdd_Respon::kIsAcceptFieldNumber;
const int C2GS_FriendAdd_Respon::kRecordFieldNumber;
const int C2GS_FriendAdd_Respon::kYourGuidFieldNumber;
#endif  // !_MSC_VER

C2GS_FriendAdd_Respon::C2GS_FriendAdd_Respon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_FriendAdd_Respon::InitAsDefaultInstance() {
  record_ = const_cast< ::pb::Friend_list_Record*>(&::pb::Friend_list_Record::default_instance());
}

C2GS_FriendAdd_Respon::C2GS_FriendAdd_Respon(const C2GS_FriendAdd_Respon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_FriendAdd_Respon::SharedCtor() {
  _cached_size_ = 0;
  is_accept_ = false;
  record_ = NULL;
  your_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_FriendAdd_Respon::~C2GS_FriendAdd_Respon() {
  SharedDtor();
}

void C2GS_FriendAdd_Respon::SharedDtor() {
  if (this != default_instance_) {
    delete record_;
  }
}

void C2GS_FriendAdd_Respon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_FriendAdd_Respon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_FriendAdd_Respon_descriptor_;
}

const C2GS_FriendAdd_Respon& C2GS_FriendAdd_Respon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

C2GS_FriendAdd_Respon* C2GS_FriendAdd_Respon::default_instance_ = NULL;

C2GS_FriendAdd_Respon* C2GS_FriendAdd_Respon::New() const {
  return new C2GS_FriendAdd_Respon;
}

void C2GS_FriendAdd_Respon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_accept_ = false;
    if (has_record()) {
      if (record_ != NULL) record_->::pb::Friend_list_Record::Clear();
    }
    your_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_FriendAdd_Respon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_accept = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_accept_)));
          set_has_is_accept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_record;
        break;
      }

      // required .pb.Friend_list_Record record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_your_guid;
        break;
      }

      // required uint64 your_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_your_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &your_guid_)));
          set_has_your_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_FriendAdd_Respon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_accept = 1;
  if (has_is_accept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_accept(), output);
  }

  // required .pb.Friend_list_Record record = 2;
  if (has_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->record(), output);
  }

  // required uint64 your_guid = 3;
  if (has_your_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->your_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_FriendAdd_Respon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_accept = 1;
  if (has_is_accept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_accept(), target);
  }

  // required .pb.Friend_list_Record record = 2;
  if (has_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->record(), target);
  }

  // required uint64 your_guid = 3;
  if (has_your_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->your_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_FriendAdd_Respon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_accept = 1;
    if (has_is_accept()) {
      total_size += 1 + 1;
    }

    // required .pb.Friend_list_Record record = 2;
    if (has_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record());
    }

    // required uint64 your_guid = 3;
    if (has_your_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->your_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_FriendAdd_Respon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_FriendAdd_Respon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_FriendAdd_Respon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_FriendAdd_Respon::MergeFrom(const C2GS_FriendAdd_Respon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_accept()) {
      set_is_accept(from.is_accept());
    }
    if (from.has_record()) {
      mutable_record()->::pb::Friend_list_Record::MergeFrom(from.record());
    }
    if (from.has_your_guid()) {
      set_your_guid(from.your_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_FriendAdd_Respon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_FriendAdd_Respon::CopyFrom(const C2GS_FriendAdd_Respon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_FriendAdd_Respon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void C2GS_FriendAdd_Respon::Swap(C2GS_FriendAdd_Respon* other) {
  if (other != this) {
    std::swap(is_accept_, other->is_accept_);
    std::swap(record_, other->record_);
    std::swap(your_guid_, other->your_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_FriendAdd_Respon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_FriendAdd_Respon_descriptor_;
  metadata.reflection = C2GS_FriendAdd_Respon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_FriendAdd_Respon::kIsAcceptFieldNumber;
const int GS2C_FriendAdd_Respon::kRecordFieldNumber;
const int GS2C_FriendAdd_Respon::kErrorCodeFieldNumber;
const int GS2C_FriendAdd_Respon::kIsAddFieldNumber;
const int GS2C_FriendAdd_Respon::kIsReplyFieldNumber;
#endif  // !_MSC_VER

GS2C_FriendAdd_Respon::GS2C_FriendAdd_Respon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_FriendAdd_Respon::InitAsDefaultInstance() {
  record_ = const_cast< ::pb::Friend_list_Record*>(&::pb::Friend_list_Record::default_instance());
}

GS2C_FriendAdd_Respon::GS2C_FriendAdd_Respon(const GS2C_FriendAdd_Respon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_FriendAdd_Respon::SharedCtor() {
  _cached_size_ = 0;
  is_accept_ = true;
  record_ = NULL;
  errorcode_ = 0u;
  is_add_ = true;
  is_reply_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_FriendAdd_Respon::~GS2C_FriendAdd_Respon() {
  SharedDtor();
}

void GS2C_FriendAdd_Respon::SharedDtor() {
  if (this != default_instance_) {
    delete record_;
  }
}

void GS2C_FriendAdd_Respon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_FriendAdd_Respon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_FriendAdd_Respon_descriptor_;
}

const GS2C_FriendAdd_Respon& GS2C_FriendAdd_Respon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GS2C_FriendAdd_Respon* GS2C_FriendAdd_Respon::default_instance_ = NULL;

GS2C_FriendAdd_Respon* GS2C_FriendAdd_Respon::New() const {
  return new GS2C_FriendAdd_Respon;
}

void GS2C_FriendAdd_Respon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_accept_ = true;
    if (has_record()) {
      if (record_ != NULL) record_->::pb::Friend_list_Record::Clear();
    }
    errorcode_ = 0u;
    is_add_ = true;
    is_reply_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_FriendAdd_Respon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_accept = 1 [default = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_accept_)));
          set_has_is_accept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_record;
        break;
      }

      // optional .pb.Friend_list_Record record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_errorCode;
        break;
      }

      // optional uint32 errorCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_add;
        break;
      }

      // required bool is_add = 4 [default = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_add_)));
          set_has_is_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_reply;
        break;
      }

      // optional bool is_reply = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_reply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_reply_)));
          set_has_is_reply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_FriendAdd_Respon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_accept = 1 [default = true];
  if (has_is_accept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_accept(), output);
  }

  // optional .pb.Friend_list_Record record = 2;
  if (has_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->record(), output);
  }

  // optional uint32 errorCode = 3;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->errorcode(), output);
  }

  // required bool is_add = 4 [default = true];
  if (has_is_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_add(), output);
  }

  // optional bool is_reply = 5 [default = false];
  if (has_is_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_reply(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_FriendAdd_Respon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_accept = 1 [default = true];
  if (has_is_accept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_accept(), target);
  }

  // optional .pb.Friend_list_Record record = 2;
  if (has_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->record(), target);
  }

  // optional uint32 errorCode = 3;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->errorcode(), target);
  }

  // required bool is_add = 4 [default = true];
  if (has_is_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_add(), target);
  }

  // optional bool is_reply = 5 [default = false];
  if (has_is_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_reply(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_FriendAdd_Respon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_accept = 1 [default = true];
    if (has_is_accept()) {
      total_size += 1 + 1;
    }

    // optional .pb.Friend_list_Record record = 2;
    if (has_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record());
    }

    // optional uint32 errorCode = 3;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

    // required bool is_add = 4 [default = true];
    if (has_is_add()) {
      total_size += 1 + 1;
    }

    // optional bool is_reply = 5 [default = false];
    if (has_is_reply()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_FriendAdd_Respon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_FriendAdd_Respon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_FriendAdd_Respon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_FriendAdd_Respon::MergeFrom(const GS2C_FriendAdd_Respon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_accept()) {
      set_is_accept(from.is_accept());
    }
    if (from.has_record()) {
      mutable_record()->::pb::Friend_list_Record::MergeFrom(from.record());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_is_add()) {
      set_is_add(from.is_add());
    }
    if (from.has_is_reply()) {
      set_is_reply(from.is_reply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_FriendAdd_Respon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_FriendAdd_Respon::CopyFrom(const GS2C_FriendAdd_Respon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_FriendAdd_Respon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  return true;
}

void GS2C_FriendAdd_Respon::Swap(GS2C_FriendAdd_Respon* other) {
  if (other != this) {
    std::swap(is_accept_, other->is_accept_);
    std::swap(record_, other->record_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(is_add_, other->is_add_);
    std::swap(is_reply_, other->is_reply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_FriendAdd_Respon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_FriendAdd_Respon_descriptor_;
  metadata.reflection = GS2C_FriendAdd_Respon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_FriendDel::kDelGuidFieldNumber;
const int C2GS_FriendDel::kIsForFriendListFieldNumber;
const int C2GS_FriendDel::kYourGuidFieldNumber;
#endif  // !_MSC_VER

C2GS_FriendDel::C2GS_FriendDel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_FriendDel::InitAsDefaultInstance() {
}

C2GS_FriendDel::C2GS_FriendDel(const C2GS_FriendDel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_FriendDel::SharedCtor() {
  _cached_size_ = 0;
  del_guid_ = GOOGLE_ULONGLONG(0);
  is_for_friend_list_ = true;
  your_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_FriendDel::~C2GS_FriendDel() {
  SharedDtor();
}

void C2GS_FriendDel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_FriendDel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_FriendDel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_FriendDel_descriptor_;
}

const C2GS_FriendDel& C2GS_FriendDel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

C2GS_FriendDel* C2GS_FriendDel::default_instance_ = NULL;

C2GS_FriendDel* C2GS_FriendDel::New() const {
  return new C2GS_FriendDel;
}

void C2GS_FriendDel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    del_guid_ = GOOGLE_ULONGLONG(0);
    is_for_friend_list_ = true;
    your_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_FriendDel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 del_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &del_guid_)));
          set_has_del_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_for_friend_list;
        break;
      }

      // required bool is_for_friend_list = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_for_friend_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_for_friend_list_)));
          set_has_is_for_friend_list();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_your_guid;
        break;
      }

      // required uint64 your_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_your_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &your_guid_)));
          set_has_your_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_FriendDel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 del_guid = 1;
  if (has_del_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->del_guid(), output);
  }

  // required bool is_for_friend_list = 2 [default = true];
  if (has_is_for_friend_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_for_friend_list(), output);
  }

  // required uint64 your_guid = 3;
  if (has_your_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->your_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_FriendDel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 del_guid = 1;
  if (has_del_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->del_guid(), target);
  }

  // required bool is_for_friend_list = 2 [default = true];
  if (has_is_for_friend_list()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_for_friend_list(), target);
  }

  // required uint64 your_guid = 3;
  if (has_your_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->your_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_FriendDel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 del_guid = 1;
    if (has_del_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->del_guid());
    }

    // required bool is_for_friend_list = 2 [default = true];
    if (has_is_for_friend_list()) {
      total_size += 1 + 1;
    }

    // required uint64 your_guid = 3;
    if (has_your_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->your_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_FriendDel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_FriendDel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_FriendDel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_FriendDel::MergeFrom(const C2GS_FriendDel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_del_guid()) {
      set_del_guid(from.del_guid());
    }
    if (from.has_is_for_friend_list()) {
      set_is_for_friend_list(from.is_for_friend_list());
    }
    if (from.has_your_guid()) {
      set_your_guid(from.your_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_FriendDel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_FriendDel::CopyFrom(const C2GS_FriendDel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_FriendDel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void C2GS_FriendDel::Swap(C2GS_FriendDel* other) {
  if (other != this) {
    std::swap(del_guid_, other->del_guid_);
    std::swap(is_for_friend_list_, other->is_for_friend_list_);
    std::swap(your_guid_, other->your_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_FriendDel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_FriendDel_descriptor_;
  metadata.reflection = C2GS_FriendDel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_FriendDel_Respon::kIsSuscessFieldNumber;
const int GS2C_FriendDel_Respon::kIsForFriendListFieldNumber;
const int GS2C_FriendDel_Respon::kFriendGuidFieldNumber;
#endif  // !_MSC_VER

GS2C_FriendDel_Respon::GS2C_FriendDel_Respon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_FriendDel_Respon::InitAsDefaultInstance() {
}

GS2C_FriendDel_Respon::GS2C_FriendDel_Respon(const GS2C_FriendDel_Respon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_FriendDel_Respon::SharedCtor() {
  _cached_size_ = 0;
  is_suscess_ = false;
  is_for_friend_list_ = true;
  friend_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_FriendDel_Respon::~GS2C_FriendDel_Respon() {
  SharedDtor();
}

void GS2C_FriendDel_Respon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_FriendDel_Respon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_FriendDel_Respon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_FriendDel_Respon_descriptor_;
}

const GS2C_FriendDel_Respon& GS2C_FriendDel_Respon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GS2C_FriendDel_Respon* GS2C_FriendDel_Respon::default_instance_ = NULL;

GS2C_FriendDel_Respon* GS2C_FriendDel_Respon::New() const {
  return new GS2C_FriendDel_Respon;
}

void GS2C_FriendDel_Respon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_suscess_ = false;
    is_for_friend_list_ = true;
    friend_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_FriendDel_Respon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_suscess = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_suscess_)));
          set_has_is_suscess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_for_friend_list;
        break;
      }

      // required bool is_for_friend_list = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_for_friend_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_for_friend_list_)));
          set_has_is_for_friend_list();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_friend_guid;
        break;
      }

      // optional uint64 friend_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_guid_)));
          set_has_friend_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_FriendDel_Respon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_suscess = 1;
  if (has_is_suscess()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_suscess(), output);
  }

  // required bool is_for_friend_list = 2 [default = true];
  if (has_is_for_friend_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_for_friend_list(), output);
  }

  // optional uint64 friend_guid = 3;
  if (has_friend_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->friend_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_FriendDel_Respon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_suscess = 1;
  if (has_is_suscess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_suscess(), target);
  }

  // required bool is_for_friend_list = 2 [default = true];
  if (has_is_for_friend_list()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_for_friend_list(), target);
  }

  // optional uint64 friend_guid = 3;
  if (has_friend_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->friend_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_FriendDel_Respon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_suscess = 1;
    if (has_is_suscess()) {
      total_size += 1 + 1;
    }

    // required bool is_for_friend_list = 2 [default = true];
    if (has_is_for_friend_list()) {
      total_size += 1 + 1;
    }

    // optional uint64 friend_guid = 3;
    if (has_friend_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friend_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_FriendDel_Respon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_FriendDel_Respon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_FriendDel_Respon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_FriendDel_Respon::MergeFrom(const GS2C_FriendDel_Respon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_suscess()) {
      set_is_suscess(from.is_suscess());
    }
    if (from.has_is_for_friend_list()) {
      set_is_for_friend_list(from.is_for_friend_list());
    }
    if (from.has_friend_guid()) {
      set_friend_guid(from.friend_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_FriendDel_Respon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_FriendDel_Respon::CopyFrom(const GS2C_FriendDel_Respon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_FriendDel_Respon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GS2C_FriendDel_Respon::Swap(GS2C_FriendDel_Respon* other) {
  if (other != this) {
    std::swap(is_suscess_, other->is_suscess_);
    std::swap(is_for_friend_list_, other->is_for_friend_list_);
    std::swap(friend_guid_, other->friend_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_FriendDel_Respon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_FriendDel_Respon_descriptor_;
  metadata.reflection = GS2C_FriendDel_Respon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_FriendListInfo::kFriendsFieldNumber;
#endif  // !_MSC_VER

GS2C_FriendListInfo::GS2C_FriendListInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_FriendListInfo::InitAsDefaultInstance() {
}

GS2C_FriendListInfo::GS2C_FriendListInfo(const GS2C_FriendListInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_FriendListInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_FriendListInfo::~GS2C_FriendListInfo() {
  SharedDtor();
}

void GS2C_FriendListInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_FriendListInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_FriendListInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_FriendListInfo_descriptor_;
}

const GS2C_FriendListInfo& GS2C_FriendListInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GS2C_FriendListInfo* GS2C_FriendListInfo::default_instance_ = NULL;

GS2C_FriendListInfo* GS2C_FriendListInfo::New() const {
  return new GS2C_FriendListInfo;
}

void GS2C_FriendListInfo::Clear() {
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_FriendListInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Friend_list_Record friends = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friends;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_FriendListInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.Friend_list_Record friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friends(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_FriendListInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.Friend_list_Record friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friends(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_FriendListInfo::ByteSize() const {
  int total_size = 0;

  // repeated .pb.Friend_list_Record friends = 1;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_FriendListInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_FriendListInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_FriendListInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_FriendListInfo::MergeFrom(const GS2C_FriendListInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_FriendListInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_FriendListInfo::CopyFrom(const GS2C_FriendListInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_FriendListInfo::IsInitialized() const {

  return true;
}

void GS2C_FriendListInfo::Swap(GS2C_FriendListInfo* other) {
  if (other != this) {
    friends_.Swap(&other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_FriendListInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_FriendListInfo_descriptor_;
  metadata.reflection = GS2C_FriendListInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Friend_Search::kSearchTypeFieldNumber;
const int C2GS_Friend_Search::kIsSearchByNameFieldNumber;
const int C2GS_Friend_Search::kSearchNameFieldNumber;
const int C2GS_Friend_Search::kSearchIdFieldNumber;
const int C2GS_Friend_Search::kYourGuidFieldNumber;
const int C2GS_Friend_Search::kMaxCountFieldNumber;
#endif  // !_MSC_VER

C2GS_Friend_Search::C2GS_Friend_Search()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Friend_Search::InitAsDefaultInstance() {
}

C2GS_Friend_Search::C2GS_Friend_Search(const C2GS_Friend_Search& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Friend_Search::SharedCtor() {
  _cached_size_ = 0;
  search_type_ = 0u;
  is_search_by_name_ = false;
  search_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  search_id_ = GOOGLE_ULONGLONG(0);
  your_guid_ = GOOGLE_ULONGLONG(0);
  max_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Friend_Search::~C2GS_Friend_Search() {
  SharedDtor();
}

void C2GS_Friend_Search::SharedDtor() {
  if (search_name_ != &::google::protobuf::internal::kEmptyString) {
    delete search_name_;
  }
  if (this != default_instance_) {
  }
}

void C2GS_Friend_Search::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Friend_Search::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Friend_Search_descriptor_;
}

const C2GS_Friend_Search& C2GS_Friend_Search::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

C2GS_Friend_Search* C2GS_Friend_Search::default_instance_ = NULL;

C2GS_Friend_Search* C2GS_Friend_Search::New() const {
  return new C2GS_Friend_Search;
}

void C2GS_Friend_Search::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    search_type_ = 0u;
    is_search_by_name_ = false;
    if (has_search_name()) {
      if (search_name_ != &::google::protobuf::internal::kEmptyString) {
        search_name_->clear();
      }
    }
    search_id_ = GOOGLE_ULONGLONG(0);
    your_guid_ = GOOGLE_ULONGLONG(0);
    max_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Friend_Search::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 search_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &search_type_)));
          set_has_search_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_search_by_name;
        break;
      }

      // optional bool is_search_by_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_search_by_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_search_by_name_)));
          set_has_is_search_by_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_search_name;
        break;
      }

      // optional string search_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_search_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->search_name().data(), this->search_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_search_id;
        break;
      }

      // optional uint64 search_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_search_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &search_id_)));
          set_has_search_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_your_guid;
        break;
      }

      // optional uint64 your_guid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_your_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &your_guid_)));
          set_has_your_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_count;
        break;
      }

      // optional uint32 max_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_count_)));
          set_has_max_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Friend_Search::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 search_type = 1;
  if (has_search_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->search_type(), output);
  }

  // optional bool is_search_by_name = 2;
  if (has_is_search_by_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_search_by_name(), output);
  }

  // optional string search_name = 3;
  if (has_search_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->search_name().data(), this->search_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->search_name(), output);
  }

  // optional uint64 search_id = 4;
  if (has_search_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->search_id(), output);
  }

  // optional uint64 your_guid = 5;
  if (has_your_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->your_guid(), output);
  }

  // optional uint32 max_count = 6;
  if (has_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->max_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Friend_Search::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 search_type = 1;
  if (has_search_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->search_type(), target);
  }

  // optional bool is_search_by_name = 2;
  if (has_is_search_by_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_search_by_name(), target);
  }

  // optional string search_name = 3;
  if (has_search_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->search_name().data(), this->search_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->search_name(), target);
  }

  // optional uint64 search_id = 4;
  if (has_search_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->search_id(), target);
  }

  // optional uint64 your_guid = 5;
  if (has_your_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->your_guid(), target);
  }

  // optional uint32 max_count = 6;
  if (has_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->max_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Friend_Search::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 search_type = 1;
    if (has_search_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->search_type());
    }

    // optional bool is_search_by_name = 2;
    if (has_is_search_by_name()) {
      total_size += 1 + 1;
    }

    // optional string search_name = 3;
    if (has_search_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_name());
    }

    // optional uint64 search_id = 4;
    if (has_search_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->search_id());
    }

    // optional uint64 your_guid = 5;
    if (has_your_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->your_guid());
    }

    // optional uint32 max_count = 6;
    if (has_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Friend_Search::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Friend_Search* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Friend_Search*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Friend_Search::MergeFrom(const C2GS_Friend_Search& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_search_type()) {
      set_search_type(from.search_type());
    }
    if (from.has_is_search_by_name()) {
      set_is_search_by_name(from.is_search_by_name());
    }
    if (from.has_search_name()) {
      set_search_name(from.search_name());
    }
    if (from.has_search_id()) {
      set_search_id(from.search_id());
    }
    if (from.has_your_guid()) {
      set_your_guid(from.your_guid());
    }
    if (from.has_max_count()) {
      set_max_count(from.max_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Friend_Search::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Friend_Search::CopyFrom(const C2GS_Friend_Search& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Friend_Search::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Friend_Search::Swap(C2GS_Friend_Search* other) {
  if (other != this) {
    std::swap(search_type_, other->search_type_);
    std::swap(is_search_by_name_, other->is_search_by_name_);
    std::swap(search_name_, other->search_name_);
    std::swap(search_id_, other->search_id_);
    std::swap(your_guid_, other->your_guid_);
    std::swap(max_count_, other->max_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Friend_Search::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Friend_Search_descriptor_;
  metadata.reflection = C2GS_Friend_Search_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Friend_Search_Respone::kSearchResultFieldNumber;
const int GS2C_Friend_Search_Respone::kSearchPlayersFieldNumber;
const int GS2C_Friend_Search_Respone::kYourGuidFieldNumber;
#endif  // !_MSC_VER

GS2C_Friend_Search_Respone::GS2C_Friend_Search_Respone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Friend_Search_Respone::InitAsDefaultInstance() {
}

GS2C_Friend_Search_Respone::GS2C_Friend_Search_Respone(const GS2C_Friend_Search_Respone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Friend_Search_Respone::SharedCtor() {
  _cached_size_ = 0;
  search_result_ = 0u;
  your_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Friend_Search_Respone::~GS2C_Friend_Search_Respone() {
  SharedDtor();
}

void GS2C_Friend_Search_Respone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Friend_Search_Respone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Friend_Search_Respone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Friend_Search_Respone_descriptor_;
}

const GS2C_Friend_Search_Respone& GS2C_Friend_Search_Respone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GS2C_Friend_Search_Respone* GS2C_Friend_Search_Respone::default_instance_ = NULL;

GS2C_Friend_Search_Respone* GS2C_Friend_Search_Respone::New() const {
  return new GS2C_Friend_Search_Respone;
}

void GS2C_Friend_Search_Respone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    search_result_ = 0u;
    your_guid_ = GOOGLE_ULONGLONG(0);
  }
  search_players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Friend_Search_Respone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 search_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &search_result_)));
          set_has_search_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_search_players;
        break;
      }

      // repeated .pb.Friend_list_Record search_players = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_search_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_search_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_search_players;
        if (input->ExpectTag(24)) goto parse_your_guid;
        break;
      }

      // optional uint64 your_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_your_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &your_guid_)));
          set_has_your_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Friend_Search_Respone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 search_result = 1;
  if (has_search_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->search_result(), output);
  }

  // repeated .pb.Friend_list_Record search_players = 2;
  for (int i = 0; i < this->search_players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->search_players(i), output);
  }

  // optional uint64 your_guid = 3;
  if (has_your_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->your_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Friend_Search_Respone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 search_result = 1;
  if (has_search_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->search_result(), target);
  }

  // repeated .pb.Friend_list_Record search_players = 2;
  for (int i = 0; i < this->search_players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->search_players(i), target);
  }

  // optional uint64 your_guid = 3;
  if (has_your_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->your_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Friend_Search_Respone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 search_result = 1;
    if (has_search_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->search_result());
    }

    // optional uint64 your_guid = 3;
    if (has_your_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->your_guid());
    }

  }
  // repeated .pb.Friend_list_Record search_players = 2;
  total_size += 1 * this->search_players_size();
  for (int i = 0; i < this->search_players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->search_players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Friend_Search_Respone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Friend_Search_Respone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Friend_Search_Respone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Friend_Search_Respone::MergeFrom(const GS2C_Friend_Search_Respone& from) {
  GOOGLE_CHECK_NE(&from, this);
  search_players_.MergeFrom(from.search_players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_search_result()) {
      set_search_result(from.search_result());
    }
    if (from.has_your_guid()) {
      set_your_guid(from.your_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Friend_Search_Respone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Friend_Search_Respone::CopyFrom(const GS2C_Friend_Search_Respone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Friend_Search_Respone::IsInitialized() const {

  return true;
}

void GS2C_Friend_Search_Respone::Swap(GS2C_Friend_Search_Respone* other) {
  if (other != this) {
    std::swap(search_result_, other->search_result_);
    search_players_.Swap(&other->search_players_);
    std::swap(your_guid_, other->your_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Friend_Search_Respone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Friend_Search_Respone_descriptor_;
  metadata.reflection = GS2C_Friend_Search_Respone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_FriendInfo::kMyInfoFieldNumber;
const int GxDB_FriendInfo::kFriendListFieldNumber;
const int GxDB_FriendInfo::kSendApIdsFieldNumber;
#endif  // !_MSC_VER

GxDB_FriendInfo::GxDB_FriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_FriendInfo::InitAsDefaultInstance() {
  my_info_ = const_cast< ::pb::Friend_list_Record*>(&::pb::Friend_list_Record::default_instance());
  friend_list_ = const_cast< ::pb::GS2C_FriendListInfo*>(&::pb::GS2C_FriendListInfo::default_instance());
}

GxDB_FriendInfo::GxDB_FriendInfo(const GxDB_FriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_FriendInfo::SharedCtor() {
  _cached_size_ = 0;
  my_info_ = NULL;
  friend_list_ = NULL;
  send_ap_ids_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_FriendInfo::~GxDB_FriendInfo() {
  SharedDtor();
}

void GxDB_FriendInfo::SharedDtor() {
  if (send_ap_ids_ != &::google::protobuf::internal::kEmptyString) {
    delete send_ap_ids_;
  }
  if (this != default_instance_) {
    delete my_info_;
    delete friend_list_;
  }
}

void GxDB_FriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_FriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_FriendInfo_descriptor_;
}

const GxDB_FriendInfo& GxDB_FriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GxDB_FriendInfo* GxDB_FriendInfo::default_instance_ = NULL;

GxDB_FriendInfo* GxDB_FriendInfo::New() const {
  return new GxDB_FriendInfo;
}

void GxDB_FriendInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_my_info()) {
      if (my_info_ != NULL) my_info_->::pb::Friend_list_Record::Clear();
    }
    if (has_friend_list()) {
      if (friend_list_ != NULL) friend_list_->::pb::GS2C_FriendListInfo::Clear();
    }
    if (has_send_ap_ids()) {
      if (send_ap_ids_ != &::google::protobuf::internal::kEmptyString) {
        send_ap_ids_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_FriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.Friend_list_Record my_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_my_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friend_list;
        break;
      }

      // optional .pb.GS2C_FriendListInfo friend_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friend_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_send_ap_ids;
        break;
      }

      // optional string send_ap_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_send_ap_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_send_ap_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->send_ap_ids().data(), this->send_ap_ids().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_FriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.Friend_list_Record my_info = 1;
  if (has_my_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->my_info(), output);
  }

  // optional .pb.GS2C_FriendListInfo friend_list = 2;
  if (has_friend_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friend_list(), output);
  }

  // optional string send_ap_ids = 3;
  if (has_send_ap_ids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->send_ap_ids().data(), this->send_ap_ids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->send_ap_ids(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_FriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.Friend_list_Record my_info = 1;
  if (has_my_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->my_info(), target);
  }

  // optional .pb.GS2C_FriendListInfo friend_list = 2;
  if (has_friend_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->friend_list(), target);
  }

  // optional string send_ap_ids = 3;
  if (has_send_ap_ids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->send_ap_ids().data(), this->send_ap_ids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->send_ap_ids(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_FriendInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.Friend_list_Record my_info = 1;
    if (has_my_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->my_info());
    }

    // optional .pb.GS2C_FriendListInfo friend_list = 2;
    if (has_friend_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friend_list());
    }

    // optional string send_ap_ids = 3;
    if (has_send_ap_ids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->send_ap_ids());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_FriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_FriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_FriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_FriendInfo::MergeFrom(const GxDB_FriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_my_info()) {
      mutable_my_info()->::pb::Friend_list_Record::MergeFrom(from.my_info());
    }
    if (from.has_friend_list()) {
      mutable_friend_list()->::pb::GS2C_FriendListInfo::MergeFrom(from.friend_list());
    }
    if (from.has_send_ap_ids()) {
      set_send_ap_ids(from.send_ap_ids());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_FriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_FriendInfo::CopyFrom(const GxDB_FriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_FriendInfo::IsInitialized() const {

  return true;
}

void GxDB_FriendInfo::Swap(GxDB_FriendInfo* other) {
  if (other != this) {
    std::swap(my_info_, other->my_info_);
    std::swap(friend_list_, other->friend_list_);
    std::swap(send_ap_ids_, other->send_ap_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_FriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_FriendInfo_descriptor_;
  metadata.reflection = GxDB_FriendInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_GuildInfo::kGuildIdFieldNumber;
const int GxDB_GuildInfo::kIconFieldNumber;
const int GxDB_GuildInfo::kNameFieldNumber;
const int GxDB_GuildInfo::kCreateTimeFieldNumber;
const int GxDB_GuildInfo::kLevelFieldNumber;
const int GxDB_GuildInfo::kExpFieldNumber;
const int GxDB_GuildInfo::kPrestigeFieldNumber;
const int GxDB_GuildInfo::kActiveFieldNumber;
const int GxDB_GuildInfo::kNoticeFieldNumber;
const int GxDB_GuildInfo::kNoticeTimeFieldNumber;
const int GxDB_GuildInfo::kNoticeCreaterIdFieldNumber;
const int GxDB_GuildInfo::kNoticeCreaterNameFieldNumber;
const int GxDB_GuildInfo::kGuildOwnerIdFieldNumber;
const int GxDB_GuildInfo::kGuildOwnerNameFieldNumber;
const int GxDB_GuildInfo::kMembersCountFieldNumber;
const int GxDB_GuildInfo::kMembersLimitFieldNumber;
const int GxDB_GuildInfo::kScoreFieldNumber;
const int GxDB_GuildInfo::kLastRankTimeFieldNumber;
const int GxDB_GuildInfo::kLogsFieldNumber;
#endif  // !_MSC_VER

GxDB_GuildInfo::GxDB_GuildInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_GuildInfo::InitAsDefaultInstance() {
  logs_ = const_cast< ::pb::GS2C_Guild_Dynamic_Event_Log*>(&::pb::GS2C_Guild_Dynamic_Event_Log::default_instance());
}

GxDB_GuildInfo::GxDB_GuildInfo(const GxDB_GuildInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_GuildInfo::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = GOOGLE_ULONGLONG(0);
  icon_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  create_time_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  exp_ = 0u;
  prestige_ = 0u;
  active_ = 0u;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  notice_time_ = GOOGLE_ULONGLONG(0);
  notice_creater_id_ = GOOGLE_ULONGLONG(0);
  notice_creater_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guild_owner_id_ = GOOGLE_ULONGLONG(0);
  guild_owner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  members_count_ = 0u;
  members_limit_ = 0u;
  score_ = 0u;
  last_rank_time_ = GOOGLE_ULONGLONG(0);
  logs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_GuildInfo::~GxDB_GuildInfo() {
  SharedDtor();
}

void GxDB_GuildInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice_creater_name_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_creater_name_;
  }
  if (guild_owner_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_owner_name_;
  }
  if (this != default_instance_) {
    delete logs_;
  }
}

void GxDB_GuildInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_GuildInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_GuildInfo_descriptor_;
}

const GxDB_GuildInfo& GxDB_GuildInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GxDB_GuildInfo* GxDB_GuildInfo::default_instance_ = NULL;

GxDB_GuildInfo* GxDB_GuildInfo::New() const {
  return new GxDB_GuildInfo;
}

void GxDB_GuildInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guild_id_ = GOOGLE_ULONGLONG(0);
    icon_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    create_time_ = GOOGLE_ULONGLONG(0);
    level_ = 0u;
    exp_ = 0u;
    prestige_ = 0u;
    active_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    notice_time_ = GOOGLE_ULONGLONG(0);
    notice_creater_id_ = GOOGLE_ULONGLONG(0);
    if (has_notice_creater_name()) {
      if (notice_creater_name_ != &::google::protobuf::internal::kEmptyString) {
        notice_creater_name_->clear();
      }
    }
    guild_owner_id_ = GOOGLE_ULONGLONG(0);
    if (has_guild_owner_name()) {
      if (guild_owner_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_owner_name_->clear();
      }
    }
    members_count_ = 0u;
    members_limit_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    score_ = 0u;
    last_rank_time_ = GOOGLE_ULONGLONG(0);
    if (has_logs()) {
      if (logs_ != NULL) logs_->::pb::GS2C_Guild_Dynamic_Event_Log::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_GuildInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_icon;
        break;
      }

      // required uint32 icon = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &icon_)));
          set_has_icon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_create_time;
        break;
      }

      // optional uint64 create_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_prestige;
        break;
      }

      // optional uint32 prestige = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prestige_)));
          set_has_prestige();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_active;
        break;
      }

      // optional uint32 active = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_notice;
        break;
      }

      // optional string notice = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_notice_time;
        break;
      }

      // optional uint64 notice_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notice_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &notice_time_)));
          set_has_notice_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_notice_creater_id;
        break;
      }

      // optional uint64 notice_creater_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notice_creater_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &notice_creater_id_)));
          set_has_notice_creater_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_notice_creater_name;
        break;
      }

      // optional string notice_creater_name = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice_creater_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice_creater_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice_creater_name().data(), this->notice_creater_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_guild_owner_id;
        break;
      }

      // optional uint64 guild_owner_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_owner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_owner_id_)));
          set_has_guild_owner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_guild_owner_name;
        break;
      }

      // optional string guild_owner_name = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_owner_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_owner_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_owner_name().data(), this->guild_owner_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_members_count;
        break;
      }

      // optional uint32 members_count = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_members_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &members_count_)));
          set_has_members_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_members_limit;
        break;
      }

      // optional uint32 members_limit = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_members_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &members_limit_)));
          set_has_members_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_score;
        break;
      }

      // optional uint32 score = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_last_rank_time;
        break;
      }

      // optional uint64 last_rank_time = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_rank_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_rank_time_)));
          set_has_last_rank_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_logs;
        break;
      }

      // optional .pb.GS2C_Guild_Dynamic_Event_Log logs = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_GuildInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guild_id(), output);
  }

  // required uint32 icon = 2;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->icon(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional uint64 create_time = 4;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->create_time(), output);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint32 exp = 6;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->exp(), output);
  }

  // optional uint32 prestige = 7;
  if (has_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->prestige(), output);
  }

  // optional uint32 active = 8;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->active(), output);
  }

  // optional string notice = 9;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->notice(), output);
  }

  // optional uint64 notice_time = 10;
  if (has_notice_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->notice_time(), output);
  }

  // optional uint64 notice_creater_id = 11;
  if (has_notice_creater_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->notice_creater_id(), output);
  }

  // optional string notice_creater_name = 12;
  if (has_notice_creater_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice_creater_name().data(), this->notice_creater_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->notice_creater_name(), output);
  }

  // optional uint64 guild_owner_id = 13;
  if (has_guild_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->guild_owner_id(), output);
  }

  // optional string guild_owner_name = 14;
  if (has_guild_owner_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_owner_name().data(), this->guild_owner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->guild_owner_name(), output);
  }

  // optional uint32 members_count = 15;
  if (has_members_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->members_count(), output);
  }

  // optional uint32 members_limit = 16;
  if (has_members_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->members_limit(), output);
  }

  // optional uint32 score = 17;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->score(), output);
  }

  // optional uint64 last_rank_time = 18;
  if (has_last_rank_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->last_rank_time(), output);
  }

  // optional .pb.GS2C_Guild_Dynamic_Event_Log logs = 19;
  if (has_logs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->logs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_GuildInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guild_id(), target);
  }

  // required uint32 icon = 2;
  if (has_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->icon(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint64 create_time = 4;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->create_time(), target);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint32 exp = 6;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->exp(), target);
  }

  // optional uint32 prestige = 7;
  if (has_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->prestige(), target);
  }

  // optional uint32 active = 8;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->active(), target);
  }

  // optional string notice = 9;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->notice(), target);
  }

  // optional uint64 notice_time = 10;
  if (has_notice_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->notice_time(), target);
  }

  // optional uint64 notice_creater_id = 11;
  if (has_notice_creater_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->notice_creater_id(), target);
  }

  // optional string notice_creater_name = 12;
  if (has_notice_creater_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice_creater_name().data(), this->notice_creater_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->notice_creater_name(), target);
  }

  // optional uint64 guild_owner_id = 13;
  if (has_guild_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->guild_owner_id(), target);
  }

  // optional string guild_owner_name = 14;
  if (has_guild_owner_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_owner_name().data(), this->guild_owner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->guild_owner_name(), target);
  }

  // optional uint32 members_count = 15;
  if (has_members_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->members_count(), target);
  }

  // optional uint32 members_limit = 16;
  if (has_members_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->members_limit(), target);
  }

  // optional uint32 score = 17;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->score(), target);
  }

  // optional uint64 last_rank_time = 18;
  if (has_last_rank_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->last_rank_time(), target);
  }

  // optional .pb.GS2C_Guild_Dynamic_Event_Log logs = 19;
  if (has_logs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->logs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_GuildInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_id());
    }

    // required uint32 icon = 2;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->icon());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 create_time = 4;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->create_time());
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 exp = 6;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 prestige = 7;
    if (has_prestige()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prestige());
    }

    // optional uint32 active = 8;
    if (has_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string notice = 9;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // optional uint64 notice_time = 10;
    if (has_notice_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->notice_time());
    }

    // optional uint64 notice_creater_id = 11;
    if (has_notice_creater_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->notice_creater_id());
    }

    // optional string notice_creater_name = 12;
    if (has_notice_creater_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice_creater_name());
    }

    // optional uint64 guild_owner_id = 13;
    if (has_guild_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_owner_id());
    }

    // optional string guild_owner_name = 14;
    if (has_guild_owner_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_owner_name());
    }

    // optional uint32 members_count = 15;
    if (has_members_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->members_count());
    }

    // optional uint32 members_limit = 16;
    if (has_members_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->members_limit());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 score = 17;
    if (has_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint64 last_rank_time = 18;
    if (has_last_rank_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_rank_time());
    }

    // optional .pb.GS2C_Guild_Dynamic_Event_Log logs = 19;
    if (has_logs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_GuildInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_GuildInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_GuildInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_GuildInfo::MergeFrom(const GxDB_GuildInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_prestige()) {
      set_prestige(from.prestige());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_notice_time()) {
      set_notice_time(from.notice_time());
    }
    if (from.has_notice_creater_id()) {
      set_notice_creater_id(from.notice_creater_id());
    }
    if (from.has_notice_creater_name()) {
      set_notice_creater_name(from.notice_creater_name());
    }
    if (from.has_guild_owner_id()) {
      set_guild_owner_id(from.guild_owner_id());
    }
    if (from.has_guild_owner_name()) {
      set_guild_owner_name(from.guild_owner_name());
    }
    if (from.has_members_count()) {
      set_members_count(from.members_count());
    }
    if (from.has_members_limit()) {
      set_members_limit(from.members_limit());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_last_rank_time()) {
      set_last_rank_time(from.last_rank_time());
    }
    if (from.has_logs()) {
      mutable_logs()->::pb::GS2C_Guild_Dynamic_Event_Log::MergeFrom(from.logs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_GuildInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_GuildInfo::CopyFrom(const GxDB_GuildInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_GuildInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GxDB_GuildInfo::Swap(GxDB_GuildInfo* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(icon_, other->icon_);
    std::swap(name_, other->name_);
    std::swap(create_time_, other->create_time_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(prestige_, other->prestige_);
    std::swap(active_, other->active_);
    std::swap(notice_, other->notice_);
    std::swap(notice_time_, other->notice_time_);
    std::swap(notice_creater_id_, other->notice_creater_id_);
    std::swap(notice_creater_name_, other->notice_creater_name_);
    std::swap(guild_owner_id_, other->guild_owner_id_);
    std::swap(guild_owner_name_, other->guild_owner_name_);
    std::swap(members_count_, other->members_count_);
    std::swap(members_limit_, other->members_limit_);
    std::swap(score_, other->score_);
    std::swap(last_rank_time_, other->last_rank_time_);
    std::swap(logs_, other->logs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_GuildInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_GuildInfo_descriptor_;
  metadata.reflection = GxDB_GuildInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_GMember_Info::kPlayerIdFieldNumber;
const int GxDB_GMember_Info::kPlayerNameFieldNumber;
const int GxDB_GMember_Info::kGuildIdFieldNumber;
const int GxDB_GMember_Info::kGuildNameFieldNumber;
const int GxDB_GMember_Info::kTitleFieldNumber;
const int GxDB_GMember_Info::kJoinTimeFieldNumber;
const int GxDB_GMember_Info::kLastActiveTimeFieldNumber;
const int GxDB_GMember_Info::kGuildcontributionsFieldNumber;
const int GxDB_GMember_Info::kLevelFieldNumber;
const int GxDB_GMember_Info::kIsonlineFieldNumber;
const int GxDB_GMember_Info::kVipLevelFieldNumber;
const int GxDB_GMember_Info::kRequestFlagFieldNumber;
const int GxDB_GMember_Info::kInviteFlagFieldNumber;
const int GxDB_GMember_Info::kRequestExpireTimeFieldNumber;
const int GxDB_GMember_Info::kPowerFieldNumber;
const int GxDB_GMember_Info::kHeadIconFieldNumber;
const int GxDB_GMember_Info::kIsSendApFieldNumber;
const int GxDB_GMember_Info::kIsReceiveApFieldNumber;
#endif  // !_MSC_VER

GxDB_GMember_Info::GxDB_GMember_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_GMember_Info::InitAsDefaultInstance() {
}

GxDB_GMember_Info::GxDB_GMember_Info(const GxDB_GMember_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_GMember_Info::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guild_id_ = GOOGLE_ULONGLONG(0);
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = 0u;
  jointime_ = GOOGLE_ULONGLONG(0);
  lastactivetime_ = GOOGLE_ULONGLONG(0);
  guildcontributions_ = 0u;
  level_ = 0u;
  isonline_ = false;
  vip_level_ = 0u;
  request_flag_ = false;
  invite_flag_ = false;
  request_expire_time_ = GOOGLE_ULONGLONG(0);
  power_ = 0u;
  head_icon_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_GMember_Info::~GxDB_GMember_Info() {
  SharedDtor();
}

void GxDB_GMember_Info::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (this != default_instance_) {
  }
}

void GxDB_GMember_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_GMember_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_GMember_Info_descriptor_;
}

const GxDB_GMember_Info& GxDB_GMember_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GxDB_GMember_Info* GxDB_GMember_Info::default_instance_ = NULL;

GxDB_GMember_Info* GxDB_GMember_Info::New() const {
  return new GxDB_GMember_Info;
}

void GxDB_GMember_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    guild_id_ = GOOGLE_ULONGLONG(0);
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
    title_ = 0u;
    jointime_ = GOOGLE_ULONGLONG(0);
    lastactivetime_ = GOOGLE_ULONGLONG(0);
    guildcontributions_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_ = 0u;
    isonline_ = false;
    vip_level_ = 0u;
    request_flag_ = false;
    invite_flag_ = false;
    request_expire_time_ = GOOGLE_ULONGLONG(0);
    power_ = 0u;
    head_icon_ = 0u;
  }
  is_send_ap_.Clear();
  is_receive_ap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_GMember_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guild_id;
        break;
      }

      // optional uint64 guild_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_guild_name;
        break;
      }

      // optional string guild_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_title;
        break;
      }

      // optional uint32 title = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_joinTime;
        break;
      }

      // optional uint64 joinTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_joinTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &jointime_)));
          set_has_jointime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lastActiveTime;
        break;
      }

      // optional uint64 lastActiveTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastActiveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastactivetime_)));
          set_has_lastactivetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_guildcontributions;
        break;
      }

      // optional uint32 guildcontributions = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildcontributions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildcontributions_)));
          set_has_guildcontributions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }

      // optional uint32 level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isonline;
        break;
      }

      // optional bool isonline = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isonline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isonline_)));
          set_has_isonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_request_flag;
        break;
      }

      // optional bool request_flag = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_request_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &request_flag_)));
          set_has_request_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_invite_flag;
        break;
      }

      // optional bool invite_flag = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invite_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &invite_flag_)));
          set_has_invite_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_request_expire_time;
        break;
      }

      // optional uint64 request_expire_time = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_request_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_expire_time_)));
          set_has_request_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_power;
        break;
      }

      // optional uint32 power = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_head_icon;
        break;
      }

      // optional uint32 head_icon = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_icon_)));
          set_has_head_icon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_is_send_ap;
        break;
      }

      // repeated uint64 is_send_ap = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_send_ap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 136, input, this->mutable_is_send_ap())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_is_send_ap())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_is_send_ap;
        if (input->ExpectTag(144)) goto parse_is_receive_ap;
        break;
      }

      // repeated uint64 is_receive_ap = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_receive_ap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 144, input, this->mutable_is_receive_ap())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_is_receive_ap())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_is_receive_ap;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_GMember_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_name(), output);
  }

  // optional uint64 guild_id = 3;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guild_id(), output);
  }

  // optional string guild_name = 4;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->guild_name(), output);
  }

  // optional uint32 title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->title(), output);
  }

  // optional uint64 joinTime = 6;
  if (has_jointime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->jointime(), output);
  }

  // optional uint64 lastActiveTime = 7;
  if (has_lastactivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->lastactivetime(), output);
  }

  // optional uint32 guildcontributions = 8;
  if (has_guildcontributions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->guildcontributions(), output);
  }

  // optional uint32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->level(), output);
  }

  // optional bool isonline = 10;
  if (has_isonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isonline(), output);
  }

  // optional uint32 vip_level = 11;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->vip_level(), output);
  }

  // optional bool request_flag = 12;
  if (has_request_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->request_flag(), output);
  }

  // optional bool invite_flag = 13;
  if (has_invite_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->invite_flag(), output);
  }

  // optional uint64 request_expire_time = 14;
  if (has_request_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->request_expire_time(), output);
  }

  // optional uint32 power = 15;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->power(), output);
  }

  // optional uint32 head_icon = 16;
  if (has_head_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->head_icon(), output);
  }

  // repeated uint64 is_send_ap = 17;
  for (int i = 0; i < this->is_send_ap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      17, this->is_send_ap(i), output);
  }

  // repeated uint64 is_receive_ap = 18;
  for (int i = 0; i < this->is_receive_ap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      18, this->is_receive_ap(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_GMember_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // optional uint64 guild_id = 3;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guild_id(), target);
  }

  // optional string guild_name = 4;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guild_name(), target);
  }

  // optional uint32 title = 5;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->title(), target);
  }

  // optional uint64 joinTime = 6;
  if (has_jointime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->jointime(), target);
  }

  // optional uint64 lastActiveTime = 7;
  if (has_lastactivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->lastactivetime(), target);
  }

  // optional uint32 guildcontributions = 8;
  if (has_guildcontributions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->guildcontributions(), target);
  }

  // optional uint32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->level(), target);
  }

  // optional bool isonline = 10;
  if (has_isonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isonline(), target);
  }

  // optional uint32 vip_level = 11;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->vip_level(), target);
  }

  // optional bool request_flag = 12;
  if (has_request_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->request_flag(), target);
  }

  // optional bool invite_flag = 13;
  if (has_invite_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->invite_flag(), target);
  }

  // optional uint64 request_expire_time = 14;
  if (has_request_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->request_expire_time(), target);
  }

  // optional uint32 power = 15;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->power(), target);
  }

  // optional uint32 head_icon = 16;
  if (has_head_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->head_icon(), target);
  }

  // repeated uint64 is_send_ap = 17;
  for (int i = 0; i < this->is_send_ap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(17, this->is_send_ap(i), target);
  }

  // repeated uint64 is_receive_ap = 18;
  for (int i = 0; i < this->is_receive_ap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(18, this->is_receive_ap(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_GMember_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional uint64 guild_id = 3;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_id());
    }

    // optional string guild_name = 4;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

    // optional uint32 title = 5;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->title());
    }

    // optional uint64 joinTime = 6;
    if (has_jointime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->jointime());
    }

    // optional uint64 lastActiveTime = 7;
    if (has_lastactivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastactivetime());
    }

    // optional uint32 guildcontributions = 8;
    if (has_guildcontributions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildcontributions());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional bool isonline = 10;
    if (has_isonline()) {
      total_size += 1 + 1;
    }

    // optional uint32 vip_level = 11;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

    // optional bool request_flag = 12;
    if (has_request_flag()) {
      total_size += 1 + 1;
    }

    // optional bool invite_flag = 13;
    if (has_invite_flag()) {
      total_size += 1 + 1;
    }

    // optional uint64 request_expire_time = 14;
    if (has_request_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_expire_time());
    }

    // optional uint32 power = 15;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power());
    }

    // optional uint32 head_icon = 16;
    if (has_head_icon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_icon());
    }

  }
  // repeated uint64 is_send_ap = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->is_send_ap_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->is_send_ap(i));
    }
    total_size += 2 * this->is_send_ap_size() + data_size;
  }

  // repeated uint64 is_receive_ap = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->is_receive_ap_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->is_receive_ap(i));
    }
    total_size += 2 * this->is_receive_ap_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_GMember_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_GMember_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_GMember_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_GMember_Info::MergeFrom(const GxDB_GMember_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  is_send_ap_.MergeFrom(from.is_send_ap_);
  is_receive_ap_.MergeFrom(from.is_receive_ap_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_jointime()) {
      set_jointime(from.jointime());
    }
    if (from.has_lastactivetime()) {
      set_lastactivetime(from.lastactivetime());
    }
    if (from.has_guildcontributions()) {
      set_guildcontributions(from.guildcontributions());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_isonline()) {
      set_isonline(from.isonline());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_request_flag()) {
      set_request_flag(from.request_flag());
    }
    if (from.has_invite_flag()) {
      set_invite_flag(from.invite_flag());
    }
    if (from.has_request_expire_time()) {
      set_request_expire_time(from.request_expire_time());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_head_icon()) {
      set_head_icon(from.head_icon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_GMember_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_GMember_Info::CopyFrom(const GxDB_GMember_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_GMember_Info::IsInitialized() const {

  return true;
}

void GxDB_GMember_Info::Swap(GxDB_GMember_Info* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(player_name_, other->player_name_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(title_, other->title_);
    std::swap(jointime_, other->jointime_);
    std::swap(lastactivetime_, other->lastactivetime_);
    std::swap(guildcontributions_, other->guildcontributions_);
    std::swap(level_, other->level_);
    std::swap(isonline_, other->isonline_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(request_flag_, other->request_flag_);
    std::swap(invite_flag_, other->invite_flag_);
    std::swap(request_expire_time_, other->request_expire_time_);
    std::swap(power_, other->power_);
    std::swap(head_icon_, other->head_icon_);
    is_send_ap_.Swap(&other->is_send_ap_);
    is_receive_ap_.Swap(&other->is_receive_ap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_GMember_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_GMember_Info_descriptor_;
  metadata.reflection = GxDB_GMember_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_Guild_Member::kMemberinfoFieldNumber;
#endif  // !_MSC_VER

GxDB_Guild_Member::GxDB_Guild_Member()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_Guild_Member::InitAsDefaultInstance() {
}

GxDB_Guild_Member::GxDB_Guild_Member(const GxDB_Guild_Member& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_Guild_Member::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_Guild_Member::~GxDB_Guild_Member() {
  SharedDtor();
}

void GxDB_Guild_Member::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_Guild_Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_Guild_Member::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_Guild_Member_descriptor_;
}

const GxDB_Guild_Member& GxDB_Guild_Member::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GxDB_Guild_Member* GxDB_Guild_Member::default_instance_ = NULL;

GxDB_Guild_Member* GxDB_Guild_Member::New() const {
  return new GxDB_Guild_Member;
}

void GxDB_Guild_Member::Clear() {
  memberinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_Guild_Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GxDB_GMember_Info memberinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memberinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_memberinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_Guild_Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GxDB_GMember_Info memberinfo = 1;
  for (int i = 0; i < this->memberinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->memberinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_Guild_Member::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GxDB_GMember_Info memberinfo = 1;
  for (int i = 0; i < this->memberinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->memberinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_Guild_Member::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GxDB_GMember_Info memberinfo = 1;
  total_size += 1 * this->memberinfo_size();
  for (int i = 0; i < this->memberinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->memberinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_Guild_Member::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_Guild_Member* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_Guild_Member*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_Guild_Member::MergeFrom(const GxDB_Guild_Member& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberinfo_.MergeFrom(from.memberinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_Guild_Member::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_Guild_Member::CopyFrom(const GxDB_Guild_Member& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_Guild_Member::IsInitialized() const {

  return true;
}

void GxDB_Guild_Member::Swap(GxDB_Guild_Member* other) {
  if (other != this) {
    memberinfo_.Swap(&other->memberinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_Guild_Member::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_Guild_Member_descriptor_;
  metadata.reflection = GxDB_Guild_Member_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_Guild::kGuildIdFieldNumber;
const int GxDB_Guild::kGuildInfoFieldNumber;
const int GxDB_Guild::kMembersInfoFieldNumber;
const int GxDB_Guild::kRequestListFieldNumber;
#endif  // !_MSC_VER

GxDB_Guild::GxDB_Guild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_Guild::InitAsDefaultInstance() {
  guild_info_ = const_cast< ::pb::GxDB_GuildInfo*>(&::pb::GxDB_GuildInfo::default_instance());
  members_info_ = const_cast< ::pb::GxDB_Guild_Member*>(&::pb::GxDB_Guild_Member::default_instance());
  request_list_ = const_cast< ::pb::GxDB_Guild_Member*>(&::pb::GxDB_Guild_Member::default_instance());
}

GxDB_Guild::GxDB_Guild(const GxDB_Guild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_Guild::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = GOOGLE_ULONGLONG(0);
  guild_info_ = NULL;
  members_info_ = NULL;
  request_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_Guild::~GxDB_Guild() {
  SharedDtor();
}

void GxDB_Guild::SharedDtor() {
  if (this != default_instance_) {
    delete guild_info_;
    delete members_info_;
    delete request_list_;
  }
}

void GxDB_Guild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_Guild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_Guild_descriptor_;
}

const GxDB_Guild& GxDB_Guild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GxDB_Guild* GxDB_Guild::default_instance_ = NULL;

GxDB_Guild* GxDB_Guild::New() const {
  return new GxDB_Guild;
}

void GxDB_Guild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guild_id_ = GOOGLE_ULONGLONG(0);
    if (has_guild_info()) {
      if (guild_info_ != NULL) guild_info_->::pb::GxDB_GuildInfo::Clear();
    }
    if (has_members_info()) {
      if (members_info_ != NULL) members_info_->::pb::GxDB_Guild_Member::Clear();
    }
    if (has_request_list()) {
      if (request_list_ != NULL) request_list_->::pb::GxDB_Guild_Member::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_Guild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guild_info;
        break;
      }

      // optional .pb.GxDB_GuildInfo guild_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_members_info;
        break;
      }

      // optional .pb.GxDB_Guild_Member members_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_members_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_request_list;
        break;
      }

      // optional .pb.GxDB_Guild_Member request_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_Guild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guild_id(), output);
  }

  // optional .pb.GxDB_GuildInfo guild_info = 2;
  if (has_guild_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guild_info(), output);
  }

  // optional .pb.GxDB_Guild_Member members_info = 3;
  if (has_members_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->members_info(), output);
  }

  // optional .pb.GxDB_Guild_Member request_list = 4;
  if (has_request_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->request_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_Guild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guild_id(), target);
  }

  // optional .pb.GxDB_GuildInfo guild_info = 2;
  if (has_guild_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guild_info(), target);
  }

  // optional .pb.GxDB_Guild_Member members_info = 3;
  if (has_members_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->members_info(), target);
  }

  // optional .pb.GxDB_Guild_Member request_list = 4;
  if (has_request_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->request_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_Guild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_id());
    }

    // optional .pb.GxDB_GuildInfo guild_info = 2;
    if (has_guild_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guild_info());
    }

    // optional .pb.GxDB_Guild_Member members_info = 3;
    if (has_members_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members_info());
    }

    // optional .pb.GxDB_Guild_Member request_list = 4;
    if (has_request_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request_list());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_Guild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_Guild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_Guild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_Guild::MergeFrom(const GxDB_Guild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_guild_info()) {
      mutable_guild_info()->::pb::GxDB_GuildInfo::MergeFrom(from.guild_info());
    }
    if (from.has_members_info()) {
      mutable_members_info()->::pb::GxDB_Guild_Member::MergeFrom(from.members_info());
    }
    if (from.has_request_list()) {
      mutable_request_list()->::pb::GxDB_Guild_Member::MergeFrom(from.request_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_Guild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_Guild::CopyFrom(const GxDB_Guild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_Guild::IsInitialized() const {

  if (has_guild_info()) {
    if (!this->guild_info().IsInitialized()) return false;
  }
  return true;
}

void GxDB_Guild::Swap(GxDB_Guild* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(guild_info_, other->guild_info_);
    std::swap(members_info_, other->members_info_);
    std::swap(request_list_, other->request_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_Guild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_Guild_descriptor_;
  metadata.reflection = GxDB_Guild_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_Guilds::kGuildinfosFieldNumber;
#endif  // !_MSC_VER

GxDB_Guilds::GxDB_Guilds()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_Guilds::InitAsDefaultInstance() {
}

GxDB_Guilds::GxDB_Guilds(const GxDB_Guilds& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_Guilds::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_Guilds::~GxDB_Guilds() {
  SharedDtor();
}

void GxDB_Guilds::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_Guilds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_Guilds::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_Guilds_descriptor_;
}

const GxDB_Guilds& GxDB_Guilds::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GxDB_Guilds* GxDB_Guilds::default_instance_ = NULL;

GxDB_Guilds* GxDB_Guilds::New() const {
  return new GxDB_Guilds;
}

void GxDB_Guilds::Clear() {
  guildinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_Guilds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GxDB_Guild guildinfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_guildinfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_Guilds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GxDB_Guild guildinfos = 1;
  for (int i = 0; i < this->guildinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guildinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_Guilds::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GxDB_Guild guildinfos = 1;
  for (int i = 0; i < this->guildinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guildinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_Guilds::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GxDB_Guild guildinfos = 1;
  total_size += 1 * this->guildinfos_size();
  for (int i = 0; i < this->guildinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_Guilds::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_Guilds* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_Guilds*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_Guilds::MergeFrom(const GxDB_Guilds& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildinfos_.MergeFrom(from.guildinfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_Guilds::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_Guilds::CopyFrom(const GxDB_Guilds& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_Guilds::IsInitialized() const {

  for (int i = 0; i < guildinfos_size(); i++) {
    if (!this->guildinfos(i).IsInitialized()) return false;
  }
  return true;
}

void GxDB_Guilds::Swap(GxDB_Guilds* other) {
  if (other != this) {
    guildinfos_.Swap(&other->guildinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_Guilds::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_Guilds_descriptor_;
  metadata.reflection = GxDB_Guilds_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Guild_Leaderboard_Search::kKeyFieldNumber;
const int C2GS_Guild_Leaderboard_Search::kKeyIdFieldNumber;
const int C2GS_Guild_Leaderboard_Search::kYourGuidFieldNumber;
const int C2GS_Guild_Leaderboard_Search::kIsLeaderboardFieldNumber;
const int C2GS_Guild_Leaderboard_Search::kIsByNameFieldNumber;
#endif  // !_MSC_VER

C2GS_Guild_Leaderboard_Search::C2GS_Guild_Leaderboard_Search()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Guild_Leaderboard_Search::InitAsDefaultInstance() {
}

C2GS_Guild_Leaderboard_Search::C2GS_Guild_Leaderboard_Search(const C2GS_Guild_Leaderboard_Search& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Guild_Leaderboard_Search::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_id_ = 0u;
  your_guid_ = GOOGLE_ULONGLONG(0);
  is_leaderboard_ = true;
  is_by_name_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Guild_Leaderboard_Search::~C2GS_Guild_Leaderboard_Search() {
  SharedDtor();
}

void C2GS_Guild_Leaderboard_Search::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void C2GS_Guild_Leaderboard_Search::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Guild_Leaderboard_Search::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Guild_Leaderboard_Search_descriptor_;
}

const C2GS_Guild_Leaderboard_Search& C2GS_Guild_Leaderboard_Search::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

C2GS_Guild_Leaderboard_Search* C2GS_Guild_Leaderboard_Search::default_instance_ = NULL;

C2GS_Guild_Leaderboard_Search* C2GS_Guild_Leaderboard_Search::New() const {
  return new C2GS_Guild_Leaderboard_Search;
}

void C2GS_Guild_Leaderboard_Search::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    key_id_ = 0u;
    your_guid_ = GOOGLE_ULONGLONG(0);
    is_leaderboard_ = true;
    is_by_name_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Guild_Leaderboard_Search::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_key_id;
        break;
      }

      // optional uint32 key_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_id_)));
          set_has_key_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_your_guid;
        break;
      }

      // required uint64 your_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_your_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &your_guid_)));
          set_has_your_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_leaderboard;
        break;
      }

      // required bool is_leaderboard = 4 [default = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_leaderboard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_leaderboard_)));
          set_has_is_leaderboard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_by_name;
        break;
      }

      // optional bool is_by_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_by_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_by_name_)));
          set_has_is_by_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Guild_Leaderboard_Search::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // optional uint32 key_id = 2;
  if (has_key_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->key_id(), output);
  }

  // required uint64 your_guid = 3;
  if (has_your_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->your_guid(), output);
  }

  // required bool is_leaderboard = 4 [default = true];
  if (has_is_leaderboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_leaderboard(), output);
  }

  // optional bool is_by_name = 5;
  if (has_is_by_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_by_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Guild_Leaderboard_Search::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional uint32 key_id = 2;
  if (has_key_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->key_id(), target);
  }

  // required uint64 your_guid = 3;
  if (has_your_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->your_guid(), target);
  }

  // required bool is_leaderboard = 4 [default = true];
  if (has_is_leaderboard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_leaderboard(), target);
  }

  // optional bool is_by_name = 5;
  if (has_is_by_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_by_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Guild_Leaderboard_Search::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional uint32 key_id = 2;
    if (has_key_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key_id());
    }

    // required uint64 your_guid = 3;
    if (has_your_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->your_guid());
    }

    // required bool is_leaderboard = 4 [default = true];
    if (has_is_leaderboard()) {
      total_size += 1 + 1;
    }

    // optional bool is_by_name = 5;
    if (has_is_by_name()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Guild_Leaderboard_Search::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Guild_Leaderboard_Search* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Guild_Leaderboard_Search*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Guild_Leaderboard_Search::MergeFrom(const C2GS_Guild_Leaderboard_Search& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_key_id()) {
      set_key_id(from.key_id());
    }
    if (from.has_your_guid()) {
      set_your_guid(from.your_guid());
    }
    if (from.has_is_leaderboard()) {
      set_is_leaderboard(from.is_leaderboard());
    }
    if (from.has_is_by_name()) {
      set_is_by_name(from.is_by_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Guild_Leaderboard_Search::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Guild_Leaderboard_Search::CopyFrom(const C2GS_Guild_Leaderboard_Search& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Guild_Leaderboard_Search::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  return true;
}

void C2GS_Guild_Leaderboard_Search::Swap(C2GS_Guild_Leaderboard_Search* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(key_id_, other->key_id_);
    std::swap(your_guid_, other->your_guid_);
    std::swap(is_leaderboard_, other->is_leaderboard_);
    std::swap(is_by_name_, other->is_by_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Guild_Leaderboard_Search::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Guild_Leaderboard_Search_descriptor_;
  metadata.reflection = C2GS_Guild_Leaderboard_Search_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Guild_Leaderboard_Search::kGuildInfosFieldNumber;
const int GS2C_Guild_Leaderboard_Search::kIsLeaderboardFieldNumber;
#endif  // !_MSC_VER

GS2C_Guild_Leaderboard_Search::GS2C_Guild_Leaderboard_Search()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Guild_Leaderboard_Search::InitAsDefaultInstance() {
}

GS2C_Guild_Leaderboard_Search::GS2C_Guild_Leaderboard_Search(const GS2C_Guild_Leaderboard_Search& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Guild_Leaderboard_Search::SharedCtor() {
  _cached_size_ = 0;
  is_leaderboard_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Guild_Leaderboard_Search::~GS2C_Guild_Leaderboard_Search() {
  SharedDtor();
}

void GS2C_Guild_Leaderboard_Search::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Guild_Leaderboard_Search::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Guild_Leaderboard_Search::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Guild_Leaderboard_Search_descriptor_;
}

const GS2C_Guild_Leaderboard_Search& GS2C_Guild_Leaderboard_Search::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GS2C_Guild_Leaderboard_Search* GS2C_Guild_Leaderboard_Search::default_instance_ = NULL;

GS2C_Guild_Leaderboard_Search* GS2C_Guild_Leaderboard_Search::New() const {
  return new GS2C_Guild_Leaderboard_Search;
}

void GS2C_Guild_Leaderboard_Search::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    is_leaderboard_ = true;
  }
  guild_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Guild_Leaderboard_Search::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GxDB_GuildInfo guild_infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guild_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_guild_infos;
        if (input->ExpectTag(16)) goto parse_is_leaderboard;
        break;
      }

      // optional bool is_leaderboard = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_leaderboard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_leaderboard_)));
          set_has_is_leaderboard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Guild_Leaderboard_Search::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GxDB_GuildInfo guild_infos = 1;
  for (int i = 0; i < this->guild_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guild_infos(i), output);
  }

  // optional bool is_leaderboard = 2 [default = true];
  if (has_is_leaderboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_leaderboard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Guild_Leaderboard_Search::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GxDB_GuildInfo guild_infos = 1;
  for (int i = 0; i < this->guild_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guild_infos(i), target);
  }

  // optional bool is_leaderboard = 2 [default = true];
  if (has_is_leaderboard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_leaderboard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Guild_Leaderboard_Search::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool is_leaderboard = 2 [default = true];
    if (has_is_leaderboard()) {
      total_size += 1 + 1;
    }

  }
  // repeated .pb.GxDB_GuildInfo guild_infos = 1;
  total_size += 1 * this->guild_infos_size();
  for (int i = 0; i < this->guild_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guild_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Guild_Leaderboard_Search::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Guild_Leaderboard_Search* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Guild_Leaderboard_Search*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Guild_Leaderboard_Search::MergeFrom(const GS2C_Guild_Leaderboard_Search& from) {
  GOOGLE_CHECK_NE(&from, this);
  guild_infos_.MergeFrom(from.guild_infos_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_is_leaderboard()) {
      set_is_leaderboard(from.is_leaderboard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Guild_Leaderboard_Search::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Guild_Leaderboard_Search::CopyFrom(const GS2C_Guild_Leaderboard_Search& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Guild_Leaderboard_Search::IsInitialized() const {

  for (int i = 0; i < guild_infos_size(); i++) {
    if (!this->guild_infos(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Guild_Leaderboard_Search::Swap(GS2C_Guild_Leaderboard_Search* other) {
  if (other != this) {
    guild_infos_.Swap(&other->guild_infos_);
    std::swap(is_leaderboard_, other->is_leaderboard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Guild_Leaderboard_Search::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Guild_Leaderboard_Search_descriptor_;
  metadata.reflection = GS2C_Guild_Leaderboard_Search_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Guild_Player_Search::kIsMemberFieldNumber;
const int C2GS_Guild_Player_Search::kSearchNameFieldNumber;
const int C2GS_Guild_Player_Search::kYourGuidFieldNumber;
const int C2GS_Guild_Player_Search::kMaxCountFieldNumber;
const int C2GS_Guild_Player_Search::kGuildIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Guild_Player_Search::C2GS_Guild_Player_Search()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Guild_Player_Search::InitAsDefaultInstance() {
}

C2GS_Guild_Player_Search::C2GS_Guild_Player_Search(const C2GS_Guild_Player_Search& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Guild_Player_Search::SharedCtor() {
  _cached_size_ = 0;
  is_member_ = true;
  search_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  your_guid_ = GOOGLE_ULONGLONG(0);
  max_count_ = 0u;
  guild_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Guild_Player_Search::~C2GS_Guild_Player_Search() {
  SharedDtor();
}

void C2GS_Guild_Player_Search::SharedDtor() {
  if (search_name_ != &::google::protobuf::internal::kEmptyString) {
    delete search_name_;
  }
  if (this != default_instance_) {
  }
}

void C2GS_Guild_Player_Search::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Guild_Player_Search::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Guild_Player_Search_descriptor_;
}

const C2GS_Guild_Player_Search& C2GS_Guild_Player_Search::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

C2GS_Guild_Player_Search* C2GS_Guild_Player_Search::default_instance_ = NULL;

C2GS_Guild_Player_Search* C2GS_Guild_Player_Search::New() const {
  return new C2GS_Guild_Player_Search;
}

void C2GS_Guild_Player_Search::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_member_ = true;
    if (has_search_name()) {
      if (search_name_ != &::google::protobuf::internal::kEmptyString) {
        search_name_->clear();
      }
    }
    your_guid_ = GOOGLE_ULONGLONG(0);
    max_count_ = 0u;
    guild_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Guild_Player_Search::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_member = 1 [default = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_member_)));
          set_has_is_member();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_search_name;
        break;
      }

      // optional string search_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_search_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->search_name().data(), this->search_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_your_guid;
        break;
      }

      // required uint64 your_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_your_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &your_guid_)));
          set_has_your_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_count;
        break;
      }

      // required uint32 max_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_count_)));
          set_has_max_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_guild_id;
        break;
      }

      // required uint64 guild_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Guild_Player_Search::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_member = 1 [default = true];
  if (has_is_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_member(), output);
  }

  // optional string search_name = 2;
  if (has_search_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->search_name().data(), this->search_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->search_name(), output);
  }

  // required uint64 your_guid = 3;
  if (has_your_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->your_guid(), output);
  }

  // required uint32 max_count = 4;
  if (has_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_count(), output);
  }

  // required uint64 guild_id = 5;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->guild_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Guild_Player_Search::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_member = 1 [default = true];
  if (has_is_member()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_member(), target);
  }

  // optional string search_name = 2;
  if (has_search_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->search_name().data(), this->search_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->search_name(), target);
  }

  // required uint64 your_guid = 3;
  if (has_your_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->your_guid(), target);
  }

  // required uint32 max_count = 4;
  if (has_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_count(), target);
  }

  // required uint64 guild_id = 5;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->guild_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Guild_Player_Search::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_member = 1 [default = true];
    if (has_is_member()) {
      total_size += 1 + 1;
    }

    // optional string search_name = 2;
    if (has_search_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_name());
    }

    // required uint64 your_guid = 3;
    if (has_your_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->your_guid());
    }

    // required uint32 max_count = 4;
    if (has_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_count());
    }

    // required uint64 guild_id = 5;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Guild_Player_Search::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Guild_Player_Search* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Guild_Player_Search*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Guild_Player_Search::MergeFrom(const C2GS_Guild_Player_Search& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_member()) {
      set_is_member(from.is_member());
    }
    if (from.has_search_name()) {
      set_search_name(from.search_name());
    }
    if (from.has_your_guid()) {
      set_your_guid(from.your_guid());
    }
    if (from.has_max_count()) {
      set_max_count(from.max_count());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Guild_Player_Search::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Guild_Player_Search::CopyFrom(const C2GS_Guild_Player_Search& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Guild_Player_Search::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  return true;
}

void C2GS_Guild_Player_Search::Swap(C2GS_Guild_Player_Search* other) {
  if (other != this) {
    std::swap(is_member_, other->is_member_);
    std::swap(search_name_, other->search_name_);
    std::swap(your_guid_, other->your_guid_);
    std::swap(max_count_, other->max_count_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Guild_Player_Search::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Guild_Player_Search_descriptor_;
  metadata.reflection = C2GS_Guild_Player_Search_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Guild_Player_Search_Respone::kSearchResultFieldNumber;
const int GS2C_Guild_Player_Search_Respone::kMemberinfosFieldNumber;
const int GS2C_Guild_Player_Search_Respone::kIsMemberFieldNumber;
const int GS2C_Guild_Player_Search_Respone::kYourGuidFieldNumber;
#endif  // !_MSC_VER

GS2C_Guild_Player_Search_Respone::GS2C_Guild_Player_Search_Respone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Guild_Player_Search_Respone::InitAsDefaultInstance() {
}

GS2C_Guild_Player_Search_Respone::GS2C_Guild_Player_Search_Respone(const GS2C_Guild_Player_Search_Respone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Guild_Player_Search_Respone::SharedCtor() {
  _cached_size_ = 0;
  search_result_ = 0u;
  is_member_ = true;
  your_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Guild_Player_Search_Respone::~GS2C_Guild_Player_Search_Respone() {
  SharedDtor();
}

void GS2C_Guild_Player_Search_Respone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Guild_Player_Search_Respone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Guild_Player_Search_Respone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Guild_Player_Search_Respone_descriptor_;
}

const GS2C_Guild_Player_Search_Respone& GS2C_Guild_Player_Search_Respone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GS2C_Guild_Player_Search_Respone* GS2C_Guild_Player_Search_Respone::default_instance_ = NULL;

GS2C_Guild_Player_Search_Respone* GS2C_Guild_Player_Search_Respone::New() const {
  return new GS2C_Guild_Player_Search_Respone;
}

void GS2C_Guild_Player_Search_Respone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    search_result_ = 0u;
    is_member_ = true;
    your_guid_ = GOOGLE_ULONGLONG(0);
  }
  memberinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Guild_Player_Search_Respone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 search_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &search_result_)));
          set_has_search_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_memberinfos;
        break;
      }

      // repeated .pb.GxDB_GMember_Info memberinfos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memberinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_memberinfos;
        if (input->ExpectTag(24)) goto parse_is_member;
        break;
      }

      // required bool is_member = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_member:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_member_)));
          set_has_is_member();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_your_guid;
        break;
      }

      // required uint64 your_guid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_your_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &your_guid_)));
          set_has_your_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Guild_Player_Search_Respone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 search_result = 1;
  if (has_search_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->search_result(), output);
  }

  // repeated .pb.GxDB_GMember_Info memberinfos = 2;
  for (int i = 0; i < this->memberinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->memberinfos(i), output);
  }

  // required bool is_member = 3 [default = true];
  if (has_is_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_member(), output);
  }

  // required uint64 your_guid = 4;
  if (has_your_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->your_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Guild_Player_Search_Respone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 search_result = 1;
  if (has_search_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->search_result(), target);
  }

  // repeated .pb.GxDB_GMember_Info memberinfos = 2;
  for (int i = 0; i < this->memberinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->memberinfos(i), target);
  }

  // required bool is_member = 3 [default = true];
  if (has_is_member()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_member(), target);
  }

  // required uint64 your_guid = 4;
  if (has_your_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->your_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Guild_Player_Search_Respone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 search_result = 1;
    if (has_search_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->search_result());
    }

    // required bool is_member = 3 [default = true];
    if (has_is_member()) {
      total_size += 1 + 1;
    }

    // required uint64 your_guid = 4;
    if (has_your_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->your_guid());
    }

  }
  // repeated .pb.GxDB_GMember_Info memberinfos = 2;
  total_size += 1 * this->memberinfos_size();
  for (int i = 0; i < this->memberinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->memberinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Guild_Player_Search_Respone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Guild_Player_Search_Respone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Guild_Player_Search_Respone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Guild_Player_Search_Respone::MergeFrom(const GS2C_Guild_Player_Search_Respone& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberinfos_.MergeFrom(from.memberinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_search_result()) {
      set_search_result(from.search_result());
    }
    if (from.has_is_member()) {
      set_is_member(from.is_member());
    }
    if (from.has_your_guid()) {
      set_your_guid(from.your_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Guild_Player_Search_Respone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Guild_Player_Search_Respone::CopyFrom(const GS2C_Guild_Player_Search_Respone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Guild_Player_Search_Respone::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  return true;
}

void GS2C_Guild_Player_Search_Respone::Swap(GS2C_Guild_Player_Search_Respone* other) {
  if (other != this) {
    std::swap(search_result_, other->search_result_);
    memberinfos_.Swap(&other->memberinfos_);
    std::swap(is_member_, other->is_member_);
    std::swap(your_guid_, other->your_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Guild_Player_Search_Respone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Guild_Player_Search_Respone_descriptor_;
  metadata.reflection = GS2C_Guild_Player_Search_Respone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Guild_Add::kGuildNameFieldNumber;
const int C2GS_Guild_Add::kNoticeFieldNumber;
const int C2GS_Guild_Add::kIconFieldNumber;
const int C2GS_Guild_Add::kYourGuidFieldNumber;
#endif  // !_MSC_VER

C2GS_Guild_Add::C2GS_Guild_Add()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Guild_Add::InitAsDefaultInstance() {
}

C2GS_Guild_Add::C2GS_Guild_Add(const C2GS_Guild_Add& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Guild_Add::SharedCtor() {
  _cached_size_ = 0;
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = 0u;
  your_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Guild_Add::~C2GS_Guild_Add() {
  SharedDtor();
}

void C2GS_Guild_Add::SharedDtor() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void C2GS_Guild_Add::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Guild_Add::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Guild_Add_descriptor_;
}

const C2GS_Guild_Add& C2GS_Guild_Add::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

C2GS_Guild_Add* C2GS_Guild_Add::default_instance_ = NULL;

C2GS_Guild_Add* C2GS_Guild_Add::New() const {
  return new C2GS_Guild_Add;
}

void C2GS_Guild_Add::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    icon_ = 0u;
    your_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Guild_Add::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string guild_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_notice;
        break;
      }

      // optional string notice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_icon;
        break;
      }

      // required uint32 icon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &icon_)));
          set_has_icon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_your_guid;
        break;
      }

      // required uint64 your_guid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_your_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &your_guid_)));
          set_has_your_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Guild_Add::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string guild_name = 1;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->guild_name(), output);
  }

  // optional string notice = 2;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->notice(), output);
  }

  // required uint32 icon = 3;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->icon(), output);
  }

  // required uint64 your_guid = 4;
  if (has_your_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->your_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Guild_Add::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string guild_name = 1;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guild_name(), target);
  }

  // optional string notice = 2;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->notice(), target);
  }

  // required uint32 icon = 3;
  if (has_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->icon(), target);
  }

  // required uint64 your_guid = 4;
  if (has_your_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->your_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Guild_Add::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string guild_name = 1;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

    // optional string notice = 2;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // required uint32 icon = 3;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->icon());
    }

    // required uint64 your_guid = 4;
    if (has_your_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->your_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Guild_Add::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Guild_Add* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Guild_Add*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Guild_Add::MergeFrom(const C2GS_Guild_Add& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_your_guid()) {
      set_your_guid(from.your_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Guild_Add::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Guild_Add::CopyFrom(const C2GS_Guild_Add& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Guild_Add::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void C2GS_Guild_Add::Swap(C2GS_Guild_Add* other) {
  if (other != this) {
    std::swap(guild_name_, other->guild_name_);
    std::swap(notice_, other->notice_);
    std::swap(icon_, other->icon_);
    std::swap(your_guid_, other->your_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Guild_Add::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Guild_Add_descriptor_;
  metadata.reflection = C2GS_Guild_Add_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Guild_Add_Respon::kAddResultFieldNumber;
const int GS2C_Guild_Add_Respon::kGuildFieldNumber;
#endif  // !_MSC_VER

GS2C_Guild_Add_Respon::GS2C_Guild_Add_Respon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Guild_Add_Respon::InitAsDefaultInstance() {
  guild_ = const_cast< ::pb::GxDB_Guild*>(&::pb::GxDB_Guild::default_instance());
}

GS2C_Guild_Add_Respon::GS2C_Guild_Add_Respon(const GS2C_Guild_Add_Respon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Guild_Add_Respon::SharedCtor() {
  _cached_size_ = 0;
  add_result_ = 0;
  guild_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Guild_Add_Respon::~GS2C_Guild_Add_Respon() {
  SharedDtor();
}

void GS2C_Guild_Add_Respon::SharedDtor() {
  if (this != default_instance_) {
    delete guild_;
  }
}

void GS2C_Guild_Add_Respon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Guild_Add_Respon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Guild_Add_Respon_descriptor_;
}

const GS2C_Guild_Add_Respon& GS2C_Guild_Add_Respon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GS2C_Guild_Add_Respon* GS2C_Guild_Add_Respon::default_instance_ = NULL;

GS2C_Guild_Add_Respon* GS2C_Guild_Add_Respon::New() const {
  return new GS2C_Guild_Add_Respon;
}

void GS2C_Guild_Add_Respon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    add_result_ = 0;
    if (has_guild()) {
      if (guild_ != NULL) guild_->::pb::GxDB_Guild::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Guild_Add_Respon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 add_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_result_)));
          set_has_add_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guild;
        break;
      }

      // optional .pb.GxDB_Guild guild = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Guild_Add_Respon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 add_result = 1;
  if (has_add_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->add_result(), output);
  }

  // optional .pb.GxDB_Guild guild = 2;
  if (has_guild()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guild(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Guild_Add_Respon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 add_result = 1;
  if (has_add_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->add_result(), target);
  }

  // optional .pb.GxDB_Guild guild = 2;
  if (has_guild()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guild(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Guild_Add_Respon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 add_result = 1;
    if (has_add_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_result());
    }

    // optional .pb.GxDB_Guild guild = 2;
    if (has_guild()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guild());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Guild_Add_Respon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Guild_Add_Respon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Guild_Add_Respon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Guild_Add_Respon::MergeFrom(const GS2C_Guild_Add_Respon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_add_result()) {
      set_add_result(from.add_result());
    }
    if (from.has_guild()) {
      mutable_guild()->::pb::GxDB_Guild::MergeFrom(from.guild());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Guild_Add_Respon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Guild_Add_Respon::CopyFrom(const GS2C_Guild_Add_Respon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Guild_Add_Respon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_guild()) {
    if (!this->guild().IsInitialized()) return false;
  }
  return true;
}

void GS2C_Guild_Add_Respon::Swap(GS2C_Guild_Add_Respon* other) {
  if (other != this) {
    std::swap(add_result_, other->add_result_);
    std::swap(guild_, other->guild_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Guild_Add_Respon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Guild_Add_Respon_descriptor_;
  metadata.reflection = GS2C_Guild_Add_Respon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Guild_Change::kPlayerIdFieldNumber;
const int GS2C_Guild_Change::kNameFieldNumber;
#endif  // !_MSC_VER

GS2C_Guild_Change::GS2C_Guild_Change()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Guild_Change::InitAsDefaultInstance() {
}

GS2C_Guild_Change::GS2C_Guild_Change(const GS2C_Guild_Change& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Guild_Change::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Guild_Change::~GS2C_Guild_Change() {
  SharedDtor();
}

void GS2C_Guild_Change::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GS2C_Guild_Change::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Guild_Change::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Guild_Change_descriptor_;
}

const GS2C_Guild_Change& GS2C_Guild_Change::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GS2C_Guild_Change* GS2C_Guild_Change::default_instance_ = NULL;

GS2C_Guild_Change* GS2C_Guild_Change::New() const {
  return new GS2C_Guild_Change;
}

void GS2C_Guild_Change::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Guild_Change::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Guild_Change::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Guild_Change::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Guild_Change::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Guild_Change::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Guild_Change* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Guild_Change*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Guild_Change::MergeFrom(const GS2C_Guild_Change& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Guild_Change::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Guild_Change::CopyFrom(const GS2C_Guild_Change& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Guild_Change::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GS2C_Guild_Change::Swap(GS2C_Guild_Change* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Guild_Change::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Guild_Change_descriptor_;
  metadata.reflection = GS2C_Guild_Change_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Get_Guild_Info_Respon::kIsGetFieldNumber;
const int GS2C_Get_Guild_Info_Respon::kGuildFieldNumber;
#endif  // !_MSC_VER

GS2C_Get_Guild_Info_Respon::GS2C_Get_Guild_Info_Respon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Get_Guild_Info_Respon::InitAsDefaultInstance() {
  guild_ = const_cast< ::pb::GxDB_Guild*>(&::pb::GxDB_Guild::default_instance());
}

GS2C_Get_Guild_Info_Respon::GS2C_Get_Guild_Info_Respon(const GS2C_Get_Guild_Info_Respon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Get_Guild_Info_Respon::SharedCtor() {
  _cached_size_ = 0;
  isget_ = false;
  guild_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Get_Guild_Info_Respon::~GS2C_Get_Guild_Info_Respon() {
  SharedDtor();
}

void GS2C_Get_Guild_Info_Respon::SharedDtor() {
  if (this != default_instance_) {
    delete guild_;
  }
}

void GS2C_Get_Guild_Info_Respon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Get_Guild_Info_Respon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Get_Guild_Info_Respon_descriptor_;
}

const GS2C_Get_Guild_Info_Respon& GS2C_Get_Guild_Info_Respon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GS2C_Get_Guild_Info_Respon* GS2C_Get_Guild_Info_Respon::default_instance_ = NULL;

GS2C_Get_Guild_Info_Respon* GS2C_Get_Guild_Info_Respon::New() const {
  return new GS2C_Get_Guild_Info_Respon;
}

void GS2C_Get_Guild_Info_Respon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isget_ = false;
    if (has_guild()) {
      if (guild_ != NULL) guild_->::pb::GxDB_Guild::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Get_Guild_Info_Respon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isGet = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isget_)));
          set_has_isget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guild;
        break;
      }

      // optional .pb.GxDB_Guild guild = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Get_Guild_Info_Respon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isGet = 1;
  if (has_isget()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isget(), output);
  }

  // optional .pb.GxDB_Guild guild = 2;
  if (has_guild()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guild(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Get_Guild_Info_Respon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isGet = 1;
  if (has_isget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isget(), target);
  }

  // optional .pb.GxDB_Guild guild = 2;
  if (has_guild()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guild(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Get_Guild_Info_Respon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isGet = 1;
    if (has_isget()) {
      total_size += 1 + 1;
    }

    // optional .pb.GxDB_Guild guild = 2;
    if (has_guild()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guild());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Get_Guild_Info_Respon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Get_Guild_Info_Respon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Get_Guild_Info_Respon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Get_Guild_Info_Respon::MergeFrom(const GS2C_Get_Guild_Info_Respon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isget()) {
      set_isget(from.isget());
    }
    if (from.has_guild()) {
      mutable_guild()->::pb::GxDB_Guild::MergeFrom(from.guild());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Get_Guild_Info_Respon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Get_Guild_Info_Respon::CopyFrom(const GS2C_Get_Guild_Info_Respon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Get_Guild_Info_Respon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_guild()) {
    if (!this->guild().IsInitialized()) return false;
  }
  return true;
}

void GS2C_Get_Guild_Info_Respon::Swap(GS2C_Get_Guild_Info_Respon* other) {
  if (other != this) {
    std::swap(isget_, other->isget_);
    std::swap(guild_, other->guild_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Get_Guild_Info_Respon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Get_Guild_Info_Respon_descriptor_;
  metadata.reflection = GS2C_Get_Guild_Info_Respon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_GuildInvite::kIsByGuidFieldNumber;
const int C2GS_GuildInvite::kIsByGuildFieldNumber;
const int C2GS_GuildInvite::kInviteeNameFieldNumber;
const int C2GS_GuildInvite::kInviteeGuidFieldNumber;
const int C2GS_GuildInvite::kYourGuidFieldNumber;
#endif  // !_MSC_VER

C2GS_GuildInvite::C2GS_GuildInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_GuildInvite::InitAsDefaultInstance() {
}

C2GS_GuildInvite::C2GS_GuildInvite(const C2GS_GuildInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_GuildInvite::SharedCtor() {
  _cached_size_ = 0;
  is_by_guid_ = true;
  is_by_guild_ = false;
  invitee_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  invitee_guid_ = GOOGLE_ULONGLONG(0);
  your_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_GuildInvite::~C2GS_GuildInvite() {
  SharedDtor();
}

void C2GS_GuildInvite::SharedDtor() {
  if (invitee_name_ != &::google::protobuf::internal::kEmptyString) {
    delete invitee_name_;
  }
  if (this != default_instance_) {
  }
}

void C2GS_GuildInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_GuildInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_GuildInvite_descriptor_;
}

const C2GS_GuildInvite& C2GS_GuildInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

C2GS_GuildInvite* C2GS_GuildInvite::default_instance_ = NULL;

C2GS_GuildInvite* C2GS_GuildInvite::New() const {
  return new C2GS_GuildInvite;
}

void C2GS_GuildInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_by_guid_ = true;
    is_by_guild_ = false;
    if (has_invitee_name()) {
      if (invitee_name_ != &::google::protobuf::internal::kEmptyString) {
        invitee_name_->clear();
      }
    }
    invitee_guid_ = GOOGLE_ULONGLONG(0);
    your_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_GuildInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_by_guid = 1 [default = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_by_guid_)));
          set_has_is_by_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_by_guild;
        break;
      }

      // optional bool is_by_guild = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_by_guild:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_by_guild_)));
          set_has_is_by_guild();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_invitee_name;
        break;
      }

      // optional string invitee_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invitee_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invitee_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->invitee_name().data(), this->invitee_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_invitee_guid;
        break;
      }

      // optional uint64 invitee_guid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invitee_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invitee_guid_)));
          set_has_invitee_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_your_guid;
        break;
      }

      // required uint64 your_guid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_your_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &your_guid_)));
          set_has_your_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_GuildInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_by_guid = 1 [default = true];
  if (has_is_by_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_by_guid(), output);
  }

  // optional bool is_by_guild = 2 [default = false];
  if (has_is_by_guild()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_by_guild(), output);
  }

  // optional string invitee_name = 3;
  if (has_invitee_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invitee_name().data(), this->invitee_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->invitee_name(), output);
  }

  // optional uint64 invitee_guid = 4;
  if (has_invitee_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->invitee_guid(), output);
  }

  // required uint64 your_guid = 5;
  if (has_your_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->your_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_GuildInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_by_guid = 1 [default = true];
  if (has_is_by_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_by_guid(), target);
  }

  // optional bool is_by_guild = 2 [default = false];
  if (has_is_by_guild()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_by_guild(), target);
  }

  // optional string invitee_name = 3;
  if (has_invitee_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invitee_name().data(), this->invitee_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->invitee_name(), target);
  }

  // optional uint64 invitee_guid = 4;
  if (has_invitee_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->invitee_guid(), target);
  }

  // required uint64 your_guid = 5;
  if (has_your_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->your_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_GuildInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_by_guid = 1 [default = true];
    if (has_is_by_guid()) {
      total_size += 1 + 1;
    }

    // optional bool is_by_guild = 2 [default = false];
    if (has_is_by_guild()) {
      total_size += 1 + 1;
    }

    // optional string invitee_name = 3;
    if (has_invitee_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invitee_name());
    }

    // optional uint64 invitee_guid = 4;
    if (has_invitee_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->invitee_guid());
    }

    // required uint64 your_guid = 5;
    if (has_your_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->your_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_GuildInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_GuildInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_GuildInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_GuildInvite::MergeFrom(const C2GS_GuildInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_by_guid()) {
      set_is_by_guid(from.is_by_guid());
    }
    if (from.has_is_by_guild()) {
      set_is_by_guild(from.is_by_guild());
    }
    if (from.has_invitee_name()) {
      set_invitee_name(from.invitee_name());
    }
    if (from.has_invitee_guid()) {
      set_invitee_guid(from.invitee_guid());
    }
    if (from.has_your_guid()) {
      set_your_guid(from.your_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_GuildInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_GuildInvite::CopyFrom(const C2GS_GuildInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_GuildInvite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;

  return true;
}

void C2GS_GuildInvite::Swap(C2GS_GuildInvite* other) {
  if (other != this) {
    std::swap(is_by_guid_, other->is_by_guid_);
    std::swap(is_by_guild_, other->is_by_guild_);
    std::swap(invitee_name_, other->invitee_name_);
    std::swap(invitee_guid_, other->invitee_guid_);
    std::swap(your_guid_, other->your_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_GuildInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_GuildInvite_descriptor_;
  metadata.reflection = C2GS_GuildInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_GuildInvite::kInviterGuidFieldNumber;
const int GS2C_GuildInvite::kInviterNameFieldNumber;
const int GS2C_GuildInvite::kIsInviteFieldNumber;
const int GS2C_GuildInvite::kGuildNameFieldNumber;
const int GS2C_GuildInvite::kTitleFieldNumber;
const int GS2C_GuildInvite::kToGuidFieldNumber;
#endif  // !_MSC_VER

GS2C_GuildInvite::GS2C_GuildInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_GuildInvite::InitAsDefaultInstance() {
}

GS2C_GuildInvite::GS2C_GuildInvite(const GS2C_GuildInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_GuildInvite::SharedCtor() {
  _cached_size_ = 0;
  inviter_guid_ = GOOGLE_ULONGLONG(0);
  inviter_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_invite_ = true;
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = 0u;
  to_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_GuildInvite::~GS2C_GuildInvite() {
  SharedDtor();
}

void GS2C_GuildInvite::SharedDtor() {
  if (inviter_name_ != &::google::protobuf::internal::kEmptyString) {
    delete inviter_name_;
  }
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (this != default_instance_) {
  }
}

void GS2C_GuildInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_GuildInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_GuildInvite_descriptor_;
}

const GS2C_GuildInvite& GS2C_GuildInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GS2C_GuildInvite* GS2C_GuildInvite::default_instance_ = NULL;

GS2C_GuildInvite* GS2C_GuildInvite::New() const {
  return new GS2C_GuildInvite;
}

void GS2C_GuildInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    inviter_guid_ = GOOGLE_ULONGLONG(0);
    if (has_inviter_name()) {
      if (inviter_name_ != &::google::protobuf::internal::kEmptyString) {
        inviter_name_->clear();
      }
    }
    is_invite_ = true;
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
    title_ = 0u;
    to_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_GuildInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 inviter_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inviter_guid_)));
          set_has_inviter_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_inviter_name;
        break;
      }

      // required string inviter_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inviter_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inviter_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inviter_name().data(), this->inviter_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_invite;
        break;
      }

      // optional bool is_invite = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_invite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_invite_)));
          set_has_is_invite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_guild_name;
        break;
      }

      // optional string guild_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_title;
        break;
      }

      // optional uint32 title = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_to_guid;
        break;
      }

      // optional uint64 to_guid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_guid_)));
          set_has_to_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_GuildInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 inviter_guid = 1;
  if (has_inviter_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->inviter_guid(), output);
  }

  // required string inviter_name = 2;
  if (has_inviter_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inviter_name().data(), this->inviter_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->inviter_name(), output);
  }

  // optional bool is_invite = 3 [default = true];
  if (has_is_invite()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_invite(), output);
  }

  // optional string guild_name = 4;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->guild_name(), output);
  }

  // optional uint32 title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->title(), output);
  }

  // optional uint64 to_guid = 6;
  if (has_to_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->to_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_GuildInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 inviter_guid = 1;
  if (has_inviter_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->inviter_guid(), target);
  }

  // required string inviter_name = 2;
  if (has_inviter_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inviter_name().data(), this->inviter_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->inviter_name(), target);
  }

  // optional bool is_invite = 3 [default = true];
  if (has_is_invite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_invite(), target);
  }

  // optional string guild_name = 4;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guild_name(), target);
  }

  // optional uint32 title = 5;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->title(), target);
  }

  // optional uint64 to_guid = 6;
  if (has_to_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->to_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_GuildInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 inviter_guid = 1;
    if (has_inviter_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inviter_guid());
    }

    // required string inviter_name = 2;
    if (has_inviter_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inviter_name());
    }

    // optional bool is_invite = 3 [default = true];
    if (has_is_invite()) {
      total_size += 1 + 1;
    }

    // optional string guild_name = 4;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

    // optional uint32 title = 5;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->title());
    }

    // optional uint64 to_guid = 6;
    if (has_to_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_GuildInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_GuildInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_GuildInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_GuildInvite::MergeFrom(const GS2C_GuildInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inviter_guid()) {
      set_inviter_guid(from.inviter_guid());
    }
    if (from.has_inviter_name()) {
      set_inviter_name(from.inviter_name());
    }
    if (from.has_is_invite()) {
      set_is_invite(from.is_invite());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_to_guid()) {
      set_to_guid(from.to_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_GuildInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_GuildInvite::CopyFrom(const GS2C_GuildInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_GuildInvite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GS2C_GuildInvite::Swap(GS2C_GuildInvite* other) {
  if (other != this) {
    std::swap(inviter_guid_, other->inviter_guid_);
    std::swap(inviter_name_, other->inviter_name_);
    std::swap(is_invite_, other->is_invite_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(title_, other->title_);
    std::swap(to_guid_, other->to_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_GuildInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_GuildInvite_descriptor_;
  metadata.reflection = GS2C_GuildInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_GuildInviteResponse::kIsAcceptFieldNumber;
const int C2GS_GuildInviteResponse::kInviterGuidFieldNumber;
const int C2GS_GuildInviteResponse::kYourGuidFieldNumber;
#endif  // !_MSC_VER

C2GS_GuildInviteResponse::C2GS_GuildInviteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_GuildInviteResponse::InitAsDefaultInstance() {
}

C2GS_GuildInviteResponse::C2GS_GuildInviteResponse(const C2GS_GuildInviteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_GuildInviteResponse::SharedCtor() {
  _cached_size_ = 0;
  is_accept_ = false;
  inviter_guid_ = GOOGLE_ULONGLONG(0);
  your_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_GuildInviteResponse::~C2GS_GuildInviteResponse() {
  SharedDtor();
}

void C2GS_GuildInviteResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_GuildInviteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_GuildInviteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_GuildInviteResponse_descriptor_;
}

const C2GS_GuildInviteResponse& C2GS_GuildInviteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

C2GS_GuildInviteResponse* C2GS_GuildInviteResponse::default_instance_ = NULL;

C2GS_GuildInviteResponse* C2GS_GuildInviteResponse::New() const {
  return new C2GS_GuildInviteResponse;
}

void C2GS_GuildInviteResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_accept_ = false;
    inviter_guid_ = GOOGLE_ULONGLONG(0);
    your_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_GuildInviteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_accept = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_accept_)));
          set_has_is_accept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_inviter_guid;
        break;
      }

      // required uint64 inviter_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviter_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inviter_guid_)));
          set_has_inviter_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_your_guid;
        break;
      }

      // required uint64 your_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_your_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &your_guid_)));
          set_has_your_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_GuildInviteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_accept = 1;
  if (has_is_accept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_accept(), output);
  }

  // required uint64 inviter_guid = 2;
  if (has_inviter_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->inviter_guid(), output);
  }

  // required uint64 your_guid = 3;
  if (has_your_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->your_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_GuildInviteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_accept = 1;
  if (has_is_accept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_accept(), target);
  }

  // required uint64 inviter_guid = 2;
  if (has_inviter_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->inviter_guid(), target);
  }

  // required uint64 your_guid = 3;
  if (has_your_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->your_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_GuildInviteResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_accept = 1;
    if (has_is_accept()) {
      total_size += 1 + 1;
    }

    // required uint64 inviter_guid = 2;
    if (has_inviter_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inviter_guid());
    }

    // required uint64 your_guid = 3;
    if (has_your_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->your_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_GuildInviteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_GuildInviteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_GuildInviteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_GuildInviteResponse::MergeFrom(const C2GS_GuildInviteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_accept()) {
      set_is_accept(from.is_accept());
    }
    if (from.has_inviter_guid()) {
      set_inviter_guid(from.inviter_guid());
    }
    if (from.has_your_guid()) {
      set_your_guid(from.your_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_GuildInviteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_GuildInviteResponse::CopyFrom(const C2GS_GuildInviteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_GuildInviteResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void C2GS_GuildInviteResponse::Swap(C2GS_GuildInviteResponse* other) {
  if (other != this) {
    std::swap(is_accept_, other->is_accept_);
    std::swap(inviter_guid_, other->inviter_guid_);
    std::swap(your_guid_, other->your_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_GuildInviteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_GuildInviteResponse_descriptor_;
  metadata.reflection = C2GS_GuildInviteResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_GuildInviteResponse::kIsAcceptFieldNumber;
const int GS2C_GuildInviteResponse::kPlayerGuidsFieldNumber;
const int GS2C_GuildInviteResponse::kErroCodeFieldNumber;
#endif  // !_MSC_VER

GS2C_GuildInviteResponse::GS2C_GuildInviteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_GuildInviteResponse::InitAsDefaultInstance() {
}

GS2C_GuildInviteResponse::GS2C_GuildInviteResponse(const GS2C_GuildInviteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_GuildInviteResponse::SharedCtor() {
  _cached_size_ = 0;
  is_accept_ = false;
  erro_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_GuildInviteResponse::~GS2C_GuildInviteResponse() {
  SharedDtor();
}

void GS2C_GuildInviteResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_GuildInviteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_GuildInviteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_GuildInviteResponse_descriptor_;
}

const GS2C_GuildInviteResponse& GS2C_GuildInviteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GS2C_GuildInviteResponse* GS2C_GuildInviteResponse::default_instance_ = NULL;

GS2C_GuildInviteResponse* GS2C_GuildInviteResponse::New() const {
  return new GS2C_GuildInviteResponse;
}

void GS2C_GuildInviteResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_accept_ = false;
    erro_code_ = 0;
  }
  player_guids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_GuildInviteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_accept = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_accept_)));
          set_has_is_accept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_guids;
        break;
      }

      // repeated uint64 player_guids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_guids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_player_guids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_player_guids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_guids;
        if (input->ExpectTag(24)) goto parse_erro_code;
        break;
      }

      // optional int32 erro_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_erro_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &erro_code_)));
          set_has_erro_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_GuildInviteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_accept = 1;
  if (has_is_accept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_accept(), output);
  }

  // repeated uint64 player_guids = 2;
  for (int i = 0; i < this->player_guids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->player_guids(i), output);
  }

  // optional int32 erro_code = 3;
  if (has_erro_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->erro_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_GuildInviteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_accept = 1;
  if (has_is_accept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_accept(), target);
  }

  // repeated uint64 player_guids = 2;
  for (int i = 0; i < this->player_guids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->player_guids(i), target);
  }

  // optional int32 erro_code = 3;
  if (has_erro_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->erro_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_GuildInviteResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_accept = 1;
    if (has_is_accept()) {
      total_size += 1 + 1;
    }

    // optional int32 erro_code = 3;
    if (has_erro_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->erro_code());
    }

  }
  // repeated uint64 player_guids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->player_guids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->player_guids(i));
    }
    total_size += 1 * this->player_guids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_GuildInviteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_GuildInviteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_GuildInviteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_GuildInviteResponse::MergeFrom(const GS2C_GuildInviteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_guids_.MergeFrom(from.player_guids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_accept()) {
      set_is_accept(from.is_accept());
    }
    if (from.has_erro_code()) {
      set_erro_code(from.erro_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_GuildInviteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_GuildInviteResponse::CopyFrom(const GS2C_GuildInviteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_GuildInviteResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_GuildInviteResponse::Swap(GS2C_GuildInviteResponse* other) {
  if (other != this) {
    std::swap(is_accept_, other->is_accept_);
    player_guids_.Swap(&other->player_guids_);
    std::swap(erro_code_, other->erro_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_GuildInviteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_GuildInviteResponse_descriptor_;
  metadata.reflection = GS2C_GuildInviteResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_GuildInviterApproval::kIsAcceptFieldNumber;
const int C2GS_GuildInviterApproval::kInviterGuidFieldNumber;
const int C2GS_GuildInviterApproval::kYourGuidFieldNumber;
#endif  // !_MSC_VER

C2GS_GuildInviterApproval::C2GS_GuildInviterApproval()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_GuildInviterApproval::InitAsDefaultInstance() {
}

C2GS_GuildInviterApproval::C2GS_GuildInviterApproval(const C2GS_GuildInviterApproval& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_GuildInviterApproval::SharedCtor() {
  _cached_size_ = 0;
  is_accept_ = false;
  inviter_guid_ = GOOGLE_ULONGLONG(0);
  your_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_GuildInviterApproval::~C2GS_GuildInviterApproval() {
  SharedDtor();
}

void C2GS_GuildInviterApproval::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_GuildInviterApproval::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_GuildInviterApproval::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_GuildInviterApproval_descriptor_;
}

const C2GS_GuildInviterApproval& C2GS_GuildInviterApproval::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

C2GS_GuildInviterApproval* C2GS_GuildInviterApproval::default_instance_ = NULL;

C2GS_GuildInviterApproval* C2GS_GuildInviterApproval::New() const {
  return new C2GS_GuildInviterApproval;
}

void C2GS_GuildInviterApproval::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_accept_ = false;
    inviter_guid_ = GOOGLE_ULONGLONG(0);
    your_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_GuildInviterApproval::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_accept = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_accept_)));
          set_has_is_accept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_inviter_guid;
        break;
      }

      // required uint64 inviter_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviter_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inviter_guid_)));
          set_has_inviter_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_your_guid;
        break;
      }

      // required uint64 your_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_your_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &your_guid_)));
          set_has_your_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_GuildInviterApproval::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_accept = 1;
  if (has_is_accept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_accept(), output);
  }

  // required uint64 inviter_guid = 2;
  if (has_inviter_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->inviter_guid(), output);
  }

  // required uint64 your_guid = 3;
  if (has_your_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->your_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_GuildInviterApproval::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_accept = 1;
  if (has_is_accept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_accept(), target);
  }

  // required uint64 inviter_guid = 2;
  if (has_inviter_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->inviter_guid(), target);
  }

  // required uint64 your_guid = 3;
  if (has_your_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->your_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_GuildInviterApproval::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_accept = 1;
    if (has_is_accept()) {
      total_size += 1 + 1;
    }

    // required uint64 inviter_guid = 2;
    if (has_inviter_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inviter_guid());
    }

    // required uint64 your_guid = 3;
    if (has_your_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->your_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_GuildInviterApproval::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_GuildInviterApproval* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_GuildInviterApproval*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_GuildInviterApproval::MergeFrom(const C2GS_GuildInviterApproval& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_accept()) {
      set_is_accept(from.is_accept());
    }
    if (from.has_inviter_guid()) {
      set_inviter_guid(from.inviter_guid());
    }
    if (from.has_your_guid()) {
      set_your_guid(from.your_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_GuildInviterApproval::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_GuildInviterApproval::CopyFrom(const C2GS_GuildInviterApproval& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_GuildInviterApproval::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void C2GS_GuildInviterApproval::Swap(C2GS_GuildInviterApproval* other) {
  if (other != this) {
    std::swap(is_accept_, other->is_accept_);
    std::swap(inviter_guid_, other->inviter_guid_);
    std::swap(your_guid_, other->your_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_GuildInviterApproval::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_GuildInviterApproval_descriptor_;
  metadata.reflection = C2GS_GuildInviterApproval_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_GuildInviterApprovalResponse::kIsAcceptFieldNumber;
const int GS2C_GuildInviterApprovalResponse::kPlayerGuidsFieldNumber;
const int GS2C_GuildInviterApprovalResponse::kErroCodeFieldNumber;
#endif  // !_MSC_VER

GS2C_GuildInviterApprovalResponse::GS2C_GuildInviterApprovalResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_GuildInviterApprovalResponse::InitAsDefaultInstance() {
}

GS2C_GuildInviterApprovalResponse::GS2C_GuildInviterApprovalResponse(const GS2C_GuildInviterApprovalResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_GuildInviterApprovalResponse::SharedCtor() {
  _cached_size_ = 0;
  is_accept_ = false;
  erro_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_GuildInviterApprovalResponse::~GS2C_GuildInviterApprovalResponse() {
  SharedDtor();
}

void GS2C_GuildInviterApprovalResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_GuildInviterApprovalResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_GuildInviterApprovalResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_GuildInviterApprovalResponse_descriptor_;
}

const GS2C_GuildInviterApprovalResponse& GS2C_GuildInviterApprovalResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GS2C_GuildInviterApprovalResponse* GS2C_GuildInviterApprovalResponse::default_instance_ = NULL;

GS2C_GuildInviterApprovalResponse* GS2C_GuildInviterApprovalResponse::New() const {
  return new GS2C_GuildInviterApprovalResponse;
}

void GS2C_GuildInviterApprovalResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_accept_ = false;
    erro_code_ = 0;
  }
  player_guids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_GuildInviterApprovalResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_accept = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_accept_)));
          set_has_is_accept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_guids;
        break;
      }

      // repeated uint64 player_guids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_guids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_player_guids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_player_guids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_guids;
        if (input->ExpectTag(24)) goto parse_erro_code;
        break;
      }

      // optional int32 erro_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_erro_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &erro_code_)));
          set_has_erro_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_GuildInviterApprovalResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_accept = 1;
  if (has_is_accept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_accept(), output);
  }

  // repeated uint64 player_guids = 2;
  for (int i = 0; i < this->player_guids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->player_guids(i), output);
  }

  // optional int32 erro_code = 3;
  if (has_erro_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->erro_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_GuildInviterApprovalResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_accept = 1;
  if (has_is_accept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_accept(), target);
  }

  // repeated uint64 player_guids = 2;
  for (int i = 0; i < this->player_guids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->player_guids(i), target);
  }

  // optional int32 erro_code = 3;
  if (has_erro_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->erro_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_GuildInviterApprovalResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_accept = 1;
    if (has_is_accept()) {
      total_size += 1 + 1;
    }

    // optional int32 erro_code = 3;
    if (has_erro_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->erro_code());
    }

  }
  // repeated uint64 player_guids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->player_guids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->player_guids(i));
    }
    total_size += 1 * this->player_guids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_GuildInviterApprovalResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_GuildInviterApprovalResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_GuildInviterApprovalResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_GuildInviterApprovalResponse::MergeFrom(const GS2C_GuildInviterApprovalResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_guids_.MergeFrom(from.player_guids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_accept()) {
      set_is_accept(from.is_accept());
    }
    if (from.has_erro_code()) {
      set_erro_code(from.erro_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_GuildInviterApprovalResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_GuildInviterApprovalResponse::CopyFrom(const GS2C_GuildInviterApprovalResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_GuildInviterApprovalResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_GuildInviterApprovalResponse::Swap(GS2C_GuildInviterApprovalResponse* other) {
  if (other != this) {
    std::swap(is_accept_, other->is_accept_);
    player_guids_.Swap(&other->player_guids_);
    std::swap(erro_code_, other->erro_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_GuildInviterApprovalResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_GuildInviterApprovalResponse_descriptor_;
  metadata.reflection = GS2C_GuildInviterApprovalResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_GuildInvite_Repeat::kCurGuildGuidFieldNumber;
const int GS2C_GuildInvite_Repeat::kCurGuildNameFieldNumber;
const int GS2C_GuildInvite_Repeat::kNewGuildGuidFieldNumber;
const int GS2C_GuildInvite_Repeat::kNewGuildNameFieldNumber;
const int GS2C_GuildInvite_Repeat::kInviterIdFieldNumber;
const int GS2C_GuildInvite_Repeat::kInviteeIdFieldNumber;
const int GS2C_GuildInvite_Repeat::kIsInviteFieldNumber;
#endif  // !_MSC_VER

GS2C_GuildInvite_Repeat::GS2C_GuildInvite_Repeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_GuildInvite_Repeat::InitAsDefaultInstance() {
}

GS2C_GuildInvite_Repeat::GS2C_GuildInvite_Repeat(const GS2C_GuildInvite_Repeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_GuildInvite_Repeat::SharedCtor() {
  _cached_size_ = 0;
  cur_guild_guid_ = GOOGLE_ULONGLONG(0);
  cur_guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  new_guild_guid_ = GOOGLE_ULONGLONG(0);
  new_guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inviterid_ = GOOGLE_ULONGLONG(0);
  inviteeid_ = GOOGLE_ULONGLONG(0);
  is_invite_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_GuildInvite_Repeat::~GS2C_GuildInvite_Repeat() {
  SharedDtor();
}

void GS2C_GuildInvite_Repeat::SharedDtor() {
  if (cur_guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete cur_guild_name_;
  }
  if (new_guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete new_guild_name_;
  }
  if (this != default_instance_) {
  }
}

void GS2C_GuildInvite_Repeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_GuildInvite_Repeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_GuildInvite_Repeat_descriptor_;
}

const GS2C_GuildInvite_Repeat& GS2C_GuildInvite_Repeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GS2C_GuildInvite_Repeat* GS2C_GuildInvite_Repeat::default_instance_ = NULL;

GS2C_GuildInvite_Repeat* GS2C_GuildInvite_Repeat::New() const {
  return new GS2C_GuildInvite_Repeat;
}

void GS2C_GuildInvite_Repeat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_guild_guid_ = GOOGLE_ULONGLONG(0);
    if (has_cur_guild_name()) {
      if (cur_guild_name_ != &::google::protobuf::internal::kEmptyString) {
        cur_guild_name_->clear();
      }
    }
    new_guild_guid_ = GOOGLE_ULONGLONG(0);
    if (has_new_guild_name()) {
      if (new_guild_name_ != &::google::protobuf::internal::kEmptyString) {
        new_guild_name_->clear();
      }
    }
    inviterid_ = GOOGLE_ULONGLONG(0);
    inviteeid_ = GOOGLE_ULONGLONG(0);
    is_invite_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_GuildInvite_Repeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cur_guild_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_guild_guid_)));
          set_has_cur_guild_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cur_guild_name;
        break;
      }

      // required string cur_guild_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cur_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cur_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cur_guild_name().data(), this->cur_guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_new_guild_guid;
        break;
      }

      // required uint64 new_guild_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_guild_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_guild_guid_)));
          set_has_new_guild_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_new_guild_name;
        break;
      }

      // required string new_guild_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_guild_name().data(), this->new_guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_inviterId;
        break;
      }

      // required uint64 inviterId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inviterid_)));
          set_has_inviterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_inviteeId;
        break;
      }

      // required uint64 inviteeId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviteeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inviteeid_)));
          set_has_inviteeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_invite;
        break;
      }

      // optional bool is_invite = 7 [default = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_invite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_invite_)));
          set_has_is_invite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_GuildInvite_Repeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cur_guild_guid = 1;
  if (has_cur_guild_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cur_guild_guid(), output);
  }

  // required string cur_guild_name = 2;
  if (has_cur_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cur_guild_name().data(), this->cur_guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cur_guild_name(), output);
  }

  // required uint64 new_guild_guid = 3;
  if (has_new_guild_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->new_guild_guid(), output);
  }

  // required string new_guild_name = 4;
  if (has_new_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_guild_name().data(), this->new_guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->new_guild_name(), output);
  }

  // required uint64 inviterId = 5;
  if (has_inviterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->inviterid(), output);
  }

  // required uint64 inviteeId = 6;
  if (has_inviteeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->inviteeid(), output);
  }

  // optional bool is_invite = 7 [default = true];
  if (has_is_invite()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_invite(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_GuildInvite_Repeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cur_guild_guid = 1;
  if (has_cur_guild_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cur_guild_guid(), target);
  }

  // required string cur_guild_name = 2;
  if (has_cur_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cur_guild_name().data(), this->cur_guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cur_guild_name(), target);
  }

  // required uint64 new_guild_guid = 3;
  if (has_new_guild_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->new_guild_guid(), target);
  }

  // required string new_guild_name = 4;
  if (has_new_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_guild_name().data(), this->new_guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->new_guild_name(), target);
  }

  // required uint64 inviterId = 5;
  if (has_inviterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->inviterid(), target);
  }

  // required uint64 inviteeId = 6;
  if (has_inviteeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->inviteeid(), target);
  }

  // optional bool is_invite = 7 [default = true];
  if (has_is_invite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_invite(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_GuildInvite_Repeat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cur_guild_guid = 1;
    if (has_cur_guild_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_guild_guid());
    }

    // required string cur_guild_name = 2;
    if (has_cur_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cur_guild_name());
    }

    // required uint64 new_guild_guid = 3;
    if (has_new_guild_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->new_guild_guid());
    }

    // required string new_guild_name = 4;
    if (has_new_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_guild_name());
    }

    // required uint64 inviterId = 5;
    if (has_inviterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inviterid());
    }

    // required uint64 inviteeId = 6;
    if (has_inviteeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inviteeid());
    }

    // optional bool is_invite = 7 [default = true];
    if (has_is_invite()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_GuildInvite_Repeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_GuildInvite_Repeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_GuildInvite_Repeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_GuildInvite_Repeat::MergeFrom(const GS2C_GuildInvite_Repeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_guild_guid()) {
      set_cur_guild_guid(from.cur_guild_guid());
    }
    if (from.has_cur_guild_name()) {
      set_cur_guild_name(from.cur_guild_name());
    }
    if (from.has_new_guild_guid()) {
      set_new_guild_guid(from.new_guild_guid());
    }
    if (from.has_new_guild_name()) {
      set_new_guild_name(from.new_guild_name());
    }
    if (from.has_inviterid()) {
      set_inviterid(from.inviterid());
    }
    if (from.has_inviteeid()) {
      set_inviteeid(from.inviteeid());
    }
    if (from.has_is_invite()) {
      set_is_invite(from.is_invite());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_GuildInvite_Repeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_GuildInvite_Repeat::CopyFrom(const GS2C_GuildInvite_Repeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_GuildInvite_Repeat::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void GS2C_GuildInvite_Repeat::Swap(GS2C_GuildInvite_Repeat* other) {
  if (other != this) {
    std::swap(cur_guild_guid_, other->cur_guild_guid_);
    std::swap(cur_guild_name_, other->cur_guild_name_);
    std::swap(new_guild_guid_, other->new_guild_guid_);
    std::swap(new_guild_name_, other->new_guild_name_);
    std::swap(inviterid_, other->inviterid_);
    std::swap(inviteeid_, other->inviteeid_);
    std::swap(is_invite_, other->is_invite_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_GuildInvite_Repeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_GuildInvite_Repeat_descriptor_;
  metadata.reflection = GS2C_GuildInvite_Repeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_GuildInvite_Repeat_Operate::kIsReplaceFieldNumber;
const int C2GS_GuildInvite_Repeat_Operate::kCurGuildGuidFieldNumber;
const int C2GS_GuildInvite_Repeat_Operate::kCurGuildNameFieldNumber;
const int C2GS_GuildInvite_Repeat_Operate::kNewGuildGuidFieldNumber;
const int C2GS_GuildInvite_Repeat_Operate::kNewGuildNameFieldNumber;
const int C2GS_GuildInvite_Repeat_Operate::kInviterIdFieldNumber;
const int C2GS_GuildInvite_Repeat_Operate::kInviteeIdFieldNumber;
const int C2GS_GuildInvite_Repeat_Operate::kIsInviteFieldNumber;
const int C2GS_GuildInvite_Repeat_Operate::kYourGuidFieldNumber;
#endif  // !_MSC_VER

C2GS_GuildInvite_Repeat_Operate::C2GS_GuildInvite_Repeat_Operate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_GuildInvite_Repeat_Operate::InitAsDefaultInstance() {
}

C2GS_GuildInvite_Repeat_Operate::C2GS_GuildInvite_Repeat_Operate(const C2GS_GuildInvite_Repeat_Operate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_GuildInvite_Repeat_Operate::SharedCtor() {
  _cached_size_ = 0;
  is_replace_ = false;
  cur_guild_guid_ = GOOGLE_ULONGLONG(0);
  cur_guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  new_guild_guid_ = GOOGLE_ULONGLONG(0);
  new_guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inviterid_ = GOOGLE_ULONGLONG(0);
  inviteeid_ = GOOGLE_ULONGLONG(0);
  is_invite_ = true;
  your_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_GuildInvite_Repeat_Operate::~C2GS_GuildInvite_Repeat_Operate() {
  SharedDtor();
}

void C2GS_GuildInvite_Repeat_Operate::SharedDtor() {
  if (cur_guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete cur_guild_name_;
  }
  if (new_guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete new_guild_name_;
  }
  if (this != default_instance_) {
  }
}

void C2GS_GuildInvite_Repeat_Operate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_GuildInvite_Repeat_Operate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_GuildInvite_Repeat_Operate_descriptor_;
}

const C2GS_GuildInvite_Repeat_Operate& C2GS_GuildInvite_Repeat_Operate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

C2GS_GuildInvite_Repeat_Operate* C2GS_GuildInvite_Repeat_Operate::default_instance_ = NULL;

C2GS_GuildInvite_Repeat_Operate* C2GS_GuildInvite_Repeat_Operate::New() const {
  return new C2GS_GuildInvite_Repeat_Operate;
}

void C2GS_GuildInvite_Repeat_Operate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_replace_ = false;
    cur_guild_guid_ = GOOGLE_ULONGLONG(0);
    if (has_cur_guild_name()) {
      if (cur_guild_name_ != &::google::protobuf::internal::kEmptyString) {
        cur_guild_name_->clear();
      }
    }
    new_guild_guid_ = GOOGLE_ULONGLONG(0);
    if (has_new_guild_name()) {
      if (new_guild_name_ != &::google::protobuf::internal::kEmptyString) {
        new_guild_name_->clear();
      }
    }
    inviterid_ = GOOGLE_ULONGLONG(0);
    inviteeid_ = GOOGLE_ULONGLONG(0);
    is_invite_ = true;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    your_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_GuildInvite_Repeat_Operate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_replace = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_replace_)));
          set_has_is_replace();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_guild_guid;
        break;
      }

      // required uint64 cur_guild_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_guild_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_guild_guid_)));
          set_has_cur_guild_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cur_guild_name;
        break;
      }

      // required string cur_guild_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cur_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cur_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cur_guild_name().data(), this->cur_guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_new_guild_guid;
        break;
      }

      // required uint64 new_guild_guid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_guild_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_guild_guid_)));
          set_has_new_guild_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_new_guild_name;
        break;
      }

      // required string new_guild_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_guild_name().data(), this->new_guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_inviterId;
        break;
      }

      // required uint64 inviterId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inviterid_)));
          set_has_inviterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_inviteeId;
        break;
      }

      // required uint64 inviteeId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviteeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inviteeid_)));
          set_has_inviteeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_is_invite;
        break;
      }

      // optional bool is_invite = 8 [default = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_invite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_invite_)));
          set_has_is_invite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_your_guid;
        break;
      }

      // required uint64 your_guid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_your_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &your_guid_)));
          set_has_your_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_GuildInvite_Repeat_Operate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_replace = 1 [default = false];
  if (has_is_replace()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_replace(), output);
  }

  // required uint64 cur_guild_guid = 2;
  if (has_cur_guild_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cur_guild_guid(), output);
  }

  // required string cur_guild_name = 3;
  if (has_cur_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cur_guild_name().data(), this->cur_guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cur_guild_name(), output);
  }

  // required uint64 new_guild_guid = 4;
  if (has_new_guild_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->new_guild_guid(), output);
  }

  // required string new_guild_name = 5;
  if (has_new_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_guild_name().data(), this->new_guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->new_guild_name(), output);
  }

  // required uint64 inviterId = 6;
  if (has_inviterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->inviterid(), output);
  }

  // required uint64 inviteeId = 7;
  if (has_inviteeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->inviteeid(), output);
  }

  // optional bool is_invite = 8 [default = true];
  if (has_is_invite()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_invite(), output);
  }

  // required uint64 your_guid = 9;
  if (has_your_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->your_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_GuildInvite_Repeat_Operate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_replace = 1 [default = false];
  if (has_is_replace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_replace(), target);
  }

  // required uint64 cur_guild_guid = 2;
  if (has_cur_guild_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cur_guild_guid(), target);
  }

  // required string cur_guild_name = 3;
  if (has_cur_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cur_guild_name().data(), this->cur_guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cur_guild_name(), target);
  }

  // required uint64 new_guild_guid = 4;
  if (has_new_guild_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->new_guild_guid(), target);
  }

  // required string new_guild_name = 5;
  if (has_new_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_guild_name().data(), this->new_guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->new_guild_name(), target);
  }

  // required uint64 inviterId = 6;
  if (has_inviterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->inviterid(), target);
  }

  // required uint64 inviteeId = 7;
  if (has_inviteeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->inviteeid(), target);
  }

  // optional bool is_invite = 8 [default = true];
  if (has_is_invite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_invite(), target);
  }

  // required uint64 your_guid = 9;
  if (has_your_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->your_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_GuildInvite_Repeat_Operate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_replace = 1 [default = false];
    if (has_is_replace()) {
      total_size += 1 + 1;
    }

    // required uint64 cur_guild_guid = 2;
    if (has_cur_guild_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_guild_guid());
    }

    // required string cur_guild_name = 3;
    if (has_cur_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cur_guild_name());
    }

    // required uint64 new_guild_guid = 4;
    if (has_new_guild_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->new_guild_guid());
    }

    // required string new_guild_name = 5;
    if (has_new_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_guild_name());
    }

    // required uint64 inviterId = 6;
    if (has_inviterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inviterid());
    }

    // required uint64 inviteeId = 7;
    if (has_inviteeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inviteeid());
    }

    // optional bool is_invite = 8 [default = true];
    if (has_is_invite()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint64 your_guid = 9;
    if (has_your_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->your_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_GuildInvite_Repeat_Operate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_GuildInvite_Repeat_Operate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_GuildInvite_Repeat_Operate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_GuildInvite_Repeat_Operate::MergeFrom(const C2GS_GuildInvite_Repeat_Operate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_replace()) {
      set_is_replace(from.is_replace());
    }
    if (from.has_cur_guild_guid()) {
      set_cur_guild_guid(from.cur_guild_guid());
    }
    if (from.has_cur_guild_name()) {
      set_cur_guild_name(from.cur_guild_name());
    }
    if (from.has_new_guild_guid()) {
      set_new_guild_guid(from.new_guild_guid());
    }
    if (from.has_new_guild_name()) {
      set_new_guild_name(from.new_guild_name());
    }
    if (from.has_inviterid()) {
      set_inviterid(from.inviterid());
    }
    if (from.has_inviteeid()) {
      set_inviteeid(from.inviteeid());
    }
    if (from.has_is_invite()) {
      set_is_invite(from.is_invite());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_your_guid()) {
      set_your_guid(from.your_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_GuildInvite_Repeat_Operate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_GuildInvite_Repeat_Operate::CopyFrom(const C2GS_GuildInvite_Repeat_Operate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_GuildInvite_Repeat_Operate::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000017e) != 0x0000017e) return false;

  return true;
}

void C2GS_GuildInvite_Repeat_Operate::Swap(C2GS_GuildInvite_Repeat_Operate* other) {
  if (other != this) {
    std::swap(is_replace_, other->is_replace_);
    std::swap(cur_guild_guid_, other->cur_guild_guid_);
    std::swap(cur_guild_name_, other->cur_guild_name_);
    std::swap(new_guild_guid_, other->new_guild_guid_);
    std::swap(new_guild_name_, other->new_guild_name_);
    std::swap(inviterid_, other->inviterid_);
    std::swap(inviteeid_, other->inviteeid_);
    std::swap(is_invite_, other->is_invite_);
    std::swap(your_guid_, other->your_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_GuildInvite_Repeat_Operate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_GuildInvite_Repeat_Operate_descriptor_;
  metadata.reflection = C2GS_GuildInvite_Repeat_Operate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_GuildInvite_Repeat_Operate_Respon::kIsReplaceFieldNumber;
#endif  // !_MSC_VER

GS2C_GuildInvite_Repeat_Operate_Respon::GS2C_GuildInvite_Repeat_Operate_Respon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_GuildInvite_Repeat_Operate_Respon::InitAsDefaultInstance() {
}

GS2C_GuildInvite_Repeat_Operate_Respon::GS2C_GuildInvite_Repeat_Operate_Respon(const GS2C_GuildInvite_Repeat_Operate_Respon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_GuildInvite_Repeat_Operate_Respon::SharedCtor() {
  _cached_size_ = 0;
  is_replace_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_GuildInvite_Repeat_Operate_Respon::~GS2C_GuildInvite_Repeat_Operate_Respon() {
  SharedDtor();
}

void GS2C_GuildInvite_Repeat_Operate_Respon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_GuildInvite_Repeat_Operate_Respon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_GuildInvite_Repeat_Operate_Respon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_GuildInvite_Repeat_Operate_Respon_descriptor_;
}

const GS2C_GuildInvite_Repeat_Operate_Respon& GS2C_GuildInvite_Repeat_Operate_Respon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GS2C_GuildInvite_Repeat_Operate_Respon* GS2C_GuildInvite_Repeat_Operate_Respon::default_instance_ = NULL;

GS2C_GuildInvite_Repeat_Operate_Respon* GS2C_GuildInvite_Repeat_Operate_Respon::New() const {
  return new GS2C_GuildInvite_Repeat_Operate_Respon;
}

void GS2C_GuildInvite_Repeat_Operate_Respon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_replace_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_GuildInvite_Repeat_Operate_Respon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_replace = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_replace_)));
          set_has_is_replace();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_GuildInvite_Repeat_Operate_Respon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_replace = 1 [default = false];
  if (has_is_replace()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_replace(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_GuildInvite_Repeat_Operate_Respon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_replace = 1 [default = false];
  if (has_is_replace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_replace(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_GuildInvite_Repeat_Operate_Respon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_replace = 1 [default = false];
    if (has_is_replace()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_GuildInvite_Repeat_Operate_Respon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_GuildInvite_Repeat_Operate_Respon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_GuildInvite_Repeat_Operate_Respon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_GuildInvite_Repeat_Operate_Respon::MergeFrom(const GS2C_GuildInvite_Repeat_Operate_Respon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_replace()) {
      set_is_replace(from.is_replace());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_GuildInvite_Repeat_Operate_Respon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_GuildInvite_Repeat_Operate_Respon::CopyFrom(const GS2C_GuildInvite_Repeat_Operate_Respon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_GuildInvite_Repeat_Operate_Respon::IsInitialized() const {

  return true;
}

void GS2C_GuildInvite_Repeat_Operate_Respon::Swap(GS2C_GuildInvite_Repeat_Operate_Respon* other) {
  if (other != this) {
    std::swap(is_replace_, other->is_replace_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_GuildInvite_Repeat_Operate_Respon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_GuildInvite_Repeat_Operate_Respon_descriptor_;
  metadata.reflection = GS2C_GuildInvite_Repeat_Operate_Respon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_GuildQuit::kQuitMemberGuidFieldNumber;
const int C2GS_GuildQuit::kYourGuidFieldNumber;
#endif  // !_MSC_VER

C2GS_GuildQuit::C2GS_GuildQuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_GuildQuit::InitAsDefaultInstance() {
}

C2GS_GuildQuit::C2GS_GuildQuit(const C2GS_GuildQuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_GuildQuit::SharedCtor() {
  _cached_size_ = 0;
  quit_member_guid_ = GOOGLE_ULONGLONG(0);
  your_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_GuildQuit::~C2GS_GuildQuit() {
  SharedDtor();
}

void C2GS_GuildQuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_GuildQuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_GuildQuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_GuildQuit_descriptor_;
}

const C2GS_GuildQuit& C2GS_GuildQuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

C2GS_GuildQuit* C2GS_GuildQuit::default_instance_ = NULL;

C2GS_GuildQuit* C2GS_GuildQuit::New() const {
  return new C2GS_GuildQuit;
}

void C2GS_GuildQuit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quit_member_guid_ = GOOGLE_ULONGLONG(0);
    your_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_GuildQuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 quit_member_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quit_member_guid_)));
          set_has_quit_member_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_your_guid;
        break;
      }

      // required uint64 your_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_your_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &your_guid_)));
          set_has_your_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_GuildQuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 quit_member_guid = 1;
  if (has_quit_member_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->quit_member_guid(), output);
  }

  // required uint64 your_guid = 2;
  if (has_your_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->your_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_GuildQuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 quit_member_guid = 1;
  if (has_quit_member_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->quit_member_guid(), target);
  }

  // required uint64 your_guid = 2;
  if (has_your_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->your_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_GuildQuit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 quit_member_guid = 1;
    if (has_quit_member_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quit_member_guid());
    }

    // required uint64 your_guid = 2;
    if (has_your_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->your_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_GuildQuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_GuildQuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_GuildQuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_GuildQuit::MergeFrom(const C2GS_GuildQuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quit_member_guid()) {
      set_quit_member_guid(from.quit_member_guid());
    }
    if (from.has_your_guid()) {
      set_your_guid(from.your_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_GuildQuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_GuildQuit::CopyFrom(const C2GS_GuildQuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_GuildQuit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2GS_GuildQuit::Swap(C2GS_GuildQuit* other) {
  if (other != this) {
    std::swap(quit_member_guid_, other->quit_member_guid_);
    std::swap(your_guid_, other->your_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_GuildQuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_GuildQuit_descriptor_;
  metadata.reflection = C2GS_GuildQuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_GuildQuit_Respon::kQuitResultFieldNumber;
#endif  // !_MSC_VER

GS2C_GuildQuit_Respon::GS2C_GuildQuit_Respon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_GuildQuit_Respon::InitAsDefaultInstance() {
}

GS2C_GuildQuit_Respon::GS2C_GuildQuit_Respon(const GS2C_GuildQuit_Respon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_GuildQuit_Respon::SharedCtor() {
  _cached_size_ = 0;
  quit_result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_GuildQuit_Respon::~GS2C_GuildQuit_Respon() {
  SharedDtor();
}

void GS2C_GuildQuit_Respon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_GuildQuit_Respon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_GuildQuit_Respon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_GuildQuit_Respon_descriptor_;
}

const GS2C_GuildQuit_Respon& GS2C_GuildQuit_Respon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GS2C_GuildQuit_Respon* GS2C_GuildQuit_Respon::default_instance_ = NULL;

GS2C_GuildQuit_Respon* GS2C_GuildQuit_Respon::New() const {
  return new GS2C_GuildQuit_Respon;
}

void GS2C_GuildQuit_Respon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quit_result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_GuildQuit_Respon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 quit_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quit_result_)));
          set_has_quit_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_GuildQuit_Respon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 quit_result = 1;
  if (has_quit_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->quit_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_GuildQuit_Respon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 quit_result = 1;
  if (has_quit_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->quit_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_GuildQuit_Respon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 quit_result = 1;
    if (has_quit_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quit_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_GuildQuit_Respon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_GuildQuit_Respon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_GuildQuit_Respon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_GuildQuit_Respon::MergeFrom(const GS2C_GuildQuit_Respon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quit_result()) {
      set_quit_result(from.quit_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_GuildQuit_Respon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_GuildQuit_Respon::CopyFrom(const GS2C_GuildQuit_Respon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_GuildQuit_Respon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_GuildQuit_Respon::Swap(GS2C_GuildQuit_Respon* other) {
  if (other != this) {
    std::swap(quit_result_, other->quit_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_GuildQuit_Respon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_GuildQuit_Respon_descriptor_;
  metadata.reflection = GS2C_GuildQuit_Respon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_GuildMemberQuit::kIsKickedFieldNumber;
const int GS2C_GuildMemberQuit::kQuitGuidFieldNumber;
const int GS2C_GuildMemberQuit::kIsDisbandFieldNumber;
const int GS2C_GuildMemberQuit::kIsQuitFieldNumber;
#endif  // !_MSC_VER

GS2C_GuildMemberQuit::GS2C_GuildMemberQuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_GuildMemberQuit::InitAsDefaultInstance() {
}

GS2C_GuildMemberQuit::GS2C_GuildMemberQuit(const GS2C_GuildMemberQuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_GuildMemberQuit::SharedCtor() {
  _cached_size_ = 0;
  is_kicked_ = false;
  quit_guid_ = GOOGLE_ULONGLONG(0);
  is_disband_ = false;
  is_quit_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_GuildMemberQuit::~GS2C_GuildMemberQuit() {
  SharedDtor();
}

void GS2C_GuildMemberQuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_GuildMemberQuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_GuildMemberQuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_GuildMemberQuit_descriptor_;
}

const GS2C_GuildMemberQuit& GS2C_GuildMemberQuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GS2C_GuildMemberQuit* GS2C_GuildMemberQuit::default_instance_ = NULL;

GS2C_GuildMemberQuit* GS2C_GuildMemberQuit::New() const {
  return new GS2C_GuildMemberQuit;
}

void GS2C_GuildMemberQuit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_kicked_ = false;
    quit_guid_ = GOOGLE_ULONGLONG(0);
    is_disband_ = false;
    is_quit_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_GuildMemberQuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_kicked = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_kicked_)));
          set_has_is_kicked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quit_guid;
        break;
      }

      // required uint64 quit_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quit_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quit_guid_)));
          set_has_quit_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_disband;
        break;
      }

      // optional bool is_disband = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_disband:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_disband_)));
          set_has_is_disband();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_quit;
        break;
      }

      // optional bool is_quit = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_quit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_quit_)));
          set_has_is_quit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_GuildMemberQuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_kicked = 1 [default = false];
  if (has_is_kicked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_kicked(), output);
  }

  // required uint64 quit_guid = 2;
  if (has_quit_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->quit_guid(), output);
  }

  // optional bool is_disband = 3 [default = false];
  if (has_is_disband()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_disband(), output);
  }

  // optional bool is_quit = 4 [default = false];
  if (has_is_quit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_quit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_GuildMemberQuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_kicked = 1 [default = false];
  if (has_is_kicked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_kicked(), target);
  }

  // required uint64 quit_guid = 2;
  if (has_quit_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->quit_guid(), target);
  }

  // optional bool is_disband = 3 [default = false];
  if (has_is_disband()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_disband(), target);
  }

  // optional bool is_quit = 4 [default = false];
  if (has_is_quit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_quit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_GuildMemberQuit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_kicked = 1 [default = false];
    if (has_is_kicked()) {
      total_size += 1 + 1;
    }

    // required uint64 quit_guid = 2;
    if (has_quit_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quit_guid());
    }

    // optional bool is_disband = 3 [default = false];
    if (has_is_disband()) {
      total_size += 1 + 1;
    }

    // optional bool is_quit = 4 [default = false];
    if (has_is_quit()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_GuildMemberQuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_GuildMemberQuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_GuildMemberQuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_GuildMemberQuit::MergeFrom(const GS2C_GuildMemberQuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_kicked()) {
      set_is_kicked(from.is_kicked());
    }
    if (from.has_quit_guid()) {
      set_quit_guid(from.quit_guid());
    }
    if (from.has_is_disband()) {
      set_is_disband(from.is_disband());
    }
    if (from.has_is_quit()) {
      set_is_quit(from.is_quit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_GuildMemberQuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_GuildMemberQuit::CopyFrom(const GS2C_GuildMemberQuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_GuildMemberQuit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GS2C_GuildMemberQuit::Swap(GS2C_GuildMemberQuit* other) {
  if (other != this) {
    std::swap(is_kicked_, other->is_kicked_);
    std::swap(quit_guid_, other->quit_guid_);
    std::swap(is_disband_, other->is_disband_);
    std::swap(is_quit_, other->is_quit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_GuildMemberQuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_GuildMemberQuit_descriptor_;
  metadata.reflection = GS2C_GuildMemberQuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_GuildDisband::kIsKickedFieldNumber;
const int GS2C_GuildDisband::kIsDisbandFieldNumber;
const int GS2C_GuildDisband::kIsQuitFieldNumber;
#endif  // !_MSC_VER

GS2C_GuildDisband::GS2C_GuildDisband()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_GuildDisband::InitAsDefaultInstance() {
}

GS2C_GuildDisband::GS2C_GuildDisband(const GS2C_GuildDisband& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_GuildDisband::SharedCtor() {
  _cached_size_ = 0;
  is_kicked_ = false;
  is_disband_ = false;
  is_quit_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_GuildDisband::~GS2C_GuildDisband() {
  SharedDtor();
}

void GS2C_GuildDisband::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_GuildDisband::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_GuildDisband::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_GuildDisband_descriptor_;
}

const GS2C_GuildDisband& GS2C_GuildDisband::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GS2C_GuildDisband* GS2C_GuildDisband::default_instance_ = NULL;

GS2C_GuildDisband* GS2C_GuildDisband::New() const {
  return new GS2C_GuildDisband;
}

void GS2C_GuildDisband::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_kicked_ = false;
    is_disband_ = false;
    is_quit_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_GuildDisband::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_kicked = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_kicked_)));
          set_has_is_kicked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_disband;
        break;
      }

      // optional bool is_disband = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_disband:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_disband_)));
          set_has_is_disband();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_quit;
        break;
      }

      // optional bool is_quit = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_quit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_quit_)));
          set_has_is_quit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_GuildDisband::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_kicked = 1 [default = false];
  if (has_is_kicked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_kicked(), output);
  }

  // optional bool is_disband = 2 [default = false];
  if (has_is_disband()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_disband(), output);
  }

  // optional bool is_quit = 3 [default = false];
  if (has_is_quit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_quit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_GuildDisband::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_kicked = 1 [default = false];
  if (has_is_kicked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_kicked(), target);
  }

  // optional bool is_disband = 2 [default = false];
  if (has_is_disband()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_disband(), target);
  }

  // optional bool is_quit = 3 [default = false];
  if (has_is_quit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_quit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_GuildDisband::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_kicked = 1 [default = false];
    if (has_is_kicked()) {
      total_size += 1 + 1;
    }

    // optional bool is_disband = 2 [default = false];
    if (has_is_disband()) {
      total_size += 1 + 1;
    }

    // optional bool is_quit = 3 [default = false];
    if (has_is_quit()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_GuildDisband::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_GuildDisband* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_GuildDisband*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_GuildDisband::MergeFrom(const GS2C_GuildDisband& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_kicked()) {
      set_is_kicked(from.is_kicked());
    }
    if (from.has_is_disband()) {
      set_is_disband(from.is_disband());
    }
    if (from.has_is_quit()) {
      set_is_quit(from.is_quit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_GuildDisband::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_GuildDisband::CopyFrom(const GS2C_GuildDisband& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_GuildDisband::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_GuildDisband::Swap(GS2C_GuildDisband* other) {
  if (other != this) {
    std::swap(is_kicked_, other->is_kicked_);
    std::swap(is_disband_, other->is_disband_);
    std::swap(is_quit_, other->is_quit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_GuildDisband::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_GuildDisband_descriptor_;
  metadata.reflection = GS2C_GuildDisband_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_GuildUpdate::kUpdateFlagFieldNumber;
const int C2GS_GuildUpdate::kGuildFieldNumber;
const int C2GS_GuildUpdate::kYourGuidFieldNumber;
#endif  // !_MSC_VER

C2GS_GuildUpdate::C2GS_GuildUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_GuildUpdate::InitAsDefaultInstance() {
  guild_ = const_cast< ::pb::GxDB_Guild*>(&::pb::GxDB_Guild::default_instance());
}

C2GS_GuildUpdate::C2GS_GuildUpdate(const C2GS_GuildUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_GuildUpdate::SharedCtor() {
  _cached_size_ = 0;
  update_flag_ = 0u;
  guild_ = NULL;
  your_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_GuildUpdate::~C2GS_GuildUpdate() {
  SharedDtor();
}

void C2GS_GuildUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete guild_;
  }
}

void C2GS_GuildUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_GuildUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_GuildUpdate_descriptor_;
}

const C2GS_GuildUpdate& C2GS_GuildUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

C2GS_GuildUpdate* C2GS_GuildUpdate::default_instance_ = NULL;

C2GS_GuildUpdate* C2GS_GuildUpdate::New() const {
  return new C2GS_GuildUpdate;
}

void C2GS_GuildUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    update_flag_ = 0u;
    if (has_guild()) {
      if (guild_ != NULL) guild_->::pb::GxDB_Guild::Clear();
    }
    your_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_GuildUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 update_flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_flag_)));
          set_has_update_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guild;
        break;
      }

      // optional .pb.GxDB_Guild guild = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_your_guid;
        break;
      }

      // required uint64 your_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_your_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &your_guid_)));
          set_has_your_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_GuildUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 update_flag = 1;
  if (has_update_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->update_flag(), output);
  }

  // optional .pb.GxDB_Guild guild = 2;
  if (has_guild()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guild(), output);
  }

  // required uint64 your_guid = 3;
  if (has_your_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->your_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_GuildUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 update_flag = 1;
  if (has_update_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->update_flag(), target);
  }

  // optional .pb.GxDB_Guild guild = 2;
  if (has_guild()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guild(), target);
  }

  // required uint64 your_guid = 3;
  if (has_your_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->your_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_GuildUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 update_flag = 1;
    if (has_update_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_flag());
    }

    // optional .pb.GxDB_Guild guild = 2;
    if (has_guild()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guild());
    }

    // required uint64 your_guid = 3;
    if (has_your_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->your_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_GuildUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_GuildUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_GuildUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_GuildUpdate::MergeFrom(const C2GS_GuildUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_update_flag()) {
      set_update_flag(from.update_flag());
    }
    if (from.has_guild()) {
      mutable_guild()->::pb::GxDB_Guild::MergeFrom(from.guild());
    }
    if (from.has_your_guid()) {
      set_your_guid(from.your_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_GuildUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_GuildUpdate::CopyFrom(const C2GS_GuildUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_GuildUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_guild()) {
    if (!this->guild().IsInitialized()) return false;
  }
  return true;
}

void C2GS_GuildUpdate::Swap(C2GS_GuildUpdate* other) {
  if (other != this) {
    std::swap(update_flag_, other->update_flag_);
    std::swap(guild_, other->guild_);
    std::swap(your_guid_, other->your_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_GuildUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_GuildUpdate_descriptor_;
  metadata.reflection = C2GS_GuildUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_GuildUpdate::kUpdateFlagFieldNumber;
const int GS2C_GuildUpdate::kGuildFieldNumber;
const int GS2C_GuildUpdate::kUpdateGuidFieldNumber;
#endif  // !_MSC_VER

GS2C_GuildUpdate::GS2C_GuildUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_GuildUpdate::InitAsDefaultInstance() {
  guild_ = const_cast< ::pb::GxDB_Guild*>(&::pb::GxDB_Guild::default_instance());
}

GS2C_GuildUpdate::GS2C_GuildUpdate(const GS2C_GuildUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_GuildUpdate::SharedCtor() {
  _cached_size_ = 0;
  update_flag_ = 0u;
  guild_ = NULL;
  update_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_GuildUpdate::~GS2C_GuildUpdate() {
  SharedDtor();
}

void GS2C_GuildUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete guild_;
  }
}

void GS2C_GuildUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_GuildUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_GuildUpdate_descriptor_;
}

const GS2C_GuildUpdate& GS2C_GuildUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GS2C_GuildUpdate* GS2C_GuildUpdate::default_instance_ = NULL;

GS2C_GuildUpdate* GS2C_GuildUpdate::New() const {
  return new GS2C_GuildUpdate;
}

void GS2C_GuildUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    update_flag_ = 0u;
    if (has_guild()) {
      if (guild_ != NULL) guild_->::pb::GxDB_Guild::Clear();
    }
    update_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_GuildUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 update_flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_flag_)));
          set_has_update_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guild;
        break;
      }

      // optional .pb.GxDB_Guild guild = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_update_guid;
        break;
      }

      // required uint64 update_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_guid_)));
          set_has_update_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_GuildUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 update_flag = 1;
  if (has_update_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->update_flag(), output);
  }

  // optional .pb.GxDB_Guild guild = 2;
  if (has_guild()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guild(), output);
  }

  // required uint64 update_guid = 3;
  if (has_update_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->update_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_GuildUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 update_flag = 1;
  if (has_update_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->update_flag(), target);
  }

  // optional .pb.GxDB_Guild guild = 2;
  if (has_guild()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guild(), target);
  }

  // required uint64 update_guid = 3;
  if (has_update_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->update_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_GuildUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 update_flag = 1;
    if (has_update_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_flag());
    }

    // optional .pb.GxDB_Guild guild = 2;
    if (has_guild()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guild());
    }

    // required uint64 update_guid = 3;
    if (has_update_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_GuildUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_GuildUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_GuildUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_GuildUpdate::MergeFrom(const GS2C_GuildUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_update_flag()) {
      set_update_flag(from.update_flag());
    }
    if (from.has_guild()) {
      mutable_guild()->::pb::GxDB_Guild::MergeFrom(from.guild());
    }
    if (from.has_update_guid()) {
      set_update_guid(from.update_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_GuildUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_GuildUpdate::CopyFrom(const GS2C_GuildUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_GuildUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_guild()) {
    if (!this->guild().IsInitialized()) return false;
  }
  return true;
}

void GS2C_GuildUpdate::Swap(GS2C_GuildUpdate* other) {
  if (other != this) {
    std::swap(update_flag_, other->update_flag_);
    std::swap(guild_, other->guild_);
    std::swap(update_guid_, other->update_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_GuildUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_GuildUpdate_descriptor_;
  metadata.reflection = GS2C_GuildUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Guild_Autority_Operate::kTargetGuidFieldNumber;
const int C2GS_Guild_Autority_Operate::kTargetNameFieldNumber;
const int C2GS_Guild_Autority_Operate::kYourGuidFieldNumber;
const int C2GS_Guild_Autority_Operate::kYourNameFieldNumber;
const int C2GS_Guild_Autority_Operate::kOperateTypeFieldNumber;
#endif  // !_MSC_VER

C2GS_Guild_Autority_Operate::C2GS_Guild_Autority_Operate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Guild_Autority_Operate::InitAsDefaultInstance() {
}

C2GS_Guild_Autority_Operate::C2GS_Guild_Autority_Operate(const C2GS_Guild_Autority_Operate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Guild_Autority_Operate::SharedCtor() {
  _cached_size_ = 0;
  target_guid_ = GOOGLE_ULONGLONG(0);
  target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  your_guid_ = GOOGLE_ULONGLONG(0);
  your_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  operate_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Guild_Autority_Operate::~C2GS_Guild_Autority_Operate() {
  SharedDtor();
}

void C2GS_Guild_Autority_Operate::SharedDtor() {
  if (target_name_ != &::google::protobuf::internal::kEmptyString) {
    delete target_name_;
  }
  if (your_name_ != &::google::protobuf::internal::kEmptyString) {
    delete your_name_;
  }
  if (this != default_instance_) {
  }
}

void C2GS_Guild_Autority_Operate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Guild_Autority_Operate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Guild_Autority_Operate_descriptor_;
}

const C2GS_Guild_Autority_Operate& C2GS_Guild_Autority_Operate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

C2GS_Guild_Autority_Operate* C2GS_Guild_Autority_Operate::default_instance_ = NULL;

C2GS_Guild_Autority_Operate* C2GS_Guild_Autority_Operate::New() const {
  return new C2GS_Guild_Autority_Operate;
}

void C2GS_Guild_Autority_Operate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_guid_ = GOOGLE_ULONGLONG(0);
    if (has_target_name()) {
      if (target_name_ != &::google::protobuf::internal::kEmptyString) {
        target_name_->clear();
      }
    }
    your_guid_ = GOOGLE_ULONGLONG(0);
    if (has_your_name()) {
      if (your_name_ != &::google::protobuf::internal::kEmptyString) {
        your_name_->clear();
      }
    }
    operate_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Guild_Autority_Operate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 target_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_guid_)));
          set_has_target_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target_name;
        break;
      }

      // required string target_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target_name().data(), this->target_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_your_guid;
        break;
      }

      // required uint64 your_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_your_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &your_guid_)));
          set_has_your_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_your_name;
        break;
      }

      // required string your_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_your_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_your_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->your_name().data(), this->your_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_operate_type;
        break;
      }

      // optional uint32 operate_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_type_)));
          set_has_operate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Guild_Autority_Operate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 target_guid = 1;
  if (has_target_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->target_guid(), output);
  }

  // required string target_name = 2;
  if (has_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_name().data(), this->target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->target_name(), output);
  }

  // required uint64 your_guid = 3;
  if (has_your_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->your_guid(), output);
  }

  // required string your_name = 4;
  if (has_your_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->your_name().data(), this->your_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->your_name(), output);
  }

  // optional uint32 operate_type = 5;
  if (has_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->operate_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Guild_Autority_Operate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 target_guid = 1;
  if (has_target_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->target_guid(), target);
  }

  // required string target_name = 2;
  if (has_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_name().data(), this->target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->target_name(), target);
  }

  // required uint64 your_guid = 3;
  if (has_your_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->your_guid(), target);
  }

  // required string your_name = 4;
  if (has_your_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->your_name().data(), this->your_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->your_name(), target);
  }

  // optional uint32 operate_type = 5;
  if (has_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->operate_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Guild_Autority_Operate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 target_guid = 1;
    if (has_target_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_guid());
    }

    // required string target_name = 2;
    if (has_target_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_name());
    }

    // required uint64 your_guid = 3;
    if (has_your_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->your_guid());
    }

    // required string your_name = 4;
    if (has_your_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->your_name());
    }

    // optional uint32 operate_type = 5;
    if (has_operate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Guild_Autority_Operate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Guild_Autority_Operate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Guild_Autority_Operate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Guild_Autority_Operate::MergeFrom(const C2GS_Guild_Autority_Operate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_guid()) {
      set_target_guid(from.target_guid());
    }
    if (from.has_target_name()) {
      set_target_name(from.target_name());
    }
    if (from.has_your_guid()) {
      set_your_guid(from.your_guid());
    }
    if (from.has_your_name()) {
      set_your_name(from.your_name());
    }
    if (from.has_operate_type()) {
      set_operate_type(from.operate_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Guild_Autority_Operate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Guild_Autority_Operate::CopyFrom(const C2GS_Guild_Autority_Operate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Guild_Autority_Operate::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void C2GS_Guild_Autority_Operate::Swap(C2GS_Guild_Autority_Operate* other) {
  if (other != this) {
    std::swap(target_guid_, other->target_guid_);
    std::swap(target_name_, other->target_name_);
    std::swap(your_guid_, other->your_guid_);
    std::swap(your_name_, other->your_name_);
    std::swap(operate_type_, other->operate_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Guild_Autority_Operate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Guild_Autority_Operate_descriptor_;
  metadata.reflection = C2GS_Guild_Autority_Operate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Guild_Autority_Operate_Respon::kTargetGuidFieldNumber;
const int GS2C_Guild_Autority_Operate_Respon::kTargetNameFieldNumber;
const int GS2C_Guild_Autority_Operate_Respon::kOperaterGuidFieldNumber;
const int GS2C_Guild_Autority_Operate_Respon::kOperaterNameFieldNumber;
const int GS2C_Guild_Autority_Operate_Respon::kOperateTypeFieldNumber;
const int GS2C_Guild_Autority_Operate_Respon::kOperateResultFieldNumber;
#endif  // !_MSC_VER

GS2C_Guild_Autority_Operate_Respon::GS2C_Guild_Autority_Operate_Respon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Guild_Autority_Operate_Respon::InitAsDefaultInstance() {
}

GS2C_Guild_Autority_Operate_Respon::GS2C_Guild_Autority_Operate_Respon(const GS2C_Guild_Autority_Operate_Respon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Guild_Autority_Operate_Respon::SharedCtor() {
  _cached_size_ = 0;
  target_guid_ = GOOGLE_ULONGLONG(0);
  target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  operater_guid_ = GOOGLE_ULONGLONG(0);
  operater_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  operate_type_ = 0u;
  operate_result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Guild_Autority_Operate_Respon::~GS2C_Guild_Autority_Operate_Respon() {
  SharedDtor();
}

void GS2C_Guild_Autority_Operate_Respon::SharedDtor() {
  if (target_name_ != &::google::protobuf::internal::kEmptyString) {
    delete target_name_;
  }
  if (operater_name_ != &::google::protobuf::internal::kEmptyString) {
    delete operater_name_;
  }
  if (this != default_instance_) {
  }
}

void GS2C_Guild_Autority_Operate_Respon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Guild_Autority_Operate_Respon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Guild_Autority_Operate_Respon_descriptor_;
}

const GS2C_Guild_Autority_Operate_Respon& GS2C_Guild_Autority_Operate_Respon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GS2C_Guild_Autority_Operate_Respon* GS2C_Guild_Autority_Operate_Respon::default_instance_ = NULL;

GS2C_Guild_Autority_Operate_Respon* GS2C_Guild_Autority_Operate_Respon::New() const {
  return new GS2C_Guild_Autority_Operate_Respon;
}

void GS2C_Guild_Autority_Operate_Respon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_guid_ = GOOGLE_ULONGLONG(0);
    if (has_target_name()) {
      if (target_name_ != &::google::protobuf::internal::kEmptyString) {
        target_name_->clear();
      }
    }
    operater_guid_ = GOOGLE_ULONGLONG(0);
    if (has_operater_name()) {
      if (operater_name_ != &::google::protobuf::internal::kEmptyString) {
        operater_name_->clear();
      }
    }
    operate_type_ = 0u;
    operate_result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Guild_Autority_Operate_Respon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 target_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_guid_)));
          set_has_target_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target_name;
        break;
      }

      // required string target_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target_name().data(), this->target_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_operater_guid;
        break;
      }

      // required uint64 operater_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operater_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &operater_guid_)));
          set_has_operater_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_operater_name;
        break;
      }

      // required string operater_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operater_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operater_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operater_name().data(), this->operater_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_operate_type;
        break;
      }

      // optional uint32 operate_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_type_)));
          set_has_operate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_operate_result;
        break;
      }

      // required uint32 operate_result = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_result_)));
          set_has_operate_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Guild_Autority_Operate_Respon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 target_guid = 1;
  if (has_target_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->target_guid(), output);
  }

  // required string target_name = 2;
  if (has_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_name().data(), this->target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->target_name(), output);
  }

  // required uint64 operater_guid = 3;
  if (has_operater_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->operater_guid(), output);
  }

  // required string operater_name = 4;
  if (has_operater_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operater_name().data(), this->operater_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->operater_name(), output);
  }

  // optional uint32 operate_type = 5;
  if (has_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->operate_type(), output);
  }

  // required uint32 operate_result = 6;
  if (has_operate_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->operate_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Guild_Autority_Operate_Respon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 target_guid = 1;
  if (has_target_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->target_guid(), target);
  }

  // required string target_name = 2;
  if (has_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_name().data(), this->target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->target_name(), target);
  }

  // required uint64 operater_guid = 3;
  if (has_operater_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->operater_guid(), target);
  }

  // required string operater_name = 4;
  if (has_operater_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operater_name().data(), this->operater_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->operater_name(), target);
  }

  // optional uint32 operate_type = 5;
  if (has_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->operate_type(), target);
  }

  // required uint32 operate_result = 6;
  if (has_operate_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->operate_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Guild_Autority_Operate_Respon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 target_guid = 1;
    if (has_target_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_guid());
    }

    // required string target_name = 2;
    if (has_target_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_name());
    }

    // required uint64 operater_guid = 3;
    if (has_operater_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->operater_guid());
    }

    // required string operater_name = 4;
    if (has_operater_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operater_name());
    }

    // optional uint32 operate_type = 5;
    if (has_operate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate_type());
    }

    // required uint32 operate_result = 6;
    if (has_operate_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Guild_Autority_Operate_Respon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Guild_Autority_Operate_Respon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Guild_Autority_Operate_Respon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Guild_Autority_Operate_Respon::MergeFrom(const GS2C_Guild_Autority_Operate_Respon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_guid()) {
      set_target_guid(from.target_guid());
    }
    if (from.has_target_name()) {
      set_target_name(from.target_name());
    }
    if (from.has_operater_guid()) {
      set_operater_guid(from.operater_guid());
    }
    if (from.has_operater_name()) {
      set_operater_name(from.operater_name());
    }
    if (from.has_operate_type()) {
      set_operate_type(from.operate_type());
    }
    if (from.has_operate_result()) {
      set_operate_result(from.operate_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Guild_Autority_Operate_Respon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Guild_Autority_Operate_Respon::CopyFrom(const GS2C_Guild_Autority_Operate_Respon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Guild_Autority_Operate_Respon::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;

  return true;
}

void GS2C_Guild_Autority_Operate_Respon::Swap(GS2C_Guild_Autority_Operate_Respon* other) {
  if (other != this) {
    std::swap(target_guid_, other->target_guid_);
    std::swap(target_name_, other->target_name_);
    std::swap(operater_guid_, other->operater_guid_);
    std::swap(operater_name_, other->operater_name_);
    std::swap(operate_type_, other->operate_type_);
    std::swap(operate_result_, other->operate_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Guild_Autority_Operate_Respon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Guild_Autority_Operate_Respon_descriptor_;
  metadata.reflection = GS2C_Guild_Autority_Operate_Respon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_GuildUpdate_Member::kUpdateFlagFieldNumber;
const int C2GS_GuildUpdate_Member::kMemberFieldNumber;
const int C2GS_GuildUpdate_Member::kYourGuidFieldNumber;
#endif  // !_MSC_VER

C2GS_GuildUpdate_Member::C2GS_GuildUpdate_Member()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_GuildUpdate_Member::InitAsDefaultInstance() {
  member_ = const_cast< ::pb::GxDB_GMember_Info*>(&::pb::GxDB_GMember_Info::default_instance());
}

C2GS_GuildUpdate_Member::C2GS_GuildUpdate_Member(const C2GS_GuildUpdate_Member& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_GuildUpdate_Member::SharedCtor() {
  _cached_size_ = 0;
  update_flag_ = 0u;
  member_ = NULL;
  your_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_GuildUpdate_Member::~C2GS_GuildUpdate_Member() {
  SharedDtor();
}

void C2GS_GuildUpdate_Member::SharedDtor() {
  if (this != default_instance_) {
    delete member_;
  }
}

void C2GS_GuildUpdate_Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_GuildUpdate_Member::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_GuildUpdate_Member_descriptor_;
}

const C2GS_GuildUpdate_Member& C2GS_GuildUpdate_Member::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

C2GS_GuildUpdate_Member* C2GS_GuildUpdate_Member::default_instance_ = NULL;

C2GS_GuildUpdate_Member* C2GS_GuildUpdate_Member::New() const {
  return new C2GS_GuildUpdate_Member;
}

void C2GS_GuildUpdate_Member::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    update_flag_ = 0u;
    if (has_member()) {
      if (member_ != NULL) member_->::pb::GxDB_GMember_Info::Clear();
    }
    your_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_GuildUpdate_Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 update_flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_flag_)));
          set_has_update_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member;
        break;
      }

      // optional .pb.GxDB_GMember_Info member = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_your_guid;
        break;
      }

      // required uint64 your_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_your_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &your_guid_)));
          set_has_your_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_GuildUpdate_Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 update_flag = 1;
  if (has_update_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->update_flag(), output);
  }

  // optional .pb.GxDB_GMember_Info member = 2;
  if (has_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->member(), output);
  }

  // required uint64 your_guid = 3;
  if (has_your_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->your_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_GuildUpdate_Member::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 update_flag = 1;
  if (has_update_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->update_flag(), target);
  }

  // optional .pb.GxDB_GMember_Info member = 2;
  if (has_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->member(), target);
  }

  // required uint64 your_guid = 3;
  if (has_your_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->your_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_GuildUpdate_Member::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 update_flag = 1;
    if (has_update_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_flag());
    }

    // optional .pb.GxDB_GMember_Info member = 2;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member());
    }

    // required uint64 your_guid = 3;
    if (has_your_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->your_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_GuildUpdate_Member::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_GuildUpdate_Member* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_GuildUpdate_Member*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_GuildUpdate_Member::MergeFrom(const C2GS_GuildUpdate_Member& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_update_flag()) {
      set_update_flag(from.update_flag());
    }
    if (from.has_member()) {
      mutable_member()->::pb::GxDB_GMember_Info::MergeFrom(from.member());
    }
    if (from.has_your_guid()) {
      set_your_guid(from.your_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_GuildUpdate_Member::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_GuildUpdate_Member::CopyFrom(const C2GS_GuildUpdate_Member& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_GuildUpdate_Member::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void C2GS_GuildUpdate_Member::Swap(C2GS_GuildUpdate_Member* other) {
  if (other != this) {
    std::swap(update_flag_, other->update_flag_);
    std::swap(member_, other->member_);
    std::swap(your_guid_, other->your_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_GuildUpdate_Member::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_GuildUpdate_Member_descriptor_;
  metadata.reflection = C2GS_GuildUpdate_Member_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_GuildUpdate_Member::kUpdateFlagFieldNumber;
const int GS2C_GuildUpdate_Member::kMemberFieldNumber;
#endif  // !_MSC_VER

GS2C_GuildUpdate_Member::GS2C_GuildUpdate_Member()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_GuildUpdate_Member::InitAsDefaultInstance() {
  member_ = const_cast< ::pb::GxDB_GMember_Info*>(&::pb::GxDB_GMember_Info::default_instance());
}

GS2C_GuildUpdate_Member::GS2C_GuildUpdate_Member(const GS2C_GuildUpdate_Member& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_GuildUpdate_Member::SharedCtor() {
  _cached_size_ = 0;
  update_flag_ = 0u;
  member_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_GuildUpdate_Member::~GS2C_GuildUpdate_Member() {
  SharedDtor();
}

void GS2C_GuildUpdate_Member::SharedDtor() {
  if (this != default_instance_) {
    delete member_;
  }
}

void GS2C_GuildUpdate_Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_GuildUpdate_Member::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_GuildUpdate_Member_descriptor_;
}

const GS2C_GuildUpdate_Member& GS2C_GuildUpdate_Member::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GS2C_GuildUpdate_Member* GS2C_GuildUpdate_Member::default_instance_ = NULL;

GS2C_GuildUpdate_Member* GS2C_GuildUpdate_Member::New() const {
  return new GS2C_GuildUpdate_Member;
}

void GS2C_GuildUpdate_Member::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    update_flag_ = 0u;
    if (has_member()) {
      if (member_ != NULL) member_->::pb::GxDB_GMember_Info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_GuildUpdate_Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 update_flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_flag_)));
          set_has_update_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member;
        break;
      }

      // optional .pb.GxDB_GMember_Info member = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_GuildUpdate_Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 update_flag = 1;
  if (has_update_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->update_flag(), output);
  }

  // optional .pb.GxDB_GMember_Info member = 2;
  if (has_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->member(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_GuildUpdate_Member::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 update_flag = 1;
  if (has_update_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->update_flag(), target);
  }

  // optional .pb.GxDB_GMember_Info member = 2;
  if (has_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->member(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_GuildUpdate_Member::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 update_flag = 1;
    if (has_update_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_flag());
    }

    // optional .pb.GxDB_GMember_Info member = 2;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_GuildUpdate_Member::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_GuildUpdate_Member* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_GuildUpdate_Member*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_GuildUpdate_Member::MergeFrom(const GS2C_GuildUpdate_Member& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_update_flag()) {
      set_update_flag(from.update_flag());
    }
    if (from.has_member()) {
      mutable_member()->::pb::GxDB_GMember_Info::MergeFrom(from.member());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_GuildUpdate_Member::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_GuildUpdate_Member::CopyFrom(const GS2C_GuildUpdate_Member& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_GuildUpdate_Member::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_GuildUpdate_Member::Swap(GS2C_GuildUpdate_Member* other) {
  if (other != this) {
    std::swap(update_flag_, other->update_flag_);
    std::swap(member_, other->member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_GuildUpdate_Member::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_GuildUpdate_Member_descriptor_;
  metadata.reflection = GS2C_GuildUpdate_Member_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Update_Respon::kUpdateResultFieldNumber;
#endif  // !_MSC_VER

GS2C_Update_Respon::GS2C_Update_Respon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Update_Respon::InitAsDefaultInstance() {
}

GS2C_Update_Respon::GS2C_Update_Respon(const GS2C_Update_Respon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Update_Respon::SharedCtor() {
  _cached_size_ = 0;
  update_result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Update_Respon::~GS2C_Update_Respon() {
  SharedDtor();
}

void GS2C_Update_Respon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Update_Respon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Update_Respon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Update_Respon_descriptor_;
}

const GS2C_Update_Respon& GS2C_Update_Respon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GS2C_Update_Respon* GS2C_Update_Respon::default_instance_ = NULL;

GS2C_Update_Respon* GS2C_Update_Respon::New() const {
  return new GS2C_Update_Respon;
}

void GS2C_Update_Respon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    update_result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Update_Respon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 update_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_result_)));
          set_has_update_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Update_Respon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 update_result = 1;
  if (has_update_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->update_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Update_Respon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 update_result = 1;
  if (has_update_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->update_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Update_Respon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 update_result = 1;
    if (has_update_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Update_Respon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Update_Respon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Update_Respon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Update_Respon::MergeFrom(const GS2C_Update_Respon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_update_result()) {
      set_update_result(from.update_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Update_Respon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Update_Respon::CopyFrom(const GS2C_Update_Respon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Update_Respon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Update_Respon::Swap(GS2C_Update_Respon* other) {
  if (other != this) {
    std::swap(update_result_, other->update_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Update_Respon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Update_Respon_descriptor_;
  metadata.reflection = GS2C_Update_Respon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_GuildName_Check::kGuildNameFieldNumber;
const int C2GS_GuildName_Check::kYourGuidFieldNumber;
#endif  // !_MSC_VER

C2GS_GuildName_Check::C2GS_GuildName_Check()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_GuildName_Check::InitAsDefaultInstance() {
}

C2GS_GuildName_Check::C2GS_GuildName_Check(const C2GS_GuildName_Check& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_GuildName_Check::SharedCtor() {
  _cached_size_ = 0;
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  your_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_GuildName_Check::~C2GS_GuildName_Check() {
  SharedDtor();
}

void C2GS_GuildName_Check::SharedDtor() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (this != default_instance_) {
  }
}

void C2GS_GuildName_Check::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_GuildName_Check::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_GuildName_Check_descriptor_;
}

const C2GS_GuildName_Check& C2GS_GuildName_Check::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

C2GS_GuildName_Check* C2GS_GuildName_Check::default_instance_ = NULL;

C2GS_GuildName_Check* C2GS_GuildName_Check::New() const {
  return new C2GS_GuildName_Check;
}

void C2GS_GuildName_Check::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
    your_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_GuildName_Check::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string guild_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_your_guid;
        break;
      }

      // required uint64 your_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_your_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &your_guid_)));
          set_has_your_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_GuildName_Check::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string guild_name = 1;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->guild_name(), output);
  }

  // required uint64 your_guid = 2;
  if (has_your_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->your_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_GuildName_Check::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string guild_name = 1;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guild_name(), target);
  }

  // required uint64 your_guid = 2;
  if (has_your_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->your_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_GuildName_Check::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string guild_name = 1;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

    // required uint64 your_guid = 2;
    if (has_your_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->your_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_GuildName_Check::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_GuildName_Check* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_GuildName_Check*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_GuildName_Check::MergeFrom(const C2GS_GuildName_Check& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_your_guid()) {
      set_your_guid(from.your_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_GuildName_Check::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_GuildName_Check::CopyFrom(const C2GS_GuildName_Check& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_GuildName_Check::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2GS_GuildName_Check::Swap(C2GS_GuildName_Check* other) {
  if (other != this) {
    std::swap(guild_name_, other->guild_name_);
    std::swap(your_guid_, other->your_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_GuildName_Check::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_GuildName_Check_descriptor_;
  metadata.reflection = C2GS_GuildName_Check_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_GuildName_Check_Respon::kIsCanUseFieldNumber;
#endif  // !_MSC_VER

GS2C_GuildName_Check_Respon::GS2C_GuildName_Check_Respon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_GuildName_Check_Respon::InitAsDefaultInstance() {
}

GS2C_GuildName_Check_Respon::GS2C_GuildName_Check_Respon(const GS2C_GuildName_Check_Respon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_GuildName_Check_Respon::SharedCtor() {
  _cached_size_ = 0;
  is_can_use_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_GuildName_Check_Respon::~GS2C_GuildName_Check_Respon() {
  SharedDtor();
}

void GS2C_GuildName_Check_Respon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_GuildName_Check_Respon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_GuildName_Check_Respon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_GuildName_Check_Respon_descriptor_;
}

const GS2C_GuildName_Check_Respon& GS2C_GuildName_Check_Respon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GS2C_GuildName_Check_Respon* GS2C_GuildName_Check_Respon::default_instance_ = NULL;

GS2C_GuildName_Check_Respon* GS2C_GuildName_Check_Respon::New() const {
  return new GS2C_GuildName_Check_Respon;
}

void GS2C_GuildName_Check_Respon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_can_use_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_GuildName_Check_Respon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_can_use = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_can_use_)));
          set_has_is_can_use();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_GuildName_Check_Respon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_can_use = 1;
  if (has_is_can_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_can_use(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_GuildName_Check_Respon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_can_use = 1;
  if (has_is_can_use()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_can_use(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_GuildName_Check_Respon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_can_use = 1;
    if (has_is_can_use()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_GuildName_Check_Respon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_GuildName_Check_Respon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_GuildName_Check_Respon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_GuildName_Check_Respon::MergeFrom(const GS2C_GuildName_Check_Respon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_can_use()) {
      set_is_can_use(from.is_can_use());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_GuildName_Check_Respon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_GuildName_Check_Respon::CopyFrom(const GS2C_GuildName_Check_Respon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_GuildName_Check_Respon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_GuildName_Check_Respon::Swap(GS2C_GuildName_Check_Respon* other) {
  if (other != this) {
    std::swap(is_can_use_, other->is_can_use_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_GuildName_Check_Respon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_GuildName_Check_Respon_descriptor_;
  metadata.reflection = GS2C_GuildName_Check_Respon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Guild_Notify::kNotifyTypeFieldNumber;
const int GS2C_Guild_Notify::kApprovalGuidFieldNumber;
const int GS2C_Guild_Notify::kApprovalNameFieldNumber;
#endif  // !_MSC_VER

GS2C_Guild_Notify::GS2C_Guild_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Guild_Notify::InitAsDefaultInstance() {
}

GS2C_Guild_Notify::GS2C_Guild_Notify(const GS2C_Guild_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Guild_Notify::SharedCtor() {
  _cached_size_ = 0;
  notify_type_ = 0u;
  approval_guid_ = GOOGLE_ULONGLONG(0);
  approval_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Guild_Notify::~GS2C_Guild_Notify() {
  SharedDtor();
}

void GS2C_Guild_Notify::SharedDtor() {
  if (approval_name_ != &::google::protobuf::internal::kEmptyString) {
    delete approval_name_;
  }
  if (this != default_instance_) {
  }
}

void GS2C_Guild_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Guild_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Guild_Notify_descriptor_;
}

const GS2C_Guild_Notify& GS2C_Guild_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GS2C_Guild_Notify* GS2C_Guild_Notify::default_instance_ = NULL;

GS2C_Guild_Notify* GS2C_Guild_Notify::New() const {
  return new GS2C_Guild_Notify;
}

void GS2C_Guild_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    notify_type_ = 0u;
    approval_guid_ = GOOGLE_ULONGLONG(0);
    if (has_approval_name()) {
      if (approval_name_ != &::google::protobuf::internal::kEmptyString) {
        approval_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Guild_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 notify_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &notify_type_)));
          set_has_notify_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_approval_guid;
        break;
      }

      // optional uint64 approval_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_approval_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &approval_guid_)));
          set_has_approval_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_approval_name;
        break;
      }

      // optional string approval_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_approval_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_approval_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->approval_name().data(), this->approval_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Guild_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 notify_type = 1;
  if (has_notify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->notify_type(), output);
  }

  // optional uint64 approval_guid = 2;
  if (has_approval_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->approval_guid(), output);
  }

  // optional string approval_name = 3;
  if (has_approval_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->approval_name().data(), this->approval_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->approval_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Guild_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 notify_type = 1;
  if (has_notify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->notify_type(), target);
  }

  // optional uint64 approval_guid = 2;
  if (has_approval_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->approval_guid(), target);
  }

  // optional string approval_name = 3;
  if (has_approval_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->approval_name().data(), this->approval_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->approval_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Guild_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 notify_type = 1;
    if (has_notify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->notify_type());
    }

    // optional uint64 approval_guid = 2;
    if (has_approval_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->approval_guid());
    }

    // optional string approval_name = 3;
    if (has_approval_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->approval_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Guild_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Guild_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Guild_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Guild_Notify::MergeFrom(const GS2C_Guild_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notify_type()) {
      set_notify_type(from.notify_type());
    }
    if (from.has_approval_guid()) {
      set_approval_guid(from.approval_guid());
    }
    if (from.has_approval_name()) {
      set_approval_name(from.approval_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Guild_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Guild_Notify::CopyFrom(const GS2C_Guild_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Guild_Notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Guild_Notify::Swap(GS2C_Guild_Notify* other) {
  if (other != this) {
    std::swap(notify_type_, other->notify_type_);
    std::swap(approval_guid_, other->approval_guid_);
    std::swap(approval_name_, other->approval_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Guild_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Guild_Notify_descriptor_;
  metadata.reflection = GS2C_Guild_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Guild_Dynamic_Event::kEventTypeFieldNumber;
const int GS2C_Guild_Dynamic_Event::kGuildIdFieldNumber;
const int GS2C_Guild_Dynamic_Event::kGuildNameFieldNumber;
const int GS2C_Guild_Dynamic_Event::kPlayerIdFieldNumber;
const int GS2C_Guild_Dynamic_Event::kPlayerNameFieldNumber;
const int GS2C_Guild_Dynamic_Event::kIdValueFieldNumber;
const int GS2C_Guild_Dynamic_Event::kStrValueFieldNumber;
const int GS2C_Guild_Dynamic_Event::kEventTimeFieldNumber;
const int GS2C_Guild_Dynamic_Event::kItemGuidFieldNumber;
#endif  // !_MSC_VER

GS2C_Guild_Dynamic_Event::GS2C_Guild_Dynamic_Event()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Guild_Dynamic_Event::InitAsDefaultInstance() {
}

GS2C_Guild_Dynamic_Event::GS2C_Guild_Dynamic_Event(const GS2C_Guild_Dynamic_Event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Guild_Dynamic_Event::SharedCtor() {
  _cached_size_ = 0;
  event_type_ = 1;
  guild_id_ = GOOGLE_ULONGLONG(0);
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_id_ = GOOGLE_ULONGLONG(0);
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_value_ = 0u;
  str_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  event_time_ = GOOGLE_ULONGLONG(0);
  item_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Guild_Dynamic_Event::~GS2C_Guild_Dynamic_Event() {
  SharedDtor();
}

void GS2C_Guild_Dynamic_Event::SharedDtor() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (str_value_ != &::google::protobuf::internal::kEmptyString) {
    delete str_value_;
  }
  if (this != default_instance_) {
  }
}

void GS2C_Guild_Dynamic_Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Guild_Dynamic_Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Guild_Dynamic_Event_descriptor_;
}

const GS2C_Guild_Dynamic_Event& GS2C_Guild_Dynamic_Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GS2C_Guild_Dynamic_Event* GS2C_Guild_Dynamic_Event::default_instance_ = NULL;

GS2C_Guild_Dynamic_Event* GS2C_Guild_Dynamic_Event::New() const {
  return new GS2C_Guild_Dynamic_Event;
}

void GS2C_Guild_Dynamic_Event::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_type_ = 1;
    guild_id_ = GOOGLE_ULONGLONG(0);
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
    player_id_ = GOOGLE_ULONGLONG(0);
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    id_value_ = 0u;
    if (has_str_value()) {
      if (str_value_ != &::google::protobuf::internal::kEmptyString) {
        str_value_->clear();
      }
    }
    event_time_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    item_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Guild_Dynamic_Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.GUILD_DYNAMIC_EVENT event_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::GUILD_DYNAMIC_EVENT_IsValid(value)) {
            set_event_type(static_cast< ::pb::GUILD_DYNAMIC_EVENT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guild_id;
        break;
      }

      // optional uint64 guild_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guild_name;
        break;
      }

      // optional string guild_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_player_id;
        break;
      }

      // optional uint64 player_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_player_name;
        break;
      }

      // optional string player_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_id_value;
        break;
      }

      // optional uint32 id_value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_value_)));
          set_has_id_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_str_value;
        break;
      }

      // optional string str_value = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_value().data(), this->str_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_event_time;
        break;
      }

      // optional uint64 event_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_time_)));
          set_has_event_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_item_guid;
        break;
      }

      // optional uint64 item_guid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_guid_)));
          set_has_item_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Guild_Dynamic_Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.GUILD_DYNAMIC_EVENT event_type = 1;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event_type(), output);
  }

  // optional uint64 guild_id = 2;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guild_id(), output);
  }

  // optional string guild_name = 3;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->guild_name(), output);
  }

  // optional uint64 player_id = 4;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->player_id(), output);
  }

  // optional string player_name = 5;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->player_name(), output);
  }

  // optional uint32 id_value = 6;
  if (has_id_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->id_value(), output);
  }

  // optional string str_value = 7;
  if (has_str_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_value().data(), this->str_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->str_value(), output);
  }

  // optional uint64 event_time = 8;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->event_time(), output);
  }

  // optional uint64 item_guid = 9;
  if (has_item_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->item_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Guild_Dynamic_Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.GUILD_DYNAMIC_EVENT event_type = 1;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event_type(), target);
  }

  // optional uint64 guild_id = 2;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guild_id(), target);
  }

  // optional string guild_name = 3;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guild_name(), target);
  }

  // optional uint64 player_id = 4;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->player_id(), target);
  }

  // optional string player_name = 5;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->player_name(), target);
  }

  // optional uint32 id_value = 6;
  if (has_id_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->id_value(), target);
  }

  // optional string str_value = 7;
  if (has_str_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_value().data(), this->str_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->str_value(), target);
  }

  // optional uint64 event_time = 8;
  if (has_event_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->event_time(), target);
  }

  // optional uint64 item_guid = 9;
  if (has_item_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->item_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Guild_Dynamic_Event::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.GUILD_DYNAMIC_EVENT event_type = 1;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
    }

    // optional uint64 guild_id = 2;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_id());
    }

    // optional string guild_name = 3;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

    // optional uint64 player_id = 4;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional string player_name = 5;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional uint32 id_value = 6;
    if (has_id_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id_value());
    }

    // optional string str_value = 7;
    if (has_str_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_value());
    }

    // optional uint64 event_time = 8;
    if (has_event_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 item_guid = 9;
    if (has_item_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Guild_Dynamic_Event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Guild_Dynamic_Event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Guild_Dynamic_Event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Guild_Dynamic_Event::MergeFrom(const GS2C_Guild_Dynamic_Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_id_value()) {
      set_id_value(from.id_value());
    }
    if (from.has_str_value()) {
      set_str_value(from.str_value());
    }
    if (from.has_event_time()) {
      set_event_time(from.event_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_item_guid()) {
      set_item_guid(from.item_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Guild_Dynamic_Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Guild_Dynamic_Event::CopyFrom(const GS2C_Guild_Dynamic_Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Guild_Dynamic_Event::IsInitialized() const {

  return true;
}

void GS2C_Guild_Dynamic_Event::Swap(GS2C_Guild_Dynamic_Event* other) {
  if (other != this) {
    std::swap(event_type_, other->event_type_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(player_id_, other->player_id_);
    std::swap(player_name_, other->player_name_);
    std::swap(id_value_, other->id_value_);
    std::swap(str_value_, other->str_value_);
    std::swap(event_time_, other->event_time_);
    std::swap(item_guid_, other->item_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Guild_Dynamic_Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Guild_Dynamic_Event_descriptor_;
  metadata.reflection = GS2C_Guild_Dynamic_Event_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Guild_Dynamic_Event_Log::kGuildEvensFieldNumber;
#endif  // !_MSC_VER

GS2C_Guild_Dynamic_Event_Log::GS2C_Guild_Dynamic_Event_Log()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Guild_Dynamic_Event_Log::InitAsDefaultInstance() {
}

GS2C_Guild_Dynamic_Event_Log::GS2C_Guild_Dynamic_Event_Log(const GS2C_Guild_Dynamic_Event_Log& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Guild_Dynamic_Event_Log::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Guild_Dynamic_Event_Log::~GS2C_Guild_Dynamic_Event_Log() {
  SharedDtor();
}

void GS2C_Guild_Dynamic_Event_Log::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Guild_Dynamic_Event_Log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Guild_Dynamic_Event_Log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Guild_Dynamic_Event_Log_descriptor_;
}

const GS2C_Guild_Dynamic_Event_Log& GS2C_Guild_Dynamic_Event_Log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GS2C_Guild_Dynamic_Event_Log* GS2C_Guild_Dynamic_Event_Log::default_instance_ = NULL;

GS2C_Guild_Dynamic_Event_Log* GS2C_Guild_Dynamic_Event_Log::New() const {
  return new GS2C_Guild_Dynamic_Event_Log;
}

void GS2C_Guild_Dynamic_Event_Log::Clear() {
  guild_evens_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Guild_Dynamic_Event_Log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GS2C_Guild_Dynamic_Event guild_evens = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_evens:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guild_evens()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_guild_evens;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Guild_Dynamic_Event_Log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GS2C_Guild_Dynamic_Event guild_evens = 1;
  for (int i = 0; i < this->guild_evens_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guild_evens(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Guild_Dynamic_Event_Log::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GS2C_Guild_Dynamic_Event guild_evens = 1;
  for (int i = 0; i < this->guild_evens_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guild_evens(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Guild_Dynamic_Event_Log::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GS2C_Guild_Dynamic_Event guild_evens = 1;
  total_size += 1 * this->guild_evens_size();
  for (int i = 0; i < this->guild_evens_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guild_evens(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Guild_Dynamic_Event_Log::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Guild_Dynamic_Event_Log* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Guild_Dynamic_Event_Log*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Guild_Dynamic_Event_Log::MergeFrom(const GS2C_Guild_Dynamic_Event_Log& from) {
  GOOGLE_CHECK_NE(&from, this);
  guild_evens_.MergeFrom(from.guild_evens_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Guild_Dynamic_Event_Log::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Guild_Dynamic_Event_Log::CopyFrom(const GS2C_Guild_Dynamic_Event_Log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Guild_Dynamic_Event_Log::IsInitialized() const {

  return true;
}

void GS2C_Guild_Dynamic_Event_Log::Swap(GS2C_Guild_Dynamic_Event_Log* other) {
  if (other != this) {
    guild_evens_.Swap(&other->guild_evens_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Guild_Dynamic_Event_Log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Guild_Dynamic_Event_Log_descriptor_;
  metadata.reflection = GS2C_Guild_Dynamic_Event_Log_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2G_GuildUpdate::kTypeFieldNumber;
const int GS2G_GuildUpdate::kGuildIdFieldNumber;
const int GS2G_GuildUpdate::kGuildNameFieldNumber;
#endif  // !_MSC_VER

GS2G_GuildUpdate::GS2G_GuildUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2G_GuildUpdate::InitAsDefaultInstance() {
}

GS2G_GuildUpdate::GS2G_GuildUpdate(const GS2G_GuildUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2G_GuildUpdate::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  guild_id_ = GOOGLE_ULONGLONG(0);
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2G_GuildUpdate::~GS2G_GuildUpdate() {
  SharedDtor();
}

void GS2G_GuildUpdate::SharedDtor() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (this != default_instance_) {
  }
}

void GS2G_GuildUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2G_GuildUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2G_GuildUpdate_descriptor_;
}

const GS2G_GuildUpdate& GS2G_GuildUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Social_2eproto();
  return *default_instance_;
}

GS2G_GuildUpdate* GS2G_GuildUpdate::default_instance_ = NULL;

GS2G_GuildUpdate* GS2G_GuildUpdate::New() const {
  return new GS2G_GuildUpdate;
}

void GS2G_GuildUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    guild_id_ = GOOGLE_ULONGLONG(0);
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2G_GuildUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guild_id;
        break;
      }

      // required uint64 guild_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guild_name;
        break;
      }

      // optional string guild_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2G_GuildUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint64 guild_id = 2;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guild_id(), output);
  }

  // optional string guild_name = 3;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->guild_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2G_GuildUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint64 guild_id = 2;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guild_id(), target);
  }

  // optional string guild_name = 3;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guild_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2G_GuildUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint64 guild_id = 2;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_id());
    }

    // optional string guild_name = 3;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2G_GuildUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2G_GuildUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2G_GuildUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2G_GuildUpdate::MergeFrom(const GS2G_GuildUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2G_GuildUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2G_GuildUpdate::CopyFrom(const GS2G_GuildUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2G_GuildUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GS2G_GuildUpdate::Swap(GS2G_GuildUpdate* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2G_GuildUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2G_GuildUpdate_descriptor_;
  metadata.reflection = GS2G_GuildUpdate_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
