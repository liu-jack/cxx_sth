// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Enum.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Enum.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::EnumDescriptor* PLAYER_32_BIT_FLAGS_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PLAYER_VALUE_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PLAYER_32_BIT_FIELD_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PLAYER_64_BIT_FIELD_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PLAYER_FLOAT_FIELD_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PLAYER_STR_FIELD_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PLAYER_STR_DATA_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CHARACTER_FIELD_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EQUIP_SLOT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PLAYER_COUNTRY_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CxGS_ERROR_CODE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EVENT_LOGIN_FAILD_ENUM_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EVENT_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ITEM_REASON_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Enum_2eproto() {
  protobuf_AddDesc_Enum_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Enum.proto");
  GOOGLE_CHECK(file != NULL);
  PLAYER_32_BIT_FLAGS_TYPE_descriptor_ = file->enum_type(0);
  PLAYER_VALUE_TYPE_descriptor_ = file->enum_type(1);
  PLAYER_32_BIT_FIELD_descriptor_ = file->enum_type(2);
  PLAYER_64_BIT_FIELD_descriptor_ = file->enum_type(3);
  PLAYER_FLOAT_FIELD_descriptor_ = file->enum_type(4);
  PLAYER_STR_FIELD_descriptor_ = file->enum_type(5);
  PLAYER_STR_DATA_descriptor_ = file->enum_type(6);
  CHARACTER_FIELD_descriptor_ = file->enum_type(7);
  EQUIP_SLOT_descriptor_ = file->enum_type(8);
  PLAYER_COUNTRY_descriptor_ = file->enum_type(9);
  CxGS_ERROR_CODE_descriptor_ = file->enum_type(10);
  EVENT_LOGIN_FAILD_ENUM_descriptor_ = file->enum_type(11);
  EVENT_ID_descriptor_ = file->enum_type(12);
  ITEM_REASON_descriptor_ = file->enum_type(13);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Enum_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_Enum_2eproto() {
}

void protobuf_AddDesc_Enum_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nEnum.proto\022\002pb*\363\006\n\030PLAYER_32_BIT_FLAGS"
    "_TYPE\022\026\n\022PLAYER_FLAG_IS_NEW\020\001\022\035\n\031PLAYER_"
    "FLAG_HAD_FIRST_PAY\020\002\022\033\n\027PLAYER_FLAG_HAD_"
    "HARVEST\020\004\022\033\n\027PLAYER_FLAG_HAD_SUPPORT\020\010\022\030"
    "\n\024PLAYER_FLAG_HAD_DEEP\020\020\022(\n$PLAYER_FLAG_"
    "FIRST_REFRESH_EQUIP_SHOP\020 \022\031\n\025PLAYER_GET"
    "_AUTO_BUILD\020@\022$\n\037PLAYER_GET_TROOPS_ODER_"
    "EVERYDAY\020\200\001\022#\n\036PLAYER_OPEN_ADVANCED_RES_"
    "FUBEN\020\200\002\022 \n\033PLAYER_UP_KILL_ENEMY_HORNOR\020"
    "\200\004\022\032\n\025PLAYER_UP_RES_CAPCITY\020\200\010\022\"\n\035PLAYER"
    "_UP_WORD_MAP_MOVE_SPEED\020\200\020\022\037\n\032PLAYER_UP_"
    "COUNTRY_WAR_TIME\020\200 \022(\n#PLAYER_CAN_FAR_TR"
    "IGE_PERSONAL_EVENT\020\200@\022+\n%PLAYER_FLAG_HAD"
    "_TAKE_FIRST_PAY_REWARD\020\200\200\001\022*\n$PLAYER_FLA"
    "G_QUEST_GET_EXPLOIT_ACTIVE\020\200\200\002\022#\n\035PLAYER"
    "_NO_SHOP_COOL_DOWN_TIME\020\200\200\004\022#\n\035PLAYER_CR"
    "USADE_ADD_HERO_TIMES\020\200\200\010\0221\n+PLAYER_FLAG_"
    "BRANCH_QUEST_GET_EXPLOIT_ACTIVE\020\200\200\020\022#\n\035P"
    "LAYER_CONGRATULATE_SHENQI_80\020\200\200 \022$\n\036PLAY"
    "ER_CONGRATULATE_SHENQI_100\020\200\200@\022%\n\036PLAYER"
    "_CONGRATULATE_SHENQI_120\020\200\200\200\001\022%\n\036PLAYER_"
    "CONGRATULATE_SHENQI_150\020\200\200\200\002\022 \n\031PLAYER_L"
    "OTTERY_DAILY_DONE\020\200\200\200\004*\343\001\n\021PLAYER_VALUE_"
    "TYPE\022\"\n\036PLAYER_VALUE_TYPE_32_BIT_FLAGS\020\000"
    "\022\"\n\036PLAYER_VALUE_TYPE_32_BIT_FIELD\020\001\022\"\n\036"
    "PLAYER_VALUE_TYPE_64_BIT_FIELD\020\002\022!\n\035PLAY"
    "ER_VALUE_TYPE_FLOAT_FIELD\020\003\022\037\n\033PLAYER_VA"
    "LUE_TYPE_STR_FIELD\020\004\022\036\n\032PLAYER_VALUE_TYP"
    "E_STR_DATA\020\005*\225\037\n\023PLAYER_32_BIT_FIELD\022\'\n#"
    "PLAYER_FIELD_CONTINUOUSLY_LOGIN_DAY\020\000\022\026\n"
    "\022PLAYER_FIELD_FLAGS\020\001\022\035\n\031PLAYER_FIELD_HE"
    "AD_ICON_ID\020\002\022\036\n\032PLAYER_FIELD_GUIDE_PROCE"
    "SS\020\003\022\033\n\027PLAYER_FIELD_LOCKREASON\020\004\022\026\n\022PLA"
    "YER_FIELD_LEVEL\020\005\022\032\n\026PLAYER_FIELD_VIP_LE"
    "VEL\020\006\022\025\n\021PLAYER_FIELD_COIN\020\007\022\031\n\025PLAYER_F"
    "IELD_SYS_GOLD\020\010\022\025\n\021PLAYER_FIELD_IRON\020\t\022\025"
    "\n\021PLAYER_FIELD_FOOD\020\n\022\025\n\021PLAYER_FIELD_WO"
    "OD\020\013\022\027\n\023PLAYER_FIELD_HORNOR\020\014\022 \n\034PLAYER_"
    "FIELD_BUILDING_HORNOR\020\r\022\031\n\025PLAYER_FIELD_"
    "TRAINING\020\016\022\032\n\026PLAYER_FIELD_TROOPSNUM\020\017\022\037"
    "\n\033PLAYER_FIELD_FREECOLLECTNUM\020\020\022 \n\034PLAYE"
    "R_FIELD_SUPERCOLLECTNUM\020\021\022\033\n\027PLAYER_FIEL"
    "D_TROOPSODER\020\022\022\033\n\027PLAYER_FIELD_GOLDHAMME"
    "R\020\023\022\027\n\023PLAYER_FIELD_COUPON\020\024\022\035\n\031PLAYER_F"
    "IELD_MARKETBUYNUM\020\025\022\033\n\027PLAYER_FIELD_FREE"
    "PURIFY\020\026\022\035\n\031PLAYER_FIELD_EXTRMEPURIFY\020\027\022"
    "\037\n\033PLAYER_FIELD_GODSTONEPURIFY\020\030\022\032\n\026PLAY"
    "ER_FIELD_CASH_GOLD\020\031\022\027\n\023PLAYER_FIELD_CUR"
    "_XP\020\032\022\033\n\027PLAYER_FIELD_CUR_VIP_XP\020\033\022\"\n\036PL"
    "AYER_FIELD_DAILY_QUEST_SCORE\020\034\022\034\n\030PlAYER"
    "_FIELD_AUTO_HAMMER\020\035\022.\n*PLAYER_FIELD_LOG"
    "IN_7_DAY_REWARD_TAKE_COUNT\020\036\022/\n+PLAYER_F"
    "IELD_LOGIN_MONTLY_REWARD_TAKE_COUNT\020\037\022\036\n"
    "\032PlAYER_FIELD_PRE_BATTLE_ID\020 \022%\n!PlAYER_"
    "FIELD_PALACE_LOW_OFFICE_ID\020!\022\032\n\026PLAYER_F"
    "IELD_PANZER_ID\020\"\022\035\n\031PLAYER_FIELD_BAG_CAP"
    "ACITY\020#\022\'\n#PLAYER_FIELD_IS_REGIST_CROSS_"
    "SERVER\020$\022#\n\037PLAYER_FIELD_IS_IN_CROSS_SER"
    "VER\020%\022(\n$PlAYER_FIELD_IS_AUTO_INCREASE_T"
    "ROOPS\020&\022!\n\035PLAYER_FIELD_BUY_LABOUR_TIMES"
    "\020\'\022\033\n\027PLAYER_FIELD_LABOUR_NUM\020(\022\037\n\033PLAYE"
    "R_FIELD_CUR_REBUILD_ID\020)\022!\n\035PLAYER_FIELD"
    "_IS_BEGIN_REBUILD\020*\022)\n%PLAYER_FIELD_CUR_"
    "PALACE_REBUILD_ROUND\020+\022\"\n\036PLAYER_FIELD_C"
    "UR_ROUND_INVEST1\020,\022\"\n\036PLAYER_FIELD_CUR_R"
    "OUND_INVEST2\020-\022\"\n\036PLAYER_FIELD_CUR_ROUND"
    "_INVEST3\020.\022$\n PLYAER_FIELD_HEROS_EXPUP_P"
    "ERCENT\020/\022#\n\037PLAYER_FIELD_EXPLOIT_RANK_VA"
    "LUE\0200\022%\n!PLAYER_FIELD_MILITARY_POWER_VAL"
    "UE\0201\022(\n$PLAYER_FIELD_EXPLOIT_RANK_NORMAL"
    "_BOX\0202\022)\n%PLAYER_FIELD_EXPLOIT_RANK_ADVA"
    "NCE_BOX\0203\022\'\n#PLAYER_FIELD_EXPLOIT_RANK_B"
    "OX_LEVEL\0204\022!\n\035PLAYER_FIELD_TRICK_RANK_VA"
    "LUE\0205\022\"\n\036PLAYER_FIELD_OCCUPY_RANK_VALUE\020"
    "6\022\"\n\036PLAYER_FIELD_SUM_DINNER_NUMBER\0207\022\036\n"
    "\032PLAYER_FIELD_DINNER_NUMBER\0208\022\037\n\033PLAYER_"
    "FIELD_TRAINING_FIGHT\0209\022 \n\034PLAYER_FIELD_T"
    "RAINING_DOUBLE\020:\022 \n\034PLAYER_FIELD_TRAININ"
    "G_REDUCE\020;\022\"\n\036PLAYER_FIELD_DRAFT_ORDER_L"
    "IMIT\020<\022)\n%PLAYER_FIELD_NORMAL_EXPLOIT_BO"
    "X_LIMIT\020=\022)\n%PLAYER_FIELD_ADVANCE_EXPLOT"
    "_BOX_LIMIT\020>\022$\n PLAYER_FLIELD_TROOPS_ORD"
    "ER_LIMIT\020\?\022!\n\035PLAYER_FIELD_TRICKREWARD_S"
    "TEP\020@\022\"\n\036PLAYER_FIELD_OCCUPYREWARD_STEP\020"
    "A\022\037\n\033PLAYER_FIELD_IS_ADVANCE_BOX\020B\022 \n\034PL"
    "AYER_FIELD_CARD_SLOT_COUNT\020C\022!\n\035PLAYER_F"
    "IELD_CREATESHADOW_NUM\020D\022\035\n\031PLAYER_FIELD_"
    "TODAY_ADD_XP\020E\022%\n!PLAYER_FIELD_TAKE_VIP_"
    "REWARD_FLAG\020F\022&\n\"PLAYER_FIELD_TAKE_EXPLO"
    "IT_BOX_STEP\020G\022-\n)PLAYER_FIELD_TAKE_DAILY"
    "_QUEST_REWARD_FLAG\020H\022,\n(PLAYER_FIELD_GRO"
    "W_UP_QUEST_EXPLOIT_VALUE\020I\022\035\n\031PLAYER_FIE"
    "LD_XILIAN_COUNT\020J\022\035\n\031PLAYER_FIELD_CHAR_R"
    "OW_NUM\020K\022$\n PLAYER_FIELD_CONTUINE_SIGNUP"
    "_DAY\020L\022 \n\034PLAYER_FIELD_RETROACTIVE_DAY\020M"
    "\022\'\n#PLAYER_FIELD_SIGN_EXTRA_REWARD_FLAG\020"
    "N\022(\n$PLAYER_FIELD_ACTIVITY_STAR_BOX_LEVE"
    "L\020O\022,\n(PLAYER_FIELD_USE_FREE_QUICK_COMBA"
    "T_TIMES\020P\022\037\n\033PLAYER_FIELD_OPEN_FOG_COUNT"
    "\020Q\022%\n!PLAYER_FIELD_TAKE_FOG_REWARD_FLAG\020"
    "R\022&\n\"PLAYER_FIELD_ACTIVITY_XILIAN_COUNT\020"
    "S\022(\n$PLAYER_FIELD_TAKE_XILIAN_REWARD_FLA"
    "G\020T\022#\n\037PLAYER_FIELD_IRON_COLLECT_TIMES\020U"
    "\022)\n%PLAYER_FIELD_IRON_COLLECT_REWARD_FLA"
    "G\020V\022!\n\035PLAYER_FIELD_IRON_COLLECT_TEN\020W\022!"
    "\n\035PLAYER_FIELD_XILIAN_TEN_TIMES\020X\022\035\n\031PLA"
    "YER_FIELD_PEOPLE_LOYAL\020Y\022\036\n\032PLAYER_FIELD"
    "_ZHENGWU_TIMES\020Z\022\027\n\023PLAYER_FIELD_RENOWN\020"
    "[\022\034\n\030PLAYER_FIELD_STARCRYSTAL\020\\\022\026\n\022PLAYE"
    "R_FIELD_BOARD\020]\022\032\n\026PLAYER_FIELD_GENE_COD"
    "E\020^\022\035\n\031PLAYER_FIELD_VISIT_FAMOUS\020_\022\"\n\036PL"
    "AYER_FIELD_LIMITED_SHOP_FLAG\020`\022\025\n\021PLAYER"
    "_FIELD_BEEF\020a\022\025\n\021PLAYER_FIELD_WINE\020b\022 \n\034"
    "PLAYER_FIELD_HERO_REWARD_BOX\020c\022\"\n\036PLAYER"
    "_FIELD_ACTIVITY_GOLD_NUM\020d\022(\n$PLAYER_FIE"
    "LD_ACTIVITY_GOLD_TAKE_FLAG\020e\022%\n!PLAYER_F"
    "IELD_BRANCH_QUEST_EXPLOIT\020f\022-\n)PLAYER_FI"
    "ELD_WORLD_FIGHT_TAKE_REWARD_FLAG\020g\022$\n PL"
    "AYER_FIELD_CURR_REWARD_CHAR_ID\020h\022\033\n\027PLAY"
    "ER_FIELD_LOGIN_DAYS\020i\022)\n%PLAYER_FIELD_TO"
    "DAY_CONGRATULATE_TIMES\020j\022\'\n#PLAYER_FIELD"
    "_MAIN_QUEST_GET_EXPLOIT\020k\022\"\n\036PLAYER_FIEL"
    "D_TODAY_OCCUPY_CITY\020l\022\037\n\033PLAYER_FIELD_TO"
    "DAY_ZHUZHENG\020m\022\036\n\032PLAYER_FIELD_TODAY_ZHU"
    "GONG\020n\022+\n\'PLAYER_FIELD_TODAY_CONTINUE_OC"
    "CPUY_CITY\020o\022)\n%PLAYER_FIELD_ACTIVITY_OCC"
    "UPY_CITY_NUM\020p\022%\n!PLAYER_FIELD_ACTIVITY_"
    "ADD_SOLDIER\020q\022\035\n\031PLAYER_FIELD_32_BIT_COU"
    "NT\020r*\373\006\n\023PLAYER_64_BIT_FIELD\022\032\n\026PLAYER_F"
    "IELD_PLAYER_ID\020\000\022\031\n\025PLAYER_FIELD_GUILD_I"
    "D\020\001\022 \n\034PLAYER_FIELD_LAST_LOGIN_TIME\020\002\022\034\n"
    "\030PLAYER_FIELD_REGIST_TIME\020\003\022)\n%PLAYER_FI"
    "ELD_NEXT_RECOVER_HORNOR_TIME\020\004\0221\n-PLAYER"
    "_FIELD_NEXT_RECOVER_MARKET_BUY_NUM_TIME\020"
    "\005\022.\n*PLAYER_FIELD_NEXT_RECOVER_FREE_PURI"
    "FY_TIME\020\006\0224\n0PLAYER_FIELD_NEXT_RECOVER_D"
    "AILY_QUEST_SCORE_TIME\020\007\0221\n-PLAYER_FIELD_"
    "NEXT_RECOVER_SMITHY_BUY_NUM_TIME\020\010\022-\n)PL"
    "AYER_FIELD_LOGIN_7_DAY_REWARD_TAKE_TIME\020"
    "\t\022.\n*PLAYER_FIELD_LOGIN_MONTLY_REWARD_TA"
    "KE_TIME\020\n\022%\n!PLAYER_FIELD_CUR_REBUILD_EN"
    "D_TIME\020\013\022(\n$PLAYER_FIELD_PALACE_TAKE_SAL"
    "ARY_TIME\020\014\022\032\n\026PLAYER_FIELD_LOCK_TIME\020\r\022\031"
    "\n\025PLAYER_FIELD_KILL_NUM\020\016\022!\n\035PLAYER_FIEL"
    "D_ENTER_WORLD_TIME\020\017\022&\n\"PLAYER_FIELD_BUY"
    "_MONTH_CARD_NORMAL\020\020\022\'\n#PLAYER_FIELD_BUY"
    "_MONTH_CARD_ADVANCE\020\021\022\'\n#PLAYER_FIELD_TA"
    "KE_MONTH_CARD_NORMAL\020\022\022(\n$PLAYER_FIELD_T"
    "AKE_MONTH_CARD_ADVANCE\020\023\022)\n%PLAYER_FIELD"
    "_CONGRATULATE_ACTIVE_TIME\020\024\022\035\n\031PLAYER_FI"
    "ELD_64_BIT_COUNT\020\025*2\n\022PLAYER_FLOAT_FIELD"
    "\022\034\n\030PLAYER_FIELD_FLOAT_COUNT\020\000*}\n\020PLAYER"
    "_STR_FIELD\022\025\n\021PLAYER_FIELD_NAME\020\000\022\033\n\027PAL"
    "YER_FIELD_GUILD_NAME\020\001\022\031\n\025PLAYER_FIELD_S"
    "DK_NAME\020\002\022\032\n\026PLAYER_FIELD_STR_COUNT\020\003*m\n"
    "\017PLAYER_STR_DATA\022\036\n\032PLAYER_FIELD_HEAD_IC"
    "ON_IDS\020\000\022\031\n\025PLAYER_FIELD_BUFF_IDS\020\001\022\037\n\033P"
    "LAYER_FIELD_STR_DATA_COUNT\020\002*\375\004\n\017CHARACT"
    "ER_FIELD\022\024\n\020CHAR_FIELD_LEVEL\020\000\022\025\n\021CHAR_F"
    "IELD_CUR_XP\020\001\022\025\n\021CHAR_FIELD_WEAPON\020\002\022\024\n\020"
    "CHAR_FIELD_HORSE\020\003\022\024\n\020CHAR_FIELD_CHEST\020\004"
    "\022\023\n\017CHAR_FIELD_BOOK\020\005\022\023\n\017CHAR_FIELD_JADE"
    "\020\006\022\023\n\017CHAR_FIELD_FLAG\020\007\022\023\n\017CHAR_FIELD_HO"
    "LY\020\010\022\023\n\017CHAR_FIELD_ARMY\020\t\022\023\n\017CHAR_FIELD_"
    "SUIT\020\n\022\025\n\021CHAR_FIELD_TROOPS\020\013\022\025\n\021CHAR_FI"
    "ELD_ATTACK\020\014\022\026\n\022CHAR_FIELD_DEFENSE\020\r\022\027\n\023"
    "CHAR_FIELD_PUNCTURE\020\016\022\024\n\020CHAR_FIELD_PARR"
    "Y\020\017\022\033\n\027CHAR_FIELD_BROKEN_ARRAY\020\020\022\031\n\025CHAR"
    "_FIELD_IMPECCABLE\020\021\022\023\n\017CHAR_FIELD_TONG\020\022"
    "\022\023\n\017CHAR_FIELD_YONG\020\023\022\031\n\025CHAR_FIELD_CUR_"
    "TROOPS\020\024\022\035\n\031CHAR_FIELD_MILITARY_POWER\020\025\022"
    "\034\n\030CHAR_FIELD_JX_LUCK_VALUE\020\026\022\030\n\024CHAR_FI"
    "ELD_JX_TROOPS\020\027\022\030\n\024CHAR_FIELD_JX_ATTACK\020"
    "\030\022\031\n\025CHAR_FIELD_JX_DEFENSE\020\031*\316\001\n\nEQUIP_S"
    "LOT\022\025\n\021EQUIP_SLOT_WEAPON\020\000\022\024\n\020EQUIP_SLOT"
    "_HORSE\020\001\022\024\n\020EQUIP_SLOT_CHEST\020\002\022\023\n\017EQUIP_"
    "SLOT_BOOK\020\003\022\023\n\017EQUIP_SLOT_JADE\020\004\022\023\n\017EQUI"
    "P_SLOT_FLAG\020\005\022\023\n\017EQUIP_SLOT_HOLY\020\006\022\023\n\017EQ"
    "UIP_SLOT_ARMY\020\007\022\024\n\020EQUIP_SLOT_COUNT\020\010*l\n"
    "\016PLAYER_COUNTRY\022\020\n\014COUNTRY_NONE\020\000\022\020\n\014COU"
    "NTRY_WORM\020\001\022\017\n\013COUNTRY_MAN\020\002\022\017\n\013COUNTRY_"
    "GOD\020\003\022\024\n\020COUNTRY_BULLYING\020\004*\347\r\n\017CxGS_ERR"
    "OR_CODE\022\024\n\020ErrCommonSuccess\020\000\022\021\n\rErrComm"
    "onFail\020\001\022\023\n\017ErrInvalidProto\020\002\022\023\n\017ErrInva"
    "lidParam\020\003\022\024\n\020ErrNotEnoughCoin\020\004\022\024\n\020ErrN"
    "otEnoughCurr\020\005\022\024\n\020ErrNotEnoughItem\020\006\022\025\n\021"
    "ErrNotEnoughSpace\020\007\022\024\n\020ErrInvalidItemId\020"
    "\010\022\025\n\021ErrItemCantBeUsed\020\t\022\026\n\022ErrItemCantB"
    "eEquip\020\n\022\027\n\023ErrItemLevelLimited\020\013\022\036\n\032Err"
    "CantFindItemUpgradeData\020\014\022\026\n\022ErrCharCant"
    "Upgrade\020\r\022\031\n\025ErrInvalidCharacterId\020\016\022\035\n\031"
    "ErrCharCantUpgradeQuality\020\017\022$\n ErrCharUp"
    "QualityMaterialNotMatch\020\020\022\024\n\020ErrCharCant"
    "Inlay\020\021\022\025\n\021ErrGMInvalidParam\020\022\022\027\n\023ErrGMI"
    "nvalidCommand\020\023\022\024\n\020ErrQuestNotExist\020\024\022\025\n"
    "\021ErrQuestNotActive\020\025\022\025\n\021ErrQuestNotFinis"
    "h\020\026\022\026\n\022ErrHaveNotTraining\020\027\022$\n ErrDidNot"
    "HaveFreeChanceToLottery\020\030\022\027\n\023ErrNameAlre"
    "adyExist\020\031\022\020\n\014ErrIsBeUseUp\020\032\022\033\n\027ErrStage"
    "LevelNotOpenNow\020\033\022\020\n\014ErrStageLock\020\034\022\025\n\021E"
    "rrStageLevelLock\020\035\022 \n\034ErrStageLevelFight"
    "CountLimit\020\036\022\023\n\017ErrTimeNotMatch\020\037\022\026\n\022Err"
    "NowBonusHasTake\020 \022\033\n\027ErrSellProgramNotAc"
    "tive\020!\022\026\n\022ErrIAPRewardExpire\020\"\022\032\n\026ErrPre"
    "battleIdNotMatch\020#\022\022\n\016ErrNotFreeTime\020$\022\033"
    "\n\027ErrPlayerLevelNotEnough\020%\022\035\n\031ErrNotYet"
    "ActiveHidenSkill\020&\022\023\n\017ErrAlreadyExist\020\'\022"
    "\020\n\014ErrNotUnlock\020(\022\024\n\020ErrNotEnoughFood\020)\022"
    "\024\n\020ErrNotEnoughGold\020*\022\030\n\024ErrNotEnoughCas"
    "hGold\020+\022\024\n\020ErrNotEnoughIron\020,\022\024\n\020ErrNotE"
    "noughWood\020-\022\031\n\025ErrNotEnoughToopsOder\020.\022\026"
    "\n\022ErrNotEnoughLabour\020/\022\023\n\017ErrRechMaxTime"
    "s\0200\022\023\n\017ErrAlreadyBegin\0201\022\024\n\020ErrAlreadyIn"
    "vest\0202\022\026\n\022ErrTodayAlreadyGet\0203\022\025\n\021ErrFun"
    "ctionMaking\0204\022\026\n\022ErrRechBagCapacity\0205\022\023\n"
    "\017ErrCharInBattle\0206\022\022\n\016ErrNotBuyTimes\0207\022\017"
    "\n\013ErrBeShutUp\0208\022\026\n\022ErrAccountBeForbid\0209\022"
    "\026\n\022ErrRechGemMaxLevel\020:\022\016\n\nErrChannel\020;\022"
    "\027\n\023ErrGiftCodeNotExist\020<\022\025\n\021ErrGiftCodeE"
    "xpier\020=\022\027\n\023ErrGiftCodeNoActive\020>\022\026\n\022ErrG"
    "iftCodeInValid\020\?\022\022\n\016ErrAlreadyTake\020@\022\024\n\020"
    "ErrHeroInDungeon\020A\022\031\n\025ErrNeedVipToAutoBu"
    "ild\020B\022\020\n\014ErrTypeCount\020C\022\021\n\rErrLvNotMatch"
    "\020D\022\024\n\020ErrVipLvNotMatch\020E\022\027\n\023ErrQuestHasF"
    "inished\020F\022\023\n\017ErrNoTechnology\020G\022\024\n\020ErrCro"
    "ssHeroBusy\020H\022\027\n\023ErrNeedVipPrivilege\020I*\377\003"
    "\n\026EVENT_LOGIN_FAILD_ENUM\022\034\n\030EVENT_VERSIO"
    "N_CHECK_FAIL\020\001\022 \n\034EVENT_SDK_ACCOUNT_CHEC"
    "K_FAIL\020\002\022-\n)EVENT_SELF_ACCOUNT_CHECK_NOT"
    "_ACCOUNT_INFO\020\003\022+\n\'EVENT_SELF_ACCOUNT_CH"
    "ECK_PASSWORD_ERROR\020\004\0220\n,EVENT_SELF_ACCOU"
    "NT_REGISTER_ACCOUTN_IS_EMPTY\020\005\022/\n+EVENT_"
    "SELF_ACCOUNT_REGISTER_IS_HAD_REGISTER\020\006\022"
    ",\n(EVENT_SELF_ACCOUNT_REGISTER_PWD_IS_EM"
    "PTY\020\007\022.\n*EVENT_SELF_ACCOUNT_REGISTER_WRI"
    "TE_DB_ERROR\020\010\022*\n&EVENT_GET_SERVER_LIST_N"
    "OT_ACCOUNT_INFO\020\t\022,\n(EVENT_GET_SELECT_SE"
    "RVER_NOT_ACCOUNT_INFO\020\n\022.\n*EVENT_GET_SEL"
    "ECT_SERVER_NOT_FIND_SERVER_ID\020\013*\330\005\n\010EVEN"
    "T_ID\022 \n\033EVENT_USER_ACCT_LOGIN_START\020\351\007\022\035"
    "\n\030EVENT_USER_ACCT_LOGIN_OK\020\352\007\022!\n\034EVENT_U"
    "SER_ACCT_LOGIN_FAILED\020\353\007\022\033\n\026EVENT_USER_A"
    "CCT_LOGOUT\020\354\007\022\037\n\032EVENT_USER_ACCT_KICKED_"
    "OUT\020\355\007\022\030\n\023EVENT_PLAYER_CREATE\020\356\007\022\027\n\022EVEN"
    "T_PLAYER_LOGIN\020\357\007\022\036\n\031EVENT_PLAYER_LOGIN_"
    "FAILED\020\362\007\022\033\n\026EVENT_PLAYER_PAY_START\020\321\017\022\030"
    "\n\023EVENT_PLAYER_PAY_OK\020\322\017\022\034\n\027EVENT_PLAYER"
    "_PAY_FAILED\020\323\017\022\032\n\025EVENT_PALYER_ITEM_SYS\020"
    "\271\027\022\033\n\026EVENT_PLAYER_MONEY_SYS\020\272\027\022 \n\033EVENT"
    "_PLAYER_BEHAVIOR_STAGE\020\241\037\022\"\n\035EVENT_PLAYE"
    "R_BEHAVIOR_LEVELUP\020\242\037\022%\n EVENT_PLAYER_BE"
    "HAVIOR_VIPLEVELUP\020\243\037\022\037\n\032EVENT_PLAYER_TAK"
    "E_GIFT_BAG\020\244\037\022\034\n\027EVENT_PLAYER_ARMY_LV_UP"
    "\020\245\037\022\036\n\031EVENT_PLAYER_EQUIP_PURIFY\020\246\037\022!\n\034E"
    "VENT_PLAYER_GODSTONE_PURIFY\020\247\037\022\036\n\031EVENT_"
    "PLAYER_CALL_PHANTOM\020\250\037\022\032\n\025EVENT_PLAYER_A"
    "CTIVITY\020\251\037\022\036\n\031EVENT_PLAYER_COUNTRY_TASK\020"
    "\252\037*\337\r\n\013ITEM_REASON\022\r\n\tIR_GM_GET\020d\022\021\n\rIR_"
    "VENDOR_GET\020e\022\030\n\024IR_QUEST_REWARDS_GET\020f\022\030"
    "\n\024IR_ITEM_COMPOUND_GET\020g\022\033\n\027IR_OPERATION"
    "_REWARD_GET\020h\022\020\n\014IR_LOTTO_GET\020i\022\025\n\021IR_IA"
    "P_REWARD_GET\020j\022\016\n\nIR_IAP_GET\020k\022\017\n\013IR_MAI"
    "L_GET\020l\022\020\n\014IR_CYCLE_GET\020m\022\023\n\017IR_OPEN_BOX"
    "_GET\020n\022\033\n\027IR_STAGE_LEVEL_LOOT_GET\020o\022\030\n\024I"
    "R_RUN_DECOMPOSE_GET\020p\022\032\n\026IR_PVP_RANK_REW"
    "ARD_GET\020q\022\023\n\017IR_ITEM_USE_GET\020r\022\032\n\026IR_MOU"
    "DLE_INCREASE_GET\020s\022\024\n\020IR_ITEM_SELL_GET\020t"
    "\022 \n\034IR_PLAYER_REBUILD_EFFECT_GET\020u\022\034\n\030IR"
    "_PLAYER_CREAT_INIT_GET\020v\022\025\n\021IR_VIP_REWAR"
    "D_GET\020w\022\036\n\032IR_SIGN_UP_BASE_REWARD_GET\020x\022"
    "\034\n\030IR_BAG_RECH_CAPACITY_GET\020y\022\027\n\023IR_QUES"
    "T_REWARD_GET\020z\022\022\n\rIR_LOTTO_COST\020\254\002\022$\n\037IR"
    "_CHARACTER_UPGRADE_SKILL_COST\020\255\002\022!\n\034IR_C"
    "HARACTER_UPGRADE_LV_COST\020\256\002\022\026\n\021IR_ITEM_U"
    "SED_COST\020\257\002\022\022\n\rIR_CYCLE_COST\020\260\002\022\035\n\030IR_EQ"
    "UIP_UPGRADE_LV_COST\020\261\002\022\032\n\025IR_ITEM_COMPOU"
    "ND_COST\020\262\002\022\017\n\nIR_GM_COST\020\263\002\022\023\n\016IR_VENDOR"
    "_COST\020\264\002\022\033\n\026IR_VENDOR_REFRESH_COST\020\265\002\022\037\n"
    "\032IR_PLAYER_CHANGE_NAME_COST\020\266\002\022!\n\034IR_PLA"
    "YER_BUY_HEAD_ICON_COST\020\267\002\022\"\n\035IR_CHARACTE"
    "R_INCREASE_HP_COST\020\270\002\022\033\n\026IR_PLAYER_BUYBU"
    "FF_COST\020\271\002\022\034\n\027IR_PLAYER_BUY_ITEM_COST\020\272\002"
    "\022!\n\034IR_PLAYER_BUY_BACK_ITEM_COST\020\273\002\022\033\n\026I"
    "R_PLAYER_REBUILD_COST\020\274\002\022$\n\037IR_PLAYER_ZH"
    "AOMU_CHARACTER_COST\020\275\002\022\033\n\026IR_BUILDING_LV"
    "_UP_COST\020\276\002\022\027\n\022IR_EESET_TIME_COST\020\277\002\022\027\n\022"
    "IR_TRAIN_CHAR_COST\020\300\002\022\033\n\026IR_CLEAR_TONDEN"
    "CD_COST\020\301\002\022\033\n\026IR_INSTANT_ESCAPE_COST\020\302\002\022"
    "\034\n\027IR_INVEST_CLEAR_CD_COST\020\303\002\022\030\n\023IR_ITEM"
    "_EXPIRY_COST\020\304\002\022\'\n\"IR_ACTIVITY_STAR_BOX_"
    "LEVEL_UP_COST\020\305\002\0220\n+IR_ACTIVITY_STAR_BOX"
    "_FINISH_COUNT_DOWN_COST\020\306\002\022\034\n\027IR_ACTIVIT"
    "Y_XILIAN_COST\020\307\002\022\030\n\023IR_QUICK_FIGHT_COST\020"
    "\310\002\022\031\n\024IR_CROSS_HAMMER_COST\020\311\002\022\035\n\030IR_CROS"
    "S_KILL_TROOP_COST\020\312\002\022\032\n\025IR_RUN_DECOMPOSE"
    "_COST\020\313\002\022\025\n\020IR_MINZHONG_COST\020\314\002\022\026\n\021IR_CE"
    "LEBRITY_COST\020\315\002\022\"\n\035IR_LIMITED_TIME_SHOP_"
    "BUY_COST\020\316\002\022$\n\037IR_GENERAL_REWRAD_OPEN_BO"
    "X_COST\020\317\002\022\024\n\017IR_GENERAL_COST\020\320\002\022\035\n\030IR_RE"
    "COMMEND_COUNTRY_GET\020\321\002\022\035\n\030IR_AUTO_COUNTR"
    "Y_WAR_COST\020\322\002\022\035\n\030IR_SEIGE_ARMY_FORCE_COS"
    "T\020\323\002", 12044);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Enum.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Enum_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Enum_2eproto {
  StaticDescriptorInitializer_Enum_2eproto() {
    protobuf_AddDesc_Enum_2eproto();
  }
} static_descriptor_initializer_Enum_2eproto_;
const ::google::protobuf::EnumDescriptor* PLAYER_32_BIT_FLAGS_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PLAYER_32_BIT_FLAGS_TYPE_descriptor_;
}
bool PLAYER_32_BIT_FLAGS_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
    case 4194304:
    case 8388608:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PLAYER_VALUE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PLAYER_VALUE_TYPE_descriptor_;
}
bool PLAYER_VALUE_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PLAYER_32_BIT_FIELD_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PLAYER_32_BIT_FIELD_descriptor_;
}
bool PLAYER_32_BIT_FIELD_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PLAYER_64_BIT_FIELD_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PLAYER_64_BIT_FIELD_descriptor_;
}
bool PLAYER_64_BIT_FIELD_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PLAYER_FLOAT_FIELD_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PLAYER_FLOAT_FIELD_descriptor_;
}
bool PLAYER_FLOAT_FIELD_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PLAYER_STR_FIELD_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PLAYER_STR_FIELD_descriptor_;
}
bool PLAYER_STR_FIELD_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PLAYER_STR_DATA_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PLAYER_STR_DATA_descriptor_;
}
bool PLAYER_STR_DATA_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CHARACTER_FIELD_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CHARACTER_FIELD_descriptor_;
}
bool CHARACTER_FIELD_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EQUIP_SLOT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EQUIP_SLOT_descriptor_;
}
bool EQUIP_SLOT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PLAYER_COUNTRY_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PLAYER_COUNTRY_descriptor_;
}
bool PLAYER_COUNTRY_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CxGS_ERROR_CODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CxGS_ERROR_CODE_descriptor_;
}
bool CxGS_ERROR_CODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EVENT_LOGIN_FAILD_ENUM_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EVENT_LOGIN_FAILD_ENUM_descriptor_;
}
bool EVENT_LOGIN_FAILD_ENUM_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EVENT_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EVENT_ID_descriptor_;
}
bool EVENT_ID_IsValid(int value) {
  switch(value) {
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1010:
    case 2001:
    case 2002:
    case 2003:
    case 3001:
    case 3002:
    case 4001:
    case 4002:
    case 4003:
    case 4004:
    case 4005:
    case 4006:
    case 4007:
    case 4008:
    case 4009:
    case 4010:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ITEM_REASON_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ITEM_REASON_descriptor_;
}
bool ITEM_REASON_IsValid(int value) {
  switch(value) {
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 327:
    case 328:
    case 329:
    case 330:
    case 331:
    case 332:
    case 333:
    case 334:
    case 335:
    case 336:
    case 337:
    case 338:
    case 339:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
