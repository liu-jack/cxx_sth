// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Technology.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Technology.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TechnologyStudy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TechnologyStudy_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_Technology_All_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_Technology_All_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Technology_All_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Technology_All_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Technology_UpStar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Technology_UpStar_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Technology_Study_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Technology_Study_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Technology_Study_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Technology_Study_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Technology_UpStar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Technology_UpStar_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Technology_SpeedUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Technology_SpeedUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Technology_SpeedUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Technology_SpeedUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Technology_Finish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Technology_Finish_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UpStarResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SpeedUpResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FinishResult_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Technology_2eproto() {
  protobuf_AddDesc_Technology_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Technology.proto");
  GOOGLE_CHECK(file != NULL);
  TechnologyStudy_descriptor_ = file->message_type(0);
  static const int TechnologyStudy_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechnologyStudy, tec_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechnologyStudy, star_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechnologyStudy, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechnologyStudy, is_finish_study_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechnologyStudy, table_id_),
  };
  TechnologyStudy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TechnologyStudy_descriptor_,
      TechnologyStudy::default_instance_,
      TechnologyStudy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechnologyStudy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechnologyStudy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TechnologyStudy));
  GxDB_Technology_All_Info_descriptor_ = file->message_type(1);
  static const int GxDB_Technology_All_Info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Technology_All_Info, study_info_),
  };
  GxDB_Technology_All_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_Technology_All_Info_descriptor_,
      GxDB_Technology_All_Info::default_instance_,
      GxDB_Technology_All_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Technology_All_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Technology_All_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_Technology_All_Info));
  GS2C_Technology_All_Info_descriptor_ = file->message_type(2);
  static const int GS2C_Technology_All_Info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Technology_All_Info, study_info_),
  };
  GS2C_Technology_All_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Technology_All_Info_descriptor_,
      GS2C_Technology_All_Info::default_instance_,
      GS2C_Technology_All_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Technology_All_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Technology_All_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Technology_All_Info));
  C2GS_Technology_UpStar_descriptor_ = file->message_type(3);
  static const int C2GS_Technology_UpStar_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Technology_UpStar, id_),
  };
  C2GS_Technology_UpStar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Technology_UpStar_descriptor_,
      C2GS_Technology_UpStar::default_instance_,
      C2GS_Technology_UpStar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Technology_UpStar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Technology_UpStar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Technology_UpStar));
  C2GS_Technology_Study_descriptor_ = file->message_type(4);
  static const int C2GS_Technology_Study_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Technology_Study, id_),
  };
  C2GS_Technology_Study_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Technology_Study_descriptor_,
      C2GS_Technology_Study::default_instance_,
      C2GS_Technology_Study_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Technology_Study, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Technology_Study, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Technology_Study));
  GS2C_Technology_Study_descriptor_ = file->message_type(5);
  static const int GS2C_Technology_Study_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Technology_Study, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Technology_Study, isstudystart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Technology_Study, end_time_),
  };
  GS2C_Technology_Study_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Technology_Study_descriptor_,
      GS2C_Technology_Study::default_instance_,
      GS2C_Technology_Study_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Technology_Study, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Technology_Study, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Technology_Study));
  GS2C_Technology_UpStar_descriptor_ = file->message_type(6);
  static const int GS2C_Technology_UpStar_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Technology_UpStar, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Technology_UpStar, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Technology_UpStar, starnum_),
  };
  GS2C_Technology_UpStar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Technology_UpStar_descriptor_,
      GS2C_Technology_UpStar::default_instance_,
      GS2C_Technology_UpStar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Technology_UpStar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Technology_UpStar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Technology_UpStar));
  C2GS_Technology_SpeedUp_descriptor_ = file->message_type(7);
  static const int C2GS_Technology_SpeedUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Technology_SpeedUp, id_),
  };
  C2GS_Technology_SpeedUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Technology_SpeedUp_descriptor_,
      C2GS_Technology_SpeedUp::default_instance_,
      C2GS_Technology_SpeedUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Technology_SpeedUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Technology_SpeedUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Technology_SpeedUp));
  GS2C_Technology_SpeedUp_descriptor_ = file->message_type(8);
  static const int GS2C_Technology_SpeedUp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Technology_SpeedUp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Technology_SpeedUp, id_),
  };
  GS2C_Technology_SpeedUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Technology_SpeedUp_descriptor_,
      GS2C_Technology_SpeedUp::default_instance_,
      GS2C_Technology_SpeedUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Technology_SpeedUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Technology_SpeedUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Technology_SpeedUp));
  GS2C_Technology_Finish_descriptor_ = file->message_type(9);
  static const int GS2C_Technology_Finish_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Technology_Finish, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Technology_Finish, id_),
  };
  GS2C_Technology_Finish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Technology_Finish_descriptor_,
      GS2C_Technology_Finish::default_instance_,
      GS2C_Technology_Finish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Technology_Finish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Technology_Finish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Technology_Finish));
  UpStarResult_descriptor_ = file->enum_type(0);
  SpeedUpResult_descriptor_ = file->enum_type(1);
  FinishResult_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Technology_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TechnologyStudy_descriptor_, &TechnologyStudy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_Technology_All_Info_descriptor_, &GxDB_Technology_All_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Technology_All_Info_descriptor_, &GS2C_Technology_All_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Technology_UpStar_descriptor_, &C2GS_Technology_UpStar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Technology_Study_descriptor_, &C2GS_Technology_Study::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Technology_Study_descriptor_, &GS2C_Technology_Study::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Technology_UpStar_descriptor_, &GS2C_Technology_UpStar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Technology_SpeedUp_descriptor_, &C2GS_Technology_SpeedUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Technology_SpeedUp_descriptor_, &GS2C_Technology_SpeedUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Technology_Finish_descriptor_, &GS2C_Technology_Finish::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Technology_2eproto() {
  delete TechnologyStudy::default_instance_;
  delete TechnologyStudy_reflection_;
  delete GxDB_Technology_All_Info::default_instance_;
  delete GxDB_Technology_All_Info_reflection_;
  delete GS2C_Technology_All_Info::default_instance_;
  delete GS2C_Technology_All_Info_reflection_;
  delete C2GS_Technology_UpStar::default_instance_;
  delete C2GS_Technology_UpStar_reflection_;
  delete C2GS_Technology_Study::default_instance_;
  delete C2GS_Technology_Study_reflection_;
  delete GS2C_Technology_Study::default_instance_;
  delete GS2C_Technology_Study_reflection_;
  delete GS2C_Technology_UpStar::default_instance_;
  delete GS2C_Technology_UpStar_reflection_;
  delete C2GS_Technology_SpeedUp::default_instance_;
  delete C2GS_Technology_SpeedUp_reflection_;
  delete GS2C_Technology_SpeedUp::default_instance_;
  delete GS2C_Technology_SpeedUp_reflection_;
  delete GS2C_Technology_Finish::default_instance_;
  delete GS2C_Technology_Finish_reflection_;
}

void protobuf_AddDesc_Technology_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_Quest_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020Technology.proto\022\002pb\032\013Quest.proto\"p\n\017T"
    "echnologyStudy\022\016\n\006tec_id\030\001 \002(\r\022\020\n\010star_c"
    "nt\030\002 \002(\r\022\020\n\010end_time\030\003 \002(\004\022\027\n\017is_finish_"
    "study\030\004 \002(\r\022\020\n\010table_id\030\005 \001(\r\"C\n\030GxDB_Te"
    "chnology_All_Info\022\'\n\nstudy_info\030\002 \003(\0132\023."
    "pb.TechnologyStudy\"C\n\030GS2C_Technology_Al"
    "l_Info\022\'\n\nstudy_info\030\001 \003(\0132\023.pb.Technolo"
    "gyStudy\"$\n\026C2GS_Technology_UpStar\022\n\n\002id\030"
    "\001 \002(\r\"#\n\025C2GS_Technology_Study\022\n\n\002id\030\001 \002"
    "(\r\"K\n\025GS2C_Technology_Study\022\n\n\002id\030\001 \002(\r\022"
    "\024\n\014isStudyStart\030\002 \001(\r\022\020\n\010end_time\030\003 \002(\004\""
    "W\n\026GS2C_Technology_UpStar\022 \n\006result\030\001 \002("
    "\0162\020.pb.UpStarResult\022\n\n\002id\030\002 \001(\r\022\017\n\007starn"
    "um\030\003 \001(\r\"%\n\027C2GS_Technology_SpeedUp\022\n\n\002i"
    "d\030\001 \002(\r\"H\n\027GS2C_Technology_SpeedUp\022!\n\006re"
    "sult\030\001 \002(\0162\021.pb.SpeedUpResult\022\n\n\002id\030\002 \001("
    "\r\"F\n\026GS2C_Technology_Finish\022 \n\006result\030\001 "
    "\002(\0162\020.pb.FinishResult\022\n\n\002id\030\002 \001(\r*\227\001\n\014Up"
    "StarResult\022\022\n\016UpStarComplete\020\001\022\027\n\023UpStar"
    "ResourceEmpty\020\002\022\030\n\024UpStarTriggerDecline\020"
    "\003\022\025\n\021UpStarAlreadyDown\020\004\022\024\n\020UpStarResult"
    "Else\020\005\022\023\n\017UpStarIdInvalid\020\006*\236\001\n\rSpeedUpR"
    "esult\022\023\n\017SpeedUpComplete\020\001\022\030\n\024SpeedUpRes"
    "ourceEmpty\020\002\022\031\n\025SpeedUpTriggerDecline\020\003\022"
    "\026\n\022SpeedUpAlreadyDown\020\004\022\025\n\021SpeedUpResult"
    "Else\020\005\022\024\n\020SpeedUpIdInvalid\020\006*\215\001\n\014FinishR"
    "esult\022\022\n\016FinishComplete\020\001\022\017\n\013StudyUnDown"
    "\020\002\022\024\n\020StudyAlreadyDown\020\003\022\027\n\023StudyTrigger"
    "Decline\020\004\022\024\n\020FinishResultElse\020\005\022\023\n\017Finis"
    "hIdInvalid\020\006", 1172);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Technology.proto", &protobuf_RegisterTypes);
  TechnologyStudy::default_instance_ = new TechnologyStudy();
  GxDB_Technology_All_Info::default_instance_ = new GxDB_Technology_All_Info();
  GS2C_Technology_All_Info::default_instance_ = new GS2C_Technology_All_Info();
  C2GS_Technology_UpStar::default_instance_ = new C2GS_Technology_UpStar();
  C2GS_Technology_Study::default_instance_ = new C2GS_Technology_Study();
  GS2C_Technology_Study::default_instance_ = new GS2C_Technology_Study();
  GS2C_Technology_UpStar::default_instance_ = new GS2C_Technology_UpStar();
  C2GS_Technology_SpeedUp::default_instance_ = new C2GS_Technology_SpeedUp();
  GS2C_Technology_SpeedUp::default_instance_ = new GS2C_Technology_SpeedUp();
  GS2C_Technology_Finish::default_instance_ = new GS2C_Technology_Finish();
  TechnologyStudy::default_instance_->InitAsDefaultInstance();
  GxDB_Technology_All_Info::default_instance_->InitAsDefaultInstance();
  GS2C_Technology_All_Info::default_instance_->InitAsDefaultInstance();
  C2GS_Technology_UpStar::default_instance_->InitAsDefaultInstance();
  C2GS_Technology_Study::default_instance_->InitAsDefaultInstance();
  GS2C_Technology_Study::default_instance_->InitAsDefaultInstance();
  GS2C_Technology_UpStar::default_instance_->InitAsDefaultInstance();
  C2GS_Technology_SpeedUp::default_instance_->InitAsDefaultInstance();
  GS2C_Technology_SpeedUp::default_instance_->InitAsDefaultInstance();
  GS2C_Technology_Finish::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Technology_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Technology_2eproto {
  StaticDescriptorInitializer_Technology_2eproto() {
    protobuf_AddDesc_Technology_2eproto();
  }
} static_descriptor_initializer_Technology_2eproto_;
const ::google::protobuf::EnumDescriptor* UpStarResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpStarResult_descriptor_;
}
bool UpStarResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SpeedUpResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeedUpResult_descriptor_;
}
bool SpeedUpResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FinishResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FinishResult_descriptor_;
}
bool FinishResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TechnologyStudy::kTecIdFieldNumber;
const int TechnologyStudy::kStarCntFieldNumber;
const int TechnologyStudy::kEndTimeFieldNumber;
const int TechnologyStudy::kIsFinishStudyFieldNumber;
const int TechnologyStudy::kTableIdFieldNumber;
#endif  // !_MSC_VER

TechnologyStudy::TechnologyStudy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TechnologyStudy::InitAsDefaultInstance() {
}

TechnologyStudy::TechnologyStudy(const TechnologyStudy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TechnologyStudy::SharedCtor() {
  _cached_size_ = 0;
  tec_id_ = 0u;
  star_cnt_ = 0u;
  end_time_ = GOOGLE_ULONGLONG(0);
  is_finish_study_ = 0u;
  table_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TechnologyStudy::~TechnologyStudy() {
  SharedDtor();
}

void TechnologyStudy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TechnologyStudy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TechnologyStudy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TechnologyStudy_descriptor_;
}

const TechnologyStudy& TechnologyStudy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Technology_2eproto();
  return *default_instance_;
}

TechnologyStudy* TechnologyStudy::default_instance_ = NULL;

TechnologyStudy* TechnologyStudy::New() const {
  return new TechnologyStudy;
}

void TechnologyStudy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tec_id_ = 0u;
    star_cnt_ = 0u;
    end_time_ = GOOGLE_ULONGLONG(0);
    is_finish_study_ = 0u;
    table_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TechnologyStudy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 tec_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tec_id_)));
          set_has_tec_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star_cnt;
        break;
      }

      // required uint32 star_cnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_cnt_)));
          set_has_star_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end_time;
        break;
      }

      // required uint64 end_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_finish_study;
        break;
      }

      // required uint32 is_finish_study = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_finish_study:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_finish_study_)));
          set_has_is_finish_study();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_table_id;
        break;
      }

      // optional uint32 table_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TechnologyStudy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 tec_id = 1;
  if (has_tec_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tec_id(), output);
  }

  // required uint32 star_cnt = 2;
  if (has_star_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star_cnt(), output);
  }

  // required uint64 end_time = 3;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->end_time(), output);
  }

  // required uint32 is_finish_study = 4;
  if (has_is_finish_study()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->is_finish_study(), output);
  }

  // optional uint32 table_id = 5;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->table_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TechnologyStudy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 tec_id = 1;
  if (has_tec_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tec_id(), target);
  }

  // required uint32 star_cnt = 2;
  if (has_star_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star_cnt(), target);
  }

  // required uint64 end_time = 3;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->end_time(), target);
  }

  // required uint32 is_finish_study = 4;
  if (has_is_finish_study()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->is_finish_study(), target);
  }

  // optional uint32 table_id = 5;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->table_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TechnologyStudy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 tec_id = 1;
    if (has_tec_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tec_id());
    }

    // required uint32 star_cnt = 2;
    if (has_star_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_cnt());
    }

    // required uint64 end_time = 3;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

    // required uint32 is_finish_study = 4;
    if (has_is_finish_study()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_finish_study());
    }

    // optional uint32 table_id = 5;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TechnologyStudy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TechnologyStudy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TechnologyStudy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TechnologyStudy::MergeFrom(const TechnologyStudy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tec_id()) {
      set_tec_id(from.tec_id());
    }
    if (from.has_star_cnt()) {
      set_star_cnt(from.star_cnt());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_is_finish_study()) {
      set_is_finish_study(from.is_finish_study());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TechnologyStudy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TechnologyStudy::CopyFrom(const TechnologyStudy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TechnologyStudy::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TechnologyStudy::Swap(TechnologyStudy* other) {
  if (other != this) {
    std::swap(tec_id_, other->tec_id_);
    std::swap(star_cnt_, other->star_cnt_);
    std::swap(end_time_, other->end_time_);
    std::swap(is_finish_study_, other->is_finish_study_);
    std::swap(table_id_, other->table_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TechnologyStudy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TechnologyStudy_descriptor_;
  metadata.reflection = TechnologyStudy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_Technology_All_Info::kStudyInfoFieldNumber;
#endif  // !_MSC_VER

GxDB_Technology_All_Info::GxDB_Technology_All_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_Technology_All_Info::InitAsDefaultInstance() {
}

GxDB_Technology_All_Info::GxDB_Technology_All_Info(const GxDB_Technology_All_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_Technology_All_Info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_Technology_All_Info::~GxDB_Technology_All_Info() {
  SharedDtor();
}

void GxDB_Technology_All_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_Technology_All_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_Technology_All_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_Technology_All_Info_descriptor_;
}

const GxDB_Technology_All_Info& GxDB_Technology_All_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Technology_2eproto();
  return *default_instance_;
}

GxDB_Technology_All_Info* GxDB_Technology_All_Info::default_instance_ = NULL;

GxDB_Technology_All_Info* GxDB_Technology_All_Info::New() const {
  return new GxDB_Technology_All_Info;
}

void GxDB_Technology_All_Info::Clear() {
  study_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_Technology_All_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TechnologyStudy study_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_study_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_study_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_study_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_Technology_All_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.TechnologyStudy study_info = 2;
  for (int i = 0; i < this->study_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->study_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_Technology_All_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.TechnologyStudy study_info = 2;
  for (int i = 0; i < this->study_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->study_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_Technology_All_Info::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TechnologyStudy study_info = 2;
  total_size += 1 * this->study_info_size();
  for (int i = 0; i < this->study_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->study_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_Technology_All_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_Technology_All_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_Technology_All_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_Technology_All_Info::MergeFrom(const GxDB_Technology_All_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  study_info_.MergeFrom(from.study_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_Technology_All_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_Technology_All_Info::CopyFrom(const GxDB_Technology_All_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_Technology_All_Info::IsInitialized() const {

  for (int i = 0; i < study_info_size(); i++) {
    if (!this->study_info(i).IsInitialized()) return false;
  }
  return true;
}

void GxDB_Technology_All_Info::Swap(GxDB_Technology_All_Info* other) {
  if (other != this) {
    study_info_.Swap(&other->study_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_Technology_All_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_Technology_All_Info_descriptor_;
  metadata.reflection = GxDB_Technology_All_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Technology_All_Info::kStudyInfoFieldNumber;
#endif  // !_MSC_VER

GS2C_Technology_All_Info::GS2C_Technology_All_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Technology_All_Info::InitAsDefaultInstance() {
}

GS2C_Technology_All_Info::GS2C_Technology_All_Info(const GS2C_Technology_All_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Technology_All_Info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Technology_All_Info::~GS2C_Technology_All_Info() {
  SharedDtor();
}

void GS2C_Technology_All_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Technology_All_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Technology_All_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Technology_All_Info_descriptor_;
}

const GS2C_Technology_All_Info& GS2C_Technology_All_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Technology_2eproto();
  return *default_instance_;
}

GS2C_Technology_All_Info* GS2C_Technology_All_Info::default_instance_ = NULL;

GS2C_Technology_All_Info* GS2C_Technology_All_Info::New() const {
  return new GS2C_Technology_All_Info;
}

void GS2C_Technology_All_Info::Clear() {
  study_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Technology_All_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TechnologyStudy study_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_study_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_study_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_study_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Technology_All_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.TechnologyStudy study_info = 1;
  for (int i = 0; i < this->study_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->study_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Technology_All_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.TechnologyStudy study_info = 1;
  for (int i = 0; i < this->study_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->study_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Technology_All_Info::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TechnologyStudy study_info = 1;
  total_size += 1 * this->study_info_size();
  for (int i = 0; i < this->study_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->study_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Technology_All_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Technology_All_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Technology_All_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Technology_All_Info::MergeFrom(const GS2C_Technology_All_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  study_info_.MergeFrom(from.study_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Technology_All_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Technology_All_Info::CopyFrom(const GS2C_Technology_All_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Technology_All_Info::IsInitialized() const {

  for (int i = 0; i < study_info_size(); i++) {
    if (!this->study_info(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Technology_All_Info::Swap(GS2C_Technology_All_Info* other) {
  if (other != this) {
    study_info_.Swap(&other->study_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Technology_All_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Technology_All_Info_descriptor_;
  metadata.reflection = GS2C_Technology_All_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Technology_UpStar::kIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Technology_UpStar::C2GS_Technology_UpStar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Technology_UpStar::InitAsDefaultInstance() {
}

C2GS_Technology_UpStar::C2GS_Technology_UpStar(const C2GS_Technology_UpStar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Technology_UpStar::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Technology_UpStar::~C2GS_Technology_UpStar() {
  SharedDtor();
}

void C2GS_Technology_UpStar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Technology_UpStar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Technology_UpStar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Technology_UpStar_descriptor_;
}

const C2GS_Technology_UpStar& C2GS_Technology_UpStar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Technology_2eproto();
  return *default_instance_;
}

C2GS_Technology_UpStar* C2GS_Technology_UpStar::default_instance_ = NULL;

C2GS_Technology_UpStar* C2GS_Technology_UpStar::New() const {
  return new C2GS_Technology_UpStar;
}

void C2GS_Technology_UpStar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Technology_UpStar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Technology_UpStar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Technology_UpStar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Technology_UpStar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Technology_UpStar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Technology_UpStar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Technology_UpStar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Technology_UpStar::MergeFrom(const C2GS_Technology_UpStar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Technology_UpStar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Technology_UpStar::CopyFrom(const C2GS_Technology_UpStar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Technology_UpStar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Technology_UpStar::Swap(C2GS_Technology_UpStar* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Technology_UpStar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Technology_UpStar_descriptor_;
  metadata.reflection = C2GS_Technology_UpStar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Technology_Study::kIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Technology_Study::C2GS_Technology_Study()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Technology_Study::InitAsDefaultInstance() {
}

C2GS_Technology_Study::C2GS_Technology_Study(const C2GS_Technology_Study& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Technology_Study::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Technology_Study::~C2GS_Technology_Study() {
  SharedDtor();
}

void C2GS_Technology_Study::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Technology_Study::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Technology_Study::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Technology_Study_descriptor_;
}

const C2GS_Technology_Study& C2GS_Technology_Study::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Technology_2eproto();
  return *default_instance_;
}

C2GS_Technology_Study* C2GS_Technology_Study::default_instance_ = NULL;

C2GS_Technology_Study* C2GS_Technology_Study::New() const {
  return new C2GS_Technology_Study;
}

void C2GS_Technology_Study::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Technology_Study::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Technology_Study::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Technology_Study::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Technology_Study::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Technology_Study::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Technology_Study* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Technology_Study*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Technology_Study::MergeFrom(const C2GS_Technology_Study& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Technology_Study::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Technology_Study::CopyFrom(const C2GS_Technology_Study& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Technology_Study::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Technology_Study::Swap(C2GS_Technology_Study* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Technology_Study::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Technology_Study_descriptor_;
  metadata.reflection = C2GS_Technology_Study_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Technology_Study::kIdFieldNumber;
const int GS2C_Technology_Study::kIsStudyStartFieldNumber;
const int GS2C_Technology_Study::kEndTimeFieldNumber;
#endif  // !_MSC_VER

GS2C_Technology_Study::GS2C_Technology_Study()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Technology_Study::InitAsDefaultInstance() {
}

GS2C_Technology_Study::GS2C_Technology_Study(const GS2C_Technology_Study& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Technology_Study::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  isstudystart_ = 0u;
  end_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Technology_Study::~GS2C_Technology_Study() {
  SharedDtor();
}

void GS2C_Technology_Study::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Technology_Study::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Technology_Study::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Technology_Study_descriptor_;
}

const GS2C_Technology_Study& GS2C_Technology_Study::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Technology_2eproto();
  return *default_instance_;
}

GS2C_Technology_Study* GS2C_Technology_Study::default_instance_ = NULL;

GS2C_Technology_Study* GS2C_Technology_Study::New() const {
  return new GS2C_Technology_Study;
}

void GS2C_Technology_Study::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    isstudystart_ = 0u;
    end_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Technology_Study::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isStudyStart;
        break;
      }

      // optional uint32 isStudyStart = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isStudyStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isstudystart_)));
          set_has_isstudystart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end_time;
        break;
      }

      // required uint64 end_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Technology_Study::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 isStudyStart = 2;
  if (has_isstudystart()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->isstudystart(), output);
  }

  // required uint64 end_time = 3;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Technology_Study::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 isStudyStart = 2;
  if (has_isstudystart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->isstudystart(), target);
  }

  // required uint64 end_time = 3;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Technology_Study::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 isStudyStart = 2;
    if (has_isstudystart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isstudystart());
    }

    // required uint64 end_time = 3;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Technology_Study::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Technology_Study* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Technology_Study*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Technology_Study::MergeFrom(const GS2C_Technology_Study& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_isstudystart()) {
      set_isstudystart(from.isstudystart());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Technology_Study::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Technology_Study::CopyFrom(const GS2C_Technology_Study& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Technology_Study::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void GS2C_Technology_Study::Swap(GS2C_Technology_Study* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(isstudystart_, other->isstudystart_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Technology_Study::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Technology_Study_descriptor_;
  metadata.reflection = GS2C_Technology_Study_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Technology_UpStar::kResultFieldNumber;
const int GS2C_Technology_UpStar::kIdFieldNumber;
const int GS2C_Technology_UpStar::kStarnumFieldNumber;
#endif  // !_MSC_VER

GS2C_Technology_UpStar::GS2C_Technology_UpStar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Technology_UpStar::InitAsDefaultInstance() {
}

GS2C_Technology_UpStar::GS2C_Technology_UpStar(const GS2C_Technology_UpStar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Technology_UpStar::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  id_ = 0u;
  starnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Technology_UpStar::~GS2C_Technology_UpStar() {
  SharedDtor();
}

void GS2C_Technology_UpStar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Technology_UpStar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Technology_UpStar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Technology_UpStar_descriptor_;
}

const GS2C_Technology_UpStar& GS2C_Technology_UpStar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Technology_2eproto();
  return *default_instance_;
}

GS2C_Technology_UpStar* GS2C_Technology_UpStar::default_instance_ = NULL;

GS2C_Technology_UpStar* GS2C_Technology_UpStar::New() const {
  return new GS2C_Technology_UpStar;
}

void GS2C_Technology_UpStar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    id_ = 0u;
    starnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Technology_UpStar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.UpStarResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::UpStarResult_IsValid(value)) {
            set_result(static_cast< ::pb::UpStarResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_starnum;
        break;
      }

      // optional uint32 starnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starnum_)));
          set_has_starnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Technology_UpStar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.UpStarResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 starnum = 3;
  if (has_starnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->starnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Technology_UpStar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.UpStarResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional uint32 starnum = 3;
  if (has_starnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->starnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Technology_UpStar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.UpStarResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 starnum = 3;
    if (has_starnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Technology_UpStar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Technology_UpStar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Technology_UpStar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Technology_UpStar::MergeFrom(const GS2C_Technology_UpStar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_starnum()) {
      set_starnum(from.starnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Technology_UpStar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Technology_UpStar::CopyFrom(const GS2C_Technology_UpStar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Technology_UpStar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Technology_UpStar::Swap(GS2C_Technology_UpStar* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(starnum_, other->starnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Technology_UpStar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Technology_UpStar_descriptor_;
  metadata.reflection = GS2C_Technology_UpStar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Technology_SpeedUp::kIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Technology_SpeedUp::C2GS_Technology_SpeedUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Technology_SpeedUp::InitAsDefaultInstance() {
}

C2GS_Technology_SpeedUp::C2GS_Technology_SpeedUp(const C2GS_Technology_SpeedUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Technology_SpeedUp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Technology_SpeedUp::~C2GS_Technology_SpeedUp() {
  SharedDtor();
}

void C2GS_Technology_SpeedUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Technology_SpeedUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Technology_SpeedUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Technology_SpeedUp_descriptor_;
}

const C2GS_Technology_SpeedUp& C2GS_Technology_SpeedUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Technology_2eproto();
  return *default_instance_;
}

C2GS_Technology_SpeedUp* C2GS_Technology_SpeedUp::default_instance_ = NULL;

C2GS_Technology_SpeedUp* C2GS_Technology_SpeedUp::New() const {
  return new C2GS_Technology_SpeedUp;
}

void C2GS_Technology_SpeedUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Technology_SpeedUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Technology_SpeedUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Technology_SpeedUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Technology_SpeedUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Technology_SpeedUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Technology_SpeedUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Technology_SpeedUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Technology_SpeedUp::MergeFrom(const C2GS_Technology_SpeedUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Technology_SpeedUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Technology_SpeedUp::CopyFrom(const C2GS_Technology_SpeedUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Technology_SpeedUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Technology_SpeedUp::Swap(C2GS_Technology_SpeedUp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Technology_SpeedUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Technology_SpeedUp_descriptor_;
  metadata.reflection = C2GS_Technology_SpeedUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Technology_SpeedUp::kResultFieldNumber;
const int GS2C_Technology_SpeedUp::kIdFieldNumber;
#endif  // !_MSC_VER

GS2C_Technology_SpeedUp::GS2C_Technology_SpeedUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Technology_SpeedUp::InitAsDefaultInstance() {
}

GS2C_Technology_SpeedUp::GS2C_Technology_SpeedUp(const GS2C_Technology_SpeedUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Technology_SpeedUp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Technology_SpeedUp::~GS2C_Technology_SpeedUp() {
  SharedDtor();
}

void GS2C_Technology_SpeedUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Technology_SpeedUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Technology_SpeedUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Technology_SpeedUp_descriptor_;
}

const GS2C_Technology_SpeedUp& GS2C_Technology_SpeedUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Technology_2eproto();
  return *default_instance_;
}

GS2C_Technology_SpeedUp* GS2C_Technology_SpeedUp::default_instance_ = NULL;

GS2C_Technology_SpeedUp* GS2C_Technology_SpeedUp::New() const {
  return new GS2C_Technology_SpeedUp;
}

void GS2C_Technology_SpeedUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Technology_SpeedUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.SpeedUpResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::SpeedUpResult_IsValid(value)) {
            set_result(static_cast< ::pb::SpeedUpResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Technology_SpeedUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.SpeedUpResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Technology_SpeedUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.SpeedUpResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Technology_SpeedUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.SpeedUpResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Technology_SpeedUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Technology_SpeedUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Technology_SpeedUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Technology_SpeedUp::MergeFrom(const GS2C_Technology_SpeedUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Technology_SpeedUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Technology_SpeedUp::CopyFrom(const GS2C_Technology_SpeedUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Technology_SpeedUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Technology_SpeedUp::Swap(GS2C_Technology_SpeedUp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Technology_SpeedUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Technology_SpeedUp_descriptor_;
  metadata.reflection = GS2C_Technology_SpeedUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Technology_Finish::kResultFieldNumber;
const int GS2C_Technology_Finish::kIdFieldNumber;
#endif  // !_MSC_VER

GS2C_Technology_Finish::GS2C_Technology_Finish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Technology_Finish::InitAsDefaultInstance() {
}

GS2C_Technology_Finish::GS2C_Technology_Finish(const GS2C_Technology_Finish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Technology_Finish::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Technology_Finish::~GS2C_Technology_Finish() {
  SharedDtor();
}

void GS2C_Technology_Finish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Technology_Finish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Technology_Finish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Technology_Finish_descriptor_;
}

const GS2C_Technology_Finish& GS2C_Technology_Finish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Technology_2eproto();
  return *default_instance_;
}

GS2C_Technology_Finish* GS2C_Technology_Finish::default_instance_ = NULL;

GS2C_Technology_Finish* GS2C_Technology_Finish::New() const {
  return new GS2C_Technology_Finish;
}

void GS2C_Technology_Finish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Technology_Finish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.FinishResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::FinishResult_IsValid(value)) {
            set_result(static_cast< ::pb::FinishResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Technology_Finish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.FinishResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Technology_Finish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.FinishResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Technology_Finish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.FinishResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Technology_Finish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Technology_Finish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Technology_Finish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Technology_Finish::MergeFrom(const GS2C_Technology_Finish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Technology_Finish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Technology_Finish::CopyFrom(const GS2C_Technology_Finish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Technology_Finish::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Technology_Finish::Swap(GS2C_Technology_Finish* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Technology_Finish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Technology_Finish_descriptor_;
  metadata.reflection = GS2C_Technology_Finish_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
