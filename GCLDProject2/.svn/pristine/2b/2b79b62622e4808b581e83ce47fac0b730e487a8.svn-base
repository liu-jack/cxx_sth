// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Smithy.proto

#ifndef PROTOBUF_Smithy_2eproto__INCLUDED
#define PROTOBUF_Smithy_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommomDef.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Smithy_2eproto();
void protobuf_AssignDesc_Smithy_2eproto();
void protobuf_ShutdownFile_Smithy_2eproto();

class SubSmelter;
class GS2C_Smithy_All_Info;
class C2GS_Smithy_Smelter_Do;
class C2GS_Smithy_Sub_Smelter_LevelUp;
class C2GS_Smithy_Build_By_Silver;

// ===================================================================

class SubSmelter : public ::google::protobuf::Message {
 public:
  SubSmelter();
  virtual ~SubSmelter();

  SubSmelter(const SubSmelter& from);

  inline SubSmelter& operator=(const SubSmelter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubSmelter& default_instance();

  void Swap(SubSmelter* other);

  // implements Message ----------------------------------------------

  SubSmelter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubSmelter& from);
  void MergeFrom(const SubSmelter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 star = 1;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 1;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // required uint32 smelt_times = 2;
  inline bool has_smelt_times() const;
  inline void clear_smelt_times();
  static const int kSmeltTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 smelt_times() const;
  inline void set_smelt_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.SubSmelter)
 private:
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_smelt_times();
  inline void clear_has_smelt_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint32 smelt_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Smithy_2eproto();
  friend void protobuf_AssignDesc_Smithy_2eproto();
  friend void protobuf_ShutdownFile_Smithy_2eproto();

  void InitAsDefaultInstance();
  static SubSmelter* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Smithy_All_Info : public ::google::protobuf::Message {
 public:
  GS2C_Smithy_All_Info();
  virtual ~GS2C_Smithy_All_Info();

  GS2C_Smithy_All_Info(const GS2C_Smithy_All_Info& from);

  inline GS2C_Smithy_All_Info& operator=(const GS2C_Smithy_All_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Smithy_All_Info& default_instance();

  void Swap(GS2C_Smithy_All_Info* other);

  // implements Message ----------------------------------------------

  GS2C_Smithy_All_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Smithy_All_Info& from);
  void MergeFrom(const GS2C_Smithy_All_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 levle = 1;
  inline bool has_levle() const;
  inline void clear_levle();
  static const int kLevleFieldNumber = 1;
  inline ::google::protobuf::uint32 levle() const;
  inline void set_levle(::google::protobuf::uint32 value);

  // optional uint32 silver_coin = 2;
  inline bool has_silver_coin() const;
  inline void clear_silver_coin();
  static const int kSilverCoinFieldNumber = 2;
  inline ::google::protobuf::uint32 silver_coin() const;
  inline void set_silver_coin(::google::protobuf::uint32 value);

  // repeated .pb.SubSmelter sub_smelter = 3;
  inline int sub_smelter_size() const;
  inline void clear_sub_smelter();
  static const int kSubSmelterFieldNumber = 3;
  inline const ::pb::SubSmelter& sub_smelter(int index) const;
  inline ::pb::SubSmelter* mutable_sub_smelter(int index);
  inline ::pb::SubSmelter* add_sub_smelter();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::SubSmelter >&
      sub_smelter() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::SubSmelter >*
      mutable_sub_smelter();

  // @@protoc_insertion_point(class_scope:pb.GS2C_Smithy_All_Info)
 private:
  inline void set_has_levle();
  inline void clear_has_levle();
  inline void set_has_silver_coin();
  inline void clear_has_silver_coin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 levle_;
  ::google::protobuf::uint32 silver_coin_;
  ::google::protobuf::RepeatedPtrField< ::pb::SubSmelter > sub_smelter_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Smithy_2eproto();
  friend void protobuf_AssignDesc_Smithy_2eproto();
  friend void protobuf_ShutdownFile_Smithy_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Smithy_All_Info* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Smithy_Smelter_Do : public ::google::protobuf::Message {
 public:
  C2GS_Smithy_Smelter_Do();
  virtual ~C2GS_Smithy_Smelter_Do();

  C2GS_Smithy_Smelter_Do(const C2GS_Smithy_Smelter_Do& from);

  inline C2GS_Smithy_Smelter_Do& operator=(const C2GS_Smithy_Smelter_Do& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Smithy_Smelter_Do& default_instance();

  void Swap(C2GS_Smithy_Smelter_Do* other);

  // implements Message ----------------------------------------------

  C2GS_Smithy_Smelter_Do* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Smithy_Smelter_Do& from);
  void MergeFrom(const C2GS_Smithy_Smelter_Do& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 idx = 1;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 1;
  inline ::google::protobuf::uint32 idx() const;
  inline void set_idx(::google::protobuf::uint32 value);

  // repeated uint32 item_id = 2;
  inline int item_id_size() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 item_id(int index) const;
  inline void set_item_id(int index, ::google::protobuf::uint32 value);
  inline void add_item_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      item_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_item_id();

  // @@protoc_insertion_point(class_scope:pb.C2GS_Smithy_Smelter_Do)
 private:
  inline void set_has_idx();
  inline void clear_has_idx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > item_id_;
  ::google::protobuf::uint32 idx_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Smithy_2eproto();
  friend void protobuf_AssignDesc_Smithy_2eproto();
  friend void protobuf_ShutdownFile_Smithy_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Smithy_Smelter_Do* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Smithy_Sub_Smelter_LevelUp : public ::google::protobuf::Message {
 public:
  C2GS_Smithy_Sub_Smelter_LevelUp();
  virtual ~C2GS_Smithy_Sub_Smelter_LevelUp();

  C2GS_Smithy_Sub_Smelter_LevelUp(const C2GS_Smithy_Sub_Smelter_LevelUp& from);

  inline C2GS_Smithy_Sub_Smelter_LevelUp& operator=(const C2GS_Smithy_Sub_Smelter_LevelUp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Smithy_Sub_Smelter_LevelUp& default_instance();

  void Swap(C2GS_Smithy_Sub_Smelter_LevelUp* other);

  // implements Message ----------------------------------------------

  C2GS_Smithy_Sub_Smelter_LevelUp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Smithy_Sub_Smelter_LevelUp& from);
  void MergeFrom(const C2GS_Smithy_Sub_Smelter_LevelUp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 idx = 1;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 1;
  inline ::google::protobuf::uint32 idx() const;
  inline void set_idx(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Smithy_Sub_Smelter_LevelUp)
 private:
  inline void set_has_idx();
  inline void clear_has_idx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 idx_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Smithy_2eproto();
  friend void protobuf_AssignDesc_Smithy_2eproto();
  friend void protobuf_ShutdownFile_Smithy_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Smithy_Sub_Smelter_LevelUp* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Smithy_Build_By_Silver : public ::google::protobuf::Message {
 public:
  C2GS_Smithy_Build_By_Silver();
  virtual ~C2GS_Smithy_Build_By_Silver();

  C2GS_Smithy_Build_By_Silver(const C2GS_Smithy_Build_By_Silver& from);

  inline C2GS_Smithy_Build_By_Silver& operator=(const C2GS_Smithy_Build_By_Silver& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Smithy_Build_By_Silver& default_instance();

  void Swap(C2GS_Smithy_Build_By_Silver* other);

  // implements Message ----------------------------------------------

  C2GS_Smithy_Build_By_Silver* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Smithy_Build_By_Silver& from);
  void MergeFrom(const C2GS_Smithy_Build_By_Silver& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_fast = 1;
  inline bool has_is_fast() const;
  inline void clear_is_fast();
  static const int kIsFastFieldNumber = 1;
  inline bool is_fast() const;
  inline void set_is_fast(bool value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Smithy_Build_By_Silver)
 private:
  inline void set_has_is_fast();
  inline void clear_has_is_fast();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool is_fast_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Smithy_2eproto();
  friend void protobuf_AssignDesc_Smithy_2eproto();
  friend void protobuf_ShutdownFile_Smithy_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Smithy_Build_By_Silver* default_instance_;
};
// ===================================================================


// ===================================================================

// SubSmelter

// required uint32 star = 1;
inline bool SubSmelter::has_star() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubSmelter::set_has_star() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubSmelter::clear_has_star() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubSmelter::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 SubSmelter::star() const {
  return star_;
}
inline void SubSmelter::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// required uint32 smelt_times = 2;
inline bool SubSmelter::has_smelt_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubSmelter::set_has_smelt_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubSmelter::clear_has_smelt_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubSmelter::clear_smelt_times() {
  smelt_times_ = 0u;
  clear_has_smelt_times();
}
inline ::google::protobuf::uint32 SubSmelter::smelt_times() const {
  return smelt_times_;
}
inline void SubSmelter::set_smelt_times(::google::protobuf::uint32 value) {
  set_has_smelt_times();
  smelt_times_ = value;
}

// -------------------------------------------------------------------

// GS2C_Smithy_All_Info

// optional uint32 levle = 1;
inline bool GS2C_Smithy_All_Info::has_levle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Smithy_All_Info::set_has_levle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Smithy_All_Info::clear_has_levle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Smithy_All_Info::clear_levle() {
  levle_ = 0u;
  clear_has_levle();
}
inline ::google::protobuf::uint32 GS2C_Smithy_All_Info::levle() const {
  return levle_;
}
inline void GS2C_Smithy_All_Info::set_levle(::google::protobuf::uint32 value) {
  set_has_levle();
  levle_ = value;
}

// optional uint32 silver_coin = 2;
inline bool GS2C_Smithy_All_Info::has_silver_coin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Smithy_All_Info::set_has_silver_coin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Smithy_All_Info::clear_has_silver_coin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Smithy_All_Info::clear_silver_coin() {
  silver_coin_ = 0u;
  clear_has_silver_coin();
}
inline ::google::protobuf::uint32 GS2C_Smithy_All_Info::silver_coin() const {
  return silver_coin_;
}
inline void GS2C_Smithy_All_Info::set_silver_coin(::google::protobuf::uint32 value) {
  set_has_silver_coin();
  silver_coin_ = value;
}

// repeated .pb.SubSmelter sub_smelter = 3;
inline int GS2C_Smithy_All_Info::sub_smelter_size() const {
  return sub_smelter_.size();
}
inline void GS2C_Smithy_All_Info::clear_sub_smelter() {
  sub_smelter_.Clear();
}
inline const ::pb::SubSmelter& GS2C_Smithy_All_Info::sub_smelter(int index) const {
  return sub_smelter_.Get(index);
}
inline ::pb::SubSmelter* GS2C_Smithy_All_Info::mutable_sub_smelter(int index) {
  return sub_smelter_.Mutable(index);
}
inline ::pb::SubSmelter* GS2C_Smithy_All_Info::add_sub_smelter() {
  return sub_smelter_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::SubSmelter >&
GS2C_Smithy_All_Info::sub_smelter() const {
  return sub_smelter_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::SubSmelter >*
GS2C_Smithy_All_Info::mutable_sub_smelter() {
  return &sub_smelter_;
}

// -------------------------------------------------------------------

// C2GS_Smithy_Smelter_Do

// required uint32 idx = 1;
inline bool C2GS_Smithy_Smelter_Do::has_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Smithy_Smelter_Do::set_has_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Smithy_Smelter_Do::clear_has_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Smithy_Smelter_Do::clear_idx() {
  idx_ = 0u;
  clear_has_idx();
}
inline ::google::protobuf::uint32 C2GS_Smithy_Smelter_Do::idx() const {
  return idx_;
}
inline void C2GS_Smithy_Smelter_Do::set_idx(::google::protobuf::uint32 value) {
  set_has_idx();
  idx_ = value;
}

// repeated uint32 item_id = 2;
inline int C2GS_Smithy_Smelter_Do::item_id_size() const {
  return item_id_.size();
}
inline void C2GS_Smithy_Smelter_Do::clear_item_id() {
  item_id_.Clear();
}
inline ::google::protobuf::uint32 C2GS_Smithy_Smelter_Do::item_id(int index) const {
  return item_id_.Get(index);
}
inline void C2GS_Smithy_Smelter_Do::set_item_id(int index, ::google::protobuf::uint32 value) {
  item_id_.Set(index, value);
}
inline void C2GS_Smithy_Smelter_Do::add_item_id(::google::protobuf::uint32 value) {
  item_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
C2GS_Smithy_Smelter_Do::item_id() const {
  return item_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
C2GS_Smithy_Smelter_Do::mutable_item_id() {
  return &item_id_;
}

// -------------------------------------------------------------------

// C2GS_Smithy_Sub_Smelter_LevelUp

// required uint32 idx = 1;
inline bool C2GS_Smithy_Sub_Smelter_LevelUp::has_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Smithy_Sub_Smelter_LevelUp::set_has_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Smithy_Sub_Smelter_LevelUp::clear_has_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Smithy_Sub_Smelter_LevelUp::clear_idx() {
  idx_ = 0u;
  clear_has_idx();
}
inline ::google::protobuf::uint32 C2GS_Smithy_Sub_Smelter_LevelUp::idx() const {
  return idx_;
}
inline void C2GS_Smithy_Sub_Smelter_LevelUp::set_idx(::google::protobuf::uint32 value) {
  set_has_idx();
  idx_ = value;
}

// -------------------------------------------------------------------

// C2GS_Smithy_Build_By_Silver

// required bool is_fast = 1;
inline bool C2GS_Smithy_Build_By_Silver::has_is_fast() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Smithy_Build_By_Silver::set_has_is_fast() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Smithy_Build_By_Silver::clear_has_is_fast() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Smithy_Build_By_Silver::clear_is_fast() {
  is_fast_ = false;
  clear_has_is_fast();
}
inline bool C2GS_Smithy_Build_By_Silver::is_fast() const {
  return is_fast_;
}
inline void C2GS_Smithy_Build_By_Silver::set_is_fast(bool value) {
  set_has_is_fast();
  is_fast_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Smithy_2eproto__INCLUDED
