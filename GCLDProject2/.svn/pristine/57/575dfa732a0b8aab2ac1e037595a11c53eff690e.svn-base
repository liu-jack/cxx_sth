// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Activity.proto

#ifndef PROTOBUF_Activity_2eproto__INCLUDED
#define PROTOBUF_Activity_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommomDef.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Activity_2eproto();
void protobuf_AssignDesc_Activity_2eproto();
void protobuf_ShutdownFile_Activity_2eproto();

class GS2C_ActivityStarBoxInfo;
class GS2C_Activity_Start;
class GS2C_Activity_All_Active_Info;
class GS2C_ActivityStarBoxReward;
class GS2C_ActivityStarNpcReward;
class GS2C_ActivityStarBoxLevelUp;
class GS2C_ActivityStarBoxFinishCountDown;
class GxDB_ActivityStarBoxInfo;
class GxDB_ActivityStarDelete;
class GxDB_ActivityStarBox;
class C2GS_XILIAN_TAKE_REWARD;
class GS2C_XILIAN_TAKE_REWARD_RSP;
class GS2C_XILIAN_TAKE_TEN_REWARD;
class C2GS_Purify_Item;
class GS2C_Purify_Item_Rsp;
class ZhengWuReward;
class GS2C_Show_Dialog;
class C2GS_Take_Reward;
class GS2C_Take_Reward_Rsp;
class GS2C_Take_MinZhong_Reward_Rsp;
class GxDB_GovAffairsInfo;
class CelebrityEvent;
class GS2C_Celebrity_All_Info;
class C2GS_UseCurrencyToTakeReward;
class GS2C_UseCurrencyToTakeRewardRsp;
class C2GS_Celebrity_Take_Reward;
class GS2C_Celebrity_Take_Reward_Rsp;
class C2GS_ActivityBuyItem;
class GS2C_ActivityBuyItemRsp;
class LimitedTimeShopInfo;
class GS2C_LimitedTimeShopInfo;
class C2GS_Open_Hero_Reward_Box;
class GS2C_Open_Hero_Reward_Box_Rsp;
class C2GS_Reward_Hero;
class GS2C_Reward_Hero_Info;
class GS2C_Reward_Hero_Rsp;
class GxDB_Hero_Reward_info;
class GxDB_Hero_Reward;
class GxDB_Hero_Reward_delete;
class C2GS_Recharge_rebate;
class GS2C_Recharge_rebate_Rsp;

enum ACTIVITY_TYPE {
  ACTIVITY_STAR_BOX = 1,
  ACTIVITY_XILIAN = 2,
  ACTIVITY_IRON_COLLECT = 3,
  ACTIVITY_MAKE_FRIENDS = 4,
  ACTIVITY_LIMTED_TIME_SHOP = 5,
  ACTIVITY_HERO_REWARD = 6,
  ACTIVITY_MONEY_TO_GOLD = 7,
  ACTIVITY_ADD_SOLIDER_RANK = 8,
  ACTIVITY_OCCUPATION_RANK = 9,
  ACTIVITY_COUNTRY_RANK = 10,
  NR_ACTIVITY = 11
};
bool ACTIVITY_TYPE_IsValid(int value);
const ACTIVITY_TYPE ACTIVITY_TYPE_MIN = ACTIVITY_STAR_BOX;
const ACTIVITY_TYPE ACTIVITY_TYPE_MAX = NR_ACTIVITY;
const int ACTIVITY_TYPE_ARRAYSIZE = ACTIVITY_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ACTIVITY_TYPE_descriptor();
inline const ::std::string& ACTIVITY_TYPE_Name(ACTIVITY_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ACTIVITY_TYPE_descriptor(), value);
}
inline bool ACTIVITY_TYPE_Parse(
    const ::std::string& name, ACTIVITY_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ACTIVITY_TYPE>(
    ACTIVITY_TYPE_descriptor(), name, value);
}
enum ACTIIVTY_STAR_BOX_NPC_REWARD {
  REWRAD_SUCCESS = 1,
  REWARD_CANT_TAKE = 2,
  REWARD_OTHER_REASON = 3
};
bool ACTIIVTY_STAR_BOX_NPC_REWARD_IsValid(int value);
const ACTIIVTY_STAR_BOX_NPC_REWARD ACTIIVTY_STAR_BOX_NPC_REWARD_MIN = REWRAD_SUCCESS;
const ACTIIVTY_STAR_BOX_NPC_REWARD ACTIIVTY_STAR_BOX_NPC_REWARD_MAX = REWARD_OTHER_REASON;
const int ACTIIVTY_STAR_BOX_NPC_REWARD_ARRAYSIZE = ACTIIVTY_STAR_BOX_NPC_REWARD_MAX + 1;

const ::google::protobuf::EnumDescriptor* ACTIIVTY_STAR_BOX_NPC_REWARD_descriptor();
inline const ::std::string& ACTIIVTY_STAR_BOX_NPC_REWARD_Name(ACTIIVTY_STAR_BOX_NPC_REWARD value) {
  return ::google::protobuf::internal::NameOfEnum(
    ACTIIVTY_STAR_BOX_NPC_REWARD_descriptor(), value);
}
inline bool ACTIIVTY_STAR_BOX_NPC_REWARD_Parse(
    const ::std::string& name, ACTIIVTY_STAR_BOX_NPC_REWARD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ACTIIVTY_STAR_BOX_NPC_REWARD>(
    ACTIIVTY_STAR_BOX_NPC_REWARD_descriptor(), name, value);
}
enum ACTIVITY_STAR_BOX_LEVEL_UP_RESULT {
  LEVEL_UP_SUCCESS = 1,
  LEVEL_UP_NOT_ENOUGH_GOLD = 2,
  LEVEL_UP_MAX = 3,
  LEVEL_UP_CANT_PASS = 4,
  LEVEL_UP_SCORE_FULL = 5
};
bool ACTIVITY_STAR_BOX_LEVEL_UP_RESULT_IsValid(int value);
const ACTIVITY_STAR_BOX_LEVEL_UP_RESULT ACTIVITY_STAR_BOX_LEVEL_UP_RESULT_MIN = LEVEL_UP_SUCCESS;
const ACTIVITY_STAR_BOX_LEVEL_UP_RESULT ACTIVITY_STAR_BOX_LEVEL_UP_RESULT_MAX = LEVEL_UP_SCORE_FULL;
const int ACTIVITY_STAR_BOX_LEVEL_UP_RESULT_ARRAYSIZE = ACTIVITY_STAR_BOX_LEVEL_UP_RESULT_MAX + 1;

const ::google::protobuf::EnumDescriptor* ACTIVITY_STAR_BOX_LEVEL_UP_RESULT_descriptor();
inline const ::std::string& ACTIVITY_STAR_BOX_LEVEL_UP_RESULT_Name(ACTIVITY_STAR_BOX_LEVEL_UP_RESULT value) {
  return ::google::protobuf::internal::NameOfEnum(
    ACTIVITY_STAR_BOX_LEVEL_UP_RESULT_descriptor(), value);
}
inline bool ACTIVITY_STAR_BOX_LEVEL_UP_RESULT_Parse(
    const ::std::string& name, ACTIVITY_STAR_BOX_LEVEL_UP_RESULT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ACTIVITY_STAR_BOX_LEVEL_UP_RESULT>(
    ACTIVITY_STAR_BOX_LEVEL_UP_RESULT_descriptor(), name, value);
}
enum ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT {
  COUNT_DOWN_SUCCESS = 1,
  COUNT_DOWN_NOT_ENOUGH_GOLD = 2
};
bool ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT_IsValid(int value);
const ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT_MIN = COUNT_DOWN_SUCCESS;
const ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT_MAX = COUNT_DOWN_NOT_ENOUGH_GOLD;
const int ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT_ARRAYSIZE = ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT_MAX + 1;

const ::google::protobuf::EnumDescriptor* ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT_descriptor();
inline const ::std::string& ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT_Name(ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT value) {
  return ::google::protobuf::internal::NameOfEnum(
    ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT_descriptor(), value);
}
inline bool ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT_Parse(
    const ::std::string& name, ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT>(
    ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT_descriptor(), name, value);
}
enum XILIAN_REWARD_TYPE {
  UP_XILIAN = 1,
  MIJI_XILIAN = 2,
  SHENJI_XILIAN = 3
};
bool XILIAN_REWARD_TYPE_IsValid(int value);
const XILIAN_REWARD_TYPE XILIAN_REWARD_TYPE_MIN = UP_XILIAN;
const XILIAN_REWARD_TYPE XILIAN_REWARD_TYPE_MAX = SHENJI_XILIAN;
const int XILIAN_REWARD_TYPE_ARRAYSIZE = XILIAN_REWARD_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* XILIAN_REWARD_TYPE_descriptor();
inline const ::std::string& XILIAN_REWARD_TYPE_Name(XILIAN_REWARD_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    XILIAN_REWARD_TYPE_descriptor(), value);
}
inline bool XILIAN_REWARD_TYPE_Parse(
    const ::std::string& name, XILIAN_REWARD_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<XILIAN_REWARD_TYPE>(
    XILIAN_REWARD_TYPE_descriptor(), name, value);
}
enum XILIAN_RESULT {
  XILIAN_SUCCESS = 1,
  XILIAN_HAS_TAKE = 2,
  XILIAN_NOT_ENOUGH_TIME = 3
};
bool XILIAN_RESULT_IsValid(int value);
const XILIAN_RESULT XILIAN_RESULT_MIN = XILIAN_SUCCESS;
const XILIAN_RESULT XILIAN_RESULT_MAX = XILIAN_NOT_ENOUGH_TIME;
const int XILIAN_RESULT_ARRAYSIZE = XILIAN_RESULT_MAX + 1;

const ::google::protobuf::EnumDescriptor* XILIAN_RESULT_descriptor();
inline const ::std::string& XILIAN_RESULT_Name(XILIAN_RESULT value) {
  return ::google::protobuf::internal::NameOfEnum(
    XILIAN_RESULT_descriptor(), value);
}
inline bool XILIAN_RESULT_Parse(
    const ::std::string& name, XILIAN_RESULT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<XILIAN_RESULT>(
    XILIAN_RESULT_descriptor(), name, value);
}
// ===================================================================

class GS2C_ActivityStarBoxInfo : public ::google::protobuf::Message {
 public:
  GS2C_ActivityStarBoxInfo();
  virtual ~GS2C_ActivityStarBoxInfo();

  GS2C_ActivityStarBoxInfo(const GS2C_ActivityStarBoxInfo& from);

  inline GS2C_ActivityStarBoxInfo& operator=(const GS2C_ActivityStarBoxInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_ActivityStarBoxInfo& default_instance();

  void Swap(GS2C_ActivityStarBoxInfo* other);

  // implements Message ----------------------------------------------

  GS2C_ActivityStarBoxInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_ActivityStarBoxInfo& from);
  void MergeFrom(const GS2C_ActivityStarBoxInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 table_id = 1;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 1;
  inline ::google::protobuf::uint32 table_id() const;
  inline void set_table_id(::google::protobuf::uint32 value);

  // optional uint32 next_level_need_wait_time = 3;
  inline bool has_next_level_need_wait_time() const;
  inline void clear_next_level_need_wait_time();
  static const int kNextLevelNeedWaitTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 next_level_need_wait_time() const;
  inline void set_next_level_need_wait_time(::google::protobuf::uint32 value);

  // optional uint32 npc_is_opened = 4;
  inline bool has_npc_is_opened() const;
  inline void clear_npc_is_opened();
  static const int kNpcIsOpenedFieldNumber = 4;
  inline ::google::protobuf::uint32 npc_is_opened() const;
  inline void set_npc_is_opened(::google::protobuf::uint32 value);

  // optional uint32 left_times = 5;
  inline bool has_left_times() const;
  inline void clear_left_times();
  static const int kLeftTimesFieldNumber = 5;
  inline ::google::protobuf::uint32 left_times() const;
  inline void set_left_times(::google::protobuf::uint32 value);

  // optional uint64 last_take_reward_time = 6;
  inline bool has_last_take_reward_time() const;
  inline void clear_last_take_reward_time();
  static const int kLastTakeRewardTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 last_take_reward_time() const;
  inline void set_last_take_reward_time(::google::protobuf::uint64 value);

  // optional uint32 is_all_take_reward = 7;
  inline bool has_is_all_take_reward() const;
  inline void clear_is_all_take_reward();
  static const int kIsAllTakeRewardFieldNumber = 7;
  inline ::google::protobuf::uint32 is_all_take_reward() const;
  inline void set_is_all_take_reward(::google::protobuf::uint32 value);

  // optional uint64 activity_start_time = 8;
  inline bool has_activity_start_time() const;
  inline void clear_activity_start_time();
  static const int kActivityStartTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 activity_start_time() const;
  inline void set_activity_start_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_ActivityStarBoxInfo)
 private:
  inline void set_has_table_id();
  inline void clear_has_table_id();
  inline void set_has_next_level_need_wait_time();
  inline void clear_has_next_level_need_wait_time();
  inline void set_has_npc_is_opened();
  inline void clear_has_npc_is_opened();
  inline void set_has_left_times();
  inline void clear_has_left_times();
  inline void set_has_last_take_reward_time();
  inline void clear_has_last_take_reward_time();
  inline void set_has_is_all_take_reward();
  inline void clear_has_is_all_take_reward();
  inline void set_has_activity_start_time();
  inline void clear_has_activity_start_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 table_id_;
  ::google::protobuf::uint32 next_level_need_wait_time_;
  ::google::protobuf::uint32 npc_is_opened_;
  ::google::protobuf::uint32 left_times_;
  ::google::protobuf::uint64 last_take_reward_time_;
  ::google::protobuf::uint64 activity_start_time_;
  ::google::protobuf::uint32 is_all_take_reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static GS2C_ActivityStarBoxInfo* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Activity_Start : public ::google::protobuf::Message {
 public:
  GS2C_Activity_Start();
  virtual ~GS2C_Activity_Start();

  GS2C_Activity_Start(const GS2C_Activity_Start& from);

  inline GS2C_Activity_Start& operator=(const GS2C_Activity_Start& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Activity_Start& default_instance();

  void Swap(GS2C_Activity_Start* other);

  // implements Message ----------------------------------------------

  GS2C_Activity_Start* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Activity_Start& from);
  void MergeFrom(const GS2C_Activity_Start& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 activity_type = 1;
  inline bool has_activity_type() const;
  inline void clear_activity_type();
  static const int kActivityTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 activity_type() const;
  inline void set_activity_type(::google::protobuf::uint32 value);

  // required uint32 open_way = 2;
  inline bool has_open_way() const;
  inline void clear_open_way();
  static const int kOpenWayFieldNumber = 2;
  inline ::google::protobuf::uint32 open_way() const;
  inline void set_open_way(::google::protobuf::uint32 value);

  // required uint64 activity_start_time = 3;
  inline bool has_activity_start_time() const;
  inline void clear_activity_start_time();
  static const int kActivityStartTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 activity_start_time() const;
  inline void set_activity_start_time(::google::protobuf::uint64 value);

  // required uint64 activity_last_time = 4;
  inline bool has_activity_last_time() const;
  inline void clear_activity_last_time();
  static const int kActivityLastTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 activity_last_time() const;
  inline void set_activity_last_time(::google::protobuf::uint64 value);

  // required uint64 activity_show_time = 5;
  inline bool has_activity_show_time() const;
  inline void clear_activity_show_time();
  static const int kActivityShowTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 activity_show_time() const;
  inline void set_activity_show_time(::google::protobuf::uint64 value);

  // optional uint64 server_open_time = 6;
  inline bool has_server_open_time() const;
  inline void clear_server_open_time();
  static const int kServerOpenTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 server_open_time() const;
  inline void set_server_open_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Activity_Start)
 private:
  inline void set_has_activity_type();
  inline void clear_has_activity_type();
  inline void set_has_open_way();
  inline void clear_has_open_way();
  inline void set_has_activity_start_time();
  inline void clear_has_activity_start_time();
  inline void set_has_activity_last_time();
  inline void clear_has_activity_last_time();
  inline void set_has_activity_show_time();
  inline void clear_has_activity_show_time();
  inline void set_has_server_open_time();
  inline void clear_has_server_open_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 activity_type_;
  ::google::protobuf::uint32 open_way_;
  ::google::protobuf::uint64 activity_start_time_;
  ::google::protobuf::uint64 activity_last_time_;
  ::google::protobuf::uint64 activity_show_time_;
  ::google::protobuf::uint64 server_open_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Activity_Start* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Activity_All_Active_Info : public ::google::protobuf::Message {
 public:
  GS2C_Activity_All_Active_Info();
  virtual ~GS2C_Activity_All_Active_Info();

  GS2C_Activity_All_Active_Info(const GS2C_Activity_All_Active_Info& from);

  inline GS2C_Activity_All_Active_Info& operator=(const GS2C_Activity_All_Active_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Activity_All_Active_Info& default_instance();

  void Swap(GS2C_Activity_All_Active_Info* other);

  // implements Message ----------------------------------------------

  GS2C_Activity_All_Active_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Activity_All_Active_Info& from);
  void MergeFrom(const GS2C_Activity_All_Active_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.GS2C_Activity_Start info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::pb::GS2C_Activity_Start& info(int index) const;
  inline ::pb::GS2C_Activity_Start* mutable_info(int index);
  inline ::pb::GS2C_Activity_Start* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Activity_Start >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Activity_Start >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:pb.GS2C_Activity_All_Active_Info)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Activity_Start > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Activity_All_Active_Info* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_ActivityStarBoxReward : public ::google::protobuf::Message {
 public:
  GS2C_ActivityStarBoxReward();
  virtual ~GS2C_ActivityStarBoxReward();

  GS2C_ActivityStarBoxReward(const GS2C_ActivityStarBoxReward& from);

  inline GS2C_ActivityStarBoxReward& operator=(const GS2C_ActivityStarBoxReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_ActivityStarBoxReward& default_instance();

  void Swap(GS2C_ActivityStarBoxReward* other);

  // implements Message ----------------------------------------------

  GS2C_ActivityStarBoxReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_ActivityStarBoxReward& from);
  void MergeFrom(const GS2C_ActivityStarBoxReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.StReward reward = 1;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 1;
  inline const ::pb::StReward& reward(int index) const;
  inline ::pb::StReward* mutable_reward(int index);
  inline ::pb::StReward* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::StReward >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::StReward >*
      mutable_reward();

  // optional uint32 times = 2;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 times() const;
  inline void set_times(::google::protobuf::uint32 value);

  // optional uint32 star_level = 3;
  inline bool has_star_level() const;
  inline void clear_star_level();
  static const int kStarLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 star_level() const;
  inline void set_star_level(::google::protobuf::uint32 value);

  // optional uint32 ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_ActivityStarBoxReward)
 private:
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_star_level();
  inline void clear_has_star_level();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::StReward > reward_;
  ::google::protobuf::uint32 times_;
  ::google::protobuf::uint32 star_level_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static GS2C_ActivityStarBoxReward* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_ActivityStarNpcReward : public ::google::protobuf::Message {
 public:
  GS2C_ActivityStarNpcReward();
  virtual ~GS2C_ActivityStarNpcReward();

  GS2C_ActivityStarNpcReward(const GS2C_ActivityStarNpcReward& from);

  inline GS2C_ActivityStarNpcReward& operator=(const GS2C_ActivityStarNpcReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_ActivityStarNpcReward& default_instance();

  void Swap(GS2C_ActivityStarNpcReward* other);

  // implements Message ----------------------------------------------

  GS2C_ActivityStarNpcReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_ActivityStarNpcReward& from);
  void MergeFrom(const GS2C_ActivityStarNpcReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.StReward reward = 1;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 1;
  inline const ::pb::StReward& reward(int index) const;
  inline ::pb::StReward* mutable_reward(int index);
  inline ::pb::StReward* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::StReward >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::StReward >*
      mutable_reward();

  // optional uint32 left_times = 2;
  inline bool has_left_times() const;
  inline void clear_left_times();
  static const int kLeftTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 left_times() const;
  inline void set_left_times(::google::protobuf::uint32 value);

  // optional uint64 take_reward_time = 3;
  inline bool has_take_reward_time() const;
  inline void clear_take_reward_time();
  static const int kTakeRewardTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 take_reward_time() const;
  inline void set_take_reward_time(::google::protobuf::uint64 value);

  // required uint32 ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_ActivityStarNpcReward)
 private:
  inline void set_has_left_times();
  inline void clear_has_left_times();
  inline void set_has_take_reward_time();
  inline void clear_has_take_reward_time();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::StReward > reward_;
  ::google::protobuf::uint64 take_reward_time_;
  ::google::protobuf::uint32 left_times_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static GS2C_ActivityStarNpcReward* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_ActivityStarBoxLevelUp : public ::google::protobuf::Message {
 public:
  GS2C_ActivityStarBoxLevelUp();
  virtual ~GS2C_ActivityStarBoxLevelUp();

  GS2C_ActivityStarBoxLevelUp(const GS2C_ActivityStarBoxLevelUp& from);

  inline GS2C_ActivityStarBoxLevelUp& operator=(const GS2C_ActivityStarBoxLevelUp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_ActivityStarBoxLevelUp& default_instance();

  void Swap(GS2C_ActivityStarBoxLevelUp* other);

  // implements Message ----------------------------------------------

  GS2C_ActivityStarBoxLevelUp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_ActivityStarBoxLevelUp& from);
  void MergeFrom(const GS2C_ActivityStarBoxLevelUp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.ACTIVITY_STAR_BOX_LEVEL_UP_RESULT result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::pb::ACTIVITY_STAR_BOX_LEVEL_UP_RESULT result() const;
  inline void set_result(::pb::ACTIVITY_STAR_BOX_LEVEL_UP_RESULT value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_ActivityStarBoxLevelUp)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static GS2C_ActivityStarBoxLevelUp* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_ActivityStarBoxFinishCountDown : public ::google::protobuf::Message {
 public:
  GS2C_ActivityStarBoxFinishCountDown();
  virtual ~GS2C_ActivityStarBoxFinishCountDown();

  GS2C_ActivityStarBoxFinishCountDown(const GS2C_ActivityStarBoxFinishCountDown& from);

  inline GS2C_ActivityStarBoxFinishCountDown& operator=(const GS2C_ActivityStarBoxFinishCountDown& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_ActivityStarBoxFinishCountDown& default_instance();

  void Swap(GS2C_ActivityStarBoxFinishCountDown* other);

  // implements Message ----------------------------------------------

  GS2C_ActivityStarBoxFinishCountDown* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_ActivityStarBoxFinishCountDown& from);
  void MergeFrom(const GS2C_ActivityStarBoxFinishCountDown& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::pb::ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT result() const;
  inline void set_result(::pb::ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_ActivityStarBoxFinishCountDown)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static GS2C_ActivityStarBoxFinishCountDown* default_instance_;
};
// -------------------------------------------------------------------

class GxDB_ActivityStarBoxInfo : public ::google::protobuf::Message {
 public:
  GxDB_ActivityStarBoxInfo();
  virtual ~GxDB_ActivityStarBoxInfo();

  GxDB_ActivityStarBoxInfo(const GxDB_ActivityStarBoxInfo& from);

  inline GxDB_ActivityStarBoxInfo& operator=(const GxDB_ActivityStarBoxInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GxDB_ActivityStarBoxInfo& default_instance();

  void Swap(GxDB_ActivityStarBoxInfo* other);

  // implements Message ----------------------------------------------

  GxDB_ActivityStarBoxInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GxDB_ActivityStarBoxInfo& from);
  void MergeFrom(const GxDB_ActivityStarBoxInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 is_take_reward = 1;
  inline bool has_is_take_reward() const;
  inline void clear_is_take_reward();
  static const int kIsTakeRewardFieldNumber = 1;
  inline ::google::protobuf::uint32 is_take_reward() const;
  inline void set_is_take_reward(::google::protobuf::uint32 value);

  // required uint32 table_id = 2;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 2;
  inline ::google::protobuf::uint32 table_id() const;
  inline void set_table_id(::google::protobuf::uint32 value);

  // optional uint32 npc_is_opened = 3;
  inline bool has_npc_is_opened() const;
  inline void clear_npc_is_opened();
  static const int kNpcIsOpenedFieldNumber = 3;
  inline ::google::protobuf::uint32 npc_is_opened() const;
  inline void set_npc_is_opened(::google::protobuf::uint32 value);

  // optional uint32 left_times = 4;
  inline bool has_left_times() const;
  inline void clear_left_times();
  static const int kLeftTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 left_times() const;
  inline void set_left_times(::google::protobuf::uint32 value);

  // optional uint64 last_take_reward_time = 5;
  inline bool has_last_take_reward_time() const;
  inline void clear_last_take_reward_time();
  static const int kLastTakeRewardTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 last_take_reward_time() const;
  inline void set_last_take_reward_time(::google::protobuf::uint64 value);

  // optional uint32 operate_type = 6;
  inline bool has_operate_type() const;
  inline void clear_operate_type();
  static const int kOperateTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 operate_type() const;
  inline void set_operate_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GxDB_ActivityStarBoxInfo)
 private:
  inline void set_has_is_take_reward();
  inline void clear_has_is_take_reward();
  inline void set_has_table_id();
  inline void clear_has_table_id();
  inline void set_has_npc_is_opened();
  inline void clear_has_npc_is_opened();
  inline void set_has_left_times();
  inline void clear_has_left_times();
  inline void set_has_last_take_reward_time();
  inline void clear_has_last_take_reward_time();
  inline void set_has_operate_type();
  inline void clear_has_operate_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 is_take_reward_;
  ::google::protobuf::uint32 table_id_;
  ::google::protobuf::uint32 npc_is_opened_;
  ::google::protobuf::uint32 left_times_;
  ::google::protobuf::uint64 last_take_reward_time_;
  ::google::protobuf::uint32 operate_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static GxDB_ActivityStarBoxInfo* default_instance_;
};
// -------------------------------------------------------------------

class GxDB_ActivityStarDelete : public ::google::protobuf::Message {
 public:
  GxDB_ActivityStarDelete();
  virtual ~GxDB_ActivityStarDelete();

  GxDB_ActivityStarDelete(const GxDB_ActivityStarDelete& from);

  inline GxDB_ActivityStarDelete& operator=(const GxDB_ActivityStarDelete& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GxDB_ActivityStarDelete& default_instance();

  void Swap(GxDB_ActivityStarDelete* other);

  // implements Message ----------------------------------------------

  GxDB_ActivityStarDelete* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GxDB_ActivityStarDelete& from);
  void MergeFrom(const GxDB_ActivityStarDelete& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 operate_type = 1;
  inline bool has_operate_type() const;
  inline void clear_operate_type();
  static const int kOperateTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 operate_type() const;
  inline void set_operate_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GxDB_ActivityStarDelete)
 private:
  inline void set_has_operate_type();
  inline void clear_has_operate_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 operate_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static GxDB_ActivityStarDelete* default_instance_;
};
// -------------------------------------------------------------------

class GxDB_ActivityStarBox : public ::google::protobuf::Message {
 public:
  GxDB_ActivityStarBox();
  virtual ~GxDB_ActivityStarBox();

  GxDB_ActivityStarBox(const GxDB_ActivityStarBox& from);

  inline GxDB_ActivityStarBox& operator=(const GxDB_ActivityStarBox& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GxDB_ActivityStarBox& default_instance();

  void Swap(GxDB_ActivityStarBox* other);

  // implements Message ----------------------------------------------

  GxDB_ActivityStarBox* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GxDB_ActivityStarBox& from);
  void MergeFrom(const GxDB_ActivityStarBox& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.GxDB_ActivityStarBoxInfo info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::pb::GxDB_ActivityStarBoxInfo& info(int index) const;
  inline ::pb::GxDB_ActivityStarBoxInfo* mutable_info(int index);
  inline ::pb::GxDB_ActivityStarBoxInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GxDB_ActivityStarBoxInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GxDB_ActivityStarBoxInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:pb.GxDB_ActivityStarBox)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::GxDB_ActivityStarBoxInfo > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static GxDB_ActivityStarBox* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_XILIAN_TAKE_REWARD : public ::google::protobuf::Message {
 public:
  C2GS_XILIAN_TAKE_REWARD();
  virtual ~C2GS_XILIAN_TAKE_REWARD();

  C2GS_XILIAN_TAKE_REWARD(const C2GS_XILIAN_TAKE_REWARD& from);

  inline C2GS_XILIAN_TAKE_REWARD& operator=(const C2GS_XILIAN_TAKE_REWARD& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_XILIAN_TAKE_REWARD& default_instance();

  void Swap(C2GS_XILIAN_TAKE_REWARD* other);

  // implements Message ----------------------------------------------

  C2GS_XILIAN_TAKE_REWARD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_XILIAN_TAKE_REWARD& from);
  void MergeFrom(const C2GS_XILIAN_TAKE_REWARD& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.XILIAN_REWARD_TYPE reward_type = 1;
  inline bool has_reward_type() const;
  inline void clear_reward_type();
  static const int kRewardTypeFieldNumber = 1;
  inline ::pb::XILIAN_REWARD_TYPE reward_type() const;
  inline void set_reward_type(::pb::XILIAN_REWARD_TYPE value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_XILIAN_TAKE_REWARD)
 private:
  inline void set_has_reward_type();
  inline void clear_has_reward_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int reward_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static C2GS_XILIAN_TAKE_REWARD* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_XILIAN_TAKE_REWARD_RSP : public ::google::protobuf::Message {
 public:
  GS2C_XILIAN_TAKE_REWARD_RSP();
  virtual ~GS2C_XILIAN_TAKE_REWARD_RSP();

  GS2C_XILIAN_TAKE_REWARD_RSP(const GS2C_XILIAN_TAKE_REWARD_RSP& from);

  inline GS2C_XILIAN_TAKE_REWARD_RSP& operator=(const GS2C_XILIAN_TAKE_REWARD_RSP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_XILIAN_TAKE_REWARD_RSP& default_instance();

  void Swap(GS2C_XILIAN_TAKE_REWARD_RSP* other);

  // implements Message ----------------------------------------------

  GS2C_XILIAN_TAKE_REWARD_RSP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_XILIAN_TAKE_REWARD_RSP& from);
  void MergeFrom(const GS2C_XILIAN_TAKE_REWARD_RSP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.XILIAN_REWARD_TYPE reward_type = 1;
  inline bool has_reward_type() const;
  inline void clear_reward_type();
  static const int kRewardTypeFieldNumber = 1;
  inline ::pb::XILIAN_REWARD_TYPE reward_type() const;
  inline void set_reward_type(::pb::XILIAN_REWARD_TYPE value);

  // repeated .pb.StReward reward = 2;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline const ::pb::StReward& reward(int index) const;
  inline ::pb::StReward* mutable_reward(int index);
  inline ::pb::StReward* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::StReward >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::StReward >*
      mutable_reward();

  // required .pb.XILIAN_RESULT ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::pb::XILIAN_RESULT ret() const;
  inline void set_ret(::pb::XILIAN_RESULT value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_XILIAN_TAKE_REWARD_RSP)
 private:
  inline void set_has_reward_type();
  inline void clear_has_reward_type();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::StReward > reward_;
  int reward_type_;
  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static GS2C_XILIAN_TAKE_REWARD_RSP* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_XILIAN_TAKE_TEN_REWARD : public ::google::protobuf::Message {
 public:
  GS2C_XILIAN_TAKE_TEN_REWARD();
  virtual ~GS2C_XILIAN_TAKE_TEN_REWARD();

  GS2C_XILIAN_TAKE_TEN_REWARD(const GS2C_XILIAN_TAKE_TEN_REWARD& from);

  inline GS2C_XILIAN_TAKE_TEN_REWARD& operator=(const GS2C_XILIAN_TAKE_TEN_REWARD& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_XILIAN_TAKE_TEN_REWARD& default_instance();

  void Swap(GS2C_XILIAN_TAKE_TEN_REWARD* other);

  // implements Message ----------------------------------------------

  GS2C_XILIAN_TAKE_TEN_REWARD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_XILIAN_TAKE_TEN_REWARD& from);
  void MergeFrom(const GS2C_XILIAN_TAKE_TEN_REWARD& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_XILIAN_TAKE_TEN_REWARD)
 private:
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static GS2C_XILIAN_TAKE_TEN_REWARD* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Purify_Item : public ::google::protobuf::Message {
 public:
  C2GS_Purify_Item();
  virtual ~C2GS_Purify_Item();

  C2GS_Purify_Item(const C2GS_Purify_Item& from);

  inline C2GS_Purify_Item& operator=(const C2GS_Purify_Item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Purify_Item& default_instance();

  void Swap(C2GS_Purify_Item* other);

  // implements Message ----------------------------------------------

  C2GS_Purify_Item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Purify_Item& from);
  void MergeFrom(const C2GS_Purify_Item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 solt_id = 2;
  inline bool has_solt_id() const;
  inline void clear_solt_id();
  static const int kSoltIdFieldNumber = 2;
  inline ::google::protobuf::uint32 solt_id() const;
  inline void set_solt_id(::google::protobuf::uint32 value);

  // optional uint32 attr_id = 3;
  inline bool has_attr_id() const;
  inline void clear_attr_id();
  static const int kAttrIdFieldNumber = 3;
  inline ::google::protobuf::uint32 attr_id() const;
  inline void set_attr_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Purify_Item)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_solt_id();
  inline void clear_has_solt_id();
  inline void set_has_attr_id();
  inline void clear_has_attr_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 solt_id_;
  ::google::protobuf::uint32 attr_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Purify_Item* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Purify_Item_Rsp : public ::google::protobuf::Message {
 public:
  GS2C_Purify_Item_Rsp();
  virtual ~GS2C_Purify_Item_Rsp();

  GS2C_Purify_Item_Rsp(const GS2C_Purify_Item_Rsp& from);

  inline GS2C_Purify_Item_Rsp& operator=(const GS2C_Purify_Item_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Purify_Item_Rsp& default_instance();

  void Swap(GS2C_Purify_Item_Rsp* other);

  // implements Message ----------------------------------------------

  GS2C_Purify_Item_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Purify_Item_Rsp& from);
  void MergeFrom(const GS2C_Purify_Item_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 err_code = 1;
  inline bool has_err_code() const;
  inline void clear_err_code();
  static const int kErrCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 err_code() const;
  inline void set_err_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Purify_Item_Rsp)
 private:
  inline void set_has_err_code();
  inline void clear_has_err_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 err_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Purify_Item_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class ZhengWuReward : public ::google::protobuf::Message {
 public:
  ZhengWuReward();
  virtual ~ZhengWuReward();

  ZhengWuReward(const ZhengWuReward& from);

  inline ZhengWuReward& operator=(const ZhengWuReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZhengWuReward& default_instance();

  void Swap(ZhengWuReward* other);

  // implements Message ----------------------------------------------

  ZhengWuReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZhengWuReward& from);
  void MergeFrom(const ZhengWuReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reward_type = 1;
  inline bool has_reward_type() const;
  inline void clear_reward_type();
  static const int kRewardTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 reward_type() const;
  inline void set_reward_type(::google::protobuf::uint32 value);

  // optional uint32 reward_count = 2;
  inline bool has_reward_count() const;
  inline void clear_reward_count();
  static const int kRewardCountFieldNumber = 2;
  inline ::google::protobuf::uint32 reward_count() const;
  inline void set_reward_count(::google::protobuf::uint32 value);

  // optional uint32 cost_diamond = 3;
  inline bool has_cost_diamond() const;
  inline void clear_cost_diamond();
  static const int kCostDiamondFieldNumber = 3;
  inline ::google::protobuf::uint32 cost_diamond() const;
  inline void set_cost_diamond(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.ZhengWuReward)
 private:
  inline void set_has_reward_type();
  inline void clear_has_reward_type();
  inline void set_has_reward_count();
  inline void clear_has_reward_count();
  inline void set_has_cost_diamond();
  inline void clear_has_cost_diamond();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 reward_type_;
  ::google::protobuf::uint32 reward_count_;
  ::google::protobuf::uint32 cost_diamond_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static ZhengWuReward* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Show_Dialog : public ::google::protobuf::Message {
 public:
  GS2C_Show_Dialog();
  virtual ~GS2C_Show_Dialog();

  GS2C_Show_Dialog(const GS2C_Show_Dialog& from);

  inline GS2C_Show_Dialog& operator=(const GS2C_Show_Dialog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Show_Dialog& default_instance();

  void Swap(GS2C_Show_Dialog* other);

  // implements Message ----------------------------------------------

  GS2C_Show_Dialog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Show_Dialog& from);
  void MergeFrom(const GS2C_Show_Dialog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 left_id = 1;
  inline bool has_left_id() const;
  inline void clear_left_id();
  static const int kLeftIdFieldNumber = 1;
  inline ::google::protobuf::uint32 left_id() const;
  inline void set_left_id(::google::protobuf::uint32 value);

  // optional uint32 right_id = 2;
  inline bool has_right_id() const;
  inline void clear_right_id();
  static const int kRightIdFieldNumber = 2;
  inline ::google::protobuf::uint32 right_id() const;
  inline void set_right_id(::google::protobuf::uint32 value);

  // optional uint32 title_id = 3;
  inline bool has_title_id() const;
  inline void clear_title_id();
  static const int kTitleIdFieldNumber = 3;
  inline ::google::protobuf::uint32 title_id() const;
  inline void set_title_id(::google::protobuf::uint32 value);

  // optional .pb.ZhengWuReward left_reward = 4;
  inline bool has_left_reward() const;
  inline void clear_left_reward();
  static const int kLeftRewardFieldNumber = 4;
  inline const ::pb::ZhengWuReward& left_reward() const;
  inline ::pb::ZhengWuReward* mutable_left_reward();
  inline ::pb::ZhengWuReward* release_left_reward();
  inline void set_allocated_left_reward(::pb::ZhengWuReward* left_reward);

  // optional .pb.ZhengWuReward right_reward = 5;
  inline bool has_right_reward() const;
  inline void clear_right_reward();
  static const int kRightRewardFieldNumber = 5;
  inline const ::pb::ZhengWuReward& right_reward() const;
  inline ::pb::ZhengWuReward* mutable_right_reward();
  inline ::pb::ZhengWuReward* release_right_reward();
  inline void set_allocated_right_reward(::pb::ZhengWuReward* right_reward);

  // optional string image_name = 6;
  inline bool has_image_name() const;
  inline void clear_image_name();
  static const int kImageNameFieldNumber = 6;
  inline const ::std::string& image_name() const;
  inline void set_image_name(const ::std::string& value);
  inline void set_image_name(const char* value);
  inline void set_image_name(const char* value, size_t size);
  inline ::std::string* mutable_image_name();
  inline ::std::string* release_image_name();
  inline void set_allocated_image_name(::std::string* image_name);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Show_Dialog)
 private:
  inline void set_has_left_id();
  inline void clear_has_left_id();
  inline void set_has_right_id();
  inline void clear_has_right_id();
  inline void set_has_title_id();
  inline void clear_has_title_id();
  inline void set_has_left_reward();
  inline void clear_has_left_reward();
  inline void set_has_right_reward();
  inline void clear_has_right_reward();
  inline void set_has_image_name();
  inline void clear_has_image_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 left_id_;
  ::google::protobuf::uint32 right_id_;
  ::pb::ZhengWuReward* left_reward_;
  ::pb::ZhengWuReward* right_reward_;
  ::std::string* image_name_;
  ::google::protobuf::uint32 title_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Show_Dialog* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Take_Reward : public ::google::protobuf::Message {
 public:
  C2GS_Take_Reward();
  virtual ~C2GS_Take_Reward();

  C2GS_Take_Reward(const C2GS_Take_Reward& from);

  inline C2GS_Take_Reward& operator=(const C2GS_Take_Reward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Take_Reward& default_instance();

  void Swap(C2GS_Take_Reward* other);

  // implements Message ----------------------------------------------

  C2GS_Take_Reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Take_Reward& from);
  void MergeFrom(const C2GS_Take_Reward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.ZhengWuReward reward = 1;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 1;
  inline const ::pb::ZhengWuReward& reward() const;
  inline ::pb::ZhengWuReward* mutable_reward();
  inline ::pb::ZhengWuReward* release_reward();
  inline void set_allocated_reward(::pb::ZhengWuReward* reward);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Take_Reward)
 private:
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::ZhengWuReward* reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Take_Reward* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Take_Reward_Rsp : public ::google::protobuf::Message {
 public:
  GS2C_Take_Reward_Rsp();
  virtual ~GS2C_Take_Reward_Rsp();

  GS2C_Take_Reward_Rsp(const GS2C_Take_Reward_Rsp& from);

  inline GS2C_Take_Reward_Rsp& operator=(const GS2C_Take_Reward_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Take_Reward_Rsp& default_instance();

  void Swap(GS2C_Take_Reward_Rsp* other);

  // implements Message ----------------------------------------------

  GS2C_Take_Reward_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Take_Reward_Rsp& from);
  void MergeFrom(const GS2C_Take_Reward_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Take_Reward_Rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Take_Reward_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Take_MinZhong_Reward_Rsp : public ::google::protobuf::Message {
 public:
  GS2C_Take_MinZhong_Reward_Rsp();
  virtual ~GS2C_Take_MinZhong_Reward_Rsp();

  GS2C_Take_MinZhong_Reward_Rsp(const GS2C_Take_MinZhong_Reward_Rsp& from);

  inline GS2C_Take_MinZhong_Reward_Rsp& operator=(const GS2C_Take_MinZhong_Reward_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Take_MinZhong_Reward_Rsp& default_instance();

  void Swap(GS2C_Take_MinZhong_Reward_Rsp* other);

  // implements Message ----------------------------------------------

  GS2C_Take_MinZhong_Reward_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Take_MinZhong_Reward_Rsp& from);
  void MergeFrom(const GS2C_Take_MinZhong_Reward_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.StReward reward = 1;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 1;
  inline const ::pb::StReward& reward(int index) const;
  inline ::pb::StReward* mutable_reward(int index);
  inline ::pb::StReward* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::StReward >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::StReward >*
      mutable_reward();

  // @@protoc_insertion_point(class_scope:pb.GS2C_Take_MinZhong_Reward_Rsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::StReward > reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Take_MinZhong_Reward_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class GxDB_GovAffairsInfo : public ::google::protobuf::Message {
 public:
  GxDB_GovAffairsInfo();
  virtual ~GxDB_GovAffairsInfo();

  GxDB_GovAffairsInfo(const GxDB_GovAffairsInfo& from);

  inline GxDB_GovAffairsInfo& operator=(const GxDB_GovAffairsInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GxDB_GovAffairsInfo& default_instance();

  void Swap(GxDB_GovAffairsInfo* other);

  // implements Message ----------------------------------------------

  GxDB_GovAffairsInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GxDB_GovAffairsInfo& from);
  void MergeFrom(const GxDB_GovAffairsInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 left_id = 1;
  inline bool has_left_id() const;
  inline void clear_left_id();
  static const int kLeftIdFieldNumber = 1;
  inline ::google::protobuf::uint32 left_id() const;
  inline void set_left_id(::google::protobuf::uint32 value);

  // optional uint32 right_id = 2;
  inline bool has_right_id() const;
  inline void clear_right_id();
  static const int kRightIdFieldNumber = 2;
  inline ::google::protobuf::uint32 right_id() const;
  inline void set_right_id(::google::protobuf::uint32 value);

  // optional uint32 title_id = 3;
  inline bool has_title_id() const;
  inline void clear_title_id();
  static const int kTitleIdFieldNumber = 3;
  inline ::google::protobuf::uint32 title_id() const;
  inline void set_title_id(::google::protobuf::uint32 value);

  // optional uint32 left_reward_type = 4;
  inline bool has_left_reward_type() const;
  inline void clear_left_reward_type();
  static const int kLeftRewardTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 left_reward_type() const;
  inline void set_left_reward_type(::google::protobuf::uint32 value);

  // optional uint32 left_reward_count = 5;
  inline bool has_left_reward_count() const;
  inline void clear_left_reward_count();
  static const int kLeftRewardCountFieldNumber = 5;
  inline ::google::protobuf::uint32 left_reward_count() const;
  inline void set_left_reward_count(::google::protobuf::uint32 value);

  // optional uint32 right_reward_type = 6;
  inline bool has_right_reward_type() const;
  inline void clear_right_reward_type();
  static const int kRightRewardTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 right_reward_type() const;
  inline void set_right_reward_type(::google::protobuf::uint32 value);

  // optional uint32 right_reward_count = 7;
  inline bool has_right_reward_count() const;
  inline void clear_right_reward_count();
  static const int kRightRewardCountFieldNumber = 7;
  inline ::google::protobuf::uint32 right_reward_count() const;
  inline void set_right_reward_count(::google::protobuf::uint32 value);

  // optional uint32 cost_diamond = 8;
  inline bool has_cost_diamond() const;
  inline void clear_cost_diamond();
  static const int kCostDiamondFieldNumber = 8;
  inline ::google::protobuf::uint32 cost_diamond() const;
  inline void set_cost_diamond(::google::protobuf::uint32 value);

  // optional string image_name = 9;
  inline bool has_image_name() const;
  inline void clear_image_name();
  static const int kImageNameFieldNumber = 9;
  inline const ::std::string& image_name() const;
  inline void set_image_name(const ::std::string& value);
  inline void set_image_name(const char* value);
  inline void set_image_name(const char* value, size_t size);
  inline ::std::string* mutable_image_name();
  inline ::std::string* release_image_name();
  inline void set_allocated_image_name(::std::string* image_name);

  // @@protoc_insertion_point(class_scope:pb.GxDB_GovAffairsInfo)
 private:
  inline void set_has_left_id();
  inline void clear_has_left_id();
  inline void set_has_right_id();
  inline void clear_has_right_id();
  inline void set_has_title_id();
  inline void clear_has_title_id();
  inline void set_has_left_reward_type();
  inline void clear_has_left_reward_type();
  inline void set_has_left_reward_count();
  inline void clear_has_left_reward_count();
  inline void set_has_right_reward_type();
  inline void clear_has_right_reward_type();
  inline void set_has_right_reward_count();
  inline void clear_has_right_reward_count();
  inline void set_has_cost_diamond();
  inline void clear_has_cost_diamond();
  inline void set_has_image_name();
  inline void clear_has_image_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 left_id_;
  ::google::protobuf::uint32 right_id_;
  ::google::protobuf::uint32 title_id_;
  ::google::protobuf::uint32 left_reward_type_;
  ::google::protobuf::uint32 left_reward_count_;
  ::google::protobuf::uint32 right_reward_type_;
  ::google::protobuf::uint32 right_reward_count_;
  ::google::protobuf::uint32 cost_diamond_;
  ::std::string* image_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static GxDB_GovAffairsInfo* default_instance_;
};
// -------------------------------------------------------------------

class CelebrityEvent : public ::google::protobuf::Message {
 public:
  CelebrityEvent();
  virtual ~CelebrityEvent();

  CelebrityEvent(const CelebrityEvent& from);

  inline CelebrityEvent& operator=(const CelebrityEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CelebrityEvent& default_instance();

  void Swap(CelebrityEvent* other);

  // implements Message ----------------------------------------------

  CelebrityEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CelebrityEvent& from);
  void MergeFrom(const CelebrityEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 event_id = 1;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::uint32 event_id() const;
  inline void set_event_id(::google::protobuf::uint32 value);

  // optional string event_display = 2;
  inline bool has_event_display() const;
  inline void clear_event_display();
  static const int kEventDisplayFieldNumber = 2;
  inline const ::std::string& event_display() const;
  inline void set_event_display(const ::std::string& value);
  inline void set_event_display(const char* value);
  inline void set_event_display(const char* value, size_t size);
  inline ::std::string* mutable_event_display();
  inline ::std::string* release_event_display();
  inline void set_allocated_event_display(::std::string* event_display);

  // optional .pb.StReward perferTo = 3;
  inline bool has_perferto() const;
  inline void clear_perferto();
  static const int kPerferToFieldNumber = 3;
  inline const ::pb::StReward& perferto() const;
  inline ::pb::StReward* mutable_perferto();
  inline ::pb::StReward* release_perferto();
  inline void set_allocated_perferto(::pb::StReward* perferto);

  // optional uint32 city_id = 4;
  inline bool has_city_id() const;
  inline void clear_city_id();
  static const int kCityIdFieldNumber = 4;
  inline ::google::protobuf::uint32 city_id() const;
  inline void set_city_id(::google::protobuf::uint32 value);

  // optional uint64 next_fresh_time = 5;
  inline bool has_next_fresh_time() const;
  inline void clear_next_fresh_time();
  static const int kNextFreshTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 next_fresh_time() const;
  inline void set_next_fresh_time(::google::protobuf::uint64 value);

  // optional uint32 daily_times = 6;
  inline bool has_daily_times() const;
  inline void clear_daily_times();
  static const int kDailyTimesFieldNumber = 6;
  inline ::google::protobuf::uint32 daily_times() const;
  inline void set_daily_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.CelebrityEvent)
 private:
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_event_display();
  inline void clear_has_event_display();
  inline void set_has_perferto();
  inline void clear_has_perferto();
  inline void set_has_city_id();
  inline void clear_has_city_id();
  inline void set_has_next_fresh_time();
  inline void clear_has_next_fresh_time();
  inline void set_has_daily_times();
  inline void clear_has_daily_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* event_display_;
  ::google::protobuf::uint32 event_id_;
  ::google::protobuf::uint32 city_id_;
  ::pb::StReward* perferto_;
  ::google::protobuf::uint64 next_fresh_time_;
  ::google::protobuf::uint32 daily_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static CelebrityEvent* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Celebrity_All_Info : public ::google::protobuf::Message {
 public:
  GS2C_Celebrity_All_Info();
  virtual ~GS2C_Celebrity_All_Info();

  GS2C_Celebrity_All_Info(const GS2C_Celebrity_All_Info& from);

  inline GS2C_Celebrity_All_Info& operator=(const GS2C_Celebrity_All_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Celebrity_All_Info& default_instance();

  void Swap(GS2C_Celebrity_All_Info* other);

  // implements Message ----------------------------------------------

  GS2C_Celebrity_All_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Celebrity_All_Info& from);
  void MergeFrom(const GS2C_Celebrity_All_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 city_id = 1;
  inline bool has_city_id() const;
  inline void clear_city_id();
  static const int kCityIdFieldNumber = 1;
  inline ::google::protobuf::uint32 city_id() const;
  inline void set_city_id(::google::protobuf::uint32 value);

  // optional uint64 next_fresh_time = 2;
  inline bool has_next_fresh_time() const;
  inline void clear_next_fresh_time();
  static const int kNextFreshTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 next_fresh_time() const;
  inline void set_next_fresh_time(::google::protobuf::uint64 value);

  // optional uint32 item_id = 3;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 3;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // optional .pb.CelebrityEvent event_info = 4;
  inline bool has_event_info() const;
  inline void clear_event_info();
  static const int kEventInfoFieldNumber = 4;
  inline const ::pb::CelebrityEvent& event_info() const;
  inline ::pb::CelebrityEvent* mutable_event_info();
  inline ::pb::CelebrityEvent* release_event_info();
  inline void set_allocated_event_info(::pb::CelebrityEvent* event_info);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Celebrity_All_Info)
 private:
  inline void set_has_city_id();
  inline void clear_has_city_id();
  inline void set_has_next_fresh_time();
  inline void clear_has_next_fresh_time();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_event_info();
  inline void clear_has_event_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 next_fresh_time_;
  ::google::protobuf::uint32 city_id_;
  ::google::protobuf::uint32 item_id_;
  ::pb::CelebrityEvent* event_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Celebrity_All_Info* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_UseCurrencyToTakeReward : public ::google::protobuf::Message {
 public:
  C2GS_UseCurrencyToTakeReward();
  virtual ~C2GS_UseCurrencyToTakeReward();

  C2GS_UseCurrencyToTakeReward(const C2GS_UseCurrencyToTakeReward& from);

  inline C2GS_UseCurrencyToTakeReward& operator=(const C2GS_UseCurrencyToTakeReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_UseCurrencyToTakeReward& default_instance();

  void Swap(C2GS_UseCurrencyToTakeReward* other);

  // implements Message ----------------------------------------------

  C2GS_UseCurrencyToTakeReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_UseCurrencyToTakeReward& from);
  void MergeFrom(const C2GS_UseCurrencyToTakeReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 event_id = 1;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::uint32 event_id() const;
  inline void set_event_id(::google::protobuf::uint32 value);

  // optional uint32 city_id = 2;
  inline bool has_city_id() const;
  inline void clear_city_id();
  static const int kCityIdFieldNumber = 2;
  inline ::google::protobuf::uint32 city_id() const;
  inline void set_city_id(::google::protobuf::uint32 value);

  // optional uint32 award_idx = 3;
  inline bool has_award_idx() const;
  inline void clear_award_idx();
  static const int kAwardIdxFieldNumber = 3;
  inline ::google::protobuf::uint32 award_idx() const;
  inline void set_award_idx(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_UseCurrencyToTakeReward)
 private:
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_city_id();
  inline void clear_has_city_id();
  inline void set_has_award_idx();
  inline void clear_has_award_idx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 event_id_;
  ::google::protobuf::uint32 city_id_;
  ::google::protobuf::uint32 award_idx_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static C2GS_UseCurrencyToTakeReward* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_UseCurrencyToTakeRewardRsp : public ::google::protobuf::Message {
 public:
  GS2C_UseCurrencyToTakeRewardRsp();
  virtual ~GS2C_UseCurrencyToTakeRewardRsp();

  GS2C_UseCurrencyToTakeRewardRsp(const GS2C_UseCurrencyToTakeRewardRsp& from);

  inline GS2C_UseCurrencyToTakeRewardRsp& operator=(const GS2C_UseCurrencyToTakeRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_UseCurrencyToTakeRewardRsp& default_instance();

  void Swap(GS2C_UseCurrencyToTakeRewardRsp* other);

  // implements Message ----------------------------------------------

  GS2C_UseCurrencyToTakeRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_UseCurrencyToTakeRewardRsp& from);
  void MergeFrom(const GS2C_UseCurrencyToTakeRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_UseCurrencyToTakeRewardRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static GS2C_UseCurrencyToTakeRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Celebrity_Take_Reward : public ::google::protobuf::Message {
 public:
  C2GS_Celebrity_Take_Reward();
  virtual ~C2GS_Celebrity_Take_Reward();

  C2GS_Celebrity_Take_Reward(const C2GS_Celebrity_Take_Reward& from);

  inline C2GS_Celebrity_Take_Reward& operator=(const C2GS_Celebrity_Take_Reward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Celebrity_Take_Reward& default_instance();

  void Swap(C2GS_Celebrity_Take_Reward* other);

  // implements Message ----------------------------------------------

  C2GS_Celebrity_Take_Reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Celebrity_Take_Reward& from);
  void MergeFrom(const C2GS_Celebrity_Take_Reward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Celebrity_Take_Reward)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Celebrity_Take_Reward* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Celebrity_Take_Reward_Rsp : public ::google::protobuf::Message {
 public:
  GS2C_Celebrity_Take_Reward_Rsp();
  virtual ~GS2C_Celebrity_Take_Reward_Rsp();

  GS2C_Celebrity_Take_Reward_Rsp(const GS2C_Celebrity_Take_Reward_Rsp& from);

  inline GS2C_Celebrity_Take_Reward_Rsp& operator=(const GS2C_Celebrity_Take_Reward_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Celebrity_Take_Reward_Rsp& default_instance();

  void Swap(GS2C_Celebrity_Take_Reward_Rsp* other);

  // implements Message ----------------------------------------------

  GS2C_Celebrity_Take_Reward_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Celebrity_Take_Reward_Rsp& from);
  void MergeFrom(const GS2C_Celebrity_Take_Reward_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // repeated .pb.StReward reward = 3;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline const ::pb::StReward& reward(int index) const;
  inline ::pb::StReward* mutable_reward(int index);
  inline ::pb::StReward* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::StReward >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::StReward >*
      mutable_reward();

  // @@protoc_insertion_point(class_scope:pb.GS2C_Celebrity_Take_Reward_Rsp)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::RepeatedPtrField< ::pb::StReward > reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Celebrity_Take_Reward_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_ActivityBuyItem : public ::google::protobuf::Message {
 public:
  C2GS_ActivityBuyItem();
  virtual ~C2GS_ActivityBuyItem();

  C2GS_ActivityBuyItem(const C2GS_ActivityBuyItem& from);

  inline C2GS_ActivityBuyItem& operator=(const C2GS_ActivityBuyItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_ActivityBuyItem& default_instance();

  void Swap(C2GS_ActivityBuyItem* other);

  // implements Message ----------------------------------------------

  C2GS_ActivityBuyItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_ActivityBuyItem& from);
  void MergeFrom(const C2GS_ActivityBuyItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_ActivityBuyItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static C2GS_ActivityBuyItem* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_ActivityBuyItemRsp : public ::google::protobuf::Message {
 public:
  GS2C_ActivityBuyItemRsp();
  virtual ~GS2C_ActivityBuyItemRsp();

  GS2C_ActivityBuyItemRsp(const GS2C_ActivityBuyItemRsp& from);

  inline GS2C_ActivityBuyItemRsp& operator=(const GS2C_ActivityBuyItemRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_ActivityBuyItemRsp& default_instance();

  void Swap(GS2C_ActivityBuyItemRsp* other);

  // implements Message ----------------------------------------------

  GS2C_ActivityBuyItemRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_ActivityBuyItemRsp& from);
  void MergeFrom(const GS2C_ActivityBuyItemRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_ActivityBuyItemRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static GS2C_ActivityBuyItemRsp* default_instance_;
};
// -------------------------------------------------------------------

class LimitedTimeShopInfo : public ::google::protobuf::Message {
 public:
  LimitedTimeShopInfo();
  virtual ~LimitedTimeShopInfo();

  LimitedTimeShopInfo(const LimitedTimeShopInfo& from);

  inline LimitedTimeShopInfo& operator=(const LimitedTimeShopInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LimitedTimeShopInfo& default_instance();

  void Swap(LimitedTimeShopInfo* other);

  // implements Message ----------------------------------------------

  LimitedTimeShopInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LimitedTimeShopInfo& from);
  void MergeFrom(const LimitedTimeShopInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cost_price = 1;
  inline bool has_cost_price() const;
  inline void clear_cost_price();
  static const int kCostPriceFieldNumber = 1;
  inline ::google::protobuf::uint32 cost_price() const;
  inline void set_cost_price(::google::protobuf::uint32 value);

  // optional uint32 cost_discount = 2;
  inline bool has_cost_discount() const;
  inline void clear_cost_discount();
  static const int kCostDiscountFieldNumber = 2;
  inline ::google::protobuf::uint32 cost_discount() const;
  inline void set_cost_discount(::google::protobuf::uint32 value);

  // optional uint32 condition = 3;
  inline bool has_condition() const;
  inline void clear_condition();
  static const int kConditionFieldNumber = 3;
  inline ::google::protobuf::uint32 condition() const;
  inline void set_condition(::google::protobuf::uint32 value);

  // optional .pb.StReward reward = 4;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 4;
  inline const ::pb::StReward& reward() const;
  inline ::pb::StReward* mutable_reward();
  inline ::pb::StReward* release_reward();
  inline void set_allocated_reward(::pb::StReward* reward);

  // optional uint32 is_has_discount = 5;
  inline bool has_is_has_discount() const;
  inline void clear_is_has_discount();
  static const int kIsHasDiscountFieldNumber = 5;
  inline ::google::protobuf::uint32 is_has_discount() const;
  inline void set_is_has_discount(::google::protobuf::uint32 value);

  // optional uint64 table_id = 6;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 6;
  inline ::google::protobuf::uint64 table_id() const;
  inline void set_table_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.LimitedTimeShopInfo)
 private:
  inline void set_has_cost_price();
  inline void clear_has_cost_price();
  inline void set_has_cost_discount();
  inline void clear_has_cost_discount();
  inline void set_has_condition();
  inline void clear_has_condition();
  inline void set_has_reward();
  inline void clear_has_reward();
  inline void set_has_is_has_discount();
  inline void clear_has_is_has_discount();
  inline void set_has_table_id();
  inline void clear_has_table_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cost_price_;
  ::google::protobuf::uint32 cost_discount_;
  ::pb::StReward* reward_;
  ::google::protobuf::uint32 condition_;
  ::google::protobuf::uint32 is_has_discount_;
  ::google::protobuf::uint64 table_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static LimitedTimeShopInfo* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_LimitedTimeShopInfo : public ::google::protobuf::Message {
 public:
  GS2C_LimitedTimeShopInfo();
  virtual ~GS2C_LimitedTimeShopInfo();

  GS2C_LimitedTimeShopInfo(const GS2C_LimitedTimeShopInfo& from);

  inline GS2C_LimitedTimeShopInfo& operator=(const GS2C_LimitedTimeShopInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_LimitedTimeShopInfo& default_instance();

  void Swap(GS2C_LimitedTimeShopInfo* other);

  // implements Message ----------------------------------------------

  GS2C_LimitedTimeShopInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_LimitedTimeShopInfo& from);
  void MergeFrom(const GS2C_LimitedTimeShopInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.LimitedTimeShopInfo info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::pb::LimitedTimeShopInfo& info(int index) const;
  inline ::pb::LimitedTimeShopInfo* mutable_info(int index);
  inline ::pb::LimitedTimeShopInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::LimitedTimeShopInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::LimitedTimeShopInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:pb.GS2C_LimitedTimeShopInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::LimitedTimeShopInfo > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static GS2C_LimitedTimeShopInfo* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Open_Hero_Reward_Box : public ::google::protobuf::Message {
 public:
  C2GS_Open_Hero_Reward_Box();
  virtual ~C2GS_Open_Hero_Reward_Box();

  C2GS_Open_Hero_Reward_Box(const C2GS_Open_Hero_Reward_Box& from);

  inline C2GS_Open_Hero_Reward_Box& operator=(const C2GS_Open_Hero_Reward_Box& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Open_Hero_Reward_Box& default_instance();

  void Swap(C2GS_Open_Hero_Reward_Box* other);

  // implements Message ----------------------------------------------

  C2GS_Open_Hero_Reward_Box* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Open_Hero_Reward_Box& from);
  void MergeFrom(const C2GS_Open_Hero_Reward_Box& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 cirital = 1;
  inline bool has_cirital() const;
  inline void clear_cirital();
  static const int kCiritalFieldNumber = 1;
  inline ::google::protobuf::uint32 cirital() const;
  inline void set_cirital(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Open_Hero_Reward_Box)
 private:
  inline void set_has_cirital();
  inline void clear_has_cirital();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cirital_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Open_Hero_Reward_Box* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Open_Hero_Reward_Box_Rsp : public ::google::protobuf::Message {
 public:
  GS2C_Open_Hero_Reward_Box_Rsp();
  virtual ~GS2C_Open_Hero_Reward_Box_Rsp();

  GS2C_Open_Hero_Reward_Box_Rsp(const GS2C_Open_Hero_Reward_Box_Rsp& from);

  inline GS2C_Open_Hero_Reward_Box_Rsp& operator=(const GS2C_Open_Hero_Reward_Box_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Open_Hero_Reward_Box_Rsp& default_instance();

  void Swap(GS2C_Open_Hero_Reward_Box_Rsp* other);

  // implements Message ----------------------------------------------

  GS2C_Open_Hero_Reward_Box_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Open_Hero_Reward_Box_Rsp& from);
  void MergeFrom(const GS2C_Open_Hero_Reward_Box_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.StReward rewrad = 1;
  inline int rewrad_size() const;
  inline void clear_rewrad();
  static const int kRewradFieldNumber = 1;
  inline const ::pb::StReward& rewrad(int index) const;
  inline ::pb::StReward* mutable_rewrad(int index);
  inline ::pb::StReward* add_rewrad();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::StReward >&
      rewrad() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::StReward >*
      mutable_rewrad();

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Open_Hero_Reward_Box_Rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::StReward > rewrad_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Open_Hero_Reward_Box_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Reward_Hero : public ::google::protobuf::Message {
 public:
  C2GS_Reward_Hero();
  virtual ~C2GS_Reward_Hero();

  C2GS_Reward_Hero(const C2GS_Reward_Hero& from);

  inline C2GS_Reward_Hero& operator=(const C2GS_Reward_Hero& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Reward_Hero& default_instance();

  void Swap(C2GS_Reward_Hero* other);

  // implements Message ----------------------------------------------

  C2GS_Reward_Hero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Reward_Hero& from);
  void MergeFrom(const C2GS_Reward_Hero& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 troops_id = 1;
  inline bool has_troops_id() const;
  inline void clear_troops_id();
  static const int kTroopsIdFieldNumber = 1;
  inline ::google::protobuf::uint32 troops_id() const;
  inline void set_troops_id(::google::protobuf::uint32 value);

  // optional uint32 char_id = 2;
  inline bool has_char_id() const;
  inline void clear_char_id();
  static const int kCharIdFieldNumber = 2;
  inline ::google::protobuf::uint32 char_id() const;
  inline void set_char_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Reward_Hero)
 private:
  inline void set_has_troops_id();
  inline void clear_has_troops_id();
  inline void set_has_char_id();
  inline void clear_has_char_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 troops_id_;
  ::google::protobuf::uint32 char_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Reward_Hero* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Reward_Hero_Info : public ::google::protobuf::Message {
 public:
  GS2C_Reward_Hero_Info();
  virtual ~GS2C_Reward_Hero_Info();

  GS2C_Reward_Hero_Info(const GS2C_Reward_Hero_Info& from);

  inline GS2C_Reward_Hero_Info& operator=(const GS2C_Reward_Hero_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Reward_Hero_Info& default_instance();

  void Swap(GS2C_Reward_Hero_Info* other);

  // implements Message ----------------------------------------------

  GS2C_Reward_Hero_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Reward_Hero_Info& from);
  void MergeFrom(const GS2C_Reward_Hero_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional bool is_first_reward = 2;
  inline bool has_is_first_reward() const;
  inline void clear_is_first_reward();
  static const int kIsFirstRewardFieldNumber = 2;
  inline bool is_first_reward() const;
  inline void set_is_first_reward(bool value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Reward_Hero_Info)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_is_first_reward();
  inline void clear_has_is_first_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  bool is_first_reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Reward_Hero_Info* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Reward_Hero_Rsp : public ::google::protobuf::Message {
 public:
  GS2C_Reward_Hero_Rsp();
  virtual ~GS2C_Reward_Hero_Rsp();

  GS2C_Reward_Hero_Rsp(const GS2C_Reward_Hero_Rsp& from);

  inline GS2C_Reward_Hero_Rsp& operator=(const GS2C_Reward_Hero_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Reward_Hero_Rsp& default_instance();

  void Swap(GS2C_Reward_Hero_Rsp* other);

  // implements Message ----------------------------------------------

  GS2C_Reward_Hero_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Reward_Hero_Rsp& from);
  void MergeFrom(const GS2C_Reward_Hero_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint32 critical = 2;
  inline bool has_critical() const;
  inline void clear_critical();
  static const int kCriticalFieldNumber = 2;
  inline ::google::protobuf::uint32 critical() const;
  inline void set_critical(::google::protobuf::uint32 value);

  // optional uint32 char_exp = 3;
  inline bool has_char_exp() const;
  inline void clear_char_exp();
  static const int kCharExpFieldNumber = 3;
  inline ::google::protobuf::uint32 char_exp() const;
  inline void set_char_exp(::google::protobuf::uint32 value);

  // optional uint32 char_level = 4;
  inline bool has_char_level() const;
  inline void clear_char_level();
  static const int kCharLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 char_level() const;
  inline void set_char_level(::google::protobuf::uint32 value);

  // optional uint32 char_cur_xp_max = 5;
  inline bool has_char_cur_xp_max() const;
  inline void clear_char_cur_xp_max();
  static const int kCharCurXpMaxFieldNumber = 5;
  inline ::google::protobuf::uint32 char_cur_xp_max() const;
  inline void set_char_cur_xp_max(::google::protobuf::uint32 value);

  // optional .pb.GS2C_Reward_Hero_Info next_char_info = 6;
  inline bool has_next_char_info() const;
  inline void clear_next_char_info();
  static const int kNextCharInfoFieldNumber = 6;
  inline const ::pb::GS2C_Reward_Hero_Info& next_char_info() const;
  inline ::pb::GS2C_Reward_Hero_Info* mutable_next_char_info();
  inline ::pb::GS2C_Reward_Hero_Info* release_next_char_info();
  inline void set_allocated_next_char_info(::pb::GS2C_Reward_Hero_Info* next_char_info);

  // optional uint32 char_id = 7;
  inline bool has_char_id() const;
  inline void clear_char_id();
  static const int kCharIdFieldNumber = 7;
  inline ::google::protobuf::uint32 char_id() const;
  inline void set_char_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Reward_Hero_Rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_critical();
  inline void clear_has_critical();
  inline void set_has_char_exp();
  inline void clear_has_char_exp();
  inline void set_has_char_level();
  inline void clear_has_char_level();
  inline void set_has_char_cur_xp_max();
  inline void clear_has_char_cur_xp_max();
  inline void set_has_next_char_info();
  inline void clear_has_next_char_info();
  inline void set_has_char_id();
  inline void clear_has_char_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint32 critical_;
  ::google::protobuf::uint32 char_exp_;
  ::google::protobuf::uint32 char_level_;
  ::pb::GS2C_Reward_Hero_Info* next_char_info_;
  ::google::protobuf::uint32 char_cur_xp_max_;
  ::google::protobuf::uint32 char_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Reward_Hero_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class GxDB_Hero_Reward_info : public ::google::protobuf::Message {
 public:
  GxDB_Hero_Reward_info();
  virtual ~GxDB_Hero_Reward_info();

  GxDB_Hero_Reward_info(const GxDB_Hero_Reward_info& from);

  inline GxDB_Hero_Reward_info& operator=(const GxDB_Hero_Reward_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GxDB_Hero_Reward_info& default_instance();

  void Swap(GxDB_Hero_Reward_info* other);

  // implements Message ----------------------------------------------

  GxDB_Hero_Reward_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GxDB_Hero_Reward_info& from);
  void MergeFrom(const GxDB_Hero_Reward_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional bool has_first_reward = 2;
  inline bool has_has_first_reward() const;
  inline void clear_has_first_reward();
  static const int kHasFirstRewardFieldNumber = 2;
  inline bool has_first_reward() const;
  inline void set_has_first_reward(bool value);

  // optional uint32 operate_type = 3;
  inline bool has_operate_type() const;
  inline void clear_operate_type();
  static const int kOperateTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 operate_type() const;
  inline void set_operate_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GxDB_Hero_Reward_info)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_has_first_reward();
  inline void clear_has_has_first_reward();
  inline void set_has_operate_type();
  inline void clear_has_operate_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  bool has_first_reward_;
  ::google::protobuf::uint32 operate_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static GxDB_Hero_Reward_info* default_instance_;
};
// -------------------------------------------------------------------

class GxDB_Hero_Reward : public ::google::protobuf::Message {
 public:
  GxDB_Hero_Reward();
  virtual ~GxDB_Hero_Reward();

  GxDB_Hero_Reward(const GxDB_Hero_Reward& from);

  inline GxDB_Hero_Reward& operator=(const GxDB_Hero_Reward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GxDB_Hero_Reward& default_instance();

  void Swap(GxDB_Hero_Reward* other);

  // implements Message ----------------------------------------------

  GxDB_Hero_Reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GxDB_Hero_Reward& from);
  void MergeFrom(const GxDB_Hero_Reward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.GxDB_Hero_Reward_info info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::pb::GxDB_Hero_Reward_info& info(int index) const;
  inline ::pb::GxDB_Hero_Reward_info* mutable_info(int index);
  inline ::pb::GxDB_Hero_Reward_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GxDB_Hero_Reward_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GxDB_Hero_Reward_info >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:pb.GxDB_Hero_Reward)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::GxDB_Hero_Reward_info > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static GxDB_Hero_Reward* default_instance_;
};
// -------------------------------------------------------------------

class GxDB_Hero_Reward_delete : public ::google::protobuf::Message {
 public:
  GxDB_Hero_Reward_delete();
  virtual ~GxDB_Hero_Reward_delete();

  GxDB_Hero_Reward_delete(const GxDB_Hero_Reward_delete& from);

  inline GxDB_Hero_Reward_delete& operator=(const GxDB_Hero_Reward_delete& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GxDB_Hero_Reward_delete& default_instance();

  void Swap(GxDB_Hero_Reward_delete* other);

  // implements Message ----------------------------------------------

  GxDB_Hero_Reward_delete* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GxDB_Hero_Reward_delete& from);
  void MergeFrom(const GxDB_Hero_Reward_delete& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 operate_type = 1;
  inline bool has_operate_type() const;
  inline void clear_operate_type();
  static const int kOperateTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 operate_type() const;
  inline void set_operate_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GxDB_Hero_Reward_delete)
 private:
  inline void set_has_operate_type();
  inline void clear_has_operate_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 operate_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static GxDB_Hero_Reward_delete* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Recharge_rebate : public ::google::protobuf::Message {
 public:
  C2GS_Recharge_rebate();
  virtual ~C2GS_Recharge_rebate();

  C2GS_Recharge_rebate(const C2GS_Recharge_rebate& from);

  inline C2GS_Recharge_rebate& operator=(const C2GS_Recharge_rebate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Recharge_rebate& default_instance();

  void Swap(C2GS_Recharge_rebate* other);

  // implements Message ----------------------------------------------

  C2GS_Recharge_rebate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Recharge_rebate& from);
  void MergeFrom(const C2GS_Recharge_rebate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Recharge_rebate)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Recharge_rebate* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Recharge_rebate_Rsp : public ::google::protobuf::Message {
 public:
  GS2C_Recharge_rebate_Rsp();
  virtual ~GS2C_Recharge_rebate_Rsp();

  GS2C_Recharge_rebate_Rsp(const GS2C_Recharge_rebate_Rsp& from);

  inline GS2C_Recharge_rebate_Rsp& operator=(const GS2C_Recharge_rebate_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Recharge_rebate_Rsp& default_instance();

  void Swap(GS2C_Recharge_rebate_Rsp* other);

  // implements Message ----------------------------------------------

  GS2C_Recharge_rebate_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Recharge_rebate_Rsp& from);
  void MergeFrom(const GS2C_Recharge_rebate_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.StReward reward = 1;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 1;
  inline const ::pb::StReward& reward() const;
  inline ::pb::StReward* mutable_reward();
  inline ::pb::StReward* release_reward();
  inline void set_allocated_reward(::pb::StReward* reward);

  // required uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Recharge_rebate_Rsp)
 private:
  inline void set_has_reward();
  inline void clear_has_reward();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::StReward* reward_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Activity_2eproto();
  friend void protobuf_AssignDesc_Activity_2eproto();
  friend void protobuf_ShutdownFile_Activity_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Recharge_rebate_Rsp* default_instance_;
};
// ===================================================================


// ===================================================================

// GS2C_ActivityStarBoxInfo

// required uint32 table_id = 1;
inline bool GS2C_ActivityStarBoxInfo::has_table_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_ActivityStarBoxInfo::set_has_table_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_ActivityStarBoxInfo::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_ActivityStarBoxInfo::clear_table_id() {
  table_id_ = 0u;
  clear_has_table_id();
}
inline ::google::protobuf::uint32 GS2C_ActivityStarBoxInfo::table_id() const {
  return table_id_;
}
inline void GS2C_ActivityStarBoxInfo::set_table_id(::google::protobuf::uint32 value) {
  set_has_table_id();
  table_id_ = value;
}

// optional uint32 next_level_need_wait_time = 3;
inline bool GS2C_ActivityStarBoxInfo::has_next_level_need_wait_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_ActivityStarBoxInfo::set_has_next_level_need_wait_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_ActivityStarBoxInfo::clear_has_next_level_need_wait_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_ActivityStarBoxInfo::clear_next_level_need_wait_time() {
  next_level_need_wait_time_ = 0u;
  clear_has_next_level_need_wait_time();
}
inline ::google::protobuf::uint32 GS2C_ActivityStarBoxInfo::next_level_need_wait_time() const {
  return next_level_need_wait_time_;
}
inline void GS2C_ActivityStarBoxInfo::set_next_level_need_wait_time(::google::protobuf::uint32 value) {
  set_has_next_level_need_wait_time();
  next_level_need_wait_time_ = value;
}

// optional uint32 npc_is_opened = 4;
inline bool GS2C_ActivityStarBoxInfo::has_npc_is_opened() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_ActivityStarBoxInfo::set_has_npc_is_opened() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_ActivityStarBoxInfo::clear_has_npc_is_opened() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_ActivityStarBoxInfo::clear_npc_is_opened() {
  npc_is_opened_ = 0u;
  clear_has_npc_is_opened();
}
inline ::google::protobuf::uint32 GS2C_ActivityStarBoxInfo::npc_is_opened() const {
  return npc_is_opened_;
}
inline void GS2C_ActivityStarBoxInfo::set_npc_is_opened(::google::protobuf::uint32 value) {
  set_has_npc_is_opened();
  npc_is_opened_ = value;
}

// optional uint32 left_times = 5;
inline bool GS2C_ActivityStarBoxInfo::has_left_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_ActivityStarBoxInfo::set_has_left_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_ActivityStarBoxInfo::clear_has_left_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_ActivityStarBoxInfo::clear_left_times() {
  left_times_ = 0u;
  clear_has_left_times();
}
inline ::google::protobuf::uint32 GS2C_ActivityStarBoxInfo::left_times() const {
  return left_times_;
}
inline void GS2C_ActivityStarBoxInfo::set_left_times(::google::protobuf::uint32 value) {
  set_has_left_times();
  left_times_ = value;
}

// optional uint64 last_take_reward_time = 6;
inline bool GS2C_ActivityStarBoxInfo::has_last_take_reward_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GS2C_ActivityStarBoxInfo::set_has_last_take_reward_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GS2C_ActivityStarBoxInfo::clear_has_last_take_reward_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GS2C_ActivityStarBoxInfo::clear_last_take_reward_time() {
  last_take_reward_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_take_reward_time();
}
inline ::google::protobuf::uint64 GS2C_ActivityStarBoxInfo::last_take_reward_time() const {
  return last_take_reward_time_;
}
inline void GS2C_ActivityStarBoxInfo::set_last_take_reward_time(::google::protobuf::uint64 value) {
  set_has_last_take_reward_time();
  last_take_reward_time_ = value;
}

// optional uint32 is_all_take_reward = 7;
inline bool GS2C_ActivityStarBoxInfo::has_is_all_take_reward() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GS2C_ActivityStarBoxInfo::set_has_is_all_take_reward() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GS2C_ActivityStarBoxInfo::clear_has_is_all_take_reward() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GS2C_ActivityStarBoxInfo::clear_is_all_take_reward() {
  is_all_take_reward_ = 0u;
  clear_has_is_all_take_reward();
}
inline ::google::protobuf::uint32 GS2C_ActivityStarBoxInfo::is_all_take_reward() const {
  return is_all_take_reward_;
}
inline void GS2C_ActivityStarBoxInfo::set_is_all_take_reward(::google::protobuf::uint32 value) {
  set_has_is_all_take_reward();
  is_all_take_reward_ = value;
}

// optional uint64 activity_start_time = 8;
inline bool GS2C_ActivityStarBoxInfo::has_activity_start_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GS2C_ActivityStarBoxInfo::set_has_activity_start_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GS2C_ActivityStarBoxInfo::clear_has_activity_start_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GS2C_ActivityStarBoxInfo::clear_activity_start_time() {
  activity_start_time_ = GOOGLE_ULONGLONG(0);
  clear_has_activity_start_time();
}
inline ::google::protobuf::uint64 GS2C_ActivityStarBoxInfo::activity_start_time() const {
  return activity_start_time_;
}
inline void GS2C_ActivityStarBoxInfo::set_activity_start_time(::google::protobuf::uint64 value) {
  set_has_activity_start_time();
  activity_start_time_ = value;
}

// -------------------------------------------------------------------

// GS2C_Activity_Start

// required uint32 activity_type = 1;
inline bool GS2C_Activity_Start::has_activity_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Activity_Start::set_has_activity_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Activity_Start::clear_has_activity_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Activity_Start::clear_activity_type() {
  activity_type_ = 0u;
  clear_has_activity_type();
}
inline ::google::protobuf::uint32 GS2C_Activity_Start::activity_type() const {
  return activity_type_;
}
inline void GS2C_Activity_Start::set_activity_type(::google::protobuf::uint32 value) {
  set_has_activity_type();
  activity_type_ = value;
}

// required uint32 open_way = 2;
inline bool GS2C_Activity_Start::has_open_way() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Activity_Start::set_has_open_way() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Activity_Start::clear_has_open_way() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Activity_Start::clear_open_way() {
  open_way_ = 0u;
  clear_has_open_way();
}
inline ::google::protobuf::uint32 GS2C_Activity_Start::open_way() const {
  return open_way_;
}
inline void GS2C_Activity_Start::set_open_way(::google::protobuf::uint32 value) {
  set_has_open_way();
  open_way_ = value;
}

// required uint64 activity_start_time = 3;
inline bool GS2C_Activity_Start::has_activity_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Activity_Start::set_has_activity_start_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Activity_Start::clear_has_activity_start_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Activity_Start::clear_activity_start_time() {
  activity_start_time_ = GOOGLE_ULONGLONG(0);
  clear_has_activity_start_time();
}
inline ::google::protobuf::uint64 GS2C_Activity_Start::activity_start_time() const {
  return activity_start_time_;
}
inline void GS2C_Activity_Start::set_activity_start_time(::google::protobuf::uint64 value) {
  set_has_activity_start_time();
  activity_start_time_ = value;
}

// required uint64 activity_last_time = 4;
inline bool GS2C_Activity_Start::has_activity_last_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Activity_Start::set_has_activity_last_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Activity_Start::clear_has_activity_last_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Activity_Start::clear_activity_last_time() {
  activity_last_time_ = GOOGLE_ULONGLONG(0);
  clear_has_activity_last_time();
}
inline ::google::protobuf::uint64 GS2C_Activity_Start::activity_last_time() const {
  return activity_last_time_;
}
inline void GS2C_Activity_Start::set_activity_last_time(::google::protobuf::uint64 value) {
  set_has_activity_last_time();
  activity_last_time_ = value;
}

// required uint64 activity_show_time = 5;
inline bool GS2C_Activity_Start::has_activity_show_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GS2C_Activity_Start::set_has_activity_show_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GS2C_Activity_Start::clear_has_activity_show_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GS2C_Activity_Start::clear_activity_show_time() {
  activity_show_time_ = GOOGLE_ULONGLONG(0);
  clear_has_activity_show_time();
}
inline ::google::protobuf::uint64 GS2C_Activity_Start::activity_show_time() const {
  return activity_show_time_;
}
inline void GS2C_Activity_Start::set_activity_show_time(::google::protobuf::uint64 value) {
  set_has_activity_show_time();
  activity_show_time_ = value;
}

// optional uint64 server_open_time = 6;
inline bool GS2C_Activity_Start::has_server_open_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GS2C_Activity_Start::set_has_server_open_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GS2C_Activity_Start::clear_has_server_open_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GS2C_Activity_Start::clear_server_open_time() {
  server_open_time_ = GOOGLE_ULONGLONG(0);
  clear_has_server_open_time();
}
inline ::google::protobuf::uint64 GS2C_Activity_Start::server_open_time() const {
  return server_open_time_;
}
inline void GS2C_Activity_Start::set_server_open_time(::google::protobuf::uint64 value) {
  set_has_server_open_time();
  server_open_time_ = value;
}

// -------------------------------------------------------------------

// GS2C_Activity_All_Active_Info

// repeated .pb.GS2C_Activity_Start info = 1;
inline int GS2C_Activity_All_Active_Info::info_size() const {
  return info_.size();
}
inline void GS2C_Activity_All_Active_Info::clear_info() {
  info_.Clear();
}
inline const ::pb::GS2C_Activity_Start& GS2C_Activity_All_Active_Info::info(int index) const {
  return info_.Get(index);
}
inline ::pb::GS2C_Activity_Start* GS2C_Activity_All_Active_Info::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::pb::GS2C_Activity_Start* GS2C_Activity_All_Active_Info::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Activity_Start >&
GS2C_Activity_All_Active_Info::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Activity_Start >*
GS2C_Activity_All_Active_Info::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// GS2C_ActivityStarBoxReward

// repeated .pb.StReward reward = 1;
inline int GS2C_ActivityStarBoxReward::reward_size() const {
  return reward_.size();
}
inline void GS2C_ActivityStarBoxReward::clear_reward() {
  reward_.Clear();
}
inline const ::pb::StReward& GS2C_ActivityStarBoxReward::reward(int index) const {
  return reward_.Get(index);
}
inline ::pb::StReward* GS2C_ActivityStarBoxReward::mutable_reward(int index) {
  return reward_.Mutable(index);
}
inline ::pb::StReward* GS2C_ActivityStarBoxReward::add_reward() {
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::StReward >&
GS2C_ActivityStarBoxReward::reward() const {
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::StReward >*
GS2C_ActivityStarBoxReward::mutable_reward() {
  return &reward_;
}

// optional uint32 times = 2;
inline bool GS2C_ActivityStarBoxReward::has_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_ActivityStarBoxReward::set_has_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_ActivityStarBoxReward::clear_has_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_ActivityStarBoxReward::clear_times() {
  times_ = 0u;
  clear_has_times();
}
inline ::google::protobuf::uint32 GS2C_ActivityStarBoxReward::times() const {
  return times_;
}
inline void GS2C_ActivityStarBoxReward::set_times(::google::protobuf::uint32 value) {
  set_has_times();
  times_ = value;
}

// optional uint32 star_level = 3;
inline bool GS2C_ActivityStarBoxReward::has_star_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_ActivityStarBoxReward::set_has_star_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_ActivityStarBoxReward::clear_has_star_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_ActivityStarBoxReward::clear_star_level() {
  star_level_ = 0u;
  clear_has_star_level();
}
inline ::google::protobuf::uint32 GS2C_ActivityStarBoxReward::star_level() const {
  return star_level_;
}
inline void GS2C_ActivityStarBoxReward::set_star_level(::google::protobuf::uint32 value) {
  set_has_star_level();
  star_level_ = value;
}

// optional uint32 ret = 4;
inline bool GS2C_ActivityStarBoxReward::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_ActivityStarBoxReward::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_ActivityStarBoxReward::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_ActivityStarBoxReward::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 GS2C_ActivityStarBoxReward::ret() const {
  return ret_;
}
inline void GS2C_ActivityStarBoxReward::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// GS2C_ActivityStarNpcReward

// repeated .pb.StReward reward = 1;
inline int GS2C_ActivityStarNpcReward::reward_size() const {
  return reward_.size();
}
inline void GS2C_ActivityStarNpcReward::clear_reward() {
  reward_.Clear();
}
inline const ::pb::StReward& GS2C_ActivityStarNpcReward::reward(int index) const {
  return reward_.Get(index);
}
inline ::pb::StReward* GS2C_ActivityStarNpcReward::mutable_reward(int index) {
  return reward_.Mutable(index);
}
inline ::pb::StReward* GS2C_ActivityStarNpcReward::add_reward() {
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::StReward >&
GS2C_ActivityStarNpcReward::reward() const {
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::StReward >*
GS2C_ActivityStarNpcReward::mutable_reward() {
  return &reward_;
}

// optional uint32 left_times = 2;
inline bool GS2C_ActivityStarNpcReward::has_left_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_ActivityStarNpcReward::set_has_left_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_ActivityStarNpcReward::clear_has_left_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_ActivityStarNpcReward::clear_left_times() {
  left_times_ = 0u;
  clear_has_left_times();
}
inline ::google::protobuf::uint32 GS2C_ActivityStarNpcReward::left_times() const {
  return left_times_;
}
inline void GS2C_ActivityStarNpcReward::set_left_times(::google::protobuf::uint32 value) {
  set_has_left_times();
  left_times_ = value;
}

// optional uint64 take_reward_time = 3;
inline bool GS2C_ActivityStarNpcReward::has_take_reward_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_ActivityStarNpcReward::set_has_take_reward_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_ActivityStarNpcReward::clear_has_take_reward_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_ActivityStarNpcReward::clear_take_reward_time() {
  take_reward_time_ = GOOGLE_ULONGLONG(0);
  clear_has_take_reward_time();
}
inline ::google::protobuf::uint64 GS2C_ActivityStarNpcReward::take_reward_time() const {
  return take_reward_time_;
}
inline void GS2C_ActivityStarNpcReward::set_take_reward_time(::google::protobuf::uint64 value) {
  set_has_take_reward_time();
  take_reward_time_ = value;
}

// required uint32 ret = 4;
inline bool GS2C_ActivityStarNpcReward::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_ActivityStarNpcReward::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_ActivityStarNpcReward::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_ActivityStarNpcReward::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 GS2C_ActivityStarNpcReward::ret() const {
  return ret_;
}
inline void GS2C_ActivityStarNpcReward::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// GS2C_ActivityStarBoxLevelUp

// required .pb.ACTIVITY_STAR_BOX_LEVEL_UP_RESULT result = 1;
inline bool GS2C_ActivityStarBoxLevelUp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_ActivityStarBoxLevelUp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_ActivityStarBoxLevelUp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_ActivityStarBoxLevelUp::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::pb::ACTIVITY_STAR_BOX_LEVEL_UP_RESULT GS2C_ActivityStarBoxLevelUp::result() const {
  return static_cast< ::pb::ACTIVITY_STAR_BOX_LEVEL_UP_RESULT >(result_);
}
inline void GS2C_ActivityStarBoxLevelUp::set_result(::pb::ACTIVITY_STAR_BOX_LEVEL_UP_RESULT value) {
  assert(::pb::ACTIVITY_STAR_BOX_LEVEL_UP_RESULT_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// GS2C_ActivityStarBoxFinishCountDown

// required .pb.ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT result = 1;
inline bool GS2C_ActivityStarBoxFinishCountDown::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_ActivityStarBoxFinishCountDown::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_ActivityStarBoxFinishCountDown::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_ActivityStarBoxFinishCountDown::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::pb::ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT GS2C_ActivityStarBoxFinishCountDown::result() const {
  return static_cast< ::pb::ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT >(result_);
}
inline void GS2C_ActivityStarBoxFinishCountDown::set_result(::pb::ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT value) {
  assert(::pb::ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// GxDB_ActivityStarBoxInfo

// required uint32 is_take_reward = 1;
inline bool GxDB_ActivityStarBoxInfo::has_is_take_reward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GxDB_ActivityStarBoxInfo::set_has_is_take_reward() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GxDB_ActivityStarBoxInfo::clear_has_is_take_reward() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GxDB_ActivityStarBoxInfo::clear_is_take_reward() {
  is_take_reward_ = 0u;
  clear_has_is_take_reward();
}
inline ::google::protobuf::uint32 GxDB_ActivityStarBoxInfo::is_take_reward() const {
  return is_take_reward_;
}
inline void GxDB_ActivityStarBoxInfo::set_is_take_reward(::google::protobuf::uint32 value) {
  set_has_is_take_reward();
  is_take_reward_ = value;
}

// required uint32 table_id = 2;
inline bool GxDB_ActivityStarBoxInfo::has_table_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GxDB_ActivityStarBoxInfo::set_has_table_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GxDB_ActivityStarBoxInfo::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GxDB_ActivityStarBoxInfo::clear_table_id() {
  table_id_ = 0u;
  clear_has_table_id();
}
inline ::google::protobuf::uint32 GxDB_ActivityStarBoxInfo::table_id() const {
  return table_id_;
}
inline void GxDB_ActivityStarBoxInfo::set_table_id(::google::protobuf::uint32 value) {
  set_has_table_id();
  table_id_ = value;
}

// optional uint32 npc_is_opened = 3;
inline bool GxDB_ActivityStarBoxInfo::has_npc_is_opened() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GxDB_ActivityStarBoxInfo::set_has_npc_is_opened() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GxDB_ActivityStarBoxInfo::clear_has_npc_is_opened() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GxDB_ActivityStarBoxInfo::clear_npc_is_opened() {
  npc_is_opened_ = 0u;
  clear_has_npc_is_opened();
}
inline ::google::protobuf::uint32 GxDB_ActivityStarBoxInfo::npc_is_opened() const {
  return npc_is_opened_;
}
inline void GxDB_ActivityStarBoxInfo::set_npc_is_opened(::google::protobuf::uint32 value) {
  set_has_npc_is_opened();
  npc_is_opened_ = value;
}

// optional uint32 left_times = 4;
inline bool GxDB_ActivityStarBoxInfo::has_left_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GxDB_ActivityStarBoxInfo::set_has_left_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GxDB_ActivityStarBoxInfo::clear_has_left_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GxDB_ActivityStarBoxInfo::clear_left_times() {
  left_times_ = 0u;
  clear_has_left_times();
}
inline ::google::protobuf::uint32 GxDB_ActivityStarBoxInfo::left_times() const {
  return left_times_;
}
inline void GxDB_ActivityStarBoxInfo::set_left_times(::google::protobuf::uint32 value) {
  set_has_left_times();
  left_times_ = value;
}

// optional uint64 last_take_reward_time = 5;
inline bool GxDB_ActivityStarBoxInfo::has_last_take_reward_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GxDB_ActivityStarBoxInfo::set_has_last_take_reward_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GxDB_ActivityStarBoxInfo::clear_has_last_take_reward_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GxDB_ActivityStarBoxInfo::clear_last_take_reward_time() {
  last_take_reward_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_take_reward_time();
}
inline ::google::protobuf::uint64 GxDB_ActivityStarBoxInfo::last_take_reward_time() const {
  return last_take_reward_time_;
}
inline void GxDB_ActivityStarBoxInfo::set_last_take_reward_time(::google::protobuf::uint64 value) {
  set_has_last_take_reward_time();
  last_take_reward_time_ = value;
}

// optional uint32 operate_type = 6;
inline bool GxDB_ActivityStarBoxInfo::has_operate_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GxDB_ActivityStarBoxInfo::set_has_operate_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GxDB_ActivityStarBoxInfo::clear_has_operate_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GxDB_ActivityStarBoxInfo::clear_operate_type() {
  operate_type_ = 0u;
  clear_has_operate_type();
}
inline ::google::protobuf::uint32 GxDB_ActivityStarBoxInfo::operate_type() const {
  return operate_type_;
}
inline void GxDB_ActivityStarBoxInfo::set_operate_type(::google::protobuf::uint32 value) {
  set_has_operate_type();
  operate_type_ = value;
}

// -------------------------------------------------------------------

// GxDB_ActivityStarDelete

// optional uint32 operate_type = 1;
inline bool GxDB_ActivityStarDelete::has_operate_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GxDB_ActivityStarDelete::set_has_operate_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GxDB_ActivityStarDelete::clear_has_operate_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GxDB_ActivityStarDelete::clear_operate_type() {
  operate_type_ = 0u;
  clear_has_operate_type();
}
inline ::google::protobuf::uint32 GxDB_ActivityStarDelete::operate_type() const {
  return operate_type_;
}
inline void GxDB_ActivityStarDelete::set_operate_type(::google::protobuf::uint32 value) {
  set_has_operate_type();
  operate_type_ = value;
}

// -------------------------------------------------------------------

// GxDB_ActivityStarBox

// repeated .pb.GxDB_ActivityStarBoxInfo info = 1;
inline int GxDB_ActivityStarBox::info_size() const {
  return info_.size();
}
inline void GxDB_ActivityStarBox::clear_info() {
  info_.Clear();
}
inline const ::pb::GxDB_ActivityStarBoxInfo& GxDB_ActivityStarBox::info(int index) const {
  return info_.Get(index);
}
inline ::pb::GxDB_ActivityStarBoxInfo* GxDB_ActivityStarBox::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::pb::GxDB_ActivityStarBoxInfo* GxDB_ActivityStarBox::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GxDB_ActivityStarBoxInfo >&
GxDB_ActivityStarBox::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GxDB_ActivityStarBoxInfo >*
GxDB_ActivityStarBox::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// C2GS_XILIAN_TAKE_REWARD

// required .pb.XILIAN_REWARD_TYPE reward_type = 1;
inline bool C2GS_XILIAN_TAKE_REWARD::has_reward_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_XILIAN_TAKE_REWARD::set_has_reward_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_XILIAN_TAKE_REWARD::clear_has_reward_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_XILIAN_TAKE_REWARD::clear_reward_type() {
  reward_type_ = 1;
  clear_has_reward_type();
}
inline ::pb::XILIAN_REWARD_TYPE C2GS_XILIAN_TAKE_REWARD::reward_type() const {
  return static_cast< ::pb::XILIAN_REWARD_TYPE >(reward_type_);
}
inline void C2GS_XILIAN_TAKE_REWARD::set_reward_type(::pb::XILIAN_REWARD_TYPE value) {
  assert(::pb::XILIAN_REWARD_TYPE_IsValid(value));
  set_has_reward_type();
  reward_type_ = value;
}

// -------------------------------------------------------------------

// GS2C_XILIAN_TAKE_REWARD_RSP

// optional .pb.XILIAN_REWARD_TYPE reward_type = 1;
inline bool GS2C_XILIAN_TAKE_REWARD_RSP::has_reward_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_XILIAN_TAKE_REWARD_RSP::set_has_reward_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_XILIAN_TAKE_REWARD_RSP::clear_has_reward_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_XILIAN_TAKE_REWARD_RSP::clear_reward_type() {
  reward_type_ = 1;
  clear_has_reward_type();
}
inline ::pb::XILIAN_REWARD_TYPE GS2C_XILIAN_TAKE_REWARD_RSP::reward_type() const {
  return static_cast< ::pb::XILIAN_REWARD_TYPE >(reward_type_);
}
inline void GS2C_XILIAN_TAKE_REWARD_RSP::set_reward_type(::pb::XILIAN_REWARD_TYPE value) {
  assert(::pb::XILIAN_REWARD_TYPE_IsValid(value));
  set_has_reward_type();
  reward_type_ = value;
}

// repeated .pb.StReward reward = 2;
inline int GS2C_XILIAN_TAKE_REWARD_RSP::reward_size() const {
  return reward_.size();
}
inline void GS2C_XILIAN_TAKE_REWARD_RSP::clear_reward() {
  reward_.Clear();
}
inline const ::pb::StReward& GS2C_XILIAN_TAKE_REWARD_RSP::reward(int index) const {
  return reward_.Get(index);
}
inline ::pb::StReward* GS2C_XILIAN_TAKE_REWARD_RSP::mutable_reward(int index) {
  return reward_.Mutable(index);
}
inline ::pb::StReward* GS2C_XILIAN_TAKE_REWARD_RSP::add_reward() {
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::StReward >&
GS2C_XILIAN_TAKE_REWARD_RSP::reward() const {
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::StReward >*
GS2C_XILIAN_TAKE_REWARD_RSP::mutable_reward() {
  return &reward_;
}

// required .pb.XILIAN_RESULT ret = 3;
inline bool GS2C_XILIAN_TAKE_REWARD_RSP::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_XILIAN_TAKE_REWARD_RSP::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_XILIAN_TAKE_REWARD_RSP::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_XILIAN_TAKE_REWARD_RSP::clear_ret() {
  ret_ = 1;
  clear_has_ret();
}
inline ::pb::XILIAN_RESULT GS2C_XILIAN_TAKE_REWARD_RSP::ret() const {
  return static_cast< ::pb::XILIAN_RESULT >(ret_);
}
inline void GS2C_XILIAN_TAKE_REWARD_RSP::set_ret(::pb::XILIAN_RESULT value) {
  assert(::pb::XILIAN_RESULT_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// GS2C_XILIAN_TAKE_TEN_REWARD

// required uint32 count = 1;
inline bool GS2C_XILIAN_TAKE_TEN_REWARD::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_XILIAN_TAKE_TEN_REWARD::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_XILIAN_TAKE_TEN_REWARD::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_XILIAN_TAKE_TEN_REWARD::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 GS2C_XILIAN_TAKE_TEN_REWARD::count() const {
  return count_;
}
inline void GS2C_XILIAN_TAKE_TEN_REWARD::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// C2GS_Purify_Item

// required uint32 type = 1;
inline bool C2GS_Purify_Item::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Purify_Item::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Purify_Item::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Purify_Item::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 C2GS_Purify_Item::type() const {
  return type_;
}
inline void C2GS_Purify_Item::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 solt_id = 2;
inline bool C2GS_Purify_Item::has_solt_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_Purify_Item::set_has_solt_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_Purify_Item::clear_has_solt_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_Purify_Item::clear_solt_id() {
  solt_id_ = 0u;
  clear_has_solt_id();
}
inline ::google::protobuf::uint32 C2GS_Purify_Item::solt_id() const {
  return solt_id_;
}
inline void C2GS_Purify_Item::set_solt_id(::google::protobuf::uint32 value) {
  set_has_solt_id();
  solt_id_ = value;
}

// optional uint32 attr_id = 3;
inline bool C2GS_Purify_Item::has_attr_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2GS_Purify_Item::set_has_attr_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2GS_Purify_Item::clear_has_attr_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2GS_Purify_Item::clear_attr_id() {
  attr_id_ = 0u;
  clear_has_attr_id();
}
inline ::google::protobuf::uint32 C2GS_Purify_Item::attr_id() const {
  return attr_id_;
}
inline void C2GS_Purify_Item::set_attr_id(::google::protobuf::uint32 value) {
  set_has_attr_id();
  attr_id_ = value;
}

// -------------------------------------------------------------------

// GS2C_Purify_Item_Rsp

// required uint32 err_code = 1;
inline bool GS2C_Purify_Item_Rsp::has_err_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Purify_Item_Rsp::set_has_err_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Purify_Item_Rsp::clear_has_err_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Purify_Item_Rsp::clear_err_code() {
  err_code_ = 0u;
  clear_has_err_code();
}
inline ::google::protobuf::uint32 GS2C_Purify_Item_Rsp::err_code() const {
  return err_code_;
}
inline void GS2C_Purify_Item_Rsp::set_err_code(::google::protobuf::uint32 value) {
  set_has_err_code();
  err_code_ = value;
}

// -------------------------------------------------------------------

// ZhengWuReward

// optional uint32 reward_type = 1;
inline bool ZhengWuReward::has_reward_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZhengWuReward::set_has_reward_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZhengWuReward::clear_has_reward_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZhengWuReward::clear_reward_type() {
  reward_type_ = 0u;
  clear_has_reward_type();
}
inline ::google::protobuf::uint32 ZhengWuReward::reward_type() const {
  return reward_type_;
}
inline void ZhengWuReward::set_reward_type(::google::protobuf::uint32 value) {
  set_has_reward_type();
  reward_type_ = value;
}

// optional uint32 reward_count = 2;
inline bool ZhengWuReward::has_reward_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZhengWuReward::set_has_reward_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZhengWuReward::clear_has_reward_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZhengWuReward::clear_reward_count() {
  reward_count_ = 0u;
  clear_has_reward_count();
}
inline ::google::protobuf::uint32 ZhengWuReward::reward_count() const {
  return reward_count_;
}
inline void ZhengWuReward::set_reward_count(::google::protobuf::uint32 value) {
  set_has_reward_count();
  reward_count_ = value;
}

// optional uint32 cost_diamond = 3;
inline bool ZhengWuReward::has_cost_diamond() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZhengWuReward::set_has_cost_diamond() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZhengWuReward::clear_has_cost_diamond() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZhengWuReward::clear_cost_diamond() {
  cost_diamond_ = 0u;
  clear_has_cost_diamond();
}
inline ::google::protobuf::uint32 ZhengWuReward::cost_diamond() const {
  return cost_diamond_;
}
inline void ZhengWuReward::set_cost_diamond(::google::protobuf::uint32 value) {
  set_has_cost_diamond();
  cost_diamond_ = value;
}

// -------------------------------------------------------------------

// GS2C_Show_Dialog

// optional uint32 left_id = 1;
inline bool GS2C_Show_Dialog::has_left_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Show_Dialog::set_has_left_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Show_Dialog::clear_has_left_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Show_Dialog::clear_left_id() {
  left_id_ = 0u;
  clear_has_left_id();
}
inline ::google::protobuf::uint32 GS2C_Show_Dialog::left_id() const {
  return left_id_;
}
inline void GS2C_Show_Dialog::set_left_id(::google::protobuf::uint32 value) {
  set_has_left_id();
  left_id_ = value;
}

// optional uint32 right_id = 2;
inline bool GS2C_Show_Dialog::has_right_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Show_Dialog::set_has_right_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Show_Dialog::clear_has_right_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Show_Dialog::clear_right_id() {
  right_id_ = 0u;
  clear_has_right_id();
}
inline ::google::protobuf::uint32 GS2C_Show_Dialog::right_id() const {
  return right_id_;
}
inline void GS2C_Show_Dialog::set_right_id(::google::protobuf::uint32 value) {
  set_has_right_id();
  right_id_ = value;
}

// optional uint32 title_id = 3;
inline bool GS2C_Show_Dialog::has_title_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Show_Dialog::set_has_title_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Show_Dialog::clear_has_title_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Show_Dialog::clear_title_id() {
  title_id_ = 0u;
  clear_has_title_id();
}
inline ::google::protobuf::uint32 GS2C_Show_Dialog::title_id() const {
  return title_id_;
}
inline void GS2C_Show_Dialog::set_title_id(::google::protobuf::uint32 value) {
  set_has_title_id();
  title_id_ = value;
}

// optional .pb.ZhengWuReward left_reward = 4;
inline bool GS2C_Show_Dialog::has_left_reward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Show_Dialog::set_has_left_reward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Show_Dialog::clear_has_left_reward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Show_Dialog::clear_left_reward() {
  if (left_reward_ != NULL) left_reward_->::pb::ZhengWuReward::Clear();
  clear_has_left_reward();
}
inline const ::pb::ZhengWuReward& GS2C_Show_Dialog::left_reward() const {
  return left_reward_ != NULL ? *left_reward_ : *default_instance_->left_reward_;
}
inline ::pb::ZhengWuReward* GS2C_Show_Dialog::mutable_left_reward() {
  set_has_left_reward();
  if (left_reward_ == NULL) left_reward_ = new ::pb::ZhengWuReward;
  return left_reward_;
}
inline ::pb::ZhengWuReward* GS2C_Show_Dialog::release_left_reward() {
  clear_has_left_reward();
  ::pb::ZhengWuReward* temp = left_reward_;
  left_reward_ = NULL;
  return temp;
}
inline void GS2C_Show_Dialog::set_allocated_left_reward(::pb::ZhengWuReward* left_reward) {
  delete left_reward_;
  left_reward_ = left_reward;
  if (left_reward) {
    set_has_left_reward();
  } else {
    clear_has_left_reward();
  }
}

// optional .pb.ZhengWuReward right_reward = 5;
inline bool GS2C_Show_Dialog::has_right_reward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GS2C_Show_Dialog::set_has_right_reward() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GS2C_Show_Dialog::clear_has_right_reward() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GS2C_Show_Dialog::clear_right_reward() {
  if (right_reward_ != NULL) right_reward_->::pb::ZhengWuReward::Clear();
  clear_has_right_reward();
}
inline const ::pb::ZhengWuReward& GS2C_Show_Dialog::right_reward() const {
  return right_reward_ != NULL ? *right_reward_ : *default_instance_->right_reward_;
}
inline ::pb::ZhengWuReward* GS2C_Show_Dialog::mutable_right_reward() {
  set_has_right_reward();
  if (right_reward_ == NULL) right_reward_ = new ::pb::ZhengWuReward;
  return right_reward_;
}
inline ::pb::ZhengWuReward* GS2C_Show_Dialog::release_right_reward() {
  clear_has_right_reward();
  ::pb::ZhengWuReward* temp = right_reward_;
  right_reward_ = NULL;
  return temp;
}
inline void GS2C_Show_Dialog::set_allocated_right_reward(::pb::ZhengWuReward* right_reward) {
  delete right_reward_;
  right_reward_ = right_reward;
  if (right_reward) {
    set_has_right_reward();
  } else {
    clear_has_right_reward();
  }
}

// optional string image_name = 6;
inline bool GS2C_Show_Dialog::has_image_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GS2C_Show_Dialog::set_has_image_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GS2C_Show_Dialog::clear_has_image_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GS2C_Show_Dialog::clear_image_name() {
  if (image_name_ != &::google::protobuf::internal::kEmptyString) {
    image_name_->clear();
  }
  clear_has_image_name();
}
inline const ::std::string& GS2C_Show_Dialog::image_name() const {
  return *image_name_;
}
inline void GS2C_Show_Dialog::set_image_name(const ::std::string& value) {
  set_has_image_name();
  if (image_name_ == &::google::protobuf::internal::kEmptyString) {
    image_name_ = new ::std::string;
  }
  image_name_->assign(value);
}
inline void GS2C_Show_Dialog::set_image_name(const char* value) {
  set_has_image_name();
  if (image_name_ == &::google::protobuf::internal::kEmptyString) {
    image_name_ = new ::std::string;
  }
  image_name_->assign(value);
}
inline void GS2C_Show_Dialog::set_image_name(const char* value, size_t size) {
  set_has_image_name();
  if (image_name_ == &::google::protobuf::internal::kEmptyString) {
    image_name_ = new ::std::string;
  }
  image_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GS2C_Show_Dialog::mutable_image_name() {
  set_has_image_name();
  if (image_name_ == &::google::protobuf::internal::kEmptyString) {
    image_name_ = new ::std::string;
  }
  return image_name_;
}
inline ::std::string* GS2C_Show_Dialog::release_image_name() {
  clear_has_image_name();
  if (image_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = image_name_;
    image_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GS2C_Show_Dialog::set_allocated_image_name(::std::string* image_name) {
  if (image_name_ != &::google::protobuf::internal::kEmptyString) {
    delete image_name_;
  }
  if (image_name) {
    set_has_image_name();
    image_name_ = image_name;
  } else {
    clear_has_image_name();
    image_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// C2GS_Take_Reward

// optional .pb.ZhengWuReward reward = 1;
inline bool C2GS_Take_Reward::has_reward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Take_Reward::set_has_reward() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Take_Reward::clear_has_reward() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Take_Reward::clear_reward() {
  if (reward_ != NULL) reward_->::pb::ZhengWuReward::Clear();
  clear_has_reward();
}
inline const ::pb::ZhengWuReward& C2GS_Take_Reward::reward() const {
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::pb::ZhengWuReward* C2GS_Take_Reward::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::pb::ZhengWuReward;
  return reward_;
}
inline ::pb::ZhengWuReward* C2GS_Take_Reward::release_reward() {
  clear_has_reward();
  ::pb::ZhengWuReward* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void C2GS_Take_Reward::set_allocated_reward(::pb::ZhengWuReward* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
}

// -------------------------------------------------------------------

// GS2C_Take_Reward_Rsp

// optional uint32 ret = 1;
inline bool GS2C_Take_Reward_Rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Take_Reward_Rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Take_Reward_Rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Take_Reward_Rsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 GS2C_Take_Reward_Rsp::ret() const {
  return ret_;
}
inline void GS2C_Take_Reward_Rsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// GS2C_Take_MinZhong_Reward_Rsp

// repeated .pb.StReward reward = 1;
inline int GS2C_Take_MinZhong_Reward_Rsp::reward_size() const {
  return reward_.size();
}
inline void GS2C_Take_MinZhong_Reward_Rsp::clear_reward() {
  reward_.Clear();
}
inline const ::pb::StReward& GS2C_Take_MinZhong_Reward_Rsp::reward(int index) const {
  return reward_.Get(index);
}
inline ::pb::StReward* GS2C_Take_MinZhong_Reward_Rsp::mutable_reward(int index) {
  return reward_.Mutable(index);
}
inline ::pb::StReward* GS2C_Take_MinZhong_Reward_Rsp::add_reward() {
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::StReward >&
GS2C_Take_MinZhong_Reward_Rsp::reward() const {
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::StReward >*
GS2C_Take_MinZhong_Reward_Rsp::mutable_reward() {
  return &reward_;
}

// -------------------------------------------------------------------

// GxDB_GovAffairsInfo

// optional uint32 left_id = 1;
inline bool GxDB_GovAffairsInfo::has_left_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GxDB_GovAffairsInfo::set_has_left_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GxDB_GovAffairsInfo::clear_has_left_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GxDB_GovAffairsInfo::clear_left_id() {
  left_id_ = 0u;
  clear_has_left_id();
}
inline ::google::protobuf::uint32 GxDB_GovAffairsInfo::left_id() const {
  return left_id_;
}
inline void GxDB_GovAffairsInfo::set_left_id(::google::protobuf::uint32 value) {
  set_has_left_id();
  left_id_ = value;
}

// optional uint32 right_id = 2;
inline bool GxDB_GovAffairsInfo::has_right_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GxDB_GovAffairsInfo::set_has_right_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GxDB_GovAffairsInfo::clear_has_right_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GxDB_GovAffairsInfo::clear_right_id() {
  right_id_ = 0u;
  clear_has_right_id();
}
inline ::google::protobuf::uint32 GxDB_GovAffairsInfo::right_id() const {
  return right_id_;
}
inline void GxDB_GovAffairsInfo::set_right_id(::google::protobuf::uint32 value) {
  set_has_right_id();
  right_id_ = value;
}

// optional uint32 title_id = 3;
inline bool GxDB_GovAffairsInfo::has_title_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GxDB_GovAffairsInfo::set_has_title_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GxDB_GovAffairsInfo::clear_has_title_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GxDB_GovAffairsInfo::clear_title_id() {
  title_id_ = 0u;
  clear_has_title_id();
}
inline ::google::protobuf::uint32 GxDB_GovAffairsInfo::title_id() const {
  return title_id_;
}
inline void GxDB_GovAffairsInfo::set_title_id(::google::protobuf::uint32 value) {
  set_has_title_id();
  title_id_ = value;
}

// optional uint32 left_reward_type = 4;
inline bool GxDB_GovAffairsInfo::has_left_reward_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GxDB_GovAffairsInfo::set_has_left_reward_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GxDB_GovAffairsInfo::clear_has_left_reward_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GxDB_GovAffairsInfo::clear_left_reward_type() {
  left_reward_type_ = 0u;
  clear_has_left_reward_type();
}
inline ::google::protobuf::uint32 GxDB_GovAffairsInfo::left_reward_type() const {
  return left_reward_type_;
}
inline void GxDB_GovAffairsInfo::set_left_reward_type(::google::protobuf::uint32 value) {
  set_has_left_reward_type();
  left_reward_type_ = value;
}

// optional uint32 left_reward_count = 5;
inline bool GxDB_GovAffairsInfo::has_left_reward_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GxDB_GovAffairsInfo::set_has_left_reward_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GxDB_GovAffairsInfo::clear_has_left_reward_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GxDB_GovAffairsInfo::clear_left_reward_count() {
  left_reward_count_ = 0u;
  clear_has_left_reward_count();
}
inline ::google::protobuf::uint32 GxDB_GovAffairsInfo::left_reward_count() const {
  return left_reward_count_;
}
inline void GxDB_GovAffairsInfo::set_left_reward_count(::google::protobuf::uint32 value) {
  set_has_left_reward_count();
  left_reward_count_ = value;
}

// optional uint32 right_reward_type = 6;
inline bool GxDB_GovAffairsInfo::has_right_reward_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GxDB_GovAffairsInfo::set_has_right_reward_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GxDB_GovAffairsInfo::clear_has_right_reward_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GxDB_GovAffairsInfo::clear_right_reward_type() {
  right_reward_type_ = 0u;
  clear_has_right_reward_type();
}
inline ::google::protobuf::uint32 GxDB_GovAffairsInfo::right_reward_type() const {
  return right_reward_type_;
}
inline void GxDB_GovAffairsInfo::set_right_reward_type(::google::protobuf::uint32 value) {
  set_has_right_reward_type();
  right_reward_type_ = value;
}

// optional uint32 right_reward_count = 7;
inline bool GxDB_GovAffairsInfo::has_right_reward_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GxDB_GovAffairsInfo::set_has_right_reward_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GxDB_GovAffairsInfo::clear_has_right_reward_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GxDB_GovAffairsInfo::clear_right_reward_count() {
  right_reward_count_ = 0u;
  clear_has_right_reward_count();
}
inline ::google::protobuf::uint32 GxDB_GovAffairsInfo::right_reward_count() const {
  return right_reward_count_;
}
inline void GxDB_GovAffairsInfo::set_right_reward_count(::google::protobuf::uint32 value) {
  set_has_right_reward_count();
  right_reward_count_ = value;
}

// optional uint32 cost_diamond = 8;
inline bool GxDB_GovAffairsInfo::has_cost_diamond() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GxDB_GovAffairsInfo::set_has_cost_diamond() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GxDB_GovAffairsInfo::clear_has_cost_diamond() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GxDB_GovAffairsInfo::clear_cost_diamond() {
  cost_diamond_ = 0u;
  clear_has_cost_diamond();
}
inline ::google::protobuf::uint32 GxDB_GovAffairsInfo::cost_diamond() const {
  return cost_diamond_;
}
inline void GxDB_GovAffairsInfo::set_cost_diamond(::google::protobuf::uint32 value) {
  set_has_cost_diamond();
  cost_diamond_ = value;
}

// optional string image_name = 9;
inline bool GxDB_GovAffairsInfo::has_image_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GxDB_GovAffairsInfo::set_has_image_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GxDB_GovAffairsInfo::clear_has_image_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GxDB_GovAffairsInfo::clear_image_name() {
  if (image_name_ != &::google::protobuf::internal::kEmptyString) {
    image_name_->clear();
  }
  clear_has_image_name();
}
inline const ::std::string& GxDB_GovAffairsInfo::image_name() const {
  return *image_name_;
}
inline void GxDB_GovAffairsInfo::set_image_name(const ::std::string& value) {
  set_has_image_name();
  if (image_name_ == &::google::protobuf::internal::kEmptyString) {
    image_name_ = new ::std::string;
  }
  image_name_->assign(value);
}
inline void GxDB_GovAffairsInfo::set_image_name(const char* value) {
  set_has_image_name();
  if (image_name_ == &::google::protobuf::internal::kEmptyString) {
    image_name_ = new ::std::string;
  }
  image_name_->assign(value);
}
inline void GxDB_GovAffairsInfo::set_image_name(const char* value, size_t size) {
  set_has_image_name();
  if (image_name_ == &::google::protobuf::internal::kEmptyString) {
    image_name_ = new ::std::string;
  }
  image_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GxDB_GovAffairsInfo::mutable_image_name() {
  set_has_image_name();
  if (image_name_ == &::google::protobuf::internal::kEmptyString) {
    image_name_ = new ::std::string;
  }
  return image_name_;
}
inline ::std::string* GxDB_GovAffairsInfo::release_image_name() {
  clear_has_image_name();
  if (image_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = image_name_;
    image_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GxDB_GovAffairsInfo::set_allocated_image_name(::std::string* image_name) {
  if (image_name_ != &::google::protobuf::internal::kEmptyString) {
    delete image_name_;
  }
  if (image_name) {
    set_has_image_name();
    image_name_ = image_name;
  } else {
    clear_has_image_name();
    image_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CelebrityEvent

// optional uint32 event_id = 1;
inline bool CelebrityEvent::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CelebrityEvent::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CelebrityEvent::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CelebrityEvent::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
inline ::google::protobuf::uint32 CelebrityEvent::event_id() const {
  return event_id_;
}
inline void CelebrityEvent::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
}

// optional string event_display = 2;
inline bool CelebrityEvent::has_event_display() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CelebrityEvent::set_has_event_display() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CelebrityEvent::clear_has_event_display() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CelebrityEvent::clear_event_display() {
  if (event_display_ != &::google::protobuf::internal::kEmptyString) {
    event_display_->clear();
  }
  clear_has_event_display();
}
inline const ::std::string& CelebrityEvent::event_display() const {
  return *event_display_;
}
inline void CelebrityEvent::set_event_display(const ::std::string& value) {
  set_has_event_display();
  if (event_display_ == &::google::protobuf::internal::kEmptyString) {
    event_display_ = new ::std::string;
  }
  event_display_->assign(value);
}
inline void CelebrityEvent::set_event_display(const char* value) {
  set_has_event_display();
  if (event_display_ == &::google::protobuf::internal::kEmptyString) {
    event_display_ = new ::std::string;
  }
  event_display_->assign(value);
}
inline void CelebrityEvent::set_event_display(const char* value, size_t size) {
  set_has_event_display();
  if (event_display_ == &::google::protobuf::internal::kEmptyString) {
    event_display_ = new ::std::string;
  }
  event_display_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CelebrityEvent::mutable_event_display() {
  set_has_event_display();
  if (event_display_ == &::google::protobuf::internal::kEmptyString) {
    event_display_ = new ::std::string;
  }
  return event_display_;
}
inline ::std::string* CelebrityEvent::release_event_display() {
  clear_has_event_display();
  if (event_display_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_display_;
    event_display_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CelebrityEvent::set_allocated_event_display(::std::string* event_display) {
  if (event_display_ != &::google::protobuf::internal::kEmptyString) {
    delete event_display_;
  }
  if (event_display) {
    set_has_event_display();
    event_display_ = event_display;
  } else {
    clear_has_event_display();
    event_display_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .pb.StReward perferTo = 3;
inline bool CelebrityEvent::has_perferto() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CelebrityEvent::set_has_perferto() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CelebrityEvent::clear_has_perferto() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CelebrityEvent::clear_perferto() {
  if (perferto_ != NULL) perferto_->::pb::StReward::Clear();
  clear_has_perferto();
}
inline const ::pb::StReward& CelebrityEvent::perferto() const {
  return perferto_ != NULL ? *perferto_ : *default_instance_->perferto_;
}
inline ::pb::StReward* CelebrityEvent::mutable_perferto() {
  set_has_perferto();
  if (perferto_ == NULL) perferto_ = new ::pb::StReward;
  return perferto_;
}
inline ::pb::StReward* CelebrityEvent::release_perferto() {
  clear_has_perferto();
  ::pb::StReward* temp = perferto_;
  perferto_ = NULL;
  return temp;
}
inline void CelebrityEvent::set_allocated_perferto(::pb::StReward* perferto) {
  delete perferto_;
  perferto_ = perferto;
  if (perferto) {
    set_has_perferto();
  } else {
    clear_has_perferto();
  }
}

// optional uint32 city_id = 4;
inline bool CelebrityEvent::has_city_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CelebrityEvent::set_has_city_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CelebrityEvent::clear_has_city_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CelebrityEvent::clear_city_id() {
  city_id_ = 0u;
  clear_has_city_id();
}
inline ::google::protobuf::uint32 CelebrityEvent::city_id() const {
  return city_id_;
}
inline void CelebrityEvent::set_city_id(::google::protobuf::uint32 value) {
  set_has_city_id();
  city_id_ = value;
}

// optional uint64 next_fresh_time = 5;
inline bool CelebrityEvent::has_next_fresh_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CelebrityEvent::set_has_next_fresh_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CelebrityEvent::clear_has_next_fresh_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CelebrityEvent::clear_next_fresh_time() {
  next_fresh_time_ = GOOGLE_ULONGLONG(0);
  clear_has_next_fresh_time();
}
inline ::google::protobuf::uint64 CelebrityEvent::next_fresh_time() const {
  return next_fresh_time_;
}
inline void CelebrityEvent::set_next_fresh_time(::google::protobuf::uint64 value) {
  set_has_next_fresh_time();
  next_fresh_time_ = value;
}

// optional uint32 daily_times = 6;
inline bool CelebrityEvent::has_daily_times() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CelebrityEvent::set_has_daily_times() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CelebrityEvent::clear_has_daily_times() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CelebrityEvent::clear_daily_times() {
  daily_times_ = 0u;
  clear_has_daily_times();
}
inline ::google::protobuf::uint32 CelebrityEvent::daily_times() const {
  return daily_times_;
}
inline void CelebrityEvent::set_daily_times(::google::protobuf::uint32 value) {
  set_has_daily_times();
  daily_times_ = value;
}

// -------------------------------------------------------------------

// GS2C_Celebrity_All_Info

// optional uint32 city_id = 1;
inline bool GS2C_Celebrity_All_Info::has_city_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Celebrity_All_Info::set_has_city_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Celebrity_All_Info::clear_has_city_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Celebrity_All_Info::clear_city_id() {
  city_id_ = 0u;
  clear_has_city_id();
}
inline ::google::protobuf::uint32 GS2C_Celebrity_All_Info::city_id() const {
  return city_id_;
}
inline void GS2C_Celebrity_All_Info::set_city_id(::google::protobuf::uint32 value) {
  set_has_city_id();
  city_id_ = value;
}

// optional uint64 next_fresh_time = 2;
inline bool GS2C_Celebrity_All_Info::has_next_fresh_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Celebrity_All_Info::set_has_next_fresh_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Celebrity_All_Info::clear_has_next_fresh_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Celebrity_All_Info::clear_next_fresh_time() {
  next_fresh_time_ = GOOGLE_ULONGLONG(0);
  clear_has_next_fresh_time();
}
inline ::google::protobuf::uint64 GS2C_Celebrity_All_Info::next_fresh_time() const {
  return next_fresh_time_;
}
inline void GS2C_Celebrity_All_Info::set_next_fresh_time(::google::protobuf::uint64 value) {
  set_has_next_fresh_time();
  next_fresh_time_ = value;
}

// optional uint32 item_id = 3;
inline bool GS2C_Celebrity_All_Info::has_item_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Celebrity_All_Info::set_has_item_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Celebrity_All_Info::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Celebrity_All_Info::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 GS2C_Celebrity_All_Info::item_id() const {
  return item_id_;
}
inline void GS2C_Celebrity_All_Info::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional .pb.CelebrityEvent event_info = 4;
inline bool GS2C_Celebrity_All_Info::has_event_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Celebrity_All_Info::set_has_event_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Celebrity_All_Info::clear_has_event_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Celebrity_All_Info::clear_event_info() {
  if (event_info_ != NULL) event_info_->::pb::CelebrityEvent::Clear();
  clear_has_event_info();
}
inline const ::pb::CelebrityEvent& GS2C_Celebrity_All_Info::event_info() const {
  return event_info_ != NULL ? *event_info_ : *default_instance_->event_info_;
}
inline ::pb::CelebrityEvent* GS2C_Celebrity_All_Info::mutable_event_info() {
  set_has_event_info();
  if (event_info_ == NULL) event_info_ = new ::pb::CelebrityEvent;
  return event_info_;
}
inline ::pb::CelebrityEvent* GS2C_Celebrity_All_Info::release_event_info() {
  clear_has_event_info();
  ::pb::CelebrityEvent* temp = event_info_;
  event_info_ = NULL;
  return temp;
}
inline void GS2C_Celebrity_All_Info::set_allocated_event_info(::pb::CelebrityEvent* event_info) {
  delete event_info_;
  event_info_ = event_info;
  if (event_info) {
    set_has_event_info();
  } else {
    clear_has_event_info();
  }
}

// -------------------------------------------------------------------

// C2GS_UseCurrencyToTakeReward

// optional uint32 event_id = 1;
inline bool C2GS_UseCurrencyToTakeReward::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_UseCurrencyToTakeReward::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_UseCurrencyToTakeReward::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_UseCurrencyToTakeReward::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
inline ::google::protobuf::uint32 C2GS_UseCurrencyToTakeReward::event_id() const {
  return event_id_;
}
inline void C2GS_UseCurrencyToTakeReward::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
}

// optional uint32 city_id = 2;
inline bool C2GS_UseCurrencyToTakeReward::has_city_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_UseCurrencyToTakeReward::set_has_city_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_UseCurrencyToTakeReward::clear_has_city_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_UseCurrencyToTakeReward::clear_city_id() {
  city_id_ = 0u;
  clear_has_city_id();
}
inline ::google::protobuf::uint32 C2GS_UseCurrencyToTakeReward::city_id() const {
  return city_id_;
}
inline void C2GS_UseCurrencyToTakeReward::set_city_id(::google::protobuf::uint32 value) {
  set_has_city_id();
  city_id_ = value;
}

// optional uint32 award_idx = 3;
inline bool C2GS_UseCurrencyToTakeReward::has_award_idx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2GS_UseCurrencyToTakeReward::set_has_award_idx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2GS_UseCurrencyToTakeReward::clear_has_award_idx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2GS_UseCurrencyToTakeReward::clear_award_idx() {
  award_idx_ = 0u;
  clear_has_award_idx();
}
inline ::google::protobuf::uint32 C2GS_UseCurrencyToTakeReward::award_idx() const {
  return award_idx_;
}
inline void C2GS_UseCurrencyToTakeReward::set_award_idx(::google::protobuf::uint32 value) {
  set_has_award_idx();
  award_idx_ = value;
}

// -------------------------------------------------------------------

// GS2C_UseCurrencyToTakeRewardRsp

// required uint32 result = 1;
inline bool GS2C_UseCurrencyToTakeRewardRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_UseCurrencyToTakeRewardRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_UseCurrencyToTakeRewardRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_UseCurrencyToTakeRewardRsp::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 GS2C_UseCurrencyToTakeRewardRsp::result() const {
  return result_;
}
inline void GS2C_UseCurrencyToTakeRewardRsp::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// C2GS_Celebrity_Take_Reward

// required uint32 Id = 1;
inline bool C2GS_Celebrity_Take_Reward::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Celebrity_Take_Reward::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Celebrity_Take_Reward::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Celebrity_Take_Reward::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 C2GS_Celebrity_Take_Reward::id() const {
  return id_;
}
inline void C2GS_Celebrity_Take_Reward::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// GS2C_Celebrity_Take_Reward_Rsp

// required uint32 id = 1;
inline bool GS2C_Celebrity_Take_Reward_Rsp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Celebrity_Take_Reward_Rsp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Celebrity_Take_Reward_Rsp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Celebrity_Take_Reward_Rsp::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 GS2C_Celebrity_Take_Reward_Rsp::id() const {
  return id_;
}
inline void GS2C_Celebrity_Take_Reward_Rsp::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 ret = 2;
inline bool GS2C_Celebrity_Take_Reward_Rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Celebrity_Take_Reward_Rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Celebrity_Take_Reward_Rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Celebrity_Take_Reward_Rsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 GS2C_Celebrity_Take_Reward_Rsp::ret() const {
  return ret_;
}
inline void GS2C_Celebrity_Take_Reward_Rsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated .pb.StReward reward = 3;
inline int GS2C_Celebrity_Take_Reward_Rsp::reward_size() const {
  return reward_.size();
}
inline void GS2C_Celebrity_Take_Reward_Rsp::clear_reward() {
  reward_.Clear();
}
inline const ::pb::StReward& GS2C_Celebrity_Take_Reward_Rsp::reward(int index) const {
  return reward_.Get(index);
}
inline ::pb::StReward* GS2C_Celebrity_Take_Reward_Rsp::mutable_reward(int index) {
  return reward_.Mutable(index);
}
inline ::pb::StReward* GS2C_Celebrity_Take_Reward_Rsp::add_reward() {
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::StReward >&
GS2C_Celebrity_Take_Reward_Rsp::reward() const {
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::StReward >*
GS2C_Celebrity_Take_Reward_Rsp::mutable_reward() {
  return &reward_;
}

// -------------------------------------------------------------------

// C2GS_ActivityBuyItem

// required uint64 id = 1;
inline bool C2GS_ActivityBuyItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_ActivityBuyItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_ActivityBuyItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_ActivityBuyItem::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 C2GS_ActivityBuyItem::id() const {
  return id_;
}
inline void C2GS_ActivityBuyItem::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// GS2C_ActivityBuyItemRsp

// required uint32 result = 1;
inline bool GS2C_ActivityBuyItemRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_ActivityBuyItemRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_ActivityBuyItemRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_ActivityBuyItemRsp::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 GS2C_ActivityBuyItemRsp::result() const {
  return result_;
}
inline void GS2C_ActivityBuyItemRsp::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// LimitedTimeShopInfo

// optional uint32 cost_price = 1;
inline bool LimitedTimeShopInfo::has_cost_price() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LimitedTimeShopInfo::set_has_cost_price() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LimitedTimeShopInfo::clear_has_cost_price() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LimitedTimeShopInfo::clear_cost_price() {
  cost_price_ = 0u;
  clear_has_cost_price();
}
inline ::google::protobuf::uint32 LimitedTimeShopInfo::cost_price() const {
  return cost_price_;
}
inline void LimitedTimeShopInfo::set_cost_price(::google::protobuf::uint32 value) {
  set_has_cost_price();
  cost_price_ = value;
}

// optional uint32 cost_discount = 2;
inline bool LimitedTimeShopInfo::has_cost_discount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LimitedTimeShopInfo::set_has_cost_discount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LimitedTimeShopInfo::clear_has_cost_discount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LimitedTimeShopInfo::clear_cost_discount() {
  cost_discount_ = 0u;
  clear_has_cost_discount();
}
inline ::google::protobuf::uint32 LimitedTimeShopInfo::cost_discount() const {
  return cost_discount_;
}
inline void LimitedTimeShopInfo::set_cost_discount(::google::protobuf::uint32 value) {
  set_has_cost_discount();
  cost_discount_ = value;
}

// optional uint32 condition = 3;
inline bool LimitedTimeShopInfo::has_condition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LimitedTimeShopInfo::set_has_condition() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LimitedTimeShopInfo::clear_has_condition() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LimitedTimeShopInfo::clear_condition() {
  condition_ = 0u;
  clear_has_condition();
}
inline ::google::protobuf::uint32 LimitedTimeShopInfo::condition() const {
  return condition_;
}
inline void LimitedTimeShopInfo::set_condition(::google::protobuf::uint32 value) {
  set_has_condition();
  condition_ = value;
}

// optional .pb.StReward reward = 4;
inline bool LimitedTimeShopInfo::has_reward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LimitedTimeShopInfo::set_has_reward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LimitedTimeShopInfo::clear_has_reward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LimitedTimeShopInfo::clear_reward() {
  if (reward_ != NULL) reward_->::pb::StReward::Clear();
  clear_has_reward();
}
inline const ::pb::StReward& LimitedTimeShopInfo::reward() const {
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::pb::StReward* LimitedTimeShopInfo::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::pb::StReward;
  return reward_;
}
inline ::pb::StReward* LimitedTimeShopInfo::release_reward() {
  clear_has_reward();
  ::pb::StReward* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void LimitedTimeShopInfo::set_allocated_reward(::pb::StReward* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
}

// optional uint32 is_has_discount = 5;
inline bool LimitedTimeShopInfo::has_is_has_discount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LimitedTimeShopInfo::set_has_is_has_discount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LimitedTimeShopInfo::clear_has_is_has_discount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LimitedTimeShopInfo::clear_is_has_discount() {
  is_has_discount_ = 0u;
  clear_has_is_has_discount();
}
inline ::google::protobuf::uint32 LimitedTimeShopInfo::is_has_discount() const {
  return is_has_discount_;
}
inline void LimitedTimeShopInfo::set_is_has_discount(::google::protobuf::uint32 value) {
  set_has_is_has_discount();
  is_has_discount_ = value;
}

// optional uint64 table_id = 6;
inline bool LimitedTimeShopInfo::has_table_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LimitedTimeShopInfo::set_has_table_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LimitedTimeShopInfo::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LimitedTimeShopInfo::clear_table_id() {
  table_id_ = GOOGLE_ULONGLONG(0);
  clear_has_table_id();
}
inline ::google::protobuf::uint64 LimitedTimeShopInfo::table_id() const {
  return table_id_;
}
inline void LimitedTimeShopInfo::set_table_id(::google::protobuf::uint64 value) {
  set_has_table_id();
  table_id_ = value;
}

// -------------------------------------------------------------------

// GS2C_LimitedTimeShopInfo

// repeated .pb.LimitedTimeShopInfo info = 1;
inline int GS2C_LimitedTimeShopInfo::info_size() const {
  return info_.size();
}
inline void GS2C_LimitedTimeShopInfo::clear_info() {
  info_.Clear();
}
inline const ::pb::LimitedTimeShopInfo& GS2C_LimitedTimeShopInfo::info(int index) const {
  return info_.Get(index);
}
inline ::pb::LimitedTimeShopInfo* GS2C_LimitedTimeShopInfo::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::pb::LimitedTimeShopInfo* GS2C_LimitedTimeShopInfo::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::LimitedTimeShopInfo >&
GS2C_LimitedTimeShopInfo::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::LimitedTimeShopInfo >*
GS2C_LimitedTimeShopInfo::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// C2GS_Open_Hero_Reward_Box

// required uint32 cirital = 1;
inline bool C2GS_Open_Hero_Reward_Box::has_cirital() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Open_Hero_Reward_Box::set_has_cirital() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Open_Hero_Reward_Box::clear_has_cirital() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Open_Hero_Reward_Box::clear_cirital() {
  cirital_ = 0u;
  clear_has_cirital();
}
inline ::google::protobuf::uint32 C2GS_Open_Hero_Reward_Box::cirital() const {
  return cirital_;
}
inline void C2GS_Open_Hero_Reward_Box::set_cirital(::google::protobuf::uint32 value) {
  set_has_cirital();
  cirital_ = value;
}

// -------------------------------------------------------------------

// GS2C_Open_Hero_Reward_Box_Rsp

// repeated .pb.StReward rewrad = 1;
inline int GS2C_Open_Hero_Reward_Box_Rsp::rewrad_size() const {
  return rewrad_.size();
}
inline void GS2C_Open_Hero_Reward_Box_Rsp::clear_rewrad() {
  rewrad_.Clear();
}
inline const ::pb::StReward& GS2C_Open_Hero_Reward_Box_Rsp::rewrad(int index) const {
  return rewrad_.Get(index);
}
inline ::pb::StReward* GS2C_Open_Hero_Reward_Box_Rsp::mutable_rewrad(int index) {
  return rewrad_.Mutable(index);
}
inline ::pb::StReward* GS2C_Open_Hero_Reward_Box_Rsp::add_rewrad() {
  return rewrad_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::StReward >&
GS2C_Open_Hero_Reward_Box_Rsp::rewrad() const {
  return rewrad_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::StReward >*
GS2C_Open_Hero_Reward_Box_Rsp::mutable_rewrad() {
  return &rewrad_;
}

// optional uint32 ret = 2;
inline bool GS2C_Open_Hero_Reward_Box_Rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Open_Hero_Reward_Box_Rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Open_Hero_Reward_Box_Rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Open_Hero_Reward_Box_Rsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 GS2C_Open_Hero_Reward_Box_Rsp::ret() const {
  return ret_;
}
inline void GS2C_Open_Hero_Reward_Box_Rsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// C2GS_Reward_Hero

// required uint32 troops_id = 1;
inline bool C2GS_Reward_Hero::has_troops_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Reward_Hero::set_has_troops_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Reward_Hero::clear_has_troops_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Reward_Hero::clear_troops_id() {
  troops_id_ = 0u;
  clear_has_troops_id();
}
inline ::google::protobuf::uint32 C2GS_Reward_Hero::troops_id() const {
  return troops_id_;
}
inline void C2GS_Reward_Hero::set_troops_id(::google::protobuf::uint32 value) {
  set_has_troops_id();
  troops_id_ = value;
}

// optional uint32 char_id = 2;
inline bool C2GS_Reward_Hero::has_char_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_Reward_Hero::set_has_char_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_Reward_Hero::clear_has_char_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_Reward_Hero::clear_char_id() {
  char_id_ = 0u;
  clear_has_char_id();
}
inline ::google::protobuf::uint32 C2GS_Reward_Hero::char_id() const {
  return char_id_;
}
inline void C2GS_Reward_Hero::set_char_id(::google::protobuf::uint32 value) {
  set_has_char_id();
  char_id_ = value;
}

// -------------------------------------------------------------------

// GS2C_Reward_Hero_Info

// optional uint32 charId = 1;
inline bool GS2C_Reward_Hero_Info::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Reward_Hero_Info::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Reward_Hero_Info::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Reward_Hero_Info::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 GS2C_Reward_Hero_Info::charid() const {
  return charid_;
}
inline void GS2C_Reward_Hero_Info::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional bool is_first_reward = 2;
inline bool GS2C_Reward_Hero_Info::has_is_first_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Reward_Hero_Info::set_has_is_first_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Reward_Hero_Info::clear_has_is_first_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Reward_Hero_Info::clear_is_first_reward() {
  is_first_reward_ = false;
  clear_has_is_first_reward();
}
inline bool GS2C_Reward_Hero_Info::is_first_reward() const {
  return is_first_reward_;
}
inline void GS2C_Reward_Hero_Info::set_is_first_reward(bool value) {
  set_has_is_first_reward();
  is_first_reward_ = value;
}

// -------------------------------------------------------------------

// GS2C_Reward_Hero_Rsp

// required uint32 ret = 1;
inline bool GS2C_Reward_Hero_Rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Reward_Hero_Rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Reward_Hero_Rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Reward_Hero_Rsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 GS2C_Reward_Hero_Rsp::ret() const {
  return ret_;
}
inline void GS2C_Reward_Hero_Rsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint32 critical = 2;
inline bool GS2C_Reward_Hero_Rsp::has_critical() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Reward_Hero_Rsp::set_has_critical() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Reward_Hero_Rsp::clear_has_critical() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Reward_Hero_Rsp::clear_critical() {
  critical_ = 0u;
  clear_has_critical();
}
inline ::google::protobuf::uint32 GS2C_Reward_Hero_Rsp::critical() const {
  return critical_;
}
inline void GS2C_Reward_Hero_Rsp::set_critical(::google::protobuf::uint32 value) {
  set_has_critical();
  critical_ = value;
}

// optional uint32 char_exp = 3;
inline bool GS2C_Reward_Hero_Rsp::has_char_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Reward_Hero_Rsp::set_has_char_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Reward_Hero_Rsp::clear_has_char_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Reward_Hero_Rsp::clear_char_exp() {
  char_exp_ = 0u;
  clear_has_char_exp();
}
inline ::google::protobuf::uint32 GS2C_Reward_Hero_Rsp::char_exp() const {
  return char_exp_;
}
inline void GS2C_Reward_Hero_Rsp::set_char_exp(::google::protobuf::uint32 value) {
  set_has_char_exp();
  char_exp_ = value;
}

// optional uint32 char_level = 4;
inline bool GS2C_Reward_Hero_Rsp::has_char_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Reward_Hero_Rsp::set_has_char_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Reward_Hero_Rsp::clear_has_char_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Reward_Hero_Rsp::clear_char_level() {
  char_level_ = 0u;
  clear_has_char_level();
}
inline ::google::protobuf::uint32 GS2C_Reward_Hero_Rsp::char_level() const {
  return char_level_;
}
inline void GS2C_Reward_Hero_Rsp::set_char_level(::google::protobuf::uint32 value) {
  set_has_char_level();
  char_level_ = value;
}

// optional uint32 char_cur_xp_max = 5;
inline bool GS2C_Reward_Hero_Rsp::has_char_cur_xp_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GS2C_Reward_Hero_Rsp::set_has_char_cur_xp_max() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GS2C_Reward_Hero_Rsp::clear_has_char_cur_xp_max() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GS2C_Reward_Hero_Rsp::clear_char_cur_xp_max() {
  char_cur_xp_max_ = 0u;
  clear_has_char_cur_xp_max();
}
inline ::google::protobuf::uint32 GS2C_Reward_Hero_Rsp::char_cur_xp_max() const {
  return char_cur_xp_max_;
}
inline void GS2C_Reward_Hero_Rsp::set_char_cur_xp_max(::google::protobuf::uint32 value) {
  set_has_char_cur_xp_max();
  char_cur_xp_max_ = value;
}

// optional .pb.GS2C_Reward_Hero_Info next_char_info = 6;
inline bool GS2C_Reward_Hero_Rsp::has_next_char_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GS2C_Reward_Hero_Rsp::set_has_next_char_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GS2C_Reward_Hero_Rsp::clear_has_next_char_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GS2C_Reward_Hero_Rsp::clear_next_char_info() {
  if (next_char_info_ != NULL) next_char_info_->::pb::GS2C_Reward_Hero_Info::Clear();
  clear_has_next_char_info();
}
inline const ::pb::GS2C_Reward_Hero_Info& GS2C_Reward_Hero_Rsp::next_char_info() const {
  return next_char_info_ != NULL ? *next_char_info_ : *default_instance_->next_char_info_;
}
inline ::pb::GS2C_Reward_Hero_Info* GS2C_Reward_Hero_Rsp::mutable_next_char_info() {
  set_has_next_char_info();
  if (next_char_info_ == NULL) next_char_info_ = new ::pb::GS2C_Reward_Hero_Info;
  return next_char_info_;
}
inline ::pb::GS2C_Reward_Hero_Info* GS2C_Reward_Hero_Rsp::release_next_char_info() {
  clear_has_next_char_info();
  ::pb::GS2C_Reward_Hero_Info* temp = next_char_info_;
  next_char_info_ = NULL;
  return temp;
}
inline void GS2C_Reward_Hero_Rsp::set_allocated_next_char_info(::pb::GS2C_Reward_Hero_Info* next_char_info) {
  delete next_char_info_;
  next_char_info_ = next_char_info;
  if (next_char_info) {
    set_has_next_char_info();
  } else {
    clear_has_next_char_info();
  }
}

// optional uint32 char_id = 7;
inline bool GS2C_Reward_Hero_Rsp::has_char_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GS2C_Reward_Hero_Rsp::set_has_char_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GS2C_Reward_Hero_Rsp::clear_has_char_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GS2C_Reward_Hero_Rsp::clear_char_id() {
  char_id_ = 0u;
  clear_has_char_id();
}
inline ::google::protobuf::uint32 GS2C_Reward_Hero_Rsp::char_id() const {
  return char_id_;
}
inline void GS2C_Reward_Hero_Rsp::set_char_id(::google::protobuf::uint32 value) {
  set_has_char_id();
  char_id_ = value;
}

// -------------------------------------------------------------------

// GxDB_Hero_Reward_info

// optional uint32 charId = 1;
inline bool GxDB_Hero_Reward_info::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GxDB_Hero_Reward_info::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GxDB_Hero_Reward_info::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GxDB_Hero_Reward_info::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 GxDB_Hero_Reward_info::charid() const {
  return charid_;
}
inline void GxDB_Hero_Reward_info::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional bool has_first_reward = 2;
inline bool GxDB_Hero_Reward_info::has_has_first_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GxDB_Hero_Reward_info::set_has_has_first_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GxDB_Hero_Reward_info::clear_has_has_first_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GxDB_Hero_Reward_info::clear_has_first_reward() {
  has_first_reward_ = false;
  clear_has_has_first_reward();
}
inline bool GxDB_Hero_Reward_info::has_first_reward() const {
  return has_first_reward_;
}
inline void GxDB_Hero_Reward_info::set_has_first_reward(bool value) {
  set_has_has_first_reward();
  has_first_reward_ = value;
}

// optional uint32 operate_type = 3;
inline bool GxDB_Hero_Reward_info::has_operate_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GxDB_Hero_Reward_info::set_has_operate_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GxDB_Hero_Reward_info::clear_has_operate_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GxDB_Hero_Reward_info::clear_operate_type() {
  operate_type_ = 0u;
  clear_has_operate_type();
}
inline ::google::protobuf::uint32 GxDB_Hero_Reward_info::operate_type() const {
  return operate_type_;
}
inline void GxDB_Hero_Reward_info::set_operate_type(::google::protobuf::uint32 value) {
  set_has_operate_type();
  operate_type_ = value;
}

// -------------------------------------------------------------------

// GxDB_Hero_Reward

// repeated .pb.GxDB_Hero_Reward_info info = 1;
inline int GxDB_Hero_Reward::info_size() const {
  return info_.size();
}
inline void GxDB_Hero_Reward::clear_info() {
  info_.Clear();
}
inline const ::pb::GxDB_Hero_Reward_info& GxDB_Hero_Reward::info(int index) const {
  return info_.Get(index);
}
inline ::pb::GxDB_Hero_Reward_info* GxDB_Hero_Reward::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::pb::GxDB_Hero_Reward_info* GxDB_Hero_Reward::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GxDB_Hero_Reward_info >&
GxDB_Hero_Reward::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GxDB_Hero_Reward_info >*
GxDB_Hero_Reward::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// GxDB_Hero_Reward_delete

// optional uint32 operate_type = 1;
inline bool GxDB_Hero_Reward_delete::has_operate_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GxDB_Hero_Reward_delete::set_has_operate_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GxDB_Hero_Reward_delete::clear_has_operate_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GxDB_Hero_Reward_delete::clear_operate_type() {
  operate_type_ = 0u;
  clear_has_operate_type();
}
inline ::google::protobuf::uint32 GxDB_Hero_Reward_delete::operate_type() const {
  return operate_type_;
}
inline void GxDB_Hero_Reward_delete::set_operate_type(::google::protobuf::uint32 value) {
  set_has_operate_type();
  operate_type_ = value;
}

// -------------------------------------------------------------------

// C2GS_Recharge_rebate

// required uint32 id = 1;
inline bool C2GS_Recharge_rebate::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Recharge_rebate::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Recharge_rebate::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Recharge_rebate::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 C2GS_Recharge_rebate::id() const {
  return id_;
}
inline void C2GS_Recharge_rebate::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// GS2C_Recharge_rebate_Rsp

// optional .pb.StReward reward = 1;
inline bool GS2C_Recharge_rebate_Rsp::has_reward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Recharge_rebate_Rsp::set_has_reward() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Recharge_rebate_Rsp::clear_has_reward() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Recharge_rebate_Rsp::clear_reward() {
  if (reward_ != NULL) reward_->::pb::StReward::Clear();
  clear_has_reward();
}
inline const ::pb::StReward& GS2C_Recharge_rebate_Rsp::reward() const {
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::pb::StReward* GS2C_Recharge_rebate_Rsp::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::pb::StReward;
  return reward_;
}
inline ::pb::StReward* GS2C_Recharge_rebate_Rsp::release_reward() {
  clear_has_reward();
  ::pb::StReward* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void GS2C_Recharge_rebate_Rsp::set_allocated_reward(::pb::StReward* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
}

// required uint32 ret = 2;
inline bool GS2C_Recharge_rebate_Rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Recharge_rebate_Rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Recharge_rebate_Rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Recharge_rebate_Rsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 GS2C_Recharge_rebate_Rsp::ret() const {
  return ret_;
}
inline void GS2C_Recharge_rebate_Rsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ACTIVITY_TYPE>() {
  return ::pb::ACTIVITY_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ACTIIVTY_STAR_BOX_NPC_REWARD>() {
  return ::pb::ACTIIVTY_STAR_BOX_NPC_REWARD_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ACTIVITY_STAR_BOX_LEVEL_UP_RESULT>() {
  return ::pb::ACTIVITY_STAR_BOX_LEVEL_UP_RESULT_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT>() {
  return ::pb::ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_RESULT_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::XILIAN_REWARD_TYPE>() {
  return ::pb::XILIAN_REWARD_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::XILIAN_RESULT>() {
  return ::pb::XILIAN_RESULT_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Activity_2eproto__INCLUDED
