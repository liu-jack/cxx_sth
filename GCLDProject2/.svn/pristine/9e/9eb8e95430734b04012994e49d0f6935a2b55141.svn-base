// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Fuben.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Fuben.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* GS2C_Resource_Stage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Resource_Stage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stage_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stage_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Fuben_All_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Fuben_All_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Enter_Stage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Enter_Stage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Pass_Stage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Pass_Stage_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_TakeResource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_TakeResource_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_TakeResource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_TakeResource_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_ResetResource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_ResetResource_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_ResetResource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_ResetResource_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Select_Crusade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Select_Crusade_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Select_Ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Select_Ret_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Crusade_Reset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Crusade_Reset_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Fog_Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Fog_Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Fog_Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Fog_Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Open_Fog_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Open_Fog_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* Seige_Force_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Seige_Force_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Seige_Force_All_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Seige_Force_All_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Seige_Force_Level_Up_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Seige_Force_Level_Up_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Seige_Force_Level_Up_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Seige_Force_Level_Up_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Seige_Force_Buy_Army_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Seige_Force_Buy_Army_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Seige_Force_Buy_Army_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Seige_Force_Buy_Army_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Seige_Force_Use_Army_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Seige_Force_Use_Army_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Seige_Force_Use_Army_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Seige_Force_Use_Army_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_Seige_Force_Info_Pack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_Seige_Force_Info_Pack_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Take_Month_Card_Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Take_Month_Card_Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Take_Month_Card_Reward_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Take_Month_Card_Reward_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaseContinueMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseContinueMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_ContinueOccupyCity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_ContinueOccupyCity_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_ContinueOccupyCityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_ContinueOccupyCityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_ContinueOccupyCitySuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_ContinueOccupyCitySuccess_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RR_T_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RR_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* E_SEIGE_FORCE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Fuben_2eproto() {
  protobuf_AddDesc_Fuben_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Fuben.proto");
  GOOGLE_CHECK(file != NULL);
  GS2C_Resource_Stage_descriptor_ = file->message_type(0);
  static const int GS2C_Resource_Stage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Resource_Stage, stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Resource_Stage, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Resource_Stage, data_valid_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Resource_Stage, quest_times_),
  };
  GS2C_Resource_Stage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Resource_Stage_descriptor_,
      GS2C_Resource_Stage::default_instance_,
      GS2C_Resource_Stage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Resource_Stage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Resource_Stage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Resource_Stage));
  Stage_Info_descriptor_ = file->message_type(1);
  static const int Stage_Info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stage_Info, stage_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stage_Info, pass_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stage_Info, is_take_reward_),
  };
  Stage_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stage_Info_descriptor_,
      Stage_Info::default_instance_,
      Stage_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stage_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stage_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stage_Info));
  GS2C_Fuben_All_Info_descriptor_ = file->message_type(2);
  static const int GS2C_Fuben_All_Info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Fuben_All_Info, cur_fuben_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Fuben_All_Info, cur_stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Fuben_All_Info, stage_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Fuben_All_Info, pass_stage_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Fuben_All_Info, crusade_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Fuben_All_Info, crusade_info_db_),
  };
  GS2C_Fuben_All_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Fuben_All_Info_descriptor_,
      GS2C_Fuben_All_Info::default_instance_,
      GS2C_Fuben_All_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Fuben_All_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Fuben_All_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Fuben_All_Info));
  C2GS_Enter_Stage_descriptor_ = file->message_type(3);
  static const int C2GS_Enter_Stage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Enter_Stage, stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Enter_Stage, hero_id_),
  };
  C2GS_Enter_Stage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Enter_Stage_descriptor_,
      C2GS_Enter_Stage::default_instance_,
      C2GS_Enter_Stage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Enter_Stage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Enter_Stage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Enter_Stage));
  GS2C_Pass_Stage_descriptor_ = file->message_type(4);
  static const int GS2C_Pass_Stage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Pass_Stage, is_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Pass_Stage, stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Pass_Stage, fuben_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Pass_Stage, rewards_),
  };
  GS2C_Pass_Stage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Pass_Stage_descriptor_,
      GS2C_Pass_Stage::default_instance_,
      GS2C_Pass_Stage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Pass_Stage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Pass_Stage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Pass_Stage));
  C2GS_TakeResource_descriptor_ = file->message_type(5);
  static const int C2GS_TakeResource_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_TakeResource, stage_id_),
  };
  C2GS_TakeResource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_TakeResource_descriptor_,
      C2GS_TakeResource::default_instance_,
      C2GS_TakeResource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_TakeResource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_TakeResource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_TakeResource));
  GS2C_TakeResource_descriptor_ = file->message_type(6);
  static const int GS2C_TakeResource_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_TakeResource, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_TakeResource, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_TakeResource, result_),
  };
  GS2C_TakeResource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_TakeResource_descriptor_,
      GS2C_TakeResource::default_instance_,
      GS2C_TakeResource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_TakeResource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_TakeResource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_TakeResource));
  C2GS_ResetResource_descriptor_ = file->message_type(7);
  static const int C2GS_ResetResource_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_ResetResource, stage_id_),
  };
  C2GS_ResetResource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_ResetResource_descriptor_,
      C2GS_ResetResource::default_instance_,
      C2GS_ResetResource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_ResetResource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_ResetResource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_ResetResource));
  GS2C_ResetResource_descriptor_ = file->message_type(8);
  static const int GS2C_ResetResource_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ResetResource, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ResetResource, info_),
  };
  GS2C_ResetResource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_ResetResource_descriptor_,
      GS2C_ResetResource::default_instance_,
      GS2C_ResetResource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ResetResource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ResetResource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_ResetResource));
  C2GS_Select_Crusade_descriptor_ = file->message_type(9);
  static const int C2GS_Select_Crusade_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Select_Crusade, crusade_id_),
  };
  C2GS_Select_Crusade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Select_Crusade_descriptor_,
      C2GS_Select_Crusade::default_instance_,
      C2GS_Select_Crusade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Select_Crusade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Select_Crusade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Select_Crusade));
  GS2C_Select_Ret_descriptor_ = file->message_type(10);
  static const int GS2C_Select_Ret_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Select_Ret, isselectsuc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Select_Ret, crusadeinfo_),
  };
  GS2C_Select_Ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Select_Ret_descriptor_,
      GS2C_Select_Ret::default_instance_,
      GS2C_Select_Ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Select_Ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Select_Ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Select_Ret));
  GS2C_Crusade_Reset_descriptor_ = file->message_type(11);
  static const int GS2C_Crusade_Reset_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Crusade_Reset, reset_),
  };
  GS2C_Crusade_Reset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Crusade_Reset_descriptor_,
      GS2C_Crusade_Reset::default_instance_,
      GS2C_Crusade_Reset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Crusade_Reset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Crusade_Reset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Crusade_Reset));
  C2GS_Fog_Reward_descriptor_ = file->message_type(12);
  static const int C2GS_Fog_Reward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Fog_Reward, id_),
  };
  C2GS_Fog_Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Fog_Reward_descriptor_,
      C2GS_Fog_Reward::default_instance_,
      C2GS_Fog_Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Fog_Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Fog_Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Fog_Reward));
  GS2C_Fog_Reward_descriptor_ = file->message_type(13);
  static const int GS2C_Fog_Reward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Fog_Reward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Fog_Reward, rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Fog_Reward, result_),
  };
  GS2C_Fog_Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Fog_Reward_descriptor_,
      GS2C_Fog_Reward::default_instance_,
      GS2C_Fog_Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Fog_Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Fog_Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Fog_Reward));
  GS2C_Open_Fog_Info_descriptor_ = file->message_type(14);
  static const int GS2C_Open_Fog_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Open_Fog_Info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Open_Fog_Info, start_time_),
  };
  GS2C_Open_Fog_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Open_Fog_Info_descriptor_,
      GS2C_Open_Fog_Info::default_instance_,
      GS2C_Open_Fog_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Open_Fog_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Open_Fog_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Open_Fog_Info));
  Seige_Force_info_descriptor_ = file->message_type(15);
  static const int Seige_Force_info_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Seige_Force_info, army_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Seige_Force_info, left_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Seige_Force_info, cur_all_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Seige_Force_info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Seige_Force_info, cur_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Seige_Force_info, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Seige_Force_info, specific_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Seige_Force_info, terrain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Seige_Force_info, military_power_),
  };
  Seige_Force_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Seige_Force_info_descriptor_,
      Seige_Force_info::default_instance_,
      Seige_Force_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Seige_Force_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Seige_Force_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Seige_Force_info));
  GS2C_Seige_Force_All_Info_descriptor_ = file->message_type(16);
  static const int GS2C_Seige_Force_All_Info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Seige_Force_All_Info, info_),
  };
  GS2C_Seige_Force_All_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Seige_Force_All_Info_descriptor_,
      GS2C_Seige_Force_All_Info::default_instance_,
      GS2C_Seige_Force_All_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Seige_Force_All_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Seige_Force_All_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Seige_Force_All_Info));
  C2GS_Seige_Force_Level_Up_descriptor_ = file->message_type(17);
  static const int C2GS_Seige_Force_Level_Up_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Seige_Force_Level_Up, army_id_),
  };
  C2GS_Seige_Force_Level_Up_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Seige_Force_Level_Up_descriptor_,
      C2GS_Seige_Force_Level_Up::default_instance_,
      C2GS_Seige_Force_Level_Up_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Seige_Force_Level_Up, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Seige_Force_Level_Up, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Seige_Force_Level_Up));
  GS2C_Seige_Force_Level_Up_Rsp_descriptor_ = file->message_type(18);
  static const int GS2C_Seige_Force_Level_Up_Rsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Seige_Force_Level_Up_Rsp, critical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Seige_Force_Level_Up_Rsp, exp_of_this_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Seige_Force_Level_Up_Rsp, change_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Seige_Force_Level_Up_Rsp, result_),
  };
  GS2C_Seige_Force_Level_Up_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Seige_Force_Level_Up_Rsp_descriptor_,
      GS2C_Seige_Force_Level_Up_Rsp::default_instance_,
      GS2C_Seige_Force_Level_Up_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Seige_Force_Level_Up_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Seige_Force_Level_Up_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Seige_Force_Level_Up_Rsp));
  C2GS_Seige_Force_Buy_Army_descriptor_ = file->message_type(19);
  static const int C2GS_Seige_Force_Buy_Army_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Seige_Force_Buy_Army, army_id_),
  };
  C2GS_Seige_Force_Buy_Army_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Seige_Force_Buy_Army_descriptor_,
      C2GS_Seige_Force_Buy_Army::default_instance_,
      C2GS_Seige_Force_Buy_Army_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Seige_Force_Buy_Army, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Seige_Force_Buy_Army, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Seige_Force_Buy_Army));
  GS2C_Seige_Force_Buy_Army_Rsp_descriptor_ = file->message_type(20);
  static const int GS2C_Seige_Force_Buy_Army_Rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Seige_Force_Buy_Army_Rsp, army_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Seige_Force_Buy_Army_Rsp, result_),
  };
  GS2C_Seige_Force_Buy_Army_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Seige_Force_Buy_Army_Rsp_descriptor_,
      GS2C_Seige_Force_Buy_Army_Rsp::default_instance_,
      GS2C_Seige_Force_Buy_Army_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Seige_Force_Buy_Army_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Seige_Force_Buy_Army_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Seige_Force_Buy_Army_Rsp));
  C2GS_Seige_Force_Use_Army_descriptor_ = file->message_type(21);
  static const int C2GS_Seige_Force_Use_Army_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Seige_Force_Use_Army, army_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Seige_Force_Use_Army, group_unique_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Seige_Force_Use_Army, cityid_),
  };
  C2GS_Seige_Force_Use_Army_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Seige_Force_Use_Army_descriptor_,
      C2GS_Seige_Force_Use_Army::default_instance_,
      C2GS_Seige_Force_Use_Army_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Seige_Force_Use_Army, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Seige_Force_Use_Army, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Seige_Force_Use_Army));
  GS2C_Seige_Force_Use_Army_Rsp_descriptor_ = file->message_type(22);
  static const int GS2C_Seige_Force_Use_Army_Rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Seige_Force_Use_Army_Rsp, army_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Seige_Force_Use_Army_Rsp, result_),
  };
  GS2C_Seige_Force_Use_Army_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Seige_Force_Use_Army_Rsp_descriptor_,
      GS2C_Seige_Force_Use_Army_Rsp::default_instance_,
      GS2C_Seige_Force_Use_Army_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Seige_Force_Use_Army_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Seige_Force_Use_Army_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Seige_Force_Use_Army_Rsp));
  GxDB_Seige_Force_Info_Pack_descriptor_ = file->message_type(23);
  static const int GxDB_Seige_Force_Info_Pack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Seige_Force_Info_Pack, info_),
  };
  GxDB_Seige_Force_Info_Pack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_Seige_Force_Info_Pack_descriptor_,
      GxDB_Seige_Force_Info_Pack::default_instance_,
      GxDB_Seige_Force_Info_Pack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Seige_Force_Info_Pack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Seige_Force_Info_Pack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_Seige_Force_Info_Pack));
  C2GS_Take_Month_Card_Reward_descriptor_ = file->message_type(24);
  static const int C2GS_Take_Month_Card_Reward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Take_Month_Card_Reward, card_type_),
  };
  C2GS_Take_Month_Card_Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Take_Month_Card_Reward_descriptor_,
      C2GS_Take_Month_Card_Reward::default_instance_,
      C2GS_Take_Month_Card_Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Take_Month_Card_Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Take_Month_Card_Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Take_Month_Card_Reward));
  GS2C_Take_Month_Card_Reward_Rsp_descriptor_ = file->message_type(25);
  static const int GS2C_Take_Month_Card_Reward_Rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_Month_Card_Reward_Rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_Month_Card_Reward_Rsp, card_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_Month_Card_Reward_Rsp, reward_),
  };
  GS2C_Take_Month_Card_Reward_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Take_Month_Card_Reward_Rsp_descriptor_,
      GS2C_Take_Month_Card_Reward_Rsp::default_instance_,
      GS2C_Take_Month_Card_Reward_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_Month_Card_Reward_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_Month_Card_Reward_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Take_Month_Card_Reward_Rsp));
  BaseContinueMsg_descriptor_ = file->message_type(26);
  static const int BaseContinueMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseContinueMsg, con_occupy_citys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseContinueMsg, active_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseContinueMsg, finish_time_),
  };
  BaseContinueMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaseContinueMsg_descriptor_,
      BaseContinueMsg::default_instance_,
      BaseContinueMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseContinueMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseContinueMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseContinueMsg));
  GS2C_ContinueOccupyCity_descriptor_ = file->message_type(27);
  static const int GS2C_ContinueOccupyCity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ContinueOccupyCity, info_),
  };
  GS2C_ContinueOccupyCity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_ContinueOccupyCity_descriptor_,
      GS2C_ContinueOccupyCity::default_instance_,
      GS2C_ContinueOccupyCity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ContinueOccupyCity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ContinueOccupyCity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_ContinueOccupyCity));
  GxDB_ContinueOccupyCityInfo_descriptor_ = file->message_type(28);
  static const int GxDB_ContinueOccupyCityInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_ContinueOccupyCityInfo, info_),
  };
  GxDB_ContinueOccupyCityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_ContinueOccupyCityInfo_descriptor_,
      GxDB_ContinueOccupyCityInfo::default_instance_,
      GxDB_ContinueOccupyCityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_ContinueOccupyCityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_ContinueOccupyCityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_ContinueOccupyCityInfo));
  GS2C_ContinueOccupyCitySuccess_descriptor_ = file->message_type(29);
  static const int GS2C_ContinueOccupyCitySuccess_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ContinueOccupyCitySuccess, con_occupy_citys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ContinueOccupyCitySuccess, exploit_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ContinueOccupyCitySuccess, need_to_occupy_city_),
  };
  GS2C_ContinueOccupyCitySuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_ContinueOccupyCitySuccess_descriptor_,
      GS2C_ContinueOccupyCitySuccess::default_instance_,
      GS2C_ContinueOccupyCitySuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ContinueOccupyCitySuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ContinueOccupyCitySuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_ContinueOccupyCitySuccess));
  RR_T_RESULT_descriptor_ = file->enum_type(0);
  RR_RESULT_descriptor_ = file->enum_type(1);
  E_SEIGE_FORCE_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Fuben_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Resource_Stage_descriptor_, &GS2C_Resource_Stage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stage_Info_descriptor_, &Stage_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Fuben_All_Info_descriptor_, &GS2C_Fuben_All_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Enter_Stage_descriptor_, &C2GS_Enter_Stage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Pass_Stage_descriptor_, &GS2C_Pass_Stage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_TakeResource_descriptor_, &C2GS_TakeResource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_TakeResource_descriptor_, &GS2C_TakeResource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_ResetResource_descriptor_, &C2GS_ResetResource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_ResetResource_descriptor_, &GS2C_ResetResource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Select_Crusade_descriptor_, &C2GS_Select_Crusade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Select_Ret_descriptor_, &GS2C_Select_Ret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Crusade_Reset_descriptor_, &GS2C_Crusade_Reset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Fog_Reward_descriptor_, &C2GS_Fog_Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Fog_Reward_descriptor_, &GS2C_Fog_Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Open_Fog_Info_descriptor_, &GS2C_Open_Fog_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Seige_Force_info_descriptor_, &Seige_Force_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Seige_Force_All_Info_descriptor_, &GS2C_Seige_Force_All_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Seige_Force_Level_Up_descriptor_, &C2GS_Seige_Force_Level_Up::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Seige_Force_Level_Up_Rsp_descriptor_, &GS2C_Seige_Force_Level_Up_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Seige_Force_Buy_Army_descriptor_, &C2GS_Seige_Force_Buy_Army::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Seige_Force_Buy_Army_Rsp_descriptor_, &GS2C_Seige_Force_Buy_Army_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Seige_Force_Use_Army_descriptor_, &C2GS_Seige_Force_Use_Army::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Seige_Force_Use_Army_Rsp_descriptor_, &GS2C_Seige_Force_Use_Army_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_Seige_Force_Info_Pack_descriptor_, &GxDB_Seige_Force_Info_Pack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Take_Month_Card_Reward_descriptor_, &C2GS_Take_Month_Card_Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Take_Month_Card_Reward_Rsp_descriptor_, &GS2C_Take_Month_Card_Reward_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseContinueMsg_descriptor_, &BaseContinueMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_ContinueOccupyCity_descriptor_, &GS2C_ContinueOccupyCity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_ContinueOccupyCityInfo_descriptor_, &GxDB_ContinueOccupyCityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_ContinueOccupyCitySuccess_descriptor_, &GS2C_ContinueOccupyCitySuccess::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Fuben_2eproto() {
  delete GS2C_Resource_Stage::default_instance_;
  delete GS2C_Resource_Stage_reflection_;
  delete Stage_Info::default_instance_;
  delete Stage_Info_reflection_;
  delete GS2C_Fuben_All_Info::default_instance_;
  delete GS2C_Fuben_All_Info_reflection_;
  delete C2GS_Enter_Stage::default_instance_;
  delete C2GS_Enter_Stage_reflection_;
  delete GS2C_Pass_Stage::default_instance_;
  delete GS2C_Pass_Stage_reflection_;
  delete C2GS_TakeResource::default_instance_;
  delete C2GS_TakeResource_reflection_;
  delete GS2C_TakeResource::default_instance_;
  delete GS2C_TakeResource_reflection_;
  delete C2GS_ResetResource::default_instance_;
  delete C2GS_ResetResource_reflection_;
  delete GS2C_ResetResource::default_instance_;
  delete GS2C_ResetResource_reflection_;
  delete C2GS_Select_Crusade::default_instance_;
  delete C2GS_Select_Crusade_reflection_;
  delete GS2C_Select_Ret::default_instance_;
  delete GS2C_Select_Ret_reflection_;
  delete GS2C_Crusade_Reset::default_instance_;
  delete GS2C_Crusade_Reset_reflection_;
  delete C2GS_Fog_Reward::default_instance_;
  delete C2GS_Fog_Reward_reflection_;
  delete GS2C_Fog_Reward::default_instance_;
  delete GS2C_Fog_Reward_reflection_;
  delete GS2C_Open_Fog_Info::default_instance_;
  delete GS2C_Open_Fog_Info_reflection_;
  delete Seige_Force_info::default_instance_;
  delete Seige_Force_info_reflection_;
  delete GS2C_Seige_Force_All_Info::default_instance_;
  delete GS2C_Seige_Force_All_Info_reflection_;
  delete C2GS_Seige_Force_Level_Up::default_instance_;
  delete C2GS_Seige_Force_Level_Up_reflection_;
  delete GS2C_Seige_Force_Level_Up_Rsp::default_instance_;
  delete GS2C_Seige_Force_Level_Up_Rsp_reflection_;
  delete C2GS_Seige_Force_Buy_Army::default_instance_;
  delete C2GS_Seige_Force_Buy_Army_reflection_;
  delete GS2C_Seige_Force_Buy_Army_Rsp::default_instance_;
  delete GS2C_Seige_Force_Buy_Army_Rsp_reflection_;
  delete C2GS_Seige_Force_Use_Army::default_instance_;
  delete C2GS_Seige_Force_Use_Army_reflection_;
  delete GS2C_Seige_Force_Use_Army_Rsp::default_instance_;
  delete GS2C_Seige_Force_Use_Army_Rsp_reflection_;
  delete GxDB_Seige_Force_Info_Pack::default_instance_;
  delete GxDB_Seige_Force_Info_Pack_reflection_;
  delete C2GS_Take_Month_Card_Reward::default_instance_;
  delete C2GS_Take_Month_Card_Reward_reflection_;
  delete GS2C_Take_Month_Card_Reward_Rsp::default_instance_;
  delete GS2C_Take_Month_Card_Reward_Rsp_reflection_;
  delete BaseContinueMsg::default_instance_;
  delete BaseContinueMsg_reflection_;
  delete GS2C_ContinueOccupyCity::default_instance_;
  delete GS2C_ContinueOccupyCity_reflection_;
  delete GxDB_ContinueOccupyCityInfo::default_instance_;
  delete GxDB_ContinueOccupyCityInfo_reflection_;
  delete GS2C_ContinueOccupyCitySuccess::default_instance_;
  delete GS2C_ContinueOccupyCitySuccess_reflection_;
}

void protobuf_AddDesc_Fuben_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_CommomDef_2eproto();
  ::pb::protobuf_AddDesc_Combat_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Fuben.proto\022\002pb\032\017CommomDef.proto\032\014Comb"
    "at.proto\"d\n\023GS2C_Resource_Stage\022\020\n\010stage"
    "_id\030\001 \001(\r\022\r\n\005times\030\002 \001(\r\022\027\n\017data_valid_t"
    "ime\030\003 \001(\003\022\023\n\013quest_times\030\004 \001(\r\"L\n\nStage_"
    "Info\022\022\n\nstage_type\030\001 \001(\r\022\022\n\npass_count\030\002"
    " \001(\r\022\026\n\016is_take_reward\030\003 \001(\r\"\371\001\n\023GS2C_Fu"
    "ben_All_Info\022\024\n\014cur_fuben_id\030\001 \001(\r\022\024\n\014cu"
    "r_stage_id\030\002 \001(\r\022,\n\013stage_infos\030\003 \003(\0132\027."
    "pb.GS2C_Resource_Stage\022\'\n\017pass_stage_inf"
    "o\030\004 \003(\0132\016.pb.Stage_Info\022-\n\014crusade_info\030"
    "\005 \001(\0132\027.pb.GS2C_Combat_Crusade\0220\n\017crusad"
    "e_info_db\030\006 \001(\0132\027.pb.GxDB_Combat_Crusade"
    "\"5\n\020C2GS_Enter_Stage\022\020\n\010stage_id\030\001 \002(\r\022\017"
    "\n\007hero_id\030\002 \003(\r\"d\n\017GS2C_Pass_Stage\022\016\n\006is"
    "_win\030\001 \002(\010\022\020\n\010stage_id\030\002 \002(\r\022\020\n\010fuben_id"
    "\030\003 \002(\r\022\035\n\007rewards\030\004 \003(\0132\014.pb.StReward\"%\n"
    "\021C2GS_TakeResource\022\020\n\010stage_id\030\001 \002(\r\"y\n\021"
    "GS2C_TakeResource\022\034\n\006reward\030\001 \003(\0132\014.pb.S"
    "tReward\022%\n\004info\030\002 \001(\0132\027.pb.GS2C_Resource"
    "_Stage\022\037\n\006result\030\003 \001(\0162\017.pb.RR_T_RESULT\""
    "&\n\022C2GS_ResetResource\022\020\n\010stage_id\030\001 \002(\r\""
    "Z\n\022GS2C_ResetResource\022\035\n\006result\030\001 \001(\0162\r."
    "pb.RR_RESULT\022%\n\004info\030\002 \001(\0132\027.pb.GS2C_Res"
    "ource_Stage\")\n\023C2GS_Select_Crusade\022\022\n\ncr"
    "usade_id\030\001 \002(\r\"T\n\017GS2C_Select_Ret\022\023\n\013isS"
    "electSuc\030\001 \002(\010\022,\n\013crusadeinfo\030\002 \001(\0132\027.pb"
    ".GS2C_Combat_Crusade\"#\n\022GS2C_Crusade_Res"
    "et\022\r\n\005reset\030\001 \001(\010\"\035\n\017C2GS_Fog_Reward\022\n\n\002"
    "id\030\001 \002(\r\"]\n\017GS2C_Fog_Reward\022\n\n\002id\030\003 \001(\r\022"
    "\035\n\007rewards\030\001 \001(\0132\014.pb.StReward\022\037\n\006result"
    "\030\002 \001(\0162\017.pb.RR_T_RESULT\"6\n\022GS2C_Open_Fog"
    "_Info\022\014\n\004type\030\001 \002(\r\022\022\n\nstart_time\030\002 \002(\004\""
    "\277\001\n\020Seige_Force_info\022\017\n\007army_id\030\001 \001(\r\022\022\n"
    "\nleft_times\030\002 \001(\r\022\025\n\rcur_all_times\030\003 \001(\r"
    "\022\r\n\005level\030\004 \001(\r\022\017\n\007cur_exp\030\005 \001(\r\022\020\n\010skil"
    "l_id\030\006 \001(\r\022\024\n\014specific_ids\030\007 \003(\r\022\017\n\007terr"
    "ain\030\010 \003(\r\022\026\n\016military_power\030\t \001(\r\"\?\n\031GS2"
    "C_Seige_Force_All_Info\022\"\n\004info\030\001 \003(\0132\024.p"
    "b.Seige_Force_info\",\n\031C2GS_Seige_Force_L"
    "evel_Up\022\017\n\007army_id\030\001 \002(\r\"\231\001\n\035GS2C_Seige_"
    "Force_Level_Up_Rsp\022\020\n\010critical\030\001 \001(\r\022\030\n\020"
    "exp_of_this_time\030\002 \001(\r\022)\n\013change_info\030\003 "
    "\001(\0132\024.pb.Seige_Force_info\022!\n\006result\030\004 \002("
    "\0162\021.pb.E_SEIGE_FORCE\",\n\031C2GS_Seige_Force"
    "_Buy_Army\022\017\n\007army_id\030\001 \002(\r\"S\n\035GS2C_Seige"
    "_Force_Buy_Army_Rsp\022\017\n\007army_id\030\001 \002(\r\022!\n\006"
    "result\030\002 \001(\0162\021.pb.E_SEIGE_FORCE\"U\n\031C2GS_"
    "Seige_Force_Use_Army\022\017\n\007army_id\030\001 \002(\r\022\027\n"
    "\017group_unique_id\030\002 \002(\r\022\016\n\006cityid\030\003 \001(\r\"S"
    "\n\035GS2C_Seige_Force_Use_Army_Rsp\022\017\n\007army_"
    "id\030\001 \002(\r\022!\n\006result\030\002 \001(\0162\021.pb.E_SEIGE_FO"
    "RCE\"@\n\032GxDB_Seige_Force_Info_Pack\022\"\n\004inf"
    "o\030\001 \003(\0132\024.pb.Seige_Force_info\"0\n\033C2GS_Ta"
    "ke_Month_Card_Reward\022\021\n\tcard_type\030\001 \002(\r\""
    "_\n\037GS2C_Take_Month_Card_Reward_Rsp\022\013\n\003re"
    "t\030\001 \002(\r\022\021\n\tcard_type\030\002 \001(\r\022\034\n\006reward\030\003 \003"
    "(\0132\014.pb.StReward\"U\n\017BaseContinueMsg\022\030\n\020c"
    "on_occupy_citys\030\001 \001(\r\022\023\n\013active_time\030\002 \001"
    "(\004\022\023\n\013finish_time\030\003 \001(\004\"<\n\027GS2C_Continue"
    "OccupyCity\022!\n\004info\030\001 \002(\0132\023.pb.BaseContin"
    "ueMsg\"@\n\033GxDB_ContinueOccupyCityInfo\022!\n\004"
    "info\030\001 \003(\0132\023.pb.BaseContinueMsg\"n\n\036GS2C_"
    "ContinueOccupyCitySuccess\022\030\n\020con_occupy_"
    "citys\030\001 \001(\r\022\025\n\rexploit_value\030\002 \001(\r\022\033\n\023ne"
    "ed_to_occupy_city\030\003 \001(\r*v\n\013RR_T_RESULT\022\027"
    "\n\023RR_T_RESULT_SUCCESS\020\001\022\026\n\022RR_T_RESULT_F"
    "AILED\020\002\022\034\n\030RR_T_RESULT_OTHER_REASON\020\003\022\030\n"
    "\024RR_T_RESULT_HAS_TAKE\020\004*]\n\tRR_RESULT\022\025\n\021"
    "RR_RESULT_SUCCESS\020\001\022\035\n\031RR_RESULT_NOT_ENO"
    "UGH_GOLD\020\002\022\032\n\026RR_RESULT_OTHER_REASON\020\003*\254"
    "\002\n\rE_SEIGE_FORCE\022\023\n\017OPERATE_SUCCESS\020\001\022\022\n"
    "\016OPERATE_FAILED\020\002\022\033\n\027OPERATE_GOLD_NOT_EN"
    "OUGH\020\003\022\033\n\027OPERATE_ITEM_NOT_ENOUGH\020\004\022\030\n\024O"
    "PERATE_BUY_HAS_DONE\020\005\022\033\n\027OPERATE_ARMY_ID"
    "_INVALID\020\006\022\033\n\027OPERATE_DONOT_HAVE_ARMY\020\007\022"
    "\035\n\031OPERATE_ADD_REINFORCE_ERR\020\010\022!\n\035OPERAT"
    "E_NOT_ENOUGH_LEFT_TIMES\020\t\022\"\n\036OPERATE_SEI"
    "GE_ARMY_COUNT_LIMIT\020\n", 3101);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Fuben.proto", &protobuf_RegisterTypes);
  GS2C_Resource_Stage::default_instance_ = new GS2C_Resource_Stage();
  Stage_Info::default_instance_ = new Stage_Info();
  GS2C_Fuben_All_Info::default_instance_ = new GS2C_Fuben_All_Info();
  C2GS_Enter_Stage::default_instance_ = new C2GS_Enter_Stage();
  GS2C_Pass_Stage::default_instance_ = new GS2C_Pass_Stage();
  C2GS_TakeResource::default_instance_ = new C2GS_TakeResource();
  GS2C_TakeResource::default_instance_ = new GS2C_TakeResource();
  C2GS_ResetResource::default_instance_ = new C2GS_ResetResource();
  GS2C_ResetResource::default_instance_ = new GS2C_ResetResource();
  C2GS_Select_Crusade::default_instance_ = new C2GS_Select_Crusade();
  GS2C_Select_Ret::default_instance_ = new GS2C_Select_Ret();
  GS2C_Crusade_Reset::default_instance_ = new GS2C_Crusade_Reset();
  C2GS_Fog_Reward::default_instance_ = new C2GS_Fog_Reward();
  GS2C_Fog_Reward::default_instance_ = new GS2C_Fog_Reward();
  GS2C_Open_Fog_Info::default_instance_ = new GS2C_Open_Fog_Info();
  Seige_Force_info::default_instance_ = new Seige_Force_info();
  GS2C_Seige_Force_All_Info::default_instance_ = new GS2C_Seige_Force_All_Info();
  C2GS_Seige_Force_Level_Up::default_instance_ = new C2GS_Seige_Force_Level_Up();
  GS2C_Seige_Force_Level_Up_Rsp::default_instance_ = new GS2C_Seige_Force_Level_Up_Rsp();
  C2GS_Seige_Force_Buy_Army::default_instance_ = new C2GS_Seige_Force_Buy_Army();
  GS2C_Seige_Force_Buy_Army_Rsp::default_instance_ = new GS2C_Seige_Force_Buy_Army_Rsp();
  C2GS_Seige_Force_Use_Army::default_instance_ = new C2GS_Seige_Force_Use_Army();
  GS2C_Seige_Force_Use_Army_Rsp::default_instance_ = new GS2C_Seige_Force_Use_Army_Rsp();
  GxDB_Seige_Force_Info_Pack::default_instance_ = new GxDB_Seige_Force_Info_Pack();
  C2GS_Take_Month_Card_Reward::default_instance_ = new C2GS_Take_Month_Card_Reward();
  GS2C_Take_Month_Card_Reward_Rsp::default_instance_ = new GS2C_Take_Month_Card_Reward_Rsp();
  BaseContinueMsg::default_instance_ = new BaseContinueMsg();
  GS2C_ContinueOccupyCity::default_instance_ = new GS2C_ContinueOccupyCity();
  GxDB_ContinueOccupyCityInfo::default_instance_ = new GxDB_ContinueOccupyCityInfo();
  GS2C_ContinueOccupyCitySuccess::default_instance_ = new GS2C_ContinueOccupyCitySuccess();
  GS2C_Resource_Stage::default_instance_->InitAsDefaultInstance();
  Stage_Info::default_instance_->InitAsDefaultInstance();
  GS2C_Fuben_All_Info::default_instance_->InitAsDefaultInstance();
  C2GS_Enter_Stage::default_instance_->InitAsDefaultInstance();
  GS2C_Pass_Stage::default_instance_->InitAsDefaultInstance();
  C2GS_TakeResource::default_instance_->InitAsDefaultInstance();
  GS2C_TakeResource::default_instance_->InitAsDefaultInstance();
  C2GS_ResetResource::default_instance_->InitAsDefaultInstance();
  GS2C_ResetResource::default_instance_->InitAsDefaultInstance();
  C2GS_Select_Crusade::default_instance_->InitAsDefaultInstance();
  GS2C_Select_Ret::default_instance_->InitAsDefaultInstance();
  GS2C_Crusade_Reset::default_instance_->InitAsDefaultInstance();
  C2GS_Fog_Reward::default_instance_->InitAsDefaultInstance();
  GS2C_Fog_Reward::default_instance_->InitAsDefaultInstance();
  GS2C_Open_Fog_Info::default_instance_->InitAsDefaultInstance();
  Seige_Force_info::default_instance_->InitAsDefaultInstance();
  GS2C_Seige_Force_All_Info::default_instance_->InitAsDefaultInstance();
  C2GS_Seige_Force_Level_Up::default_instance_->InitAsDefaultInstance();
  GS2C_Seige_Force_Level_Up_Rsp::default_instance_->InitAsDefaultInstance();
  C2GS_Seige_Force_Buy_Army::default_instance_->InitAsDefaultInstance();
  GS2C_Seige_Force_Buy_Army_Rsp::default_instance_->InitAsDefaultInstance();
  C2GS_Seige_Force_Use_Army::default_instance_->InitAsDefaultInstance();
  GS2C_Seige_Force_Use_Army_Rsp::default_instance_->InitAsDefaultInstance();
  GxDB_Seige_Force_Info_Pack::default_instance_->InitAsDefaultInstance();
  C2GS_Take_Month_Card_Reward::default_instance_->InitAsDefaultInstance();
  GS2C_Take_Month_Card_Reward_Rsp::default_instance_->InitAsDefaultInstance();
  BaseContinueMsg::default_instance_->InitAsDefaultInstance();
  GS2C_ContinueOccupyCity::default_instance_->InitAsDefaultInstance();
  GxDB_ContinueOccupyCityInfo::default_instance_->InitAsDefaultInstance();
  GS2C_ContinueOccupyCitySuccess::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Fuben_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Fuben_2eproto {
  StaticDescriptorInitializer_Fuben_2eproto() {
    protobuf_AddDesc_Fuben_2eproto();
  }
} static_descriptor_initializer_Fuben_2eproto_;
const ::google::protobuf::EnumDescriptor* RR_T_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RR_T_RESULT_descriptor_;
}
bool RR_T_RESULT_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RR_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RR_RESULT_descriptor_;
}
bool RR_RESULT_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* E_SEIGE_FORCE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_SEIGE_FORCE_descriptor_;
}
bool E_SEIGE_FORCE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Resource_Stage::kStageIdFieldNumber;
const int GS2C_Resource_Stage::kTimesFieldNumber;
const int GS2C_Resource_Stage::kDataValidTimeFieldNumber;
const int GS2C_Resource_Stage::kQuestTimesFieldNumber;
#endif  // !_MSC_VER

GS2C_Resource_Stage::GS2C_Resource_Stage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Resource_Stage::InitAsDefaultInstance() {
}

GS2C_Resource_Stage::GS2C_Resource_Stage(const GS2C_Resource_Stage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Resource_Stage::SharedCtor() {
  _cached_size_ = 0;
  stage_id_ = 0u;
  times_ = 0u;
  data_valid_time_ = GOOGLE_LONGLONG(0);
  quest_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Resource_Stage::~GS2C_Resource_Stage() {
  SharedDtor();
}

void GS2C_Resource_Stage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Resource_Stage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Resource_Stage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Resource_Stage_descriptor_;
}

const GS2C_Resource_Stage& GS2C_Resource_Stage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fuben_2eproto();
  return *default_instance_;
}

GS2C_Resource_Stage* GS2C_Resource_Stage::default_instance_ = NULL;

GS2C_Resource_Stage* GS2C_Resource_Stage::New() const {
  return new GS2C_Resource_Stage;
}

void GS2C_Resource_Stage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_id_ = 0u;
    times_ = 0u;
    data_valid_time_ = GOOGLE_LONGLONG(0);
    quest_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Resource_Stage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stage_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_id_)));
          set_has_stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // optional uint32 times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_data_valid_time;
        break;
      }

      // optional int64 data_valid_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_valid_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_valid_time_)));
          set_has_data_valid_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_quest_times;
        break;
      }

      // optional uint32 quest_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quest_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quest_times_)));
          set_has_quest_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Resource_Stage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stage_id = 1;
  if (has_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stage_id(), output);
  }

  // optional uint32 times = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->times(), output);
  }

  // optional int64 data_valid_time = 3;
  if (has_data_valid_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->data_valid_time(), output);
  }

  // optional uint32 quest_times = 4;
  if (has_quest_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->quest_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Resource_Stage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 stage_id = 1;
  if (has_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stage_id(), target);
  }

  // optional uint32 times = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->times(), target);
  }

  // optional int64 data_valid_time = 3;
  if (has_data_valid_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->data_valid_time(), target);
  }

  // optional uint32 quest_times = 4;
  if (has_quest_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->quest_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Resource_Stage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stage_id = 1;
    if (has_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage_id());
    }

    // optional uint32 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

    // optional int64 data_valid_time = 3;
    if (has_data_valid_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->data_valid_time());
    }

    // optional uint32 quest_times = 4;
    if (has_quest_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quest_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Resource_Stage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Resource_Stage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Resource_Stage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Resource_Stage::MergeFrom(const GS2C_Resource_Stage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage_id()) {
      set_stage_id(from.stage_id());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_data_valid_time()) {
      set_data_valid_time(from.data_valid_time());
    }
    if (from.has_quest_times()) {
      set_quest_times(from.quest_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Resource_Stage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Resource_Stage::CopyFrom(const GS2C_Resource_Stage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Resource_Stage::IsInitialized() const {

  return true;
}

void GS2C_Resource_Stage::Swap(GS2C_Resource_Stage* other) {
  if (other != this) {
    std::swap(stage_id_, other->stage_id_);
    std::swap(times_, other->times_);
    std::swap(data_valid_time_, other->data_valid_time_);
    std::swap(quest_times_, other->quest_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Resource_Stage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Resource_Stage_descriptor_;
  metadata.reflection = GS2C_Resource_Stage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Stage_Info::kStageTypeFieldNumber;
const int Stage_Info::kPassCountFieldNumber;
const int Stage_Info::kIsTakeRewardFieldNumber;
#endif  // !_MSC_VER

Stage_Info::Stage_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Stage_Info::InitAsDefaultInstance() {
}

Stage_Info::Stage_Info(const Stage_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Stage_Info::SharedCtor() {
  _cached_size_ = 0;
  stage_type_ = 0u;
  pass_count_ = 0u;
  is_take_reward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stage_Info::~Stage_Info() {
  SharedDtor();
}

void Stage_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Stage_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stage_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stage_Info_descriptor_;
}

const Stage_Info& Stage_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fuben_2eproto();
  return *default_instance_;
}

Stage_Info* Stage_Info::default_instance_ = NULL;

Stage_Info* Stage_Info::New() const {
  return new Stage_Info;
}

void Stage_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_type_ = 0u;
    pass_count_ = 0u;
    is_take_reward_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stage_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stage_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_type_)));
          set_has_stage_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass_count;
        break;
      }

      // optional uint32 pass_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pass_count_)));
          set_has_pass_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_take_reward;
        break;
      }

      // optional uint32 is_take_reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_take_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_take_reward_)));
          set_has_is_take_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Stage_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stage_type = 1;
  if (has_stage_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stage_type(), output);
  }

  // optional uint32 pass_count = 2;
  if (has_pass_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pass_count(), output);
  }

  // optional uint32 is_take_reward = 3;
  if (has_is_take_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_take_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Stage_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 stage_type = 1;
  if (has_stage_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stage_type(), target);
  }

  // optional uint32 pass_count = 2;
  if (has_pass_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pass_count(), target);
  }

  // optional uint32 is_take_reward = 3;
  if (has_is_take_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_take_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Stage_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stage_type = 1;
    if (has_stage_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage_type());
    }

    // optional uint32 pass_count = 2;
    if (has_pass_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pass_count());
    }

    // optional uint32 is_take_reward = 3;
    if (has_is_take_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_take_reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stage_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stage_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stage_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stage_Info::MergeFrom(const Stage_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage_type()) {
      set_stage_type(from.stage_type());
    }
    if (from.has_pass_count()) {
      set_pass_count(from.pass_count());
    }
    if (from.has_is_take_reward()) {
      set_is_take_reward(from.is_take_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stage_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stage_Info::CopyFrom(const Stage_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stage_Info::IsInitialized() const {

  return true;
}

void Stage_Info::Swap(Stage_Info* other) {
  if (other != this) {
    std::swap(stage_type_, other->stage_type_);
    std::swap(pass_count_, other->pass_count_);
    std::swap(is_take_reward_, other->is_take_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stage_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stage_Info_descriptor_;
  metadata.reflection = Stage_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Fuben_All_Info::kCurFubenIdFieldNumber;
const int GS2C_Fuben_All_Info::kCurStageIdFieldNumber;
const int GS2C_Fuben_All_Info::kStageInfosFieldNumber;
const int GS2C_Fuben_All_Info::kPassStageInfoFieldNumber;
const int GS2C_Fuben_All_Info::kCrusadeInfoFieldNumber;
const int GS2C_Fuben_All_Info::kCrusadeInfoDbFieldNumber;
#endif  // !_MSC_VER

GS2C_Fuben_All_Info::GS2C_Fuben_All_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Fuben_All_Info::InitAsDefaultInstance() {
  crusade_info_ = const_cast< ::pb::GS2C_Combat_Crusade*>(&::pb::GS2C_Combat_Crusade::default_instance());
  crusade_info_db_ = const_cast< ::pb::GxDB_Combat_Crusade*>(&::pb::GxDB_Combat_Crusade::default_instance());
}

GS2C_Fuben_All_Info::GS2C_Fuben_All_Info(const GS2C_Fuben_All_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Fuben_All_Info::SharedCtor() {
  _cached_size_ = 0;
  cur_fuben_id_ = 0u;
  cur_stage_id_ = 0u;
  crusade_info_ = NULL;
  crusade_info_db_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Fuben_All_Info::~GS2C_Fuben_All_Info() {
  SharedDtor();
}

void GS2C_Fuben_All_Info::SharedDtor() {
  if (this != default_instance_) {
    delete crusade_info_;
    delete crusade_info_db_;
  }
}

void GS2C_Fuben_All_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Fuben_All_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Fuben_All_Info_descriptor_;
}

const GS2C_Fuben_All_Info& GS2C_Fuben_All_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fuben_2eproto();
  return *default_instance_;
}

GS2C_Fuben_All_Info* GS2C_Fuben_All_Info::default_instance_ = NULL;

GS2C_Fuben_All_Info* GS2C_Fuben_All_Info::New() const {
  return new GS2C_Fuben_All_Info;
}

void GS2C_Fuben_All_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_fuben_id_ = 0u;
    cur_stage_id_ = 0u;
    if (has_crusade_info()) {
      if (crusade_info_ != NULL) crusade_info_->::pb::GS2C_Combat_Crusade::Clear();
    }
    if (has_crusade_info_db()) {
      if (crusade_info_db_ != NULL) crusade_info_db_->::pb::GxDB_Combat_Crusade::Clear();
    }
  }
  stage_infos_.Clear();
  pass_stage_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Fuben_All_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cur_fuben_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_fuben_id_)));
          set_has_cur_fuben_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_stage_id;
        break;
      }

      // optional uint32 cur_stage_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_stage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_stage_id_)));
          set_has_cur_stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stage_infos;
        break;
      }

      // repeated .pb.GS2C_Resource_Stage stage_infos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stage_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stage_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stage_infos;
        if (input->ExpectTag(34)) goto parse_pass_stage_info;
        break;
      }

      // repeated .pb.Stage_Info pass_stage_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pass_stage_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pass_stage_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pass_stage_info;
        if (input->ExpectTag(42)) goto parse_crusade_info;
        break;
      }

      // optional .pb.GS2C_Combat_Crusade crusade_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_crusade_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crusade_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_crusade_info_db;
        break;
      }

      // optional .pb.GxDB_Combat_Crusade crusade_info_db = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_crusade_info_db:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crusade_info_db()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Fuben_All_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cur_fuben_id = 1;
  if (has_cur_fuben_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cur_fuben_id(), output);
  }

  // optional uint32 cur_stage_id = 2;
  if (has_cur_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_stage_id(), output);
  }

  // repeated .pb.GS2C_Resource_Stage stage_infos = 3;
  for (int i = 0; i < this->stage_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stage_infos(i), output);
  }

  // repeated .pb.Stage_Info pass_stage_info = 4;
  for (int i = 0; i < this->pass_stage_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pass_stage_info(i), output);
  }

  // optional .pb.GS2C_Combat_Crusade crusade_info = 5;
  if (has_crusade_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->crusade_info(), output);
  }

  // optional .pb.GxDB_Combat_Crusade crusade_info_db = 6;
  if (has_crusade_info_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->crusade_info_db(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Fuben_All_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cur_fuben_id = 1;
  if (has_cur_fuben_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cur_fuben_id(), target);
  }

  // optional uint32 cur_stage_id = 2;
  if (has_cur_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_stage_id(), target);
  }

  // repeated .pb.GS2C_Resource_Stage stage_infos = 3;
  for (int i = 0; i < this->stage_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stage_infos(i), target);
  }

  // repeated .pb.Stage_Info pass_stage_info = 4;
  for (int i = 0; i < this->pass_stage_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pass_stage_info(i), target);
  }

  // optional .pb.GS2C_Combat_Crusade crusade_info = 5;
  if (has_crusade_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->crusade_info(), target);
  }

  // optional .pb.GxDB_Combat_Crusade crusade_info_db = 6;
  if (has_crusade_info_db()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->crusade_info_db(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Fuben_All_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cur_fuben_id = 1;
    if (has_cur_fuben_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_fuben_id());
    }

    // optional uint32 cur_stage_id = 2;
    if (has_cur_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_stage_id());
    }

    // optional .pb.GS2C_Combat_Crusade crusade_info = 5;
    if (has_crusade_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crusade_info());
    }

    // optional .pb.GxDB_Combat_Crusade crusade_info_db = 6;
    if (has_crusade_info_db()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crusade_info_db());
    }

  }
  // repeated .pb.GS2C_Resource_Stage stage_infos = 3;
  total_size += 1 * this->stage_infos_size();
  for (int i = 0; i < this->stage_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stage_infos(i));
  }

  // repeated .pb.Stage_Info pass_stage_info = 4;
  total_size += 1 * this->pass_stage_info_size();
  for (int i = 0; i < this->pass_stage_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pass_stage_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Fuben_All_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Fuben_All_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Fuben_All_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Fuben_All_Info::MergeFrom(const GS2C_Fuben_All_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  stage_infos_.MergeFrom(from.stage_infos_);
  pass_stage_info_.MergeFrom(from.pass_stage_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_fuben_id()) {
      set_cur_fuben_id(from.cur_fuben_id());
    }
    if (from.has_cur_stage_id()) {
      set_cur_stage_id(from.cur_stage_id());
    }
    if (from.has_crusade_info()) {
      mutable_crusade_info()->::pb::GS2C_Combat_Crusade::MergeFrom(from.crusade_info());
    }
    if (from.has_crusade_info_db()) {
      mutable_crusade_info_db()->::pb::GxDB_Combat_Crusade::MergeFrom(from.crusade_info_db());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Fuben_All_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Fuben_All_Info::CopyFrom(const GS2C_Fuben_All_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Fuben_All_Info::IsInitialized() const {

  if (has_crusade_info()) {
    if (!this->crusade_info().IsInitialized()) return false;
  }
  if (has_crusade_info_db()) {
    if (!this->crusade_info_db().IsInitialized()) return false;
  }
  return true;
}

void GS2C_Fuben_All_Info::Swap(GS2C_Fuben_All_Info* other) {
  if (other != this) {
    std::swap(cur_fuben_id_, other->cur_fuben_id_);
    std::swap(cur_stage_id_, other->cur_stage_id_);
    stage_infos_.Swap(&other->stage_infos_);
    pass_stage_info_.Swap(&other->pass_stage_info_);
    std::swap(crusade_info_, other->crusade_info_);
    std::swap(crusade_info_db_, other->crusade_info_db_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Fuben_All_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Fuben_All_Info_descriptor_;
  metadata.reflection = GS2C_Fuben_All_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Enter_Stage::kStageIdFieldNumber;
const int C2GS_Enter_Stage::kHeroIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Enter_Stage::C2GS_Enter_Stage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Enter_Stage::InitAsDefaultInstance() {
}

C2GS_Enter_Stage::C2GS_Enter_Stage(const C2GS_Enter_Stage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Enter_Stage::SharedCtor() {
  _cached_size_ = 0;
  stage_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Enter_Stage::~C2GS_Enter_Stage() {
  SharedDtor();
}

void C2GS_Enter_Stage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Enter_Stage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Enter_Stage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Enter_Stage_descriptor_;
}

const C2GS_Enter_Stage& C2GS_Enter_Stage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fuben_2eproto();
  return *default_instance_;
}

C2GS_Enter_Stage* C2GS_Enter_Stage::default_instance_ = NULL;

C2GS_Enter_Stage* C2GS_Enter_Stage::New() const {
  return new C2GS_Enter_Stage;
}

void C2GS_Enter_Stage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_id_ = 0u;
  }
  hero_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Enter_Stage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 stage_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_id_)));
          set_has_stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // repeated uint32 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_hero_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hero_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Enter_Stage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 stage_id = 1;
  if (has_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stage_id(), output);
  }

  // repeated uint32 hero_id = 2;
  for (int i = 0; i < this->hero_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->hero_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Enter_Stage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 stage_id = 1;
  if (has_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stage_id(), target);
  }

  // repeated uint32 hero_id = 2;
  for (int i = 0; i < this->hero_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->hero_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Enter_Stage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 stage_id = 1;
    if (has_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage_id());
    }

  }
  // repeated uint32 hero_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->hero_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hero_id(i));
    }
    total_size += 1 * this->hero_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Enter_Stage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Enter_Stage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Enter_Stage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Enter_Stage::MergeFrom(const C2GS_Enter_Stage& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_id_.MergeFrom(from.hero_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage_id()) {
      set_stage_id(from.stage_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Enter_Stage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Enter_Stage::CopyFrom(const C2GS_Enter_Stage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Enter_Stage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Enter_Stage::Swap(C2GS_Enter_Stage* other) {
  if (other != this) {
    std::swap(stage_id_, other->stage_id_);
    hero_id_.Swap(&other->hero_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Enter_Stage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Enter_Stage_descriptor_;
  metadata.reflection = C2GS_Enter_Stage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Pass_Stage::kIsWinFieldNumber;
const int GS2C_Pass_Stage::kStageIdFieldNumber;
const int GS2C_Pass_Stage::kFubenIdFieldNumber;
const int GS2C_Pass_Stage::kRewardsFieldNumber;
#endif  // !_MSC_VER

GS2C_Pass_Stage::GS2C_Pass_Stage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Pass_Stage::InitAsDefaultInstance() {
}

GS2C_Pass_Stage::GS2C_Pass_Stage(const GS2C_Pass_Stage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Pass_Stage::SharedCtor() {
  _cached_size_ = 0;
  is_win_ = false;
  stage_id_ = 0u;
  fuben_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Pass_Stage::~GS2C_Pass_Stage() {
  SharedDtor();
}

void GS2C_Pass_Stage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Pass_Stage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Pass_Stage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Pass_Stage_descriptor_;
}

const GS2C_Pass_Stage& GS2C_Pass_Stage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fuben_2eproto();
  return *default_instance_;
}

GS2C_Pass_Stage* GS2C_Pass_Stage::default_instance_ = NULL;

GS2C_Pass_Stage* GS2C_Pass_Stage::New() const {
  return new GS2C_Pass_Stage;
}

void GS2C_Pass_Stage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_win_ = false;
    stage_id_ = 0u;
    fuben_id_ = 0u;
  }
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Pass_Stage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_win = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_win_)));
          set_has_is_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stage_id;
        break;
      }

      // required uint32 stage_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_id_)));
          set_has_stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fuben_id;
        break;
      }

      // required uint32 fuben_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fuben_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fuben_id_)));
          set_has_fuben_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rewards;
        break;
      }

      // repeated .pb.StReward rewards = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rewards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Pass_Stage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_win = 1;
  if (has_is_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_win(), output);
  }

  // required uint32 stage_id = 2;
  if (has_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stage_id(), output);
  }

  // required uint32 fuben_id = 3;
  if (has_fuben_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fuben_id(), output);
  }

  // repeated .pb.StReward rewards = 4;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Pass_Stage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_win = 1;
  if (has_is_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_win(), target);
  }

  // required uint32 stage_id = 2;
  if (has_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stage_id(), target);
  }

  // required uint32 fuben_id = 3;
  if (has_fuben_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fuben_id(), target);
  }

  // repeated .pb.StReward rewards = 4;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Pass_Stage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_win = 1;
    if (has_is_win()) {
      total_size += 1 + 1;
    }

    // required uint32 stage_id = 2;
    if (has_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage_id());
    }

    // required uint32 fuben_id = 3;
    if (has_fuben_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fuben_id());
    }

  }
  // repeated .pb.StReward rewards = 4;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Pass_Stage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Pass_Stage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Pass_Stage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Pass_Stage::MergeFrom(const GS2C_Pass_Stage& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_win()) {
      set_is_win(from.is_win());
    }
    if (from.has_stage_id()) {
      set_stage_id(from.stage_id());
    }
    if (from.has_fuben_id()) {
      set_fuben_id(from.fuben_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Pass_Stage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Pass_Stage::CopyFrom(const GS2C_Pass_Stage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Pass_Stage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < rewards_size(); i++) {
    if (!this->rewards(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Pass_Stage::Swap(GS2C_Pass_Stage* other) {
  if (other != this) {
    std::swap(is_win_, other->is_win_);
    std::swap(stage_id_, other->stage_id_);
    std::swap(fuben_id_, other->fuben_id_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Pass_Stage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Pass_Stage_descriptor_;
  metadata.reflection = GS2C_Pass_Stage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_TakeResource::kStageIdFieldNumber;
#endif  // !_MSC_VER

C2GS_TakeResource::C2GS_TakeResource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_TakeResource::InitAsDefaultInstance() {
}

C2GS_TakeResource::C2GS_TakeResource(const C2GS_TakeResource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_TakeResource::SharedCtor() {
  _cached_size_ = 0;
  stage_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_TakeResource::~C2GS_TakeResource() {
  SharedDtor();
}

void C2GS_TakeResource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_TakeResource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_TakeResource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_TakeResource_descriptor_;
}

const C2GS_TakeResource& C2GS_TakeResource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fuben_2eproto();
  return *default_instance_;
}

C2GS_TakeResource* C2GS_TakeResource::default_instance_ = NULL;

C2GS_TakeResource* C2GS_TakeResource::New() const {
  return new C2GS_TakeResource;
}

void C2GS_TakeResource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_TakeResource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 stage_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_id_)));
          set_has_stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_TakeResource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 stage_id = 1;
  if (has_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stage_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_TakeResource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 stage_id = 1;
  if (has_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stage_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_TakeResource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 stage_id = 1;
    if (has_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_TakeResource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_TakeResource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_TakeResource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_TakeResource::MergeFrom(const C2GS_TakeResource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage_id()) {
      set_stage_id(from.stage_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_TakeResource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_TakeResource::CopyFrom(const C2GS_TakeResource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_TakeResource::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_TakeResource::Swap(C2GS_TakeResource* other) {
  if (other != this) {
    std::swap(stage_id_, other->stage_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_TakeResource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_TakeResource_descriptor_;
  metadata.reflection = C2GS_TakeResource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_TakeResource::kRewardFieldNumber;
const int GS2C_TakeResource::kInfoFieldNumber;
const int GS2C_TakeResource::kResultFieldNumber;
#endif  // !_MSC_VER

GS2C_TakeResource::GS2C_TakeResource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_TakeResource::InitAsDefaultInstance() {
  info_ = const_cast< ::pb::GS2C_Resource_Stage*>(&::pb::GS2C_Resource_Stage::default_instance());
}

GS2C_TakeResource::GS2C_TakeResource(const GS2C_TakeResource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_TakeResource::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_TakeResource::~GS2C_TakeResource() {
  SharedDtor();
}

void GS2C_TakeResource::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void GS2C_TakeResource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_TakeResource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_TakeResource_descriptor_;
}

const GS2C_TakeResource& GS2C_TakeResource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fuben_2eproto();
  return *default_instance_;
}

GS2C_TakeResource* GS2C_TakeResource::default_instance_ = NULL;

GS2C_TakeResource* GS2C_TakeResource::New() const {
  return new GS2C_TakeResource;
}

void GS2C_TakeResource::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::pb::GS2C_Resource_Stage::Clear();
    }
    result_ = 1;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_TakeResource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.StReward reward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_reward;
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .pb.GS2C_Resource_Stage info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .pb.RR_T_RESULT result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::RR_T_RESULT_IsValid(value)) {
            set_result(static_cast< ::pb::RR_T_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_TakeResource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.StReward reward = 1;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward(i), output);
  }

  // optional .pb.GS2C_Resource_Stage info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  // optional .pb.RR_T_RESULT result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_TakeResource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.StReward reward = 1;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward(i), target);
  }

  // optional .pb.GS2C_Resource_Stage info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  // optional .pb.RR_T_RESULT result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_TakeResource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .pb.GS2C_Resource_Stage info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .pb.RR_T_RESULT result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  // repeated .pb.StReward reward = 1;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_TakeResource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_TakeResource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_TakeResource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_TakeResource::MergeFrom(const GS2C_TakeResource& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_info()) {
      mutable_info()->::pb::GS2C_Resource_Stage::MergeFrom(from.info());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_TakeResource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_TakeResource::CopyFrom(const GS2C_TakeResource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_TakeResource::IsInitialized() const {

  for (int i = 0; i < reward_size(); i++) {
    if (!this->reward(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_TakeResource::Swap(GS2C_TakeResource* other) {
  if (other != this) {
    reward_.Swap(&other->reward_);
    std::swap(info_, other->info_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_TakeResource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_TakeResource_descriptor_;
  metadata.reflection = GS2C_TakeResource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_ResetResource::kStageIdFieldNumber;
#endif  // !_MSC_VER

C2GS_ResetResource::C2GS_ResetResource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_ResetResource::InitAsDefaultInstance() {
}

C2GS_ResetResource::C2GS_ResetResource(const C2GS_ResetResource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_ResetResource::SharedCtor() {
  _cached_size_ = 0;
  stage_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_ResetResource::~C2GS_ResetResource() {
  SharedDtor();
}

void C2GS_ResetResource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_ResetResource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_ResetResource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_ResetResource_descriptor_;
}

const C2GS_ResetResource& C2GS_ResetResource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fuben_2eproto();
  return *default_instance_;
}

C2GS_ResetResource* C2GS_ResetResource::default_instance_ = NULL;

C2GS_ResetResource* C2GS_ResetResource::New() const {
  return new C2GS_ResetResource;
}

void C2GS_ResetResource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_ResetResource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 stage_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_id_)));
          set_has_stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_ResetResource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 stage_id = 1;
  if (has_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stage_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_ResetResource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 stage_id = 1;
  if (has_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stage_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_ResetResource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 stage_id = 1;
    if (has_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_ResetResource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_ResetResource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_ResetResource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_ResetResource::MergeFrom(const C2GS_ResetResource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage_id()) {
      set_stage_id(from.stage_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_ResetResource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_ResetResource::CopyFrom(const C2GS_ResetResource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_ResetResource::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_ResetResource::Swap(C2GS_ResetResource* other) {
  if (other != this) {
    std::swap(stage_id_, other->stage_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_ResetResource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_ResetResource_descriptor_;
  metadata.reflection = C2GS_ResetResource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_ResetResource::kResultFieldNumber;
const int GS2C_ResetResource::kInfoFieldNumber;
#endif  // !_MSC_VER

GS2C_ResetResource::GS2C_ResetResource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_ResetResource::InitAsDefaultInstance() {
  info_ = const_cast< ::pb::GS2C_Resource_Stage*>(&::pb::GS2C_Resource_Stage::default_instance());
}

GS2C_ResetResource::GS2C_ResetResource(const GS2C_ResetResource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_ResetResource::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_ResetResource::~GS2C_ResetResource() {
  SharedDtor();
}

void GS2C_ResetResource::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void GS2C_ResetResource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_ResetResource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_ResetResource_descriptor_;
}

const GS2C_ResetResource& GS2C_ResetResource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fuben_2eproto();
  return *default_instance_;
}

GS2C_ResetResource* GS2C_ResetResource::default_instance_ = NULL;

GS2C_ResetResource* GS2C_ResetResource::New() const {
  return new GS2C_ResetResource;
}

void GS2C_ResetResource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    if (has_info()) {
      if (info_ != NULL) info_->::pb::GS2C_Resource_Stage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_ResetResource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.RR_RESULT result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::RR_RESULT_IsValid(value)) {
            set_result(static_cast< ::pb::RR_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .pb.GS2C_Resource_Stage info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_ResetResource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.RR_RESULT result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .pb.GS2C_Resource_Stage info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_ResetResource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.RR_RESULT result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .pb.GS2C_Resource_Stage info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_ResetResource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.RR_RESULT result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .pb.GS2C_Resource_Stage info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_ResetResource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_ResetResource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_ResetResource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_ResetResource::MergeFrom(const GS2C_ResetResource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_info()) {
      mutable_info()->::pb::GS2C_Resource_Stage::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_ResetResource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_ResetResource::CopyFrom(const GS2C_ResetResource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_ResetResource::IsInitialized() const {

  return true;
}

void GS2C_ResetResource::Swap(GS2C_ResetResource* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_ResetResource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_ResetResource_descriptor_;
  metadata.reflection = GS2C_ResetResource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Select_Crusade::kCrusadeIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Select_Crusade::C2GS_Select_Crusade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Select_Crusade::InitAsDefaultInstance() {
}

C2GS_Select_Crusade::C2GS_Select_Crusade(const C2GS_Select_Crusade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Select_Crusade::SharedCtor() {
  _cached_size_ = 0;
  crusade_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Select_Crusade::~C2GS_Select_Crusade() {
  SharedDtor();
}

void C2GS_Select_Crusade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Select_Crusade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Select_Crusade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Select_Crusade_descriptor_;
}

const C2GS_Select_Crusade& C2GS_Select_Crusade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fuben_2eproto();
  return *default_instance_;
}

C2GS_Select_Crusade* C2GS_Select_Crusade::default_instance_ = NULL;

C2GS_Select_Crusade* C2GS_Select_Crusade::New() const {
  return new C2GS_Select_Crusade;
}

void C2GS_Select_Crusade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    crusade_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Select_Crusade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 crusade_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crusade_id_)));
          set_has_crusade_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Select_Crusade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 crusade_id = 1;
  if (has_crusade_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->crusade_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Select_Crusade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 crusade_id = 1;
  if (has_crusade_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->crusade_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Select_Crusade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 crusade_id = 1;
    if (has_crusade_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crusade_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Select_Crusade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Select_Crusade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Select_Crusade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Select_Crusade::MergeFrom(const C2GS_Select_Crusade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_crusade_id()) {
      set_crusade_id(from.crusade_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Select_Crusade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Select_Crusade::CopyFrom(const C2GS_Select_Crusade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Select_Crusade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Select_Crusade::Swap(C2GS_Select_Crusade* other) {
  if (other != this) {
    std::swap(crusade_id_, other->crusade_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Select_Crusade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Select_Crusade_descriptor_;
  metadata.reflection = C2GS_Select_Crusade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Select_Ret::kIsSelectSucFieldNumber;
const int GS2C_Select_Ret::kCrusadeinfoFieldNumber;
#endif  // !_MSC_VER

GS2C_Select_Ret::GS2C_Select_Ret()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Select_Ret::InitAsDefaultInstance() {
  crusadeinfo_ = const_cast< ::pb::GS2C_Combat_Crusade*>(&::pb::GS2C_Combat_Crusade::default_instance());
}

GS2C_Select_Ret::GS2C_Select_Ret(const GS2C_Select_Ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Select_Ret::SharedCtor() {
  _cached_size_ = 0;
  isselectsuc_ = false;
  crusadeinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Select_Ret::~GS2C_Select_Ret() {
  SharedDtor();
}

void GS2C_Select_Ret::SharedDtor() {
  if (this != default_instance_) {
    delete crusadeinfo_;
  }
}

void GS2C_Select_Ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Select_Ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Select_Ret_descriptor_;
}

const GS2C_Select_Ret& GS2C_Select_Ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fuben_2eproto();
  return *default_instance_;
}

GS2C_Select_Ret* GS2C_Select_Ret::default_instance_ = NULL;

GS2C_Select_Ret* GS2C_Select_Ret::New() const {
  return new GS2C_Select_Ret;
}

void GS2C_Select_Ret::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isselectsuc_ = false;
    if (has_crusadeinfo()) {
      if (crusadeinfo_ != NULL) crusadeinfo_->::pb::GS2C_Combat_Crusade::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Select_Ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isSelectSuc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isselectsuc_)));
          set_has_isselectsuc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_crusadeinfo;
        break;
      }

      // optional .pb.GS2C_Combat_Crusade crusadeinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_crusadeinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crusadeinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Select_Ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isSelectSuc = 1;
  if (has_isselectsuc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isselectsuc(), output);
  }

  // optional .pb.GS2C_Combat_Crusade crusadeinfo = 2;
  if (has_crusadeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->crusadeinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Select_Ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isSelectSuc = 1;
  if (has_isselectsuc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isselectsuc(), target);
  }

  // optional .pb.GS2C_Combat_Crusade crusadeinfo = 2;
  if (has_crusadeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->crusadeinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Select_Ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isSelectSuc = 1;
    if (has_isselectsuc()) {
      total_size += 1 + 1;
    }

    // optional .pb.GS2C_Combat_Crusade crusadeinfo = 2;
    if (has_crusadeinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crusadeinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Select_Ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Select_Ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Select_Ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Select_Ret::MergeFrom(const GS2C_Select_Ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isselectsuc()) {
      set_isselectsuc(from.isselectsuc());
    }
    if (from.has_crusadeinfo()) {
      mutable_crusadeinfo()->::pb::GS2C_Combat_Crusade::MergeFrom(from.crusadeinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Select_Ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Select_Ret::CopyFrom(const GS2C_Select_Ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Select_Ret::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_crusadeinfo()) {
    if (!this->crusadeinfo().IsInitialized()) return false;
  }
  return true;
}

void GS2C_Select_Ret::Swap(GS2C_Select_Ret* other) {
  if (other != this) {
    std::swap(isselectsuc_, other->isselectsuc_);
    std::swap(crusadeinfo_, other->crusadeinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Select_Ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Select_Ret_descriptor_;
  metadata.reflection = GS2C_Select_Ret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Crusade_Reset::kResetFieldNumber;
#endif  // !_MSC_VER

GS2C_Crusade_Reset::GS2C_Crusade_Reset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Crusade_Reset::InitAsDefaultInstance() {
}

GS2C_Crusade_Reset::GS2C_Crusade_Reset(const GS2C_Crusade_Reset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Crusade_Reset::SharedCtor() {
  _cached_size_ = 0;
  reset_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Crusade_Reset::~GS2C_Crusade_Reset() {
  SharedDtor();
}

void GS2C_Crusade_Reset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Crusade_Reset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Crusade_Reset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Crusade_Reset_descriptor_;
}

const GS2C_Crusade_Reset& GS2C_Crusade_Reset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fuben_2eproto();
  return *default_instance_;
}

GS2C_Crusade_Reset* GS2C_Crusade_Reset::default_instance_ = NULL;

GS2C_Crusade_Reset* GS2C_Crusade_Reset::New() const {
  return new GS2C_Crusade_Reset;
}

void GS2C_Crusade_Reset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reset_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Crusade_Reset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool reset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_)));
          set_has_reset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Crusade_Reset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool reset = 1;
  if (has_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->reset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Crusade_Reset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool reset = 1;
  if (has_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->reset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Crusade_Reset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool reset = 1;
    if (has_reset()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Crusade_Reset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Crusade_Reset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Crusade_Reset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Crusade_Reset::MergeFrom(const GS2C_Crusade_Reset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reset()) {
      set_reset(from.reset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Crusade_Reset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Crusade_Reset::CopyFrom(const GS2C_Crusade_Reset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Crusade_Reset::IsInitialized() const {

  return true;
}

void GS2C_Crusade_Reset::Swap(GS2C_Crusade_Reset* other) {
  if (other != this) {
    std::swap(reset_, other->reset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Crusade_Reset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Crusade_Reset_descriptor_;
  metadata.reflection = GS2C_Crusade_Reset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Fog_Reward::kIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Fog_Reward::C2GS_Fog_Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Fog_Reward::InitAsDefaultInstance() {
}

C2GS_Fog_Reward::C2GS_Fog_Reward(const C2GS_Fog_Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Fog_Reward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Fog_Reward::~C2GS_Fog_Reward() {
  SharedDtor();
}

void C2GS_Fog_Reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Fog_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Fog_Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Fog_Reward_descriptor_;
}

const C2GS_Fog_Reward& C2GS_Fog_Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fuben_2eproto();
  return *default_instance_;
}

C2GS_Fog_Reward* C2GS_Fog_Reward::default_instance_ = NULL;

C2GS_Fog_Reward* C2GS_Fog_Reward::New() const {
  return new C2GS_Fog_Reward;
}

void C2GS_Fog_Reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Fog_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Fog_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Fog_Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Fog_Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Fog_Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Fog_Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Fog_Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Fog_Reward::MergeFrom(const C2GS_Fog_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Fog_Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Fog_Reward::CopyFrom(const C2GS_Fog_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Fog_Reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Fog_Reward::Swap(C2GS_Fog_Reward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Fog_Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Fog_Reward_descriptor_;
  metadata.reflection = C2GS_Fog_Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Fog_Reward::kIdFieldNumber;
const int GS2C_Fog_Reward::kRewardsFieldNumber;
const int GS2C_Fog_Reward::kResultFieldNumber;
#endif  // !_MSC_VER

GS2C_Fog_Reward::GS2C_Fog_Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Fog_Reward::InitAsDefaultInstance() {
  rewards_ = const_cast< ::pb::StReward*>(&::pb::StReward::default_instance());
}

GS2C_Fog_Reward::GS2C_Fog_Reward(const GS2C_Fog_Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Fog_Reward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  rewards_ = NULL;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Fog_Reward::~GS2C_Fog_Reward() {
  SharedDtor();
}

void GS2C_Fog_Reward::SharedDtor() {
  if (this != default_instance_) {
    delete rewards_;
  }
}

void GS2C_Fog_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Fog_Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Fog_Reward_descriptor_;
}

const GS2C_Fog_Reward& GS2C_Fog_Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fuben_2eproto();
  return *default_instance_;
}

GS2C_Fog_Reward* GS2C_Fog_Reward::default_instance_ = NULL;

GS2C_Fog_Reward* GS2C_Fog_Reward::New() const {
  return new GS2C_Fog_Reward;
}

void GS2C_Fog_Reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_rewards()) {
      if (rewards_ != NULL) rewards_->::pb::StReward::Clear();
    }
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Fog_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.StReward rewards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .pb.RR_T_RESULT result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::RR_T_RESULT_IsValid(value)) {
            set_result(static_cast< ::pb::RR_T_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Fog_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.StReward rewards = 1;
  if (has_rewards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewards(), output);
  }

  // optional .pb.RR_T_RESULT result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Fog_Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.StReward rewards = 1;
  if (has_rewards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewards(), target);
  }

  // optional .pb.RR_T_RESULT result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Fog_Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .pb.StReward rewards = 1;
    if (has_rewards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewards());
    }

    // optional .pb.RR_T_RESULT result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Fog_Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Fog_Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Fog_Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Fog_Reward::MergeFrom(const GS2C_Fog_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rewards()) {
      mutable_rewards()->::pb::StReward::MergeFrom(from.rewards());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Fog_Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Fog_Reward::CopyFrom(const GS2C_Fog_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Fog_Reward::IsInitialized() const {

  if (has_rewards()) {
    if (!this->rewards().IsInitialized()) return false;
  }
  return true;
}

void GS2C_Fog_Reward::Swap(GS2C_Fog_Reward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(rewards_, other->rewards_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Fog_Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Fog_Reward_descriptor_;
  metadata.reflection = GS2C_Fog_Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Open_Fog_Info::kTypeFieldNumber;
const int GS2C_Open_Fog_Info::kStartTimeFieldNumber;
#endif  // !_MSC_VER

GS2C_Open_Fog_Info::GS2C_Open_Fog_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Open_Fog_Info::InitAsDefaultInstance() {
}

GS2C_Open_Fog_Info::GS2C_Open_Fog_Info(const GS2C_Open_Fog_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Open_Fog_Info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  start_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Open_Fog_Info::~GS2C_Open_Fog_Info() {
  SharedDtor();
}

void GS2C_Open_Fog_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Open_Fog_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Open_Fog_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Open_Fog_Info_descriptor_;
}

const GS2C_Open_Fog_Info& GS2C_Open_Fog_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fuben_2eproto();
  return *default_instance_;
}

GS2C_Open_Fog_Info* GS2C_Open_Fog_Info::default_instance_ = NULL;

GS2C_Open_Fog_Info* GS2C_Open_Fog_Info::New() const {
  return new GS2C_Open_Fog_Info;
}

void GS2C_Open_Fog_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    start_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Open_Fog_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_time;
        break;
      }

      // required uint64 start_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Open_Fog_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint64 start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->start_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Open_Fog_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint64 start_time = 2;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->start_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Open_Fog_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint64 start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Open_Fog_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Open_Fog_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Open_Fog_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Open_Fog_Info::MergeFrom(const GS2C_Open_Fog_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Open_Fog_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Open_Fog_Info::CopyFrom(const GS2C_Open_Fog_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Open_Fog_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GS2C_Open_Fog_Info::Swap(GS2C_Open_Fog_Info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(start_time_, other->start_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Open_Fog_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Open_Fog_Info_descriptor_;
  metadata.reflection = GS2C_Open_Fog_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Seige_Force_info::kArmyIdFieldNumber;
const int Seige_Force_info::kLeftTimesFieldNumber;
const int Seige_Force_info::kCurAllTimesFieldNumber;
const int Seige_Force_info::kLevelFieldNumber;
const int Seige_Force_info::kCurExpFieldNumber;
const int Seige_Force_info::kSkillIdFieldNumber;
const int Seige_Force_info::kSpecificIdsFieldNumber;
const int Seige_Force_info::kTerrainFieldNumber;
const int Seige_Force_info::kMilitaryPowerFieldNumber;
#endif  // !_MSC_VER

Seige_Force_info::Seige_Force_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Seige_Force_info::InitAsDefaultInstance() {
}

Seige_Force_info::Seige_Force_info(const Seige_Force_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Seige_Force_info::SharedCtor() {
  _cached_size_ = 0;
  army_id_ = 0u;
  left_times_ = 0u;
  cur_all_times_ = 0u;
  level_ = 0u;
  cur_exp_ = 0u;
  skill_id_ = 0u;
  military_power_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Seige_Force_info::~Seige_Force_info() {
  SharedDtor();
}

void Seige_Force_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Seige_Force_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Seige_Force_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Seige_Force_info_descriptor_;
}

const Seige_Force_info& Seige_Force_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fuben_2eproto();
  return *default_instance_;
}

Seige_Force_info* Seige_Force_info::default_instance_ = NULL;

Seige_Force_info* Seige_Force_info::New() const {
  return new Seige_Force_info;
}

void Seige_Force_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    army_id_ = 0u;
    left_times_ = 0u;
    cur_all_times_ = 0u;
    level_ = 0u;
    cur_exp_ = 0u;
    skill_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    military_power_ = 0u;
  }
  specific_ids_.Clear();
  terrain_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Seige_Force_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 army_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &army_id_)));
          set_has_army_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_left_times;
        break;
      }

      // optional uint32 left_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_times_)));
          set_has_left_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_all_times;
        break;
      }

      // optional uint32 cur_all_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_all_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_all_times_)));
          set_has_cur_all_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cur_exp;
        break;
      }

      // optional uint32 cur_exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_exp_)));
          set_has_cur_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_skill_id;
        break;
      }

      // optional uint32 skill_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_specific_ids;
        break;
      }

      // repeated uint32 specific_ids = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_specific_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_specific_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_specific_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_specific_ids;
        if (input->ExpectTag(64)) goto parse_terrain;
        break;
      }

      // repeated uint32 terrain = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_terrain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_terrain())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_terrain())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_terrain;
        if (input->ExpectTag(72)) goto parse_military_power;
        break;
      }

      // optional uint32 military_power = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_military_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &military_power_)));
          set_has_military_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Seige_Force_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 army_id = 1;
  if (has_army_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->army_id(), output);
  }

  // optional uint32 left_times = 2;
  if (has_left_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->left_times(), output);
  }

  // optional uint32 cur_all_times = 3;
  if (has_cur_all_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_all_times(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint32 cur_exp = 5;
  if (has_cur_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cur_exp(), output);
  }

  // optional uint32 skill_id = 6;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->skill_id(), output);
  }

  // repeated uint32 specific_ids = 7;
  for (int i = 0; i < this->specific_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->specific_ids(i), output);
  }

  // repeated uint32 terrain = 8;
  for (int i = 0; i < this->terrain_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->terrain(i), output);
  }

  // optional uint32 military_power = 9;
  if (has_military_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->military_power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Seige_Force_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 army_id = 1;
  if (has_army_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->army_id(), target);
  }

  // optional uint32 left_times = 2;
  if (has_left_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->left_times(), target);
  }

  // optional uint32 cur_all_times = 3;
  if (has_cur_all_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_all_times(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint32 cur_exp = 5;
  if (has_cur_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cur_exp(), target);
  }

  // optional uint32 skill_id = 6;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->skill_id(), target);
  }

  // repeated uint32 specific_ids = 7;
  for (int i = 0; i < this->specific_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->specific_ids(i), target);
  }

  // repeated uint32 terrain = 8;
  for (int i = 0; i < this->terrain_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->terrain(i), target);
  }

  // optional uint32 military_power = 9;
  if (has_military_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->military_power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Seige_Force_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 army_id = 1;
    if (has_army_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->army_id());
    }

    // optional uint32 left_times = 2;
    if (has_left_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_times());
    }

    // optional uint32 cur_all_times = 3;
    if (has_cur_all_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_all_times());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 cur_exp = 5;
    if (has_cur_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_exp());
    }

    // optional uint32 skill_id = 6;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 military_power = 9;
    if (has_military_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->military_power());
    }

  }
  // repeated uint32 specific_ids = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->specific_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->specific_ids(i));
    }
    total_size += 1 * this->specific_ids_size() + data_size;
  }

  // repeated uint32 terrain = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->terrain_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->terrain(i));
    }
    total_size += 1 * this->terrain_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Seige_Force_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Seige_Force_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Seige_Force_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Seige_Force_info::MergeFrom(const Seige_Force_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  specific_ids_.MergeFrom(from.specific_ids_);
  terrain_.MergeFrom(from.terrain_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_army_id()) {
      set_army_id(from.army_id());
    }
    if (from.has_left_times()) {
      set_left_times(from.left_times());
    }
    if (from.has_cur_all_times()) {
      set_cur_all_times(from.cur_all_times());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_cur_exp()) {
      set_cur_exp(from.cur_exp());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_military_power()) {
      set_military_power(from.military_power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Seige_Force_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Seige_Force_info::CopyFrom(const Seige_Force_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Seige_Force_info::IsInitialized() const {

  return true;
}

void Seige_Force_info::Swap(Seige_Force_info* other) {
  if (other != this) {
    std::swap(army_id_, other->army_id_);
    std::swap(left_times_, other->left_times_);
    std::swap(cur_all_times_, other->cur_all_times_);
    std::swap(level_, other->level_);
    std::swap(cur_exp_, other->cur_exp_);
    std::swap(skill_id_, other->skill_id_);
    specific_ids_.Swap(&other->specific_ids_);
    terrain_.Swap(&other->terrain_);
    std::swap(military_power_, other->military_power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Seige_Force_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Seige_Force_info_descriptor_;
  metadata.reflection = Seige_Force_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Seige_Force_All_Info::kInfoFieldNumber;
#endif  // !_MSC_VER

GS2C_Seige_Force_All_Info::GS2C_Seige_Force_All_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Seige_Force_All_Info::InitAsDefaultInstance() {
}

GS2C_Seige_Force_All_Info::GS2C_Seige_Force_All_Info(const GS2C_Seige_Force_All_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Seige_Force_All_Info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Seige_Force_All_Info::~GS2C_Seige_Force_All_Info() {
  SharedDtor();
}

void GS2C_Seige_Force_All_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Seige_Force_All_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Seige_Force_All_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Seige_Force_All_Info_descriptor_;
}

const GS2C_Seige_Force_All_Info& GS2C_Seige_Force_All_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fuben_2eproto();
  return *default_instance_;
}

GS2C_Seige_Force_All_Info* GS2C_Seige_Force_All_Info::default_instance_ = NULL;

GS2C_Seige_Force_All_Info* GS2C_Seige_Force_All_Info::New() const {
  return new GS2C_Seige_Force_All_Info;
}

void GS2C_Seige_Force_All_Info::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Seige_Force_All_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Seige_Force_info info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Seige_Force_All_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.Seige_Force_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Seige_Force_All_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.Seige_Force_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Seige_Force_All_Info::ByteSize() const {
  int total_size = 0;

  // repeated .pb.Seige_Force_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Seige_Force_All_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Seige_Force_All_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Seige_Force_All_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Seige_Force_All_Info::MergeFrom(const GS2C_Seige_Force_All_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Seige_Force_All_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Seige_Force_All_Info::CopyFrom(const GS2C_Seige_Force_All_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Seige_Force_All_Info::IsInitialized() const {

  return true;
}

void GS2C_Seige_Force_All_Info::Swap(GS2C_Seige_Force_All_Info* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Seige_Force_All_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Seige_Force_All_Info_descriptor_;
  metadata.reflection = GS2C_Seige_Force_All_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Seige_Force_Level_Up::kArmyIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Seige_Force_Level_Up::C2GS_Seige_Force_Level_Up()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Seige_Force_Level_Up::InitAsDefaultInstance() {
}

C2GS_Seige_Force_Level_Up::C2GS_Seige_Force_Level_Up(const C2GS_Seige_Force_Level_Up& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Seige_Force_Level_Up::SharedCtor() {
  _cached_size_ = 0;
  army_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Seige_Force_Level_Up::~C2GS_Seige_Force_Level_Up() {
  SharedDtor();
}

void C2GS_Seige_Force_Level_Up::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Seige_Force_Level_Up::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Seige_Force_Level_Up::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Seige_Force_Level_Up_descriptor_;
}

const C2GS_Seige_Force_Level_Up& C2GS_Seige_Force_Level_Up::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fuben_2eproto();
  return *default_instance_;
}

C2GS_Seige_Force_Level_Up* C2GS_Seige_Force_Level_Up::default_instance_ = NULL;

C2GS_Seige_Force_Level_Up* C2GS_Seige_Force_Level_Up::New() const {
  return new C2GS_Seige_Force_Level_Up;
}

void C2GS_Seige_Force_Level_Up::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    army_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Seige_Force_Level_Up::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 army_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &army_id_)));
          set_has_army_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Seige_Force_Level_Up::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 army_id = 1;
  if (has_army_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->army_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Seige_Force_Level_Up::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 army_id = 1;
  if (has_army_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->army_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Seige_Force_Level_Up::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 army_id = 1;
    if (has_army_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->army_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Seige_Force_Level_Up::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Seige_Force_Level_Up* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Seige_Force_Level_Up*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Seige_Force_Level_Up::MergeFrom(const C2GS_Seige_Force_Level_Up& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_army_id()) {
      set_army_id(from.army_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Seige_Force_Level_Up::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Seige_Force_Level_Up::CopyFrom(const C2GS_Seige_Force_Level_Up& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Seige_Force_Level_Up::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Seige_Force_Level_Up::Swap(C2GS_Seige_Force_Level_Up* other) {
  if (other != this) {
    std::swap(army_id_, other->army_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Seige_Force_Level_Up::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Seige_Force_Level_Up_descriptor_;
  metadata.reflection = C2GS_Seige_Force_Level_Up_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Seige_Force_Level_Up_Rsp::kCriticalFieldNumber;
const int GS2C_Seige_Force_Level_Up_Rsp::kExpOfThisTimeFieldNumber;
const int GS2C_Seige_Force_Level_Up_Rsp::kChangeInfoFieldNumber;
const int GS2C_Seige_Force_Level_Up_Rsp::kResultFieldNumber;
#endif  // !_MSC_VER

GS2C_Seige_Force_Level_Up_Rsp::GS2C_Seige_Force_Level_Up_Rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Seige_Force_Level_Up_Rsp::InitAsDefaultInstance() {
  change_info_ = const_cast< ::pb::Seige_Force_info*>(&::pb::Seige_Force_info::default_instance());
}

GS2C_Seige_Force_Level_Up_Rsp::GS2C_Seige_Force_Level_Up_Rsp(const GS2C_Seige_Force_Level_Up_Rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Seige_Force_Level_Up_Rsp::SharedCtor() {
  _cached_size_ = 0;
  critical_ = 0u;
  exp_of_this_time_ = 0u;
  change_info_ = NULL;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Seige_Force_Level_Up_Rsp::~GS2C_Seige_Force_Level_Up_Rsp() {
  SharedDtor();
}

void GS2C_Seige_Force_Level_Up_Rsp::SharedDtor() {
  if (this != default_instance_) {
    delete change_info_;
  }
}

void GS2C_Seige_Force_Level_Up_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Seige_Force_Level_Up_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Seige_Force_Level_Up_Rsp_descriptor_;
}

const GS2C_Seige_Force_Level_Up_Rsp& GS2C_Seige_Force_Level_Up_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fuben_2eproto();
  return *default_instance_;
}

GS2C_Seige_Force_Level_Up_Rsp* GS2C_Seige_Force_Level_Up_Rsp::default_instance_ = NULL;

GS2C_Seige_Force_Level_Up_Rsp* GS2C_Seige_Force_Level_Up_Rsp::New() const {
  return new GS2C_Seige_Force_Level_Up_Rsp;
}

void GS2C_Seige_Force_Level_Up_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    critical_ = 0u;
    exp_of_this_time_ = 0u;
    if (has_change_info()) {
      if (change_info_ != NULL) change_info_->::pb::Seige_Force_info::Clear();
    }
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Seige_Force_Level_Up_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 critical = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critical_)));
          set_has_critical();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp_of_this_time;
        break;
      }

      // optional uint32 exp_of_this_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp_of_this_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_of_this_time_)));
          set_has_exp_of_this_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_change_info;
        break;
      }

      // optional .pb.Seige_Force_info change_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_change_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // required .pb.E_SEIGE_FORCE result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::E_SEIGE_FORCE_IsValid(value)) {
            set_result(static_cast< ::pb::E_SEIGE_FORCE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Seige_Force_Level_Up_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 critical = 1;
  if (has_critical()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->critical(), output);
  }

  // optional uint32 exp_of_this_time = 2;
  if (has_exp_of_this_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exp_of_this_time(), output);
  }

  // optional .pb.Seige_Force_info change_info = 3;
  if (has_change_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->change_info(), output);
  }

  // required .pb.E_SEIGE_FORCE result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Seige_Force_Level_Up_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 critical = 1;
  if (has_critical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->critical(), target);
  }

  // optional uint32 exp_of_this_time = 2;
  if (has_exp_of_this_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exp_of_this_time(), target);
  }

  // optional .pb.Seige_Force_info change_info = 3;
  if (has_change_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->change_info(), target);
  }

  // required .pb.E_SEIGE_FORCE result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Seige_Force_Level_Up_Rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 critical = 1;
    if (has_critical()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critical());
    }

    // optional uint32 exp_of_this_time = 2;
    if (has_exp_of_this_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp_of_this_time());
    }

    // optional .pb.Seige_Force_info change_info = 3;
    if (has_change_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_info());
    }

    // required .pb.E_SEIGE_FORCE result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Seige_Force_Level_Up_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Seige_Force_Level_Up_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Seige_Force_Level_Up_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Seige_Force_Level_Up_Rsp::MergeFrom(const GS2C_Seige_Force_Level_Up_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_critical()) {
      set_critical(from.critical());
    }
    if (from.has_exp_of_this_time()) {
      set_exp_of_this_time(from.exp_of_this_time());
    }
    if (from.has_change_info()) {
      mutable_change_info()->::pb::Seige_Force_info::MergeFrom(from.change_info());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Seige_Force_Level_Up_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Seige_Force_Level_Up_Rsp::CopyFrom(const GS2C_Seige_Force_Level_Up_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Seige_Force_Level_Up_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  return true;
}

void GS2C_Seige_Force_Level_Up_Rsp::Swap(GS2C_Seige_Force_Level_Up_Rsp* other) {
  if (other != this) {
    std::swap(critical_, other->critical_);
    std::swap(exp_of_this_time_, other->exp_of_this_time_);
    std::swap(change_info_, other->change_info_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Seige_Force_Level_Up_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Seige_Force_Level_Up_Rsp_descriptor_;
  metadata.reflection = GS2C_Seige_Force_Level_Up_Rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Seige_Force_Buy_Army::kArmyIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Seige_Force_Buy_Army::C2GS_Seige_Force_Buy_Army()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Seige_Force_Buy_Army::InitAsDefaultInstance() {
}

C2GS_Seige_Force_Buy_Army::C2GS_Seige_Force_Buy_Army(const C2GS_Seige_Force_Buy_Army& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Seige_Force_Buy_Army::SharedCtor() {
  _cached_size_ = 0;
  army_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Seige_Force_Buy_Army::~C2GS_Seige_Force_Buy_Army() {
  SharedDtor();
}

void C2GS_Seige_Force_Buy_Army::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Seige_Force_Buy_Army::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Seige_Force_Buy_Army::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Seige_Force_Buy_Army_descriptor_;
}

const C2GS_Seige_Force_Buy_Army& C2GS_Seige_Force_Buy_Army::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fuben_2eproto();
  return *default_instance_;
}

C2GS_Seige_Force_Buy_Army* C2GS_Seige_Force_Buy_Army::default_instance_ = NULL;

C2GS_Seige_Force_Buy_Army* C2GS_Seige_Force_Buy_Army::New() const {
  return new C2GS_Seige_Force_Buy_Army;
}

void C2GS_Seige_Force_Buy_Army::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    army_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Seige_Force_Buy_Army::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 army_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &army_id_)));
          set_has_army_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Seige_Force_Buy_Army::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 army_id = 1;
  if (has_army_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->army_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Seige_Force_Buy_Army::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 army_id = 1;
  if (has_army_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->army_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Seige_Force_Buy_Army::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 army_id = 1;
    if (has_army_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->army_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Seige_Force_Buy_Army::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Seige_Force_Buy_Army* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Seige_Force_Buy_Army*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Seige_Force_Buy_Army::MergeFrom(const C2GS_Seige_Force_Buy_Army& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_army_id()) {
      set_army_id(from.army_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Seige_Force_Buy_Army::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Seige_Force_Buy_Army::CopyFrom(const C2GS_Seige_Force_Buy_Army& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Seige_Force_Buy_Army::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Seige_Force_Buy_Army::Swap(C2GS_Seige_Force_Buy_Army* other) {
  if (other != this) {
    std::swap(army_id_, other->army_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Seige_Force_Buy_Army::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Seige_Force_Buy_Army_descriptor_;
  metadata.reflection = C2GS_Seige_Force_Buy_Army_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Seige_Force_Buy_Army_Rsp::kArmyIdFieldNumber;
const int GS2C_Seige_Force_Buy_Army_Rsp::kResultFieldNumber;
#endif  // !_MSC_VER

GS2C_Seige_Force_Buy_Army_Rsp::GS2C_Seige_Force_Buy_Army_Rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Seige_Force_Buy_Army_Rsp::InitAsDefaultInstance() {
}

GS2C_Seige_Force_Buy_Army_Rsp::GS2C_Seige_Force_Buy_Army_Rsp(const GS2C_Seige_Force_Buy_Army_Rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Seige_Force_Buy_Army_Rsp::SharedCtor() {
  _cached_size_ = 0;
  army_id_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Seige_Force_Buy_Army_Rsp::~GS2C_Seige_Force_Buy_Army_Rsp() {
  SharedDtor();
}

void GS2C_Seige_Force_Buy_Army_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Seige_Force_Buy_Army_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Seige_Force_Buy_Army_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Seige_Force_Buy_Army_Rsp_descriptor_;
}

const GS2C_Seige_Force_Buy_Army_Rsp& GS2C_Seige_Force_Buy_Army_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fuben_2eproto();
  return *default_instance_;
}

GS2C_Seige_Force_Buy_Army_Rsp* GS2C_Seige_Force_Buy_Army_Rsp::default_instance_ = NULL;

GS2C_Seige_Force_Buy_Army_Rsp* GS2C_Seige_Force_Buy_Army_Rsp::New() const {
  return new GS2C_Seige_Force_Buy_Army_Rsp;
}

void GS2C_Seige_Force_Buy_Army_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    army_id_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Seige_Force_Buy_Army_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 army_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &army_id_)));
          set_has_army_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .pb.E_SEIGE_FORCE result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::E_SEIGE_FORCE_IsValid(value)) {
            set_result(static_cast< ::pb::E_SEIGE_FORCE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Seige_Force_Buy_Army_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 army_id = 1;
  if (has_army_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->army_id(), output);
  }

  // optional .pb.E_SEIGE_FORCE result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Seige_Force_Buy_Army_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 army_id = 1;
  if (has_army_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->army_id(), target);
  }

  // optional .pb.E_SEIGE_FORCE result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Seige_Force_Buy_Army_Rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 army_id = 1;
    if (has_army_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->army_id());
    }

    // optional .pb.E_SEIGE_FORCE result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Seige_Force_Buy_Army_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Seige_Force_Buy_Army_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Seige_Force_Buy_Army_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Seige_Force_Buy_Army_Rsp::MergeFrom(const GS2C_Seige_Force_Buy_Army_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_army_id()) {
      set_army_id(from.army_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Seige_Force_Buy_Army_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Seige_Force_Buy_Army_Rsp::CopyFrom(const GS2C_Seige_Force_Buy_Army_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Seige_Force_Buy_Army_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Seige_Force_Buy_Army_Rsp::Swap(GS2C_Seige_Force_Buy_Army_Rsp* other) {
  if (other != this) {
    std::swap(army_id_, other->army_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Seige_Force_Buy_Army_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Seige_Force_Buy_Army_Rsp_descriptor_;
  metadata.reflection = GS2C_Seige_Force_Buy_Army_Rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Seige_Force_Use_Army::kArmyIdFieldNumber;
const int C2GS_Seige_Force_Use_Army::kGroupUniqueIdFieldNumber;
const int C2GS_Seige_Force_Use_Army::kCityidFieldNumber;
#endif  // !_MSC_VER

C2GS_Seige_Force_Use_Army::C2GS_Seige_Force_Use_Army()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Seige_Force_Use_Army::InitAsDefaultInstance() {
}

C2GS_Seige_Force_Use_Army::C2GS_Seige_Force_Use_Army(const C2GS_Seige_Force_Use_Army& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Seige_Force_Use_Army::SharedCtor() {
  _cached_size_ = 0;
  army_id_ = 0u;
  group_unique_id_ = 0u;
  cityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Seige_Force_Use_Army::~C2GS_Seige_Force_Use_Army() {
  SharedDtor();
}

void C2GS_Seige_Force_Use_Army::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Seige_Force_Use_Army::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Seige_Force_Use_Army::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Seige_Force_Use_Army_descriptor_;
}

const C2GS_Seige_Force_Use_Army& C2GS_Seige_Force_Use_Army::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fuben_2eproto();
  return *default_instance_;
}

C2GS_Seige_Force_Use_Army* C2GS_Seige_Force_Use_Army::default_instance_ = NULL;

C2GS_Seige_Force_Use_Army* C2GS_Seige_Force_Use_Army::New() const {
  return new C2GS_Seige_Force_Use_Army;
}

void C2GS_Seige_Force_Use_Army::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    army_id_ = 0u;
    group_unique_id_ = 0u;
    cityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Seige_Force_Use_Army::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 army_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &army_id_)));
          set_has_army_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group_unique_id;
        break;
      }

      // required uint32 group_unique_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_unique_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_unique_id_)));
          set_has_group_unique_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cityid;
        break;
      }

      // optional uint32 cityid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cityid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Seige_Force_Use_Army::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 army_id = 1;
  if (has_army_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->army_id(), output);
  }

  // required uint32 group_unique_id = 2;
  if (has_group_unique_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_unique_id(), output);
  }

  // optional uint32 cityid = 3;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cityid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Seige_Force_Use_Army::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 army_id = 1;
  if (has_army_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->army_id(), target);
  }

  // required uint32 group_unique_id = 2;
  if (has_group_unique_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->group_unique_id(), target);
  }

  // optional uint32 cityid = 3;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cityid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Seige_Force_Use_Army::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 army_id = 1;
    if (has_army_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->army_id());
    }

    // required uint32 group_unique_id = 2;
    if (has_group_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_unique_id());
    }

    // optional uint32 cityid = 3;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Seige_Force_Use_Army::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Seige_Force_Use_Army* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Seige_Force_Use_Army*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Seige_Force_Use_Army::MergeFrom(const C2GS_Seige_Force_Use_Army& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_army_id()) {
      set_army_id(from.army_id());
    }
    if (from.has_group_unique_id()) {
      set_group_unique_id(from.group_unique_id());
    }
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Seige_Force_Use_Army::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Seige_Force_Use_Army::CopyFrom(const C2GS_Seige_Force_Use_Army& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Seige_Force_Use_Army::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2GS_Seige_Force_Use_Army::Swap(C2GS_Seige_Force_Use_Army* other) {
  if (other != this) {
    std::swap(army_id_, other->army_id_);
    std::swap(group_unique_id_, other->group_unique_id_);
    std::swap(cityid_, other->cityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Seige_Force_Use_Army::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Seige_Force_Use_Army_descriptor_;
  metadata.reflection = C2GS_Seige_Force_Use_Army_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Seige_Force_Use_Army_Rsp::kArmyIdFieldNumber;
const int GS2C_Seige_Force_Use_Army_Rsp::kResultFieldNumber;
#endif  // !_MSC_VER

GS2C_Seige_Force_Use_Army_Rsp::GS2C_Seige_Force_Use_Army_Rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Seige_Force_Use_Army_Rsp::InitAsDefaultInstance() {
}

GS2C_Seige_Force_Use_Army_Rsp::GS2C_Seige_Force_Use_Army_Rsp(const GS2C_Seige_Force_Use_Army_Rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Seige_Force_Use_Army_Rsp::SharedCtor() {
  _cached_size_ = 0;
  army_id_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Seige_Force_Use_Army_Rsp::~GS2C_Seige_Force_Use_Army_Rsp() {
  SharedDtor();
}

void GS2C_Seige_Force_Use_Army_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Seige_Force_Use_Army_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Seige_Force_Use_Army_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Seige_Force_Use_Army_Rsp_descriptor_;
}

const GS2C_Seige_Force_Use_Army_Rsp& GS2C_Seige_Force_Use_Army_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fuben_2eproto();
  return *default_instance_;
}

GS2C_Seige_Force_Use_Army_Rsp* GS2C_Seige_Force_Use_Army_Rsp::default_instance_ = NULL;

GS2C_Seige_Force_Use_Army_Rsp* GS2C_Seige_Force_Use_Army_Rsp::New() const {
  return new GS2C_Seige_Force_Use_Army_Rsp;
}

void GS2C_Seige_Force_Use_Army_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    army_id_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Seige_Force_Use_Army_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 army_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &army_id_)));
          set_has_army_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .pb.E_SEIGE_FORCE result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::E_SEIGE_FORCE_IsValid(value)) {
            set_result(static_cast< ::pb::E_SEIGE_FORCE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Seige_Force_Use_Army_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 army_id = 1;
  if (has_army_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->army_id(), output);
  }

  // optional .pb.E_SEIGE_FORCE result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Seige_Force_Use_Army_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 army_id = 1;
  if (has_army_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->army_id(), target);
  }

  // optional .pb.E_SEIGE_FORCE result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Seige_Force_Use_Army_Rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 army_id = 1;
    if (has_army_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->army_id());
    }

    // optional .pb.E_SEIGE_FORCE result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Seige_Force_Use_Army_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Seige_Force_Use_Army_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Seige_Force_Use_Army_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Seige_Force_Use_Army_Rsp::MergeFrom(const GS2C_Seige_Force_Use_Army_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_army_id()) {
      set_army_id(from.army_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Seige_Force_Use_Army_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Seige_Force_Use_Army_Rsp::CopyFrom(const GS2C_Seige_Force_Use_Army_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Seige_Force_Use_Army_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Seige_Force_Use_Army_Rsp::Swap(GS2C_Seige_Force_Use_Army_Rsp* other) {
  if (other != this) {
    std::swap(army_id_, other->army_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Seige_Force_Use_Army_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Seige_Force_Use_Army_Rsp_descriptor_;
  metadata.reflection = GS2C_Seige_Force_Use_Army_Rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_Seige_Force_Info_Pack::kInfoFieldNumber;
#endif  // !_MSC_VER

GxDB_Seige_Force_Info_Pack::GxDB_Seige_Force_Info_Pack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_Seige_Force_Info_Pack::InitAsDefaultInstance() {
}

GxDB_Seige_Force_Info_Pack::GxDB_Seige_Force_Info_Pack(const GxDB_Seige_Force_Info_Pack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_Seige_Force_Info_Pack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_Seige_Force_Info_Pack::~GxDB_Seige_Force_Info_Pack() {
  SharedDtor();
}

void GxDB_Seige_Force_Info_Pack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_Seige_Force_Info_Pack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_Seige_Force_Info_Pack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_Seige_Force_Info_Pack_descriptor_;
}

const GxDB_Seige_Force_Info_Pack& GxDB_Seige_Force_Info_Pack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fuben_2eproto();
  return *default_instance_;
}

GxDB_Seige_Force_Info_Pack* GxDB_Seige_Force_Info_Pack::default_instance_ = NULL;

GxDB_Seige_Force_Info_Pack* GxDB_Seige_Force_Info_Pack::New() const {
  return new GxDB_Seige_Force_Info_Pack;
}

void GxDB_Seige_Force_Info_Pack::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_Seige_Force_Info_Pack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Seige_Force_info info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_Seige_Force_Info_Pack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.Seige_Force_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_Seige_Force_Info_Pack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.Seige_Force_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_Seige_Force_Info_Pack::ByteSize() const {
  int total_size = 0;

  // repeated .pb.Seige_Force_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_Seige_Force_Info_Pack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_Seige_Force_Info_Pack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_Seige_Force_Info_Pack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_Seige_Force_Info_Pack::MergeFrom(const GxDB_Seige_Force_Info_Pack& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_Seige_Force_Info_Pack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_Seige_Force_Info_Pack::CopyFrom(const GxDB_Seige_Force_Info_Pack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_Seige_Force_Info_Pack::IsInitialized() const {

  return true;
}

void GxDB_Seige_Force_Info_Pack::Swap(GxDB_Seige_Force_Info_Pack* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_Seige_Force_Info_Pack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_Seige_Force_Info_Pack_descriptor_;
  metadata.reflection = GxDB_Seige_Force_Info_Pack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Take_Month_Card_Reward::kCardTypeFieldNumber;
#endif  // !_MSC_VER

C2GS_Take_Month_Card_Reward::C2GS_Take_Month_Card_Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Take_Month_Card_Reward::InitAsDefaultInstance() {
}

C2GS_Take_Month_Card_Reward::C2GS_Take_Month_Card_Reward(const C2GS_Take_Month_Card_Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Take_Month_Card_Reward::SharedCtor() {
  _cached_size_ = 0;
  card_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Take_Month_Card_Reward::~C2GS_Take_Month_Card_Reward() {
  SharedDtor();
}

void C2GS_Take_Month_Card_Reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Take_Month_Card_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Take_Month_Card_Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Take_Month_Card_Reward_descriptor_;
}

const C2GS_Take_Month_Card_Reward& C2GS_Take_Month_Card_Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fuben_2eproto();
  return *default_instance_;
}

C2GS_Take_Month_Card_Reward* C2GS_Take_Month_Card_Reward::default_instance_ = NULL;

C2GS_Take_Month_Card_Reward* C2GS_Take_Month_Card_Reward::New() const {
  return new C2GS_Take_Month_Card_Reward;
}

void C2GS_Take_Month_Card_Reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    card_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Take_Month_Card_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 card_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_type_)));
          set_has_card_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Take_Month_Card_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 card_type = 1;
  if (has_card_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->card_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Take_Month_Card_Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 card_type = 1;
  if (has_card_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->card_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Take_Month_Card_Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 card_type = 1;
    if (has_card_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Take_Month_Card_Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Take_Month_Card_Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Take_Month_Card_Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Take_Month_Card_Reward::MergeFrom(const C2GS_Take_Month_Card_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card_type()) {
      set_card_type(from.card_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Take_Month_Card_Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Take_Month_Card_Reward::CopyFrom(const C2GS_Take_Month_Card_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Take_Month_Card_Reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Take_Month_Card_Reward::Swap(C2GS_Take_Month_Card_Reward* other) {
  if (other != this) {
    std::swap(card_type_, other->card_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Take_Month_Card_Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Take_Month_Card_Reward_descriptor_;
  metadata.reflection = C2GS_Take_Month_Card_Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Take_Month_Card_Reward_Rsp::kRetFieldNumber;
const int GS2C_Take_Month_Card_Reward_Rsp::kCardTypeFieldNumber;
const int GS2C_Take_Month_Card_Reward_Rsp::kRewardFieldNumber;
#endif  // !_MSC_VER

GS2C_Take_Month_Card_Reward_Rsp::GS2C_Take_Month_Card_Reward_Rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Take_Month_Card_Reward_Rsp::InitAsDefaultInstance() {
}

GS2C_Take_Month_Card_Reward_Rsp::GS2C_Take_Month_Card_Reward_Rsp(const GS2C_Take_Month_Card_Reward_Rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Take_Month_Card_Reward_Rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  card_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Take_Month_Card_Reward_Rsp::~GS2C_Take_Month_Card_Reward_Rsp() {
  SharedDtor();
}

void GS2C_Take_Month_Card_Reward_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Take_Month_Card_Reward_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Take_Month_Card_Reward_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Take_Month_Card_Reward_Rsp_descriptor_;
}

const GS2C_Take_Month_Card_Reward_Rsp& GS2C_Take_Month_Card_Reward_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fuben_2eproto();
  return *default_instance_;
}

GS2C_Take_Month_Card_Reward_Rsp* GS2C_Take_Month_Card_Reward_Rsp::default_instance_ = NULL;

GS2C_Take_Month_Card_Reward_Rsp* GS2C_Take_Month_Card_Reward_Rsp::New() const {
  return new GS2C_Take_Month_Card_Reward_Rsp;
}

void GS2C_Take_Month_Card_Reward_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    card_type_ = 0u;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Take_Month_Card_Reward_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_card_type;
        break;
      }

      // optional uint32 card_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_type_)));
          set_has_card_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // repeated .pb.StReward reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Take_Month_Card_Reward_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // optional uint32 card_type = 2;
  if (has_card_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->card_type(), output);
  }

  // repeated .pb.StReward reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Take_Month_Card_Reward_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // optional uint32 card_type = 2;
  if (has_card_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->card_type(), target);
  }

  // repeated .pb.StReward reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Take_Month_Card_Reward_Rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 card_type = 2;
    if (has_card_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_type());
    }

  }
  // repeated .pb.StReward reward = 3;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Take_Month_Card_Reward_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Take_Month_Card_Reward_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Take_Month_Card_Reward_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Take_Month_Card_Reward_Rsp::MergeFrom(const GS2C_Take_Month_Card_Reward_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_card_type()) {
      set_card_type(from.card_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Take_Month_Card_Reward_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Take_Month_Card_Reward_Rsp::CopyFrom(const GS2C_Take_Month_Card_Reward_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Take_Month_Card_Reward_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < reward_size(); i++) {
    if (!this->reward(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Take_Month_Card_Reward_Rsp::Swap(GS2C_Take_Month_Card_Reward_Rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(card_type_, other->card_type_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Take_Month_Card_Reward_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Take_Month_Card_Reward_Rsp_descriptor_;
  metadata.reflection = GS2C_Take_Month_Card_Reward_Rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BaseContinueMsg::kConOccupyCitysFieldNumber;
const int BaseContinueMsg::kActiveTimeFieldNumber;
const int BaseContinueMsg::kFinishTimeFieldNumber;
#endif  // !_MSC_VER

BaseContinueMsg::BaseContinueMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BaseContinueMsg::InitAsDefaultInstance() {
}

BaseContinueMsg::BaseContinueMsg(const BaseContinueMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BaseContinueMsg::SharedCtor() {
  _cached_size_ = 0;
  con_occupy_citys_ = 0u;
  active_time_ = GOOGLE_ULONGLONG(0);
  finish_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseContinueMsg::~BaseContinueMsg() {
  SharedDtor();
}

void BaseContinueMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BaseContinueMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseContinueMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseContinueMsg_descriptor_;
}

const BaseContinueMsg& BaseContinueMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fuben_2eproto();
  return *default_instance_;
}

BaseContinueMsg* BaseContinueMsg::default_instance_ = NULL;

BaseContinueMsg* BaseContinueMsg::New() const {
  return new BaseContinueMsg;
}

void BaseContinueMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    con_occupy_citys_ = 0u;
    active_time_ = GOOGLE_ULONGLONG(0);
    finish_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseContinueMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 con_occupy_citys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &con_occupy_citys_)));
          set_has_con_occupy_citys();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_active_time;
        break;
      }

      // optional uint64 active_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &active_time_)));
          set_has_active_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_finish_time;
        break;
      }

      // optional uint64 finish_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &finish_time_)));
          set_has_finish_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BaseContinueMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 con_occupy_citys = 1;
  if (has_con_occupy_citys()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->con_occupy_citys(), output);
  }

  // optional uint64 active_time = 2;
  if (has_active_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->active_time(), output);
  }

  // optional uint64 finish_time = 3;
  if (has_finish_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->finish_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BaseContinueMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 con_occupy_citys = 1;
  if (has_con_occupy_citys()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->con_occupy_citys(), target);
  }

  // optional uint64 active_time = 2;
  if (has_active_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->active_time(), target);
  }

  // optional uint64 finish_time = 3;
  if (has_finish_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->finish_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BaseContinueMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 con_occupy_citys = 1;
    if (has_con_occupy_citys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->con_occupy_citys());
    }

    // optional uint64 active_time = 2;
    if (has_active_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->active_time());
    }

    // optional uint64 finish_time = 3;
    if (has_finish_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->finish_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseContinueMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseContinueMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaseContinueMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseContinueMsg::MergeFrom(const BaseContinueMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_con_occupy_citys()) {
      set_con_occupy_citys(from.con_occupy_citys());
    }
    if (from.has_active_time()) {
      set_active_time(from.active_time());
    }
    if (from.has_finish_time()) {
      set_finish_time(from.finish_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseContinueMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseContinueMsg::CopyFrom(const BaseContinueMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseContinueMsg::IsInitialized() const {

  return true;
}

void BaseContinueMsg::Swap(BaseContinueMsg* other) {
  if (other != this) {
    std::swap(con_occupy_citys_, other->con_occupy_citys_);
    std::swap(active_time_, other->active_time_);
    std::swap(finish_time_, other->finish_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaseContinueMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseContinueMsg_descriptor_;
  metadata.reflection = BaseContinueMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_ContinueOccupyCity::kInfoFieldNumber;
#endif  // !_MSC_VER

GS2C_ContinueOccupyCity::GS2C_ContinueOccupyCity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_ContinueOccupyCity::InitAsDefaultInstance() {
  info_ = const_cast< ::pb::BaseContinueMsg*>(&::pb::BaseContinueMsg::default_instance());
}

GS2C_ContinueOccupyCity::GS2C_ContinueOccupyCity(const GS2C_ContinueOccupyCity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_ContinueOccupyCity::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_ContinueOccupyCity::~GS2C_ContinueOccupyCity() {
  SharedDtor();
}

void GS2C_ContinueOccupyCity::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void GS2C_ContinueOccupyCity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_ContinueOccupyCity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_ContinueOccupyCity_descriptor_;
}

const GS2C_ContinueOccupyCity& GS2C_ContinueOccupyCity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fuben_2eproto();
  return *default_instance_;
}

GS2C_ContinueOccupyCity* GS2C_ContinueOccupyCity::default_instance_ = NULL;

GS2C_ContinueOccupyCity* GS2C_ContinueOccupyCity::New() const {
  return new GS2C_ContinueOccupyCity;
}

void GS2C_ContinueOccupyCity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::pb::BaseContinueMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_ContinueOccupyCity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.BaseContinueMsg info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_ContinueOccupyCity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.BaseContinueMsg info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_ContinueOccupyCity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.BaseContinueMsg info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_ContinueOccupyCity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.BaseContinueMsg info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_ContinueOccupyCity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_ContinueOccupyCity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_ContinueOccupyCity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_ContinueOccupyCity::MergeFrom(const GS2C_ContinueOccupyCity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::pb::BaseContinueMsg::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_ContinueOccupyCity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_ContinueOccupyCity::CopyFrom(const GS2C_ContinueOccupyCity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_ContinueOccupyCity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_ContinueOccupyCity::Swap(GS2C_ContinueOccupyCity* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_ContinueOccupyCity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_ContinueOccupyCity_descriptor_;
  metadata.reflection = GS2C_ContinueOccupyCity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_ContinueOccupyCityInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

GxDB_ContinueOccupyCityInfo::GxDB_ContinueOccupyCityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_ContinueOccupyCityInfo::InitAsDefaultInstance() {
}

GxDB_ContinueOccupyCityInfo::GxDB_ContinueOccupyCityInfo(const GxDB_ContinueOccupyCityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_ContinueOccupyCityInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_ContinueOccupyCityInfo::~GxDB_ContinueOccupyCityInfo() {
  SharedDtor();
}

void GxDB_ContinueOccupyCityInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_ContinueOccupyCityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_ContinueOccupyCityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_ContinueOccupyCityInfo_descriptor_;
}

const GxDB_ContinueOccupyCityInfo& GxDB_ContinueOccupyCityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fuben_2eproto();
  return *default_instance_;
}

GxDB_ContinueOccupyCityInfo* GxDB_ContinueOccupyCityInfo::default_instance_ = NULL;

GxDB_ContinueOccupyCityInfo* GxDB_ContinueOccupyCityInfo::New() const {
  return new GxDB_ContinueOccupyCityInfo;
}

void GxDB_ContinueOccupyCityInfo::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_ContinueOccupyCityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.BaseContinueMsg info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_ContinueOccupyCityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.BaseContinueMsg info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_ContinueOccupyCityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.BaseContinueMsg info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_ContinueOccupyCityInfo::ByteSize() const {
  int total_size = 0;

  // repeated .pb.BaseContinueMsg info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_ContinueOccupyCityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_ContinueOccupyCityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_ContinueOccupyCityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_ContinueOccupyCityInfo::MergeFrom(const GxDB_ContinueOccupyCityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_ContinueOccupyCityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_ContinueOccupyCityInfo::CopyFrom(const GxDB_ContinueOccupyCityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_ContinueOccupyCityInfo::IsInitialized() const {

  return true;
}

void GxDB_ContinueOccupyCityInfo::Swap(GxDB_ContinueOccupyCityInfo* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_ContinueOccupyCityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_ContinueOccupyCityInfo_descriptor_;
  metadata.reflection = GxDB_ContinueOccupyCityInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_ContinueOccupyCitySuccess::kConOccupyCitysFieldNumber;
const int GS2C_ContinueOccupyCitySuccess::kExploitValueFieldNumber;
const int GS2C_ContinueOccupyCitySuccess::kNeedToOccupyCityFieldNumber;
#endif  // !_MSC_VER

GS2C_ContinueOccupyCitySuccess::GS2C_ContinueOccupyCitySuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_ContinueOccupyCitySuccess::InitAsDefaultInstance() {
}

GS2C_ContinueOccupyCitySuccess::GS2C_ContinueOccupyCitySuccess(const GS2C_ContinueOccupyCitySuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_ContinueOccupyCitySuccess::SharedCtor() {
  _cached_size_ = 0;
  con_occupy_citys_ = 0u;
  exploit_value_ = 0u;
  need_to_occupy_city_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_ContinueOccupyCitySuccess::~GS2C_ContinueOccupyCitySuccess() {
  SharedDtor();
}

void GS2C_ContinueOccupyCitySuccess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_ContinueOccupyCitySuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_ContinueOccupyCitySuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_ContinueOccupyCitySuccess_descriptor_;
}

const GS2C_ContinueOccupyCitySuccess& GS2C_ContinueOccupyCitySuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fuben_2eproto();
  return *default_instance_;
}

GS2C_ContinueOccupyCitySuccess* GS2C_ContinueOccupyCitySuccess::default_instance_ = NULL;

GS2C_ContinueOccupyCitySuccess* GS2C_ContinueOccupyCitySuccess::New() const {
  return new GS2C_ContinueOccupyCitySuccess;
}

void GS2C_ContinueOccupyCitySuccess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    con_occupy_citys_ = 0u;
    exploit_value_ = 0u;
    need_to_occupy_city_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_ContinueOccupyCitySuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 con_occupy_citys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &con_occupy_citys_)));
          set_has_con_occupy_citys();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exploit_value;
        break;
      }

      // optional uint32 exploit_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exploit_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exploit_value_)));
          set_has_exploit_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_need_to_occupy_city;
        break;
      }

      // optional uint32 need_to_occupy_city = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_to_occupy_city:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &need_to_occupy_city_)));
          set_has_need_to_occupy_city();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_ContinueOccupyCitySuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 con_occupy_citys = 1;
  if (has_con_occupy_citys()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->con_occupy_citys(), output);
  }

  // optional uint32 exploit_value = 2;
  if (has_exploit_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exploit_value(), output);
  }

  // optional uint32 need_to_occupy_city = 3;
  if (has_need_to_occupy_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->need_to_occupy_city(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_ContinueOccupyCitySuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 con_occupy_citys = 1;
  if (has_con_occupy_citys()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->con_occupy_citys(), target);
  }

  // optional uint32 exploit_value = 2;
  if (has_exploit_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exploit_value(), target);
  }

  // optional uint32 need_to_occupy_city = 3;
  if (has_need_to_occupy_city()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->need_to_occupy_city(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_ContinueOccupyCitySuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 con_occupy_citys = 1;
    if (has_con_occupy_citys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->con_occupy_citys());
    }

    // optional uint32 exploit_value = 2;
    if (has_exploit_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exploit_value());
    }

    // optional uint32 need_to_occupy_city = 3;
    if (has_need_to_occupy_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->need_to_occupy_city());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_ContinueOccupyCitySuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_ContinueOccupyCitySuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_ContinueOccupyCitySuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_ContinueOccupyCitySuccess::MergeFrom(const GS2C_ContinueOccupyCitySuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_con_occupy_citys()) {
      set_con_occupy_citys(from.con_occupy_citys());
    }
    if (from.has_exploit_value()) {
      set_exploit_value(from.exploit_value());
    }
    if (from.has_need_to_occupy_city()) {
      set_need_to_occupy_city(from.need_to_occupy_city());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_ContinueOccupyCitySuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_ContinueOccupyCitySuccess::CopyFrom(const GS2C_ContinueOccupyCitySuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_ContinueOccupyCitySuccess::IsInitialized() const {

  return true;
}

void GS2C_ContinueOccupyCitySuccess::Swap(GS2C_ContinueOccupyCitySuccess* other) {
  if (other != this) {
    std::swap(con_occupy_citys_, other->con_occupy_citys_);
    std::swap(exploit_value_, other->exploit_value_);
    std::swap(need_to_occupy_city_, other->need_to_occupy_city_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_ContinueOccupyCitySuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_ContinueOccupyCitySuccess_descriptor_;
  metadata.reflection = GS2C_ContinueOccupyCitySuccess_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
