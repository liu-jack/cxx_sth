

#ifndef INCLUDE_CONGRATULATE_LOG_H
#define INCLUDE_CONGRATULATE_LOG_H

#include "def/TypeDef.h"

namespace pb
{
	class GxDB_CongratulateRewardLog;
	class GxDB_CongratulateInfo;
	class GS2C_Achieve_Congratulate;
	class GxDB_CongratulateBeenCongratualted;
	class C2GS_Congratulate_Accept;
	class GS2C_ListOfCurrentCanCongratulate;
}
struct CongratulateStruct
{
	uint8 is_achieve_;
	uint8 is_reward_;
	uint32 been_congratulated_count_;
	CongratulateStruct()
		:is_achieve_(0)
		,is_reward_(0)
		,been_congratulated_count_(0){}
	CongratulateStruct(uint8 is_achieve,uint8 is_reward,uint32 been_congratulated_count = 0)
		:is_achieve_(is_achieve)
		,is_reward_(is_reward)
		,been_congratulated_count_(been_congratulated_count)
	{

	}
};

struct CongratulateBeenStruct
{
	uint64 to_player_id_;
	uint32 rank_ ;
	uint32 suit_id_ ;
	uint32 congratulate_type_ ;
	uint64 active_time_;
	CongratulateBeenStruct()
		:to_player_id_(0)
		,rank_(0)
		,suit_id_(0)
		,congratulate_type_(0)
		,active_time_(0){}
	CongratulateBeenStruct(uint64 to_player_id,uint32 rank,uint32 suit_id,uint32 congratulate_type,uint64 active_time)
		:to_player_id_(to_player_id)
		,rank_(rank)
		,suit_id_(suit_id)
		,congratulate_type_(congratulate_type)
	,active_time_(active_time){}

};
typedef std::map<uint32,CongratulateBeenStruct> CongratulateBeenStructMap; ///active_time ×÷Îªkey

typedef std::map<uint32,CongratulateStruct> CongratulateStructMap;


class CongratulateLog
{
	CongratulateStructMap congratulate_struct_map_;
	CongratulateBeenStructMap congratulate_been_struct_map_;
public:
	CongratulateLog();
	bool isValidTableId(const uint32 table_id);
	bool isInvalidTableIdInBeenStructMap(const uint32 table_id );
	void SaveTo(const uint32 table_id,pb::GxDB_CongratulateInfo& msg);
	void SaveTo(const uint32 table_id,pb::C2GS_Congratulate_Accept& msg);
	void SaveTo(pb::GS2C_ListOfCurrentCanCongratulate& msg);
	void LoadFrom(const pb::C2GS_Congratulate_Accept& msg);
	void LoadFrom(const pb::GxDB_CongratulateRewardLog& msg);
	void LoadFrom(const pb::GxDB_CongratulateBeenCongratualted& msg);
	void EraseFromCongratulateBeenMap(const uint32 rank,const uint32 table_id);
	void SetAchieve(const uint32 id);
	void SetTakeReward(const uint32 id);
	void AddBeenCongratulated(const uint32 table_id);
	const CongratulateStructMap& getCongratulateStructMap() const;
	uint64 GetToPlayerId(const pb::C2GS_Congratulate_Accept& msg) const;
};



#endif