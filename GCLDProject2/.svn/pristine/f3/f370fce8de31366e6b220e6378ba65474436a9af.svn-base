// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: City.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "City.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* ExpeditionNpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpeditionNpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* callUPInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  callUPInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Struct_City_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Struct_City_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_City_All_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_City_All_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_City_Update_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_City_Update_Info_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_City_2eproto() {
  protobuf_AddDesc_City_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "City.proto");
  GOOGLE_CHECK(file != NULL);
  ExpeditionNpc_descriptor_ = file->message_type(0);
  static const int ExpeditionNpc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpeditionNpc, country_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpeditionNpc, npc_table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpeditionNpc, expeid_),
  };
  ExpeditionNpc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExpeditionNpc_descriptor_,
      ExpeditionNpc::default_instance_,
      ExpeditionNpc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpeditionNpc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpeditionNpc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExpeditionNpc));
  callUPInfo_descriptor_ = file->message_type(1);
  static const int callUPInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(callUPInfo, m_unique_callid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(callUPInfo, country_call_up_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(callUPInfo, callup_end_time_),
  };
  callUPInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      callUPInfo_descriptor_,
      callUPInfo::default_instance_,
      callUPInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(callUPInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(callUPInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(callUPInfo));
  Struct_City_Info_descriptor_ = file->message_type(2);
  static const int Struct_City_Info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_City_Info, city_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_City_Info, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_City_Info, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_City_Info, combat_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_City_Info, exnpcs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_City_Info, m_call_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_City_Info, m_monster_call_info_),
  };
  Struct_City_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Struct_City_Info_descriptor_,
      Struct_City_Info::default_instance_,
      Struct_City_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_City_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_City_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Struct_City_Info));
  GS2C_City_All_Info_descriptor_ = file->message_type(3);
  static const int GS2C_City_All_Info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_City_All_Info, city_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_City_All_Info, call_up_down_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_City_All_Info, npc_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_City_All_Info, monster_call_up_down_lst_),
  };
  GS2C_City_All_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_City_All_Info_descriptor_,
      GS2C_City_All_Info::default_instance_,
      GS2C_City_All_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_City_All_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_City_All_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_City_All_Info));
  GS2C_City_Update_Info_descriptor_ = file->message_type(4);
  static const int GS2C_City_Update_Info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_City_Update_Info, city_),
  };
  GS2C_City_Update_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_City_Update_Info_descriptor_,
      GS2C_City_Update_Info::default_instance_,
      GS2C_City_Update_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_City_Update_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_City_Update_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_City_Update_Info));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_City_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExpeditionNpc_descriptor_, &ExpeditionNpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    callUPInfo_descriptor_, &callUPInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Struct_City_Info_descriptor_, &Struct_City_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_City_All_Info_descriptor_, &GS2C_City_All_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_City_Update_Info_descriptor_, &GS2C_City_Update_Info::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_City_2eproto() {
  delete ExpeditionNpc::default_instance_;
  delete ExpeditionNpc_reflection_;
  delete callUPInfo::default_instance_;
  delete callUPInfo_reflection_;
  delete Struct_City_Info::default_instance_;
  delete Struct_City_Info_reflection_;
  delete GS2C_City_All_Info::default_instance_;
  delete GS2C_City_All_Info_reflection_;
  delete GS2C_City_Update_Info::default_instance_;
  delete GS2C_City_Update_Info_reflection_;
}

void protobuf_AddDesc_City_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_Country_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nCity.proto\022\002pb\032\rCountry.proto\"I\n\rExped"
    "itionNpc\022\022\n\ncountry_id\030\001 \001(\r\022\024\n\014npc_tabl"
    "e_id\030\002 \001(\r\022\016\n\006expeid\030\003 \001(\r\"W\n\ncallUPInfo"
    "\022\027\n\017m_unique_callid\030\001 \001(\004\022\027\n\017country_cal"
    "l_up\030\002 \001(\r\022\027\n\017callup_end_time\030\003 \001(\004\"\322\001\n\020"
    "Struct_City_Info\022\017\n\007city_id\030\001 \002(\r\022\017\n\007cou"
    "ntry\030\002 \001(\r\022\016\n\006status\030\003 \001(\r\022\027\n\017combat_gro"
    "up_id\030\004 \001(\r\022!\n\006exNpcs\030\005 \003(\0132\021.pb.Expedit"
    "ionNpc\022#\n\013m_call_info\030\006 \003(\0132\016.pb.callUPI"
    "nfo\022+\n\023m_monster_call_info\030\007 \003(\0132\016.pb.ca"
    "llUPInfo\"\261\001\n\022GS2C_City_All_Info\022&\n\010city_"
    "lst\030\001 \003(\0132\024.pb.Struct_City_Info\022\031\n\021call_"
    "up_down_list\030\002 \003(\004\0226\n\010npc_time\030\003 \003(\0132$.p"
    "b.GS2C_Notice_Country_NPC_NextTime\022 \n\030mo"
    "nster_call_up_down_lst\030\004 \003(\004\";\n\025GS2C_Cit"
    "y_Update_Info\022\"\n\004city\030\001 \002(\0132\024.pb.Struct_"
    "City_Info", 649);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "City.proto", &protobuf_RegisterTypes);
  ExpeditionNpc::default_instance_ = new ExpeditionNpc();
  callUPInfo::default_instance_ = new callUPInfo();
  Struct_City_Info::default_instance_ = new Struct_City_Info();
  GS2C_City_All_Info::default_instance_ = new GS2C_City_All_Info();
  GS2C_City_Update_Info::default_instance_ = new GS2C_City_Update_Info();
  ExpeditionNpc::default_instance_->InitAsDefaultInstance();
  callUPInfo::default_instance_->InitAsDefaultInstance();
  Struct_City_Info::default_instance_->InitAsDefaultInstance();
  GS2C_City_All_Info::default_instance_->InitAsDefaultInstance();
  GS2C_City_Update_Info::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_City_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_City_2eproto {
  StaticDescriptorInitializer_City_2eproto() {
    protobuf_AddDesc_City_2eproto();
  }
} static_descriptor_initializer_City_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ExpeditionNpc::kCountryIdFieldNumber;
const int ExpeditionNpc::kNpcTableIdFieldNumber;
const int ExpeditionNpc::kExpeidFieldNumber;
#endif  // !_MSC_VER

ExpeditionNpc::ExpeditionNpc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExpeditionNpc::InitAsDefaultInstance() {
}

ExpeditionNpc::ExpeditionNpc(const ExpeditionNpc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExpeditionNpc::SharedCtor() {
  _cached_size_ = 0;
  country_id_ = 0u;
  npc_table_id_ = 0u;
  expeid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpeditionNpc::~ExpeditionNpc() {
  SharedDtor();
}

void ExpeditionNpc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExpeditionNpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpeditionNpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpeditionNpc_descriptor_;
}

const ExpeditionNpc& ExpeditionNpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_City_2eproto();
  return *default_instance_;
}

ExpeditionNpc* ExpeditionNpc::default_instance_ = NULL;

ExpeditionNpc* ExpeditionNpc::New() const {
  return new ExpeditionNpc;
}

void ExpeditionNpc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    country_id_ = 0u;
    npc_table_id_ = 0u;
    expeid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExpeditionNpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 country_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_id_)));
          set_has_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_npc_table_id;
        break;
      }

      // optional uint32 npc_table_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npc_table_id_)));
          set_has_npc_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_expeid;
        break;
      }

      // optional uint32 expeid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expeid_)));
          set_has_expeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExpeditionNpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 country_id = 1;
  if (has_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->country_id(), output);
  }

  // optional uint32 npc_table_id = 2;
  if (has_npc_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->npc_table_id(), output);
  }

  // optional uint32 expeid = 3;
  if (has_expeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->expeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExpeditionNpc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 country_id = 1;
  if (has_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->country_id(), target);
  }

  // optional uint32 npc_table_id = 2;
  if (has_npc_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->npc_table_id(), target);
  }

  // optional uint32 expeid = 3;
  if (has_expeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->expeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExpeditionNpc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 country_id = 1;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_id());
    }

    // optional uint32 npc_table_id = 2;
    if (has_npc_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npc_table_id());
    }

    // optional uint32 expeid = 3;
    if (has_expeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpeditionNpc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExpeditionNpc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExpeditionNpc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpeditionNpc::MergeFrom(const ExpeditionNpc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country_id()) {
      set_country_id(from.country_id());
    }
    if (from.has_npc_table_id()) {
      set_npc_table_id(from.npc_table_id());
    }
    if (from.has_expeid()) {
      set_expeid(from.expeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExpeditionNpc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpeditionNpc::CopyFrom(const ExpeditionNpc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpeditionNpc::IsInitialized() const {

  return true;
}

void ExpeditionNpc::Swap(ExpeditionNpc* other) {
  if (other != this) {
    std::swap(country_id_, other->country_id_);
    std::swap(npc_table_id_, other->npc_table_id_);
    std::swap(expeid_, other->expeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExpeditionNpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpeditionNpc_descriptor_;
  metadata.reflection = ExpeditionNpc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int callUPInfo::kMUniqueCallidFieldNumber;
const int callUPInfo::kCountryCallUpFieldNumber;
const int callUPInfo::kCallupEndTimeFieldNumber;
#endif  // !_MSC_VER

callUPInfo::callUPInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void callUPInfo::InitAsDefaultInstance() {
}

callUPInfo::callUPInfo(const callUPInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void callUPInfo::SharedCtor() {
  _cached_size_ = 0;
  m_unique_callid_ = GOOGLE_ULONGLONG(0);
  country_call_up_ = 0u;
  callup_end_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

callUPInfo::~callUPInfo() {
  SharedDtor();
}

void callUPInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void callUPInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* callUPInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return callUPInfo_descriptor_;
}

const callUPInfo& callUPInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_City_2eproto();
  return *default_instance_;
}

callUPInfo* callUPInfo::default_instance_ = NULL;

callUPInfo* callUPInfo::New() const {
  return new callUPInfo;
}

void callUPInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_unique_callid_ = GOOGLE_ULONGLONG(0);
    country_call_up_ = 0u;
    callup_end_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool callUPInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 m_unique_callid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_unique_callid_)));
          set_has_m_unique_callid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_country_call_up;
        break;
      }

      // optional uint32 country_call_up = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country_call_up:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_call_up_)));
          set_has_country_call_up();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_callup_end_time;
        break;
      }

      // optional uint64 callup_end_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_callup_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &callup_end_time_)));
          set_has_callup_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void callUPInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 m_unique_callid = 1;
  if (has_m_unique_callid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->m_unique_callid(), output);
  }

  // optional uint32 country_call_up = 2;
  if (has_country_call_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->country_call_up(), output);
  }

  // optional uint64 callup_end_time = 3;
  if (has_callup_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->callup_end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* callUPInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 m_unique_callid = 1;
  if (has_m_unique_callid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->m_unique_callid(), target);
  }

  // optional uint32 country_call_up = 2;
  if (has_country_call_up()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->country_call_up(), target);
  }

  // optional uint64 callup_end_time = 3;
  if (has_callup_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->callup_end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int callUPInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 m_unique_callid = 1;
    if (has_m_unique_callid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->m_unique_callid());
    }

    // optional uint32 country_call_up = 2;
    if (has_country_call_up()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_call_up());
    }

    // optional uint64 callup_end_time = 3;
    if (has_callup_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->callup_end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void callUPInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const callUPInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const callUPInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void callUPInfo::MergeFrom(const callUPInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_unique_callid()) {
      set_m_unique_callid(from.m_unique_callid());
    }
    if (from.has_country_call_up()) {
      set_country_call_up(from.country_call_up());
    }
    if (from.has_callup_end_time()) {
      set_callup_end_time(from.callup_end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void callUPInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void callUPInfo::CopyFrom(const callUPInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool callUPInfo::IsInitialized() const {

  return true;
}

void callUPInfo::Swap(callUPInfo* other) {
  if (other != this) {
    std::swap(m_unique_callid_, other->m_unique_callid_);
    std::swap(country_call_up_, other->country_call_up_);
    std::swap(callup_end_time_, other->callup_end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata callUPInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = callUPInfo_descriptor_;
  metadata.reflection = callUPInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Struct_City_Info::kCityIdFieldNumber;
const int Struct_City_Info::kCountryFieldNumber;
const int Struct_City_Info::kStatusFieldNumber;
const int Struct_City_Info::kCombatGroupIdFieldNumber;
const int Struct_City_Info::kExNpcsFieldNumber;
const int Struct_City_Info::kMCallInfoFieldNumber;
const int Struct_City_Info::kMMonsterCallInfoFieldNumber;
#endif  // !_MSC_VER

Struct_City_Info::Struct_City_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Struct_City_Info::InitAsDefaultInstance() {
}

Struct_City_Info::Struct_City_Info(const Struct_City_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Struct_City_Info::SharedCtor() {
  _cached_size_ = 0;
  city_id_ = 0u;
  country_ = 0u;
  status_ = 0u;
  combat_group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Struct_City_Info::~Struct_City_Info() {
  SharedDtor();
}

void Struct_City_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Struct_City_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Struct_City_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Struct_City_Info_descriptor_;
}

const Struct_City_Info& Struct_City_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_City_2eproto();
  return *default_instance_;
}

Struct_City_Info* Struct_City_Info::default_instance_ = NULL;

Struct_City_Info* Struct_City_Info::New() const {
  return new Struct_City_Info;
}

void Struct_City_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    city_id_ = 0u;
    country_ = 0u;
    status_ = 0u;
    combat_group_id_ = 0u;
  }
  exnpcs_.Clear();
  m_call_info_.Clear();
  m_monster_call_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Struct_City_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 city_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_country;
        break;
      }

      // optional uint32 country = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional uint32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_combat_group_id;
        break;
      }

      // optional uint32 combat_group_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combat_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combat_group_id_)));
          set_has_combat_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_exNpcs;
        break;
      }

      // repeated .pb.ExpeditionNpc exNpcs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exNpcs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exnpcs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_exNpcs;
        if (input->ExpectTag(50)) goto parse_m_call_info;
        break;
      }

      // repeated .pb.callUPInfo m_call_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_call_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_call_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_call_info;
        if (input->ExpectTag(58)) goto parse_m_monster_call_info;
        break;
      }

      // repeated .pb.callUPInfo m_monster_call_info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_monster_call_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_monster_call_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_monster_call_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Struct_City_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->city_id(), output);
  }

  // optional uint32 country = 2;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->country(), output);
  }

  // optional uint32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  // optional uint32 combat_group_id = 4;
  if (has_combat_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->combat_group_id(), output);
  }

  // repeated .pb.ExpeditionNpc exNpcs = 5;
  for (int i = 0; i < this->exnpcs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->exnpcs(i), output);
  }

  // repeated .pb.callUPInfo m_call_info = 6;
  for (int i = 0; i < this->m_call_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_call_info(i), output);
  }

  // repeated .pb.callUPInfo m_monster_call_info = 7;
  for (int i = 0; i < this->m_monster_call_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->m_monster_call_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Struct_City_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->city_id(), target);
  }

  // optional uint32 country = 2;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->country(), target);
  }

  // optional uint32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }

  // optional uint32 combat_group_id = 4;
  if (has_combat_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->combat_group_id(), target);
  }

  // repeated .pb.ExpeditionNpc exNpcs = 5;
  for (int i = 0; i < this->exnpcs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->exnpcs(i), target);
  }

  // repeated .pb.callUPInfo m_call_info = 6;
  for (int i = 0; i < this->m_call_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_call_info(i), target);
  }

  // repeated .pb.callUPInfo m_monster_call_info = 7;
  for (int i = 0; i < this->m_monster_call_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->m_monster_call_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Struct_City_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 city_id = 1;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

    // optional uint32 country = 2;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country());
    }

    // optional uint32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 combat_group_id = 4;
    if (has_combat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combat_group_id());
    }

  }
  // repeated .pb.ExpeditionNpc exNpcs = 5;
  total_size += 1 * this->exnpcs_size();
  for (int i = 0; i < this->exnpcs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exnpcs(i));
  }

  // repeated .pb.callUPInfo m_call_info = 6;
  total_size += 1 * this->m_call_info_size();
  for (int i = 0; i < this->m_call_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_call_info(i));
  }

  // repeated .pb.callUPInfo m_monster_call_info = 7;
  total_size += 1 * this->m_monster_call_info_size();
  for (int i = 0; i < this->m_monster_call_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_monster_call_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Struct_City_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Struct_City_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Struct_City_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Struct_City_Info::MergeFrom(const Struct_City_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  exnpcs_.MergeFrom(from.exnpcs_);
  m_call_info_.MergeFrom(from.m_call_info_);
  m_monster_call_info_.MergeFrom(from.m_monster_call_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_combat_group_id()) {
      set_combat_group_id(from.combat_group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Struct_City_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Struct_City_Info::CopyFrom(const Struct_City_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Struct_City_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Struct_City_Info::Swap(Struct_City_Info* other) {
  if (other != this) {
    std::swap(city_id_, other->city_id_);
    std::swap(country_, other->country_);
    std::swap(status_, other->status_);
    std::swap(combat_group_id_, other->combat_group_id_);
    exnpcs_.Swap(&other->exnpcs_);
    m_call_info_.Swap(&other->m_call_info_);
    m_monster_call_info_.Swap(&other->m_monster_call_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Struct_City_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Struct_City_Info_descriptor_;
  metadata.reflection = Struct_City_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_City_All_Info::kCityLstFieldNumber;
const int GS2C_City_All_Info::kCallUpDownListFieldNumber;
const int GS2C_City_All_Info::kNpcTimeFieldNumber;
const int GS2C_City_All_Info::kMonsterCallUpDownLstFieldNumber;
#endif  // !_MSC_VER

GS2C_City_All_Info::GS2C_City_All_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_City_All_Info::InitAsDefaultInstance() {
}

GS2C_City_All_Info::GS2C_City_All_Info(const GS2C_City_All_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_City_All_Info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_City_All_Info::~GS2C_City_All_Info() {
  SharedDtor();
}

void GS2C_City_All_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_City_All_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_City_All_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_City_All_Info_descriptor_;
}

const GS2C_City_All_Info& GS2C_City_All_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_City_2eproto();
  return *default_instance_;
}

GS2C_City_All_Info* GS2C_City_All_Info::default_instance_ = NULL;

GS2C_City_All_Info* GS2C_City_All_Info::New() const {
  return new GS2C_City_All_Info;
}

void GS2C_City_All_Info::Clear() {
  city_lst_.Clear();
  call_up_down_list_.Clear();
  npc_time_.Clear();
  monster_call_up_down_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_City_All_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Struct_City_Info city_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_city_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_city_lst;
        if (input->ExpectTag(16)) goto parse_call_up_down_list;
        break;
      }

      // repeated uint64 call_up_down_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_call_up_down_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_call_up_down_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_call_up_down_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_call_up_down_list;
        if (input->ExpectTag(26)) goto parse_npc_time;
        break;
      }

      // repeated .pb.GS2C_Notice_Country_NPC_NextTime npc_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_npc_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_npc_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_npc_time;
        if (input->ExpectTag(32)) goto parse_monster_call_up_down_lst;
        break;
      }

      // repeated uint64 monster_call_up_down_lst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_call_up_down_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_monster_call_up_down_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_monster_call_up_down_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_monster_call_up_down_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_City_All_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.Struct_City_Info city_lst = 1;
  for (int i = 0; i < this->city_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->city_lst(i), output);
  }

  // repeated uint64 call_up_down_list = 2;
  for (int i = 0; i < this->call_up_down_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->call_up_down_list(i), output);
  }

  // repeated .pb.GS2C_Notice_Country_NPC_NextTime npc_time = 3;
  for (int i = 0; i < this->npc_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->npc_time(i), output);
  }

  // repeated uint64 monster_call_up_down_lst = 4;
  for (int i = 0; i < this->monster_call_up_down_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->monster_call_up_down_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_City_All_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.Struct_City_Info city_lst = 1;
  for (int i = 0; i < this->city_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->city_lst(i), target);
  }

  // repeated uint64 call_up_down_list = 2;
  for (int i = 0; i < this->call_up_down_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->call_up_down_list(i), target);
  }

  // repeated .pb.GS2C_Notice_Country_NPC_NextTime npc_time = 3;
  for (int i = 0; i < this->npc_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->npc_time(i), target);
  }

  // repeated uint64 monster_call_up_down_lst = 4;
  for (int i = 0; i < this->monster_call_up_down_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->monster_call_up_down_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_City_All_Info::ByteSize() const {
  int total_size = 0;

  // repeated .pb.Struct_City_Info city_lst = 1;
  total_size += 1 * this->city_lst_size();
  for (int i = 0; i < this->city_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->city_lst(i));
  }

  // repeated uint64 call_up_down_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->call_up_down_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->call_up_down_list(i));
    }
    total_size += 1 * this->call_up_down_list_size() + data_size;
  }

  // repeated .pb.GS2C_Notice_Country_NPC_NextTime npc_time = 3;
  total_size += 1 * this->npc_time_size();
  for (int i = 0; i < this->npc_time_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npc_time(i));
  }

  // repeated uint64 monster_call_up_down_lst = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->monster_call_up_down_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->monster_call_up_down_lst(i));
    }
    total_size += 1 * this->monster_call_up_down_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_City_All_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_City_All_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_City_All_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_City_All_Info::MergeFrom(const GS2C_City_All_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  city_lst_.MergeFrom(from.city_lst_);
  call_up_down_list_.MergeFrom(from.call_up_down_list_);
  npc_time_.MergeFrom(from.npc_time_);
  monster_call_up_down_lst_.MergeFrom(from.monster_call_up_down_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_City_All_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_City_All_Info::CopyFrom(const GS2C_City_All_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_City_All_Info::IsInitialized() const {

  for (int i = 0; i < city_lst_size(); i++) {
    if (!this->city_lst(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_City_All_Info::Swap(GS2C_City_All_Info* other) {
  if (other != this) {
    city_lst_.Swap(&other->city_lst_);
    call_up_down_list_.Swap(&other->call_up_down_list_);
    npc_time_.Swap(&other->npc_time_);
    monster_call_up_down_lst_.Swap(&other->monster_call_up_down_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_City_All_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_City_All_Info_descriptor_;
  metadata.reflection = GS2C_City_All_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_City_Update_Info::kCityFieldNumber;
#endif  // !_MSC_VER

GS2C_City_Update_Info::GS2C_City_Update_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_City_Update_Info::InitAsDefaultInstance() {
  city_ = const_cast< ::pb::Struct_City_Info*>(&::pb::Struct_City_Info::default_instance());
}

GS2C_City_Update_Info::GS2C_City_Update_Info(const GS2C_City_Update_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_City_Update_Info::SharedCtor() {
  _cached_size_ = 0;
  city_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_City_Update_Info::~GS2C_City_Update_Info() {
  SharedDtor();
}

void GS2C_City_Update_Info::SharedDtor() {
  if (this != default_instance_) {
    delete city_;
  }
}

void GS2C_City_Update_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_City_Update_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_City_Update_Info_descriptor_;
}

const GS2C_City_Update_Info& GS2C_City_Update_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_City_2eproto();
  return *default_instance_;
}

GS2C_City_Update_Info* GS2C_City_Update_Info::default_instance_ = NULL;

GS2C_City_Update_Info* GS2C_City_Update_Info::New() const {
  return new GS2C_City_Update_Info;
}

void GS2C_City_Update_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_city()) {
      if (city_ != NULL) city_->::pb::Struct_City_Info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_City_Update_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.Struct_City_Info city = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_city()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_City_Update_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.Struct_City_Info city = 1;
  if (has_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->city(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_City_Update_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.Struct_City_Info city = 1;
  if (has_city()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->city(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_City_Update_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.Struct_City_Info city = 1;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->city());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_City_Update_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_City_Update_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_City_Update_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_City_Update_Info::MergeFrom(const GS2C_City_Update_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city()) {
      mutable_city()->::pb::Struct_City_Info::MergeFrom(from.city());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_City_Update_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_City_Update_Info::CopyFrom(const GS2C_City_Update_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_City_Update_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_city()) {
    if (!this->city().IsInitialized()) return false;
  }
  return true;
}

void GS2C_City_Update_Info::Swap(GS2C_City_Update_Info* other) {
  if (other != this) {
    std::swap(city_, other->city_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_City_Update_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_City_Update_Info_descriptor_;
  metadata.reflection = GS2C_City_Update_Info_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
