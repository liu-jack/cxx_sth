#ifndef BuildingLogger_h__
#define BuildingLogger_h__
#include "def/TypeDef.h"
#include "BuildingDefine.h"
#include <boost/function.hpp>
#ifndef USE_PTR_HASH_MAP
#include "ptr_container/PtrMap.h"
#else
#include "ptr_container/PtrHashMap.h"
#endif // USE_PTR_HASH_MAP

#include "boost/scoped_ptr.hpp"


namespace pb
{
	class GxDB_Modules_Info;
	class GxDB_Buildings_Info;
	class GS2C_Building_State;
	class GxDB_Module;
	class GxDB_Building;
}

class PlayerValueOwner;
class ModuleLog;
class BuildingLog;
class Player;
class BuildingLogMgr
{
public:
	BuildingLogMgr();
	~BuildingLogMgr();
private:
#ifndef USE_PTR_HASH_MAP
	typedef PtrMap<uint32, ModuleLog> ModuleLogMap;
#else
	typedef PtrHashMap<uint32, ModuleLog> ModuleLogMap;
#endif // USE_PTR_HASH_MAP

public:
	void Init();
	void LoadModuleFrom(const pb::GxDB_Modules_Info& logInfo);
	void LoadBuildingFrom(const pb::GxDB_Buildings_Info& logInfo);
	void SaveModuInfoTo(pb::GxDB_Modules_Info& logInfo);
	void SaveBuildingTo(pb::GxDB_Buildings_Info& logInfo);
	void SaveModuInfoStateTo(uint32 moduleId,uint32 autoHammerCount, pb::GS2C_Building_State& logInfo);
	void SaveModuleInfo(uint32 moduleId,pb::GxDB_Module& moduldMsg);
	void SaveBuildingInfo(uint32 buildId,pb::GxDB_Building& buildMsg);
	uint32 GetLvUpTime(uint32 moduleId, uint32 buildId);		//获得升级所需时间
	uint32 BuildLvUp( uint32 moduleId, uint32 buildId );		//子建筑升级
	uint32 GetBuildCurLv(uint32 moduleId, uint32 buildId );		//子建筑当前等级
	uint32 GetBuildCurLv(uint32 buildId );						//子建筑当前等级
	bool CanBuildingLvUp(uint32 buildId,uint32 curPlayerLv);	//子建筑能否升级
	bool CanBuildingLvUp(uint32 moduleId, uint32 buildId,uint32 curPlayerLv);//子建筑能否升级
	bool GetBuildingLvUpReq(uint32 moduleId, uint32 buildId,uint32& coinReq, uint32& woodReq);//子建筑升级需要资源
	void UpdateAutoLvUpTimes(PlayerValueOwner* pValue,uint32 moduleId);		//增加自动升级次数
	uint32 CurLvUpBuildingCount() { return m_curLvUpBuildIds.size(); }		//当前正在升级的建筑个数
	bool IsBuildingInLvUp(uint32 moduleId,uint32 buildId);				//当前子建筑是否正在升级
	bool AddLvUpBuilding(uint32 moduleId,uint32 buildId);				//添加升级子建筑
	void GetLvUpBuildingIds(PlayerValueOwner* pValue, uint32 moduleId, std::vector<uint32>& buildIds,uint32 curPlayerLv);	//获得可以升级的建筑
	bool RemoveLvUpBuilding(uint32 moduleId,uint32 buildId);	//移除升级的升级建筑列表中的建筑
	bool IsRechBuildingLvUpMaxCount();
	bool CurHasBuildingLvUp();
	void GoldHammerLvUp(boost::function<void(uint32,uint32)> f);
    uint32 GetModuleIncome(uint32 moduleId);
    uint32 GetModuleIncomeBase(uint32 moduleId);
    uint32 GetModuleIncomeLimit(uint32 moduleId);
	uint32 GetIcomeType(uint32 moduleId);
	uint32 GetCurGainBuffId( uint32 moduleId );
	bool AddCurGainBuffTime( uint32 moduleId, uint32 gainBuffId, uint32 moreTime);
	void UpdateModuleSartGainTimerTime(uint32 moduleId,uint64 time);
	void UpdateModuleGainValue(Player* player,uint32 moduleId,uint32 value);
	void UpdateGrowUpQuestInfo(uint32 moduleId,Player* player,uint32 value);
	time_t GetModuleSartGainTimerTime( uint32 moduleId);
	uint32 GetModuleGainValue( uint32 moduleId);
	void UpdateModuleRebuildState( uint32 moduleId,bool isRebuild );
	void UpdateBuildingRebuildState( uint32 moduleId, uint32 buildId, bool isRebuild );
	uint32 CurAutoLvUpModule() const { return m_curAutoLvUpBuildModule;}
	void SetCurAutoLvUpModule(uint32 moduleId);
	//zhoulunhao 已解锁建筑等级达到
	uint32 GetUnlockBuildingCurlv(uint32 ModuleId);
	uint32 GetUnlockBuildingSize(uint32 ModuleId);
	void CheckBuildingIsUnlock(Player* player,uint32 player_lv);
	bool IsBuildingUnlock(uint32 ModuleId);
protected:
	ModuleLogMap	    m_ModuleLogMap;
	ModuleLvUpInfo		m_curLvUpBuildIds;
	uint32              m_curAutoLvUpBuildModule;
};

#endif // BuildingLogger_h__
