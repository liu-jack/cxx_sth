// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommomDef.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CommomDef.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* PlayerShowData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerShowData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EMPTY_PACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EMPTY_PACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* PairValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PairValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* PairValueInt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PairValueInt_reflection_ = NULL;
const ::google::protobuf::Descriptor* PairTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PairTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* PairValueUint64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PairValueUint64_reflection_ = NULL;
const ::google::protobuf::Descriptor* PairString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PairString_reflection_ = NULL;
const ::google::protobuf::Descriptor* PairBool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PairBool_reflection_ = NULL;
const ::google::protobuf::Descriptor* Int32List_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Int32List_reflection_ = NULL;
const ::google::protobuf::Descriptor* Uint32List_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Uint32List_reflection_ = NULL;
const ::google::protobuf::Descriptor* Uint64List_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Uint64List_reflection_ = NULL;
const ::google::protobuf::Descriptor* FloatList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloatList_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectFullValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectFullValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Int32ListUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Int32ListUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* Uint64ListUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Uint64ListUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* FloatListUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloatListUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringListUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringListUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectValueUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectValueUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_LootList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_LootList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_ItemLootList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_ItemLootList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_PlayerString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_PlayerString_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_PlayerStringGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_PlayerStringGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* StReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* StRewards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StRewards_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayLvUpReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayLvUpReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Data_Operate_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_CommomDef_2eproto() {
  protobuf_AddDesc_CommomDef_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CommomDef.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerShowData_descriptor_ = file->message_type(0);
  static const int PlayerShowData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerShowData, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerShowData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerShowData, vip_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerShowData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerShowData, player_head_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerShowData, military_power_),
  };
  PlayerShowData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerShowData_descriptor_,
      PlayerShowData::default_instance_,
      PlayerShowData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerShowData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerShowData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerShowData));
  EMPTY_PACK_descriptor_ = file->message_type(1);
  static const int EMPTY_PACK_offsets_[1] = {
  };
  EMPTY_PACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EMPTY_PACK_descriptor_,
      EMPTY_PACK::default_instance_,
      EMPTY_PACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EMPTY_PACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EMPTY_PACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EMPTY_PACK));
  PairValue_descriptor_ = file->message_type(2);
  static const int PairValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairValue, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairValue, second_),
  };
  PairValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PairValue_descriptor_,
      PairValue::default_instance_,
      PairValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PairValue));
  PairValueInt_descriptor_ = file->message_type(3);
  static const int PairValueInt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairValueInt, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairValueInt, second_),
  };
  PairValueInt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PairValueInt_descriptor_,
      PairValueInt::default_instance_,
      PairValueInt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairValueInt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairValueInt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PairValueInt));
  PairTime_descriptor_ = file->message_type(4);
  static const int PairTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairTime, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairTime, second_),
  };
  PairTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PairTime_descriptor_,
      PairTime::default_instance_,
      PairTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PairTime));
  PairValueUint64_descriptor_ = file->message_type(5);
  static const int PairValueUint64_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairValueUint64, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairValueUint64, second_),
  };
  PairValueUint64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PairValueUint64_descriptor_,
      PairValueUint64::default_instance_,
      PairValueUint64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairValueUint64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairValueUint64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PairValueUint64));
  PairString_descriptor_ = file->message_type(6);
  static const int PairString_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairString, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairString, second_),
  };
  PairString_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PairString_descriptor_,
      PairString::default_instance_,
      PairString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairString, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairString, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PairString));
  PairBool_descriptor_ = file->message_type(7);
  static const int PairBool_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairBool, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairBool, second_),
  };
  PairBool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PairBool_descriptor_,
      PairBool::default_instance_,
      PairBool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairBool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairBool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PairBool));
  Int32List_descriptor_ = file->message_type(8);
  static const int Int32List_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int32List, values_),
  };
  Int32List_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Int32List_descriptor_,
      Int32List::default_instance_,
      Int32List_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int32List, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int32List, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Int32List));
  Uint32List_descriptor_ = file->message_type(9);
  static const int Uint32List_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uint32List, values_),
  };
  Uint32List_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Uint32List_descriptor_,
      Uint32List::default_instance_,
      Uint32List_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uint32List, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uint32List, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Uint32List));
  Uint64List_descriptor_ = file->message_type(10);
  static const int Uint64List_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uint64List, values_),
  };
  Uint64List_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Uint64List_descriptor_,
      Uint64List::default_instance_,
      Uint64List_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uint64List, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uint64List, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Uint64List));
  FloatList_descriptor_ = file->message_type(11);
  static const int FloatList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatList, values_),
  };
  FloatList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FloatList_descriptor_,
      FloatList::default_instance_,
      FloatList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FloatList));
  StringList_descriptor_ = file->message_type(12);
  static const int StringList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringList, values_),
  };
  StringList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringList_descriptor_,
      StringList::default_instance_,
      StringList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringList));
  ObjectFullValue_descriptor_ = file->message_type(13);
  static const int ObjectFullValue_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectFullValue, int32_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectFullValue, uint64_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectFullValue, float_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectFullValue, string_values_),
  };
  ObjectFullValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectFullValue_descriptor_,
      ObjectFullValue::default_instance_,
      ObjectFullValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectFullValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectFullValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectFullValue));
  Int32ListUpdate_descriptor_ = file->message_type(14);
  static const int Int32ListUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int32ListUpdate, bit_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int32ListUpdate, bit_masks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int32ListUpdate, values_),
  };
  Int32ListUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Int32ListUpdate_descriptor_,
      Int32ListUpdate::default_instance_,
      Int32ListUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int32ListUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int32ListUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Int32ListUpdate));
  Uint64ListUpdate_descriptor_ = file->message_type(15);
  static const int Uint64ListUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uint64ListUpdate, bit_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uint64ListUpdate, bit_masks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uint64ListUpdate, values_),
  };
  Uint64ListUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Uint64ListUpdate_descriptor_,
      Uint64ListUpdate::default_instance_,
      Uint64ListUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uint64ListUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uint64ListUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Uint64ListUpdate));
  FloatListUpdate_descriptor_ = file->message_type(16);
  static const int FloatListUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatListUpdate, bit_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatListUpdate, bit_masks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatListUpdate, values_),
  };
  FloatListUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FloatListUpdate_descriptor_,
      FloatListUpdate::default_instance_,
      FloatListUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatListUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatListUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FloatListUpdate));
  StringListUpdate_descriptor_ = file->message_type(17);
  static const int StringListUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringListUpdate, bit_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringListUpdate, bit_masks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringListUpdate, values_),
  };
  StringListUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringListUpdate_descriptor_,
      StringListUpdate::default_instance_,
      StringListUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringListUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringListUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringListUpdate));
  ObjectValueUpdate_descriptor_ = file->message_type(18);
  static const int ObjectValueUpdate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectValueUpdate, update_int32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectValueUpdate, update_uint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectValueUpdate, update_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectValueUpdate, update_string_),
  };
  ObjectValueUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectValueUpdate_descriptor_,
      ObjectValueUpdate::default_instance_,
      ObjectValueUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectValueUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectValueUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectValueUpdate));
  GS2C_LootList_descriptor_ = file->message_type(19);
  static const int GS2C_LootList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LootList, item_id_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LootList, curency_type_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LootList, player_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LootList, char_exp_),
  };
  GS2C_LootList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_LootList_descriptor_,
      GS2C_LootList::default_instance_,
      GS2C_LootList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LootList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LootList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_LootList));
  GS2C_ItemLootList_descriptor_ = file->message_type(20);
  static const int GS2C_ItemLootList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ItemLootList, item_id_value_),
  };
  GS2C_ItemLootList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_ItemLootList_descriptor_,
      GS2C_ItemLootList::default_instance_,
      GS2C_ItemLootList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ItemLootList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ItemLootList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_ItemLootList));
  GS2C_PlayerString_descriptor_ = file->message_type(21);
  static const int GS2C_PlayerString_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PlayerString, str_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PlayerString, str_),
  };
  GS2C_PlayerString_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_PlayerString_descriptor_,
      GS2C_PlayerString::default_instance_,
      GS2C_PlayerString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PlayerString, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PlayerString, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_PlayerString));
  GS2C_PlayerStringGroup_descriptor_ = file->message_type(22);
  static const int GS2C_PlayerStringGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PlayerStringGroup, player_strings_),
  };
  GS2C_PlayerStringGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_PlayerStringGroup_descriptor_,
      GS2C_PlayerStringGroup::default_instance_,
      GS2C_PlayerStringGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PlayerStringGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PlayerStringGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_PlayerStringGroup));
  StReward_descriptor_ = file->message_type(23);
  static const int StReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StReward, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StReward, value_),
  };
  StReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StReward_descriptor_,
      StReward::default_instance_,
      StReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StReward));
  StRewards_descriptor_ = file->message_type(24);
  static const int StRewards_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StRewards, rewards_),
  };
  StRewards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StRewards_descriptor_,
      StRewards::default_instance_,
      StRewards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StRewards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StRewards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StRewards));
  PlayLvUpReward_descriptor_ = file->message_type(25);
  static const int PlayLvUpReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayLvUpReward, rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayLvUpReward, playerlv_),
  };
  PlayLvUpReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayLvUpReward_descriptor_,
      PlayLvUpReward::default_instance_,
      PlayLvUpReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayLvUpReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayLvUpReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayLvUpReward));
  Data_Operate_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CommomDef_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerShowData_descriptor_, &PlayerShowData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EMPTY_PACK_descriptor_, &EMPTY_PACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PairValue_descriptor_, &PairValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PairValueInt_descriptor_, &PairValueInt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PairTime_descriptor_, &PairTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PairValueUint64_descriptor_, &PairValueUint64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PairString_descriptor_, &PairString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PairBool_descriptor_, &PairBool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Int32List_descriptor_, &Int32List::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Uint32List_descriptor_, &Uint32List::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Uint64List_descriptor_, &Uint64List::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FloatList_descriptor_, &FloatList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringList_descriptor_, &StringList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectFullValue_descriptor_, &ObjectFullValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Int32ListUpdate_descriptor_, &Int32ListUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Uint64ListUpdate_descriptor_, &Uint64ListUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FloatListUpdate_descriptor_, &FloatListUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringListUpdate_descriptor_, &StringListUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectValueUpdate_descriptor_, &ObjectValueUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_LootList_descriptor_, &GS2C_LootList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_ItemLootList_descriptor_, &GS2C_ItemLootList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_PlayerString_descriptor_, &GS2C_PlayerString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_PlayerStringGroup_descriptor_, &GS2C_PlayerStringGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StReward_descriptor_, &StReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StRewards_descriptor_, &StRewards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayLvUpReward_descriptor_, &PlayLvUpReward::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CommomDef_2eproto() {
  delete PlayerShowData::default_instance_;
  delete PlayerShowData_reflection_;
  delete EMPTY_PACK::default_instance_;
  delete EMPTY_PACK_reflection_;
  delete PairValue::default_instance_;
  delete PairValue_reflection_;
  delete PairValueInt::default_instance_;
  delete PairValueInt_reflection_;
  delete PairTime::default_instance_;
  delete PairTime_reflection_;
  delete PairValueUint64::default_instance_;
  delete PairValueUint64_reflection_;
  delete PairString::default_instance_;
  delete PairString_reflection_;
  delete PairBool::default_instance_;
  delete PairBool_reflection_;
  delete Int32List::default_instance_;
  delete Int32List_reflection_;
  delete Uint32List::default_instance_;
  delete Uint32List_reflection_;
  delete Uint64List::default_instance_;
  delete Uint64List_reflection_;
  delete FloatList::default_instance_;
  delete FloatList_reflection_;
  delete StringList::default_instance_;
  delete StringList_reflection_;
  delete ObjectFullValue::default_instance_;
  delete ObjectFullValue_reflection_;
  delete Int32ListUpdate::default_instance_;
  delete Int32ListUpdate_reflection_;
  delete Uint64ListUpdate::default_instance_;
  delete Uint64ListUpdate_reflection_;
  delete FloatListUpdate::default_instance_;
  delete FloatListUpdate_reflection_;
  delete StringListUpdate::default_instance_;
  delete StringListUpdate_reflection_;
  delete ObjectValueUpdate::default_instance_;
  delete ObjectValueUpdate_reflection_;
  delete GS2C_LootList::default_instance_;
  delete GS2C_LootList_reflection_;
  delete GS2C_ItemLootList::default_instance_;
  delete GS2C_ItemLootList_reflection_;
  delete GS2C_PlayerString::default_instance_;
  delete GS2C_PlayerString_reflection_;
  delete GS2C_PlayerStringGroup::default_instance_;
  delete GS2C_PlayerStringGroup_reflection_;
  delete StReward::default_instance_;
  delete StReward_reflection_;
  delete StRewards::default_instance_;
  delete StRewards_reflection_;
  delete PlayLvUpReward::default_instance_;
  delete PlayLvUpReward_reflection_;
}

void protobuf_AddDesc_CommomDef_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017CommomDef.proto\022\002pb\"\200\001\n\016PlayerShowData"
    "\022\021\n\tplayer_id\030\001 \001(\004\022\r\n\005level\030\002 \001(\r\022\016\n\006vi"
    "p_lv\030\005 \001(\r\022\014\n\004name\030\003 \001(\t\022\026\n\016player_head_"
    "id\030\004 \001(\004\022\026\n\016military_power\030\006 \001(\r\"\014\n\nEMPT"
    "Y_PACK\"*\n\tPairValue\022\r\n\005first\030\001 \001(\r\022\016\n\006se"
    "cond\030\002 \001(\r\"-\n\014PairValueInt\022\r\n\005first\030\001 \001("
    "\005\022\016\n\006second\030\002 \001(\005\")\n\010PairTime\022\r\n\005first\030\001"
    " \001(\r\022\016\n\006second\030\002 \001(\004\"0\n\017PairValueUint64\022"
    "\r\n\005first\030\001 \001(\004\022\016\n\006second\030\002 \001(\004\"+\n\nPairSt"
    "ring\022\r\n\005first\030\001 \001(\t\022\016\n\006second\030\002 \001(\t\")\n\010P"
    "airBool\022\r\n\005first\030\001 \001(\r\022\016\n\006second\030\002 \001(\010\"\033"
    "\n\tInt32List\022\016\n\006values\030\001 \003(\005\"\034\n\nUint32Lis"
    "t\022\016\n\006values\030\001 \003(\r\"\034\n\nUint64List\022\016\n\006value"
    "s\030\001 \003(\004\"\033\n\tFloatList\022\016\n\006values\030\001 \003(\002\"\034\n\n"
    "StringList\022\016\n\006values\030\001 \003(\t\"\251\001\n\017ObjectFul"
    "lValue\022#\n\014int32_values\030\001 \001(\0132\r.pb.Int32L"
    "ist\022%\n\ruint64_values\030\002 \001(\0132\016.pb.Uint64Li"
    "st\022#\n\014float_values\030\003 \001(\0132\r.pb.FloatList\022"
    "%\n\rstring_values\030\004 \001(\0132\016.pb.StringList\"G"
    "\n\017Int32ListUpdate\022\021\n\tbit_count\030\001 \002(\r\022\021\n\t"
    "bit_masks\030\002 \003(\r\022\016\n\006values\030\003 \003(\005\"H\n\020Uint6"
    "4ListUpdate\022\021\n\tbit_count\030\001 \001(\r\022\021\n\tbit_ma"
    "sks\030\002 \003(\r\022\016\n\006values\030\003 \003(\004\"G\n\017FloatListUp"
    "date\022\021\n\tbit_count\030\001 \001(\r\022\021\n\tbit_masks\030\002 \003"
    "(\r\022\016\n\006values\030\003 \003(\002\"H\n\020StringListUpdate\022\021"
    "\n\tbit_count\030\001 \001(\r\022\021\n\tbit_masks\030\002 \003(\r\022\016\n\006"
    "values\030\003 \003(\t\"\303\001\n\021ObjectValueUpdate\022)\n\014up"
    "date_int32\030\001 \001(\0132\023.pb.Int32ListUpdate\022+\n"
    "\rupdate_uint64\030\002 \001(\0132\024.pb.Uint64ListUpda"
    "te\022)\n\014update_float\030\003 \001(\0132\023.pb.FloatListU"
    "pdate\022+\n\rupdate_string\030\004 \001(\0132\024.pb.String"
    "ListUpdate\"\206\001\n\rGS2C_LootList\022$\n\ritem_id_"
    "count\030\001 \003(\0132\r.pb.PairValue\022)\n\022curency_ty"
    "pe_count\030\002 \003(\0132\r.pb.PairValue\022\022\n\nplayer_"
    "exp\030\003 \001(\r\022\020\n\010char_exp\030\004 \001(\r\"9\n\021GS2C_Item"
    "LootList\022$\n\ritem_id_value\030\001 \003(\0132\r.pb.Pai"
    "rValue\"2\n\021GS2C_PlayerString\022\020\n\010str_type\030"
    "\001 \002(\r\022\013\n\003str\030\002 \002(\t\"G\n\026GS2C_PlayerStringG"
    "roup\022-\n\016player_strings\030\001 \003(\0132\025.pb.GS2C_P"
    "layerString\"\'\n\010StReward\022\014\n\004type\030\001 \002(\r\022\r\n"
    "\005value\030\002 \002(\r\"*\n\tStRewards\022\035\n\007rewards\030\001 \003"
    "(\0132\014.pb.StReward\"A\n\016PlayLvUpReward\022\035\n\007re"
    "wards\030\001 \003(\0132\014.pb.StReward\022\020\n\010playerLv\030\002 "
    "\002(\r*>\n\014Data_Operate\022\017\n\013DATA_UPDATE\020\001\022\017\n\013"
    "DATA_INSERT\020\002\022\014\n\010DATA_DEL\020\003", 1787);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CommomDef.proto", &protobuf_RegisterTypes);
  PlayerShowData::default_instance_ = new PlayerShowData();
  EMPTY_PACK::default_instance_ = new EMPTY_PACK();
  PairValue::default_instance_ = new PairValue();
  PairValueInt::default_instance_ = new PairValueInt();
  PairTime::default_instance_ = new PairTime();
  PairValueUint64::default_instance_ = new PairValueUint64();
  PairString::default_instance_ = new PairString();
  PairBool::default_instance_ = new PairBool();
  Int32List::default_instance_ = new Int32List();
  Uint32List::default_instance_ = new Uint32List();
  Uint64List::default_instance_ = new Uint64List();
  FloatList::default_instance_ = new FloatList();
  StringList::default_instance_ = new StringList();
  ObjectFullValue::default_instance_ = new ObjectFullValue();
  Int32ListUpdate::default_instance_ = new Int32ListUpdate();
  Uint64ListUpdate::default_instance_ = new Uint64ListUpdate();
  FloatListUpdate::default_instance_ = new FloatListUpdate();
  StringListUpdate::default_instance_ = new StringListUpdate();
  ObjectValueUpdate::default_instance_ = new ObjectValueUpdate();
  GS2C_LootList::default_instance_ = new GS2C_LootList();
  GS2C_ItemLootList::default_instance_ = new GS2C_ItemLootList();
  GS2C_PlayerString::default_instance_ = new GS2C_PlayerString();
  GS2C_PlayerStringGroup::default_instance_ = new GS2C_PlayerStringGroup();
  StReward::default_instance_ = new StReward();
  StRewards::default_instance_ = new StRewards();
  PlayLvUpReward::default_instance_ = new PlayLvUpReward();
  PlayerShowData::default_instance_->InitAsDefaultInstance();
  EMPTY_PACK::default_instance_->InitAsDefaultInstance();
  PairValue::default_instance_->InitAsDefaultInstance();
  PairValueInt::default_instance_->InitAsDefaultInstance();
  PairTime::default_instance_->InitAsDefaultInstance();
  PairValueUint64::default_instance_->InitAsDefaultInstance();
  PairString::default_instance_->InitAsDefaultInstance();
  PairBool::default_instance_->InitAsDefaultInstance();
  Int32List::default_instance_->InitAsDefaultInstance();
  Uint32List::default_instance_->InitAsDefaultInstance();
  Uint64List::default_instance_->InitAsDefaultInstance();
  FloatList::default_instance_->InitAsDefaultInstance();
  StringList::default_instance_->InitAsDefaultInstance();
  ObjectFullValue::default_instance_->InitAsDefaultInstance();
  Int32ListUpdate::default_instance_->InitAsDefaultInstance();
  Uint64ListUpdate::default_instance_->InitAsDefaultInstance();
  FloatListUpdate::default_instance_->InitAsDefaultInstance();
  StringListUpdate::default_instance_->InitAsDefaultInstance();
  ObjectValueUpdate::default_instance_->InitAsDefaultInstance();
  GS2C_LootList::default_instance_->InitAsDefaultInstance();
  GS2C_ItemLootList::default_instance_->InitAsDefaultInstance();
  GS2C_PlayerString::default_instance_->InitAsDefaultInstance();
  GS2C_PlayerStringGroup::default_instance_->InitAsDefaultInstance();
  StReward::default_instance_->InitAsDefaultInstance();
  StRewards::default_instance_->InitAsDefaultInstance();
  PlayLvUpReward::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CommomDef_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CommomDef_2eproto {
  StaticDescriptorInitializer_CommomDef_2eproto() {
    protobuf_AddDesc_CommomDef_2eproto();
  }
} static_descriptor_initializer_CommomDef_2eproto_;
const ::google::protobuf::EnumDescriptor* Data_Operate_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Data_Operate_descriptor_;
}
bool Data_Operate_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerShowData::kPlayerIdFieldNumber;
const int PlayerShowData::kLevelFieldNumber;
const int PlayerShowData::kVipLvFieldNumber;
const int PlayerShowData::kNameFieldNumber;
const int PlayerShowData::kPlayerHeadIdFieldNumber;
const int PlayerShowData::kMilitaryPowerFieldNumber;
#endif  // !_MSC_VER

PlayerShowData::PlayerShowData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerShowData::InitAsDefaultInstance() {
}

PlayerShowData::PlayerShowData(const PlayerShowData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerShowData::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  vip_lv_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_head_id_ = GOOGLE_ULONGLONG(0);
  military_power_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerShowData::~PlayerShowData() {
  SharedDtor();
}

void PlayerShowData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PlayerShowData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerShowData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerShowData_descriptor_;
}

const PlayerShowData& PlayerShowData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommomDef_2eproto();
  return *default_instance_;
}

PlayerShowData* PlayerShowData::default_instance_ = NULL;

PlayerShowData* PlayerShowData::New() const {
  return new PlayerShowData;
}

void PlayerShowData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    level_ = 0u;
    vip_lv_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    player_head_id_ = GOOGLE_ULONGLONG(0);
    military_power_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerShowData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_player_head_id;
        break;
      }

      // optional uint64 player_head_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_head_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_head_id_)));
          set_has_player_head_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vip_lv;
        break;
      }

      // optional uint32 vip_lv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_lv_)));
          set_has_vip_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_military_power;
        break;
      }

      // optional uint32 military_power = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_military_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &military_power_)));
          set_has_military_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerShowData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional uint64 player_head_id = 4;
  if (has_player_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->player_head_id(), output);
  }

  // optional uint32 vip_lv = 5;
  if (has_vip_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->vip_lv(), output);
  }

  // optional uint32 military_power = 6;
  if (has_military_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->military_power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerShowData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint64 player_head_id = 4;
  if (has_player_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->player_head_id(), target);
  }

  // optional uint32 vip_lv = 5;
  if (has_vip_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->vip_lv(), target);
  }

  // optional uint32 military_power = 6;
  if (has_military_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->military_power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerShowData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 vip_lv = 5;
    if (has_vip_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_lv());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 player_head_id = 4;
    if (has_player_head_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_head_id());
    }

    // optional uint32 military_power = 6;
    if (has_military_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->military_power());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerShowData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerShowData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerShowData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerShowData::MergeFrom(const PlayerShowData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_vip_lv()) {
      set_vip_lv(from.vip_lv());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_player_head_id()) {
      set_player_head_id(from.player_head_id());
    }
    if (from.has_military_power()) {
      set_military_power(from.military_power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerShowData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerShowData::CopyFrom(const PlayerShowData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerShowData::IsInitialized() const {

  return true;
}

void PlayerShowData::Swap(PlayerShowData* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(level_, other->level_);
    std::swap(vip_lv_, other->vip_lv_);
    std::swap(name_, other->name_);
    std::swap(player_head_id_, other->player_head_id_);
    std::swap(military_power_, other->military_power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerShowData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerShowData_descriptor_;
  metadata.reflection = PlayerShowData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EMPTY_PACK::EMPTY_PACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EMPTY_PACK::InitAsDefaultInstance() {
}

EMPTY_PACK::EMPTY_PACK(const EMPTY_PACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EMPTY_PACK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EMPTY_PACK::~EMPTY_PACK() {
  SharedDtor();
}

void EMPTY_PACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EMPTY_PACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EMPTY_PACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMPTY_PACK_descriptor_;
}

const EMPTY_PACK& EMPTY_PACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommomDef_2eproto();
  return *default_instance_;
}

EMPTY_PACK* EMPTY_PACK::default_instance_ = NULL;

EMPTY_PACK* EMPTY_PACK::New() const {
  return new EMPTY_PACK;
}

void EMPTY_PACK::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EMPTY_PACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EMPTY_PACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EMPTY_PACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EMPTY_PACK::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EMPTY_PACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EMPTY_PACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EMPTY_PACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EMPTY_PACK::MergeFrom(const EMPTY_PACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EMPTY_PACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EMPTY_PACK::CopyFrom(const EMPTY_PACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EMPTY_PACK::IsInitialized() const {

  return true;
}

void EMPTY_PACK::Swap(EMPTY_PACK* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EMPTY_PACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EMPTY_PACK_descriptor_;
  metadata.reflection = EMPTY_PACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PairValue::kFirstFieldNumber;
const int PairValue::kSecondFieldNumber;
#endif  // !_MSC_VER

PairValue::PairValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PairValue::InitAsDefaultInstance() {
}

PairValue::PairValue(const PairValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PairValue::SharedCtor() {
  _cached_size_ = 0;
  first_ = 0u;
  second_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PairValue::~PairValue() {
  SharedDtor();
}

void PairValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PairValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PairValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PairValue_descriptor_;
}

const PairValue& PairValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommomDef_2eproto();
  return *default_instance_;
}

PairValue* PairValue::default_instance_ = NULL;

PairValue* PairValue::New() const {
  return new PairValue;
}

void PairValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    first_ = 0u;
    second_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PairValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 first = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_)));
          set_has_first();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_second;
        break;
      }

      // optional uint32 second = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &second_)));
          set_has_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PairValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 first = 1;
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->first(), output);
  }

  // optional uint32 second = 2;
  if (has_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->second(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PairValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 first = 1;
  if (has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->first(), target);
  }

  // optional uint32 second = 2;
  if (has_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->second(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PairValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 first = 1;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first());
    }

    // optional uint32 second = 2;
    if (has_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->second());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PairValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PairValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PairValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PairValue::MergeFrom(const PairValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first()) {
      set_first(from.first());
    }
    if (from.has_second()) {
      set_second(from.second());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PairValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PairValue::CopyFrom(const PairValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PairValue::IsInitialized() const {

  return true;
}

void PairValue::Swap(PairValue* other) {
  if (other != this) {
    std::swap(first_, other->first_);
    std::swap(second_, other->second_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PairValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PairValue_descriptor_;
  metadata.reflection = PairValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PairValueInt::kFirstFieldNumber;
const int PairValueInt::kSecondFieldNumber;
#endif  // !_MSC_VER

PairValueInt::PairValueInt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PairValueInt::InitAsDefaultInstance() {
}

PairValueInt::PairValueInt(const PairValueInt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PairValueInt::SharedCtor() {
  _cached_size_ = 0;
  first_ = 0;
  second_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PairValueInt::~PairValueInt() {
  SharedDtor();
}

void PairValueInt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PairValueInt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PairValueInt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PairValueInt_descriptor_;
}

const PairValueInt& PairValueInt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommomDef_2eproto();
  return *default_instance_;
}

PairValueInt* PairValueInt::default_instance_ = NULL;

PairValueInt* PairValueInt::New() const {
  return new PairValueInt;
}

void PairValueInt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    first_ = 0;
    second_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PairValueInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 first = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_)));
          set_has_first();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_second;
        break;
      }

      // optional int32 second = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_)));
          set_has_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PairValueInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 first = 1;
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->first(), output);
  }

  // optional int32 second = 2;
  if (has_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->second(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PairValueInt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 first = 1;
  if (has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->first(), target);
  }

  // optional int32 second = 2;
  if (has_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->second(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PairValueInt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 first = 1;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first());
    }

    // optional int32 second = 2;
    if (has_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->second());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PairValueInt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PairValueInt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PairValueInt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PairValueInt::MergeFrom(const PairValueInt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first()) {
      set_first(from.first());
    }
    if (from.has_second()) {
      set_second(from.second());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PairValueInt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PairValueInt::CopyFrom(const PairValueInt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PairValueInt::IsInitialized() const {

  return true;
}

void PairValueInt::Swap(PairValueInt* other) {
  if (other != this) {
    std::swap(first_, other->first_);
    std::swap(second_, other->second_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PairValueInt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PairValueInt_descriptor_;
  metadata.reflection = PairValueInt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PairTime::kFirstFieldNumber;
const int PairTime::kSecondFieldNumber;
#endif  // !_MSC_VER

PairTime::PairTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PairTime::InitAsDefaultInstance() {
}

PairTime::PairTime(const PairTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PairTime::SharedCtor() {
  _cached_size_ = 0;
  first_ = 0u;
  second_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PairTime::~PairTime() {
  SharedDtor();
}

void PairTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PairTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PairTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PairTime_descriptor_;
}

const PairTime& PairTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommomDef_2eproto();
  return *default_instance_;
}

PairTime* PairTime::default_instance_ = NULL;

PairTime* PairTime::New() const {
  return new PairTime;
}

void PairTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    first_ = 0u;
    second_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PairTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 first = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_)));
          set_has_first();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_second;
        break;
      }

      // optional uint64 second = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &second_)));
          set_has_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PairTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 first = 1;
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->first(), output);
  }

  // optional uint64 second = 2;
  if (has_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->second(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PairTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 first = 1;
  if (has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->first(), target);
  }

  // optional uint64 second = 2;
  if (has_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->second(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PairTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 first = 1;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first());
    }

    // optional uint64 second = 2;
    if (has_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->second());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PairTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PairTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PairTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PairTime::MergeFrom(const PairTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first()) {
      set_first(from.first());
    }
    if (from.has_second()) {
      set_second(from.second());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PairTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PairTime::CopyFrom(const PairTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PairTime::IsInitialized() const {

  return true;
}

void PairTime::Swap(PairTime* other) {
  if (other != this) {
    std::swap(first_, other->first_);
    std::swap(second_, other->second_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PairTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PairTime_descriptor_;
  metadata.reflection = PairTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PairValueUint64::kFirstFieldNumber;
const int PairValueUint64::kSecondFieldNumber;
#endif  // !_MSC_VER

PairValueUint64::PairValueUint64()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PairValueUint64::InitAsDefaultInstance() {
}

PairValueUint64::PairValueUint64(const PairValueUint64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PairValueUint64::SharedCtor() {
  _cached_size_ = 0;
  first_ = GOOGLE_ULONGLONG(0);
  second_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PairValueUint64::~PairValueUint64() {
  SharedDtor();
}

void PairValueUint64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PairValueUint64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PairValueUint64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PairValueUint64_descriptor_;
}

const PairValueUint64& PairValueUint64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommomDef_2eproto();
  return *default_instance_;
}

PairValueUint64* PairValueUint64::default_instance_ = NULL;

PairValueUint64* PairValueUint64::New() const {
  return new PairValueUint64;
}

void PairValueUint64::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    first_ = GOOGLE_ULONGLONG(0);
    second_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PairValueUint64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 first = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &first_)));
          set_has_first();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_second;
        break;
      }

      // optional uint64 second = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &second_)));
          set_has_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PairValueUint64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 first = 1;
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->first(), output);
  }

  // optional uint64 second = 2;
  if (has_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->second(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PairValueUint64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 first = 1;
  if (has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->first(), target);
  }

  // optional uint64 second = 2;
  if (has_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->second(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PairValueUint64::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 first = 1;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->first());
    }

    // optional uint64 second = 2;
    if (has_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->second());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PairValueUint64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PairValueUint64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PairValueUint64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PairValueUint64::MergeFrom(const PairValueUint64& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first()) {
      set_first(from.first());
    }
    if (from.has_second()) {
      set_second(from.second());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PairValueUint64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PairValueUint64::CopyFrom(const PairValueUint64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PairValueUint64::IsInitialized() const {

  return true;
}

void PairValueUint64::Swap(PairValueUint64* other) {
  if (other != this) {
    std::swap(first_, other->first_);
    std::swap(second_, other->second_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PairValueUint64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PairValueUint64_descriptor_;
  metadata.reflection = PairValueUint64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PairString::kFirstFieldNumber;
const int PairString::kSecondFieldNumber;
#endif  // !_MSC_VER

PairString::PairString()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PairString::InitAsDefaultInstance() {
}

PairString::PairString(const PairString& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PairString::SharedCtor() {
  _cached_size_ = 0;
  first_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  second_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PairString::~PairString() {
  SharedDtor();
}

void PairString::SharedDtor() {
  if (first_ != &::google::protobuf::internal::kEmptyString) {
    delete first_;
  }
  if (second_ != &::google::protobuf::internal::kEmptyString) {
    delete second_;
  }
  if (this != default_instance_) {
  }
}

void PairString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PairString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PairString_descriptor_;
}

const PairString& PairString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommomDef_2eproto();
  return *default_instance_;
}

PairString* PairString::default_instance_ = NULL;

PairString* PairString::New() const {
  return new PairString;
}

void PairString::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_first()) {
      if (first_ != &::google::protobuf::internal::kEmptyString) {
        first_->clear();
      }
    }
    if (has_second()) {
      if (second_ != &::google::protobuf::internal::kEmptyString) {
        second_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PairString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string first = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_first()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->first().data(), this->first().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_second;
        break;
      }

      // optional string second = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_second:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_second()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->second().data(), this->second().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PairString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string first = 1;
  if (has_first()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->first().data(), this->first().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->first(), output);
  }

  // optional string second = 2;
  if (has_second()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->second().data(), this->second().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->second(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PairString::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string first = 1;
  if (has_first()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->first().data(), this->first().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->first(), target);
  }

  // optional string second = 2;
  if (has_second()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->second().data(), this->second().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->second(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PairString::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string first = 1;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->first());
    }

    // optional string second = 2;
    if (has_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->second());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PairString::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PairString* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PairString*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PairString::MergeFrom(const PairString& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first()) {
      set_first(from.first());
    }
    if (from.has_second()) {
      set_second(from.second());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PairString::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PairString::CopyFrom(const PairString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PairString::IsInitialized() const {

  return true;
}

void PairString::Swap(PairString* other) {
  if (other != this) {
    std::swap(first_, other->first_);
    std::swap(second_, other->second_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PairString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PairString_descriptor_;
  metadata.reflection = PairString_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PairBool::kFirstFieldNumber;
const int PairBool::kSecondFieldNumber;
#endif  // !_MSC_VER

PairBool::PairBool()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PairBool::InitAsDefaultInstance() {
}

PairBool::PairBool(const PairBool& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PairBool::SharedCtor() {
  _cached_size_ = 0;
  first_ = 0u;
  second_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PairBool::~PairBool() {
  SharedDtor();
}

void PairBool::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PairBool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PairBool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PairBool_descriptor_;
}

const PairBool& PairBool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommomDef_2eproto();
  return *default_instance_;
}

PairBool* PairBool::default_instance_ = NULL;

PairBool* PairBool::New() const {
  return new PairBool;
}

void PairBool::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    first_ = 0u;
    second_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PairBool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 first = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_)));
          set_has_first();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_second;
        break;
      }

      // optional bool second = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &second_)));
          set_has_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PairBool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 first = 1;
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->first(), output);
  }

  // optional bool second = 2;
  if (has_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->second(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PairBool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 first = 1;
  if (has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->first(), target);
  }

  // optional bool second = 2;
  if (has_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->second(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PairBool::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 first = 1;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first());
    }

    // optional bool second = 2;
    if (has_second()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PairBool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PairBool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PairBool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PairBool::MergeFrom(const PairBool& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first()) {
      set_first(from.first());
    }
    if (from.has_second()) {
      set_second(from.second());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PairBool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PairBool::CopyFrom(const PairBool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PairBool::IsInitialized() const {

  return true;
}

void PairBool::Swap(PairBool* other) {
  if (other != this) {
    std::swap(first_, other->first_);
    std::swap(second_, other->second_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PairBool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PairBool_descriptor_;
  metadata.reflection = PairBool_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Int32List::kValuesFieldNumber;
#endif  // !_MSC_VER

Int32List::Int32List()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Int32List::InitAsDefaultInstance() {
}

Int32List::Int32List(const Int32List& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Int32List::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Int32List::~Int32List() {
  SharedDtor();
}

void Int32List::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Int32List::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Int32List::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Int32List_descriptor_;
}

const Int32List& Int32List::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommomDef_2eproto();
  return *default_instance_;
}

Int32List* Int32List::default_instance_ = NULL;

Int32List* Int32List::New() const {
  return new Int32List;
}

void Int32List::Clear() {
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Int32List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 values = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Int32List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Int32List::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Int32List::ByteSize() const {
  int total_size = 0;

  // repeated int32 values = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->values(i));
    }
    total_size += 1 * this->values_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Int32List::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Int32List* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Int32List*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Int32List::MergeFrom(const Int32List& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Int32List::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Int32List::CopyFrom(const Int32List& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int32List::IsInitialized() const {

  return true;
}

void Int32List::Swap(Int32List* other) {
  if (other != this) {
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Int32List::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Int32List_descriptor_;
  metadata.reflection = Int32List_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Uint32List::kValuesFieldNumber;
#endif  // !_MSC_VER

Uint32List::Uint32List()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Uint32List::InitAsDefaultInstance() {
}

Uint32List::Uint32List(const Uint32List& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Uint32List::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Uint32List::~Uint32List() {
  SharedDtor();
}

void Uint32List::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Uint32List::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Uint32List::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Uint32List_descriptor_;
}

const Uint32List& Uint32List::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommomDef_2eproto();
  return *default_instance_;
}

Uint32List* Uint32List::default_instance_ = NULL;

Uint32List* Uint32List::New() const {
  return new Uint32List;
}

void Uint32List::Clear() {
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Uint32List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 values = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Uint32List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Uint32List::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Uint32List::ByteSize() const {
  int total_size = 0;

  // repeated uint32 values = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->values(i));
    }
    total_size += 1 * this->values_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Uint32List::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Uint32List* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Uint32List*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Uint32List::MergeFrom(const Uint32List& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Uint32List::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uint32List::CopyFrom(const Uint32List& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uint32List::IsInitialized() const {

  return true;
}

void Uint32List::Swap(Uint32List* other) {
  if (other != this) {
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Uint32List::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Uint32List_descriptor_;
  metadata.reflection = Uint32List_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Uint64List::kValuesFieldNumber;
#endif  // !_MSC_VER

Uint64List::Uint64List()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Uint64List::InitAsDefaultInstance() {
}

Uint64List::Uint64List(const Uint64List& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Uint64List::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Uint64List::~Uint64List() {
  SharedDtor();
}

void Uint64List::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Uint64List::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Uint64List::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Uint64List_descriptor_;
}

const Uint64List& Uint64List::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommomDef_2eproto();
  return *default_instance_;
}

Uint64List* Uint64List::default_instance_ = NULL;

Uint64List* Uint64List::New() const {
  return new Uint64List;
}

void Uint64List::Clear() {
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Uint64List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 values = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Uint64List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Uint64List::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Uint64List::ByteSize() const {
  int total_size = 0;

  // repeated uint64 values = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->values(i));
    }
    total_size += 1 * this->values_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Uint64List::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Uint64List* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Uint64List*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Uint64List::MergeFrom(const Uint64List& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Uint64List::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uint64List::CopyFrom(const Uint64List& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uint64List::IsInitialized() const {

  return true;
}

void Uint64List::Swap(Uint64List* other) {
  if (other != this) {
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Uint64List::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Uint64List_descriptor_;
  metadata.reflection = Uint64List_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FloatList::kValuesFieldNumber;
#endif  // !_MSC_VER

FloatList::FloatList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FloatList::InitAsDefaultInstance() {
}

FloatList::FloatList(const FloatList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FloatList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloatList::~FloatList() {
  SharedDtor();
}

void FloatList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FloatList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloatList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloatList_descriptor_;
}

const FloatList& FloatList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommomDef_2eproto();
  return *default_instance_;
}

FloatList* FloatList::default_instance_ = NULL;

FloatList* FloatList::New() const {
  return new FloatList;
}

void FloatList::Clear() {
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FloatList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float values = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(13)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FloatList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FloatList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FloatList::ByteSize() const {
  int total_size = 0;

  // repeated float values = 1;
  {
    int data_size = 0;
    data_size = 4 * this->values_size();
    total_size += 1 * this->values_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloatList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FloatList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FloatList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FloatList::MergeFrom(const FloatList& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FloatList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatList::CopyFrom(const FloatList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatList::IsInitialized() const {

  return true;
}

void FloatList::Swap(FloatList* other) {
  if (other != this) {
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FloatList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloatList_descriptor_;
  metadata.reflection = FloatList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StringList::kValuesFieldNumber;
#endif  // !_MSC_VER

StringList::StringList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StringList::InitAsDefaultInstance() {
}

StringList::StringList(const StringList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StringList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringList::~StringList() {
  SharedDtor();
}

void StringList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StringList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringList_descriptor_;
}

const StringList& StringList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommomDef_2eproto();
  return *default_instance_;
}

StringList* StringList::default_instance_ = NULL;

StringList* StringList::New() const {
  return new StringList;
}

void StringList::Clear() {
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string values = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->values(this->values_size() - 1).data(),
            this->values(this->values_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string values = 1;
  for (int i = 0; i < this->values_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->values(i).data(), this->values(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StringList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->values(i).data(), this->values(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StringList::ByteSize() const {
  int total_size = 0;

  // repeated string values = 1;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringList::MergeFrom(const StringList& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringList::CopyFrom(const StringList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringList::IsInitialized() const {

  return true;
}

void StringList::Swap(StringList* other) {
  if (other != this) {
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StringList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringList_descriptor_;
  metadata.reflection = StringList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectFullValue::kInt32ValuesFieldNumber;
const int ObjectFullValue::kUint64ValuesFieldNumber;
const int ObjectFullValue::kFloatValuesFieldNumber;
const int ObjectFullValue::kStringValuesFieldNumber;
#endif  // !_MSC_VER

ObjectFullValue::ObjectFullValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectFullValue::InitAsDefaultInstance() {
  int32_values_ = const_cast< ::pb::Int32List*>(&::pb::Int32List::default_instance());
  uint64_values_ = const_cast< ::pb::Uint64List*>(&::pb::Uint64List::default_instance());
  float_values_ = const_cast< ::pb::FloatList*>(&::pb::FloatList::default_instance());
  string_values_ = const_cast< ::pb::StringList*>(&::pb::StringList::default_instance());
}

ObjectFullValue::ObjectFullValue(const ObjectFullValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectFullValue::SharedCtor() {
  _cached_size_ = 0;
  int32_values_ = NULL;
  uint64_values_ = NULL;
  float_values_ = NULL;
  string_values_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectFullValue::~ObjectFullValue() {
  SharedDtor();
}

void ObjectFullValue::SharedDtor() {
  if (this != default_instance_) {
    delete int32_values_;
    delete uint64_values_;
    delete float_values_;
    delete string_values_;
  }
}

void ObjectFullValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectFullValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectFullValue_descriptor_;
}

const ObjectFullValue& ObjectFullValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommomDef_2eproto();
  return *default_instance_;
}

ObjectFullValue* ObjectFullValue::default_instance_ = NULL;

ObjectFullValue* ObjectFullValue::New() const {
  return new ObjectFullValue;
}

void ObjectFullValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_int32_values()) {
      if (int32_values_ != NULL) int32_values_->::pb::Int32List::Clear();
    }
    if (has_uint64_values()) {
      if (uint64_values_ != NULL) uint64_values_->::pb::Uint64List::Clear();
    }
    if (has_float_values()) {
      if (float_values_ != NULL) float_values_->::pb::FloatList::Clear();
    }
    if (has_string_values()) {
      if (string_values_ != NULL) string_values_->::pb::StringList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectFullValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.Int32List int32_values = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_int32_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uint64_values;
        break;
      }

      // optional .pb.Uint64List uint64_values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uint64_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uint64_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_float_values;
        break;
      }

      // optional .pb.FloatList float_values = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_float_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_float_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_string_values;
        break;
      }

      // optional .pb.StringList string_values = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_string_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectFullValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.Int32List int32_values = 1;
  if (has_int32_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->int32_values(), output);
  }

  // optional .pb.Uint64List uint64_values = 2;
  if (has_uint64_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->uint64_values(), output);
  }

  // optional .pb.FloatList float_values = 3;
  if (has_float_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->float_values(), output);
  }

  // optional .pb.StringList string_values = 4;
  if (has_string_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->string_values(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectFullValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.Int32List int32_values = 1;
  if (has_int32_values()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->int32_values(), target);
  }

  // optional .pb.Uint64List uint64_values = 2;
  if (has_uint64_values()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->uint64_values(), target);
  }

  // optional .pb.FloatList float_values = 3;
  if (has_float_values()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->float_values(), target);
  }

  // optional .pb.StringList string_values = 4;
  if (has_string_values()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->string_values(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectFullValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.Int32List int32_values = 1;
    if (has_int32_values()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->int32_values());
    }

    // optional .pb.Uint64List uint64_values = 2;
    if (has_uint64_values()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uint64_values());
    }

    // optional .pb.FloatList float_values = 3;
    if (has_float_values()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->float_values());
    }

    // optional .pb.StringList string_values = 4;
    if (has_string_values()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->string_values());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectFullValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectFullValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectFullValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectFullValue::MergeFrom(const ObjectFullValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_int32_values()) {
      mutable_int32_values()->::pb::Int32List::MergeFrom(from.int32_values());
    }
    if (from.has_uint64_values()) {
      mutable_uint64_values()->::pb::Uint64List::MergeFrom(from.uint64_values());
    }
    if (from.has_float_values()) {
      mutable_float_values()->::pb::FloatList::MergeFrom(from.float_values());
    }
    if (from.has_string_values()) {
      mutable_string_values()->::pb::StringList::MergeFrom(from.string_values());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectFullValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectFullValue::CopyFrom(const ObjectFullValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectFullValue::IsInitialized() const {

  return true;
}

void ObjectFullValue::Swap(ObjectFullValue* other) {
  if (other != this) {
    std::swap(int32_values_, other->int32_values_);
    std::swap(uint64_values_, other->uint64_values_);
    std::swap(float_values_, other->float_values_);
    std::swap(string_values_, other->string_values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectFullValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectFullValue_descriptor_;
  metadata.reflection = ObjectFullValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Int32ListUpdate::kBitCountFieldNumber;
const int Int32ListUpdate::kBitMasksFieldNumber;
const int Int32ListUpdate::kValuesFieldNumber;
#endif  // !_MSC_VER

Int32ListUpdate::Int32ListUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Int32ListUpdate::InitAsDefaultInstance() {
}

Int32ListUpdate::Int32ListUpdate(const Int32ListUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Int32ListUpdate::SharedCtor() {
  _cached_size_ = 0;
  bit_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Int32ListUpdate::~Int32ListUpdate() {
  SharedDtor();
}

void Int32ListUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Int32ListUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Int32ListUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Int32ListUpdate_descriptor_;
}

const Int32ListUpdate& Int32ListUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommomDef_2eproto();
  return *default_instance_;
}

Int32ListUpdate* Int32ListUpdate::default_instance_ = NULL;

Int32ListUpdate* Int32ListUpdate::New() const {
  return new Int32ListUpdate;
}

void Int32ListUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bit_count_ = 0u;
  }
  bit_masks_.Clear();
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Int32ListUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 bit_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bit_count_)));
          set_has_bit_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bit_masks;
        break;
      }

      // repeated uint32 bit_masks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bit_masks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_bit_masks())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bit_masks())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bit_masks;
        if (input->ExpectTag(24)) goto parse_values;
        break;
      }

      // repeated int32 values = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Int32ListUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 bit_count = 1;
  if (has_bit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bit_count(), output);
  }

  // repeated uint32 bit_masks = 2;
  for (int i = 0; i < this->bit_masks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->bit_masks(i), output);
  }

  // repeated int32 values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Int32ListUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 bit_count = 1;
  if (has_bit_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bit_count(), target);
  }

  // repeated uint32 bit_masks = 2;
  for (int i = 0; i < this->bit_masks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->bit_masks(i), target);
  }

  // repeated int32 values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Int32ListUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 bit_count = 1;
    if (has_bit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bit_count());
    }

  }
  // repeated uint32 bit_masks = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->bit_masks_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->bit_masks(i));
    }
    total_size += 1 * this->bit_masks_size() + data_size;
  }

  // repeated int32 values = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->values(i));
    }
    total_size += 1 * this->values_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Int32ListUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Int32ListUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Int32ListUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Int32ListUpdate::MergeFrom(const Int32ListUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  bit_masks_.MergeFrom(from.bit_masks_);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bit_count()) {
      set_bit_count(from.bit_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Int32ListUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Int32ListUpdate::CopyFrom(const Int32ListUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int32ListUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Int32ListUpdate::Swap(Int32ListUpdate* other) {
  if (other != this) {
    std::swap(bit_count_, other->bit_count_);
    bit_masks_.Swap(&other->bit_masks_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Int32ListUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Int32ListUpdate_descriptor_;
  metadata.reflection = Int32ListUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Uint64ListUpdate::kBitCountFieldNumber;
const int Uint64ListUpdate::kBitMasksFieldNumber;
const int Uint64ListUpdate::kValuesFieldNumber;
#endif  // !_MSC_VER

Uint64ListUpdate::Uint64ListUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Uint64ListUpdate::InitAsDefaultInstance() {
}

Uint64ListUpdate::Uint64ListUpdate(const Uint64ListUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Uint64ListUpdate::SharedCtor() {
  _cached_size_ = 0;
  bit_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Uint64ListUpdate::~Uint64ListUpdate() {
  SharedDtor();
}

void Uint64ListUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Uint64ListUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Uint64ListUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Uint64ListUpdate_descriptor_;
}

const Uint64ListUpdate& Uint64ListUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommomDef_2eproto();
  return *default_instance_;
}

Uint64ListUpdate* Uint64ListUpdate::default_instance_ = NULL;

Uint64ListUpdate* Uint64ListUpdate::New() const {
  return new Uint64ListUpdate;
}

void Uint64ListUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bit_count_ = 0u;
  }
  bit_masks_.Clear();
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Uint64ListUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bit_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bit_count_)));
          set_has_bit_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bit_masks;
        break;
      }

      // repeated uint32 bit_masks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bit_masks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_bit_masks())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bit_masks())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bit_masks;
        if (input->ExpectTag(24)) goto parse_values;
        break;
      }

      // repeated uint64 values = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Uint64ListUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bit_count = 1;
  if (has_bit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bit_count(), output);
  }

  // repeated uint32 bit_masks = 2;
  for (int i = 0; i < this->bit_masks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->bit_masks(i), output);
  }

  // repeated uint64 values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Uint64ListUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bit_count = 1;
  if (has_bit_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bit_count(), target);
  }

  // repeated uint32 bit_masks = 2;
  for (int i = 0; i < this->bit_masks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->bit_masks(i), target);
  }

  // repeated uint64 values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Uint64ListUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bit_count = 1;
    if (has_bit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bit_count());
    }

  }
  // repeated uint32 bit_masks = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->bit_masks_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->bit_masks(i));
    }
    total_size += 1 * this->bit_masks_size() + data_size;
  }

  // repeated uint64 values = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->values(i));
    }
    total_size += 1 * this->values_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Uint64ListUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Uint64ListUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Uint64ListUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Uint64ListUpdate::MergeFrom(const Uint64ListUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  bit_masks_.MergeFrom(from.bit_masks_);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bit_count()) {
      set_bit_count(from.bit_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Uint64ListUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uint64ListUpdate::CopyFrom(const Uint64ListUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uint64ListUpdate::IsInitialized() const {

  return true;
}

void Uint64ListUpdate::Swap(Uint64ListUpdate* other) {
  if (other != this) {
    std::swap(bit_count_, other->bit_count_);
    bit_masks_.Swap(&other->bit_masks_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Uint64ListUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Uint64ListUpdate_descriptor_;
  metadata.reflection = Uint64ListUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FloatListUpdate::kBitCountFieldNumber;
const int FloatListUpdate::kBitMasksFieldNumber;
const int FloatListUpdate::kValuesFieldNumber;
#endif  // !_MSC_VER

FloatListUpdate::FloatListUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FloatListUpdate::InitAsDefaultInstance() {
}

FloatListUpdate::FloatListUpdate(const FloatListUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FloatListUpdate::SharedCtor() {
  _cached_size_ = 0;
  bit_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloatListUpdate::~FloatListUpdate() {
  SharedDtor();
}

void FloatListUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FloatListUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloatListUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloatListUpdate_descriptor_;
}

const FloatListUpdate& FloatListUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommomDef_2eproto();
  return *default_instance_;
}

FloatListUpdate* FloatListUpdate::default_instance_ = NULL;

FloatListUpdate* FloatListUpdate::New() const {
  return new FloatListUpdate;
}

void FloatListUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bit_count_ = 0u;
  }
  bit_masks_.Clear();
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FloatListUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bit_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bit_count_)));
          set_has_bit_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bit_masks;
        break;
      }

      // repeated uint32 bit_masks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bit_masks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_bit_masks())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bit_masks())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bit_masks;
        if (input->ExpectTag(29)) goto parse_values;
        break;
      }

      // repeated float values = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FloatListUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bit_count = 1;
  if (has_bit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bit_count(), output);
  }

  // repeated uint32 bit_masks = 2;
  for (int i = 0; i < this->bit_masks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->bit_masks(i), output);
  }

  // repeated float values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FloatListUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bit_count = 1;
  if (has_bit_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bit_count(), target);
  }

  // repeated uint32 bit_masks = 2;
  for (int i = 0; i < this->bit_masks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->bit_masks(i), target);
  }

  // repeated float values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FloatListUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bit_count = 1;
    if (has_bit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bit_count());
    }

  }
  // repeated uint32 bit_masks = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->bit_masks_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->bit_masks(i));
    }
    total_size += 1 * this->bit_masks_size() + data_size;
  }

  // repeated float values = 3;
  {
    int data_size = 0;
    data_size = 4 * this->values_size();
    total_size += 1 * this->values_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloatListUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FloatListUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FloatListUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FloatListUpdate::MergeFrom(const FloatListUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  bit_masks_.MergeFrom(from.bit_masks_);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bit_count()) {
      set_bit_count(from.bit_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FloatListUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatListUpdate::CopyFrom(const FloatListUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatListUpdate::IsInitialized() const {

  return true;
}

void FloatListUpdate::Swap(FloatListUpdate* other) {
  if (other != this) {
    std::swap(bit_count_, other->bit_count_);
    bit_masks_.Swap(&other->bit_masks_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FloatListUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloatListUpdate_descriptor_;
  metadata.reflection = FloatListUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StringListUpdate::kBitCountFieldNumber;
const int StringListUpdate::kBitMasksFieldNumber;
const int StringListUpdate::kValuesFieldNumber;
#endif  // !_MSC_VER

StringListUpdate::StringListUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StringListUpdate::InitAsDefaultInstance() {
}

StringListUpdate::StringListUpdate(const StringListUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StringListUpdate::SharedCtor() {
  _cached_size_ = 0;
  bit_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringListUpdate::~StringListUpdate() {
  SharedDtor();
}

void StringListUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StringListUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringListUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringListUpdate_descriptor_;
}

const StringListUpdate& StringListUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommomDef_2eproto();
  return *default_instance_;
}

StringListUpdate* StringListUpdate::default_instance_ = NULL;

StringListUpdate* StringListUpdate::New() const {
  return new StringListUpdate;
}

void StringListUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bit_count_ = 0u;
  }
  bit_masks_.Clear();
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringListUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bit_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bit_count_)));
          set_has_bit_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bit_masks;
        break;
      }

      // repeated uint32 bit_masks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bit_masks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_bit_masks())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bit_masks())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bit_masks;
        if (input->ExpectTag(26)) goto parse_values;
        break;
      }

      // repeated string values = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->values(this->values_size() - 1).data(),
            this->values(this->values_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringListUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bit_count = 1;
  if (has_bit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bit_count(), output);
  }

  // repeated uint32 bit_masks = 2;
  for (int i = 0; i < this->bit_masks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->bit_masks(i), output);
  }

  // repeated string values = 3;
  for (int i = 0; i < this->values_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->values(i).data(), this->values(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StringListUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bit_count = 1;
  if (has_bit_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bit_count(), target);
  }

  // repeated uint32 bit_masks = 2;
  for (int i = 0; i < this->bit_masks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->bit_masks(i), target);
  }

  // repeated string values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->values(i).data(), this->values(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StringListUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bit_count = 1;
    if (has_bit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bit_count());
    }

  }
  // repeated uint32 bit_masks = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->bit_masks_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->bit_masks(i));
    }
    total_size += 1 * this->bit_masks_size() + data_size;
  }

  // repeated string values = 3;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringListUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringListUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringListUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringListUpdate::MergeFrom(const StringListUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  bit_masks_.MergeFrom(from.bit_masks_);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bit_count()) {
      set_bit_count(from.bit_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringListUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringListUpdate::CopyFrom(const StringListUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringListUpdate::IsInitialized() const {

  return true;
}

void StringListUpdate::Swap(StringListUpdate* other) {
  if (other != this) {
    std::swap(bit_count_, other->bit_count_);
    bit_masks_.Swap(&other->bit_masks_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StringListUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringListUpdate_descriptor_;
  metadata.reflection = StringListUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectValueUpdate::kUpdateInt32FieldNumber;
const int ObjectValueUpdate::kUpdateUint64FieldNumber;
const int ObjectValueUpdate::kUpdateFloatFieldNumber;
const int ObjectValueUpdate::kUpdateStringFieldNumber;
#endif  // !_MSC_VER

ObjectValueUpdate::ObjectValueUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectValueUpdate::InitAsDefaultInstance() {
  update_int32_ = const_cast< ::pb::Int32ListUpdate*>(&::pb::Int32ListUpdate::default_instance());
  update_uint64_ = const_cast< ::pb::Uint64ListUpdate*>(&::pb::Uint64ListUpdate::default_instance());
  update_float_ = const_cast< ::pb::FloatListUpdate*>(&::pb::FloatListUpdate::default_instance());
  update_string_ = const_cast< ::pb::StringListUpdate*>(&::pb::StringListUpdate::default_instance());
}

ObjectValueUpdate::ObjectValueUpdate(const ObjectValueUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectValueUpdate::SharedCtor() {
  _cached_size_ = 0;
  update_int32_ = NULL;
  update_uint64_ = NULL;
  update_float_ = NULL;
  update_string_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectValueUpdate::~ObjectValueUpdate() {
  SharedDtor();
}

void ObjectValueUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete update_int32_;
    delete update_uint64_;
    delete update_float_;
    delete update_string_;
  }
}

void ObjectValueUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectValueUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectValueUpdate_descriptor_;
}

const ObjectValueUpdate& ObjectValueUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommomDef_2eproto();
  return *default_instance_;
}

ObjectValueUpdate* ObjectValueUpdate::default_instance_ = NULL;

ObjectValueUpdate* ObjectValueUpdate::New() const {
  return new ObjectValueUpdate;
}

void ObjectValueUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_update_int32()) {
      if (update_int32_ != NULL) update_int32_->::pb::Int32ListUpdate::Clear();
    }
    if (has_update_uint64()) {
      if (update_uint64_ != NULL) update_uint64_->::pb::Uint64ListUpdate::Clear();
    }
    if (has_update_float()) {
      if (update_float_ != NULL) update_float_->::pb::FloatListUpdate::Clear();
    }
    if (has_update_string()) {
      if (update_string_ != NULL) update_string_->::pb::StringListUpdate::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectValueUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.Int32ListUpdate update_int32 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_int32()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_update_uint64;
        break;
      }

      // optional .pb.Uint64ListUpdate update_uint64 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_uint64:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_uint64()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_update_float;
        break;
      }

      // optional .pb.FloatListUpdate update_float = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_float:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_float()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_update_string;
        break;
      }

      // optional .pb.StringListUpdate update_string = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_string()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectValueUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.Int32ListUpdate update_int32 = 1;
  if (has_update_int32()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->update_int32(), output);
  }

  // optional .pb.Uint64ListUpdate update_uint64 = 2;
  if (has_update_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->update_uint64(), output);
  }

  // optional .pb.FloatListUpdate update_float = 3;
  if (has_update_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->update_float(), output);
  }

  // optional .pb.StringListUpdate update_string = 4;
  if (has_update_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->update_string(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectValueUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.Int32ListUpdate update_int32 = 1;
  if (has_update_int32()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->update_int32(), target);
  }

  // optional .pb.Uint64ListUpdate update_uint64 = 2;
  if (has_update_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->update_uint64(), target);
  }

  // optional .pb.FloatListUpdate update_float = 3;
  if (has_update_float()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->update_float(), target);
  }

  // optional .pb.StringListUpdate update_string = 4;
  if (has_update_string()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->update_string(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectValueUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.Int32ListUpdate update_int32 = 1;
    if (has_update_int32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_int32());
    }

    // optional .pb.Uint64ListUpdate update_uint64 = 2;
    if (has_update_uint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_uint64());
    }

    // optional .pb.FloatListUpdate update_float = 3;
    if (has_update_float()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_float());
    }

    // optional .pb.StringListUpdate update_string = 4;
    if (has_update_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_string());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectValueUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectValueUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectValueUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectValueUpdate::MergeFrom(const ObjectValueUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_update_int32()) {
      mutable_update_int32()->::pb::Int32ListUpdate::MergeFrom(from.update_int32());
    }
    if (from.has_update_uint64()) {
      mutable_update_uint64()->::pb::Uint64ListUpdate::MergeFrom(from.update_uint64());
    }
    if (from.has_update_float()) {
      mutable_update_float()->::pb::FloatListUpdate::MergeFrom(from.update_float());
    }
    if (from.has_update_string()) {
      mutable_update_string()->::pb::StringListUpdate::MergeFrom(from.update_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectValueUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectValueUpdate::CopyFrom(const ObjectValueUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectValueUpdate::IsInitialized() const {

  if (has_update_int32()) {
    if (!this->update_int32().IsInitialized()) return false;
  }
  return true;
}

void ObjectValueUpdate::Swap(ObjectValueUpdate* other) {
  if (other != this) {
    std::swap(update_int32_, other->update_int32_);
    std::swap(update_uint64_, other->update_uint64_);
    std::swap(update_float_, other->update_float_);
    std::swap(update_string_, other->update_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectValueUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectValueUpdate_descriptor_;
  metadata.reflection = ObjectValueUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_LootList::kItemIdCountFieldNumber;
const int GS2C_LootList::kCurencyTypeCountFieldNumber;
const int GS2C_LootList::kPlayerExpFieldNumber;
const int GS2C_LootList::kCharExpFieldNumber;
#endif  // !_MSC_VER

GS2C_LootList::GS2C_LootList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_LootList::InitAsDefaultInstance() {
}

GS2C_LootList::GS2C_LootList(const GS2C_LootList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_LootList::SharedCtor() {
  _cached_size_ = 0;
  player_exp_ = 0u;
  char_exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_LootList::~GS2C_LootList() {
  SharedDtor();
}

void GS2C_LootList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_LootList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_LootList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_LootList_descriptor_;
}

const GS2C_LootList& GS2C_LootList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommomDef_2eproto();
  return *default_instance_;
}

GS2C_LootList* GS2C_LootList::default_instance_ = NULL;

GS2C_LootList* GS2C_LootList::New() const {
  return new GS2C_LootList;
}

void GS2C_LootList::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    player_exp_ = 0u;
    char_exp_ = 0u;
  }
  item_id_count_.Clear();
  curency_type_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_LootList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.PairValue item_id_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_id_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_id_count()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item_id_count;
        if (input->ExpectTag(18)) goto parse_curency_type_count;
        break;
      }

      // repeated .pb.PairValue curency_type_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_curency_type_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_curency_type_count()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_curency_type_count;
        if (input->ExpectTag(24)) goto parse_player_exp;
        break;
      }

      // optional uint32 player_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_exp_)));
          set_has_player_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_char_exp;
        break;
      }

      // optional uint32 char_exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_char_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_exp_)));
          set_has_char_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_LootList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.PairValue item_id_count = 1;
  for (int i = 0; i < this->item_id_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_id_count(i), output);
  }

  // repeated .pb.PairValue curency_type_count = 2;
  for (int i = 0; i < this->curency_type_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->curency_type_count(i), output);
  }

  // optional uint32 player_exp = 3;
  if (has_player_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->player_exp(), output);
  }

  // optional uint32 char_exp = 4;
  if (has_char_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->char_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_LootList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.PairValue item_id_count = 1;
  for (int i = 0; i < this->item_id_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_id_count(i), target);
  }

  // repeated .pb.PairValue curency_type_count = 2;
  for (int i = 0; i < this->curency_type_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->curency_type_count(i), target);
  }

  // optional uint32 player_exp = 3;
  if (has_player_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->player_exp(), target);
  }

  // optional uint32 char_exp = 4;
  if (has_char_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->char_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_LootList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 player_exp = 3;
    if (has_player_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_exp());
    }

    // optional uint32 char_exp = 4;
    if (has_char_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_exp());
    }

  }
  // repeated .pb.PairValue item_id_count = 1;
  total_size += 1 * this->item_id_count_size();
  for (int i = 0; i < this->item_id_count_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_id_count(i));
  }

  // repeated .pb.PairValue curency_type_count = 2;
  total_size += 1 * this->curency_type_count_size();
  for (int i = 0; i < this->curency_type_count_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->curency_type_count(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_LootList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_LootList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_LootList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_LootList::MergeFrom(const GS2C_LootList& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_id_count_.MergeFrom(from.item_id_count_);
  curency_type_count_.MergeFrom(from.curency_type_count_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_player_exp()) {
      set_player_exp(from.player_exp());
    }
    if (from.has_char_exp()) {
      set_char_exp(from.char_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_LootList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_LootList::CopyFrom(const GS2C_LootList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_LootList::IsInitialized() const {

  return true;
}

void GS2C_LootList::Swap(GS2C_LootList* other) {
  if (other != this) {
    item_id_count_.Swap(&other->item_id_count_);
    curency_type_count_.Swap(&other->curency_type_count_);
    std::swap(player_exp_, other->player_exp_);
    std::swap(char_exp_, other->char_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_LootList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_LootList_descriptor_;
  metadata.reflection = GS2C_LootList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_ItemLootList::kItemIdValueFieldNumber;
#endif  // !_MSC_VER

GS2C_ItemLootList::GS2C_ItemLootList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_ItemLootList::InitAsDefaultInstance() {
}

GS2C_ItemLootList::GS2C_ItemLootList(const GS2C_ItemLootList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_ItemLootList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_ItemLootList::~GS2C_ItemLootList() {
  SharedDtor();
}

void GS2C_ItemLootList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_ItemLootList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_ItemLootList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_ItemLootList_descriptor_;
}

const GS2C_ItemLootList& GS2C_ItemLootList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommomDef_2eproto();
  return *default_instance_;
}

GS2C_ItemLootList* GS2C_ItemLootList::default_instance_ = NULL;

GS2C_ItemLootList* GS2C_ItemLootList::New() const {
  return new GS2C_ItemLootList;
}

void GS2C_ItemLootList::Clear() {
  item_id_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_ItemLootList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.PairValue item_id_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_id_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_id_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item_id_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_ItemLootList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.PairValue item_id_value = 1;
  for (int i = 0; i < this->item_id_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_id_value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_ItemLootList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.PairValue item_id_value = 1;
  for (int i = 0; i < this->item_id_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_id_value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_ItemLootList::ByteSize() const {
  int total_size = 0;

  // repeated .pb.PairValue item_id_value = 1;
  total_size += 1 * this->item_id_value_size();
  for (int i = 0; i < this->item_id_value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_id_value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_ItemLootList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_ItemLootList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_ItemLootList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_ItemLootList::MergeFrom(const GS2C_ItemLootList& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_id_value_.MergeFrom(from.item_id_value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_ItemLootList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_ItemLootList::CopyFrom(const GS2C_ItemLootList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_ItemLootList::IsInitialized() const {

  return true;
}

void GS2C_ItemLootList::Swap(GS2C_ItemLootList* other) {
  if (other != this) {
    item_id_value_.Swap(&other->item_id_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_ItemLootList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_ItemLootList_descriptor_;
  metadata.reflection = GS2C_ItemLootList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_PlayerString::kStrTypeFieldNumber;
const int GS2C_PlayerString::kStrFieldNumber;
#endif  // !_MSC_VER

GS2C_PlayerString::GS2C_PlayerString()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_PlayerString::InitAsDefaultInstance() {
}

GS2C_PlayerString::GS2C_PlayerString(const GS2C_PlayerString& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_PlayerString::SharedCtor() {
  _cached_size_ = 0;
  str_type_ = 0u;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_PlayerString::~GS2C_PlayerString() {
  SharedDtor();
}

void GS2C_PlayerString::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void GS2C_PlayerString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_PlayerString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_PlayerString_descriptor_;
}

const GS2C_PlayerString& GS2C_PlayerString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommomDef_2eproto();
  return *default_instance_;
}

GS2C_PlayerString* GS2C_PlayerString::default_instance_ = NULL;

GS2C_PlayerString* GS2C_PlayerString::New() const {
  return new GS2C_PlayerString;
}

void GS2C_PlayerString::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    str_type_ = 0u;
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_PlayerString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 str_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &str_type_)));
          set_has_str_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_str;
        break;
      }

      // required string str = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_PlayerString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 str_type = 1;
  if (has_str_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->str_type(), output);
  }

  // required string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_PlayerString::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 str_type = 1;
  if (has_str_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->str_type(), target);
  }

  // required string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_PlayerString::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 str_type = 1;
    if (has_str_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->str_type());
    }

    // required string str = 2;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_PlayerString::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_PlayerString* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_PlayerString*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_PlayerString::MergeFrom(const GS2C_PlayerString& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str_type()) {
      set_str_type(from.str_type());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_PlayerString::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_PlayerString::CopyFrom(const GS2C_PlayerString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_PlayerString::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GS2C_PlayerString::Swap(GS2C_PlayerString* other) {
  if (other != this) {
    std::swap(str_type_, other->str_type_);
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_PlayerString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_PlayerString_descriptor_;
  metadata.reflection = GS2C_PlayerString_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_PlayerStringGroup::kPlayerStringsFieldNumber;
#endif  // !_MSC_VER

GS2C_PlayerStringGroup::GS2C_PlayerStringGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_PlayerStringGroup::InitAsDefaultInstance() {
}

GS2C_PlayerStringGroup::GS2C_PlayerStringGroup(const GS2C_PlayerStringGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_PlayerStringGroup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_PlayerStringGroup::~GS2C_PlayerStringGroup() {
  SharedDtor();
}

void GS2C_PlayerStringGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_PlayerStringGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_PlayerStringGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_PlayerStringGroup_descriptor_;
}

const GS2C_PlayerStringGroup& GS2C_PlayerStringGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommomDef_2eproto();
  return *default_instance_;
}

GS2C_PlayerStringGroup* GS2C_PlayerStringGroup::default_instance_ = NULL;

GS2C_PlayerStringGroup* GS2C_PlayerStringGroup::New() const {
  return new GS2C_PlayerStringGroup;
}

void GS2C_PlayerStringGroup::Clear() {
  player_strings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_PlayerStringGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GS2C_PlayerString player_strings = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_strings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_strings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_player_strings;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_PlayerStringGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GS2C_PlayerString player_strings = 1;
  for (int i = 0; i < this->player_strings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_strings(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_PlayerStringGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GS2C_PlayerString player_strings = 1;
  for (int i = 0; i < this->player_strings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_strings(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_PlayerStringGroup::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GS2C_PlayerString player_strings = 1;
  total_size += 1 * this->player_strings_size();
  for (int i = 0; i < this->player_strings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_strings(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_PlayerStringGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_PlayerStringGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_PlayerStringGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_PlayerStringGroup::MergeFrom(const GS2C_PlayerStringGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_strings_.MergeFrom(from.player_strings_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_PlayerStringGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_PlayerStringGroup::CopyFrom(const GS2C_PlayerStringGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_PlayerStringGroup::IsInitialized() const {

  for (int i = 0; i < player_strings_size(); i++) {
    if (!this->player_strings(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_PlayerStringGroup::Swap(GS2C_PlayerStringGroup* other) {
  if (other != this) {
    player_strings_.Swap(&other->player_strings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_PlayerStringGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_PlayerStringGroup_descriptor_;
  metadata.reflection = GS2C_PlayerStringGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StReward::kTypeFieldNumber;
const int StReward::kValueFieldNumber;
#endif  // !_MSC_VER

StReward::StReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StReward::InitAsDefaultInstance() {
}

StReward::StReward(const StReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StReward::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StReward::~StReward() {
  SharedDtor();
}

void StReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StReward_descriptor_;
}

const StReward& StReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommomDef_2eproto();
  return *default_instance_;
}

StReward* StReward::default_instance_ = NULL;

StReward* StReward::New() const {
  return new StReward;
}

void StReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StReward::MergeFrom(const StReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StReward::CopyFrom(const StReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StReward::Swap(StReward* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StReward_descriptor_;
  metadata.reflection = StReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StRewards::kRewardsFieldNumber;
#endif  // !_MSC_VER

StRewards::StRewards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StRewards::InitAsDefaultInstance() {
}

StRewards::StRewards(const StRewards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StRewards::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StRewards::~StRewards() {
  SharedDtor();
}

void StRewards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StRewards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StRewards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StRewards_descriptor_;
}

const StRewards& StRewards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommomDef_2eproto();
  return *default_instance_;
}

StRewards* StRewards::default_instance_ = NULL;

StRewards* StRewards::New() const {
  return new StRewards;
}

void StRewards::Clear() {
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StRewards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.StReward rewards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rewards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StRewards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.StReward rewards = 1;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StRewards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.StReward rewards = 1;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StRewards::ByteSize() const {
  int total_size = 0;

  // repeated .pb.StReward rewards = 1;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StRewards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StRewards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StRewards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StRewards::MergeFrom(const StRewards& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StRewards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StRewards::CopyFrom(const StRewards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StRewards::IsInitialized() const {

  for (int i = 0; i < rewards_size(); i++) {
    if (!this->rewards(i).IsInitialized()) return false;
  }
  return true;
}

void StRewards::Swap(StRewards* other) {
  if (other != this) {
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StRewards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StRewards_descriptor_;
  metadata.reflection = StRewards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayLvUpReward::kRewardsFieldNumber;
const int PlayLvUpReward::kPlayerLvFieldNumber;
#endif  // !_MSC_VER

PlayLvUpReward::PlayLvUpReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayLvUpReward::InitAsDefaultInstance() {
}

PlayLvUpReward::PlayLvUpReward(const PlayLvUpReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayLvUpReward::SharedCtor() {
  _cached_size_ = 0;
  playerlv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayLvUpReward::~PlayLvUpReward() {
  SharedDtor();
}

void PlayLvUpReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayLvUpReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayLvUpReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayLvUpReward_descriptor_;
}

const PlayLvUpReward& PlayLvUpReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommomDef_2eproto();
  return *default_instance_;
}

PlayLvUpReward* PlayLvUpReward::default_instance_ = NULL;

PlayLvUpReward* PlayLvUpReward::New() const {
  return new PlayLvUpReward;
}

void PlayLvUpReward::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    playerlv_ = 0u;
  }
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayLvUpReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.StReward rewards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rewards;
        if (input->ExpectTag(16)) goto parse_playerLv;
        break;
      }

      // required uint32 playerLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerlv_)));
          set_has_playerlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayLvUpReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.StReward rewards = 1;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewards(i), output);
  }

  // required uint32 playerLv = 2;
  if (has_playerlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerlv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayLvUpReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.StReward rewards = 1;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewards(i), target);
  }

  // required uint32 playerLv = 2;
  if (has_playerlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerlv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayLvUpReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 playerLv = 2;
    if (has_playerlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerlv());
    }

  }
  // repeated .pb.StReward rewards = 1;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayLvUpReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayLvUpReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayLvUpReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayLvUpReward::MergeFrom(const PlayLvUpReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_playerlv()) {
      set_playerlv(from.playerlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayLvUpReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayLvUpReward::CopyFrom(const PlayLvUpReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayLvUpReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < rewards_size(); i++) {
    if (!this->rewards(i).IsInitialized()) return false;
  }
  return true;
}

void PlayLvUpReward::Swap(PlayLvUpReward* other) {
  if (other != this) {
    rewards_.Swap(&other->rewards_);
    std::swap(playerlv_, other->playerlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayLvUpReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayLvUpReward_descriptor_;
  metadata.reflection = PlayLvUpReward_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
