// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Palace.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Palace.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* OfficeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfficeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PalaceAchievementInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PalaceAchievementInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_PalaceAchievement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_PalaceAchievement_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Palace_Level_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Palace_Level_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Palace_All_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Palace_All_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Palace_Fight_New_Office_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Palace_Fight_New_Office_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Palace_Cancel_Office_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Palace_Cancel_Office_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Palace_Cancel_Office_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Palace_Cancel_Office_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Palace_Apply_Aide_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Palace_Apply_Aide_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Palace_Cancel_Aide_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Palace_Cancel_Aide_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Palace_Cancel_Apply_Aide_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Palace_Cancel_Apply_Aide_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Palace_Agree_Aide_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Palace_Agree_Aide_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Palace_Refuse_Aide_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Palace_Refuse_Aide_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Palace_Fire_Aide_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Palace_Fire_Aide_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Palace_Take_Salary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Palace_Take_Salary_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Palace_Skill_FlyTo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Palace_Skill_FlyTo_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Palace_Skill_Empty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Palace_Skill_Empty_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Palace_Skill_Confuse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Palace_Skill_Confuse_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Palace_Skill_Maze_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Palace_Skill_Maze_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Palace_Skill_Trap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Palace_Skill_Trap_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Palace_Take_Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Palace_Take_Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Palace_Take_Reward_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Palace_Take_Reward_Rsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Palace_2eproto() {
  protobuf_AddDesc_Palace_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Palace.proto");
  GOOGLE_CHECK(file != NULL);
  OfficeInfo_descriptor_ = file->message_type(0);
  static const int OfficeInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfficeInfo, country_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfficeInfo, office_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfficeInfo, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfficeInfo, aide_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfficeInfo, aide_apply_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfficeInfo, skill_use_time_),
  };
  OfficeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfficeInfo_descriptor_,
      OfficeInfo::default_instance_,
      OfficeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfficeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfficeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfficeInfo));
  PalaceAchievementInfo_descriptor_ = file->message_type(1);
  static const int PalaceAchievementInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PalaceAchievementInfo, office_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PalaceAchievementInfo, office_state_),
  };
  PalaceAchievementInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PalaceAchievementInfo_descriptor_,
      PalaceAchievementInfo::default_instance_,
      PalaceAchievementInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PalaceAchievementInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PalaceAchievementInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PalaceAchievementInfo));
  GxDB_PalaceAchievement_descriptor_ = file->message_type(2);
  static const int GxDB_PalaceAchievement_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_PalaceAchievement, info_),
  };
  GxDB_PalaceAchievement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_PalaceAchievement_descriptor_,
      GxDB_PalaceAchievement::default_instance_,
      GxDB_PalaceAchievement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_PalaceAchievement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_PalaceAchievement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_PalaceAchievement));
  GS2C_Palace_Level_Info_descriptor_ = file->message_type(3);
  static const int GS2C_Palace_Level_Info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Palace_Level_Info, info_),
  };
  GS2C_Palace_Level_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Palace_Level_Info_descriptor_,
      GS2C_Palace_Level_Info::default_instance_,
      GS2C_Palace_Level_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Palace_Level_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Palace_Level_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Palace_Level_Info));
  GS2C_Palace_All_Info_descriptor_ = file->message_type(4);
  static const int GS2C_Palace_All_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Palace_All_Info, office_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Palace_All_Info, unique_country_id_),
  };
  GS2C_Palace_All_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Palace_All_Info_descriptor_,
      GS2C_Palace_All_Info::default_instance_,
      GS2C_Palace_All_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Palace_All_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Palace_All_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Palace_All_Info));
  C2GS_Palace_Fight_New_Office_descriptor_ = file->message_type(5);
  static const int C2GS_Palace_Fight_New_Office_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Fight_New_Office, office_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Fight_New_Office, hero_id_),
  };
  C2GS_Palace_Fight_New_Office_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Palace_Fight_New_Office_descriptor_,
      C2GS_Palace_Fight_New_Office::default_instance_,
      C2GS_Palace_Fight_New_Office_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Fight_New_Office, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Fight_New_Office, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Palace_Fight_New_Office));
  C2GS_Palace_Cancel_Office_descriptor_ = file->message_type(6);
  static const int C2GS_Palace_Cancel_Office_offsets_[1] = {
  };
  C2GS_Palace_Cancel_Office_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Palace_Cancel_Office_descriptor_,
      C2GS_Palace_Cancel_Office::default_instance_,
      C2GS_Palace_Cancel_Office_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Cancel_Office, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Cancel_Office, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Palace_Cancel_Office));
  GS2C_Palace_Cancel_Office_descriptor_ = file->message_type(7);
  static const int GS2C_Palace_Cancel_Office_offsets_[1] = {
  };
  GS2C_Palace_Cancel_Office_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Palace_Cancel_Office_descriptor_,
      GS2C_Palace_Cancel_Office::default_instance_,
      GS2C_Palace_Cancel_Office_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Palace_Cancel_Office, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Palace_Cancel_Office, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Palace_Cancel_Office));
  C2GS_Palace_Apply_Aide_descriptor_ = file->message_type(8);
  static const int C2GS_Palace_Apply_Aide_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Apply_Aide, office_id_),
  };
  C2GS_Palace_Apply_Aide_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Palace_Apply_Aide_descriptor_,
      C2GS_Palace_Apply_Aide::default_instance_,
      C2GS_Palace_Apply_Aide_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Apply_Aide, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Apply_Aide, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Palace_Apply_Aide));
  C2GS_Palace_Cancel_Aide_descriptor_ = file->message_type(9);
  static const int C2GS_Palace_Cancel_Aide_offsets_[1] = {
  };
  C2GS_Palace_Cancel_Aide_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Palace_Cancel_Aide_descriptor_,
      C2GS_Palace_Cancel_Aide::default_instance_,
      C2GS_Palace_Cancel_Aide_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Cancel_Aide, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Cancel_Aide, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Palace_Cancel_Aide));
  C2GS_Palace_Cancel_Apply_Aide_descriptor_ = file->message_type(10);
  static const int C2GS_Palace_Cancel_Apply_Aide_offsets_[1] = {
  };
  C2GS_Palace_Cancel_Apply_Aide_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Palace_Cancel_Apply_Aide_descriptor_,
      C2GS_Palace_Cancel_Apply_Aide::default_instance_,
      C2GS_Palace_Cancel_Apply_Aide_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Cancel_Apply_Aide, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Cancel_Apply_Aide, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Palace_Cancel_Apply_Aide));
  C2GS_Palace_Agree_Aide_descriptor_ = file->message_type(11);
  static const int C2GS_Palace_Agree_Aide_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Agree_Aide, aide_id_),
  };
  C2GS_Palace_Agree_Aide_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Palace_Agree_Aide_descriptor_,
      C2GS_Palace_Agree_Aide::default_instance_,
      C2GS_Palace_Agree_Aide_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Agree_Aide, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Agree_Aide, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Palace_Agree_Aide));
  C2GS_Palace_Refuse_Aide_descriptor_ = file->message_type(12);
  static const int C2GS_Palace_Refuse_Aide_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Refuse_Aide, aide_id_),
  };
  C2GS_Palace_Refuse_Aide_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Palace_Refuse_Aide_descriptor_,
      C2GS_Palace_Refuse_Aide::default_instance_,
      C2GS_Palace_Refuse_Aide_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Refuse_Aide, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Refuse_Aide, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Palace_Refuse_Aide));
  C2GS_Palace_Fire_Aide_descriptor_ = file->message_type(13);
  static const int C2GS_Palace_Fire_Aide_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Fire_Aide, aide_id_),
  };
  C2GS_Palace_Fire_Aide_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Palace_Fire_Aide_descriptor_,
      C2GS_Palace_Fire_Aide::default_instance_,
      C2GS_Palace_Fire_Aide_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Fire_Aide, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Fire_Aide, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Palace_Fire_Aide));
  GS2C_Palace_Take_Salary_descriptor_ = file->message_type(14);
  static const int GS2C_Palace_Take_Salary_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Palace_Take_Salary, reward_),
  };
  GS2C_Palace_Take_Salary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Palace_Take_Salary_descriptor_,
      GS2C_Palace_Take_Salary::default_instance_,
      GS2C_Palace_Take_Salary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Palace_Take_Salary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Palace_Take_Salary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Palace_Take_Salary));
  C2GS_Palace_Skill_FlyTo_descriptor_ = file->message_type(15);
  static const int C2GS_Palace_Skill_FlyTo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Skill_FlyTo, city_id_),
  };
  C2GS_Palace_Skill_FlyTo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Palace_Skill_FlyTo_descriptor_,
      C2GS_Palace_Skill_FlyTo::default_instance_,
      C2GS_Palace_Skill_FlyTo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Skill_FlyTo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Skill_FlyTo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Palace_Skill_FlyTo));
  C2GS_Palace_Skill_Empty_descriptor_ = file->message_type(16);
  static const int C2GS_Palace_Skill_Empty_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Skill_Empty, city_id_),
  };
  C2GS_Palace_Skill_Empty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Palace_Skill_Empty_descriptor_,
      C2GS_Palace_Skill_Empty::default_instance_,
      C2GS_Palace_Skill_Empty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Skill_Empty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Skill_Empty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Palace_Skill_Empty));
  C2GS_Palace_Skill_Confuse_descriptor_ = file->message_type(17);
  static const int C2GS_Palace_Skill_Confuse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Skill_Confuse, city_id_),
  };
  C2GS_Palace_Skill_Confuse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Palace_Skill_Confuse_descriptor_,
      C2GS_Palace_Skill_Confuse::default_instance_,
      C2GS_Palace_Skill_Confuse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Skill_Confuse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Skill_Confuse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Palace_Skill_Confuse));
  C2GS_Palace_Skill_Maze_descriptor_ = file->message_type(18);
  static const int C2GS_Palace_Skill_Maze_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Skill_Maze, city_id_),
  };
  C2GS_Palace_Skill_Maze_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Palace_Skill_Maze_descriptor_,
      C2GS_Palace_Skill_Maze::default_instance_,
      C2GS_Palace_Skill_Maze_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Skill_Maze, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Skill_Maze, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Palace_Skill_Maze));
  C2GS_Palace_Skill_Trap_descriptor_ = file->message_type(19);
  static const int C2GS_Palace_Skill_Trap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Skill_Trap, city_id_),
  };
  C2GS_Palace_Skill_Trap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Palace_Skill_Trap_descriptor_,
      C2GS_Palace_Skill_Trap::default_instance_,
      C2GS_Palace_Skill_Trap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Skill_Trap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Skill_Trap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Palace_Skill_Trap));
  C2GS_Palace_Take_Reward_descriptor_ = file->message_type(20);
  static const int C2GS_Palace_Take_Reward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Take_Reward, office_id_),
  };
  C2GS_Palace_Take_Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Palace_Take_Reward_descriptor_,
      C2GS_Palace_Take_Reward::default_instance_,
      C2GS_Palace_Take_Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Take_Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Palace_Take_Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Palace_Take_Reward));
  GS2C_Palace_Take_Reward_Rsp_descriptor_ = file->message_type(21);
  static const int GS2C_Palace_Take_Reward_Rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Palace_Take_Reward_Rsp, office_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Palace_Take_Reward_Rsp, office_state_),
  };
  GS2C_Palace_Take_Reward_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Palace_Take_Reward_Rsp_descriptor_,
      GS2C_Palace_Take_Reward_Rsp::default_instance_,
      GS2C_Palace_Take_Reward_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Palace_Take_Reward_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Palace_Take_Reward_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Palace_Take_Reward_Rsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Palace_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfficeInfo_descriptor_, &OfficeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PalaceAchievementInfo_descriptor_, &PalaceAchievementInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_PalaceAchievement_descriptor_, &GxDB_PalaceAchievement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Palace_Level_Info_descriptor_, &GS2C_Palace_Level_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Palace_All_Info_descriptor_, &GS2C_Palace_All_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Palace_Fight_New_Office_descriptor_, &C2GS_Palace_Fight_New_Office::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Palace_Cancel_Office_descriptor_, &C2GS_Palace_Cancel_Office::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Palace_Cancel_Office_descriptor_, &GS2C_Palace_Cancel_Office::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Palace_Apply_Aide_descriptor_, &C2GS_Palace_Apply_Aide::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Palace_Cancel_Aide_descriptor_, &C2GS_Palace_Cancel_Aide::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Palace_Cancel_Apply_Aide_descriptor_, &C2GS_Palace_Cancel_Apply_Aide::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Palace_Agree_Aide_descriptor_, &C2GS_Palace_Agree_Aide::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Palace_Refuse_Aide_descriptor_, &C2GS_Palace_Refuse_Aide::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Palace_Fire_Aide_descriptor_, &C2GS_Palace_Fire_Aide::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Palace_Take_Salary_descriptor_, &GS2C_Palace_Take_Salary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Palace_Skill_FlyTo_descriptor_, &C2GS_Palace_Skill_FlyTo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Palace_Skill_Empty_descriptor_, &C2GS_Palace_Skill_Empty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Palace_Skill_Confuse_descriptor_, &C2GS_Palace_Skill_Confuse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Palace_Skill_Maze_descriptor_, &C2GS_Palace_Skill_Maze::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Palace_Skill_Trap_descriptor_, &C2GS_Palace_Skill_Trap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Palace_Take_Reward_descriptor_, &C2GS_Palace_Take_Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Palace_Take_Reward_Rsp_descriptor_, &GS2C_Palace_Take_Reward_Rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Palace_2eproto() {
  delete OfficeInfo::default_instance_;
  delete OfficeInfo_reflection_;
  delete PalaceAchievementInfo::default_instance_;
  delete PalaceAchievementInfo_reflection_;
  delete GxDB_PalaceAchievement::default_instance_;
  delete GxDB_PalaceAchievement_reflection_;
  delete GS2C_Palace_Level_Info::default_instance_;
  delete GS2C_Palace_Level_Info_reflection_;
  delete GS2C_Palace_All_Info::default_instance_;
  delete GS2C_Palace_All_Info_reflection_;
  delete C2GS_Palace_Fight_New_Office::default_instance_;
  delete C2GS_Palace_Fight_New_Office_reflection_;
  delete C2GS_Palace_Cancel_Office::default_instance_;
  delete C2GS_Palace_Cancel_Office_reflection_;
  delete GS2C_Palace_Cancel_Office::default_instance_;
  delete GS2C_Palace_Cancel_Office_reflection_;
  delete C2GS_Palace_Apply_Aide::default_instance_;
  delete C2GS_Palace_Apply_Aide_reflection_;
  delete C2GS_Palace_Cancel_Aide::default_instance_;
  delete C2GS_Palace_Cancel_Aide_reflection_;
  delete C2GS_Palace_Cancel_Apply_Aide::default_instance_;
  delete C2GS_Palace_Cancel_Apply_Aide_reflection_;
  delete C2GS_Palace_Agree_Aide::default_instance_;
  delete C2GS_Palace_Agree_Aide_reflection_;
  delete C2GS_Palace_Refuse_Aide::default_instance_;
  delete C2GS_Palace_Refuse_Aide_reflection_;
  delete C2GS_Palace_Fire_Aide::default_instance_;
  delete C2GS_Palace_Fire_Aide_reflection_;
  delete GS2C_Palace_Take_Salary::default_instance_;
  delete GS2C_Palace_Take_Salary_reflection_;
  delete C2GS_Palace_Skill_FlyTo::default_instance_;
  delete C2GS_Palace_Skill_FlyTo_reflection_;
  delete C2GS_Palace_Skill_Empty::default_instance_;
  delete C2GS_Palace_Skill_Empty_reflection_;
  delete C2GS_Palace_Skill_Confuse::default_instance_;
  delete C2GS_Palace_Skill_Confuse_reflection_;
  delete C2GS_Palace_Skill_Maze::default_instance_;
  delete C2GS_Palace_Skill_Maze_reflection_;
  delete C2GS_Palace_Skill_Trap::default_instance_;
  delete C2GS_Palace_Skill_Trap_reflection_;
  delete C2GS_Palace_Take_Reward::default_instance_;
  delete C2GS_Palace_Take_Reward_reflection_;
  delete GS2C_Palace_Take_Reward_Rsp::default_instance_;
  delete GS2C_Palace_Take_Reward_Rsp_reflection_;
}

void protobuf_AddDesc_Palace_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_CommomDef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Palace.proto\022\002pb\032\017CommomDef.proto\"\301\001\n\n"
    "OfficeInfo\022\022\n\ncountry_id\030\001 \002(\r\022\021\n\toffice"
    "_id\030\002 \002(\r\022\"\n\006player\030\003 \001(\0132\022.pb.PlayerSho"
    "wData\022$\n\010aide_lst\030\004 \003(\0132\022.pb.PlayerShowD"
    "ata\022*\n\016aide_apply_lst\030\005 \003(\0132\022.pb.PlayerS"
    "howData\022\026\n\016skill_use_time\030\006 \001(\004\"@\n\025Palac"
    "eAchievementInfo\022\021\n\toffice_id\030\001 \001(\r\022\024\n\014o"
    "ffice_state\030\002 \001(\r\"A\n\026GxDB_PalaceAchievem"
    "ent\022\'\n\004info\030\001 \003(\0132\031.pb.PalaceAchievement"
    "Info\"A\n\026GS2C_Palace_Level_Info\022\'\n\004info\030\001"
    " \003(\0132\031.pb.PalaceAchievementInfo\"U\n\024GS2C_"
    "Palace_All_Info\022\"\n\noffice_lst\030\001 \003(\0132\016.pb"
    ".OfficeInfo\022\031\n\021unique_country_id\030\002 \001(\r\"B"
    "\n\034C2GS_Palace_Fight_New_Office\022\021\n\toffice"
    "_id\030\001 \002(\r\022\017\n\007hero_id\030\002 \003(\r\"\033\n\031C2GS_Palac"
    "e_Cancel_Office\"\033\n\031GS2C_Palace_Cancel_Of"
    "fice\"+\n\026C2GS_Palace_Apply_Aide\022\021\n\toffice"
    "_id\030\001 \002(\r\"\031\n\027C2GS_Palace_Cancel_Aide\"\037\n\035"
    "C2GS_Palace_Cancel_Apply_Aide\")\n\026C2GS_Pa"
    "lace_Agree_Aide\022\017\n\007aide_id\030\001 \002(\004\"*\n\027C2GS"
    "_Palace_Refuse_Aide\022\017\n\007aide_id\030\001 \002(\004\"(\n\025"
    "C2GS_Palace_Fire_Aide\022\017\n\007aide_id\030\001 \002(\004\"7"
    "\n\027GS2C_Palace_Take_Salary\022\034\n\006reward\030\001 \002("
    "\0132\014.pb.StReward\"*\n\027C2GS_Palace_Skill_Fly"
    "To\022\017\n\007city_id\030\001 \002(\r\"*\n\027C2GS_Palace_Skill"
    "_Empty\022\017\n\007city_id\030\001 \002(\r\",\n\031C2GS_Palace_S"
    "kill_Confuse\022\017\n\007city_id\030\001 \002(\r\")\n\026C2GS_Pa"
    "lace_Skill_Maze\022\017\n\007city_id\030\001 \002(\r\")\n\026C2GS"
    "_Palace_Skill_Trap\022\017\n\007city_id\030\001 \002(\r\",\n\027C"
    "2GS_Palace_Take_Reward\022\021\n\toffice_id\030\001 \002("
    "\r\"F\n\033GS2C_Palace_Take_Reward_Rsp\022\021\n\toffi"
    "ce_id\030\001 \001(\r\022\024\n\014office_state\030\002 \001(\r", 1273);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Palace.proto", &protobuf_RegisterTypes);
  OfficeInfo::default_instance_ = new OfficeInfo();
  PalaceAchievementInfo::default_instance_ = new PalaceAchievementInfo();
  GxDB_PalaceAchievement::default_instance_ = new GxDB_PalaceAchievement();
  GS2C_Palace_Level_Info::default_instance_ = new GS2C_Palace_Level_Info();
  GS2C_Palace_All_Info::default_instance_ = new GS2C_Palace_All_Info();
  C2GS_Palace_Fight_New_Office::default_instance_ = new C2GS_Palace_Fight_New_Office();
  C2GS_Palace_Cancel_Office::default_instance_ = new C2GS_Palace_Cancel_Office();
  GS2C_Palace_Cancel_Office::default_instance_ = new GS2C_Palace_Cancel_Office();
  C2GS_Palace_Apply_Aide::default_instance_ = new C2GS_Palace_Apply_Aide();
  C2GS_Palace_Cancel_Aide::default_instance_ = new C2GS_Palace_Cancel_Aide();
  C2GS_Palace_Cancel_Apply_Aide::default_instance_ = new C2GS_Palace_Cancel_Apply_Aide();
  C2GS_Palace_Agree_Aide::default_instance_ = new C2GS_Palace_Agree_Aide();
  C2GS_Palace_Refuse_Aide::default_instance_ = new C2GS_Palace_Refuse_Aide();
  C2GS_Palace_Fire_Aide::default_instance_ = new C2GS_Palace_Fire_Aide();
  GS2C_Palace_Take_Salary::default_instance_ = new GS2C_Palace_Take_Salary();
  C2GS_Palace_Skill_FlyTo::default_instance_ = new C2GS_Palace_Skill_FlyTo();
  C2GS_Palace_Skill_Empty::default_instance_ = new C2GS_Palace_Skill_Empty();
  C2GS_Palace_Skill_Confuse::default_instance_ = new C2GS_Palace_Skill_Confuse();
  C2GS_Palace_Skill_Maze::default_instance_ = new C2GS_Palace_Skill_Maze();
  C2GS_Palace_Skill_Trap::default_instance_ = new C2GS_Palace_Skill_Trap();
  C2GS_Palace_Take_Reward::default_instance_ = new C2GS_Palace_Take_Reward();
  GS2C_Palace_Take_Reward_Rsp::default_instance_ = new GS2C_Palace_Take_Reward_Rsp();
  OfficeInfo::default_instance_->InitAsDefaultInstance();
  PalaceAchievementInfo::default_instance_->InitAsDefaultInstance();
  GxDB_PalaceAchievement::default_instance_->InitAsDefaultInstance();
  GS2C_Palace_Level_Info::default_instance_->InitAsDefaultInstance();
  GS2C_Palace_All_Info::default_instance_->InitAsDefaultInstance();
  C2GS_Palace_Fight_New_Office::default_instance_->InitAsDefaultInstance();
  C2GS_Palace_Cancel_Office::default_instance_->InitAsDefaultInstance();
  GS2C_Palace_Cancel_Office::default_instance_->InitAsDefaultInstance();
  C2GS_Palace_Apply_Aide::default_instance_->InitAsDefaultInstance();
  C2GS_Palace_Cancel_Aide::default_instance_->InitAsDefaultInstance();
  C2GS_Palace_Cancel_Apply_Aide::default_instance_->InitAsDefaultInstance();
  C2GS_Palace_Agree_Aide::default_instance_->InitAsDefaultInstance();
  C2GS_Palace_Refuse_Aide::default_instance_->InitAsDefaultInstance();
  C2GS_Palace_Fire_Aide::default_instance_->InitAsDefaultInstance();
  GS2C_Palace_Take_Salary::default_instance_->InitAsDefaultInstance();
  C2GS_Palace_Skill_FlyTo::default_instance_->InitAsDefaultInstance();
  C2GS_Palace_Skill_Empty::default_instance_->InitAsDefaultInstance();
  C2GS_Palace_Skill_Confuse::default_instance_->InitAsDefaultInstance();
  C2GS_Palace_Skill_Maze::default_instance_->InitAsDefaultInstance();
  C2GS_Palace_Skill_Trap::default_instance_->InitAsDefaultInstance();
  C2GS_Palace_Take_Reward::default_instance_->InitAsDefaultInstance();
  GS2C_Palace_Take_Reward_Rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Palace_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Palace_2eproto {
  StaticDescriptorInitializer_Palace_2eproto() {
    protobuf_AddDesc_Palace_2eproto();
  }
} static_descriptor_initializer_Palace_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int OfficeInfo::kCountryIdFieldNumber;
const int OfficeInfo::kOfficeIdFieldNumber;
const int OfficeInfo::kPlayerFieldNumber;
const int OfficeInfo::kAideLstFieldNumber;
const int OfficeInfo::kAideApplyLstFieldNumber;
const int OfficeInfo::kSkillUseTimeFieldNumber;
#endif  // !_MSC_VER

OfficeInfo::OfficeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OfficeInfo::InitAsDefaultInstance() {
  player_ = const_cast< ::pb::PlayerShowData*>(&::pb::PlayerShowData::default_instance());
}

OfficeInfo::OfficeInfo(const OfficeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OfficeInfo::SharedCtor() {
  _cached_size_ = 0;
  country_id_ = 0u;
  office_id_ = 0u;
  player_ = NULL;
  skill_use_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfficeInfo::~OfficeInfo() {
  SharedDtor();
}

void OfficeInfo::SharedDtor() {
  if (this != default_instance_) {
    delete player_;
  }
}

void OfficeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfficeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfficeInfo_descriptor_;
}

const OfficeInfo& OfficeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Palace_2eproto();
  return *default_instance_;
}

OfficeInfo* OfficeInfo::default_instance_ = NULL;

OfficeInfo* OfficeInfo::New() const {
  return new OfficeInfo;
}

void OfficeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    country_id_ = 0u;
    office_id_ = 0u;
    if (has_player()) {
      if (player_ != NULL) player_->::pb::PlayerShowData::Clear();
    }
    skill_use_time_ = GOOGLE_ULONGLONG(0);
  }
  aide_lst_.Clear();
  aide_apply_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfficeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 country_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_id_)));
          set_has_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_office_id;
        break;
      }

      // required uint32 office_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_office_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &office_id_)));
          set_has_office_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_player;
        break;
      }

      // optional .pb.PlayerShowData player = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_aide_lst;
        break;
      }

      // repeated .pb.PlayerShowData aide_lst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aide_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_aide_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_aide_lst;
        if (input->ExpectTag(42)) goto parse_aide_apply_lst;
        break;
      }

      // repeated .pb.PlayerShowData aide_apply_lst = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aide_apply_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_aide_apply_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_aide_apply_lst;
        if (input->ExpectTag(48)) goto parse_skill_use_time;
        break;
      }

      // optional uint64 skill_use_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_use_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_use_time_)));
          set_has_skill_use_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OfficeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 country_id = 1;
  if (has_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->country_id(), output);
  }

  // required uint32 office_id = 2;
  if (has_office_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->office_id(), output);
  }

  // optional .pb.PlayerShowData player = 3;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player(), output);
  }

  // repeated .pb.PlayerShowData aide_lst = 4;
  for (int i = 0; i < this->aide_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->aide_lst(i), output);
  }

  // repeated .pb.PlayerShowData aide_apply_lst = 5;
  for (int i = 0; i < this->aide_apply_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->aide_apply_lst(i), output);
  }

  // optional uint64 skill_use_time = 6;
  if (has_skill_use_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->skill_use_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OfficeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 country_id = 1;
  if (has_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->country_id(), target);
  }

  // required uint32 office_id = 2;
  if (has_office_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->office_id(), target);
  }

  // optional .pb.PlayerShowData player = 3;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->player(), target);
  }

  // repeated .pb.PlayerShowData aide_lst = 4;
  for (int i = 0; i < this->aide_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->aide_lst(i), target);
  }

  // repeated .pb.PlayerShowData aide_apply_lst = 5;
  for (int i = 0; i < this->aide_apply_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->aide_apply_lst(i), target);
  }

  // optional uint64 skill_use_time = 6;
  if (has_skill_use_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->skill_use_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OfficeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 country_id = 1;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_id());
    }

    // required uint32 office_id = 2;
    if (has_office_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->office_id());
    }

    // optional .pb.PlayerShowData player = 3;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player());
    }

    // optional uint64 skill_use_time = 6;
    if (has_skill_use_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skill_use_time());
    }

  }
  // repeated .pb.PlayerShowData aide_lst = 4;
  total_size += 1 * this->aide_lst_size();
  for (int i = 0; i < this->aide_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->aide_lst(i));
  }

  // repeated .pb.PlayerShowData aide_apply_lst = 5;
  total_size += 1 * this->aide_apply_lst_size();
  for (int i = 0; i < this->aide_apply_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->aide_apply_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfficeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfficeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfficeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfficeInfo::MergeFrom(const OfficeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  aide_lst_.MergeFrom(from.aide_lst_);
  aide_apply_lst_.MergeFrom(from.aide_apply_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country_id()) {
      set_country_id(from.country_id());
    }
    if (from.has_office_id()) {
      set_office_id(from.office_id());
    }
    if (from.has_player()) {
      mutable_player()->::pb::PlayerShowData::MergeFrom(from.player());
    }
    if (from.has_skill_use_time()) {
      set_skill_use_time(from.skill_use_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfficeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfficeInfo::CopyFrom(const OfficeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfficeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void OfficeInfo::Swap(OfficeInfo* other) {
  if (other != this) {
    std::swap(country_id_, other->country_id_);
    std::swap(office_id_, other->office_id_);
    std::swap(player_, other->player_);
    aide_lst_.Swap(&other->aide_lst_);
    aide_apply_lst_.Swap(&other->aide_apply_lst_);
    std::swap(skill_use_time_, other->skill_use_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfficeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfficeInfo_descriptor_;
  metadata.reflection = OfficeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PalaceAchievementInfo::kOfficeIdFieldNumber;
const int PalaceAchievementInfo::kOfficeStateFieldNumber;
#endif  // !_MSC_VER

PalaceAchievementInfo::PalaceAchievementInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PalaceAchievementInfo::InitAsDefaultInstance() {
}

PalaceAchievementInfo::PalaceAchievementInfo(const PalaceAchievementInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PalaceAchievementInfo::SharedCtor() {
  _cached_size_ = 0;
  office_id_ = 0u;
  office_state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PalaceAchievementInfo::~PalaceAchievementInfo() {
  SharedDtor();
}

void PalaceAchievementInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PalaceAchievementInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PalaceAchievementInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PalaceAchievementInfo_descriptor_;
}

const PalaceAchievementInfo& PalaceAchievementInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Palace_2eproto();
  return *default_instance_;
}

PalaceAchievementInfo* PalaceAchievementInfo::default_instance_ = NULL;

PalaceAchievementInfo* PalaceAchievementInfo::New() const {
  return new PalaceAchievementInfo;
}

void PalaceAchievementInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    office_id_ = 0u;
    office_state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PalaceAchievementInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 office_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &office_id_)));
          set_has_office_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_office_state;
        break;
      }

      // optional uint32 office_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_office_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &office_state_)));
          set_has_office_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PalaceAchievementInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 office_id = 1;
  if (has_office_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->office_id(), output);
  }

  // optional uint32 office_state = 2;
  if (has_office_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->office_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PalaceAchievementInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 office_id = 1;
  if (has_office_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->office_id(), target);
  }

  // optional uint32 office_state = 2;
  if (has_office_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->office_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PalaceAchievementInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 office_id = 1;
    if (has_office_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->office_id());
    }

    // optional uint32 office_state = 2;
    if (has_office_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->office_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PalaceAchievementInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PalaceAchievementInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PalaceAchievementInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PalaceAchievementInfo::MergeFrom(const PalaceAchievementInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_office_id()) {
      set_office_id(from.office_id());
    }
    if (from.has_office_state()) {
      set_office_state(from.office_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PalaceAchievementInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PalaceAchievementInfo::CopyFrom(const PalaceAchievementInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PalaceAchievementInfo::IsInitialized() const {

  return true;
}

void PalaceAchievementInfo::Swap(PalaceAchievementInfo* other) {
  if (other != this) {
    std::swap(office_id_, other->office_id_);
    std::swap(office_state_, other->office_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PalaceAchievementInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PalaceAchievementInfo_descriptor_;
  metadata.reflection = PalaceAchievementInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_PalaceAchievement::kInfoFieldNumber;
#endif  // !_MSC_VER

GxDB_PalaceAchievement::GxDB_PalaceAchievement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_PalaceAchievement::InitAsDefaultInstance() {
}

GxDB_PalaceAchievement::GxDB_PalaceAchievement(const GxDB_PalaceAchievement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_PalaceAchievement::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_PalaceAchievement::~GxDB_PalaceAchievement() {
  SharedDtor();
}

void GxDB_PalaceAchievement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_PalaceAchievement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_PalaceAchievement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_PalaceAchievement_descriptor_;
}

const GxDB_PalaceAchievement& GxDB_PalaceAchievement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Palace_2eproto();
  return *default_instance_;
}

GxDB_PalaceAchievement* GxDB_PalaceAchievement::default_instance_ = NULL;

GxDB_PalaceAchievement* GxDB_PalaceAchievement::New() const {
  return new GxDB_PalaceAchievement;
}

void GxDB_PalaceAchievement::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_PalaceAchievement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.PalaceAchievementInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_PalaceAchievement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.PalaceAchievementInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_PalaceAchievement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.PalaceAchievementInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_PalaceAchievement::ByteSize() const {
  int total_size = 0;

  // repeated .pb.PalaceAchievementInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_PalaceAchievement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_PalaceAchievement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_PalaceAchievement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_PalaceAchievement::MergeFrom(const GxDB_PalaceAchievement& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_PalaceAchievement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_PalaceAchievement::CopyFrom(const GxDB_PalaceAchievement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_PalaceAchievement::IsInitialized() const {

  return true;
}

void GxDB_PalaceAchievement::Swap(GxDB_PalaceAchievement* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_PalaceAchievement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_PalaceAchievement_descriptor_;
  metadata.reflection = GxDB_PalaceAchievement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Palace_Level_Info::kInfoFieldNumber;
#endif  // !_MSC_VER

GS2C_Palace_Level_Info::GS2C_Palace_Level_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Palace_Level_Info::InitAsDefaultInstance() {
}

GS2C_Palace_Level_Info::GS2C_Palace_Level_Info(const GS2C_Palace_Level_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Palace_Level_Info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Palace_Level_Info::~GS2C_Palace_Level_Info() {
  SharedDtor();
}

void GS2C_Palace_Level_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Palace_Level_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Palace_Level_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Palace_Level_Info_descriptor_;
}

const GS2C_Palace_Level_Info& GS2C_Palace_Level_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Palace_2eproto();
  return *default_instance_;
}

GS2C_Palace_Level_Info* GS2C_Palace_Level_Info::default_instance_ = NULL;

GS2C_Palace_Level_Info* GS2C_Palace_Level_Info::New() const {
  return new GS2C_Palace_Level_Info;
}

void GS2C_Palace_Level_Info::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Palace_Level_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.PalaceAchievementInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Palace_Level_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.PalaceAchievementInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Palace_Level_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.PalaceAchievementInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Palace_Level_Info::ByteSize() const {
  int total_size = 0;

  // repeated .pb.PalaceAchievementInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Palace_Level_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Palace_Level_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Palace_Level_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Palace_Level_Info::MergeFrom(const GS2C_Palace_Level_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Palace_Level_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Palace_Level_Info::CopyFrom(const GS2C_Palace_Level_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Palace_Level_Info::IsInitialized() const {

  return true;
}

void GS2C_Palace_Level_Info::Swap(GS2C_Palace_Level_Info* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Palace_Level_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Palace_Level_Info_descriptor_;
  metadata.reflection = GS2C_Palace_Level_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Palace_All_Info::kOfficeLstFieldNumber;
const int GS2C_Palace_All_Info::kUniqueCountryIdFieldNumber;
#endif  // !_MSC_VER

GS2C_Palace_All_Info::GS2C_Palace_All_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Palace_All_Info::InitAsDefaultInstance() {
}

GS2C_Palace_All_Info::GS2C_Palace_All_Info(const GS2C_Palace_All_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Palace_All_Info::SharedCtor() {
  _cached_size_ = 0;
  unique_country_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Palace_All_Info::~GS2C_Palace_All_Info() {
  SharedDtor();
}

void GS2C_Palace_All_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Palace_All_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Palace_All_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Palace_All_Info_descriptor_;
}

const GS2C_Palace_All_Info& GS2C_Palace_All_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Palace_2eproto();
  return *default_instance_;
}

GS2C_Palace_All_Info* GS2C_Palace_All_Info::default_instance_ = NULL;

GS2C_Palace_All_Info* GS2C_Palace_All_Info::New() const {
  return new GS2C_Palace_All_Info;
}

void GS2C_Palace_All_Info::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    unique_country_id_ = 0u;
  }
  office_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Palace_All_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.OfficeInfo office_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_office_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_office_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_office_lst;
        if (input->ExpectTag(16)) goto parse_unique_country_id;
        break;
      }

      // optional uint32 unique_country_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unique_country_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unique_country_id_)));
          set_has_unique_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Palace_All_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.OfficeInfo office_lst = 1;
  for (int i = 0; i < this->office_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->office_lst(i), output);
  }

  // optional uint32 unique_country_id = 2;
  if (has_unique_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unique_country_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Palace_All_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.OfficeInfo office_lst = 1;
  for (int i = 0; i < this->office_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->office_lst(i), target);
  }

  // optional uint32 unique_country_id = 2;
  if (has_unique_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unique_country_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Palace_All_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 unique_country_id = 2;
    if (has_unique_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unique_country_id());
    }

  }
  // repeated .pb.OfficeInfo office_lst = 1;
  total_size += 1 * this->office_lst_size();
  for (int i = 0; i < this->office_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->office_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Palace_All_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Palace_All_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Palace_All_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Palace_All_Info::MergeFrom(const GS2C_Palace_All_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  office_lst_.MergeFrom(from.office_lst_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_unique_country_id()) {
      set_unique_country_id(from.unique_country_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Palace_All_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Palace_All_Info::CopyFrom(const GS2C_Palace_All_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Palace_All_Info::IsInitialized() const {

  for (int i = 0; i < office_lst_size(); i++) {
    if (!this->office_lst(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Palace_All_Info::Swap(GS2C_Palace_All_Info* other) {
  if (other != this) {
    office_lst_.Swap(&other->office_lst_);
    std::swap(unique_country_id_, other->unique_country_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Palace_All_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Palace_All_Info_descriptor_;
  metadata.reflection = GS2C_Palace_All_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Palace_Fight_New_Office::kOfficeIdFieldNumber;
const int C2GS_Palace_Fight_New_Office::kHeroIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Palace_Fight_New_Office::C2GS_Palace_Fight_New_Office()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Palace_Fight_New_Office::InitAsDefaultInstance() {
}

C2GS_Palace_Fight_New_Office::C2GS_Palace_Fight_New_Office(const C2GS_Palace_Fight_New_Office& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Palace_Fight_New_Office::SharedCtor() {
  _cached_size_ = 0;
  office_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Palace_Fight_New_Office::~C2GS_Palace_Fight_New_Office() {
  SharedDtor();
}

void C2GS_Palace_Fight_New_Office::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Palace_Fight_New_Office::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Palace_Fight_New_Office::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Palace_Fight_New_Office_descriptor_;
}

const C2GS_Palace_Fight_New_Office& C2GS_Palace_Fight_New_Office::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Palace_2eproto();
  return *default_instance_;
}

C2GS_Palace_Fight_New_Office* C2GS_Palace_Fight_New_Office::default_instance_ = NULL;

C2GS_Palace_Fight_New_Office* C2GS_Palace_Fight_New_Office::New() const {
  return new C2GS_Palace_Fight_New_Office;
}

void C2GS_Palace_Fight_New_Office::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    office_id_ = 0u;
  }
  hero_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Palace_Fight_New_Office::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 office_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &office_id_)));
          set_has_office_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // repeated uint32 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_hero_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hero_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Palace_Fight_New_Office::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 office_id = 1;
  if (has_office_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->office_id(), output);
  }

  // repeated uint32 hero_id = 2;
  for (int i = 0; i < this->hero_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->hero_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Palace_Fight_New_Office::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 office_id = 1;
  if (has_office_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->office_id(), target);
  }

  // repeated uint32 hero_id = 2;
  for (int i = 0; i < this->hero_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->hero_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Palace_Fight_New_Office::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 office_id = 1;
    if (has_office_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->office_id());
    }

  }
  // repeated uint32 hero_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->hero_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hero_id(i));
    }
    total_size += 1 * this->hero_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Palace_Fight_New_Office::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Palace_Fight_New_Office* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Palace_Fight_New_Office*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Palace_Fight_New_Office::MergeFrom(const C2GS_Palace_Fight_New_Office& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_id_.MergeFrom(from.hero_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_office_id()) {
      set_office_id(from.office_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Palace_Fight_New_Office::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Palace_Fight_New_Office::CopyFrom(const C2GS_Palace_Fight_New_Office& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Palace_Fight_New_Office::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Palace_Fight_New_Office::Swap(C2GS_Palace_Fight_New_Office* other) {
  if (other != this) {
    std::swap(office_id_, other->office_id_);
    hero_id_.Swap(&other->hero_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Palace_Fight_New_Office::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Palace_Fight_New_Office_descriptor_;
  metadata.reflection = C2GS_Palace_Fight_New_Office_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_Palace_Cancel_Office::C2GS_Palace_Cancel_Office()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Palace_Cancel_Office::InitAsDefaultInstance() {
}

C2GS_Palace_Cancel_Office::C2GS_Palace_Cancel_Office(const C2GS_Palace_Cancel_Office& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Palace_Cancel_Office::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Palace_Cancel_Office::~C2GS_Palace_Cancel_Office() {
  SharedDtor();
}

void C2GS_Palace_Cancel_Office::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Palace_Cancel_Office::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Palace_Cancel_Office::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Palace_Cancel_Office_descriptor_;
}

const C2GS_Palace_Cancel_Office& C2GS_Palace_Cancel_Office::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Palace_2eproto();
  return *default_instance_;
}

C2GS_Palace_Cancel_Office* C2GS_Palace_Cancel_Office::default_instance_ = NULL;

C2GS_Palace_Cancel_Office* C2GS_Palace_Cancel_Office::New() const {
  return new C2GS_Palace_Cancel_Office;
}

void C2GS_Palace_Cancel_Office::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Palace_Cancel_Office::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_Palace_Cancel_Office::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Palace_Cancel_Office::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Palace_Cancel_Office::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Palace_Cancel_Office::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Palace_Cancel_Office* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Palace_Cancel_Office*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Palace_Cancel_Office::MergeFrom(const C2GS_Palace_Cancel_Office& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Palace_Cancel_Office::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Palace_Cancel_Office::CopyFrom(const C2GS_Palace_Cancel_Office& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Palace_Cancel_Office::IsInitialized() const {

  return true;
}

void C2GS_Palace_Cancel_Office::Swap(C2GS_Palace_Cancel_Office* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Palace_Cancel_Office::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Palace_Cancel_Office_descriptor_;
  metadata.reflection = C2GS_Palace_Cancel_Office_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GS2C_Palace_Cancel_Office::GS2C_Palace_Cancel_Office()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Palace_Cancel_Office::InitAsDefaultInstance() {
}

GS2C_Palace_Cancel_Office::GS2C_Palace_Cancel_Office(const GS2C_Palace_Cancel_Office& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Palace_Cancel_Office::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Palace_Cancel_Office::~GS2C_Palace_Cancel_Office() {
  SharedDtor();
}

void GS2C_Palace_Cancel_Office::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Palace_Cancel_Office::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Palace_Cancel_Office::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Palace_Cancel_Office_descriptor_;
}

const GS2C_Palace_Cancel_Office& GS2C_Palace_Cancel_Office::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Palace_2eproto();
  return *default_instance_;
}

GS2C_Palace_Cancel_Office* GS2C_Palace_Cancel_Office::default_instance_ = NULL;

GS2C_Palace_Cancel_Office* GS2C_Palace_Cancel_Office::New() const {
  return new GS2C_Palace_Cancel_Office;
}

void GS2C_Palace_Cancel_Office::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Palace_Cancel_Office::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GS2C_Palace_Cancel_Office::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Palace_Cancel_Office::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Palace_Cancel_Office::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Palace_Cancel_Office::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Palace_Cancel_Office* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Palace_Cancel_Office*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Palace_Cancel_Office::MergeFrom(const GS2C_Palace_Cancel_Office& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Palace_Cancel_Office::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Palace_Cancel_Office::CopyFrom(const GS2C_Palace_Cancel_Office& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Palace_Cancel_Office::IsInitialized() const {

  return true;
}

void GS2C_Palace_Cancel_Office::Swap(GS2C_Palace_Cancel_Office* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Palace_Cancel_Office::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Palace_Cancel_Office_descriptor_;
  metadata.reflection = GS2C_Palace_Cancel_Office_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Palace_Apply_Aide::kOfficeIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Palace_Apply_Aide::C2GS_Palace_Apply_Aide()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Palace_Apply_Aide::InitAsDefaultInstance() {
}

C2GS_Palace_Apply_Aide::C2GS_Palace_Apply_Aide(const C2GS_Palace_Apply_Aide& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Palace_Apply_Aide::SharedCtor() {
  _cached_size_ = 0;
  office_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Palace_Apply_Aide::~C2GS_Palace_Apply_Aide() {
  SharedDtor();
}

void C2GS_Palace_Apply_Aide::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Palace_Apply_Aide::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Palace_Apply_Aide::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Palace_Apply_Aide_descriptor_;
}

const C2GS_Palace_Apply_Aide& C2GS_Palace_Apply_Aide::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Palace_2eproto();
  return *default_instance_;
}

C2GS_Palace_Apply_Aide* C2GS_Palace_Apply_Aide::default_instance_ = NULL;

C2GS_Palace_Apply_Aide* C2GS_Palace_Apply_Aide::New() const {
  return new C2GS_Palace_Apply_Aide;
}

void C2GS_Palace_Apply_Aide::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    office_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Palace_Apply_Aide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 office_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &office_id_)));
          set_has_office_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Palace_Apply_Aide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 office_id = 1;
  if (has_office_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->office_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Palace_Apply_Aide::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 office_id = 1;
  if (has_office_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->office_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Palace_Apply_Aide::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 office_id = 1;
    if (has_office_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->office_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Palace_Apply_Aide::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Palace_Apply_Aide* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Palace_Apply_Aide*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Palace_Apply_Aide::MergeFrom(const C2GS_Palace_Apply_Aide& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_office_id()) {
      set_office_id(from.office_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Palace_Apply_Aide::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Palace_Apply_Aide::CopyFrom(const C2GS_Palace_Apply_Aide& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Palace_Apply_Aide::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Palace_Apply_Aide::Swap(C2GS_Palace_Apply_Aide* other) {
  if (other != this) {
    std::swap(office_id_, other->office_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Palace_Apply_Aide::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Palace_Apply_Aide_descriptor_;
  metadata.reflection = C2GS_Palace_Apply_Aide_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_Palace_Cancel_Aide::C2GS_Palace_Cancel_Aide()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Palace_Cancel_Aide::InitAsDefaultInstance() {
}

C2GS_Palace_Cancel_Aide::C2GS_Palace_Cancel_Aide(const C2GS_Palace_Cancel_Aide& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Palace_Cancel_Aide::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Palace_Cancel_Aide::~C2GS_Palace_Cancel_Aide() {
  SharedDtor();
}

void C2GS_Palace_Cancel_Aide::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Palace_Cancel_Aide::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Palace_Cancel_Aide::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Palace_Cancel_Aide_descriptor_;
}

const C2GS_Palace_Cancel_Aide& C2GS_Palace_Cancel_Aide::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Palace_2eproto();
  return *default_instance_;
}

C2GS_Palace_Cancel_Aide* C2GS_Palace_Cancel_Aide::default_instance_ = NULL;

C2GS_Palace_Cancel_Aide* C2GS_Palace_Cancel_Aide::New() const {
  return new C2GS_Palace_Cancel_Aide;
}

void C2GS_Palace_Cancel_Aide::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Palace_Cancel_Aide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_Palace_Cancel_Aide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Palace_Cancel_Aide::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Palace_Cancel_Aide::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Palace_Cancel_Aide::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Palace_Cancel_Aide* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Palace_Cancel_Aide*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Palace_Cancel_Aide::MergeFrom(const C2GS_Palace_Cancel_Aide& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Palace_Cancel_Aide::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Palace_Cancel_Aide::CopyFrom(const C2GS_Palace_Cancel_Aide& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Palace_Cancel_Aide::IsInitialized() const {

  return true;
}

void C2GS_Palace_Cancel_Aide::Swap(C2GS_Palace_Cancel_Aide* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Palace_Cancel_Aide::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Palace_Cancel_Aide_descriptor_;
  metadata.reflection = C2GS_Palace_Cancel_Aide_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_Palace_Cancel_Apply_Aide::C2GS_Palace_Cancel_Apply_Aide()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Palace_Cancel_Apply_Aide::InitAsDefaultInstance() {
}

C2GS_Palace_Cancel_Apply_Aide::C2GS_Palace_Cancel_Apply_Aide(const C2GS_Palace_Cancel_Apply_Aide& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Palace_Cancel_Apply_Aide::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Palace_Cancel_Apply_Aide::~C2GS_Palace_Cancel_Apply_Aide() {
  SharedDtor();
}

void C2GS_Palace_Cancel_Apply_Aide::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Palace_Cancel_Apply_Aide::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Palace_Cancel_Apply_Aide::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Palace_Cancel_Apply_Aide_descriptor_;
}

const C2GS_Palace_Cancel_Apply_Aide& C2GS_Palace_Cancel_Apply_Aide::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Palace_2eproto();
  return *default_instance_;
}

C2GS_Palace_Cancel_Apply_Aide* C2GS_Palace_Cancel_Apply_Aide::default_instance_ = NULL;

C2GS_Palace_Cancel_Apply_Aide* C2GS_Palace_Cancel_Apply_Aide::New() const {
  return new C2GS_Palace_Cancel_Apply_Aide;
}

void C2GS_Palace_Cancel_Apply_Aide::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Palace_Cancel_Apply_Aide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_Palace_Cancel_Apply_Aide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Palace_Cancel_Apply_Aide::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Palace_Cancel_Apply_Aide::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Palace_Cancel_Apply_Aide::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Palace_Cancel_Apply_Aide* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Palace_Cancel_Apply_Aide*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Palace_Cancel_Apply_Aide::MergeFrom(const C2GS_Palace_Cancel_Apply_Aide& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Palace_Cancel_Apply_Aide::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Palace_Cancel_Apply_Aide::CopyFrom(const C2GS_Palace_Cancel_Apply_Aide& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Palace_Cancel_Apply_Aide::IsInitialized() const {

  return true;
}

void C2GS_Palace_Cancel_Apply_Aide::Swap(C2GS_Palace_Cancel_Apply_Aide* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Palace_Cancel_Apply_Aide::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Palace_Cancel_Apply_Aide_descriptor_;
  metadata.reflection = C2GS_Palace_Cancel_Apply_Aide_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Palace_Agree_Aide::kAideIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Palace_Agree_Aide::C2GS_Palace_Agree_Aide()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Palace_Agree_Aide::InitAsDefaultInstance() {
}

C2GS_Palace_Agree_Aide::C2GS_Palace_Agree_Aide(const C2GS_Palace_Agree_Aide& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Palace_Agree_Aide::SharedCtor() {
  _cached_size_ = 0;
  aide_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Palace_Agree_Aide::~C2GS_Palace_Agree_Aide() {
  SharedDtor();
}

void C2GS_Palace_Agree_Aide::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Palace_Agree_Aide::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Palace_Agree_Aide::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Palace_Agree_Aide_descriptor_;
}

const C2GS_Palace_Agree_Aide& C2GS_Palace_Agree_Aide::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Palace_2eproto();
  return *default_instance_;
}

C2GS_Palace_Agree_Aide* C2GS_Palace_Agree_Aide::default_instance_ = NULL;

C2GS_Palace_Agree_Aide* C2GS_Palace_Agree_Aide::New() const {
  return new C2GS_Palace_Agree_Aide;
}

void C2GS_Palace_Agree_Aide::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    aide_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Palace_Agree_Aide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 aide_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &aide_id_)));
          set_has_aide_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Palace_Agree_Aide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 aide_id = 1;
  if (has_aide_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->aide_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Palace_Agree_Aide::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 aide_id = 1;
  if (has_aide_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->aide_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Palace_Agree_Aide::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 aide_id = 1;
    if (has_aide_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->aide_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Palace_Agree_Aide::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Palace_Agree_Aide* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Palace_Agree_Aide*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Palace_Agree_Aide::MergeFrom(const C2GS_Palace_Agree_Aide& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aide_id()) {
      set_aide_id(from.aide_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Palace_Agree_Aide::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Palace_Agree_Aide::CopyFrom(const C2GS_Palace_Agree_Aide& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Palace_Agree_Aide::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Palace_Agree_Aide::Swap(C2GS_Palace_Agree_Aide* other) {
  if (other != this) {
    std::swap(aide_id_, other->aide_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Palace_Agree_Aide::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Palace_Agree_Aide_descriptor_;
  metadata.reflection = C2GS_Palace_Agree_Aide_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Palace_Refuse_Aide::kAideIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Palace_Refuse_Aide::C2GS_Palace_Refuse_Aide()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Palace_Refuse_Aide::InitAsDefaultInstance() {
}

C2GS_Palace_Refuse_Aide::C2GS_Palace_Refuse_Aide(const C2GS_Palace_Refuse_Aide& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Palace_Refuse_Aide::SharedCtor() {
  _cached_size_ = 0;
  aide_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Palace_Refuse_Aide::~C2GS_Palace_Refuse_Aide() {
  SharedDtor();
}

void C2GS_Palace_Refuse_Aide::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Palace_Refuse_Aide::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Palace_Refuse_Aide::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Palace_Refuse_Aide_descriptor_;
}

const C2GS_Palace_Refuse_Aide& C2GS_Palace_Refuse_Aide::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Palace_2eproto();
  return *default_instance_;
}

C2GS_Palace_Refuse_Aide* C2GS_Palace_Refuse_Aide::default_instance_ = NULL;

C2GS_Palace_Refuse_Aide* C2GS_Palace_Refuse_Aide::New() const {
  return new C2GS_Palace_Refuse_Aide;
}

void C2GS_Palace_Refuse_Aide::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    aide_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Palace_Refuse_Aide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 aide_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &aide_id_)));
          set_has_aide_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Palace_Refuse_Aide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 aide_id = 1;
  if (has_aide_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->aide_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Palace_Refuse_Aide::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 aide_id = 1;
  if (has_aide_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->aide_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Palace_Refuse_Aide::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 aide_id = 1;
    if (has_aide_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->aide_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Palace_Refuse_Aide::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Palace_Refuse_Aide* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Palace_Refuse_Aide*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Palace_Refuse_Aide::MergeFrom(const C2GS_Palace_Refuse_Aide& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aide_id()) {
      set_aide_id(from.aide_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Palace_Refuse_Aide::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Palace_Refuse_Aide::CopyFrom(const C2GS_Palace_Refuse_Aide& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Palace_Refuse_Aide::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Palace_Refuse_Aide::Swap(C2GS_Palace_Refuse_Aide* other) {
  if (other != this) {
    std::swap(aide_id_, other->aide_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Palace_Refuse_Aide::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Palace_Refuse_Aide_descriptor_;
  metadata.reflection = C2GS_Palace_Refuse_Aide_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Palace_Fire_Aide::kAideIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Palace_Fire_Aide::C2GS_Palace_Fire_Aide()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Palace_Fire_Aide::InitAsDefaultInstance() {
}

C2GS_Palace_Fire_Aide::C2GS_Palace_Fire_Aide(const C2GS_Palace_Fire_Aide& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Palace_Fire_Aide::SharedCtor() {
  _cached_size_ = 0;
  aide_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Palace_Fire_Aide::~C2GS_Palace_Fire_Aide() {
  SharedDtor();
}

void C2GS_Palace_Fire_Aide::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Palace_Fire_Aide::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Palace_Fire_Aide::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Palace_Fire_Aide_descriptor_;
}

const C2GS_Palace_Fire_Aide& C2GS_Palace_Fire_Aide::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Palace_2eproto();
  return *default_instance_;
}

C2GS_Palace_Fire_Aide* C2GS_Palace_Fire_Aide::default_instance_ = NULL;

C2GS_Palace_Fire_Aide* C2GS_Palace_Fire_Aide::New() const {
  return new C2GS_Palace_Fire_Aide;
}

void C2GS_Palace_Fire_Aide::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    aide_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Palace_Fire_Aide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 aide_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &aide_id_)));
          set_has_aide_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Palace_Fire_Aide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 aide_id = 1;
  if (has_aide_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->aide_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Palace_Fire_Aide::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 aide_id = 1;
  if (has_aide_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->aide_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Palace_Fire_Aide::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 aide_id = 1;
    if (has_aide_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->aide_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Palace_Fire_Aide::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Palace_Fire_Aide* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Palace_Fire_Aide*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Palace_Fire_Aide::MergeFrom(const C2GS_Palace_Fire_Aide& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aide_id()) {
      set_aide_id(from.aide_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Palace_Fire_Aide::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Palace_Fire_Aide::CopyFrom(const C2GS_Palace_Fire_Aide& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Palace_Fire_Aide::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Palace_Fire_Aide::Swap(C2GS_Palace_Fire_Aide* other) {
  if (other != this) {
    std::swap(aide_id_, other->aide_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Palace_Fire_Aide::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Palace_Fire_Aide_descriptor_;
  metadata.reflection = C2GS_Palace_Fire_Aide_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Palace_Take_Salary::kRewardFieldNumber;
#endif  // !_MSC_VER

GS2C_Palace_Take_Salary::GS2C_Palace_Take_Salary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Palace_Take_Salary::InitAsDefaultInstance() {
  reward_ = const_cast< ::pb::StReward*>(&::pb::StReward::default_instance());
}

GS2C_Palace_Take_Salary::GS2C_Palace_Take_Salary(const GS2C_Palace_Take_Salary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Palace_Take_Salary::SharedCtor() {
  _cached_size_ = 0;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Palace_Take_Salary::~GS2C_Palace_Take_Salary() {
  SharedDtor();
}

void GS2C_Palace_Take_Salary::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void GS2C_Palace_Take_Salary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Palace_Take_Salary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Palace_Take_Salary_descriptor_;
}

const GS2C_Palace_Take_Salary& GS2C_Palace_Take_Salary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Palace_2eproto();
  return *default_instance_;
}

GS2C_Palace_Take_Salary* GS2C_Palace_Take_Salary::default_instance_ = NULL;

GS2C_Palace_Take_Salary* GS2C_Palace_Take_Salary::New() const {
  return new GS2C_Palace_Take_Salary;
}

void GS2C_Palace_Take_Salary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_reward()) {
      if (reward_ != NULL) reward_->::pb::StReward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Palace_Take_Salary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.StReward reward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Palace_Take_Salary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.StReward reward = 1;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Palace_Take_Salary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.StReward reward = 1;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Palace_Take_Salary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.StReward reward = 1;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Palace_Take_Salary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Palace_Take_Salary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Palace_Take_Salary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Palace_Take_Salary::MergeFrom(const GS2C_Palace_Take_Salary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward()) {
      mutable_reward()->::pb::StReward::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Palace_Take_Salary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Palace_Take_Salary::CopyFrom(const GS2C_Palace_Take_Salary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Palace_Take_Salary::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void GS2C_Palace_Take_Salary::Swap(GS2C_Palace_Take_Salary* other) {
  if (other != this) {
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Palace_Take_Salary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Palace_Take_Salary_descriptor_;
  metadata.reflection = GS2C_Palace_Take_Salary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Palace_Skill_FlyTo::kCityIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Palace_Skill_FlyTo::C2GS_Palace_Skill_FlyTo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Palace_Skill_FlyTo::InitAsDefaultInstance() {
}

C2GS_Palace_Skill_FlyTo::C2GS_Palace_Skill_FlyTo(const C2GS_Palace_Skill_FlyTo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Palace_Skill_FlyTo::SharedCtor() {
  _cached_size_ = 0;
  city_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Palace_Skill_FlyTo::~C2GS_Palace_Skill_FlyTo() {
  SharedDtor();
}

void C2GS_Palace_Skill_FlyTo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Palace_Skill_FlyTo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Palace_Skill_FlyTo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Palace_Skill_FlyTo_descriptor_;
}

const C2GS_Palace_Skill_FlyTo& C2GS_Palace_Skill_FlyTo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Palace_2eproto();
  return *default_instance_;
}

C2GS_Palace_Skill_FlyTo* C2GS_Palace_Skill_FlyTo::default_instance_ = NULL;

C2GS_Palace_Skill_FlyTo* C2GS_Palace_Skill_FlyTo::New() const {
  return new C2GS_Palace_Skill_FlyTo;
}

void C2GS_Palace_Skill_FlyTo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    city_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Palace_Skill_FlyTo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 city_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Palace_Skill_FlyTo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->city_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Palace_Skill_FlyTo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->city_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Palace_Skill_FlyTo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 city_id = 1;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Palace_Skill_FlyTo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Palace_Skill_FlyTo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Palace_Skill_FlyTo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Palace_Skill_FlyTo::MergeFrom(const C2GS_Palace_Skill_FlyTo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Palace_Skill_FlyTo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Palace_Skill_FlyTo::CopyFrom(const C2GS_Palace_Skill_FlyTo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Palace_Skill_FlyTo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Palace_Skill_FlyTo::Swap(C2GS_Palace_Skill_FlyTo* other) {
  if (other != this) {
    std::swap(city_id_, other->city_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Palace_Skill_FlyTo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Palace_Skill_FlyTo_descriptor_;
  metadata.reflection = C2GS_Palace_Skill_FlyTo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Palace_Skill_Empty::kCityIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Palace_Skill_Empty::C2GS_Palace_Skill_Empty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Palace_Skill_Empty::InitAsDefaultInstance() {
}

C2GS_Palace_Skill_Empty::C2GS_Palace_Skill_Empty(const C2GS_Palace_Skill_Empty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Palace_Skill_Empty::SharedCtor() {
  _cached_size_ = 0;
  city_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Palace_Skill_Empty::~C2GS_Palace_Skill_Empty() {
  SharedDtor();
}

void C2GS_Palace_Skill_Empty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Palace_Skill_Empty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Palace_Skill_Empty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Palace_Skill_Empty_descriptor_;
}

const C2GS_Palace_Skill_Empty& C2GS_Palace_Skill_Empty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Palace_2eproto();
  return *default_instance_;
}

C2GS_Palace_Skill_Empty* C2GS_Palace_Skill_Empty::default_instance_ = NULL;

C2GS_Palace_Skill_Empty* C2GS_Palace_Skill_Empty::New() const {
  return new C2GS_Palace_Skill_Empty;
}

void C2GS_Palace_Skill_Empty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    city_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Palace_Skill_Empty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 city_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Palace_Skill_Empty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->city_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Palace_Skill_Empty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->city_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Palace_Skill_Empty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 city_id = 1;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Palace_Skill_Empty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Palace_Skill_Empty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Palace_Skill_Empty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Palace_Skill_Empty::MergeFrom(const C2GS_Palace_Skill_Empty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Palace_Skill_Empty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Palace_Skill_Empty::CopyFrom(const C2GS_Palace_Skill_Empty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Palace_Skill_Empty::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Palace_Skill_Empty::Swap(C2GS_Palace_Skill_Empty* other) {
  if (other != this) {
    std::swap(city_id_, other->city_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Palace_Skill_Empty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Palace_Skill_Empty_descriptor_;
  metadata.reflection = C2GS_Palace_Skill_Empty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Palace_Skill_Confuse::kCityIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Palace_Skill_Confuse::C2GS_Palace_Skill_Confuse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Palace_Skill_Confuse::InitAsDefaultInstance() {
}

C2GS_Palace_Skill_Confuse::C2GS_Palace_Skill_Confuse(const C2GS_Palace_Skill_Confuse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Palace_Skill_Confuse::SharedCtor() {
  _cached_size_ = 0;
  city_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Palace_Skill_Confuse::~C2GS_Palace_Skill_Confuse() {
  SharedDtor();
}

void C2GS_Palace_Skill_Confuse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Palace_Skill_Confuse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Palace_Skill_Confuse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Palace_Skill_Confuse_descriptor_;
}

const C2GS_Palace_Skill_Confuse& C2GS_Palace_Skill_Confuse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Palace_2eproto();
  return *default_instance_;
}

C2GS_Palace_Skill_Confuse* C2GS_Palace_Skill_Confuse::default_instance_ = NULL;

C2GS_Palace_Skill_Confuse* C2GS_Palace_Skill_Confuse::New() const {
  return new C2GS_Palace_Skill_Confuse;
}

void C2GS_Palace_Skill_Confuse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    city_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Palace_Skill_Confuse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 city_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Palace_Skill_Confuse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->city_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Palace_Skill_Confuse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->city_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Palace_Skill_Confuse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 city_id = 1;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Palace_Skill_Confuse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Palace_Skill_Confuse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Palace_Skill_Confuse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Palace_Skill_Confuse::MergeFrom(const C2GS_Palace_Skill_Confuse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Palace_Skill_Confuse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Palace_Skill_Confuse::CopyFrom(const C2GS_Palace_Skill_Confuse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Palace_Skill_Confuse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Palace_Skill_Confuse::Swap(C2GS_Palace_Skill_Confuse* other) {
  if (other != this) {
    std::swap(city_id_, other->city_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Palace_Skill_Confuse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Palace_Skill_Confuse_descriptor_;
  metadata.reflection = C2GS_Palace_Skill_Confuse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Palace_Skill_Maze::kCityIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Palace_Skill_Maze::C2GS_Palace_Skill_Maze()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Palace_Skill_Maze::InitAsDefaultInstance() {
}

C2GS_Palace_Skill_Maze::C2GS_Palace_Skill_Maze(const C2GS_Palace_Skill_Maze& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Palace_Skill_Maze::SharedCtor() {
  _cached_size_ = 0;
  city_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Palace_Skill_Maze::~C2GS_Palace_Skill_Maze() {
  SharedDtor();
}

void C2GS_Palace_Skill_Maze::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Palace_Skill_Maze::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Palace_Skill_Maze::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Palace_Skill_Maze_descriptor_;
}

const C2GS_Palace_Skill_Maze& C2GS_Palace_Skill_Maze::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Palace_2eproto();
  return *default_instance_;
}

C2GS_Palace_Skill_Maze* C2GS_Palace_Skill_Maze::default_instance_ = NULL;

C2GS_Palace_Skill_Maze* C2GS_Palace_Skill_Maze::New() const {
  return new C2GS_Palace_Skill_Maze;
}

void C2GS_Palace_Skill_Maze::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    city_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Palace_Skill_Maze::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 city_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Palace_Skill_Maze::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->city_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Palace_Skill_Maze::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->city_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Palace_Skill_Maze::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 city_id = 1;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Palace_Skill_Maze::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Palace_Skill_Maze* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Palace_Skill_Maze*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Palace_Skill_Maze::MergeFrom(const C2GS_Palace_Skill_Maze& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Palace_Skill_Maze::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Palace_Skill_Maze::CopyFrom(const C2GS_Palace_Skill_Maze& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Palace_Skill_Maze::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Palace_Skill_Maze::Swap(C2GS_Palace_Skill_Maze* other) {
  if (other != this) {
    std::swap(city_id_, other->city_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Palace_Skill_Maze::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Palace_Skill_Maze_descriptor_;
  metadata.reflection = C2GS_Palace_Skill_Maze_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Palace_Skill_Trap::kCityIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Palace_Skill_Trap::C2GS_Palace_Skill_Trap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Palace_Skill_Trap::InitAsDefaultInstance() {
}

C2GS_Palace_Skill_Trap::C2GS_Palace_Skill_Trap(const C2GS_Palace_Skill_Trap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Palace_Skill_Trap::SharedCtor() {
  _cached_size_ = 0;
  city_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Palace_Skill_Trap::~C2GS_Palace_Skill_Trap() {
  SharedDtor();
}

void C2GS_Palace_Skill_Trap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Palace_Skill_Trap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Palace_Skill_Trap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Palace_Skill_Trap_descriptor_;
}

const C2GS_Palace_Skill_Trap& C2GS_Palace_Skill_Trap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Palace_2eproto();
  return *default_instance_;
}

C2GS_Palace_Skill_Trap* C2GS_Palace_Skill_Trap::default_instance_ = NULL;

C2GS_Palace_Skill_Trap* C2GS_Palace_Skill_Trap::New() const {
  return new C2GS_Palace_Skill_Trap;
}

void C2GS_Palace_Skill_Trap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    city_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Palace_Skill_Trap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 city_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Palace_Skill_Trap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->city_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Palace_Skill_Trap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->city_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Palace_Skill_Trap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 city_id = 1;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Palace_Skill_Trap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Palace_Skill_Trap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Palace_Skill_Trap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Palace_Skill_Trap::MergeFrom(const C2GS_Palace_Skill_Trap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Palace_Skill_Trap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Palace_Skill_Trap::CopyFrom(const C2GS_Palace_Skill_Trap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Palace_Skill_Trap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Palace_Skill_Trap::Swap(C2GS_Palace_Skill_Trap* other) {
  if (other != this) {
    std::swap(city_id_, other->city_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Palace_Skill_Trap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Palace_Skill_Trap_descriptor_;
  metadata.reflection = C2GS_Palace_Skill_Trap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Palace_Take_Reward::kOfficeIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Palace_Take_Reward::C2GS_Palace_Take_Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Palace_Take_Reward::InitAsDefaultInstance() {
}

C2GS_Palace_Take_Reward::C2GS_Palace_Take_Reward(const C2GS_Palace_Take_Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Palace_Take_Reward::SharedCtor() {
  _cached_size_ = 0;
  office_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Palace_Take_Reward::~C2GS_Palace_Take_Reward() {
  SharedDtor();
}

void C2GS_Palace_Take_Reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Palace_Take_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Palace_Take_Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Palace_Take_Reward_descriptor_;
}

const C2GS_Palace_Take_Reward& C2GS_Palace_Take_Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Palace_2eproto();
  return *default_instance_;
}

C2GS_Palace_Take_Reward* C2GS_Palace_Take_Reward::default_instance_ = NULL;

C2GS_Palace_Take_Reward* C2GS_Palace_Take_Reward::New() const {
  return new C2GS_Palace_Take_Reward;
}

void C2GS_Palace_Take_Reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    office_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Palace_Take_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 office_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &office_id_)));
          set_has_office_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Palace_Take_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 office_id = 1;
  if (has_office_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->office_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Palace_Take_Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 office_id = 1;
  if (has_office_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->office_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Palace_Take_Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 office_id = 1;
    if (has_office_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->office_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Palace_Take_Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Palace_Take_Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Palace_Take_Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Palace_Take_Reward::MergeFrom(const C2GS_Palace_Take_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_office_id()) {
      set_office_id(from.office_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Palace_Take_Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Palace_Take_Reward::CopyFrom(const C2GS_Palace_Take_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Palace_Take_Reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Palace_Take_Reward::Swap(C2GS_Palace_Take_Reward* other) {
  if (other != this) {
    std::swap(office_id_, other->office_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Palace_Take_Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Palace_Take_Reward_descriptor_;
  metadata.reflection = C2GS_Palace_Take_Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Palace_Take_Reward_Rsp::kOfficeIdFieldNumber;
const int GS2C_Palace_Take_Reward_Rsp::kOfficeStateFieldNumber;
#endif  // !_MSC_VER

GS2C_Palace_Take_Reward_Rsp::GS2C_Palace_Take_Reward_Rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Palace_Take_Reward_Rsp::InitAsDefaultInstance() {
}

GS2C_Palace_Take_Reward_Rsp::GS2C_Palace_Take_Reward_Rsp(const GS2C_Palace_Take_Reward_Rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Palace_Take_Reward_Rsp::SharedCtor() {
  _cached_size_ = 0;
  office_id_ = 0u;
  office_state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Palace_Take_Reward_Rsp::~GS2C_Palace_Take_Reward_Rsp() {
  SharedDtor();
}

void GS2C_Palace_Take_Reward_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Palace_Take_Reward_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Palace_Take_Reward_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Palace_Take_Reward_Rsp_descriptor_;
}

const GS2C_Palace_Take_Reward_Rsp& GS2C_Palace_Take_Reward_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Palace_2eproto();
  return *default_instance_;
}

GS2C_Palace_Take_Reward_Rsp* GS2C_Palace_Take_Reward_Rsp::default_instance_ = NULL;

GS2C_Palace_Take_Reward_Rsp* GS2C_Palace_Take_Reward_Rsp::New() const {
  return new GS2C_Palace_Take_Reward_Rsp;
}

void GS2C_Palace_Take_Reward_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    office_id_ = 0u;
    office_state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Palace_Take_Reward_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 office_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &office_id_)));
          set_has_office_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_office_state;
        break;
      }

      // optional uint32 office_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_office_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &office_state_)));
          set_has_office_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Palace_Take_Reward_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 office_id = 1;
  if (has_office_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->office_id(), output);
  }

  // optional uint32 office_state = 2;
  if (has_office_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->office_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Palace_Take_Reward_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 office_id = 1;
  if (has_office_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->office_id(), target);
  }

  // optional uint32 office_state = 2;
  if (has_office_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->office_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Palace_Take_Reward_Rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 office_id = 1;
    if (has_office_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->office_id());
    }

    // optional uint32 office_state = 2;
    if (has_office_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->office_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Palace_Take_Reward_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Palace_Take_Reward_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Palace_Take_Reward_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Palace_Take_Reward_Rsp::MergeFrom(const GS2C_Palace_Take_Reward_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_office_id()) {
      set_office_id(from.office_id());
    }
    if (from.has_office_state()) {
      set_office_state(from.office_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Palace_Take_Reward_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Palace_Take_Reward_Rsp::CopyFrom(const GS2C_Palace_Take_Reward_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Palace_Take_Reward_Rsp::IsInitialized() const {

  return true;
}

void GS2C_Palace_Take_Reward_Rsp::Swap(GS2C_Palace_Take_Reward_Rsp* other) {
  if (other != this) {
    std::swap(office_id_, other->office_id_);
    std::swap(office_state_, other->office_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Palace_Take_Reward_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Palace_Take_Reward_Rsp_descriptor_;
  metadata.reflection = GS2C_Palace_Take_Reward_Rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
