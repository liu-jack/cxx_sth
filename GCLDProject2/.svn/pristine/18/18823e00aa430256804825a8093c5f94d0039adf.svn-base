
#include "Server.h"

#include "Logger.h"
#include "OS.h"
#include "Session.h"
#include "TcpAsyncServer.h"
#include "IoServicePool.h"
#include "ServerClient.h"

#include "def/MmoAssert.h"
#include "utility/STLUtility.h"
#include "detail/TcpAsyncConn.h"

#include "Opcode.pb.h"
#include "ServerOpcode.pb.h"


Server::Server(void)
	//:m_inClientNetStat( pb::CSMSG_COUNT, "Client Input" )
	// ,m_outClientNetStat( pb::CSMSG_COUNT, "Client Output" )
	// ,m_inServerNetStat( pb::SERVER_OPCODE_COUNT, "Server Input" )
	// ,m_outServerNetStat( pb::SERVER_OPCODE_COUNT, "Server Output" )
{
	m_serverType               =0 ;
	m_takeNewSessionLimit      =100 ;
	m_updateTimeMS             =0 ;
	m_preUpdateTimeMS          =0 ;

	m_verfyLimitTimeMS         =5000 ;
	m_notRecvPackLimitTimeMS   =5000 ;
	m_threadUpdateLimitTimeMS  =100 ;

	m_sessions.clear() ;
	m_updateSessionMap.clear() ;
}

Server::~Server(void)
{
	Stop() ;

	//std::for_each( m_updateSessonMap.begin(), m_updateSessonMap.end(), DeleteSecondValue() ) ;
	for( SessionMap::iterator itr =m_updateSessionMap.begin(); itr != m_updateSessionMap.end(); ++itr )
	{
		itr->second->SetIsVerification( false ) ;
		delete itr->second ;
	}

	Session *pSession =NULL ;
	while( m_newSession.Dequeue( pSession ) )
	{
		pSession->SetIsVerification( false ) ;
		delete pSession ;
		pSession =NULL ;
	}

	m_updateSessionMap.clear() ;
	m_sessions.clear() ;
}


void Server::OnConnect( TcpAsyncConn *pConn )
{
	ASSERT( pConn != NULL ) ;
	NLOG("%s,Accept Connect Session:%llu, IP:%s,Port:%d",GetServerTypeName(), pConn->Id(), pConn->Ip().c_str(), pConn->Port() ) ;
	OnOpenSession( pConn ) ;
}

void Server::NoticeRecv( uint64 sessionId, NetPack *pPack )
{
	if( NetPack::IsNoticeRecvAndSend( *pPack ) )
	{
		NLOG ("[Recv] 1 %s to %s session id: %llu, %s(%d) ", pPack->GetPacketTypeName(), GetServerTypeName(), sessionId, pPack->GetOpcodeName(), pPack->GetOpcode() );
		//if( pPack->IsClientPacket() )
		//{
		//	//m_inClientNetStat.Add(*pPack);
		//}
		//else
		//{
		//	//m_inServerNetStat.Add(*pPack);
		//}
	}

}

void Server::OnRecv( TcpAsyncConn *pConn, NetPack* pPack)
{

	NoticeRecv( pConn->Id(), pPack ) ;

	PostInputPacket( pConn, pPack ) ;
}

void Server::NoticeSend( uint64 sessionId, NetPack *pPack )
{
	if( NetPack::IsNoticeRecvAndSend( *pPack ) )
	{
		NLOG ("[Send] %s to %s session id: %lld, %s(%d)", GetServerTypeName(), pPack->GetPacketTypeName(), sessionId, pPack->GetOpcodeName(), pPack->GetOpcode() );
		//if( pPack->IsClientPacket() )
		//{
		//	//m_outClientNetStat.Add(pack);
		//}
		//else
		//{
		//	//m_outServerNetStat.Add(pack);
		//}
	}
}

void Server::OnSend(uint64 sessionId, NetPack* pPack)
{
	ASSERT( false ) ; // will not send by server, just by each session

	NoticeSend( sessionId, pPack ) ;
}

void Server::OnClose( uint64 sessionId )
{
	// Notice:
	// Just when the session connect but had not recv first packet
	// that had not invode Session::SetConn() so the TcpAsyncConn::SetPackHandler()
	// not be invoked to reset use session as handler the packet, close event will come here .
	// 
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TcpServer 

const string& Server::GetIP( void )
{
	return m_pTcpSvr->GetIP() ;
}

const string& Server::GetPort( void )
{
	return m_pTcpSvr->GetPort() ;
}


void Server::SetServerTypeName( char type )
{
	m_serverTypeName =NetPack::GetPacketTypeName( type ) ;
}


void Server::SetPackPrintDiffCount( uint64 count )
{
	//m_inClientNetStat.SetPrintDiffCount( count ) ;
	//m_outClientNetStat.SetPrintDiffCount( count ) ;
	//m_inServerNetStat.SetPrintDiffCount( count ) ;
	//m_outServerNetStat.SetPrintDiffCount( count ) ;
}

void Server::StartListenPort( const std::string &port )
{
	// Start listen
	m_pTcpSvr.reset( new TcpAsyncServer( port, Config().GetString( "Self.fix_ip", "" ) ) );
	SetJustConnectLimintTimeMS( Config().GetInt( "Self.wait_first_packet_limit_time_ms", 3000 )  ) ;

	m_pTcpSvr->Start( this );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Thread
void Server::Start( void )
{
	OnBeforeStart() ;

	m_worldThread.Start( boost::bind( &Server::WorldThread, this ) ) ;


	//ASSERT( m_pLogicalTaker ) ;
	if( m_pLogicalTaker )
	{
		m_pLogicalTaker->Start() ;
	}
}


void Server::Stop( void )
{
	m_worldThread.Stop() ;

	if (m_pLogicalTaker)
	{
		m_pLogicalTaker->Stop() ;
	}

	if (m_pTcpSvr.get())
	{
		m_pTcpSvr->Stop();
		
		while( m_pTcpSvr->GetIsOpen() )
		{
			// wait ..........
		}

		m_pTcpSvr.reset();
	}

	OnAfterStop();
}

void Server::WorldThread( void )
{
	NLOG( "Server::WorldThread() start running ~" ) ;

	sOS.SRand() ;
	m_preUpdateTimeMS =sOS.TimeMS() ;

	while( m_worldThread.IsStart() )
	{
		uint64 begTime = sOS.TimeMS() ;

		int64 twiceUpdateDiff =begTime - m_preUpdateTimeMS ;
		ASSERT( twiceUpdateDiff >= 0 ) ;

		m_preUpdateTimeMS     =begTime ;

		// Open and close sesssion .
		TakeNewSession() ;
		TakeCloseSession() ;

		BeforeSeesionUpdate( begTime, twiceUpdateDiff ) ;

		// Session update
		SessionMapItr itr ;
		SessionMapItr tmpItr ;

		for( itr =m_updateSessionMap.begin(); itr != m_updateSessionMap.end(); /*++itr*/ )
		{
			tmpItr =itr++ ;
			Session *pSession =tmpItr->second ;

			if( pSession->GetIsHadClosed() )
			{
				continue ;
			}

			if( pSession->GetIsNeedClose() )
			{
				NLOG( "WorldThread initiative close session %llu, type %s .", pSession->GetSessionId(), pSession->GetSessionTypeName() ) ;

				pSession->CloseSession() ;

				continue ;
			}

			pSession->Update( begTime, twiceUpdateDiff ) ;

			OnSessonUpdate( pSession ) ;

			if( pSession->GetPreRecvTime() + m_notRecvPackLimitTimeMS < begTime )
			{
				int64 diffTime =begTime - pSession->GetPreRecvTime() ;
				WLOG( "WorldThread, Will be closed id:%llu, type:%s,%lld not packet recv more than %lld MS !!!!", pSession->GetSessionId(), pSession->GetSessionTypeName(), diffTime, m_notRecvPackLimitTimeMS ) ;
				pSession->CloseSession() ;
			}
			else if( !pSession->GetIsVerification() )
			{
				if( pSession->GetWaitVerfyTime() + m_verfyLimitTimeMS < begTime )
				{
					NLOG( "WorldThread, More than %llu MS not verfy initiative close session %d, type %s .", m_verfyLimitTimeMS, pSession->GetSessionId(), pSession->GetSessionTypeName() ) ;
					pSession->CloseSession() ;
				}
			}

		}

		// After session update ;
		AfterSessionUpdate( begTime, twiceUpdateDiff ) ;

		int64 updateUseTime =sOS.TimeMS() - begTime ; ASSERT( updateUseTime >= 0 ) ;
		m_updateTimeMS = updateUseTime ;

		int64 diffTime = m_threadUpdateLimitTimeMS - m_updateTimeMS ;
		if( diffTime > 0 )
		{
			m_worldThread.Sleep( static_cast<int>( diffTime ) ) ;
		}
		else
		{
			WLOG( "WorldThread update time more than %d ms use %llu ms", m_threadUpdateLimitTimeMS, m_updateTimeMS ) ;
		}
	}

	WLOG( "WorldThread is shoped!!!!" ) ;

}


void Server::BeforeSeesionUpdate( uint64 nowTimeMS, int64 diffMS )
{
	ASSERT( false ) ;
}

void Server::AfterSessionUpdate( uint64 nowTimeMS, int64 diffMS )
{
	ASSERT( false ) ;
}

bool Server::InitGameConf( const std::string &filePath, const std::string &strConfigFile, const std::string &strDefaultConfigFile )
{
	if( !m_config.LoadOrCopyFormDefaultFile( filePath, strConfigFile, strDefaultConfigFile ) )
	{
		return false ;
	}

	NetPack::ClientOpCodeNoticeInit() ;
	NetPack::ServerOpCodeNoticeInit() ;

	SetVerfyLimitTime( Config().GetInt( "Self.verfy_limit_time_ms", 5000 )  ) ;

	SetTakeNewSessionLimit( Config().GetInt( "Self.new_session_take_limit", 50 ) ) ;

	SetThreadUpdateLimitTimeMS( Config().GetInt( "Self.thread_update_limit_time_ms", 100 ) ) ;
	SetNotRecvPackLimitTimeMS( Config().GetInt( "Self.not_recv_packet_limit_time_ms", 3000 ) ) ;

	Session::SetTakePacketLimit( Config().GetInt( "Self.session_take_packet_limit", 10 ) ) ;

	Session::SetDelayNoticeLimitTimeMS( Config().GetInt( "Self.delay_notice_limie_time_ms", 10 ) ) ;
	ServerClient::SetDelayNoticeLimitTimeMS( Config().GetInt( "Self.delay_notice_limie_time_ms", 10 ) ) ;

	return true ;
}




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Session

void Server::OnOpenSession( TcpAsyncConn *pConn )
{
	ASSERT( pConn != NULL ) ;
}

void Server::TakeNewSession( void )
{
	Session *pSession =NULL ;

	//uint32 takeCount  =0 ;
	//uint64 nowTimeMS  =0 ;
	//uint64 limitTimeMS  =sOS.TimeMS() + GetTakeNewSessionLimit() ;
	while( /*nowTimeMS < limitTimeMS && */ m_newSession.Dequeue( pSession ) )
	{
		//++takeCount ;

		//nowTimeMS =sOS.TimeMS() ;
		pSession->SetWaitVerfyTime( sOS.TimeMS() ) ;

		uint64 sessionId =pSession->GetSessionId() ;
		bool sessionIsInsert =m_sessions.insert( std::make_pair( sessionId, pSession ) ).second ;
		if( !sessionIsInsert )
		{
			ELOG( "session id %llu is exist in session map", sessionId ) ;
			ASSERT( false ) ;
			pSession->SetIsVerification( false ) ;
			delete pSession ;
			pSession =NULL ;
			continue ;
		}

		m_updateSessionMap.insert( std::make_pair( pSession->GetSessionId(), pSession ) ) ;
	}
}


void Server::OnCloseSession( uint64 sessionId )
{
	m_closeQueue.Enqueue( sessionId ) ;
}


bool Server::ChangeToLogicalTacker( Session *pSession )
{
	if( !pSession->GetIsInWorldThread() )
	{
		return false ;
	}

	pSession->SetIsInWorldThread( false ) ;
	m_updateSessionMap.erase( pSession->GetSessionId() ) ;
	m_pLogicalTaker->PutSeesion( pSession ) ;

	return true ;
}


bool Server::AddSession( Session *pSession )
{
	pSession->SetIsVerification( false ) ;
	pSession->SetIsInWorldThread( true ) ;

	switch( pSession->GetSessionType() )
	{
	case PACKET_TYPE_SERVER_LOGIN:
	case PACKET_TYPE_SERVER_GAME:
	case PACKET_TYPE_SERVER_GATEWAY:
	case PACKET_TYPE_SERVER_DBPROXY:
	case PACKET_TYPE_SERVER_CENTER:
	case PACKET_TYPE_SERVER_LOBBY:
	case PACKET_TYPE_SERVER_CROSS:  
		{
			pSession->SetIsServerSession( true ) ;
		} break ;

	case PACKET_TYPE_CLIENT:
		{
			pSession->SetIsServerSession( false ) ;
		} break ;

	case PACKET_TYPE_SERVER_EVENT:
		{
			pSession->SetIsServerSession( false ) ;
		} break ;

	case PACKET_TYPE_SERVER_WEB:
		{
			pSession->SetIsServerSession( false ) ;
		} break ;

	default:
		ASSERT( false ) ;
		return false;
	}

	pSession->SetPreRecvTime( sOS.TimeMS() ) ;

	m_newSession.Enqueue( pSession ) ;

	return true;
}


void Server::TakeCloseSession( void )
{
	uint64 sessionId =0 ;
	while( m_closeQueue.Dequeue( sessionId ) )
	{
		if( m_sessions.erase( sessionId ) <= 0 )
		{
			WLOG( "Server::TakeCloseSession() can not find sessiion %llu in m_sessions ", sessionId ) ;
			continue ;
		}

		SessionMapItr itr =m_updateSessionMap.find( sessionId ) ;
		if( itr != m_updateSessionMap.end() )
		{
			delete itr->second ;
			itr->second =NULL ;

			m_updateSessionMap.erase( itr ) ;
		}
		else
		{
			m_pLogicalTaker->PutClostSessionId( sessionId ) ;
		}
	}
}



void Server::PostInputPacket( TcpAsyncConn *pConn, NetPack* pPacket )
{
	ASSERT( pConn != NULL ) ;
	// Notice:
	// just first packet will come here, after first packet will change to session self recv packet .
	//
	pConn->SetIsGetPacket( true ) ;

	std::auto_ptr<NetPack> packHolder(pPacket);

	uint16 maxOpCode =pPacket->IsClientPacket() ? static_cast<uint16>( pb::CSMSG_COUNT ) : static_cast<uint16>( pb::SERVER_OPCODE_COUNT ) ;
	if( pPacket->GetOpcode() >= maxOpCode )
	{
		ELOG( "Unhandled opCode:%d, more than max opcde ", pPacket->GetOpcode(), maxOpCode );
		return;
	}

	
	int type =pPacket->GetPacketType() ;
	Session *pSession =CreateSesion( type ) ;
	if( pSession == NULL )
	{
		// the connect will be close by m_mtJustConnectList .
		ELOG( "Receive error not accept session type, will close it, somebody is attacking ?????? " ) ;
		return ;
	}

	pSession->PostInputPacket( packHolder.release() ) ;

	// Set the conn to session, and change the packet handler .
	pSession->SetConn( pConn ) ;

	pSession->SetServer( this ) ;
	pSession->SetSessionId( pConn->Id() ) ;
	pSession->SetSessionType( type ) ;

	if( !AddSession( pSession ) )
	{
		delete pSession ;
		pSession =NULL ;
		return ;
	}
}

void Server::SetJustConnectLimintTimeMS( uint64 time )
{
	ASSERT( m_pTcpSvr ) ;
	m_pTcpSvr->SetJustConnectLimintTimeMS( time ) ;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Common data
bool Server::AddSeesionToSeerionMap( SessionMap &sessionMap, Session *pSession )
{
	bool isInsert =sessionMap.insert( std::make_pair( pSession->GetSessionId(), pSession ) ).second ;
	ASSERT( isInsert ) ;

	return isInsert ;
}

bool Server::RemoveSessionFromSessionMap( SessionMap &sessionMap, Session *pSession )
{
	int rmCount =sessionMap.erase( pSession->GetSessionId() ) ;
	ASSERT( rmCount == 1 ) ;

	return rmCount > 0 ;
}

void Server::BroadcastMsgBySessionMap( SessionMap &sessionMap, const int opCode, const ::google::protobuf::Message &msg )
{
	for( SessionMapItr itr =sessionMap.begin(); itr != sessionMap.end(); ++itr )
	{
		itr->second->Send( opCode, msg) ;
	}
}

void Server::BroadcastBySessionMap( SessionMap &sessionMap, NetPack &packet )
{
	for( SessionMapItr itr =sessionMap.begin(); itr != sessionMap.end(); ++itr )
	{
		NetPack tmpPacket( packet ) ;
		itr->second->Send( tmpPacket ) ;
	}
}

void Server::BroadcastByServerIdSessionMap( SessionByServerIdMap &sessionMap, NetPack &packet )
{
	for( SessionByServerIdMapItr itr =sessionMap.begin(); itr != sessionMap.end(); ++itr )
	{
		NetPack tmpPacket( packet ) ;
		itr->second->Send( tmpPacket ) ;
	}
}
