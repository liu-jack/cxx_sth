// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Module.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Module.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* GxDB_Module_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_Module_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_Building_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_Building_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_Modules_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_Modules_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_Buildings_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_Buildings_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Building_State_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Building_State_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Building_State_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Building_State_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Building_Level_Up_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Building_Level_Up_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Building_Level_Up_Begin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Building_Level_Up_Begin_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Building_Level_Up_Begin_lv_up_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Building_Level_Up_Begin_lv_up_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Building_Level_Up_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Building_Level_Up_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Building_Gold_Hammer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Building_Gold_Hammer_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Module_Buy_Gain_Mode_Res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Module_Buy_Gain_Mode_Res_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Building_Update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Building_Update_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Module_2eproto() {
  protobuf_AddDesc_Module_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Module.proto");
  GOOGLE_CHECK(file != NULL);
  GxDB_Module_descriptor_ = file->message_type(0);
  static const int GxDB_Module_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Module, module_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Module, gain_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Module, expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Module, is_rebuild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Module, gain_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Module, gain_value_),
  };
  GxDB_Module_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_Module_descriptor_,
      GxDB_Module::default_instance_,
      GxDB_Module_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Module, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Module, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_Module));
  GxDB_Building_descriptor_ = file->message_type(1);
  static const int GxDB_Building_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Building, building_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Building, building_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Building, lvup_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Building, is_rebuild_),
  };
  GxDB_Building_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_Building_descriptor_,
      GxDB_Building::default_instance_,
      GxDB_Building_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Building, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Building, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_Building));
  GxDB_Modules_Info_descriptor_ = file->message_type(2);
  static const int GxDB_Modules_Info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Modules_Info, module_arr_),
  };
  GxDB_Modules_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_Modules_Info_descriptor_,
      GxDB_Modules_Info::default_instance_,
      GxDB_Modules_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Modules_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Modules_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_Modules_Info));
  GxDB_Buildings_Info_descriptor_ = file->message_type(3);
  static const int GxDB_Buildings_Info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Buildings_Info, building_arr_),
  };
  GxDB_Buildings_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_Buildings_Info_descriptor_,
      GxDB_Buildings_Info::default_instance_,
      GxDB_Buildings_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Buildings_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Buildings_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_Buildings_Info));
  C2GS_Building_State_descriptor_ = file->message_type(4);
  static const int C2GS_Building_State_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Building_State, module_id_),
  };
  C2GS_Building_State_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Building_State_descriptor_,
      C2GS_Building_State::default_instance_,
      C2GS_Building_State_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Building_State, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Building_State, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Building_State));
  GS2C_Building_State_descriptor_ = file->message_type(5);
  static const int GS2C_Building_State_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Building_State, module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Building_State, building_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Building_State, remain_auto_times_),
  };
  GS2C_Building_State_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Building_State_descriptor_,
      GS2C_Building_State::default_instance_,
      GS2C_Building_State_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Building_State, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Building_State, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Building_State));
  C2GS_Building_Level_Up_descriptor_ = file->message_type(6);
  static const int C2GS_Building_Level_Up_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Building_Level_Up, is_auto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Building_Level_Up, building_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Building_Level_Up, module_id_),
  };
  C2GS_Building_Level_Up_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Building_Level_Up_descriptor_,
      C2GS_Building_Level_Up::default_instance_,
      C2GS_Building_Level_Up_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Building_Level_Up, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Building_Level_Up, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Building_Level_Up));
  GS2C_Building_Level_Up_Begin_descriptor_ = file->message_type(7);
  static const int GS2C_Building_Level_Up_Begin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Building_Level_Up_Begin, module_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Building_Level_Up_Begin, remain_auto_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Building_Level_Up_Begin, build_state_),
  };
  GS2C_Building_Level_Up_Begin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Building_Level_Up_Begin_descriptor_,
      GS2C_Building_Level_Up_Begin::default_instance_,
      GS2C_Building_Level_Up_Begin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Building_Level_Up_Begin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Building_Level_Up_Begin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Building_Level_Up_Begin));
  GS2C_Building_Level_Up_Begin_lv_up_info_descriptor_ = GS2C_Building_Level_Up_Begin_descriptor_->nested_type(0);
  static const int GS2C_Building_Level_Up_Begin_lv_up_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Building_Level_Up_Begin_lv_up_info, building_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Building_Level_Up_Begin_lv_up_info, lvup_start_time_),
  };
  GS2C_Building_Level_Up_Begin_lv_up_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Building_Level_Up_Begin_lv_up_info_descriptor_,
      GS2C_Building_Level_Up_Begin_lv_up_info::default_instance_,
      GS2C_Building_Level_Up_Begin_lv_up_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Building_Level_Up_Begin_lv_up_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Building_Level_Up_Begin_lv_up_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Building_Level_Up_Begin_lv_up_info));
  GS2C_Building_Level_Up_descriptor_ = file->message_type(8);
  static const int GS2C_Building_Level_Up_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Building_Level_Up, building_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Building_Level_Up, module_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Building_Level_Up, building_lv_),
  };
  GS2C_Building_Level_Up_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Building_Level_Up_descriptor_,
      GS2C_Building_Level_Up::default_instance_,
      GS2C_Building_Level_Up_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Building_Level_Up, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Building_Level_Up, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Building_Level_Up));
  GS2C_Building_Gold_Hammer_descriptor_ = file->message_type(9);
  static const int GS2C_Building_Gold_Hammer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Building_Gold_Hammer, building_lv_up_),
  };
  GS2C_Building_Gold_Hammer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Building_Gold_Hammer_descriptor_,
      GS2C_Building_Gold_Hammer::default_instance_,
      GS2C_Building_Gold_Hammer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Building_Gold_Hammer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Building_Gold_Hammer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Building_Gold_Hammer));
  GS2C_Module_Buy_Gain_Mode_Res_descriptor_ = file->message_type(10);
  static const int GS2C_Module_Buy_Gain_Mode_Res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Module_Buy_Gain_Mode_Res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Module_Buy_Gain_Mode_Res, module_info_),
  };
  GS2C_Module_Buy_Gain_Mode_Res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Module_Buy_Gain_Mode_Res_descriptor_,
      GS2C_Module_Buy_Gain_Mode_Res::default_instance_,
      GS2C_Module_Buy_Gain_Mode_Res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Module_Buy_Gain_Mode_Res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Module_Buy_Gain_Mode_Res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Module_Buy_Gain_Mode_Res));
  GS2C_Building_Update_descriptor_ = file->message_type(11);
  static const int GS2C_Building_Update_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Building_Update, module_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Building_Update, building_info_),
  };
  GS2C_Building_Update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Building_Update_descriptor_,
      GS2C_Building_Update::default_instance_,
      GS2C_Building_Update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Building_Update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Building_Update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Building_Update));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Module_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_Module_descriptor_, &GxDB_Module::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_Building_descriptor_, &GxDB_Building::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_Modules_Info_descriptor_, &GxDB_Modules_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_Buildings_Info_descriptor_, &GxDB_Buildings_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Building_State_descriptor_, &C2GS_Building_State::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Building_State_descriptor_, &GS2C_Building_State::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Building_Level_Up_descriptor_, &C2GS_Building_Level_Up::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Building_Level_Up_Begin_descriptor_, &GS2C_Building_Level_Up_Begin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Building_Level_Up_Begin_lv_up_info_descriptor_, &GS2C_Building_Level_Up_Begin_lv_up_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Building_Level_Up_descriptor_, &GS2C_Building_Level_Up::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Building_Gold_Hammer_descriptor_, &GS2C_Building_Gold_Hammer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Module_Buy_Gain_Mode_Res_descriptor_, &GS2C_Module_Buy_Gain_Mode_Res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Building_Update_descriptor_, &GS2C_Building_Update::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Module_2eproto() {
  delete GxDB_Module::default_instance_;
  delete GxDB_Module_reflection_;
  delete GxDB_Building::default_instance_;
  delete GxDB_Building_reflection_;
  delete GxDB_Modules_Info::default_instance_;
  delete GxDB_Modules_Info_reflection_;
  delete GxDB_Buildings_Info::default_instance_;
  delete GxDB_Buildings_Info_reflection_;
  delete C2GS_Building_State::default_instance_;
  delete C2GS_Building_State_reflection_;
  delete GS2C_Building_State::default_instance_;
  delete GS2C_Building_State_reflection_;
  delete C2GS_Building_Level_Up::default_instance_;
  delete C2GS_Building_Level_Up_reflection_;
  delete GS2C_Building_Level_Up_Begin::default_instance_;
  delete GS2C_Building_Level_Up_Begin_reflection_;
  delete GS2C_Building_Level_Up_Begin_lv_up_info::default_instance_;
  delete GS2C_Building_Level_Up_Begin_lv_up_info_reflection_;
  delete GS2C_Building_Level_Up::default_instance_;
  delete GS2C_Building_Level_Up_reflection_;
  delete GS2C_Building_Gold_Hammer::default_instance_;
  delete GS2C_Building_Gold_Hammer_reflection_;
  delete GS2C_Module_Buy_Gain_Mode_Res::default_instance_;
  delete GS2C_Module_Buy_Gain_Mode_Res_reflection_;
  delete GS2C_Building_Update::default_instance_;
  delete GS2C_Building_Update_reflection_;
}

void protobuf_AddDesc_Module_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Module.proto\022\002pb\"\211\001\n\013GxDB_Module\022\021\n\tmo"
    "dule_id\030\001 \001(\r\022\021\n\tgain_mode\030\002 \001(\r\022\023\n\013expi"
    "re_time\030\003 \001(\004\022\022\n\nis_rebuild\030\004 \001(\010\022\027\n\017gai"
    "n_start_time\030\005 \001(\004\022\022\n\ngain_value\030\006 \001(\r\"f"
    "\n\rGxDB_Building\022\023\n\013building_id\030\001 \001(\r\022\023\n\013"
    "building_lv\030\002 \001(\r\022\027\n\017lvup_start_time\030\003 \001"
    "(\004\022\022\n\nis_rebuild\030\004 \001(\010\"8\n\021GxDB_Modules_I"
    "nfo\022#\n\nmodule_arr\030\001 \003(\0132\017.pb.GxDB_Module"
    "\">\n\023GxDB_Buildings_Info\022\'\n\014building_arr\030"
    "\001 \003(\0132\021.pb.GxDB_Building\"(\n\023C2GS_Buildin"
    "g_State\022\021\n\tmodule_id\030\001 \001(\r\"|\n\023GS2C_Build"
    "ing_State\022\037\n\006module\030\001 \001(\0132\017.pb.GxDB_Modu"
    "le\022)\n\016building_state\030\002 \003(\0132\021.pb.GxDB_Bui"
    "lding\022\031\n\021remain_auto_times\030\003 \001(\r\"Q\n\026C2GS"
    "_Building_Level_Up\022\017\n\007is_auto\030\001 \002(\010\022\023\n\013b"
    "uilding_id\030\002 \001(\r\022\021\n\tmodule_id\030\003 \001(\r\"\312\001\n\034"
    "GS2C_Building_Level_Up_Begin\022\021\n\tmodule_i"
    "d\030\001 \001(\r\022\031\n\021remain_auto_times\030\002 \001(\r\022@\n\013bu"
    "ild_state\030\003 \003(\0132+.pb.GS2C_Building_Level"
    "_Up_Begin.lv_up_info\032:\n\nlv_up_info\022\023\n\013bu"
    "ilding_id\030\001 \001(\r\022\027\n\017lvup_start_time\030\002 \001(\004"
    "\"U\n\026GS2C_Building_Level_Up\022\023\n\013building_i"
    "d\030\001 \002(\r\022\021\n\tmodule_id\030\002 \002(\r\022\023\n\013building_l"
    "v\030\003 \002(\r\"O\n\031GS2C_Building_Gold_Hammer\0222\n\016"
    "building_lv_up\030\001 \003(\0132\032.pb.GS2C_Building_"
    "Level_Up\"Y\n\035GS2C_Module_Buy_Gain_Mode_Re"
    "s\022\022\n\nerror_code\030\001 \002(\r\022$\n\013module_Info\030\002 \001"
    "(\0132\017.pb.GxDB_Module\"S\n\024GS2C_Building_Upd"
    "ate\022\021\n\tmodule_id\030\001 \002(\r\022(\n\rbuilding_info\030"
    "\002 \001(\0132\021.pb.GxDB_Building", 1184);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Module.proto", &protobuf_RegisterTypes);
  GxDB_Module::default_instance_ = new GxDB_Module();
  GxDB_Building::default_instance_ = new GxDB_Building();
  GxDB_Modules_Info::default_instance_ = new GxDB_Modules_Info();
  GxDB_Buildings_Info::default_instance_ = new GxDB_Buildings_Info();
  C2GS_Building_State::default_instance_ = new C2GS_Building_State();
  GS2C_Building_State::default_instance_ = new GS2C_Building_State();
  C2GS_Building_Level_Up::default_instance_ = new C2GS_Building_Level_Up();
  GS2C_Building_Level_Up_Begin::default_instance_ = new GS2C_Building_Level_Up_Begin();
  GS2C_Building_Level_Up_Begin_lv_up_info::default_instance_ = new GS2C_Building_Level_Up_Begin_lv_up_info();
  GS2C_Building_Level_Up::default_instance_ = new GS2C_Building_Level_Up();
  GS2C_Building_Gold_Hammer::default_instance_ = new GS2C_Building_Gold_Hammer();
  GS2C_Module_Buy_Gain_Mode_Res::default_instance_ = new GS2C_Module_Buy_Gain_Mode_Res();
  GS2C_Building_Update::default_instance_ = new GS2C_Building_Update();
  GxDB_Module::default_instance_->InitAsDefaultInstance();
  GxDB_Building::default_instance_->InitAsDefaultInstance();
  GxDB_Modules_Info::default_instance_->InitAsDefaultInstance();
  GxDB_Buildings_Info::default_instance_->InitAsDefaultInstance();
  C2GS_Building_State::default_instance_->InitAsDefaultInstance();
  GS2C_Building_State::default_instance_->InitAsDefaultInstance();
  C2GS_Building_Level_Up::default_instance_->InitAsDefaultInstance();
  GS2C_Building_Level_Up_Begin::default_instance_->InitAsDefaultInstance();
  GS2C_Building_Level_Up_Begin_lv_up_info::default_instance_->InitAsDefaultInstance();
  GS2C_Building_Level_Up::default_instance_->InitAsDefaultInstance();
  GS2C_Building_Gold_Hammer::default_instance_->InitAsDefaultInstance();
  GS2C_Module_Buy_Gain_Mode_Res::default_instance_->InitAsDefaultInstance();
  GS2C_Building_Update::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Module_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Module_2eproto {
  StaticDescriptorInitializer_Module_2eproto() {
    protobuf_AddDesc_Module_2eproto();
  }
} static_descriptor_initializer_Module_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GxDB_Module::kModuleIdFieldNumber;
const int GxDB_Module::kGainModeFieldNumber;
const int GxDB_Module::kExpireTimeFieldNumber;
const int GxDB_Module::kIsRebuildFieldNumber;
const int GxDB_Module::kGainStartTimeFieldNumber;
const int GxDB_Module::kGainValueFieldNumber;
#endif  // !_MSC_VER

GxDB_Module::GxDB_Module()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_Module::InitAsDefaultInstance() {
}

GxDB_Module::GxDB_Module(const GxDB_Module& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_Module::SharedCtor() {
  _cached_size_ = 0;
  module_id_ = 0u;
  gain_mode_ = 0u;
  expire_time_ = GOOGLE_ULONGLONG(0);
  is_rebuild_ = false;
  gain_start_time_ = GOOGLE_ULONGLONG(0);
  gain_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_Module::~GxDB_Module() {
  SharedDtor();
}

void GxDB_Module::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_Module::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_Module::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_Module_descriptor_;
}

const GxDB_Module& GxDB_Module::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Module_2eproto();
  return *default_instance_;
}

GxDB_Module* GxDB_Module::default_instance_ = NULL;

GxDB_Module* GxDB_Module::New() const {
  return new GxDB_Module;
}

void GxDB_Module::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    module_id_ = 0u;
    gain_mode_ = 0u;
    expire_time_ = GOOGLE_ULONGLONG(0);
    is_rebuild_ = false;
    gain_start_time_ = GOOGLE_ULONGLONG(0);
    gain_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_Module::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 module_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &module_id_)));
          set_has_module_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gain_mode;
        break;
      }

      // optional uint32 gain_mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gain_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gain_mode_)));
          set_has_gain_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_expire_time;
        break;
      }

      // optional uint64 expire_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_rebuild;
        break;
      }

      // optional bool is_rebuild = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_rebuild:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_rebuild_)));
          set_has_is_rebuild();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gain_start_time;
        break;
      }

      // optional uint64 gain_start_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gain_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gain_start_time_)));
          set_has_gain_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gain_value;
        break;
      }

      // optional uint32 gain_value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gain_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gain_value_)));
          set_has_gain_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_Module::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 module_id = 1;
  if (has_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->module_id(), output);
  }

  // optional uint32 gain_mode = 2;
  if (has_gain_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gain_mode(), output);
  }

  // optional uint64 expire_time = 3;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->expire_time(), output);
  }

  // optional bool is_rebuild = 4;
  if (has_is_rebuild()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_rebuild(), output);
  }

  // optional uint64 gain_start_time = 5;
  if (has_gain_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->gain_start_time(), output);
  }

  // optional uint32 gain_value = 6;
  if (has_gain_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->gain_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_Module::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 module_id = 1;
  if (has_module_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->module_id(), target);
  }

  // optional uint32 gain_mode = 2;
  if (has_gain_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gain_mode(), target);
  }

  // optional uint64 expire_time = 3;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->expire_time(), target);
  }

  // optional bool is_rebuild = 4;
  if (has_is_rebuild()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_rebuild(), target);
  }

  // optional uint64 gain_start_time = 5;
  if (has_gain_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->gain_start_time(), target);
  }

  // optional uint32 gain_value = 6;
  if (has_gain_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->gain_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_Module::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 module_id = 1;
    if (has_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->module_id());
    }

    // optional uint32 gain_mode = 2;
    if (has_gain_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gain_mode());
    }

    // optional uint64 expire_time = 3;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expire_time());
    }

    // optional bool is_rebuild = 4;
    if (has_is_rebuild()) {
      total_size += 1 + 1;
    }

    // optional uint64 gain_start_time = 5;
    if (has_gain_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gain_start_time());
    }

    // optional uint32 gain_value = 6;
    if (has_gain_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gain_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_Module::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_Module* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_Module*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_Module::MergeFrom(const GxDB_Module& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module_id()) {
      set_module_id(from.module_id());
    }
    if (from.has_gain_mode()) {
      set_gain_mode(from.gain_mode());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
    if (from.has_is_rebuild()) {
      set_is_rebuild(from.is_rebuild());
    }
    if (from.has_gain_start_time()) {
      set_gain_start_time(from.gain_start_time());
    }
    if (from.has_gain_value()) {
      set_gain_value(from.gain_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_Module::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_Module::CopyFrom(const GxDB_Module& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_Module::IsInitialized() const {

  return true;
}

void GxDB_Module::Swap(GxDB_Module* other) {
  if (other != this) {
    std::swap(module_id_, other->module_id_);
    std::swap(gain_mode_, other->gain_mode_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(is_rebuild_, other->is_rebuild_);
    std::swap(gain_start_time_, other->gain_start_time_);
    std::swap(gain_value_, other->gain_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_Module::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_Module_descriptor_;
  metadata.reflection = GxDB_Module_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_Building::kBuildingIdFieldNumber;
const int GxDB_Building::kBuildingLvFieldNumber;
const int GxDB_Building::kLvupStartTimeFieldNumber;
const int GxDB_Building::kIsRebuildFieldNumber;
#endif  // !_MSC_VER

GxDB_Building::GxDB_Building()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_Building::InitAsDefaultInstance() {
}

GxDB_Building::GxDB_Building(const GxDB_Building& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_Building::SharedCtor() {
  _cached_size_ = 0;
  building_id_ = 0u;
  building_lv_ = 0u;
  lvup_start_time_ = GOOGLE_ULONGLONG(0);
  is_rebuild_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_Building::~GxDB_Building() {
  SharedDtor();
}

void GxDB_Building::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_Building::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_Building::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_Building_descriptor_;
}

const GxDB_Building& GxDB_Building::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Module_2eproto();
  return *default_instance_;
}

GxDB_Building* GxDB_Building::default_instance_ = NULL;

GxDB_Building* GxDB_Building::New() const {
  return new GxDB_Building;
}

void GxDB_Building::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    building_id_ = 0u;
    building_lv_ = 0u;
    lvup_start_time_ = GOOGLE_ULONGLONG(0);
    is_rebuild_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_Building::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 building_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &building_id_)));
          set_has_building_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_building_lv;
        break;
      }

      // optional uint32 building_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_building_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &building_lv_)));
          set_has_building_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lvup_start_time;
        break;
      }

      // optional uint64 lvup_start_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvup_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lvup_start_time_)));
          set_has_lvup_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_rebuild;
        break;
      }

      // optional bool is_rebuild = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_rebuild:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_rebuild_)));
          set_has_is_rebuild();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_Building::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 building_id = 1;
  if (has_building_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->building_id(), output);
  }

  // optional uint32 building_lv = 2;
  if (has_building_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->building_lv(), output);
  }

  // optional uint64 lvup_start_time = 3;
  if (has_lvup_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lvup_start_time(), output);
  }

  // optional bool is_rebuild = 4;
  if (has_is_rebuild()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_rebuild(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_Building::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 building_id = 1;
  if (has_building_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->building_id(), target);
  }

  // optional uint32 building_lv = 2;
  if (has_building_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->building_lv(), target);
  }

  // optional uint64 lvup_start_time = 3;
  if (has_lvup_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lvup_start_time(), target);
  }

  // optional bool is_rebuild = 4;
  if (has_is_rebuild()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_rebuild(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_Building::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 building_id = 1;
    if (has_building_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->building_id());
    }

    // optional uint32 building_lv = 2;
    if (has_building_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->building_lv());
    }

    // optional uint64 lvup_start_time = 3;
    if (has_lvup_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lvup_start_time());
    }

    // optional bool is_rebuild = 4;
    if (has_is_rebuild()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_Building::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_Building* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_Building*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_Building::MergeFrom(const GxDB_Building& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_building_id()) {
      set_building_id(from.building_id());
    }
    if (from.has_building_lv()) {
      set_building_lv(from.building_lv());
    }
    if (from.has_lvup_start_time()) {
      set_lvup_start_time(from.lvup_start_time());
    }
    if (from.has_is_rebuild()) {
      set_is_rebuild(from.is_rebuild());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_Building::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_Building::CopyFrom(const GxDB_Building& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_Building::IsInitialized() const {

  return true;
}

void GxDB_Building::Swap(GxDB_Building* other) {
  if (other != this) {
    std::swap(building_id_, other->building_id_);
    std::swap(building_lv_, other->building_lv_);
    std::swap(lvup_start_time_, other->lvup_start_time_);
    std::swap(is_rebuild_, other->is_rebuild_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_Building::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_Building_descriptor_;
  metadata.reflection = GxDB_Building_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_Modules_Info::kModuleArrFieldNumber;
#endif  // !_MSC_VER

GxDB_Modules_Info::GxDB_Modules_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_Modules_Info::InitAsDefaultInstance() {
}

GxDB_Modules_Info::GxDB_Modules_Info(const GxDB_Modules_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_Modules_Info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_Modules_Info::~GxDB_Modules_Info() {
  SharedDtor();
}

void GxDB_Modules_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_Modules_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_Modules_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_Modules_Info_descriptor_;
}

const GxDB_Modules_Info& GxDB_Modules_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Module_2eproto();
  return *default_instance_;
}

GxDB_Modules_Info* GxDB_Modules_Info::default_instance_ = NULL;

GxDB_Modules_Info* GxDB_Modules_Info::New() const {
  return new GxDB_Modules_Info;
}

void GxDB_Modules_Info::Clear() {
  module_arr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_Modules_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GxDB_Module module_arr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_module_arr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_module_arr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_module_arr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_Modules_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GxDB_Module module_arr = 1;
  for (int i = 0; i < this->module_arr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->module_arr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_Modules_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GxDB_Module module_arr = 1;
  for (int i = 0; i < this->module_arr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->module_arr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_Modules_Info::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GxDB_Module module_arr = 1;
  total_size += 1 * this->module_arr_size();
  for (int i = 0; i < this->module_arr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->module_arr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_Modules_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_Modules_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_Modules_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_Modules_Info::MergeFrom(const GxDB_Modules_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  module_arr_.MergeFrom(from.module_arr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_Modules_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_Modules_Info::CopyFrom(const GxDB_Modules_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_Modules_Info::IsInitialized() const {

  return true;
}

void GxDB_Modules_Info::Swap(GxDB_Modules_Info* other) {
  if (other != this) {
    module_arr_.Swap(&other->module_arr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_Modules_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_Modules_Info_descriptor_;
  metadata.reflection = GxDB_Modules_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_Buildings_Info::kBuildingArrFieldNumber;
#endif  // !_MSC_VER

GxDB_Buildings_Info::GxDB_Buildings_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_Buildings_Info::InitAsDefaultInstance() {
}

GxDB_Buildings_Info::GxDB_Buildings_Info(const GxDB_Buildings_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_Buildings_Info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_Buildings_Info::~GxDB_Buildings_Info() {
  SharedDtor();
}

void GxDB_Buildings_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_Buildings_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_Buildings_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_Buildings_Info_descriptor_;
}

const GxDB_Buildings_Info& GxDB_Buildings_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Module_2eproto();
  return *default_instance_;
}

GxDB_Buildings_Info* GxDB_Buildings_Info::default_instance_ = NULL;

GxDB_Buildings_Info* GxDB_Buildings_Info::New() const {
  return new GxDB_Buildings_Info;
}

void GxDB_Buildings_Info::Clear() {
  building_arr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_Buildings_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GxDB_Building building_arr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_building_arr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_building_arr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_building_arr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_Buildings_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GxDB_Building building_arr = 1;
  for (int i = 0; i < this->building_arr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->building_arr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_Buildings_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GxDB_Building building_arr = 1;
  for (int i = 0; i < this->building_arr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->building_arr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_Buildings_Info::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GxDB_Building building_arr = 1;
  total_size += 1 * this->building_arr_size();
  for (int i = 0; i < this->building_arr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->building_arr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_Buildings_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_Buildings_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_Buildings_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_Buildings_Info::MergeFrom(const GxDB_Buildings_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  building_arr_.MergeFrom(from.building_arr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_Buildings_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_Buildings_Info::CopyFrom(const GxDB_Buildings_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_Buildings_Info::IsInitialized() const {

  return true;
}

void GxDB_Buildings_Info::Swap(GxDB_Buildings_Info* other) {
  if (other != this) {
    building_arr_.Swap(&other->building_arr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_Buildings_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_Buildings_Info_descriptor_;
  metadata.reflection = GxDB_Buildings_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Building_State::kModuleIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Building_State::C2GS_Building_State()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Building_State::InitAsDefaultInstance() {
}

C2GS_Building_State::C2GS_Building_State(const C2GS_Building_State& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Building_State::SharedCtor() {
  _cached_size_ = 0;
  module_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Building_State::~C2GS_Building_State() {
  SharedDtor();
}

void C2GS_Building_State::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Building_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Building_State::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Building_State_descriptor_;
}

const C2GS_Building_State& C2GS_Building_State::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Module_2eproto();
  return *default_instance_;
}

C2GS_Building_State* C2GS_Building_State::default_instance_ = NULL;

C2GS_Building_State* C2GS_Building_State::New() const {
  return new C2GS_Building_State;
}

void C2GS_Building_State::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    module_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Building_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 module_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &module_id_)));
          set_has_module_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Building_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 module_id = 1;
  if (has_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->module_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Building_State::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 module_id = 1;
  if (has_module_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->module_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Building_State::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 module_id = 1;
    if (has_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->module_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Building_State::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Building_State* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Building_State*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Building_State::MergeFrom(const C2GS_Building_State& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module_id()) {
      set_module_id(from.module_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Building_State::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Building_State::CopyFrom(const C2GS_Building_State& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Building_State::IsInitialized() const {

  return true;
}

void C2GS_Building_State::Swap(C2GS_Building_State* other) {
  if (other != this) {
    std::swap(module_id_, other->module_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Building_State::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Building_State_descriptor_;
  metadata.reflection = C2GS_Building_State_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Building_State::kModuleFieldNumber;
const int GS2C_Building_State::kBuildingStateFieldNumber;
const int GS2C_Building_State::kRemainAutoTimesFieldNumber;
#endif  // !_MSC_VER

GS2C_Building_State::GS2C_Building_State()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Building_State::InitAsDefaultInstance() {
  module_ = const_cast< ::pb::GxDB_Module*>(&::pb::GxDB_Module::default_instance());
}

GS2C_Building_State::GS2C_Building_State(const GS2C_Building_State& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Building_State::SharedCtor() {
  _cached_size_ = 0;
  module_ = NULL;
  remain_auto_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Building_State::~GS2C_Building_State() {
  SharedDtor();
}

void GS2C_Building_State::SharedDtor() {
  if (this != default_instance_) {
    delete module_;
  }
}

void GS2C_Building_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Building_State::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Building_State_descriptor_;
}

const GS2C_Building_State& GS2C_Building_State::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Module_2eproto();
  return *default_instance_;
}

GS2C_Building_State* GS2C_Building_State::default_instance_ = NULL;

GS2C_Building_State* GS2C_Building_State::New() const {
  return new GS2C_Building_State;
}

void GS2C_Building_State::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_module()) {
      if (module_ != NULL) module_->::pb::GxDB_Module::Clear();
    }
    remain_auto_times_ = 0u;
  }
  building_state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Building_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.GxDB_Module module = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_module()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_building_state;
        break;
      }

      // repeated .pb.GxDB_Building building_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_building_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_building_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_building_state;
        if (input->ExpectTag(24)) goto parse_remain_auto_times;
        break;
      }

      // optional uint32 remain_auto_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_auto_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remain_auto_times_)));
          set_has_remain_auto_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Building_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.GxDB_Module module = 1;
  if (has_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->module(), output);
  }

  // repeated .pb.GxDB_Building building_state = 2;
  for (int i = 0; i < this->building_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->building_state(i), output);
  }

  // optional uint32 remain_auto_times = 3;
  if (has_remain_auto_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->remain_auto_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Building_State::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.GxDB_Module module = 1;
  if (has_module()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->module(), target);
  }

  // repeated .pb.GxDB_Building building_state = 2;
  for (int i = 0; i < this->building_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->building_state(i), target);
  }

  // optional uint32 remain_auto_times = 3;
  if (has_remain_auto_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->remain_auto_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Building_State::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.GxDB_Module module = 1;
    if (has_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->module());
    }

    // optional uint32 remain_auto_times = 3;
    if (has_remain_auto_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remain_auto_times());
    }

  }
  // repeated .pb.GxDB_Building building_state = 2;
  total_size += 1 * this->building_state_size();
  for (int i = 0; i < this->building_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->building_state(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Building_State::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Building_State* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Building_State*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Building_State::MergeFrom(const GS2C_Building_State& from) {
  GOOGLE_CHECK_NE(&from, this);
  building_state_.MergeFrom(from.building_state_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module()) {
      mutable_module()->::pb::GxDB_Module::MergeFrom(from.module());
    }
    if (from.has_remain_auto_times()) {
      set_remain_auto_times(from.remain_auto_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Building_State::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Building_State::CopyFrom(const GS2C_Building_State& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Building_State::IsInitialized() const {

  return true;
}

void GS2C_Building_State::Swap(GS2C_Building_State* other) {
  if (other != this) {
    std::swap(module_, other->module_);
    building_state_.Swap(&other->building_state_);
    std::swap(remain_auto_times_, other->remain_auto_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Building_State::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Building_State_descriptor_;
  metadata.reflection = GS2C_Building_State_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Building_Level_Up::kIsAutoFieldNumber;
const int C2GS_Building_Level_Up::kBuildingIdFieldNumber;
const int C2GS_Building_Level_Up::kModuleIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Building_Level_Up::C2GS_Building_Level_Up()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Building_Level_Up::InitAsDefaultInstance() {
}

C2GS_Building_Level_Up::C2GS_Building_Level_Up(const C2GS_Building_Level_Up& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Building_Level_Up::SharedCtor() {
  _cached_size_ = 0;
  is_auto_ = false;
  building_id_ = 0u;
  module_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Building_Level_Up::~C2GS_Building_Level_Up() {
  SharedDtor();
}

void C2GS_Building_Level_Up::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Building_Level_Up::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Building_Level_Up::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Building_Level_Up_descriptor_;
}

const C2GS_Building_Level_Up& C2GS_Building_Level_Up::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Module_2eproto();
  return *default_instance_;
}

C2GS_Building_Level_Up* C2GS_Building_Level_Up::default_instance_ = NULL;

C2GS_Building_Level_Up* C2GS_Building_Level_Up::New() const {
  return new C2GS_Building_Level_Up;
}

void C2GS_Building_Level_Up::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_auto_ = false;
    building_id_ = 0u;
    module_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Building_Level_Up::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_auto = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_auto_)));
          set_has_is_auto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_building_id;
        break;
      }

      // optional uint32 building_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_building_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &building_id_)));
          set_has_building_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_module_id;
        break;
      }

      // optional uint32 module_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_module_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &module_id_)));
          set_has_module_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Building_Level_Up::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_auto = 1;
  if (has_is_auto()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_auto(), output);
  }

  // optional uint32 building_id = 2;
  if (has_building_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->building_id(), output);
  }

  // optional uint32 module_id = 3;
  if (has_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->module_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Building_Level_Up::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_auto = 1;
  if (has_is_auto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_auto(), target);
  }

  // optional uint32 building_id = 2;
  if (has_building_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->building_id(), target);
  }

  // optional uint32 module_id = 3;
  if (has_module_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->module_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Building_Level_Up::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_auto = 1;
    if (has_is_auto()) {
      total_size += 1 + 1;
    }

    // optional uint32 building_id = 2;
    if (has_building_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->building_id());
    }

    // optional uint32 module_id = 3;
    if (has_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->module_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Building_Level_Up::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Building_Level_Up* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Building_Level_Up*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Building_Level_Up::MergeFrom(const C2GS_Building_Level_Up& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_auto()) {
      set_is_auto(from.is_auto());
    }
    if (from.has_building_id()) {
      set_building_id(from.building_id());
    }
    if (from.has_module_id()) {
      set_module_id(from.module_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Building_Level_Up::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Building_Level_Up::CopyFrom(const C2GS_Building_Level_Up& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Building_Level_Up::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Building_Level_Up::Swap(C2GS_Building_Level_Up* other) {
  if (other != this) {
    std::swap(is_auto_, other->is_auto_);
    std::swap(building_id_, other->building_id_);
    std::swap(module_id_, other->module_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Building_Level_Up::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Building_Level_Up_descriptor_;
  metadata.reflection = C2GS_Building_Level_Up_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Building_Level_Up_Begin_lv_up_info::kBuildingIdFieldNumber;
const int GS2C_Building_Level_Up_Begin_lv_up_info::kLvupStartTimeFieldNumber;
#endif  // !_MSC_VER

GS2C_Building_Level_Up_Begin_lv_up_info::GS2C_Building_Level_Up_Begin_lv_up_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Building_Level_Up_Begin_lv_up_info::InitAsDefaultInstance() {
}

GS2C_Building_Level_Up_Begin_lv_up_info::GS2C_Building_Level_Up_Begin_lv_up_info(const GS2C_Building_Level_Up_Begin_lv_up_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Building_Level_Up_Begin_lv_up_info::SharedCtor() {
  _cached_size_ = 0;
  building_id_ = 0u;
  lvup_start_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Building_Level_Up_Begin_lv_up_info::~GS2C_Building_Level_Up_Begin_lv_up_info() {
  SharedDtor();
}

void GS2C_Building_Level_Up_Begin_lv_up_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Building_Level_Up_Begin_lv_up_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Building_Level_Up_Begin_lv_up_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Building_Level_Up_Begin_lv_up_info_descriptor_;
}

const GS2C_Building_Level_Up_Begin_lv_up_info& GS2C_Building_Level_Up_Begin_lv_up_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Module_2eproto();
  return *default_instance_;
}

GS2C_Building_Level_Up_Begin_lv_up_info* GS2C_Building_Level_Up_Begin_lv_up_info::default_instance_ = NULL;

GS2C_Building_Level_Up_Begin_lv_up_info* GS2C_Building_Level_Up_Begin_lv_up_info::New() const {
  return new GS2C_Building_Level_Up_Begin_lv_up_info;
}

void GS2C_Building_Level_Up_Begin_lv_up_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    building_id_ = 0u;
    lvup_start_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Building_Level_Up_Begin_lv_up_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 building_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &building_id_)));
          set_has_building_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lvup_start_time;
        break;
      }

      // optional uint64 lvup_start_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvup_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lvup_start_time_)));
          set_has_lvup_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Building_Level_Up_Begin_lv_up_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 building_id = 1;
  if (has_building_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->building_id(), output);
  }

  // optional uint64 lvup_start_time = 2;
  if (has_lvup_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lvup_start_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Building_Level_Up_Begin_lv_up_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 building_id = 1;
  if (has_building_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->building_id(), target);
  }

  // optional uint64 lvup_start_time = 2;
  if (has_lvup_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lvup_start_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Building_Level_Up_Begin_lv_up_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 building_id = 1;
    if (has_building_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->building_id());
    }

    // optional uint64 lvup_start_time = 2;
    if (has_lvup_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lvup_start_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Building_Level_Up_Begin_lv_up_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Building_Level_Up_Begin_lv_up_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Building_Level_Up_Begin_lv_up_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Building_Level_Up_Begin_lv_up_info::MergeFrom(const GS2C_Building_Level_Up_Begin_lv_up_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_building_id()) {
      set_building_id(from.building_id());
    }
    if (from.has_lvup_start_time()) {
      set_lvup_start_time(from.lvup_start_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Building_Level_Up_Begin_lv_up_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Building_Level_Up_Begin_lv_up_info::CopyFrom(const GS2C_Building_Level_Up_Begin_lv_up_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Building_Level_Up_Begin_lv_up_info::IsInitialized() const {

  return true;
}

void GS2C_Building_Level_Up_Begin_lv_up_info::Swap(GS2C_Building_Level_Up_Begin_lv_up_info* other) {
  if (other != this) {
    std::swap(building_id_, other->building_id_);
    std::swap(lvup_start_time_, other->lvup_start_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Building_Level_Up_Begin_lv_up_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Building_Level_Up_Begin_lv_up_info_descriptor_;
  metadata.reflection = GS2C_Building_Level_Up_Begin_lv_up_info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GS2C_Building_Level_Up_Begin::kModuleIdFieldNumber;
const int GS2C_Building_Level_Up_Begin::kRemainAutoTimesFieldNumber;
const int GS2C_Building_Level_Up_Begin::kBuildStateFieldNumber;
#endif  // !_MSC_VER

GS2C_Building_Level_Up_Begin::GS2C_Building_Level_Up_Begin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Building_Level_Up_Begin::InitAsDefaultInstance() {
}

GS2C_Building_Level_Up_Begin::GS2C_Building_Level_Up_Begin(const GS2C_Building_Level_Up_Begin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Building_Level_Up_Begin::SharedCtor() {
  _cached_size_ = 0;
  module_id_ = 0u;
  remain_auto_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Building_Level_Up_Begin::~GS2C_Building_Level_Up_Begin() {
  SharedDtor();
}

void GS2C_Building_Level_Up_Begin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Building_Level_Up_Begin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Building_Level_Up_Begin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Building_Level_Up_Begin_descriptor_;
}

const GS2C_Building_Level_Up_Begin& GS2C_Building_Level_Up_Begin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Module_2eproto();
  return *default_instance_;
}

GS2C_Building_Level_Up_Begin* GS2C_Building_Level_Up_Begin::default_instance_ = NULL;

GS2C_Building_Level_Up_Begin* GS2C_Building_Level_Up_Begin::New() const {
  return new GS2C_Building_Level_Up_Begin;
}

void GS2C_Building_Level_Up_Begin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    module_id_ = 0u;
    remain_auto_times_ = 0u;
  }
  build_state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Building_Level_Up_Begin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 module_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &module_id_)));
          set_has_module_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_remain_auto_times;
        break;
      }

      // optional uint32 remain_auto_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_auto_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remain_auto_times_)));
          set_has_remain_auto_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_build_state;
        break;
      }

      // repeated .pb.GS2C_Building_Level_Up_Begin.lv_up_info build_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_build_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_build_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_build_state;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Building_Level_Up_Begin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 module_id = 1;
  if (has_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->module_id(), output);
  }

  // optional uint32 remain_auto_times = 2;
  if (has_remain_auto_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remain_auto_times(), output);
  }

  // repeated .pb.GS2C_Building_Level_Up_Begin.lv_up_info build_state = 3;
  for (int i = 0; i < this->build_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->build_state(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Building_Level_Up_Begin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 module_id = 1;
  if (has_module_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->module_id(), target);
  }

  // optional uint32 remain_auto_times = 2;
  if (has_remain_auto_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->remain_auto_times(), target);
  }

  // repeated .pb.GS2C_Building_Level_Up_Begin.lv_up_info build_state = 3;
  for (int i = 0; i < this->build_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->build_state(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Building_Level_Up_Begin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 module_id = 1;
    if (has_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->module_id());
    }

    // optional uint32 remain_auto_times = 2;
    if (has_remain_auto_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remain_auto_times());
    }

  }
  // repeated .pb.GS2C_Building_Level_Up_Begin.lv_up_info build_state = 3;
  total_size += 1 * this->build_state_size();
  for (int i = 0; i < this->build_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->build_state(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Building_Level_Up_Begin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Building_Level_Up_Begin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Building_Level_Up_Begin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Building_Level_Up_Begin::MergeFrom(const GS2C_Building_Level_Up_Begin& from) {
  GOOGLE_CHECK_NE(&from, this);
  build_state_.MergeFrom(from.build_state_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module_id()) {
      set_module_id(from.module_id());
    }
    if (from.has_remain_auto_times()) {
      set_remain_auto_times(from.remain_auto_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Building_Level_Up_Begin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Building_Level_Up_Begin::CopyFrom(const GS2C_Building_Level_Up_Begin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Building_Level_Up_Begin::IsInitialized() const {

  return true;
}

void GS2C_Building_Level_Up_Begin::Swap(GS2C_Building_Level_Up_Begin* other) {
  if (other != this) {
    std::swap(module_id_, other->module_id_);
    std::swap(remain_auto_times_, other->remain_auto_times_);
    build_state_.Swap(&other->build_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Building_Level_Up_Begin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Building_Level_Up_Begin_descriptor_;
  metadata.reflection = GS2C_Building_Level_Up_Begin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Building_Level_Up::kBuildingIdFieldNumber;
const int GS2C_Building_Level_Up::kModuleIdFieldNumber;
const int GS2C_Building_Level_Up::kBuildingLvFieldNumber;
#endif  // !_MSC_VER

GS2C_Building_Level_Up::GS2C_Building_Level_Up()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Building_Level_Up::InitAsDefaultInstance() {
}

GS2C_Building_Level_Up::GS2C_Building_Level_Up(const GS2C_Building_Level_Up& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Building_Level_Up::SharedCtor() {
  _cached_size_ = 0;
  building_id_ = 0u;
  module_id_ = 0u;
  building_lv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Building_Level_Up::~GS2C_Building_Level_Up() {
  SharedDtor();
}

void GS2C_Building_Level_Up::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Building_Level_Up::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Building_Level_Up::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Building_Level_Up_descriptor_;
}

const GS2C_Building_Level_Up& GS2C_Building_Level_Up::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Module_2eproto();
  return *default_instance_;
}

GS2C_Building_Level_Up* GS2C_Building_Level_Up::default_instance_ = NULL;

GS2C_Building_Level_Up* GS2C_Building_Level_Up::New() const {
  return new GS2C_Building_Level_Up;
}

void GS2C_Building_Level_Up::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    building_id_ = 0u;
    module_id_ = 0u;
    building_lv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Building_Level_Up::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 building_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &building_id_)));
          set_has_building_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_module_id;
        break;
      }

      // required uint32 module_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_module_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &module_id_)));
          set_has_module_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_building_lv;
        break;
      }

      // required uint32 building_lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_building_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &building_lv_)));
          set_has_building_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Building_Level_Up::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 building_id = 1;
  if (has_building_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->building_id(), output);
  }

  // required uint32 module_id = 2;
  if (has_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->module_id(), output);
  }

  // required uint32 building_lv = 3;
  if (has_building_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->building_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Building_Level_Up::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 building_id = 1;
  if (has_building_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->building_id(), target);
  }

  // required uint32 module_id = 2;
  if (has_module_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->module_id(), target);
  }

  // required uint32 building_lv = 3;
  if (has_building_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->building_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Building_Level_Up::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 building_id = 1;
    if (has_building_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->building_id());
    }

    // required uint32 module_id = 2;
    if (has_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->module_id());
    }

    // required uint32 building_lv = 3;
    if (has_building_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->building_lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Building_Level_Up::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Building_Level_Up* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Building_Level_Up*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Building_Level_Up::MergeFrom(const GS2C_Building_Level_Up& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_building_id()) {
      set_building_id(from.building_id());
    }
    if (from.has_module_id()) {
      set_module_id(from.module_id());
    }
    if (from.has_building_lv()) {
      set_building_lv(from.building_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Building_Level_Up::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Building_Level_Up::CopyFrom(const GS2C_Building_Level_Up& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Building_Level_Up::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GS2C_Building_Level_Up::Swap(GS2C_Building_Level_Up* other) {
  if (other != this) {
    std::swap(building_id_, other->building_id_);
    std::swap(module_id_, other->module_id_);
    std::swap(building_lv_, other->building_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Building_Level_Up::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Building_Level_Up_descriptor_;
  metadata.reflection = GS2C_Building_Level_Up_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Building_Gold_Hammer::kBuildingLvUpFieldNumber;
#endif  // !_MSC_VER

GS2C_Building_Gold_Hammer::GS2C_Building_Gold_Hammer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Building_Gold_Hammer::InitAsDefaultInstance() {
}

GS2C_Building_Gold_Hammer::GS2C_Building_Gold_Hammer(const GS2C_Building_Gold_Hammer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Building_Gold_Hammer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Building_Gold_Hammer::~GS2C_Building_Gold_Hammer() {
  SharedDtor();
}

void GS2C_Building_Gold_Hammer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Building_Gold_Hammer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Building_Gold_Hammer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Building_Gold_Hammer_descriptor_;
}

const GS2C_Building_Gold_Hammer& GS2C_Building_Gold_Hammer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Module_2eproto();
  return *default_instance_;
}

GS2C_Building_Gold_Hammer* GS2C_Building_Gold_Hammer::default_instance_ = NULL;

GS2C_Building_Gold_Hammer* GS2C_Building_Gold_Hammer::New() const {
  return new GS2C_Building_Gold_Hammer;
}

void GS2C_Building_Gold_Hammer::Clear() {
  building_lv_up_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Building_Gold_Hammer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GS2C_Building_Level_Up building_lv_up = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_building_lv_up:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_building_lv_up()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_building_lv_up;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Building_Gold_Hammer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GS2C_Building_Level_Up building_lv_up = 1;
  for (int i = 0; i < this->building_lv_up_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->building_lv_up(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Building_Gold_Hammer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GS2C_Building_Level_Up building_lv_up = 1;
  for (int i = 0; i < this->building_lv_up_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->building_lv_up(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Building_Gold_Hammer::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GS2C_Building_Level_Up building_lv_up = 1;
  total_size += 1 * this->building_lv_up_size();
  for (int i = 0; i < this->building_lv_up_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->building_lv_up(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Building_Gold_Hammer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Building_Gold_Hammer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Building_Gold_Hammer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Building_Gold_Hammer::MergeFrom(const GS2C_Building_Gold_Hammer& from) {
  GOOGLE_CHECK_NE(&from, this);
  building_lv_up_.MergeFrom(from.building_lv_up_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Building_Gold_Hammer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Building_Gold_Hammer::CopyFrom(const GS2C_Building_Gold_Hammer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Building_Gold_Hammer::IsInitialized() const {

  for (int i = 0; i < building_lv_up_size(); i++) {
    if (!this->building_lv_up(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Building_Gold_Hammer::Swap(GS2C_Building_Gold_Hammer* other) {
  if (other != this) {
    building_lv_up_.Swap(&other->building_lv_up_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Building_Gold_Hammer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Building_Gold_Hammer_descriptor_;
  metadata.reflection = GS2C_Building_Gold_Hammer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Module_Buy_Gain_Mode_Res::kErrorCodeFieldNumber;
const int GS2C_Module_Buy_Gain_Mode_Res::kModuleInfoFieldNumber;
#endif  // !_MSC_VER

GS2C_Module_Buy_Gain_Mode_Res::GS2C_Module_Buy_Gain_Mode_Res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Module_Buy_Gain_Mode_Res::InitAsDefaultInstance() {
  module_info_ = const_cast< ::pb::GxDB_Module*>(&::pb::GxDB_Module::default_instance());
}

GS2C_Module_Buy_Gain_Mode_Res::GS2C_Module_Buy_Gain_Mode_Res(const GS2C_Module_Buy_Gain_Mode_Res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Module_Buy_Gain_Mode_Res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  module_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Module_Buy_Gain_Mode_Res::~GS2C_Module_Buy_Gain_Mode_Res() {
  SharedDtor();
}

void GS2C_Module_Buy_Gain_Mode_Res::SharedDtor() {
  if (this != default_instance_) {
    delete module_info_;
  }
}

void GS2C_Module_Buy_Gain_Mode_Res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Module_Buy_Gain_Mode_Res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Module_Buy_Gain_Mode_Res_descriptor_;
}

const GS2C_Module_Buy_Gain_Mode_Res& GS2C_Module_Buy_Gain_Mode_Res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Module_2eproto();
  return *default_instance_;
}

GS2C_Module_Buy_Gain_Mode_Res* GS2C_Module_Buy_Gain_Mode_Res::default_instance_ = NULL;

GS2C_Module_Buy_Gain_Mode_Res* GS2C_Module_Buy_Gain_Mode_Res::New() const {
  return new GS2C_Module_Buy_Gain_Mode_Res;
}

void GS2C_Module_Buy_Gain_Mode_Res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    if (has_module_info()) {
      if (module_info_ != NULL) module_info_->::pb::GxDB_Module::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Module_Buy_Gain_Mode_Res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_module_Info;
        break;
      }

      // optional .pb.GxDB_Module module_Info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_module_Info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_module_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Module_Buy_Gain_Mode_Res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // optional .pb.GxDB_Module module_Info = 2;
  if (has_module_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->module_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Module_Buy_Gain_Mode_Res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // optional .pb.GxDB_Module module_Info = 2;
  if (has_module_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->module_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Module_Buy_Gain_Mode_Res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // optional .pb.GxDB_Module module_Info = 2;
    if (has_module_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->module_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Module_Buy_Gain_Mode_Res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Module_Buy_Gain_Mode_Res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Module_Buy_Gain_Mode_Res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Module_Buy_Gain_Mode_Res::MergeFrom(const GS2C_Module_Buy_Gain_Mode_Res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_module_info()) {
      mutable_module_info()->::pb::GxDB_Module::MergeFrom(from.module_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Module_Buy_Gain_Mode_Res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Module_Buy_Gain_Mode_Res::CopyFrom(const GS2C_Module_Buy_Gain_Mode_Res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Module_Buy_Gain_Mode_Res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Module_Buy_Gain_Mode_Res::Swap(GS2C_Module_Buy_Gain_Mode_Res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(module_info_, other->module_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Module_Buy_Gain_Mode_Res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Module_Buy_Gain_Mode_Res_descriptor_;
  metadata.reflection = GS2C_Module_Buy_Gain_Mode_Res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Building_Update::kModuleIdFieldNumber;
const int GS2C_Building_Update::kBuildingInfoFieldNumber;
#endif  // !_MSC_VER

GS2C_Building_Update::GS2C_Building_Update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Building_Update::InitAsDefaultInstance() {
  building_info_ = const_cast< ::pb::GxDB_Building*>(&::pb::GxDB_Building::default_instance());
}

GS2C_Building_Update::GS2C_Building_Update(const GS2C_Building_Update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Building_Update::SharedCtor() {
  _cached_size_ = 0;
  module_id_ = 0u;
  building_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Building_Update::~GS2C_Building_Update() {
  SharedDtor();
}

void GS2C_Building_Update::SharedDtor() {
  if (this != default_instance_) {
    delete building_info_;
  }
}

void GS2C_Building_Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Building_Update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Building_Update_descriptor_;
}

const GS2C_Building_Update& GS2C_Building_Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Module_2eproto();
  return *default_instance_;
}

GS2C_Building_Update* GS2C_Building_Update::default_instance_ = NULL;

GS2C_Building_Update* GS2C_Building_Update::New() const {
  return new GS2C_Building_Update;
}

void GS2C_Building_Update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    module_id_ = 0u;
    if (has_building_info()) {
      if (building_info_ != NULL) building_info_->::pb::GxDB_Building::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Building_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 module_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &module_id_)));
          set_has_module_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_building_info;
        break;
      }

      // optional .pb.GxDB_Building building_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_building_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_building_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Building_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 module_id = 1;
  if (has_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->module_id(), output);
  }

  // optional .pb.GxDB_Building building_info = 2;
  if (has_building_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->building_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Building_Update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 module_id = 1;
  if (has_module_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->module_id(), target);
  }

  // optional .pb.GxDB_Building building_info = 2;
  if (has_building_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->building_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Building_Update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 module_id = 1;
    if (has_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->module_id());
    }

    // optional .pb.GxDB_Building building_info = 2;
    if (has_building_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->building_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Building_Update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Building_Update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Building_Update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Building_Update::MergeFrom(const GS2C_Building_Update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module_id()) {
      set_module_id(from.module_id());
    }
    if (from.has_building_info()) {
      mutable_building_info()->::pb::GxDB_Building::MergeFrom(from.building_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Building_Update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Building_Update::CopyFrom(const GS2C_Building_Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Building_Update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Building_Update::Swap(GS2C_Building_Update* other) {
  if (other != this) {
    std::swap(module_id_, other->module_id_);
    std::swap(building_info_, other->building_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Building_Update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Building_Update_descriptor_;
  metadata.reflection = GS2C_Building_Update_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
