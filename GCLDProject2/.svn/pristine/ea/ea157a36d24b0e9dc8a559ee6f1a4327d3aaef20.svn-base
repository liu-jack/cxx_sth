// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Social.proto

#ifndef PROTOBUF_Social_2eproto__INCLUDED
#define PROTOBUF_Social_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Item.pb.h"
#include "Character.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Social_2eproto();
void protobuf_AssignDesc_Social_2eproto();
void protobuf_ShutdownFile_Social_2eproto();

class GS2C_Chat_Respon;
class C2GS_Chat;
class GxDB_ChatInfoData;
class MsgPlayerBaseInfo;
class MsgPlayerTeamInfo;
class MsgPlayerBaseData;
class GS2C_Get_Player_Info_Respone;
class C2GS_Friend_Ap_Opearate;
class GS2C_Friend_Ap_Opearate_Res;
class GS2C_Friend_Ap_Opearate_Res_opt_result;
class Friend_list_Record;
class C2GS_FriendAdd;
class GS2C_FriendAdd_Result;
class C2GS_FriendAdd_Respon;
class GS2C_FriendAdd_Respon;
class C2GS_FriendDel;
class GS2C_FriendDel_Respon;
class GS2C_FriendListInfo;
class C2GS_Friend_Search;
class GS2C_Friend_Search_Respone;
class GxDB_FriendInfo;
class GxDB_GuildInfo;
class GxDB_GMember_Info;
class GxDB_Guild_Member;
class GxDB_Guild;
class GxDB_Guilds;
class C2GS_Guild_Leaderboard_Search;
class GS2C_Guild_Leaderboard_Search;
class C2GS_Guild_Player_Search;
class GS2C_Guild_Player_Search_Respone;
class C2GS_Guild_Add;
class GS2C_Guild_Add_Respon;
class GS2C_Guild_Change;
class GS2C_Get_Guild_Info_Respon;
class C2GS_GuildInvite;
class GS2C_GuildInvite;
class C2GS_GuildInviteResponse;
class GS2C_GuildInviteResponse;
class C2GS_GuildInviterApproval;
class GS2C_GuildInviterApprovalResponse;
class GS2C_GuildInvite_Repeat;
class C2GS_GuildInvite_Repeat_Operate;
class GS2C_GuildInvite_Repeat_Operate_Respon;
class C2GS_GuildQuit;
class GS2C_GuildQuit_Respon;
class GS2C_GuildMemberQuit;
class GS2C_GuildDisband;
class C2GS_GuildUpdate;
class GS2C_GuildUpdate;
class C2GS_Guild_Autority_Operate;
class GS2C_Guild_Autority_Operate_Respon;
class C2GS_GuildUpdate_Member;
class GS2C_GuildUpdate_Member;
class GS2C_Update_Respon;
class C2GS_GuildName_Check;
class GS2C_GuildName_Check_Respon;
class GS2C_Guild_Notify;
class GS2C_Guild_Dynamic_Event;
class GS2C_Guild_Dynamic_Event_Log;
class GS2G_GuildUpdate;

enum CHAT_TYPE {
  CHAT_COUNTRY = 1,
  CHAT_WORLD = 2,
  CHAT_SYSTEM = 3,
  CHAT_COMBAT_BC = 4,
  CHAT_TYPE_COUNT = 5
};
bool CHAT_TYPE_IsValid(int value);
const CHAT_TYPE CHAT_TYPE_MIN = CHAT_COUNTRY;
const CHAT_TYPE CHAT_TYPE_MAX = CHAT_TYPE_COUNT;
const int CHAT_TYPE_ARRAYSIZE = CHAT_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* CHAT_TYPE_descriptor();
inline const ::std::string& CHAT_TYPE_Name(CHAT_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    CHAT_TYPE_descriptor(), value);
}
inline bool CHAT_TYPE_Parse(
    const ::std::string& name, CHAT_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CHAT_TYPE>(
    CHAT_TYPE_descriptor(), name, value);
}
enum MsgPlayerBaseDataType {
  PALYER_BASE_DATA_ALL = 0,
  PLAYER_BASE_DATA_JUST_PVP_BASE_INFO = 1
};
bool MsgPlayerBaseDataType_IsValid(int value);
const MsgPlayerBaseDataType MsgPlayerBaseDataType_MIN = PALYER_BASE_DATA_ALL;
const MsgPlayerBaseDataType MsgPlayerBaseDataType_MAX = PLAYER_BASE_DATA_JUST_PVP_BASE_INFO;
const int MsgPlayerBaseDataType_ARRAYSIZE = MsgPlayerBaseDataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgPlayerBaseDataType_descriptor();
inline const ::std::string& MsgPlayerBaseDataType_Name(MsgPlayerBaseDataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgPlayerBaseDataType_descriptor(), value);
}
inline bool MsgPlayerBaseDataType_Parse(
    const ::std::string& name, MsgPlayerBaseDataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgPlayerBaseDataType>(
    MsgPlayerBaseDataType_descriptor(), name, value);
}
enum ENUM_FRIEND_TYPE {
  FRIEND_TYPE_FRIEND = 0,
  FRIEND_TYPE_IGNORES = 1,
  FRIEND_TYPE_INVITERS = 2,
  FRIEND_TYPE_RECOMMENDS = 3,
  FRIEND_TYPE_COUNT = 4
};
bool ENUM_FRIEND_TYPE_IsValid(int value);
const ENUM_FRIEND_TYPE ENUM_FRIEND_TYPE_MIN = FRIEND_TYPE_FRIEND;
const ENUM_FRIEND_TYPE ENUM_FRIEND_TYPE_MAX = FRIEND_TYPE_COUNT;
const int ENUM_FRIEND_TYPE_ARRAYSIZE = ENUM_FRIEND_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ENUM_FRIEND_TYPE_descriptor();
inline const ::std::string& ENUM_FRIEND_TYPE_Name(ENUM_FRIEND_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ENUM_FRIEND_TYPE_descriptor(), value);
}
inline bool ENUM_FRIEND_TYPE_Parse(
    const ::std::string& name, ENUM_FRIEND_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ENUM_FRIEND_TYPE>(
    ENUM_FRIEND_TYPE_descriptor(), name, value);
}
enum FRIEND_SEARCH_TYPE {
  FRIEND_SEARCH_IN_FRIEND = 0,
  FRIEND_SEARCH_PLAYER = 1,
  FRIEND_SEARCH_RECOMMENDATION = 2
};
bool FRIEND_SEARCH_TYPE_IsValid(int value);
const FRIEND_SEARCH_TYPE FRIEND_SEARCH_TYPE_MIN = FRIEND_SEARCH_IN_FRIEND;
const FRIEND_SEARCH_TYPE FRIEND_SEARCH_TYPE_MAX = FRIEND_SEARCH_RECOMMENDATION;
const int FRIEND_SEARCH_TYPE_ARRAYSIZE = FRIEND_SEARCH_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* FRIEND_SEARCH_TYPE_descriptor();
inline const ::std::string& FRIEND_SEARCH_TYPE_Name(FRIEND_SEARCH_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    FRIEND_SEARCH_TYPE_descriptor(), value);
}
inline bool FRIEND_SEARCH_TYPE_Parse(
    const ::std::string& name, FRIEND_SEARCH_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FRIEND_SEARCH_TYPE>(
    FRIEND_SEARCH_TYPE_descriptor(), name, value);
}
enum FRIEND_SEARCH_TYPE_RESULT {
  FRIEND_SEARCH_RESULT_SUCCESS = 1,
  FRIEND_SEARCH_RESULT_FAIL = 2
};
bool FRIEND_SEARCH_TYPE_RESULT_IsValid(int value);
const FRIEND_SEARCH_TYPE_RESULT FRIEND_SEARCH_TYPE_RESULT_MIN = FRIEND_SEARCH_RESULT_SUCCESS;
const FRIEND_SEARCH_TYPE_RESULT FRIEND_SEARCH_TYPE_RESULT_MAX = FRIEND_SEARCH_RESULT_FAIL;
const int FRIEND_SEARCH_TYPE_RESULT_ARRAYSIZE = FRIEND_SEARCH_TYPE_RESULT_MAX + 1;

const ::google::protobuf::EnumDescriptor* FRIEND_SEARCH_TYPE_RESULT_descriptor();
inline const ::std::string& FRIEND_SEARCH_TYPE_RESULT_Name(FRIEND_SEARCH_TYPE_RESULT value) {
  return ::google::protobuf::internal::NameOfEnum(
    FRIEND_SEARCH_TYPE_RESULT_descriptor(), value);
}
inline bool FRIEND_SEARCH_TYPE_RESULT_Parse(
    const ::std::string& name, FRIEND_SEARCH_TYPE_RESULT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FRIEND_SEARCH_TYPE_RESULT>(
    FRIEND_SEARCH_TYPE_RESULT_descriptor(), name, value);
}
enum GUILD_DYNAMIC_EVENT {
  GUILD_EVENT_NORMAL = 1,
  GUILD_EVENT_JOIN = 2,
  GUILD_EVENT_LEAVE = 3,
  GUILD_EVENT_CHANGE_POSITION = 4,
  GUILD_EVENT_CHANGE_NAME = 5,
  GUILD_EVENT_CHANGE_ICON = 6,
  GUILD_EVENT_CHANGE_NOTICE = 7,
  GUILD_EVENT_MEMBER_GET_ITEM = 8,
  GUILD_EVENT_MEMBER_BUY_ITEM = 9,
  GUILD_EVENT_MEMBER_CREAT_ITEM = 10
};
bool GUILD_DYNAMIC_EVENT_IsValid(int value);
const GUILD_DYNAMIC_EVENT GUILD_DYNAMIC_EVENT_MIN = GUILD_EVENT_NORMAL;
const GUILD_DYNAMIC_EVENT GUILD_DYNAMIC_EVENT_MAX = GUILD_EVENT_MEMBER_CREAT_ITEM;
const int GUILD_DYNAMIC_EVENT_ARRAYSIZE = GUILD_DYNAMIC_EVENT_MAX + 1;

const ::google::protobuf::EnumDescriptor* GUILD_DYNAMIC_EVENT_descriptor();
inline const ::std::string& GUILD_DYNAMIC_EVENT_Name(GUILD_DYNAMIC_EVENT value) {
  return ::google::protobuf::internal::NameOfEnum(
    GUILD_DYNAMIC_EVENT_descriptor(), value);
}
inline bool GUILD_DYNAMIC_EVENT_Parse(
    const ::std::string& name, GUILD_DYNAMIC_EVENT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GUILD_DYNAMIC_EVENT>(
    GUILD_DYNAMIC_EVENT_descriptor(), name, value);
}
// ===================================================================

class GS2C_Chat_Respon : public ::google::protobuf::Message {
 public:
  GS2C_Chat_Respon();
  virtual ~GS2C_Chat_Respon();

  GS2C_Chat_Respon(const GS2C_Chat_Respon& from);

  inline GS2C_Chat_Respon& operator=(const GS2C_Chat_Respon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Chat_Respon& default_instance();

  void Swap(GS2C_Chat_Respon* other);

  // implements Message ----------------------------------------------

  GS2C_Chat_Respon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Chat_Respon& from);
  void MergeFrom(const GS2C_Chat_Respon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.CHAT_TYPE type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::pb::CHAT_TYPE type() const;
  inline void set_type(::pb::CHAT_TYPE value);

  // optional uint64 from_guid = 2;
  inline bool has_from_guid() const;
  inline void clear_from_guid();
  static const int kFromGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 from_guid() const;
  inline void set_from_guid(::google::protobuf::uint64 value);

  // optional uint64 to_guid = 3;
  inline bool has_to_guid() const;
  inline void clear_to_guid();
  static const int kToGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 to_guid() const;
  inline void set_to_guid(::google::protobuf::uint64 value);

  // optional string from_name = 4;
  inline bool has_from_name() const;
  inline void clear_from_name();
  static const int kFromNameFieldNumber = 4;
  inline const ::std::string& from_name() const;
  inline void set_from_name(const ::std::string& value);
  inline void set_from_name(const char* value);
  inline void set_from_name(const char* value, size_t size);
  inline ::std::string* mutable_from_name();
  inline ::std::string* release_from_name();
  inline void set_allocated_from_name(::std::string* from_name);

  // optional string to_name = 5;
  inline bool has_to_name() const;
  inline void clear_to_name();
  static const int kToNameFieldNumber = 5;
  inline const ::std::string& to_name() const;
  inline void set_to_name(const ::std::string& value);
  inline void set_to_name(const char* value);
  inline void set_to_name(const char* value, size_t size);
  inline ::std::string* mutable_to_name();
  inline ::std::string* release_to_name();
  inline void set_allocated_to_name(::std::string* to_name);

  // optional int32 from_vip_lv = 6;
  inline bool has_from_vip_lv() const;
  inline void clear_from_vip_lv();
  static const int kFromVipLvFieldNumber = 6;
  inline ::google::protobuf::int32 from_vip_lv() const;
  inline void set_from_vip_lv(::google::protobuf::int32 value);

  // optional int32 to_vip_lv = 7;
  inline bool has_to_vip_lv() const;
  inline void clear_to_vip_lv();
  static const int kToVipLvFieldNumber = 7;
  inline ::google::protobuf::int32 to_vip_lv() const;
  inline void set_to_vip_lv(::google::protobuf::int32 value);

  // optional int32 from_card_proid = 8;
  inline bool has_from_card_proid() const;
  inline void clear_from_card_proid();
  static const int kFromCardProidFieldNumber = 8;
  inline ::google::protobuf::int32 from_card_proid() const;
  inline void set_from_card_proid(::google::protobuf::int32 value);

  // optional int32 to_card_proid = 9;
  inline bool has_to_card_proid() const;
  inline void clear_to_card_proid();
  static const int kToCardProidFieldNumber = 9;
  inline ::google::protobuf::int32 to_card_proid() const;
  inline void set_to_card_proid(::google::protobuf::int32 value);

  // optional int32 facial_id = 10;
  inline bool has_facial_id() const;
  inline void clear_facial_id();
  static const int kFacialIdFieldNumber = 10;
  inline ::google::protobuf::int32 facial_id() const;
  inline void set_facial_id(::google::protobuf::int32 value);

  // optional string chat_info = 11;
  inline bool has_chat_info() const;
  inline void clear_chat_info();
  static const int kChatInfoFieldNumber = 11;
  inline const ::std::string& chat_info() const;
  inline void set_chat_info(const ::std::string& value);
  inline void set_chat_info(const char* value);
  inline void set_chat_info(const char* value, size_t size);
  inline ::std::string* mutable_chat_info();
  inline ::std::string* release_chat_info();
  inline void set_allocated_chat_info(::std::string* chat_info);

  // optional uint64 send_time = 12;
  inline bool has_send_time() const;
  inline void clear_send_time();
  static const int kSendTimeFieldNumber = 12;
  inline ::google::protobuf::uint64 send_time() const;
  inline void set_send_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Chat_Respon)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_from_guid();
  inline void clear_has_from_guid();
  inline void set_has_to_guid();
  inline void clear_has_to_guid();
  inline void set_has_from_name();
  inline void clear_has_from_name();
  inline void set_has_to_name();
  inline void clear_has_to_name();
  inline void set_has_from_vip_lv();
  inline void clear_has_from_vip_lv();
  inline void set_has_to_vip_lv();
  inline void clear_has_to_vip_lv();
  inline void set_has_from_card_proid();
  inline void clear_has_from_card_proid();
  inline void set_has_to_card_proid();
  inline void clear_has_to_card_proid();
  inline void set_has_facial_id();
  inline void clear_has_facial_id();
  inline void set_has_chat_info();
  inline void clear_has_chat_info();
  inline void set_has_send_time();
  inline void clear_has_send_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 from_guid_;
  ::google::protobuf::uint64 to_guid_;
  int type_;
  ::google::protobuf::int32 from_vip_lv_;
  ::std::string* from_name_;
  ::std::string* to_name_;
  ::google::protobuf::int32 to_vip_lv_;
  ::google::protobuf::int32 from_card_proid_;
  ::google::protobuf::int32 to_card_proid_;
  ::google::protobuf::int32 facial_id_;
  ::std::string* chat_info_;
  ::google::protobuf::uint64 send_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Chat_Respon* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Chat : public ::google::protobuf::Message {
 public:
  C2GS_Chat();
  virtual ~C2GS_Chat();

  C2GS_Chat(const C2GS_Chat& from);

  inline C2GS_Chat& operator=(const C2GS_Chat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Chat& default_instance();

  void Swap(C2GS_Chat* other);

  // implements Message ----------------------------------------------

  C2GS_Chat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Chat& from);
  void MergeFrom(const C2GS_Chat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.CHAT_TYPE type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::pb::CHAT_TYPE type() const;
  inline void set_type(::pb::CHAT_TYPE value);

  // optional uint64 to_guid = 2;
  inline bool has_to_guid() const;
  inline void clear_to_guid();
  static const int kToGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 to_guid() const;
  inline void set_to_guid(::google::protobuf::uint64 value);

  // optional string to_name = 3;
  inline bool has_to_name() const;
  inline void clear_to_name();
  static const int kToNameFieldNumber = 3;
  inline const ::std::string& to_name() const;
  inline void set_to_name(const ::std::string& value);
  inline void set_to_name(const char* value);
  inline void set_to_name(const char* value, size_t size);
  inline ::std::string* mutable_to_name();
  inline ::std::string* release_to_name();
  inline void set_allocated_to_name(::std::string* to_name);

  // optional int32 vip_level = 4;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 4;
  inline ::google::protobuf::int32 vip_level() const;
  inline void set_vip_level(::google::protobuf::int32 value);

  // optional int32 card_proid = 5;
  inline bool has_card_proid() const;
  inline void clear_card_proid();
  static const int kCardProidFieldNumber = 5;
  inline ::google::protobuf::int32 card_proid() const;
  inline void set_card_proid(::google::protobuf::int32 value);

  // optional int32 facial_id = 6;
  inline bool has_facial_id() const;
  inline void clear_facial_id();
  static const int kFacialIdFieldNumber = 6;
  inline ::google::protobuf::int32 facial_id() const;
  inline void set_facial_id(::google::protobuf::int32 value);

  // optional string chat_info = 7;
  inline bool has_chat_info() const;
  inline void clear_chat_info();
  static const int kChatInfoFieldNumber = 7;
  inline const ::std::string& chat_info() const;
  inline void set_chat_info(const ::std::string& value);
  inline void set_chat_info(const char* value);
  inline void set_chat_info(const char* value, size_t size);
  inline ::std::string* mutable_chat_info();
  inline ::std::string* release_chat_info();
  inline void set_allocated_chat_info(::std::string* chat_info);

  // optional uint64 send_time = 8;
  inline bool has_send_time() const;
  inline void clear_send_time();
  static const int kSendTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 send_time() const;
  inline void set_send_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Chat)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_to_guid();
  inline void clear_has_to_guid();
  inline void set_has_to_name();
  inline void clear_has_to_name();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_card_proid();
  inline void clear_has_card_proid();
  inline void set_has_facial_id();
  inline void clear_has_facial_id();
  inline void set_has_chat_info();
  inline void clear_has_chat_info();
  inline void set_has_send_time();
  inline void clear_has_send_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 to_guid_;
  int type_;
  ::google::protobuf::int32 vip_level_;
  ::std::string* to_name_;
  ::google::protobuf::int32 card_proid_;
  ::google::protobuf::int32 facial_id_;
  ::std::string* chat_info_;
  ::google::protobuf::uint64 send_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Chat* default_instance_;
};
// -------------------------------------------------------------------

class GxDB_ChatInfoData : public ::google::protobuf::Message {
 public:
  GxDB_ChatInfoData();
  virtual ~GxDB_ChatInfoData();

  GxDB_ChatInfoData(const GxDB_ChatInfoData& from);

  inline GxDB_ChatInfoData& operator=(const GxDB_ChatInfoData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GxDB_ChatInfoData& default_instance();

  void Swap(GxDB_ChatInfoData* other);

  // implements Message ----------------------------------------------

  GxDB_ChatInfoData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GxDB_ChatInfoData& from);
  void MergeFrom(const GxDB_ChatInfoData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 expire_time = 1;
  inline bool has_expire_time() const;
  inline void clear_expire_time();
  static const int kExpireTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 expire_time() const;
  inline void set_expire_time(::google::protobuf::uint64 value);

  // optional .pb.GS2C_Chat_Respon chat = 2;
  inline bool has_chat() const;
  inline void clear_chat();
  static const int kChatFieldNumber = 2;
  inline const ::pb::GS2C_Chat_Respon& chat() const;
  inline ::pb::GS2C_Chat_Respon* mutable_chat();
  inline ::pb::GS2C_Chat_Respon* release_chat();
  inline void set_allocated_chat(::pb::GS2C_Chat_Respon* chat);

  // @@protoc_insertion_point(class_scope:pb.GxDB_ChatInfoData)
 private:
  inline void set_has_expire_time();
  inline void clear_has_expire_time();
  inline void set_has_chat();
  inline void clear_has_chat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 expire_time_;
  ::pb::GS2C_Chat_Respon* chat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GxDB_ChatInfoData* default_instance_;
};
// -------------------------------------------------------------------

class MsgPlayerBaseInfo : public ::google::protobuf::Message {
 public:
  MsgPlayerBaseInfo();
  virtual ~MsgPlayerBaseInfo();

  MsgPlayerBaseInfo(const MsgPlayerBaseInfo& from);

  inline MsgPlayerBaseInfo& operator=(const MsgPlayerBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgPlayerBaseInfo& default_instance();

  void Swap(MsgPlayerBaseInfo* other);

  // implements Message ----------------------------------------------

  MsgPlayerBaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgPlayerBaseInfo& from);
  void MergeFrom(const MsgPlayerBaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 playerid() const;
  inline void set_playerid(::google::protobuf::uint64 value);

  // optional string player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // optional uint64 guild_id = 3;
  inline bool has_guild_id() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 3;
  inline ::google::protobuf::uint64 guild_id() const;
  inline void set_guild_id(::google::protobuf::uint64 value);

  // optional string guild_name = 4;
  inline bool has_guild_name() const;
  inline void clear_guild_name();
  static const int kGuildNameFieldNumber = 4;
  inline const ::std::string& guild_name() const;
  inline void set_guild_name(const ::std::string& value);
  inline void set_guild_name(const char* value);
  inline void set_guild_name(const char* value, size_t size);
  inline ::std::string* mutable_guild_name();
  inline ::std::string* release_guild_name();
  inline void set_allocated_guild_name(::std::string* guild_name);

  // optional uint32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 vip_level = 6;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 vip_level() const;
  inline void set_vip_level(::google::protobuf::uint32 value);

  // optional bool isonline = 7;
  inline bool has_isonline() const;
  inline void clear_isonline();
  static const int kIsonlineFieldNumber = 7;
  inline bool isonline() const;
  inline void set_isonline(bool value);

  // optional uint64 last_login = 8;
  inline bool has_last_login() const;
  inline void clear_last_login();
  static const int kLastLoginFieldNumber = 8;
  inline ::google::protobuf::uint64 last_login() const;
  inline void set_last_login(::google::protobuf::uint64 value);

  // optional uint32 power = 9;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 9;
  inline ::google::protobuf::uint32 power() const;
  inline void set_power(::google::protobuf::uint32 value);

  // optional uint32 card_proid = 10;
  inline bool has_card_proid() const;
  inline void clear_card_proid();
  static const int kCardProidFieldNumber = 10;
  inline ::google::protobuf::uint32 card_proid() const;
  inline void set_card_proid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.MsgPlayerBaseInfo)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_guild_name();
  inline void clear_has_guild_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_isonline();
  inline void clear_has_isonline();
  inline void set_has_last_login();
  inline void clear_has_last_login();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_card_proid();
  inline void clear_has_card_proid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 playerid_;
  ::std::string* player_name_;
  ::google::protobuf::uint64 guild_id_;
  ::std::string* guild_name_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 vip_level_;
  ::google::protobuf::uint64 last_login_;
  bool isonline_;
  ::google::protobuf::uint32 power_;
  ::google::protobuf::uint32 card_proid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static MsgPlayerBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class MsgPlayerTeamInfo : public ::google::protobuf::Message {
 public:
  MsgPlayerTeamInfo();
  virtual ~MsgPlayerTeamInfo();

  MsgPlayerTeamInfo(const MsgPlayerTeamInfo& from);

  inline MsgPlayerTeamInfo& operator=(const MsgPlayerTeamInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgPlayerTeamInfo& default_instance();

  void Swap(MsgPlayerTeamInfo* other);

  // implements Message ----------------------------------------------

  MsgPlayerTeamInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgPlayerTeamInfo& from);
  void MergeFrom(const MsgPlayerTeamInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.GS2C_Bag bag_info = 1;
  inline bool has_bag_info() const;
  inline void clear_bag_info();
  static const int kBagInfoFieldNumber = 1;
  inline const ::pb::GS2C_Bag& bag_info() const;
  inline ::pb::GS2C_Bag* mutable_bag_info();
  inline ::pb::GS2C_Bag* release_bag_info();
  inline void set_allocated_bag_info(::pb::GS2C_Bag* bag_info);

  // optional .pb.GS2C_CharacterStorage character_info = 2;
  inline bool has_character_info() const;
  inline void clear_character_info();
  static const int kCharacterInfoFieldNumber = 2;
  inline const ::pb::GS2C_CharacterStorage& character_info() const;
  inline ::pb::GS2C_CharacterStorage* mutable_character_info();
  inline ::pb::GS2C_CharacterStorage* release_character_info();
  inline void set_allocated_character_info(::pb::GS2C_CharacterStorage* character_info);

  // @@protoc_insertion_point(class_scope:pb.MsgPlayerTeamInfo)
 private:
  inline void set_has_bag_info();
  inline void clear_has_bag_info();
  inline void set_has_character_info();
  inline void clear_has_character_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::GS2C_Bag* bag_info_;
  ::pb::GS2C_CharacterStorage* character_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static MsgPlayerTeamInfo* default_instance_;
};
// -------------------------------------------------------------------

class MsgPlayerBaseData : public ::google::protobuf::Message {
 public:
  MsgPlayerBaseData();
  virtual ~MsgPlayerBaseData();

  MsgPlayerBaseData(const MsgPlayerBaseData& from);

  inline MsgPlayerBaseData& operator=(const MsgPlayerBaseData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgPlayerBaseData& default_instance();

  void Swap(MsgPlayerBaseData* other);

  // implements Message ----------------------------------------------

  MsgPlayerBaseData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgPlayerBaseData& from);
  void MergeFrom(const MsgPlayerBaseData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.MsgPlayerBaseInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::pb::MsgPlayerBaseInfo& info() const;
  inline ::pb::MsgPlayerBaseInfo* mutable_info();
  inline ::pb::MsgPlayerBaseInfo* release_info();
  inline void set_allocated_info(::pb::MsgPlayerBaseInfo* info);

  // optional .pb.MsgPlayerTeamInfo team_info = 2;
  inline bool has_team_info() const;
  inline void clear_team_info();
  static const int kTeamInfoFieldNumber = 2;
  inline const ::pb::MsgPlayerTeamInfo& team_info() const;
  inline ::pb::MsgPlayerTeamInfo* mutable_team_info();
  inline ::pb::MsgPlayerTeamInfo* release_team_info();
  inline void set_allocated_team_info(::pb::MsgPlayerTeamInfo* team_info);

  // @@protoc_insertion_point(class_scope:pb.MsgPlayerBaseData)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_team_info();
  inline void clear_has_team_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::MsgPlayerBaseInfo* info_;
  ::pb::MsgPlayerTeamInfo* team_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static MsgPlayerBaseData* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Get_Player_Info_Respone : public ::google::protobuf::Message {
 public:
  GS2C_Get_Player_Info_Respone();
  virtual ~GS2C_Get_Player_Info_Respone();

  GS2C_Get_Player_Info_Respone(const GS2C_Get_Player_Info_Respone& from);

  inline GS2C_Get_Player_Info_Respone& operator=(const GS2C_Get_Player_Info_Respone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Get_Player_Info_Respone& default_instance();

  void Swap(GS2C_Get_Player_Info_Respone* other);

  // implements Message ----------------------------------------------

  GS2C_Get_Player_Info_Respone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Get_Player_Info_Respone& from);
  void MergeFrom(const GS2C_Get_Player_Info_Respone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional .pb.MsgPlayerBaseData info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::pb::MsgPlayerBaseData& info() const;
  inline ::pb::MsgPlayerBaseData* mutable_info();
  inline ::pb::MsgPlayerBaseData* release_info();
  inline void set_allocated_info(::pb::MsgPlayerBaseData* info);

  // required uint64 your_guid = 3;
  inline bool has_your_guid() const;
  inline void clear_your_guid();
  static const int kYourGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 your_guid() const;
  inline void set_your_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Get_Player_Info_Respone)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_your_guid();
  inline void clear_has_your_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::MsgPlayerBaseData* info_;
  ::google::protobuf::uint64 your_guid_;
  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Get_Player_Info_Respone* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Friend_Ap_Opearate : public ::google::protobuf::Message {
 public:
  C2GS_Friend_Ap_Opearate();
  virtual ~C2GS_Friend_Ap_Opearate();

  C2GS_Friend_Ap_Opearate(const C2GS_Friend_Ap_Opearate& from);

  inline C2GS_Friend_Ap_Opearate& operator=(const C2GS_Friend_Ap_Opearate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Friend_Ap_Opearate& default_instance();

  void Swap(C2GS_Friend_Ap_Opearate* other);

  // implements Message ----------------------------------------------

  C2GS_Friend_Ap_Opearate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Friend_Ap_Opearate& from);
  void MergeFrom(const C2GS_Friend_Ap_Opearate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 friends = 1;
  inline int friends_size() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 1;
  inline ::google::protobuf::uint64 friends(int index) const;
  inline void set_friends(int index, ::google::protobuf::uint64 value);
  inline void add_friends(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      friends() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_friends();

  // required uint64 your_guid = 2;
  inline bool has_your_guid() const;
  inline void clear_your_guid();
  static const int kYourGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 your_guid() const;
  inline void set_your_guid(::google::protobuf::uint64 value);

  // required bool is_send = 3;
  inline bool has_is_send() const;
  inline void clear_is_send();
  static const int kIsSendFieldNumber = 3;
  inline bool is_send() const;
  inline void set_is_send(bool value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Friend_Ap_Opearate)
 private:
  inline void set_has_your_guid();
  inline void clear_has_your_guid();
  inline void set_has_is_send();
  inline void clear_has_is_send();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > friends_;
  ::google::protobuf::uint64 your_guid_;
  bool is_send_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Friend_Ap_Opearate* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Friend_Ap_Opearate_Res_opt_result : public ::google::protobuf::Message {
 public:
  GS2C_Friend_Ap_Opearate_Res_opt_result();
  virtual ~GS2C_Friend_Ap_Opearate_Res_opt_result();

  GS2C_Friend_Ap_Opearate_Res_opt_result(const GS2C_Friend_Ap_Opearate_Res_opt_result& from);

  inline GS2C_Friend_Ap_Opearate_Res_opt_result& operator=(const GS2C_Friend_Ap_Opearate_Res_opt_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Friend_Ap_Opearate_Res_opt_result& default_instance();

  void Swap(GS2C_Friend_Ap_Opearate_Res_opt_result* other);

  // implements Message ----------------------------------------------

  GS2C_Friend_Ap_Opearate_Res_opt_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Friend_Ap_Opearate_Res_opt_result& from);
  void MergeFrom(const GS2C_Friend_Ap_Opearate_Res_opt_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 opt_id = 1;
  inline bool has_opt_id() const;
  inline void clear_opt_id();
  static const int kOptIdFieldNumber = 1;
  inline ::google::protobuf::uint64 opt_id() const;
  inline void set_opt_id(::google::protobuf::uint64 value);

  // required bool is_succeed = 2;
  inline bool has_is_succeed() const;
  inline void clear_is_succeed();
  static const int kIsSucceedFieldNumber = 2;
  inline bool is_succeed() const;
  inline void set_is_succeed(bool value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Friend_Ap_Opearate_Res.opt_result)
 private:
  inline void set_has_opt_id();
  inline void clear_has_opt_id();
  inline void set_has_is_succeed();
  inline void clear_has_is_succeed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 opt_id_;
  bool is_succeed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Friend_Ap_Opearate_Res_opt_result* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Friend_Ap_Opearate_Res : public ::google::protobuf::Message {
 public:
  GS2C_Friend_Ap_Opearate_Res();
  virtual ~GS2C_Friend_Ap_Opearate_Res();

  GS2C_Friend_Ap_Opearate_Res(const GS2C_Friend_Ap_Opearate_Res& from);

  inline GS2C_Friend_Ap_Opearate_Res& operator=(const GS2C_Friend_Ap_Opearate_Res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Friend_Ap_Opearate_Res& default_instance();

  void Swap(GS2C_Friend_Ap_Opearate_Res* other);

  // implements Message ----------------------------------------------

  GS2C_Friend_Ap_Opearate_Res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Friend_Ap_Opearate_Res& from);
  void MergeFrom(const GS2C_Friend_Ap_Opearate_Res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GS2C_Friend_Ap_Opearate_Res_opt_result opt_result;

  // accessors -------------------------------------------------------

  // repeated .pb.GS2C_Friend_Ap_Opearate_Res.opt_result op_infos = 1;
  inline int op_infos_size() const;
  inline void clear_op_infos();
  static const int kOpInfosFieldNumber = 1;
  inline const ::pb::GS2C_Friend_Ap_Opearate_Res_opt_result& op_infos(int index) const;
  inline ::pb::GS2C_Friend_Ap_Opearate_Res_opt_result* mutable_op_infos(int index);
  inline ::pb::GS2C_Friend_Ap_Opearate_Res_opt_result* add_op_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Friend_Ap_Opearate_Res_opt_result >&
      op_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Friend_Ap_Opearate_Res_opt_result >*
      mutable_op_infos();

  // required uint64 your_guid = 2;
  inline bool has_your_guid() const;
  inline void clear_your_guid();
  static const int kYourGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 your_guid() const;
  inline void set_your_guid(::google::protobuf::uint64 value);

  // required bool is_send = 3;
  inline bool has_is_send() const;
  inline void clear_is_send();
  static const int kIsSendFieldNumber = 3;
  inline bool is_send() const;
  inline void set_is_send(bool value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Friend_Ap_Opearate_Res)
 private:
  inline void set_has_your_guid();
  inline void clear_has_your_guid();
  inline void set_has_is_send();
  inline void clear_has_is_send();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Friend_Ap_Opearate_Res_opt_result > op_infos_;
  ::google::protobuf::uint64 your_guid_;
  bool is_send_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Friend_Ap_Opearate_Res* default_instance_;
};
// -------------------------------------------------------------------

class Friend_list_Record : public ::google::protobuf::Message {
 public:
  Friend_list_Record();
  virtual ~Friend_list_Record();

  Friend_list_Record(const Friend_list_Record& from);

  inline Friend_list_Record& operator=(const Friend_list_Record& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Friend_list_Record& default_instance();

  void Swap(Friend_list_Record* other);

  // implements Message ----------------------------------------------

  Friend_list_Record* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Friend_list_Record& from);
  void MergeFrom(const Friend_list_Record& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string friend_name = 1;
  inline bool has_friend_name() const;
  inline void clear_friend_name();
  static const int kFriendNameFieldNumber = 1;
  inline const ::std::string& friend_name() const;
  inline void set_friend_name(const ::std::string& value);
  inline void set_friend_name(const char* value);
  inline void set_friend_name(const char* value, size_t size);
  inline ::std::string* mutable_friend_name();
  inline ::std::string* release_friend_name();
  inline void set_allocated_friend_name(::std::string* friend_name);

  // optional uint64 friend_guid = 2;
  inline bool has_friend_guid() const;
  inline void clear_friend_guid();
  static const int kFriendGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 friend_guid() const;
  inline void set_friend_guid(::google::protobuf::uint64 value);

  // optional uint32 head_icon = 3;
  inline bool has_head_icon() const;
  inline void clear_head_icon();
  static const int kHeadIconFieldNumber = 3;
  inline ::google::protobuf::uint32 head_icon() const;
  inline void set_head_icon(::google::protobuf::uint32 value);

  // optional uint32 vip_level = 4;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 vip_level() const;
  inline void set_vip_level(::google::protobuf::uint32 value);

  // optional uint32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 power = 6;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 6;
  inline ::google::protobuf::uint32 power() const;
  inline void set_power(::google::protobuf::uint32 value);

  // optional string guild_name = 7;
  inline bool has_guild_name() const;
  inline void clear_guild_name();
  static const int kGuildNameFieldNumber = 7;
  inline const ::std::string& guild_name() const;
  inline void set_guild_name(const ::std::string& value);
  inline void set_guild_name(const char* value);
  inline void set_guild_name(const char* value, size_t size);
  inline ::std::string* mutable_guild_name();
  inline ::std::string* release_guild_name();
  inline void set_allocated_guild_name(::std::string* guild_name);

  // optional uint32 friend_type = 8;
  inline bool has_friend_type() const;
  inline void clear_friend_type();
  static const int kFriendTypeFieldNumber = 8;
  inline ::google::protobuf::uint32 friend_type() const;
  inline void set_friend_type(::google::protobuf::uint32 value);

  // optional bool is_send_ap = 9;
  inline bool has_is_send_ap() const;
  inline void clear_is_send_ap();
  static const int kIsSendApFieldNumber = 9;
  inline bool is_send_ap() const;
  inline void set_is_send_ap(bool value);

  // optional bool is_receive_ap = 10;
  inline bool has_is_receive_ap() const;
  inline void clear_is_receive_ap();
  static const int kIsReceiveApFieldNumber = 10;
  inline bool is_receive_ap() const;
  inline void set_is_receive_ap(bool value);

  // optional bool is_online = 11;
  inline bool has_is_online() const;
  inline void clear_is_online();
  static const int kIsOnlineFieldNumber = 11;
  inline bool is_online() const;
  inline void set_is_online(bool value);

  // optional uint64 last_onlin_time = 12;
  inline bool has_last_onlin_time() const;
  inline void clear_last_onlin_time();
  static const int kLastOnlinTimeFieldNumber = 12;
  inline ::google::protobuf::uint64 last_onlin_time() const;
  inline void set_last_onlin_time(::google::protobuf::uint64 value);

  // optional uint64 request_time = 13;
  inline bool has_request_time() const;
  inline void clear_request_time();
  static const int kRequestTimeFieldNumber = 13;
  inline ::google::protobuf::uint64 request_time() const;
  inline void set_request_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.Friend_list_Record)
 private:
  inline void set_has_friend_name();
  inline void clear_has_friend_name();
  inline void set_has_friend_guid();
  inline void clear_has_friend_guid();
  inline void set_has_head_icon();
  inline void clear_has_head_icon();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_guild_name();
  inline void clear_has_guild_name();
  inline void set_has_friend_type();
  inline void clear_has_friend_type();
  inline void set_has_is_send_ap();
  inline void clear_has_is_send_ap();
  inline void set_has_is_receive_ap();
  inline void clear_has_is_receive_ap();
  inline void set_has_is_online();
  inline void clear_has_is_online();
  inline void set_has_last_onlin_time();
  inline void clear_has_last_onlin_time();
  inline void set_has_request_time();
  inline void clear_has_request_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* friend_name_;
  ::google::protobuf::uint64 friend_guid_;
  ::google::protobuf::uint32 head_icon_;
  ::google::protobuf::uint32 vip_level_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 power_;
  ::std::string* guild_name_;
  ::google::protobuf::uint32 friend_type_;
  bool is_send_ap_;
  bool is_receive_ap_;
  bool is_online_;
  ::google::protobuf::uint64 last_onlin_time_;
  ::google::protobuf::uint64 request_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static Friend_list_Record* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_FriendAdd : public ::google::protobuf::Message {
 public:
  C2GS_FriendAdd();
  virtual ~C2GS_FriendAdd();

  C2GS_FriendAdd(const C2GS_FriendAdd& from);

  inline C2GS_FriendAdd& operator=(const C2GS_FriendAdd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_FriendAdd& default_instance();

  void Swap(C2GS_FriendAdd* other);

  // implements Message ----------------------------------------------

  C2GS_FriendAdd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_FriendAdd& from);
  void MergeFrom(const C2GS_FriendAdd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 add_method = 1;
  inline bool has_add_method() const;
  inline void clear_add_method();
  static const int kAddMethodFieldNumber = 1;
  inline ::google::protobuf::uint32 add_method() const;
  inline void set_add_method(::google::protobuf::uint32 value);

  // optional string add_name = 2;
  inline bool has_add_name() const;
  inline void clear_add_name();
  static const int kAddNameFieldNumber = 2;
  inline const ::std::string& add_name() const;
  inline void set_add_name(const ::std::string& value);
  inline void set_add_name(const char* value);
  inline void set_add_name(const char* value, size_t size);
  inline ::std::string* mutable_add_name();
  inline ::std::string* release_add_name();
  inline void set_allocated_add_name(::std::string* add_name);

  // optional uint64 add_guid = 3;
  inline bool has_add_guid() const;
  inline void clear_add_guid();
  static const int kAddGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 add_guid() const;
  inline void set_add_guid(::google::protobuf::uint64 value);

  // optional uint32 add_id = 4;
  inline bool has_add_id() const;
  inline void clear_add_id();
  static const int kAddIdFieldNumber = 4;
  inline ::google::protobuf::uint32 add_id() const;
  inline void set_add_id(::google::protobuf::uint32 value);

  // required bool is_add = 5 [default = true];
  inline bool has_is_add() const;
  inline void clear_is_add();
  static const int kIsAddFieldNumber = 5;
  inline bool is_add() const;
  inline void set_is_add(bool value);

  // required uint64 your_guid = 6;
  inline bool has_your_guid() const;
  inline void clear_your_guid();
  static const int kYourGuidFieldNumber = 6;
  inline ::google::protobuf::uint64 your_guid() const;
  inline void set_your_guid(::google::protobuf::uint64 value);

  // optional .pb.Friend_list_Record record = 7;
  inline bool has_record() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 7;
  inline const ::pb::Friend_list_Record& record() const;
  inline ::pb::Friend_list_Record* mutable_record();
  inline ::pb::Friend_list_Record* release_record();
  inline void set_allocated_record(::pb::Friend_list_Record* record);

  // optional bool is_from_add_pannel = 8;
  inline bool has_is_from_add_pannel() const;
  inline void clear_is_from_add_pannel();
  static const int kIsFromAddPannelFieldNumber = 8;
  inline bool is_from_add_pannel() const;
  inline void set_is_from_add_pannel(bool value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_FriendAdd)
 private:
  inline void set_has_add_method();
  inline void clear_has_add_method();
  inline void set_has_add_name();
  inline void clear_has_add_name();
  inline void set_has_add_guid();
  inline void clear_has_add_guid();
  inline void set_has_add_id();
  inline void clear_has_add_id();
  inline void set_has_is_add();
  inline void clear_has_is_add();
  inline void set_has_your_guid();
  inline void clear_has_your_guid();
  inline void set_has_record();
  inline void clear_has_record();
  inline void set_has_is_from_add_pannel();
  inline void clear_has_is_from_add_pannel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* add_name_;
  ::google::protobuf::uint32 add_method_;
  ::google::protobuf::uint32 add_id_;
  ::google::protobuf::uint64 add_guid_;
  ::google::protobuf::uint64 your_guid_;
  ::pb::Friend_list_Record* record_;
  bool is_add_;
  bool is_from_add_pannel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static C2GS_FriendAdd* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_FriendAdd_Result : public ::google::protobuf::Message {
 public:
  GS2C_FriendAdd_Result();
  virtual ~GS2C_FriendAdd_Result();

  GS2C_FriendAdd_Result(const GS2C_FriendAdd_Result& from);

  inline GS2C_FriendAdd_Result& operator=(const GS2C_FriendAdd_Result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_FriendAdd_Result& default_instance();

  void Swap(GS2C_FriendAdd_Result* other);

  // implements Message ----------------------------------------------

  GS2C_FriendAdd_Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_FriendAdd_Result& from);
  void MergeFrom(const GS2C_FriendAdd_Result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 errorCode = 1;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_FriendAdd_Result)
 private:
  inline void set_has_errorcode();
  inline void clear_has_errorcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 errorcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GS2C_FriendAdd_Result* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_FriendAdd_Respon : public ::google::protobuf::Message {
 public:
  C2GS_FriendAdd_Respon();
  virtual ~C2GS_FriendAdd_Respon();

  C2GS_FriendAdd_Respon(const C2GS_FriendAdd_Respon& from);

  inline C2GS_FriendAdd_Respon& operator=(const C2GS_FriendAdd_Respon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_FriendAdd_Respon& default_instance();

  void Swap(C2GS_FriendAdd_Respon* other);

  // implements Message ----------------------------------------------

  C2GS_FriendAdd_Respon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_FriendAdd_Respon& from);
  void MergeFrom(const C2GS_FriendAdd_Respon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_accept = 1;
  inline bool has_is_accept() const;
  inline void clear_is_accept();
  static const int kIsAcceptFieldNumber = 1;
  inline bool is_accept() const;
  inline void set_is_accept(bool value);

  // required .pb.Friend_list_Record record = 2;
  inline bool has_record() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 2;
  inline const ::pb::Friend_list_Record& record() const;
  inline ::pb::Friend_list_Record* mutable_record();
  inline ::pb::Friend_list_Record* release_record();
  inline void set_allocated_record(::pb::Friend_list_Record* record);

  // required uint64 your_guid = 3;
  inline bool has_your_guid() const;
  inline void clear_your_guid();
  static const int kYourGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 your_guid() const;
  inline void set_your_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_FriendAdd_Respon)
 private:
  inline void set_has_is_accept();
  inline void clear_has_is_accept();
  inline void set_has_record();
  inline void clear_has_record();
  inline void set_has_your_guid();
  inline void clear_has_your_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::Friend_list_Record* record_;
  ::google::protobuf::uint64 your_guid_;
  bool is_accept_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static C2GS_FriendAdd_Respon* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_FriendAdd_Respon : public ::google::protobuf::Message {
 public:
  GS2C_FriendAdd_Respon();
  virtual ~GS2C_FriendAdd_Respon();

  GS2C_FriendAdd_Respon(const GS2C_FriendAdd_Respon& from);

  inline GS2C_FriendAdd_Respon& operator=(const GS2C_FriendAdd_Respon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_FriendAdd_Respon& default_instance();

  void Swap(GS2C_FriendAdd_Respon* other);

  // implements Message ----------------------------------------------

  GS2C_FriendAdd_Respon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_FriendAdd_Respon& from);
  void MergeFrom(const GS2C_FriendAdd_Respon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_accept = 1 [default = true];
  inline bool has_is_accept() const;
  inline void clear_is_accept();
  static const int kIsAcceptFieldNumber = 1;
  inline bool is_accept() const;
  inline void set_is_accept(bool value);

  // optional .pb.Friend_list_Record record = 2;
  inline bool has_record() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 2;
  inline const ::pb::Friend_list_Record& record() const;
  inline ::pb::Friend_list_Record* mutable_record();
  inline ::pb::Friend_list_Record* release_record();
  inline void set_allocated_record(::pb::Friend_list_Record* record);

  // optional uint32 errorCode = 3;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorCodeFieldNumber = 3;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // required bool is_add = 4 [default = true];
  inline bool has_is_add() const;
  inline void clear_is_add();
  static const int kIsAddFieldNumber = 4;
  inline bool is_add() const;
  inline void set_is_add(bool value);

  // optional bool is_reply = 5 [default = false];
  inline bool has_is_reply() const;
  inline void clear_is_reply();
  static const int kIsReplyFieldNumber = 5;
  inline bool is_reply() const;
  inline void set_is_reply(bool value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_FriendAdd_Respon)
 private:
  inline void set_has_is_accept();
  inline void clear_has_is_accept();
  inline void set_has_record();
  inline void clear_has_record();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_is_add();
  inline void clear_has_is_add();
  inline void set_has_is_reply();
  inline void clear_has_is_reply();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::Friend_list_Record* record_;
  ::google::protobuf::uint32 errorcode_;
  bool is_accept_;
  bool is_add_;
  bool is_reply_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GS2C_FriendAdd_Respon* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_FriendDel : public ::google::protobuf::Message {
 public:
  C2GS_FriendDel();
  virtual ~C2GS_FriendDel();

  C2GS_FriendDel(const C2GS_FriendDel& from);

  inline C2GS_FriendDel& operator=(const C2GS_FriendDel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_FriendDel& default_instance();

  void Swap(C2GS_FriendDel* other);

  // implements Message ----------------------------------------------

  C2GS_FriendDel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_FriendDel& from);
  void MergeFrom(const C2GS_FriendDel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 del_guid = 1;
  inline bool has_del_guid() const;
  inline void clear_del_guid();
  static const int kDelGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 del_guid() const;
  inline void set_del_guid(::google::protobuf::uint64 value);

  // required bool is_for_friend_list = 2 [default = true];
  inline bool has_is_for_friend_list() const;
  inline void clear_is_for_friend_list();
  static const int kIsForFriendListFieldNumber = 2;
  inline bool is_for_friend_list() const;
  inline void set_is_for_friend_list(bool value);

  // required uint64 your_guid = 3;
  inline bool has_your_guid() const;
  inline void clear_your_guid();
  static const int kYourGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 your_guid() const;
  inline void set_your_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_FriendDel)
 private:
  inline void set_has_del_guid();
  inline void clear_has_del_guid();
  inline void set_has_is_for_friend_list();
  inline void clear_has_is_for_friend_list();
  inline void set_has_your_guid();
  inline void clear_has_your_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 del_guid_;
  ::google::protobuf::uint64 your_guid_;
  bool is_for_friend_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static C2GS_FriendDel* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_FriendDel_Respon : public ::google::protobuf::Message {
 public:
  GS2C_FriendDel_Respon();
  virtual ~GS2C_FriendDel_Respon();

  GS2C_FriendDel_Respon(const GS2C_FriendDel_Respon& from);

  inline GS2C_FriendDel_Respon& operator=(const GS2C_FriendDel_Respon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_FriendDel_Respon& default_instance();

  void Swap(GS2C_FriendDel_Respon* other);

  // implements Message ----------------------------------------------

  GS2C_FriendDel_Respon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_FriendDel_Respon& from);
  void MergeFrom(const GS2C_FriendDel_Respon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_suscess = 1;
  inline bool has_is_suscess() const;
  inline void clear_is_suscess();
  static const int kIsSuscessFieldNumber = 1;
  inline bool is_suscess() const;
  inline void set_is_suscess(bool value);

  // required bool is_for_friend_list = 2 [default = true];
  inline bool has_is_for_friend_list() const;
  inline void clear_is_for_friend_list();
  static const int kIsForFriendListFieldNumber = 2;
  inline bool is_for_friend_list() const;
  inline void set_is_for_friend_list(bool value);

  // optional uint64 friend_guid = 3;
  inline bool has_friend_guid() const;
  inline void clear_friend_guid();
  static const int kFriendGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 friend_guid() const;
  inline void set_friend_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_FriendDel_Respon)
 private:
  inline void set_has_is_suscess();
  inline void clear_has_is_suscess();
  inline void set_has_is_for_friend_list();
  inline void clear_has_is_for_friend_list();
  inline void set_has_friend_guid();
  inline void clear_has_friend_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 friend_guid_;
  bool is_suscess_;
  bool is_for_friend_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GS2C_FriendDel_Respon* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_FriendListInfo : public ::google::protobuf::Message {
 public:
  GS2C_FriendListInfo();
  virtual ~GS2C_FriendListInfo();

  GS2C_FriendListInfo(const GS2C_FriendListInfo& from);

  inline GS2C_FriendListInfo& operator=(const GS2C_FriendListInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_FriendListInfo& default_instance();

  void Swap(GS2C_FriendListInfo* other);

  // implements Message ----------------------------------------------

  GS2C_FriendListInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_FriendListInfo& from);
  void MergeFrom(const GS2C_FriendListInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Friend_list_Record friends = 1;
  inline int friends_size() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 1;
  inline const ::pb::Friend_list_Record& friends(int index) const;
  inline ::pb::Friend_list_Record* mutable_friends(int index);
  inline ::pb::Friend_list_Record* add_friends();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Friend_list_Record >&
      friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Friend_list_Record >*
      mutable_friends();

  // @@protoc_insertion_point(class_scope:pb.GS2C_FriendListInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::Friend_list_Record > friends_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GS2C_FriendListInfo* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Friend_Search : public ::google::protobuf::Message {
 public:
  C2GS_Friend_Search();
  virtual ~C2GS_Friend_Search();

  C2GS_Friend_Search(const C2GS_Friend_Search& from);

  inline C2GS_Friend_Search& operator=(const C2GS_Friend_Search& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Friend_Search& default_instance();

  void Swap(C2GS_Friend_Search* other);

  // implements Message ----------------------------------------------

  C2GS_Friend_Search* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Friend_Search& from);
  void MergeFrom(const C2GS_Friend_Search& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 search_type = 1;
  inline bool has_search_type() const;
  inline void clear_search_type();
  static const int kSearchTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 search_type() const;
  inline void set_search_type(::google::protobuf::uint32 value);

  // optional bool is_search_by_name = 2;
  inline bool has_is_search_by_name() const;
  inline void clear_is_search_by_name();
  static const int kIsSearchByNameFieldNumber = 2;
  inline bool is_search_by_name() const;
  inline void set_is_search_by_name(bool value);

  // optional string search_name = 3;
  inline bool has_search_name() const;
  inline void clear_search_name();
  static const int kSearchNameFieldNumber = 3;
  inline const ::std::string& search_name() const;
  inline void set_search_name(const ::std::string& value);
  inline void set_search_name(const char* value);
  inline void set_search_name(const char* value, size_t size);
  inline ::std::string* mutable_search_name();
  inline ::std::string* release_search_name();
  inline void set_allocated_search_name(::std::string* search_name);

  // optional uint64 search_id = 4;
  inline bool has_search_id() const;
  inline void clear_search_id();
  static const int kSearchIdFieldNumber = 4;
  inline ::google::protobuf::uint64 search_id() const;
  inline void set_search_id(::google::protobuf::uint64 value);

  // optional uint64 your_guid = 5;
  inline bool has_your_guid() const;
  inline void clear_your_guid();
  static const int kYourGuidFieldNumber = 5;
  inline ::google::protobuf::uint64 your_guid() const;
  inline void set_your_guid(::google::protobuf::uint64 value);

  // optional uint32 max_count = 6;
  inline bool has_max_count() const;
  inline void clear_max_count();
  static const int kMaxCountFieldNumber = 6;
  inline ::google::protobuf::uint32 max_count() const;
  inline void set_max_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Friend_Search)
 private:
  inline void set_has_search_type();
  inline void clear_has_search_type();
  inline void set_has_is_search_by_name();
  inline void clear_has_is_search_by_name();
  inline void set_has_search_name();
  inline void clear_has_search_name();
  inline void set_has_search_id();
  inline void clear_has_search_id();
  inline void set_has_your_guid();
  inline void clear_has_your_guid();
  inline void set_has_max_count();
  inline void clear_has_max_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 search_type_;
  bool is_search_by_name_;
  ::std::string* search_name_;
  ::google::protobuf::uint64 search_id_;
  ::google::protobuf::uint64 your_guid_;
  ::google::protobuf::uint32 max_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Friend_Search* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Friend_Search_Respone : public ::google::protobuf::Message {
 public:
  GS2C_Friend_Search_Respone();
  virtual ~GS2C_Friend_Search_Respone();

  GS2C_Friend_Search_Respone(const GS2C_Friend_Search_Respone& from);

  inline GS2C_Friend_Search_Respone& operator=(const GS2C_Friend_Search_Respone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Friend_Search_Respone& default_instance();

  void Swap(GS2C_Friend_Search_Respone* other);

  // implements Message ----------------------------------------------

  GS2C_Friend_Search_Respone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Friend_Search_Respone& from);
  void MergeFrom(const GS2C_Friend_Search_Respone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 search_result = 1;
  inline bool has_search_result() const;
  inline void clear_search_result();
  static const int kSearchResultFieldNumber = 1;
  inline ::google::protobuf::uint32 search_result() const;
  inline void set_search_result(::google::protobuf::uint32 value);

  // repeated .pb.Friend_list_Record search_players = 2;
  inline int search_players_size() const;
  inline void clear_search_players();
  static const int kSearchPlayersFieldNumber = 2;
  inline const ::pb::Friend_list_Record& search_players(int index) const;
  inline ::pb::Friend_list_Record* mutable_search_players(int index);
  inline ::pb::Friend_list_Record* add_search_players();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Friend_list_Record >&
      search_players() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Friend_list_Record >*
      mutable_search_players();

  // optional uint64 your_guid = 3;
  inline bool has_your_guid() const;
  inline void clear_your_guid();
  static const int kYourGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 your_guid() const;
  inline void set_your_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Friend_Search_Respone)
 private:
  inline void set_has_search_result();
  inline void clear_has_search_result();
  inline void set_has_your_guid();
  inline void clear_has_your_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::Friend_list_Record > search_players_;
  ::google::protobuf::uint64 your_guid_;
  ::google::protobuf::uint32 search_result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Friend_Search_Respone* default_instance_;
};
// -------------------------------------------------------------------

class GxDB_FriendInfo : public ::google::protobuf::Message {
 public:
  GxDB_FriendInfo();
  virtual ~GxDB_FriendInfo();

  GxDB_FriendInfo(const GxDB_FriendInfo& from);

  inline GxDB_FriendInfo& operator=(const GxDB_FriendInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GxDB_FriendInfo& default_instance();

  void Swap(GxDB_FriendInfo* other);

  // implements Message ----------------------------------------------

  GxDB_FriendInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GxDB_FriendInfo& from);
  void MergeFrom(const GxDB_FriendInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.Friend_list_Record my_info = 1;
  inline bool has_my_info() const;
  inline void clear_my_info();
  static const int kMyInfoFieldNumber = 1;
  inline const ::pb::Friend_list_Record& my_info() const;
  inline ::pb::Friend_list_Record* mutable_my_info();
  inline ::pb::Friend_list_Record* release_my_info();
  inline void set_allocated_my_info(::pb::Friend_list_Record* my_info);

  // optional .pb.GS2C_FriendListInfo friend_list = 2;
  inline bool has_friend_list() const;
  inline void clear_friend_list();
  static const int kFriendListFieldNumber = 2;
  inline const ::pb::GS2C_FriendListInfo& friend_list() const;
  inline ::pb::GS2C_FriendListInfo* mutable_friend_list();
  inline ::pb::GS2C_FriendListInfo* release_friend_list();
  inline void set_allocated_friend_list(::pb::GS2C_FriendListInfo* friend_list);

  // optional string send_ap_ids = 3;
  inline bool has_send_ap_ids() const;
  inline void clear_send_ap_ids();
  static const int kSendApIdsFieldNumber = 3;
  inline const ::std::string& send_ap_ids() const;
  inline void set_send_ap_ids(const ::std::string& value);
  inline void set_send_ap_ids(const char* value);
  inline void set_send_ap_ids(const char* value, size_t size);
  inline ::std::string* mutable_send_ap_ids();
  inline ::std::string* release_send_ap_ids();
  inline void set_allocated_send_ap_ids(::std::string* send_ap_ids);

  // @@protoc_insertion_point(class_scope:pb.GxDB_FriendInfo)
 private:
  inline void set_has_my_info();
  inline void clear_has_my_info();
  inline void set_has_friend_list();
  inline void clear_has_friend_list();
  inline void set_has_send_ap_ids();
  inline void clear_has_send_ap_ids();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::Friend_list_Record* my_info_;
  ::pb::GS2C_FriendListInfo* friend_list_;
  ::std::string* send_ap_ids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GxDB_FriendInfo* default_instance_;
};
// -------------------------------------------------------------------

class GxDB_GuildInfo : public ::google::protobuf::Message {
 public:
  GxDB_GuildInfo();
  virtual ~GxDB_GuildInfo();

  GxDB_GuildInfo(const GxDB_GuildInfo& from);

  inline GxDB_GuildInfo& operator=(const GxDB_GuildInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GxDB_GuildInfo& default_instance();

  void Swap(GxDB_GuildInfo* other);

  // implements Message ----------------------------------------------

  GxDB_GuildInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GxDB_GuildInfo& from);
  void MergeFrom(const GxDB_GuildInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 guild_id = 1;
  inline bool has_guild_id() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  inline ::google::protobuf::uint64 guild_id() const;
  inline void set_guild_id(::google::protobuf::uint64 value);

  // required uint32 icon = 2;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 2;
  inline ::google::protobuf::uint32 icon() const;
  inline void set_icon(::google::protobuf::uint32 value);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint64 create_time = 4;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 create_time() const;
  inline void set_create_time(::google::protobuf::uint64 value);

  // optional uint32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 exp = 6;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 6;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 prestige = 7;
  inline bool has_prestige() const;
  inline void clear_prestige();
  static const int kPrestigeFieldNumber = 7;
  inline ::google::protobuf::uint32 prestige() const;
  inline void set_prestige(::google::protobuf::uint32 value);

  // optional uint32 active = 8;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 8;
  inline ::google::protobuf::uint32 active() const;
  inline void set_active(::google::protobuf::uint32 value);

  // optional string notice = 9;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 9;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // optional uint64 notice_time = 10;
  inline bool has_notice_time() const;
  inline void clear_notice_time();
  static const int kNoticeTimeFieldNumber = 10;
  inline ::google::protobuf::uint64 notice_time() const;
  inline void set_notice_time(::google::protobuf::uint64 value);

  // optional uint64 notice_creater_id = 11;
  inline bool has_notice_creater_id() const;
  inline void clear_notice_creater_id();
  static const int kNoticeCreaterIdFieldNumber = 11;
  inline ::google::protobuf::uint64 notice_creater_id() const;
  inline void set_notice_creater_id(::google::protobuf::uint64 value);

  // optional string notice_creater_name = 12;
  inline bool has_notice_creater_name() const;
  inline void clear_notice_creater_name();
  static const int kNoticeCreaterNameFieldNumber = 12;
  inline const ::std::string& notice_creater_name() const;
  inline void set_notice_creater_name(const ::std::string& value);
  inline void set_notice_creater_name(const char* value);
  inline void set_notice_creater_name(const char* value, size_t size);
  inline ::std::string* mutable_notice_creater_name();
  inline ::std::string* release_notice_creater_name();
  inline void set_allocated_notice_creater_name(::std::string* notice_creater_name);

  // optional uint64 guild_owner_id = 13;
  inline bool has_guild_owner_id() const;
  inline void clear_guild_owner_id();
  static const int kGuildOwnerIdFieldNumber = 13;
  inline ::google::protobuf::uint64 guild_owner_id() const;
  inline void set_guild_owner_id(::google::protobuf::uint64 value);

  // optional string guild_owner_name = 14;
  inline bool has_guild_owner_name() const;
  inline void clear_guild_owner_name();
  static const int kGuildOwnerNameFieldNumber = 14;
  inline const ::std::string& guild_owner_name() const;
  inline void set_guild_owner_name(const ::std::string& value);
  inline void set_guild_owner_name(const char* value);
  inline void set_guild_owner_name(const char* value, size_t size);
  inline ::std::string* mutable_guild_owner_name();
  inline ::std::string* release_guild_owner_name();
  inline void set_allocated_guild_owner_name(::std::string* guild_owner_name);

  // optional uint32 members_count = 15;
  inline bool has_members_count() const;
  inline void clear_members_count();
  static const int kMembersCountFieldNumber = 15;
  inline ::google::protobuf::uint32 members_count() const;
  inline void set_members_count(::google::protobuf::uint32 value);

  // optional uint32 members_limit = 16;
  inline bool has_members_limit() const;
  inline void clear_members_limit();
  static const int kMembersLimitFieldNumber = 16;
  inline ::google::protobuf::uint32 members_limit() const;
  inline void set_members_limit(::google::protobuf::uint32 value);

  // optional uint32 score = 17;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 17;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint64 last_rank_time = 18;
  inline bool has_last_rank_time() const;
  inline void clear_last_rank_time();
  static const int kLastRankTimeFieldNumber = 18;
  inline ::google::protobuf::uint64 last_rank_time() const;
  inline void set_last_rank_time(::google::protobuf::uint64 value);

  // optional .pb.GS2C_Guild_Dynamic_Event_Log logs = 19;
  inline bool has_logs() const;
  inline void clear_logs();
  static const int kLogsFieldNumber = 19;
  inline const ::pb::GS2C_Guild_Dynamic_Event_Log& logs() const;
  inline ::pb::GS2C_Guild_Dynamic_Event_Log* mutable_logs();
  inline ::pb::GS2C_Guild_Dynamic_Event_Log* release_logs();
  inline void set_allocated_logs(::pb::GS2C_Guild_Dynamic_Event_Log* logs);

  // @@protoc_insertion_point(class_scope:pb.GxDB_GuildInfo)
 private:
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_prestige();
  inline void clear_has_prestige();
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_notice();
  inline void clear_has_notice();
  inline void set_has_notice_time();
  inline void clear_has_notice_time();
  inline void set_has_notice_creater_id();
  inline void clear_has_notice_creater_id();
  inline void set_has_notice_creater_name();
  inline void clear_has_notice_creater_name();
  inline void set_has_guild_owner_id();
  inline void clear_has_guild_owner_id();
  inline void set_has_guild_owner_name();
  inline void clear_has_guild_owner_name();
  inline void set_has_members_count();
  inline void clear_has_members_count();
  inline void set_has_members_limit();
  inline void clear_has_members_limit();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_last_rank_time();
  inline void clear_has_last_rank_time();
  inline void set_has_logs();
  inline void clear_has_logs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guild_id_;
  ::std::string* name_;
  ::google::protobuf::uint32 icon_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint64 create_time_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 prestige_;
  ::std::string* notice_;
  ::google::protobuf::uint64 notice_time_;
  ::google::protobuf::uint64 notice_creater_id_;
  ::google::protobuf::uint32 active_;
  ::google::protobuf::uint32 members_count_;
  ::std::string* notice_creater_name_;
  ::google::protobuf::uint64 guild_owner_id_;
  ::std::string* guild_owner_name_;
  ::google::protobuf::uint32 members_limit_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint64 last_rank_time_;
  ::pb::GS2C_Guild_Dynamic_Event_Log* logs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GxDB_GuildInfo* default_instance_;
};
// -------------------------------------------------------------------

class GxDB_GMember_Info : public ::google::protobuf::Message {
 public:
  GxDB_GMember_Info();
  virtual ~GxDB_GMember_Info();

  GxDB_GMember_Info(const GxDB_GMember_Info& from);

  inline GxDB_GMember_Info& operator=(const GxDB_GMember_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GxDB_GMember_Info& default_instance();

  void Swap(GxDB_GMember_Info* other);

  // implements Message ----------------------------------------------

  GxDB_GMember_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GxDB_GMember_Info& from);
  void MergeFrom(const GxDB_GMember_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 playerid() const;
  inline void set_playerid(::google::protobuf::uint64 value);

  // optional string player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // optional uint64 guild_id = 3;
  inline bool has_guild_id() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 3;
  inline ::google::protobuf::uint64 guild_id() const;
  inline void set_guild_id(::google::protobuf::uint64 value);

  // optional string guild_name = 4;
  inline bool has_guild_name() const;
  inline void clear_guild_name();
  static const int kGuildNameFieldNumber = 4;
  inline const ::std::string& guild_name() const;
  inline void set_guild_name(const ::std::string& value);
  inline void set_guild_name(const char* value);
  inline void set_guild_name(const char* value, size_t size);
  inline ::std::string* mutable_guild_name();
  inline ::std::string* release_guild_name();
  inline void set_allocated_guild_name(::std::string* guild_name);

  // optional uint32 title = 5;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 5;
  inline ::google::protobuf::uint32 title() const;
  inline void set_title(::google::protobuf::uint32 value);

  // optional uint64 joinTime = 6;
  inline bool has_jointime() const;
  inline void clear_jointime();
  static const int kJoinTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 jointime() const;
  inline void set_jointime(::google::protobuf::uint64 value);

  // optional uint64 lastActiveTime = 7;
  inline bool has_lastactivetime() const;
  inline void clear_lastactivetime();
  static const int kLastActiveTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 lastactivetime() const;
  inline void set_lastactivetime(::google::protobuf::uint64 value);

  // optional uint32 guildcontributions = 8;
  inline bool has_guildcontributions() const;
  inline void clear_guildcontributions();
  static const int kGuildcontributionsFieldNumber = 8;
  inline ::google::protobuf::uint32 guildcontributions() const;
  inline void set_guildcontributions(::google::protobuf::uint32 value);

  // optional uint32 level = 9;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 9;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional bool isonline = 10;
  inline bool has_isonline() const;
  inline void clear_isonline();
  static const int kIsonlineFieldNumber = 10;
  inline bool isonline() const;
  inline void set_isonline(bool value);

  // optional uint32 vip_level = 11;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 11;
  inline ::google::protobuf::uint32 vip_level() const;
  inline void set_vip_level(::google::protobuf::uint32 value);

  // optional bool request_flag = 12;
  inline bool has_request_flag() const;
  inline void clear_request_flag();
  static const int kRequestFlagFieldNumber = 12;
  inline bool request_flag() const;
  inline void set_request_flag(bool value);

  // optional bool invite_flag = 13;
  inline bool has_invite_flag() const;
  inline void clear_invite_flag();
  static const int kInviteFlagFieldNumber = 13;
  inline bool invite_flag() const;
  inline void set_invite_flag(bool value);

  // optional uint64 request_expire_time = 14;
  inline bool has_request_expire_time() const;
  inline void clear_request_expire_time();
  static const int kRequestExpireTimeFieldNumber = 14;
  inline ::google::protobuf::uint64 request_expire_time() const;
  inline void set_request_expire_time(::google::protobuf::uint64 value);

  // optional uint32 power = 15;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 15;
  inline ::google::protobuf::uint32 power() const;
  inline void set_power(::google::protobuf::uint32 value);

  // optional uint32 head_icon = 16;
  inline bool has_head_icon() const;
  inline void clear_head_icon();
  static const int kHeadIconFieldNumber = 16;
  inline ::google::protobuf::uint32 head_icon() const;
  inline void set_head_icon(::google::protobuf::uint32 value);

  // repeated uint64 is_send_ap = 17;
  inline int is_send_ap_size() const;
  inline void clear_is_send_ap();
  static const int kIsSendApFieldNumber = 17;
  inline ::google::protobuf::uint64 is_send_ap(int index) const;
  inline void set_is_send_ap(int index, ::google::protobuf::uint64 value);
  inline void add_is_send_ap(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      is_send_ap() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_is_send_ap();

  // repeated uint64 is_receive_ap = 18;
  inline int is_receive_ap_size() const;
  inline void clear_is_receive_ap();
  static const int kIsReceiveApFieldNumber = 18;
  inline ::google::protobuf::uint64 is_receive_ap(int index) const;
  inline void set_is_receive_ap(int index, ::google::protobuf::uint64 value);
  inline void add_is_receive_ap(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      is_receive_ap() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_is_receive_ap();

  // @@protoc_insertion_point(class_scope:pb.GxDB_GMember_Info)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_guild_name();
  inline void clear_has_guild_name();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_jointime();
  inline void clear_has_jointime();
  inline void set_has_lastactivetime();
  inline void clear_has_lastactivetime();
  inline void set_has_guildcontributions();
  inline void clear_has_guildcontributions();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_isonline();
  inline void clear_has_isonline();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_request_flag();
  inline void clear_has_request_flag();
  inline void set_has_invite_flag();
  inline void clear_has_invite_flag();
  inline void set_has_request_expire_time();
  inline void clear_has_request_expire_time();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_head_icon();
  inline void clear_has_head_icon();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 playerid_;
  ::std::string* player_name_;
  ::google::protobuf::uint64 guild_id_;
  ::std::string* guild_name_;
  ::google::protobuf::uint64 jointime_;
  ::google::protobuf::uint32 title_;
  ::google::protobuf::uint32 guildcontributions_;
  ::google::protobuf::uint64 lastactivetime_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 vip_level_;
  bool isonline_;
  bool request_flag_;
  bool invite_flag_;
  ::google::protobuf::uint32 power_;
  ::google::protobuf::uint64 request_expire_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > is_send_ap_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > is_receive_ap_;
  ::google::protobuf::uint32 head_icon_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GxDB_GMember_Info* default_instance_;
};
// -------------------------------------------------------------------

class GxDB_Guild_Member : public ::google::protobuf::Message {
 public:
  GxDB_Guild_Member();
  virtual ~GxDB_Guild_Member();

  GxDB_Guild_Member(const GxDB_Guild_Member& from);

  inline GxDB_Guild_Member& operator=(const GxDB_Guild_Member& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GxDB_Guild_Member& default_instance();

  void Swap(GxDB_Guild_Member* other);

  // implements Message ----------------------------------------------

  GxDB_Guild_Member* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GxDB_Guild_Member& from);
  void MergeFrom(const GxDB_Guild_Member& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.GxDB_GMember_Info memberinfo = 1;
  inline int memberinfo_size() const;
  inline void clear_memberinfo();
  static const int kMemberinfoFieldNumber = 1;
  inline const ::pb::GxDB_GMember_Info& memberinfo(int index) const;
  inline ::pb::GxDB_GMember_Info* mutable_memberinfo(int index);
  inline ::pb::GxDB_GMember_Info* add_memberinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GxDB_GMember_Info >&
      memberinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GxDB_GMember_Info >*
      mutable_memberinfo();

  // @@protoc_insertion_point(class_scope:pb.GxDB_Guild_Member)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::GxDB_GMember_Info > memberinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GxDB_Guild_Member* default_instance_;
};
// -------------------------------------------------------------------

class GxDB_Guild : public ::google::protobuf::Message {
 public:
  GxDB_Guild();
  virtual ~GxDB_Guild();

  GxDB_Guild(const GxDB_Guild& from);

  inline GxDB_Guild& operator=(const GxDB_Guild& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GxDB_Guild& default_instance();

  void Swap(GxDB_Guild* other);

  // implements Message ----------------------------------------------

  GxDB_Guild* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GxDB_Guild& from);
  void MergeFrom(const GxDB_Guild& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 guild_id = 1;
  inline bool has_guild_id() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  inline ::google::protobuf::uint64 guild_id() const;
  inline void set_guild_id(::google::protobuf::uint64 value);

  // optional .pb.GxDB_GuildInfo guild_info = 2;
  inline bool has_guild_info() const;
  inline void clear_guild_info();
  static const int kGuildInfoFieldNumber = 2;
  inline const ::pb::GxDB_GuildInfo& guild_info() const;
  inline ::pb::GxDB_GuildInfo* mutable_guild_info();
  inline ::pb::GxDB_GuildInfo* release_guild_info();
  inline void set_allocated_guild_info(::pb::GxDB_GuildInfo* guild_info);

  // optional .pb.GxDB_Guild_Member members_info = 3;
  inline bool has_members_info() const;
  inline void clear_members_info();
  static const int kMembersInfoFieldNumber = 3;
  inline const ::pb::GxDB_Guild_Member& members_info() const;
  inline ::pb::GxDB_Guild_Member* mutable_members_info();
  inline ::pb::GxDB_Guild_Member* release_members_info();
  inline void set_allocated_members_info(::pb::GxDB_Guild_Member* members_info);

  // optional .pb.GxDB_Guild_Member request_list = 4;
  inline bool has_request_list() const;
  inline void clear_request_list();
  static const int kRequestListFieldNumber = 4;
  inline const ::pb::GxDB_Guild_Member& request_list() const;
  inline ::pb::GxDB_Guild_Member* mutable_request_list();
  inline ::pb::GxDB_Guild_Member* release_request_list();
  inline void set_allocated_request_list(::pb::GxDB_Guild_Member* request_list);

  // @@protoc_insertion_point(class_scope:pb.GxDB_Guild)
 private:
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_guild_info();
  inline void clear_has_guild_info();
  inline void set_has_members_info();
  inline void clear_has_members_info();
  inline void set_has_request_list();
  inline void clear_has_request_list();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guild_id_;
  ::pb::GxDB_GuildInfo* guild_info_;
  ::pb::GxDB_Guild_Member* members_info_;
  ::pb::GxDB_Guild_Member* request_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GxDB_Guild* default_instance_;
};
// -------------------------------------------------------------------

class GxDB_Guilds : public ::google::protobuf::Message {
 public:
  GxDB_Guilds();
  virtual ~GxDB_Guilds();

  GxDB_Guilds(const GxDB_Guilds& from);

  inline GxDB_Guilds& operator=(const GxDB_Guilds& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GxDB_Guilds& default_instance();

  void Swap(GxDB_Guilds* other);

  // implements Message ----------------------------------------------

  GxDB_Guilds* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GxDB_Guilds& from);
  void MergeFrom(const GxDB_Guilds& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.GxDB_Guild guildinfos = 1;
  inline int guildinfos_size() const;
  inline void clear_guildinfos();
  static const int kGuildinfosFieldNumber = 1;
  inline const ::pb::GxDB_Guild& guildinfos(int index) const;
  inline ::pb::GxDB_Guild* mutable_guildinfos(int index);
  inline ::pb::GxDB_Guild* add_guildinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GxDB_Guild >&
      guildinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GxDB_Guild >*
      mutable_guildinfos();

  // @@protoc_insertion_point(class_scope:pb.GxDB_Guilds)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::GxDB_Guild > guildinfos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GxDB_Guilds* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Guild_Leaderboard_Search : public ::google::protobuf::Message {
 public:
  C2GS_Guild_Leaderboard_Search();
  virtual ~C2GS_Guild_Leaderboard_Search();

  C2GS_Guild_Leaderboard_Search(const C2GS_Guild_Leaderboard_Search& from);

  inline C2GS_Guild_Leaderboard_Search& operator=(const C2GS_Guild_Leaderboard_Search& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Guild_Leaderboard_Search& default_instance();

  void Swap(C2GS_Guild_Leaderboard_Search* other);

  // implements Message ----------------------------------------------

  C2GS_Guild_Leaderboard_Search* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Guild_Leaderboard_Search& from);
  void MergeFrom(const C2GS_Guild_Leaderboard_Search& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional uint32 key_id = 2;
  inline bool has_key_id() const;
  inline void clear_key_id();
  static const int kKeyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 key_id() const;
  inline void set_key_id(::google::protobuf::uint32 value);

  // required uint64 your_guid = 3;
  inline bool has_your_guid() const;
  inline void clear_your_guid();
  static const int kYourGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 your_guid() const;
  inline void set_your_guid(::google::protobuf::uint64 value);

  // required bool is_leaderboard = 4 [default = true];
  inline bool has_is_leaderboard() const;
  inline void clear_is_leaderboard();
  static const int kIsLeaderboardFieldNumber = 4;
  inline bool is_leaderboard() const;
  inline void set_is_leaderboard(bool value);

  // optional bool is_by_name = 5;
  inline bool has_is_by_name() const;
  inline void clear_is_by_name();
  static const int kIsByNameFieldNumber = 5;
  inline bool is_by_name() const;
  inline void set_is_by_name(bool value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Guild_Leaderboard_Search)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_key_id();
  inline void clear_has_key_id();
  inline void set_has_your_guid();
  inline void clear_has_your_guid();
  inline void set_has_is_leaderboard();
  inline void clear_has_is_leaderboard();
  inline void set_has_is_by_name();
  inline void clear_has_is_by_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::google::protobuf::uint64 your_guid_;
  ::google::protobuf::uint32 key_id_;
  bool is_leaderboard_;
  bool is_by_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Guild_Leaderboard_Search* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Guild_Leaderboard_Search : public ::google::protobuf::Message {
 public:
  GS2C_Guild_Leaderboard_Search();
  virtual ~GS2C_Guild_Leaderboard_Search();

  GS2C_Guild_Leaderboard_Search(const GS2C_Guild_Leaderboard_Search& from);

  inline GS2C_Guild_Leaderboard_Search& operator=(const GS2C_Guild_Leaderboard_Search& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Guild_Leaderboard_Search& default_instance();

  void Swap(GS2C_Guild_Leaderboard_Search* other);

  // implements Message ----------------------------------------------

  GS2C_Guild_Leaderboard_Search* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Guild_Leaderboard_Search& from);
  void MergeFrom(const GS2C_Guild_Leaderboard_Search& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.GxDB_GuildInfo guild_infos = 1;
  inline int guild_infos_size() const;
  inline void clear_guild_infos();
  static const int kGuildInfosFieldNumber = 1;
  inline const ::pb::GxDB_GuildInfo& guild_infos(int index) const;
  inline ::pb::GxDB_GuildInfo* mutable_guild_infos(int index);
  inline ::pb::GxDB_GuildInfo* add_guild_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GxDB_GuildInfo >&
      guild_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GxDB_GuildInfo >*
      mutable_guild_infos();

  // optional bool is_leaderboard = 2 [default = true];
  inline bool has_is_leaderboard() const;
  inline void clear_is_leaderboard();
  static const int kIsLeaderboardFieldNumber = 2;
  inline bool is_leaderboard() const;
  inline void set_is_leaderboard(bool value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Guild_Leaderboard_Search)
 private:
  inline void set_has_is_leaderboard();
  inline void clear_has_is_leaderboard();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::GxDB_GuildInfo > guild_infos_;
  bool is_leaderboard_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Guild_Leaderboard_Search* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Guild_Player_Search : public ::google::protobuf::Message {
 public:
  C2GS_Guild_Player_Search();
  virtual ~C2GS_Guild_Player_Search();

  C2GS_Guild_Player_Search(const C2GS_Guild_Player_Search& from);

  inline C2GS_Guild_Player_Search& operator=(const C2GS_Guild_Player_Search& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Guild_Player_Search& default_instance();

  void Swap(C2GS_Guild_Player_Search* other);

  // implements Message ----------------------------------------------

  C2GS_Guild_Player_Search* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Guild_Player_Search& from);
  void MergeFrom(const C2GS_Guild_Player_Search& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_member = 1 [default = true];
  inline bool has_is_member() const;
  inline void clear_is_member();
  static const int kIsMemberFieldNumber = 1;
  inline bool is_member() const;
  inline void set_is_member(bool value);

  // optional string search_name = 2;
  inline bool has_search_name() const;
  inline void clear_search_name();
  static const int kSearchNameFieldNumber = 2;
  inline const ::std::string& search_name() const;
  inline void set_search_name(const ::std::string& value);
  inline void set_search_name(const char* value);
  inline void set_search_name(const char* value, size_t size);
  inline ::std::string* mutable_search_name();
  inline ::std::string* release_search_name();
  inline void set_allocated_search_name(::std::string* search_name);

  // required uint64 your_guid = 3;
  inline bool has_your_guid() const;
  inline void clear_your_guid();
  static const int kYourGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 your_guid() const;
  inline void set_your_guid(::google::protobuf::uint64 value);

  // required uint32 max_count = 4;
  inline bool has_max_count() const;
  inline void clear_max_count();
  static const int kMaxCountFieldNumber = 4;
  inline ::google::protobuf::uint32 max_count() const;
  inline void set_max_count(::google::protobuf::uint32 value);

  // required uint64 guild_id = 5;
  inline bool has_guild_id() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 5;
  inline ::google::protobuf::uint64 guild_id() const;
  inline void set_guild_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Guild_Player_Search)
 private:
  inline void set_has_is_member();
  inline void clear_has_is_member();
  inline void set_has_search_name();
  inline void clear_has_search_name();
  inline void set_has_your_guid();
  inline void clear_has_your_guid();
  inline void set_has_max_count();
  inline void clear_has_max_count();
  inline void set_has_guild_id();
  inline void clear_has_guild_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* search_name_;
  bool is_member_;
  ::google::protobuf::uint32 max_count_;
  ::google::protobuf::uint64 your_guid_;
  ::google::protobuf::uint64 guild_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Guild_Player_Search* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Guild_Player_Search_Respone : public ::google::protobuf::Message {
 public:
  GS2C_Guild_Player_Search_Respone();
  virtual ~GS2C_Guild_Player_Search_Respone();

  GS2C_Guild_Player_Search_Respone(const GS2C_Guild_Player_Search_Respone& from);

  inline GS2C_Guild_Player_Search_Respone& operator=(const GS2C_Guild_Player_Search_Respone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Guild_Player_Search_Respone& default_instance();

  void Swap(GS2C_Guild_Player_Search_Respone* other);

  // implements Message ----------------------------------------------

  GS2C_Guild_Player_Search_Respone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Guild_Player_Search_Respone& from);
  void MergeFrom(const GS2C_Guild_Player_Search_Respone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 search_result = 1;
  inline bool has_search_result() const;
  inline void clear_search_result();
  static const int kSearchResultFieldNumber = 1;
  inline ::google::protobuf::uint32 search_result() const;
  inline void set_search_result(::google::protobuf::uint32 value);

  // repeated .pb.GxDB_GMember_Info memberinfos = 2;
  inline int memberinfos_size() const;
  inline void clear_memberinfos();
  static const int kMemberinfosFieldNumber = 2;
  inline const ::pb::GxDB_GMember_Info& memberinfos(int index) const;
  inline ::pb::GxDB_GMember_Info* mutable_memberinfos(int index);
  inline ::pb::GxDB_GMember_Info* add_memberinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GxDB_GMember_Info >&
      memberinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GxDB_GMember_Info >*
      mutable_memberinfos();

  // required bool is_member = 3 [default = true];
  inline bool has_is_member() const;
  inline void clear_is_member();
  static const int kIsMemberFieldNumber = 3;
  inline bool is_member() const;
  inline void set_is_member(bool value);

  // required uint64 your_guid = 4;
  inline bool has_your_guid() const;
  inline void clear_your_guid();
  static const int kYourGuidFieldNumber = 4;
  inline ::google::protobuf::uint64 your_guid() const;
  inline void set_your_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Guild_Player_Search_Respone)
 private:
  inline void set_has_search_result();
  inline void clear_has_search_result();
  inline void set_has_is_member();
  inline void clear_has_is_member();
  inline void set_has_your_guid();
  inline void clear_has_your_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::GxDB_GMember_Info > memberinfos_;
  ::google::protobuf::uint32 search_result_;
  bool is_member_;
  ::google::protobuf::uint64 your_guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Guild_Player_Search_Respone* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Guild_Add : public ::google::protobuf::Message {
 public:
  C2GS_Guild_Add();
  virtual ~C2GS_Guild_Add();

  C2GS_Guild_Add(const C2GS_Guild_Add& from);

  inline C2GS_Guild_Add& operator=(const C2GS_Guild_Add& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Guild_Add& default_instance();

  void Swap(C2GS_Guild_Add* other);

  // implements Message ----------------------------------------------

  C2GS_Guild_Add* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Guild_Add& from);
  void MergeFrom(const C2GS_Guild_Add& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string guild_name = 1;
  inline bool has_guild_name() const;
  inline void clear_guild_name();
  static const int kGuildNameFieldNumber = 1;
  inline const ::std::string& guild_name() const;
  inline void set_guild_name(const ::std::string& value);
  inline void set_guild_name(const char* value);
  inline void set_guild_name(const char* value, size_t size);
  inline ::std::string* mutable_guild_name();
  inline ::std::string* release_guild_name();
  inline void set_allocated_guild_name(::std::string* guild_name);

  // optional string notice = 2;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 2;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // required uint32 icon = 3;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 3;
  inline ::google::protobuf::uint32 icon() const;
  inline void set_icon(::google::protobuf::uint32 value);

  // required uint64 your_guid = 4;
  inline bool has_your_guid() const;
  inline void clear_your_guid();
  static const int kYourGuidFieldNumber = 4;
  inline ::google::protobuf::uint64 your_guid() const;
  inline void set_your_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Guild_Add)
 private:
  inline void set_has_guild_name();
  inline void clear_has_guild_name();
  inline void set_has_notice();
  inline void clear_has_notice();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_your_guid();
  inline void clear_has_your_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* guild_name_;
  ::std::string* notice_;
  ::google::protobuf::uint64 your_guid_;
  ::google::protobuf::uint32 icon_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Guild_Add* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Guild_Add_Respon : public ::google::protobuf::Message {
 public:
  GS2C_Guild_Add_Respon();
  virtual ~GS2C_Guild_Add_Respon();

  GS2C_Guild_Add_Respon(const GS2C_Guild_Add_Respon& from);

  inline GS2C_Guild_Add_Respon& operator=(const GS2C_Guild_Add_Respon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Guild_Add_Respon& default_instance();

  void Swap(GS2C_Guild_Add_Respon* other);

  // implements Message ----------------------------------------------

  GS2C_Guild_Add_Respon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Guild_Add_Respon& from);
  void MergeFrom(const GS2C_Guild_Add_Respon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 add_result = 1;
  inline bool has_add_result() const;
  inline void clear_add_result();
  static const int kAddResultFieldNumber = 1;
  inline ::google::protobuf::int32 add_result() const;
  inline void set_add_result(::google::protobuf::int32 value);

  // optional .pb.GxDB_Guild guild = 2;
  inline bool has_guild() const;
  inline void clear_guild();
  static const int kGuildFieldNumber = 2;
  inline const ::pb::GxDB_Guild& guild() const;
  inline ::pb::GxDB_Guild* mutable_guild();
  inline ::pb::GxDB_Guild* release_guild();
  inline void set_allocated_guild(::pb::GxDB_Guild* guild);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Guild_Add_Respon)
 private:
  inline void set_has_add_result();
  inline void clear_has_add_result();
  inline void set_has_guild();
  inline void clear_has_guild();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::GxDB_Guild* guild_;
  ::google::protobuf::int32 add_result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Guild_Add_Respon* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Guild_Change : public ::google::protobuf::Message {
 public:
  GS2C_Guild_Change();
  virtual ~GS2C_Guild_Change();

  GS2C_Guild_Change(const GS2C_Guild_Change& from);

  inline GS2C_Guild_Change& operator=(const GS2C_Guild_Change& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Guild_Change& default_instance();

  void Swap(GS2C_Guild_Change* other);

  // implements Message ----------------------------------------------

  GS2C_Guild_Change* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Guild_Change& from);
  void MergeFrom(const GS2C_Guild_Change& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 playerid() const;
  inline void set_playerid(::google::protobuf::uint64 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Guild_Change)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 playerid_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Guild_Change* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Get_Guild_Info_Respon : public ::google::protobuf::Message {
 public:
  GS2C_Get_Guild_Info_Respon();
  virtual ~GS2C_Get_Guild_Info_Respon();

  GS2C_Get_Guild_Info_Respon(const GS2C_Get_Guild_Info_Respon& from);

  inline GS2C_Get_Guild_Info_Respon& operator=(const GS2C_Get_Guild_Info_Respon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Get_Guild_Info_Respon& default_instance();

  void Swap(GS2C_Get_Guild_Info_Respon* other);

  // implements Message ----------------------------------------------

  GS2C_Get_Guild_Info_Respon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Get_Guild_Info_Respon& from);
  void MergeFrom(const GS2C_Get_Guild_Info_Respon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isGet = 1;
  inline bool has_isget() const;
  inline void clear_isget();
  static const int kIsGetFieldNumber = 1;
  inline bool isget() const;
  inline void set_isget(bool value);

  // optional .pb.GxDB_Guild guild = 2;
  inline bool has_guild() const;
  inline void clear_guild();
  static const int kGuildFieldNumber = 2;
  inline const ::pb::GxDB_Guild& guild() const;
  inline ::pb::GxDB_Guild* mutable_guild();
  inline ::pb::GxDB_Guild* release_guild();
  inline void set_allocated_guild(::pb::GxDB_Guild* guild);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Get_Guild_Info_Respon)
 private:
  inline void set_has_isget();
  inline void clear_has_isget();
  inline void set_has_guild();
  inline void clear_has_guild();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::GxDB_Guild* guild_;
  bool isget_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Get_Guild_Info_Respon* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_GuildInvite : public ::google::protobuf::Message {
 public:
  C2GS_GuildInvite();
  virtual ~C2GS_GuildInvite();

  C2GS_GuildInvite(const C2GS_GuildInvite& from);

  inline C2GS_GuildInvite& operator=(const C2GS_GuildInvite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_GuildInvite& default_instance();

  void Swap(C2GS_GuildInvite* other);

  // implements Message ----------------------------------------------

  C2GS_GuildInvite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_GuildInvite& from);
  void MergeFrom(const C2GS_GuildInvite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_by_guid = 1 [default = true];
  inline bool has_is_by_guid() const;
  inline void clear_is_by_guid();
  static const int kIsByGuidFieldNumber = 1;
  inline bool is_by_guid() const;
  inline void set_is_by_guid(bool value);

  // optional bool is_by_guild = 2 [default = false];
  inline bool has_is_by_guild() const;
  inline void clear_is_by_guild();
  static const int kIsByGuildFieldNumber = 2;
  inline bool is_by_guild() const;
  inline void set_is_by_guild(bool value);

  // optional string invitee_name = 3;
  inline bool has_invitee_name() const;
  inline void clear_invitee_name();
  static const int kInviteeNameFieldNumber = 3;
  inline const ::std::string& invitee_name() const;
  inline void set_invitee_name(const ::std::string& value);
  inline void set_invitee_name(const char* value);
  inline void set_invitee_name(const char* value, size_t size);
  inline ::std::string* mutable_invitee_name();
  inline ::std::string* release_invitee_name();
  inline void set_allocated_invitee_name(::std::string* invitee_name);

  // optional uint64 invitee_guid = 4;
  inline bool has_invitee_guid() const;
  inline void clear_invitee_guid();
  static const int kInviteeGuidFieldNumber = 4;
  inline ::google::protobuf::uint64 invitee_guid() const;
  inline void set_invitee_guid(::google::protobuf::uint64 value);

  // required uint64 your_guid = 5;
  inline bool has_your_guid() const;
  inline void clear_your_guid();
  static const int kYourGuidFieldNumber = 5;
  inline ::google::protobuf::uint64 your_guid() const;
  inline void set_your_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_GuildInvite)
 private:
  inline void set_has_is_by_guid();
  inline void clear_has_is_by_guid();
  inline void set_has_is_by_guild();
  inline void clear_has_is_by_guild();
  inline void set_has_invitee_name();
  inline void clear_has_invitee_name();
  inline void set_has_invitee_guid();
  inline void clear_has_invitee_guid();
  inline void set_has_your_guid();
  inline void clear_has_your_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* invitee_name_;
  ::google::protobuf::uint64 invitee_guid_;
  ::google::protobuf::uint64 your_guid_;
  bool is_by_guid_;
  bool is_by_guild_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static C2GS_GuildInvite* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_GuildInvite : public ::google::protobuf::Message {
 public:
  GS2C_GuildInvite();
  virtual ~GS2C_GuildInvite();

  GS2C_GuildInvite(const GS2C_GuildInvite& from);

  inline GS2C_GuildInvite& operator=(const GS2C_GuildInvite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_GuildInvite& default_instance();

  void Swap(GS2C_GuildInvite* other);

  // implements Message ----------------------------------------------

  GS2C_GuildInvite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_GuildInvite& from);
  void MergeFrom(const GS2C_GuildInvite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 inviter_guid = 1;
  inline bool has_inviter_guid() const;
  inline void clear_inviter_guid();
  static const int kInviterGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 inviter_guid() const;
  inline void set_inviter_guid(::google::protobuf::uint64 value);

  // required string inviter_name = 2;
  inline bool has_inviter_name() const;
  inline void clear_inviter_name();
  static const int kInviterNameFieldNumber = 2;
  inline const ::std::string& inviter_name() const;
  inline void set_inviter_name(const ::std::string& value);
  inline void set_inviter_name(const char* value);
  inline void set_inviter_name(const char* value, size_t size);
  inline ::std::string* mutable_inviter_name();
  inline ::std::string* release_inviter_name();
  inline void set_allocated_inviter_name(::std::string* inviter_name);

  // optional bool is_invite = 3 [default = true];
  inline bool has_is_invite() const;
  inline void clear_is_invite();
  static const int kIsInviteFieldNumber = 3;
  inline bool is_invite() const;
  inline void set_is_invite(bool value);

  // optional string guild_name = 4;
  inline bool has_guild_name() const;
  inline void clear_guild_name();
  static const int kGuildNameFieldNumber = 4;
  inline const ::std::string& guild_name() const;
  inline void set_guild_name(const ::std::string& value);
  inline void set_guild_name(const char* value);
  inline void set_guild_name(const char* value, size_t size);
  inline ::std::string* mutable_guild_name();
  inline ::std::string* release_guild_name();
  inline void set_allocated_guild_name(::std::string* guild_name);

  // optional uint32 title = 5;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 5;
  inline ::google::protobuf::uint32 title() const;
  inline void set_title(::google::protobuf::uint32 value);

  // optional uint64 to_guid = 6;
  inline bool has_to_guid() const;
  inline void clear_to_guid();
  static const int kToGuidFieldNumber = 6;
  inline ::google::protobuf::uint64 to_guid() const;
  inline void set_to_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_GuildInvite)
 private:
  inline void set_has_inviter_guid();
  inline void clear_has_inviter_guid();
  inline void set_has_inviter_name();
  inline void clear_has_inviter_name();
  inline void set_has_is_invite();
  inline void clear_has_is_invite();
  inline void set_has_guild_name();
  inline void clear_has_guild_name();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_to_guid();
  inline void clear_has_to_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 inviter_guid_;
  ::std::string* inviter_name_;
  ::std::string* guild_name_;
  bool is_invite_;
  ::google::protobuf::uint32 title_;
  ::google::protobuf::uint64 to_guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GS2C_GuildInvite* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_GuildInviteResponse : public ::google::protobuf::Message {
 public:
  C2GS_GuildInviteResponse();
  virtual ~C2GS_GuildInviteResponse();

  C2GS_GuildInviteResponse(const C2GS_GuildInviteResponse& from);

  inline C2GS_GuildInviteResponse& operator=(const C2GS_GuildInviteResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_GuildInviteResponse& default_instance();

  void Swap(C2GS_GuildInviteResponse* other);

  // implements Message ----------------------------------------------

  C2GS_GuildInviteResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_GuildInviteResponse& from);
  void MergeFrom(const C2GS_GuildInviteResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_accept = 1;
  inline bool has_is_accept() const;
  inline void clear_is_accept();
  static const int kIsAcceptFieldNumber = 1;
  inline bool is_accept() const;
  inline void set_is_accept(bool value);

  // required uint64 inviter_guid = 2;
  inline bool has_inviter_guid() const;
  inline void clear_inviter_guid();
  static const int kInviterGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 inviter_guid() const;
  inline void set_inviter_guid(::google::protobuf::uint64 value);

  // required uint64 your_guid = 3;
  inline bool has_your_guid() const;
  inline void clear_your_guid();
  static const int kYourGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 your_guid() const;
  inline void set_your_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_GuildInviteResponse)
 private:
  inline void set_has_is_accept();
  inline void clear_has_is_accept();
  inline void set_has_inviter_guid();
  inline void clear_has_inviter_guid();
  inline void set_has_your_guid();
  inline void clear_has_your_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 inviter_guid_;
  ::google::protobuf::uint64 your_guid_;
  bool is_accept_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static C2GS_GuildInviteResponse* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_GuildInviteResponse : public ::google::protobuf::Message {
 public:
  GS2C_GuildInviteResponse();
  virtual ~GS2C_GuildInviteResponse();

  GS2C_GuildInviteResponse(const GS2C_GuildInviteResponse& from);

  inline GS2C_GuildInviteResponse& operator=(const GS2C_GuildInviteResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_GuildInviteResponse& default_instance();

  void Swap(GS2C_GuildInviteResponse* other);

  // implements Message ----------------------------------------------

  GS2C_GuildInviteResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_GuildInviteResponse& from);
  void MergeFrom(const GS2C_GuildInviteResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_accept = 1;
  inline bool has_is_accept() const;
  inline void clear_is_accept();
  static const int kIsAcceptFieldNumber = 1;
  inline bool is_accept() const;
  inline void set_is_accept(bool value);

  // repeated uint64 player_guids = 2;
  inline int player_guids_size() const;
  inline void clear_player_guids();
  static const int kPlayerGuidsFieldNumber = 2;
  inline ::google::protobuf::uint64 player_guids(int index) const;
  inline void set_player_guids(int index, ::google::protobuf::uint64 value);
  inline void add_player_guids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      player_guids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_player_guids();

  // optional int32 erro_code = 3;
  inline bool has_erro_code() const;
  inline void clear_erro_code();
  static const int kErroCodeFieldNumber = 3;
  inline ::google::protobuf::int32 erro_code() const;
  inline void set_erro_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_GuildInviteResponse)
 private:
  inline void set_has_is_accept();
  inline void clear_has_is_accept();
  inline void set_has_erro_code();
  inline void clear_has_erro_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > player_guids_;
  bool is_accept_;
  ::google::protobuf::int32 erro_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GS2C_GuildInviteResponse* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_GuildInviterApproval : public ::google::protobuf::Message {
 public:
  C2GS_GuildInviterApproval();
  virtual ~C2GS_GuildInviterApproval();

  C2GS_GuildInviterApproval(const C2GS_GuildInviterApproval& from);

  inline C2GS_GuildInviterApproval& operator=(const C2GS_GuildInviterApproval& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_GuildInviterApproval& default_instance();

  void Swap(C2GS_GuildInviterApproval* other);

  // implements Message ----------------------------------------------

  C2GS_GuildInviterApproval* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_GuildInviterApproval& from);
  void MergeFrom(const C2GS_GuildInviterApproval& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_accept = 1;
  inline bool has_is_accept() const;
  inline void clear_is_accept();
  static const int kIsAcceptFieldNumber = 1;
  inline bool is_accept() const;
  inline void set_is_accept(bool value);

  // required uint64 inviter_guid = 2;
  inline bool has_inviter_guid() const;
  inline void clear_inviter_guid();
  static const int kInviterGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 inviter_guid() const;
  inline void set_inviter_guid(::google::protobuf::uint64 value);

  // required uint64 your_guid = 3;
  inline bool has_your_guid() const;
  inline void clear_your_guid();
  static const int kYourGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 your_guid() const;
  inline void set_your_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_GuildInviterApproval)
 private:
  inline void set_has_is_accept();
  inline void clear_has_is_accept();
  inline void set_has_inviter_guid();
  inline void clear_has_inviter_guid();
  inline void set_has_your_guid();
  inline void clear_has_your_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 inviter_guid_;
  ::google::protobuf::uint64 your_guid_;
  bool is_accept_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static C2GS_GuildInviterApproval* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_GuildInviterApprovalResponse : public ::google::protobuf::Message {
 public:
  GS2C_GuildInviterApprovalResponse();
  virtual ~GS2C_GuildInviterApprovalResponse();

  GS2C_GuildInviterApprovalResponse(const GS2C_GuildInviterApprovalResponse& from);

  inline GS2C_GuildInviterApprovalResponse& operator=(const GS2C_GuildInviterApprovalResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_GuildInviterApprovalResponse& default_instance();

  void Swap(GS2C_GuildInviterApprovalResponse* other);

  // implements Message ----------------------------------------------

  GS2C_GuildInviterApprovalResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_GuildInviterApprovalResponse& from);
  void MergeFrom(const GS2C_GuildInviterApprovalResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_accept = 1;
  inline bool has_is_accept() const;
  inline void clear_is_accept();
  static const int kIsAcceptFieldNumber = 1;
  inline bool is_accept() const;
  inline void set_is_accept(bool value);

  // repeated uint64 player_guids = 2;
  inline int player_guids_size() const;
  inline void clear_player_guids();
  static const int kPlayerGuidsFieldNumber = 2;
  inline ::google::protobuf::uint64 player_guids(int index) const;
  inline void set_player_guids(int index, ::google::protobuf::uint64 value);
  inline void add_player_guids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      player_guids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_player_guids();

  // optional int32 erro_code = 3;
  inline bool has_erro_code() const;
  inline void clear_erro_code();
  static const int kErroCodeFieldNumber = 3;
  inline ::google::protobuf::int32 erro_code() const;
  inline void set_erro_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_GuildInviterApprovalResponse)
 private:
  inline void set_has_is_accept();
  inline void clear_has_is_accept();
  inline void set_has_erro_code();
  inline void clear_has_erro_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > player_guids_;
  bool is_accept_;
  ::google::protobuf::int32 erro_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GS2C_GuildInviterApprovalResponse* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_GuildInvite_Repeat : public ::google::protobuf::Message {
 public:
  GS2C_GuildInvite_Repeat();
  virtual ~GS2C_GuildInvite_Repeat();

  GS2C_GuildInvite_Repeat(const GS2C_GuildInvite_Repeat& from);

  inline GS2C_GuildInvite_Repeat& operator=(const GS2C_GuildInvite_Repeat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_GuildInvite_Repeat& default_instance();

  void Swap(GS2C_GuildInvite_Repeat* other);

  // implements Message ----------------------------------------------

  GS2C_GuildInvite_Repeat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_GuildInvite_Repeat& from);
  void MergeFrom(const GS2C_GuildInvite_Repeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 cur_guild_guid = 1;
  inline bool has_cur_guild_guid() const;
  inline void clear_cur_guild_guid();
  static const int kCurGuildGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 cur_guild_guid() const;
  inline void set_cur_guild_guid(::google::protobuf::uint64 value);

  // required string cur_guild_name = 2;
  inline bool has_cur_guild_name() const;
  inline void clear_cur_guild_name();
  static const int kCurGuildNameFieldNumber = 2;
  inline const ::std::string& cur_guild_name() const;
  inline void set_cur_guild_name(const ::std::string& value);
  inline void set_cur_guild_name(const char* value);
  inline void set_cur_guild_name(const char* value, size_t size);
  inline ::std::string* mutable_cur_guild_name();
  inline ::std::string* release_cur_guild_name();
  inline void set_allocated_cur_guild_name(::std::string* cur_guild_name);

  // required uint64 new_guild_guid = 3;
  inline bool has_new_guild_guid() const;
  inline void clear_new_guild_guid();
  static const int kNewGuildGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 new_guild_guid() const;
  inline void set_new_guild_guid(::google::protobuf::uint64 value);

  // required string new_guild_name = 4;
  inline bool has_new_guild_name() const;
  inline void clear_new_guild_name();
  static const int kNewGuildNameFieldNumber = 4;
  inline const ::std::string& new_guild_name() const;
  inline void set_new_guild_name(const ::std::string& value);
  inline void set_new_guild_name(const char* value);
  inline void set_new_guild_name(const char* value, size_t size);
  inline ::std::string* mutable_new_guild_name();
  inline ::std::string* release_new_guild_name();
  inline void set_allocated_new_guild_name(::std::string* new_guild_name);

  // required uint64 inviterId = 5;
  inline bool has_inviterid() const;
  inline void clear_inviterid();
  static const int kInviterIdFieldNumber = 5;
  inline ::google::protobuf::uint64 inviterid() const;
  inline void set_inviterid(::google::protobuf::uint64 value);

  // required uint64 inviteeId = 6;
  inline bool has_inviteeid() const;
  inline void clear_inviteeid();
  static const int kInviteeIdFieldNumber = 6;
  inline ::google::protobuf::uint64 inviteeid() const;
  inline void set_inviteeid(::google::protobuf::uint64 value);

  // optional bool is_invite = 7 [default = true];
  inline bool has_is_invite() const;
  inline void clear_is_invite();
  static const int kIsInviteFieldNumber = 7;
  inline bool is_invite() const;
  inline void set_is_invite(bool value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_GuildInvite_Repeat)
 private:
  inline void set_has_cur_guild_guid();
  inline void clear_has_cur_guild_guid();
  inline void set_has_cur_guild_name();
  inline void clear_has_cur_guild_name();
  inline void set_has_new_guild_guid();
  inline void clear_has_new_guild_guid();
  inline void set_has_new_guild_name();
  inline void clear_has_new_guild_name();
  inline void set_has_inviterid();
  inline void clear_has_inviterid();
  inline void set_has_inviteeid();
  inline void clear_has_inviteeid();
  inline void set_has_is_invite();
  inline void clear_has_is_invite();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cur_guild_guid_;
  ::std::string* cur_guild_name_;
  ::google::protobuf::uint64 new_guild_guid_;
  ::std::string* new_guild_name_;
  ::google::protobuf::uint64 inviterid_;
  ::google::protobuf::uint64 inviteeid_;
  bool is_invite_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GS2C_GuildInvite_Repeat* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_GuildInvite_Repeat_Operate : public ::google::protobuf::Message {
 public:
  C2GS_GuildInvite_Repeat_Operate();
  virtual ~C2GS_GuildInvite_Repeat_Operate();

  C2GS_GuildInvite_Repeat_Operate(const C2GS_GuildInvite_Repeat_Operate& from);

  inline C2GS_GuildInvite_Repeat_Operate& operator=(const C2GS_GuildInvite_Repeat_Operate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_GuildInvite_Repeat_Operate& default_instance();

  void Swap(C2GS_GuildInvite_Repeat_Operate* other);

  // implements Message ----------------------------------------------

  C2GS_GuildInvite_Repeat_Operate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_GuildInvite_Repeat_Operate& from);
  void MergeFrom(const C2GS_GuildInvite_Repeat_Operate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_replace = 1 [default = false];
  inline bool has_is_replace() const;
  inline void clear_is_replace();
  static const int kIsReplaceFieldNumber = 1;
  inline bool is_replace() const;
  inline void set_is_replace(bool value);

  // required uint64 cur_guild_guid = 2;
  inline bool has_cur_guild_guid() const;
  inline void clear_cur_guild_guid();
  static const int kCurGuildGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 cur_guild_guid() const;
  inline void set_cur_guild_guid(::google::protobuf::uint64 value);

  // required string cur_guild_name = 3;
  inline bool has_cur_guild_name() const;
  inline void clear_cur_guild_name();
  static const int kCurGuildNameFieldNumber = 3;
  inline const ::std::string& cur_guild_name() const;
  inline void set_cur_guild_name(const ::std::string& value);
  inline void set_cur_guild_name(const char* value);
  inline void set_cur_guild_name(const char* value, size_t size);
  inline ::std::string* mutable_cur_guild_name();
  inline ::std::string* release_cur_guild_name();
  inline void set_allocated_cur_guild_name(::std::string* cur_guild_name);

  // required uint64 new_guild_guid = 4;
  inline bool has_new_guild_guid() const;
  inline void clear_new_guild_guid();
  static const int kNewGuildGuidFieldNumber = 4;
  inline ::google::protobuf::uint64 new_guild_guid() const;
  inline void set_new_guild_guid(::google::protobuf::uint64 value);

  // required string new_guild_name = 5;
  inline bool has_new_guild_name() const;
  inline void clear_new_guild_name();
  static const int kNewGuildNameFieldNumber = 5;
  inline const ::std::string& new_guild_name() const;
  inline void set_new_guild_name(const ::std::string& value);
  inline void set_new_guild_name(const char* value);
  inline void set_new_guild_name(const char* value, size_t size);
  inline ::std::string* mutable_new_guild_name();
  inline ::std::string* release_new_guild_name();
  inline void set_allocated_new_guild_name(::std::string* new_guild_name);

  // required uint64 inviterId = 6;
  inline bool has_inviterid() const;
  inline void clear_inviterid();
  static const int kInviterIdFieldNumber = 6;
  inline ::google::protobuf::uint64 inviterid() const;
  inline void set_inviterid(::google::protobuf::uint64 value);

  // required uint64 inviteeId = 7;
  inline bool has_inviteeid() const;
  inline void clear_inviteeid();
  static const int kInviteeIdFieldNumber = 7;
  inline ::google::protobuf::uint64 inviteeid() const;
  inline void set_inviteeid(::google::protobuf::uint64 value);

  // optional bool is_invite = 8 [default = true];
  inline bool has_is_invite() const;
  inline void clear_is_invite();
  static const int kIsInviteFieldNumber = 8;
  inline bool is_invite() const;
  inline void set_is_invite(bool value);

  // required uint64 your_guid = 9;
  inline bool has_your_guid() const;
  inline void clear_your_guid();
  static const int kYourGuidFieldNumber = 9;
  inline ::google::protobuf::uint64 your_guid() const;
  inline void set_your_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_GuildInvite_Repeat_Operate)
 private:
  inline void set_has_is_replace();
  inline void clear_has_is_replace();
  inline void set_has_cur_guild_guid();
  inline void clear_has_cur_guild_guid();
  inline void set_has_cur_guild_name();
  inline void clear_has_cur_guild_name();
  inline void set_has_new_guild_guid();
  inline void clear_has_new_guild_guid();
  inline void set_has_new_guild_name();
  inline void clear_has_new_guild_name();
  inline void set_has_inviterid();
  inline void clear_has_inviterid();
  inline void set_has_inviteeid();
  inline void clear_has_inviteeid();
  inline void set_has_is_invite();
  inline void clear_has_is_invite();
  inline void set_has_your_guid();
  inline void clear_has_your_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cur_guild_guid_;
  ::std::string* cur_guild_name_;
  ::google::protobuf::uint64 new_guild_guid_;
  ::std::string* new_guild_name_;
  ::google::protobuf::uint64 inviterid_;
  ::google::protobuf::uint64 inviteeid_;
  ::google::protobuf::uint64 your_guid_;
  bool is_replace_;
  bool is_invite_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static C2GS_GuildInvite_Repeat_Operate* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_GuildInvite_Repeat_Operate_Respon : public ::google::protobuf::Message {
 public:
  GS2C_GuildInvite_Repeat_Operate_Respon();
  virtual ~GS2C_GuildInvite_Repeat_Operate_Respon();

  GS2C_GuildInvite_Repeat_Operate_Respon(const GS2C_GuildInvite_Repeat_Operate_Respon& from);

  inline GS2C_GuildInvite_Repeat_Operate_Respon& operator=(const GS2C_GuildInvite_Repeat_Operate_Respon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_GuildInvite_Repeat_Operate_Respon& default_instance();

  void Swap(GS2C_GuildInvite_Repeat_Operate_Respon* other);

  // implements Message ----------------------------------------------

  GS2C_GuildInvite_Repeat_Operate_Respon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_GuildInvite_Repeat_Operate_Respon& from);
  void MergeFrom(const GS2C_GuildInvite_Repeat_Operate_Respon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_replace = 1 [default = false];
  inline bool has_is_replace() const;
  inline void clear_is_replace();
  static const int kIsReplaceFieldNumber = 1;
  inline bool is_replace() const;
  inline void set_is_replace(bool value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_GuildInvite_Repeat_Operate_Respon)
 private:
  inline void set_has_is_replace();
  inline void clear_has_is_replace();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool is_replace_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GS2C_GuildInvite_Repeat_Operate_Respon* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_GuildQuit : public ::google::protobuf::Message {
 public:
  C2GS_GuildQuit();
  virtual ~C2GS_GuildQuit();

  C2GS_GuildQuit(const C2GS_GuildQuit& from);

  inline C2GS_GuildQuit& operator=(const C2GS_GuildQuit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_GuildQuit& default_instance();

  void Swap(C2GS_GuildQuit* other);

  // implements Message ----------------------------------------------

  C2GS_GuildQuit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_GuildQuit& from);
  void MergeFrom(const C2GS_GuildQuit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 quit_member_guid = 1;
  inline bool has_quit_member_guid() const;
  inline void clear_quit_member_guid();
  static const int kQuitMemberGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 quit_member_guid() const;
  inline void set_quit_member_guid(::google::protobuf::uint64 value);

  // required uint64 your_guid = 2;
  inline bool has_your_guid() const;
  inline void clear_your_guid();
  static const int kYourGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 your_guid() const;
  inline void set_your_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_GuildQuit)
 private:
  inline void set_has_quit_member_guid();
  inline void clear_has_quit_member_guid();
  inline void set_has_your_guid();
  inline void clear_has_your_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 quit_member_guid_;
  ::google::protobuf::uint64 your_guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static C2GS_GuildQuit* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_GuildQuit_Respon : public ::google::protobuf::Message {
 public:
  GS2C_GuildQuit_Respon();
  virtual ~GS2C_GuildQuit_Respon();

  GS2C_GuildQuit_Respon(const GS2C_GuildQuit_Respon& from);

  inline GS2C_GuildQuit_Respon& operator=(const GS2C_GuildQuit_Respon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_GuildQuit_Respon& default_instance();

  void Swap(GS2C_GuildQuit_Respon* other);

  // implements Message ----------------------------------------------

  GS2C_GuildQuit_Respon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_GuildQuit_Respon& from);
  void MergeFrom(const GS2C_GuildQuit_Respon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 quit_result = 1;
  inline bool has_quit_result() const;
  inline void clear_quit_result();
  static const int kQuitResultFieldNumber = 1;
  inline ::google::protobuf::uint32 quit_result() const;
  inline void set_quit_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_GuildQuit_Respon)
 private:
  inline void set_has_quit_result();
  inline void clear_has_quit_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 quit_result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GS2C_GuildQuit_Respon* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_GuildMemberQuit : public ::google::protobuf::Message {
 public:
  GS2C_GuildMemberQuit();
  virtual ~GS2C_GuildMemberQuit();

  GS2C_GuildMemberQuit(const GS2C_GuildMemberQuit& from);

  inline GS2C_GuildMemberQuit& operator=(const GS2C_GuildMemberQuit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_GuildMemberQuit& default_instance();

  void Swap(GS2C_GuildMemberQuit* other);

  // implements Message ----------------------------------------------

  GS2C_GuildMemberQuit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_GuildMemberQuit& from);
  void MergeFrom(const GS2C_GuildMemberQuit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_kicked = 1 [default = false];
  inline bool has_is_kicked() const;
  inline void clear_is_kicked();
  static const int kIsKickedFieldNumber = 1;
  inline bool is_kicked() const;
  inline void set_is_kicked(bool value);

  // required uint64 quit_guid = 2;
  inline bool has_quit_guid() const;
  inline void clear_quit_guid();
  static const int kQuitGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 quit_guid() const;
  inline void set_quit_guid(::google::protobuf::uint64 value);

  // optional bool is_disband = 3 [default = false];
  inline bool has_is_disband() const;
  inline void clear_is_disband();
  static const int kIsDisbandFieldNumber = 3;
  inline bool is_disband() const;
  inline void set_is_disband(bool value);

  // optional bool is_quit = 4 [default = false];
  inline bool has_is_quit() const;
  inline void clear_is_quit();
  static const int kIsQuitFieldNumber = 4;
  inline bool is_quit() const;
  inline void set_is_quit(bool value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_GuildMemberQuit)
 private:
  inline void set_has_is_kicked();
  inline void clear_has_is_kicked();
  inline void set_has_quit_guid();
  inline void clear_has_quit_guid();
  inline void set_has_is_disband();
  inline void clear_has_is_disband();
  inline void set_has_is_quit();
  inline void clear_has_is_quit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 quit_guid_;
  bool is_kicked_;
  bool is_disband_;
  bool is_quit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GS2C_GuildMemberQuit* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_GuildDisband : public ::google::protobuf::Message {
 public:
  GS2C_GuildDisband();
  virtual ~GS2C_GuildDisband();

  GS2C_GuildDisband(const GS2C_GuildDisband& from);

  inline GS2C_GuildDisband& operator=(const GS2C_GuildDisband& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_GuildDisband& default_instance();

  void Swap(GS2C_GuildDisband* other);

  // implements Message ----------------------------------------------

  GS2C_GuildDisband* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_GuildDisband& from);
  void MergeFrom(const GS2C_GuildDisband& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_kicked = 1 [default = false];
  inline bool has_is_kicked() const;
  inline void clear_is_kicked();
  static const int kIsKickedFieldNumber = 1;
  inline bool is_kicked() const;
  inline void set_is_kicked(bool value);

  // optional bool is_disband = 2 [default = false];
  inline bool has_is_disband() const;
  inline void clear_is_disband();
  static const int kIsDisbandFieldNumber = 2;
  inline bool is_disband() const;
  inline void set_is_disband(bool value);

  // optional bool is_quit = 3 [default = false];
  inline bool has_is_quit() const;
  inline void clear_is_quit();
  static const int kIsQuitFieldNumber = 3;
  inline bool is_quit() const;
  inline void set_is_quit(bool value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_GuildDisband)
 private:
  inline void set_has_is_kicked();
  inline void clear_has_is_kicked();
  inline void set_has_is_disband();
  inline void clear_has_is_disband();
  inline void set_has_is_quit();
  inline void clear_has_is_quit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool is_kicked_;
  bool is_disband_;
  bool is_quit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GS2C_GuildDisband* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_GuildUpdate : public ::google::protobuf::Message {
 public:
  C2GS_GuildUpdate();
  virtual ~C2GS_GuildUpdate();

  C2GS_GuildUpdate(const C2GS_GuildUpdate& from);

  inline C2GS_GuildUpdate& operator=(const C2GS_GuildUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_GuildUpdate& default_instance();

  void Swap(C2GS_GuildUpdate* other);

  // implements Message ----------------------------------------------

  C2GS_GuildUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_GuildUpdate& from);
  void MergeFrom(const C2GS_GuildUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 update_flag = 1;
  inline bool has_update_flag() const;
  inline void clear_update_flag();
  static const int kUpdateFlagFieldNumber = 1;
  inline ::google::protobuf::uint32 update_flag() const;
  inline void set_update_flag(::google::protobuf::uint32 value);

  // optional .pb.GxDB_Guild guild = 2;
  inline bool has_guild() const;
  inline void clear_guild();
  static const int kGuildFieldNumber = 2;
  inline const ::pb::GxDB_Guild& guild() const;
  inline ::pb::GxDB_Guild* mutable_guild();
  inline ::pb::GxDB_Guild* release_guild();
  inline void set_allocated_guild(::pb::GxDB_Guild* guild);

  // required uint64 your_guid = 3;
  inline bool has_your_guid() const;
  inline void clear_your_guid();
  static const int kYourGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 your_guid() const;
  inline void set_your_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_GuildUpdate)
 private:
  inline void set_has_update_flag();
  inline void clear_has_update_flag();
  inline void set_has_guild();
  inline void clear_has_guild();
  inline void set_has_your_guid();
  inline void clear_has_your_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::GxDB_Guild* guild_;
  ::google::protobuf::uint64 your_guid_;
  ::google::protobuf::uint32 update_flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static C2GS_GuildUpdate* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_GuildUpdate : public ::google::protobuf::Message {
 public:
  GS2C_GuildUpdate();
  virtual ~GS2C_GuildUpdate();

  GS2C_GuildUpdate(const GS2C_GuildUpdate& from);

  inline GS2C_GuildUpdate& operator=(const GS2C_GuildUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_GuildUpdate& default_instance();

  void Swap(GS2C_GuildUpdate* other);

  // implements Message ----------------------------------------------

  GS2C_GuildUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_GuildUpdate& from);
  void MergeFrom(const GS2C_GuildUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 update_flag = 1;
  inline bool has_update_flag() const;
  inline void clear_update_flag();
  static const int kUpdateFlagFieldNumber = 1;
  inline ::google::protobuf::uint32 update_flag() const;
  inline void set_update_flag(::google::protobuf::uint32 value);

  // optional .pb.GxDB_Guild guild = 2;
  inline bool has_guild() const;
  inline void clear_guild();
  static const int kGuildFieldNumber = 2;
  inline const ::pb::GxDB_Guild& guild() const;
  inline ::pb::GxDB_Guild* mutable_guild();
  inline ::pb::GxDB_Guild* release_guild();
  inline void set_allocated_guild(::pb::GxDB_Guild* guild);

  // required uint64 update_guid = 3;
  inline bool has_update_guid() const;
  inline void clear_update_guid();
  static const int kUpdateGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 update_guid() const;
  inline void set_update_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_GuildUpdate)
 private:
  inline void set_has_update_flag();
  inline void clear_has_update_flag();
  inline void set_has_guild();
  inline void clear_has_guild();
  inline void set_has_update_guid();
  inline void clear_has_update_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::GxDB_Guild* guild_;
  ::google::protobuf::uint64 update_guid_;
  ::google::protobuf::uint32 update_flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GS2C_GuildUpdate* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Guild_Autority_Operate : public ::google::protobuf::Message {
 public:
  C2GS_Guild_Autority_Operate();
  virtual ~C2GS_Guild_Autority_Operate();

  C2GS_Guild_Autority_Operate(const C2GS_Guild_Autority_Operate& from);

  inline C2GS_Guild_Autority_Operate& operator=(const C2GS_Guild_Autority_Operate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Guild_Autority_Operate& default_instance();

  void Swap(C2GS_Guild_Autority_Operate* other);

  // implements Message ----------------------------------------------

  C2GS_Guild_Autority_Operate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Guild_Autority_Operate& from);
  void MergeFrom(const C2GS_Guild_Autority_Operate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 target_guid = 1;
  inline bool has_target_guid() const;
  inline void clear_target_guid();
  static const int kTargetGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 target_guid() const;
  inline void set_target_guid(::google::protobuf::uint64 value);

  // required string target_name = 2;
  inline bool has_target_name() const;
  inline void clear_target_name();
  static const int kTargetNameFieldNumber = 2;
  inline const ::std::string& target_name() const;
  inline void set_target_name(const ::std::string& value);
  inline void set_target_name(const char* value);
  inline void set_target_name(const char* value, size_t size);
  inline ::std::string* mutable_target_name();
  inline ::std::string* release_target_name();
  inline void set_allocated_target_name(::std::string* target_name);

  // required uint64 your_guid = 3;
  inline bool has_your_guid() const;
  inline void clear_your_guid();
  static const int kYourGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 your_guid() const;
  inline void set_your_guid(::google::protobuf::uint64 value);

  // required string your_name = 4;
  inline bool has_your_name() const;
  inline void clear_your_name();
  static const int kYourNameFieldNumber = 4;
  inline const ::std::string& your_name() const;
  inline void set_your_name(const ::std::string& value);
  inline void set_your_name(const char* value);
  inline void set_your_name(const char* value, size_t size);
  inline ::std::string* mutable_your_name();
  inline ::std::string* release_your_name();
  inline void set_allocated_your_name(::std::string* your_name);

  // optional uint32 operate_type = 5;
  inline bool has_operate_type() const;
  inline void clear_operate_type();
  static const int kOperateTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 operate_type() const;
  inline void set_operate_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Guild_Autority_Operate)
 private:
  inline void set_has_target_guid();
  inline void clear_has_target_guid();
  inline void set_has_target_name();
  inline void clear_has_target_name();
  inline void set_has_your_guid();
  inline void clear_has_your_guid();
  inline void set_has_your_name();
  inline void clear_has_your_name();
  inline void set_has_operate_type();
  inline void clear_has_operate_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 target_guid_;
  ::std::string* target_name_;
  ::google::protobuf::uint64 your_guid_;
  ::std::string* your_name_;
  ::google::protobuf::uint32 operate_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Guild_Autority_Operate* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Guild_Autority_Operate_Respon : public ::google::protobuf::Message {
 public:
  GS2C_Guild_Autority_Operate_Respon();
  virtual ~GS2C_Guild_Autority_Operate_Respon();

  GS2C_Guild_Autority_Operate_Respon(const GS2C_Guild_Autority_Operate_Respon& from);

  inline GS2C_Guild_Autority_Operate_Respon& operator=(const GS2C_Guild_Autority_Operate_Respon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Guild_Autority_Operate_Respon& default_instance();

  void Swap(GS2C_Guild_Autority_Operate_Respon* other);

  // implements Message ----------------------------------------------

  GS2C_Guild_Autority_Operate_Respon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Guild_Autority_Operate_Respon& from);
  void MergeFrom(const GS2C_Guild_Autority_Operate_Respon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 target_guid = 1;
  inline bool has_target_guid() const;
  inline void clear_target_guid();
  static const int kTargetGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 target_guid() const;
  inline void set_target_guid(::google::protobuf::uint64 value);

  // required string target_name = 2;
  inline bool has_target_name() const;
  inline void clear_target_name();
  static const int kTargetNameFieldNumber = 2;
  inline const ::std::string& target_name() const;
  inline void set_target_name(const ::std::string& value);
  inline void set_target_name(const char* value);
  inline void set_target_name(const char* value, size_t size);
  inline ::std::string* mutable_target_name();
  inline ::std::string* release_target_name();
  inline void set_allocated_target_name(::std::string* target_name);

  // required uint64 operater_guid = 3;
  inline bool has_operater_guid() const;
  inline void clear_operater_guid();
  static const int kOperaterGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 operater_guid() const;
  inline void set_operater_guid(::google::protobuf::uint64 value);

  // required string operater_name = 4;
  inline bool has_operater_name() const;
  inline void clear_operater_name();
  static const int kOperaterNameFieldNumber = 4;
  inline const ::std::string& operater_name() const;
  inline void set_operater_name(const ::std::string& value);
  inline void set_operater_name(const char* value);
  inline void set_operater_name(const char* value, size_t size);
  inline ::std::string* mutable_operater_name();
  inline ::std::string* release_operater_name();
  inline void set_allocated_operater_name(::std::string* operater_name);

  // optional uint32 operate_type = 5;
  inline bool has_operate_type() const;
  inline void clear_operate_type();
  static const int kOperateTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 operate_type() const;
  inline void set_operate_type(::google::protobuf::uint32 value);

  // required uint32 operate_result = 6;
  inline bool has_operate_result() const;
  inline void clear_operate_result();
  static const int kOperateResultFieldNumber = 6;
  inline ::google::protobuf::uint32 operate_result() const;
  inline void set_operate_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Guild_Autority_Operate_Respon)
 private:
  inline void set_has_target_guid();
  inline void clear_has_target_guid();
  inline void set_has_target_name();
  inline void clear_has_target_name();
  inline void set_has_operater_guid();
  inline void clear_has_operater_guid();
  inline void set_has_operater_name();
  inline void clear_has_operater_name();
  inline void set_has_operate_type();
  inline void clear_has_operate_type();
  inline void set_has_operate_result();
  inline void clear_has_operate_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 target_guid_;
  ::std::string* target_name_;
  ::google::protobuf::uint64 operater_guid_;
  ::std::string* operater_name_;
  ::google::protobuf::uint32 operate_type_;
  ::google::protobuf::uint32 operate_result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Guild_Autority_Operate_Respon* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_GuildUpdate_Member : public ::google::protobuf::Message {
 public:
  C2GS_GuildUpdate_Member();
  virtual ~C2GS_GuildUpdate_Member();

  C2GS_GuildUpdate_Member(const C2GS_GuildUpdate_Member& from);

  inline C2GS_GuildUpdate_Member& operator=(const C2GS_GuildUpdate_Member& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_GuildUpdate_Member& default_instance();

  void Swap(C2GS_GuildUpdate_Member* other);

  // implements Message ----------------------------------------------

  C2GS_GuildUpdate_Member* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_GuildUpdate_Member& from);
  void MergeFrom(const C2GS_GuildUpdate_Member& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 update_flag = 1;
  inline bool has_update_flag() const;
  inline void clear_update_flag();
  static const int kUpdateFlagFieldNumber = 1;
  inline ::google::protobuf::uint32 update_flag() const;
  inline void set_update_flag(::google::protobuf::uint32 value);

  // optional .pb.GxDB_GMember_Info member = 2;
  inline bool has_member() const;
  inline void clear_member();
  static const int kMemberFieldNumber = 2;
  inline const ::pb::GxDB_GMember_Info& member() const;
  inline ::pb::GxDB_GMember_Info* mutable_member();
  inline ::pb::GxDB_GMember_Info* release_member();
  inline void set_allocated_member(::pb::GxDB_GMember_Info* member);

  // required uint64 your_guid = 3;
  inline bool has_your_guid() const;
  inline void clear_your_guid();
  static const int kYourGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 your_guid() const;
  inline void set_your_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_GuildUpdate_Member)
 private:
  inline void set_has_update_flag();
  inline void clear_has_update_flag();
  inline void set_has_member();
  inline void clear_has_member();
  inline void set_has_your_guid();
  inline void clear_has_your_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::GxDB_GMember_Info* member_;
  ::google::protobuf::uint64 your_guid_;
  ::google::protobuf::uint32 update_flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static C2GS_GuildUpdate_Member* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_GuildUpdate_Member : public ::google::protobuf::Message {
 public:
  GS2C_GuildUpdate_Member();
  virtual ~GS2C_GuildUpdate_Member();

  GS2C_GuildUpdate_Member(const GS2C_GuildUpdate_Member& from);

  inline GS2C_GuildUpdate_Member& operator=(const GS2C_GuildUpdate_Member& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_GuildUpdate_Member& default_instance();

  void Swap(GS2C_GuildUpdate_Member* other);

  // implements Message ----------------------------------------------

  GS2C_GuildUpdate_Member* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_GuildUpdate_Member& from);
  void MergeFrom(const GS2C_GuildUpdate_Member& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 update_flag = 1;
  inline bool has_update_flag() const;
  inline void clear_update_flag();
  static const int kUpdateFlagFieldNumber = 1;
  inline ::google::protobuf::uint32 update_flag() const;
  inline void set_update_flag(::google::protobuf::uint32 value);

  // optional .pb.GxDB_GMember_Info member = 2;
  inline bool has_member() const;
  inline void clear_member();
  static const int kMemberFieldNumber = 2;
  inline const ::pb::GxDB_GMember_Info& member() const;
  inline ::pb::GxDB_GMember_Info* mutable_member();
  inline ::pb::GxDB_GMember_Info* release_member();
  inline void set_allocated_member(::pb::GxDB_GMember_Info* member);

  // @@protoc_insertion_point(class_scope:pb.GS2C_GuildUpdate_Member)
 private:
  inline void set_has_update_flag();
  inline void clear_has_update_flag();
  inline void set_has_member();
  inline void clear_has_member();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::GxDB_GMember_Info* member_;
  ::google::protobuf::uint32 update_flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GS2C_GuildUpdate_Member* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Update_Respon : public ::google::protobuf::Message {
 public:
  GS2C_Update_Respon();
  virtual ~GS2C_Update_Respon();

  GS2C_Update_Respon(const GS2C_Update_Respon& from);

  inline GS2C_Update_Respon& operator=(const GS2C_Update_Respon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Update_Respon& default_instance();

  void Swap(GS2C_Update_Respon* other);

  // implements Message ----------------------------------------------

  GS2C_Update_Respon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Update_Respon& from);
  void MergeFrom(const GS2C_Update_Respon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 update_result = 1;
  inline bool has_update_result() const;
  inline void clear_update_result();
  static const int kUpdateResultFieldNumber = 1;
  inline ::google::protobuf::uint32 update_result() const;
  inline void set_update_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Update_Respon)
 private:
  inline void set_has_update_result();
  inline void clear_has_update_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 update_result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Update_Respon* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_GuildName_Check : public ::google::protobuf::Message {
 public:
  C2GS_GuildName_Check();
  virtual ~C2GS_GuildName_Check();

  C2GS_GuildName_Check(const C2GS_GuildName_Check& from);

  inline C2GS_GuildName_Check& operator=(const C2GS_GuildName_Check& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_GuildName_Check& default_instance();

  void Swap(C2GS_GuildName_Check* other);

  // implements Message ----------------------------------------------

  C2GS_GuildName_Check* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_GuildName_Check& from);
  void MergeFrom(const C2GS_GuildName_Check& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string guild_name = 1;
  inline bool has_guild_name() const;
  inline void clear_guild_name();
  static const int kGuildNameFieldNumber = 1;
  inline const ::std::string& guild_name() const;
  inline void set_guild_name(const ::std::string& value);
  inline void set_guild_name(const char* value);
  inline void set_guild_name(const char* value, size_t size);
  inline ::std::string* mutable_guild_name();
  inline ::std::string* release_guild_name();
  inline void set_allocated_guild_name(::std::string* guild_name);

  // required uint64 your_guid = 2;
  inline bool has_your_guid() const;
  inline void clear_your_guid();
  static const int kYourGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 your_guid() const;
  inline void set_your_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_GuildName_Check)
 private:
  inline void set_has_guild_name();
  inline void clear_has_guild_name();
  inline void set_has_your_guid();
  inline void clear_has_your_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* guild_name_;
  ::google::protobuf::uint64 your_guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static C2GS_GuildName_Check* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_GuildName_Check_Respon : public ::google::protobuf::Message {
 public:
  GS2C_GuildName_Check_Respon();
  virtual ~GS2C_GuildName_Check_Respon();

  GS2C_GuildName_Check_Respon(const GS2C_GuildName_Check_Respon& from);

  inline GS2C_GuildName_Check_Respon& operator=(const GS2C_GuildName_Check_Respon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_GuildName_Check_Respon& default_instance();

  void Swap(GS2C_GuildName_Check_Respon* other);

  // implements Message ----------------------------------------------

  GS2C_GuildName_Check_Respon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_GuildName_Check_Respon& from);
  void MergeFrom(const GS2C_GuildName_Check_Respon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_can_use = 1;
  inline bool has_is_can_use() const;
  inline void clear_is_can_use();
  static const int kIsCanUseFieldNumber = 1;
  inline bool is_can_use() const;
  inline void set_is_can_use(bool value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_GuildName_Check_Respon)
 private:
  inline void set_has_is_can_use();
  inline void clear_has_is_can_use();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool is_can_use_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GS2C_GuildName_Check_Respon* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Guild_Notify : public ::google::protobuf::Message {
 public:
  GS2C_Guild_Notify();
  virtual ~GS2C_Guild_Notify();

  GS2C_Guild_Notify(const GS2C_Guild_Notify& from);

  inline GS2C_Guild_Notify& operator=(const GS2C_Guild_Notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Guild_Notify& default_instance();

  void Swap(GS2C_Guild_Notify* other);

  // implements Message ----------------------------------------------

  GS2C_Guild_Notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Guild_Notify& from);
  void MergeFrom(const GS2C_Guild_Notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 notify_type = 1;
  inline bool has_notify_type() const;
  inline void clear_notify_type();
  static const int kNotifyTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 notify_type() const;
  inline void set_notify_type(::google::protobuf::uint32 value);

  // optional uint64 approval_guid = 2;
  inline bool has_approval_guid() const;
  inline void clear_approval_guid();
  static const int kApprovalGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 approval_guid() const;
  inline void set_approval_guid(::google::protobuf::uint64 value);

  // optional string approval_name = 3;
  inline bool has_approval_name() const;
  inline void clear_approval_name();
  static const int kApprovalNameFieldNumber = 3;
  inline const ::std::string& approval_name() const;
  inline void set_approval_name(const ::std::string& value);
  inline void set_approval_name(const char* value);
  inline void set_approval_name(const char* value, size_t size);
  inline ::std::string* mutable_approval_name();
  inline ::std::string* release_approval_name();
  inline void set_allocated_approval_name(::std::string* approval_name);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Guild_Notify)
 private:
  inline void set_has_notify_type();
  inline void clear_has_notify_type();
  inline void set_has_approval_guid();
  inline void clear_has_approval_guid();
  inline void set_has_approval_name();
  inline void clear_has_approval_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 approval_guid_;
  ::std::string* approval_name_;
  ::google::protobuf::uint32 notify_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Guild_Notify* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Guild_Dynamic_Event : public ::google::protobuf::Message {
 public:
  GS2C_Guild_Dynamic_Event();
  virtual ~GS2C_Guild_Dynamic_Event();

  GS2C_Guild_Dynamic_Event(const GS2C_Guild_Dynamic_Event& from);

  inline GS2C_Guild_Dynamic_Event& operator=(const GS2C_Guild_Dynamic_Event& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Guild_Dynamic_Event& default_instance();

  void Swap(GS2C_Guild_Dynamic_Event* other);

  // implements Message ----------------------------------------------

  GS2C_Guild_Dynamic_Event* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Guild_Dynamic_Event& from);
  void MergeFrom(const GS2C_Guild_Dynamic_Event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.GUILD_DYNAMIC_EVENT event_type = 1;
  inline bool has_event_type() const;
  inline void clear_event_type();
  static const int kEventTypeFieldNumber = 1;
  inline ::pb::GUILD_DYNAMIC_EVENT event_type() const;
  inline void set_event_type(::pb::GUILD_DYNAMIC_EVENT value);

  // optional uint64 guild_id = 2;
  inline bool has_guild_id() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 2;
  inline ::google::protobuf::uint64 guild_id() const;
  inline void set_guild_id(::google::protobuf::uint64 value);

  // optional string guild_name = 3;
  inline bool has_guild_name() const;
  inline void clear_guild_name();
  static const int kGuildNameFieldNumber = 3;
  inline const ::std::string& guild_name() const;
  inline void set_guild_name(const ::std::string& value);
  inline void set_guild_name(const char* value);
  inline void set_guild_name(const char* value, size_t size);
  inline ::std::string* mutable_guild_name();
  inline ::std::string* release_guild_name();
  inline void set_allocated_guild_name(::std::string* guild_name);

  // optional uint64 player_id = 4;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 4;
  inline ::google::protobuf::uint64 player_id() const;
  inline void set_player_id(::google::protobuf::uint64 value);

  // optional string player_name = 5;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 5;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // optional uint32 id_value = 6;
  inline bool has_id_value() const;
  inline void clear_id_value();
  static const int kIdValueFieldNumber = 6;
  inline ::google::protobuf::uint32 id_value() const;
  inline void set_id_value(::google::protobuf::uint32 value);

  // optional string str_value = 7;
  inline bool has_str_value() const;
  inline void clear_str_value();
  static const int kStrValueFieldNumber = 7;
  inline const ::std::string& str_value() const;
  inline void set_str_value(const ::std::string& value);
  inline void set_str_value(const char* value);
  inline void set_str_value(const char* value, size_t size);
  inline ::std::string* mutable_str_value();
  inline ::std::string* release_str_value();
  inline void set_allocated_str_value(::std::string* str_value);

  // optional uint64 event_time = 8;
  inline bool has_event_time() const;
  inline void clear_event_time();
  static const int kEventTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 event_time() const;
  inline void set_event_time(::google::protobuf::uint64 value);

  // optional uint64 item_guid = 9;
  inline bool has_item_guid() const;
  inline void clear_item_guid();
  static const int kItemGuidFieldNumber = 9;
  inline ::google::protobuf::uint64 item_guid() const;
  inline void set_item_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Guild_Dynamic_Event)
 private:
  inline void set_has_event_type();
  inline void clear_has_event_type();
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_guild_name();
  inline void clear_has_guild_name();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_id_value();
  inline void clear_has_id_value();
  inline void set_has_str_value();
  inline void clear_has_str_value();
  inline void set_has_event_time();
  inline void clear_has_event_time();
  inline void set_has_item_guid();
  inline void clear_has_item_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guild_id_;
  ::std::string* guild_name_;
  int event_type_;
  ::google::protobuf::uint32 id_value_;
  ::google::protobuf::uint64 player_id_;
  ::std::string* player_name_;
  ::std::string* str_value_;
  ::google::protobuf::uint64 event_time_;
  ::google::protobuf::uint64 item_guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Guild_Dynamic_Event* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Guild_Dynamic_Event_Log : public ::google::protobuf::Message {
 public:
  GS2C_Guild_Dynamic_Event_Log();
  virtual ~GS2C_Guild_Dynamic_Event_Log();

  GS2C_Guild_Dynamic_Event_Log(const GS2C_Guild_Dynamic_Event_Log& from);

  inline GS2C_Guild_Dynamic_Event_Log& operator=(const GS2C_Guild_Dynamic_Event_Log& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Guild_Dynamic_Event_Log& default_instance();

  void Swap(GS2C_Guild_Dynamic_Event_Log* other);

  // implements Message ----------------------------------------------

  GS2C_Guild_Dynamic_Event_Log* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Guild_Dynamic_Event_Log& from);
  void MergeFrom(const GS2C_Guild_Dynamic_Event_Log& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.GS2C_Guild_Dynamic_Event guild_evens = 1;
  inline int guild_evens_size() const;
  inline void clear_guild_evens();
  static const int kGuildEvensFieldNumber = 1;
  inline const ::pb::GS2C_Guild_Dynamic_Event& guild_evens(int index) const;
  inline ::pb::GS2C_Guild_Dynamic_Event* mutable_guild_evens(int index);
  inline ::pb::GS2C_Guild_Dynamic_Event* add_guild_evens();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Guild_Dynamic_Event >&
      guild_evens() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Guild_Dynamic_Event >*
      mutable_guild_evens();

  // @@protoc_insertion_point(class_scope:pb.GS2C_Guild_Dynamic_Event_Log)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Guild_Dynamic_Event > guild_evens_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Guild_Dynamic_Event_Log* default_instance_;
};
// -------------------------------------------------------------------

class GS2G_GuildUpdate : public ::google::protobuf::Message {
 public:
  GS2G_GuildUpdate();
  virtual ~GS2G_GuildUpdate();

  GS2G_GuildUpdate(const GS2G_GuildUpdate& from);

  inline GS2G_GuildUpdate& operator=(const GS2G_GuildUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2G_GuildUpdate& default_instance();

  void Swap(GS2G_GuildUpdate* other);

  // implements Message ----------------------------------------------

  GS2G_GuildUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2G_GuildUpdate& from);
  void MergeFrom(const GS2G_GuildUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint64 guild_id = 2;
  inline bool has_guild_id() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 2;
  inline ::google::protobuf::uint64 guild_id() const;
  inline void set_guild_id(::google::protobuf::uint64 value);

  // optional string guild_name = 3;
  inline bool has_guild_name() const;
  inline void clear_guild_name();
  static const int kGuildNameFieldNumber = 3;
  inline const ::std::string& guild_name() const;
  inline void set_guild_name(const ::std::string& value);
  inline void set_guild_name(const char* value);
  inline void set_guild_name(const char* value, size_t size);
  inline ::std::string* mutable_guild_name();
  inline ::std::string* release_guild_name();
  inline void set_allocated_guild_name(::std::string* guild_name);

  // @@protoc_insertion_point(class_scope:pb.GS2G_GuildUpdate)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_guild_name();
  inline void clear_has_guild_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guild_id_;
  ::std::string* guild_name_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Social_2eproto();
  friend void protobuf_AssignDesc_Social_2eproto();
  friend void protobuf_ShutdownFile_Social_2eproto();

  void InitAsDefaultInstance();
  static GS2G_GuildUpdate* default_instance_;
};
// ===================================================================


// ===================================================================

// GS2C_Chat_Respon

// required .pb.CHAT_TYPE type = 1;
inline bool GS2C_Chat_Respon::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Chat_Respon::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Chat_Respon::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Chat_Respon::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::pb::CHAT_TYPE GS2C_Chat_Respon::type() const {
  return static_cast< ::pb::CHAT_TYPE >(type_);
}
inline void GS2C_Chat_Respon::set_type(::pb::CHAT_TYPE value) {
  assert(::pb::CHAT_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint64 from_guid = 2;
inline bool GS2C_Chat_Respon::has_from_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Chat_Respon::set_has_from_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Chat_Respon::clear_has_from_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Chat_Respon::clear_from_guid() {
  from_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_from_guid();
}
inline ::google::protobuf::uint64 GS2C_Chat_Respon::from_guid() const {
  return from_guid_;
}
inline void GS2C_Chat_Respon::set_from_guid(::google::protobuf::uint64 value) {
  set_has_from_guid();
  from_guid_ = value;
}

// optional uint64 to_guid = 3;
inline bool GS2C_Chat_Respon::has_to_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Chat_Respon::set_has_to_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Chat_Respon::clear_has_to_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Chat_Respon::clear_to_guid() {
  to_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_to_guid();
}
inline ::google::protobuf::uint64 GS2C_Chat_Respon::to_guid() const {
  return to_guid_;
}
inline void GS2C_Chat_Respon::set_to_guid(::google::protobuf::uint64 value) {
  set_has_to_guid();
  to_guid_ = value;
}

// optional string from_name = 4;
inline bool GS2C_Chat_Respon::has_from_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Chat_Respon::set_has_from_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Chat_Respon::clear_has_from_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Chat_Respon::clear_from_name() {
  if (from_name_ != &::google::protobuf::internal::kEmptyString) {
    from_name_->clear();
  }
  clear_has_from_name();
}
inline const ::std::string& GS2C_Chat_Respon::from_name() const {
  return *from_name_;
}
inline void GS2C_Chat_Respon::set_from_name(const ::std::string& value) {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  from_name_->assign(value);
}
inline void GS2C_Chat_Respon::set_from_name(const char* value) {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  from_name_->assign(value);
}
inline void GS2C_Chat_Respon::set_from_name(const char* value, size_t size) {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  from_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GS2C_Chat_Respon::mutable_from_name() {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  return from_name_;
}
inline ::std::string* GS2C_Chat_Respon::release_from_name() {
  clear_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_name_;
    from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GS2C_Chat_Respon::set_allocated_from_name(::std::string* from_name) {
  if (from_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_name_;
  }
  if (from_name) {
    set_has_from_name();
    from_name_ = from_name;
  } else {
    clear_has_from_name();
    from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string to_name = 5;
inline bool GS2C_Chat_Respon::has_to_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GS2C_Chat_Respon::set_has_to_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GS2C_Chat_Respon::clear_has_to_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GS2C_Chat_Respon::clear_to_name() {
  if (to_name_ != &::google::protobuf::internal::kEmptyString) {
    to_name_->clear();
  }
  clear_has_to_name();
}
inline const ::std::string& GS2C_Chat_Respon::to_name() const {
  return *to_name_;
}
inline void GS2C_Chat_Respon::set_to_name(const ::std::string& value) {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  to_name_->assign(value);
}
inline void GS2C_Chat_Respon::set_to_name(const char* value) {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  to_name_->assign(value);
}
inline void GS2C_Chat_Respon::set_to_name(const char* value, size_t size) {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  to_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GS2C_Chat_Respon::mutable_to_name() {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  return to_name_;
}
inline ::std::string* GS2C_Chat_Respon::release_to_name() {
  clear_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_name_;
    to_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GS2C_Chat_Respon::set_allocated_to_name(::std::string* to_name) {
  if (to_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_name_;
  }
  if (to_name) {
    set_has_to_name();
    to_name_ = to_name;
  } else {
    clear_has_to_name();
    to_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 from_vip_lv = 6;
inline bool GS2C_Chat_Respon::has_from_vip_lv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GS2C_Chat_Respon::set_has_from_vip_lv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GS2C_Chat_Respon::clear_has_from_vip_lv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GS2C_Chat_Respon::clear_from_vip_lv() {
  from_vip_lv_ = 0;
  clear_has_from_vip_lv();
}
inline ::google::protobuf::int32 GS2C_Chat_Respon::from_vip_lv() const {
  return from_vip_lv_;
}
inline void GS2C_Chat_Respon::set_from_vip_lv(::google::protobuf::int32 value) {
  set_has_from_vip_lv();
  from_vip_lv_ = value;
}

// optional int32 to_vip_lv = 7;
inline bool GS2C_Chat_Respon::has_to_vip_lv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GS2C_Chat_Respon::set_has_to_vip_lv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GS2C_Chat_Respon::clear_has_to_vip_lv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GS2C_Chat_Respon::clear_to_vip_lv() {
  to_vip_lv_ = 0;
  clear_has_to_vip_lv();
}
inline ::google::protobuf::int32 GS2C_Chat_Respon::to_vip_lv() const {
  return to_vip_lv_;
}
inline void GS2C_Chat_Respon::set_to_vip_lv(::google::protobuf::int32 value) {
  set_has_to_vip_lv();
  to_vip_lv_ = value;
}

// optional int32 from_card_proid = 8;
inline bool GS2C_Chat_Respon::has_from_card_proid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GS2C_Chat_Respon::set_has_from_card_proid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GS2C_Chat_Respon::clear_has_from_card_proid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GS2C_Chat_Respon::clear_from_card_proid() {
  from_card_proid_ = 0;
  clear_has_from_card_proid();
}
inline ::google::protobuf::int32 GS2C_Chat_Respon::from_card_proid() const {
  return from_card_proid_;
}
inline void GS2C_Chat_Respon::set_from_card_proid(::google::protobuf::int32 value) {
  set_has_from_card_proid();
  from_card_proid_ = value;
}

// optional int32 to_card_proid = 9;
inline bool GS2C_Chat_Respon::has_to_card_proid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GS2C_Chat_Respon::set_has_to_card_proid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GS2C_Chat_Respon::clear_has_to_card_proid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GS2C_Chat_Respon::clear_to_card_proid() {
  to_card_proid_ = 0;
  clear_has_to_card_proid();
}
inline ::google::protobuf::int32 GS2C_Chat_Respon::to_card_proid() const {
  return to_card_proid_;
}
inline void GS2C_Chat_Respon::set_to_card_proid(::google::protobuf::int32 value) {
  set_has_to_card_proid();
  to_card_proid_ = value;
}

// optional int32 facial_id = 10;
inline bool GS2C_Chat_Respon::has_facial_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GS2C_Chat_Respon::set_has_facial_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GS2C_Chat_Respon::clear_has_facial_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GS2C_Chat_Respon::clear_facial_id() {
  facial_id_ = 0;
  clear_has_facial_id();
}
inline ::google::protobuf::int32 GS2C_Chat_Respon::facial_id() const {
  return facial_id_;
}
inline void GS2C_Chat_Respon::set_facial_id(::google::protobuf::int32 value) {
  set_has_facial_id();
  facial_id_ = value;
}

// optional string chat_info = 11;
inline bool GS2C_Chat_Respon::has_chat_info() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GS2C_Chat_Respon::set_has_chat_info() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GS2C_Chat_Respon::clear_has_chat_info() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GS2C_Chat_Respon::clear_chat_info() {
  if (chat_info_ != &::google::protobuf::internal::kEmptyString) {
    chat_info_->clear();
  }
  clear_has_chat_info();
}
inline const ::std::string& GS2C_Chat_Respon::chat_info() const {
  return *chat_info_;
}
inline void GS2C_Chat_Respon::set_chat_info(const ::std::string& value) {
  set_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    chat_info_ = new ::std::string;
  }
  chat_info_->assign(value);
}
inline void GS2C_Chat_Respon::set_chat_info(const char* value) {
  set_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    chat_info_ = new ::std::string;
  }
  chat_info_->assign(value);
}
inline void GS2C_Chat_Respon::set_chat_info(const char* value, size_t size) {
  set_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    chat_info_ = new ::std::string;
  }
  chat_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GS2C_Chat_Respon::mutable_chat_info() {
  set_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    chat_info_ = new ::std::string;
  }
  return chat_info_;
}
inline ::std::string* GS2C_Chat_Respon::release_chat_info() {
  clear_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chat_info_;
    chat_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GS2C_Chat_Respon::set_allocated_chat_info(::std::string* chat_info) {
  if (chat_info_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_info_;
  }
  if (chat_info) {
    set_has_chat_info();
    chat_info_ = chat_info;
  } else {
    clear_has_chat_info();
    chat_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 send_time = 12;
inline bool GS2C_Chat_Respon::has_send_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GS2C_Chat_Respon::set_has_send_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GS2C_Chat_Respon::clear_has_send_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GS2C_Chat_Respon::clear_send_time() {
  send_time_ = GOOGLE_ULONGLONG(0);
  clear_has_send_time();
}
inline ::google::protobuf::uint64 GS2C_Chat_Respon::send_time() const {
  return send_time_;
}
inline void GS2C_Chat_Respon::set_send_time(::google::protobuf::uint64 value) {
  set_has_send_time();
  send_time_ = value;
}

// -------------------------------------------------------------------

// C2GS_Chat

// required .pb.CHAT_TYPE type = 1;
inline bool C2GS_Chat::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Chat::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Chat::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Chat::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::pb::CHAT_TYPE C2GS_Chat::type() const {
  return static_cast< ::pb::CHAT_TYPE >(type_);
}
inline void C2GS_Chat::set_type(::pb::CHAT_TYPE value) {
  assert(::pb::CHAT_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint64 to_guid = 2;
inline bool C2GS_Chat::has_to_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_Chat::set_has_to_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_Chat::clear_has_to_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_Chat::clear_to_guid() {
  to_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_to_guid();
}
inline ::google::protobuf::uint64 C2GS_Chat::to_guid() const {
  return to_guid_;
}
inline void C2GS_Chat::set_to_guid(::google::protobuf::uint64 value) {
  set_has_to_guid();
  to_guid_ = value;
}

// optional string to_name = 3;
inline bool C2GS_Chat::has_to_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2GS_Chat::set_has_to_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2GS_Chat::clear_has_to_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2GS_Chat::clear_to_name() {
  if (to_name_ != &::google::protobuf::internal::kEmptyString) {
    to_name_->clear();
  }
  clear_has_to_name();
}
inline const ::std::string& C2GS_Chat::to_name() const {
  return *to_name_;
}
inline void C2GS_Chat::set_to_name(const ::std::string& value) {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  to_name_->assign(value);
}
inline void C2GS_Chat::set_to_name(const char* value) {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  to_name_->assign(value);
}
inline void C2GS_Chat::set_to_name(const char* value, size_t size) {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  to_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2GS_Chat::mutable_to_name() {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  return to_name_;
}
inline ::std::string* C2GS_Chat::release_to_name() {
  clear_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_name_;
    to_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2GS_Chat::set_allocated_to_name(::std::string* to_name) {
  if (to_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_name_;
  }
  if (to_name) {
    set_has_to_name();
    to_name_ = to_name;
  } else {
    clear_has_to_name();
    to_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 vip_level = 4;
inline bool C2GS_Chat::has_vip_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void C2GS_Chat::set_has_vip_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void C2GS_Chat::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void C2GS_Chat::clear_vip_level() {
  vip_level_ = 0;
  clear_has_vip_level();
}
inline ::google::protobuf::int32 C2GS_Chat::vip_level() const {
  return vip_level_;
}
inline void C2GS_Chat::set_vip_level(::google::protobuf::int32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// optional int32 card_proid = 5;
inline bool C2GS_Chat::has_card_proid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void C2GS_Chat::set_has_card_proid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void C2GS_Chat::clear_has_card_proid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void C2GS_Chat::clear_card_proid() {
  card_proid_ = 0;
  clear_has_card_proid();
}
inline ::google::protobuf::int32 C2GS_Chat::card_proid() const {
  return card_proid_;
}
inline void C2GS_Chat::set_card_proid(::google::protobuf::int32 value) {
  set_has_card_proid();
  card_proid_ = value;
}

// optional int32 facial_id = 6;
inline bool C2GS_Chat::has_facial_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void C2GS_Chat::set_has_facial_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void C2GS_Chat::clear_has_facial_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void C2GS_Chat::clear_facial_id() {
  facial_id_ = 0;
  clear_has_facial_id();
}
inline ::google::protobuf::int32 C2GS_Chat::facial_id() const {
  return facial_id_;
}
inline void C2GS_Chat::set_facial_id(::google::protobuf::int32 value) {
  set_has_facial_id();
  facial_id_ = value;
}

// optional string chat_info = 7;
inline bool C2GS_Chat::has_chat_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void C2GS_Chat::set_has_chat_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void C2GS_Chat::clear_has_chat_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void C2GS_Chat::clear_chat_info() {
  if (chat_info_ != &::google::protobuf::internal::kEmptyString) {
    chat_info_->clear();
  }
  clear_has_chat_info();
}
inline const ::std::string& C2GS_Chat::chat_info() const {
  return *chat_info_;
}
inline void C2GS_Chat::set_chat_info(const ::std::string& value) {
  set_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    chat_info_ = new ::std::string;
  }
  chat_info_->assign(value);
}
inline void C2GS_Chat::set_chat_info(const char* value) {
  set_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    chat_info_ = new ::std::string;
  }
  chat_info_->assign(value);
}
inline void C2GS_Chat::set_chat_info(const char* value, size_t size) {
  set_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    chat_info_ = new ::std::string;
  }
  chat_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2GS_Chat::mutable_chat_info() {
  set_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    chat_info_ = new ::std::string;
  }
  return chat_info_;
}
inline ::std::string* C2GS_Chat::release_chat_info() {
  clear_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chat_info_;
    chat_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2GS_Chat::set_allocated_chat_info(::std::string* chat_info) {
  if (chat_info_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_info_;
  }
  if (chat_info) {
    set_has_chat_info();
    chat_info_ = chat_info;
  } else {
    clear_has_chat_info();
    chat_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 send_time = 8;
inline bool C2GS_Chat::has_send_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void C2GS_Chat::set_has_send_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void C2GS_Chat::clear_has_send_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void C2GS_Chat::clear_send_time() {
  send_time_ = GOOGLE_ULONGLONG(0);
  clear_has_send_time();
}
inline ::google::protobuf::uint64 C2GS_Chat::send_time() const {
  return send_time_;
}
inline void C2GS_Chat::set_send_time(::google::protobuf::uint64 value) {
  set_has_send_time();
  send_time_ = value;
}

// -------------------------------------------------------------------

// GxDB_ChatInfoData

// optional uint64 expire_time = 1;
inline bool GxDB_ChatInfoData::has_expire_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GxDB_ChatInfoData::set_has_expire_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GxDB_ChatInfoData::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GxDB_ChatInfoData::clear_expire_time() {
  expire_time_ = GOOGLE_ULONGLONG(0);
  clear_has_expire_time();
}
inline ::google::protobuf::uint64 GxDB_ChatInfoData::expire_time() const {
  return expire_time_;
}
inline void GxDB_ChatInfoData::set_expire_time(::google::protobuf::uint64 value) {
  set_has_expire_time();
  expire_time_ = value;
}

// optional .pb.GS2C_Chat_Respon chat = 2;
inline bool GxDB_ChatInfoData::has_chat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GxDB_ChatInfoData::set_has_chat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GxDB_ChatInfoData::clear_has_chat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GxDB_ChatInfoData::clear_chat() {
  if (chat_ != NULL) chat_->::pb::GS2C_Chat_Respon::Clear();
  clear_has_chat();
}
inline const ::pb::GS2C_Chat_Respon& GxDB_ChatInfoData::chat() const {
  return chat_ != NULL ? *chat_ : *default_instance_->chat_;
}
inline ::pb::GS2C_Chat_Respon* GxDB_ChatInfoData::mutable_chat() {
  set_has_chat();
  if (chat_ == NULL) chat_ = new ::pb::GS2C_Chat_Respon;
  return chat_;
}
inline ::pb::GS2C_Chat_Respon* GxDB_ChatInfoData::release_chat() {
  clear_has_chat();
  ::pb::GS2C_Chat_Respon* temp = chat_;
  chat_ = NULL;
  return temp;
}
inline void GxDB_ChatInfoData::set_allocated_chat(::pb::GS2C_Chat_Respon* chat) {
  delete chat_;
  chat_ = chat;
  if (chat) {
    set_has_chat();
  } else {
    clear_has_chat();
  }
}

// -------------------------------------------------------------------

// MsgPlayerBaseInfo

// optional uint64 playerId = 1;
inline bool MsgPlayerBaseInfo::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgPlayerBaseInfo::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgPlayerBaseInfo::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgPlayerBaseInfo::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::uint64 MsgPlayerBaseInfo::playerid() const {
  return playerid_;
}
inline void MsgPlayerBaseInfo::set_playerid(::google::protobuf::uint64 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional string player_name = 2;
inline bool MsgPlayerBaseInfo::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgPlayerBaseInfo::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgPlayerBaseInfo::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgPlayerBaseInfo::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& MsgPlayerBaseInfo::player_name() const {
  return *player_name_;
}
inline void MsgPlayerBaseInfo::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void MsgPlayerBaseInfo::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void MsgPlayerBaseInfo::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgPlayerBaseInfo::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* MsgPlayerBaseInfo::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgPlayerBaseInfo::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 guild_id = 3;
inline bool MsgPlayerBaseInfo::has_guild_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgPlayerBaseInfo::set_has_guild_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgPlayerBaseInfo::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgPlayerBaseInfo::clear_guild_id() {
  guild_id_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_id();
}
inline ::google::protobuf::uint64 MsgPlayerBaseInfo::guild_id() const {
  return guild_id_;
}
inline void MsgPlayerBaseInfo::set_guild_id(::google::protobuf::uint64 value) {
  set_has_guild_id();
  guild_id_ = value;
}

// optional string guild_name = 4;
inline bool MsgPlayerBaseInfo::has_guild_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgPlayerBaseInfo::set_has_guild_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgPlayerBaseInfo::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgPlayerBaseInfo::clear_guild_name() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    guild_name_->clear();
  }
  clear_has_guild_name();
}
inline const ::std::string& MsgPlayerBaseInfo::guild_name() const {
  return *guild_name_;
}
inline void MsgPlayerBaseInfo::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void MsgPlayerBaseInfo::set_guild_name(const char* value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void MsgPlayerBaseInfo::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgPlayerBaseInfo::mutable_guild_name() {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  return guild_name_;
}
inline ::std::string* MsgPlayerBaseInfo::release_guild_name() {
  clear_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guild_name_;
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgPlayerBaseInfo::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (guild_name) {
    set_has_guild_name();
    guild_name_ = guild_name;
  } else {
    clear_has_guild_name();
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level = 5;
inline bool MsgPlayerBaseInfo::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgPlayerBaseInfo::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgPlayerBaseInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgPlayerBaseInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 MsgPlayerBaseInfo::level() const {
  return level_;
}
inline void MsgPlayerBaseInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 vip_level = 6;
inline bool MsgPlayerBaseInfo::has_vip_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgPlayerBaseInfo::set_has_vip_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgPlayerBaseInfo::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgPlayerBaseInfo::clear_vip_level() {
  vip_level_ = 0u;
  clear_has_vip_level();
}
inline ::google::protobuf::uint32 MsgPlayerBaseInfo::vip_level() const {
  return vip_level_;
}
inline void MsgPlayerBaseInfo::set_vip_level(::google::protobuf::uint32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// optional bool isonline = 7;
inline bool MsgPlayerBaseInfo::has_isonline() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MsgPlayerBaseInfo::set_has_isonline() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MsgPlayerBaseInfo::clear_has_isonline() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MsgPlayerBaseInfo::clear_isonline() {
  isonline_ = false;
  clear_has_isonline();
}
inline bool MsgPlayerBaseInfo::isonline() const {
  return isonline_;
}
inline void MsgPlayerBaseInfo::set_isonline(bool value) {
  set_has_isonline();
  isonline_ = value;
}

// optional uint64 last_login = 8;
inline bool MsgPlayerBaseInfo::has_last_login() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MsgPlayerBaseInfo::set_has_last_login() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MsgPlayerBaseInfo::clear_has_last_login() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MsgPlayerBaseInfo::clear_last_login() {
  last_login_ = GOOGLE_ULONGLONG(0);
  clear_has_last_login();
}
inline ::google::protobuf::uint64 MsgPlayerBaseInfo::last_login() const {
  return last_login_;
}
inline void MsgPlayerBaseInfo::set_last_login(::google::protobuf::uint64 value) {
  set_has_last_login();
  last_login_ = value;
}

// optional uint32 power = 9;
inline bool MsgPlayerBaseInfo::has_power() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MsgPlayerBaseInfo::set_has_power() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MsgPlayerBaseInfo::clear_has_power() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MsgPlayerBaseInfo::clear_power() {
  power_ = 0u;
  clear_has_power();
}
inline ::google::protobuf::uint32 MsgPlayerBaseInfo::power() const {
  return power_;
}
inline void MsgPlayerBaseInfo::set_power(::google::protobuf::uint32 value) {
  set_has_power();
  power_ = value;
}

// optional uint32 card_proid = 10;
inline bool MsgPlayerBaseInfo::has_card_proid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MsgPlayerBaseInfo::set_has_card_proid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MsgPlayerBaseInfo::clear_has_card_proid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MsgPlayerBaseInfo::clear_card_proid() {
  card_proid_ = 0u;
  clear_has_card_proid();
}
inline ::google::protobuf::uint32 MsgPlayerBaseInfo::card_proid() const {
  return card_proid_;
}
inline void MsgPlayerBaseInfo::set_card_proid(::google::protobuf::uint32 value) {
  set_has_card_proid();
  card_proid_ = value;
}

// -------------------------------------------------------------------

// MsgPlayerTeamInfo

// optional .pb.GS2C_Bag bag_info = 1;
inline bool MsgPlayerTeamInfo::has_bag_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgPlayerTeamInfo::set_has_bag_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgPlayerTeamInfo::clear_has_bag_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgPlayerTeamInfo::clear_bag_info() {
  if (bag_info_ != NULL) bag_info_->::pb::GS2C_Bag::Clear();
  clear_has_bag_info();
}
inline const ::pb::GS2C_Bag& MsgPlayerTeamInfo::bag_info() const {
  return bag_info_ != NULL ? *bag_info_ : *default_instance_->bag_info_;
}
inline ::pb::GS2C_Bag* MsgPlayerTeamInfo::mutable_bag_info() {
  set_has_bag_info();
  if (bag_info_ == NULL) bag_info_ = new ::pb::GS2C_Bag;
  return bag_info_;
}
inline ::pb::GS2C_Bag* MsgPlayerTeamInfo::release_bag_info() {
  clear_has_bag_info();
  ::pb::GS2C_Bag* temp = bag_info_;
  bag_info_ = NULL;
  return temp;
}
inline void MsgPlayerTeamInfo::set_allocated_bag_info(::pb::GS2C_Bag* bag_info) {
  delete bag_info_;
  bag_info_ = bag_info;
  if (bag_info) {
    set_has_bag_info();
  } else {
    clear_has_bag_info();
  }
}

// optional .pb.GS2C_CharacterStorage character_info = 2;
inline bool MsgPlayerTeamInfo::has_character_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgPlayerTeamInfo::set_has_character_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgPlayerTeamInfo::clear_has_character_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgPlayerTeamInfo::clear_character_info() {
  if (character_info_ != NULL) character_info_->::pb::GS2C_CharacterStorage::Clear();
  clear_has_character_info();
}
inline const ::pb::GS2C_CharacterStorage& MsgPlayerTeamInfo::character_info() const {
  return character_info_ != NULL ? *character_info_ : *default_instance_->character_info_;
}
inline ::pb::GS2C_CharacterStorage* MsgPlayerTeamInfo::mutable_character_info() {
  set_has_character_info();
  if (character_info_ == NULL) character_info_ = new ::pb::GS2C_CharacterStorage;
  return character_info_;
}
inline ::pb::GS2C_CharacterStorage* MsgPlayerTeamInfo::release_character_info() {
  clear_has_character_info();
  ::pb::GS2C_CharacterStorage* temp = character_info_;
  character_info_ = NULL;
  return temp;
}
inline void MsgPlayerTeamInfo::set_allocated_character_info(::pb::GS2C_CharacterStorage* character_info) {
  delete character_info_;
  character_info_ = character_info;
  if (character_info) {
    set_has_character_info();
  } else {
    clear_has_character_info();
  }
}

// -------------------------------------------------------------------

// MsgPlayerBaseData

// optional .pb.MsgPlayerBaseInfo info = 1;
inline bool MsgPlayerBaseData::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgPlayerBaseData::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgPlayerBaseData::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgPlayerBaseData::clear_info() {
  if (info_ != NULL) info_->::pb::MsgPlayerBaseInfo::Clear();
  clear_has_info();
}
inline const ::pb::MsgPlayerBaseInfo& MsgPlayerBaseData::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::pb::MsgPlayerBaseInfo* MsgPlayerBaseData::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::pb::MsgPlayerBaseInfo;
  return info_;
}
inline ::pb::MsgPlayerBaseInfo* MsgPlayerBaseData::release_info() {
  clear_has_info();
  ::pb::MsgPlayerBaseInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void MsgPlayerBaseData::set_allocated_info(::pb::MsgPlayerBaseInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// optional .pb.MsgPlayerTeamInfo team_info = 2;
inline bool MsgPlayerBaseData::has_team_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgPlayerBaseData::set_has_team_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgPlayerBaseData::clear_has_team_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgPlayerBaseData::clear_team_info() {
  if (team_info_ != NULL) team_info_->::pb::MsgPlayerTeamInfo::Clear();
  clear_has_team_info();
}
inline const ::pb::MsgPlayerTeamInfo& MsgPlayerBaseData::team_info() const {
  return team_info_ != NULL ? *team_info_ : *default_instance_->team_info_;
}
inline ::pb::MsgPlayerTeamInfo* MsgPlayerBaseData::mutable_team_info() {
  set_has_team_info();
  if (team_info_ == NULL) team_info_ = new ::pb::MsgPlayerTeamInfo;
  return team_info_;
}
inline ::pb::MsgPlayerTeamInfo* MsgPlayerBaseData::release_team_info() {
  clear_has_team_info();
  ::pb::MsgPlayerTeamInfo* temp = team_info_;
  team_info_ = NULL;
  return temp;
}
inline void MsgPlayerBaseData::set_allocated_team_info(::pb::MsgPlayerTeamInfo* team_info) {
  delete team_info_;
  team_info_ = team_info;
  if (team_info) {
    set_has_team_info();
  } else {
    clear_has_team_info();
  }
}

// -------------------------------------------------------------------

// GS2C_Get_Player_Info_Respone

// optional uint32 result = 1;
inline bool GS2C_Get_Player_Info_Respone::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Get_Player_Info_Respone::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Get_Player_Info_Respone::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Get_Player_Info_Respone::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 GS2C_Get_Player_Info_Respone::result() const {
  return result_;
}
inline void GS2C_Get_Player_Info_Respone::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// optional .pb.MsgPlayerBaseData info = 2;
inline bool GS2C_Get_Player_Info_Respone::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Get_Player_Info_Respone::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Get_Player_Info_Respone::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Get_Player_Info_Respone::clear_info() {
  if (info_ != NULL) info_->::pb::MsgPlayerBaseData::Clear();
  clear_has_info();
}
inline const ::pb::MsgPlayerBaseData& GS2C_Get_Player_Info_Respone::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::pb::MsgPlayerBaseData* GS2C_Get_Player_Info_Respone::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::pb::MsgPlayerBaseData;
  return info_;
}
inline ::pb::MsgPlayerBaseData* GS2C_Get_Player_Info_Respone::release_info() {
  clear_has_info();
  ::pb::MsgPlayerBaseData* temp = info_;
  info_ = NULL;
  return temp;
}
inline void GS2C_Get_Player_Info_Respone::set_allocated_info(::pb::MsgPlayerBaseData* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// required uint64 your_guid = 3;
inline bool GS2C_Get_Player_Info_Respone::has_your_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Get_Player_Info_Respone::set_has_your_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Get_Player_Info_Respone::clear_has_your_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Get_Player_Info_Respone::clear_your_guid() {
  your_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_your_guid();
}
inline ::google::protobuf::uint64 GS2C_Get_Player_Info_Respone::your_guid() const {
  return your_guid_;
}
inline void GS2C_Get_Player_Info_Respone::set_your_guid(::google::protobuf::uint64 value) {
  set_has_your_guid();
  your_guid_ = value;
}

// -------------------------------------------------------------------

// C2GS_Friend_Ap_Opearate

// repeated uint64 friends = 1;
inline int C2GS_Friend_Ap_Opearate::friends_size() const {
  return friends_.size();
}
inline void C2GS_Friend_Ap_Opearate::clear_friends() {
  friends_.Clear();
}
inline ::google::protobuf::uint64 C2GS_Friend_Ap_Opearate::friends(int index) const {
  return friends_.Get(index);
}
inline void C2GS_Friend_Ap_Opearate::set_friends(int index, ::google::protobuf::uint64 value) {
  friends_.Set(index, value);
}
inline void C2GS_Friend_Ap_Opearate::add_friends(::google::protobuf::uint64 value) {
  friends_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
C2GS_Friend_Ap_Opearate::friends() const {
  return friends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
C2GS_Friend_Ap_Opearate::mutable_friends() {
  return &friends_;
}

// required uint64 your_guid = 2;
inline bool C2GS_Friend_Ap_Opearate::has_your_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_Friend_Ap_Opearate::set_has_your_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_Friend_Ap_Opearate::clear_has_your_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_Friend_Ap_Opearate::clear_your_guid() {
  your_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_your_guid();
}
inline ::google::protobuf::uint64 C2GS_Friend_Ap_Opearate::your_guid() const {
  return your_guid_;
}
inline void C2GS_Friend_Ap_Opearate::set_your_guid(::google::protobuf::uint64 value) {
  set_has_your_guid();
  your_guid_ = value;
}

// required bool is_send = 3;
inline bool C2GS_Friend_Ap_Opearate::has_is_send() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2GS_Friend_Ap_Opearate::set_has_is_send() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2GS_Friend_Ap_Opearate::clear_has_is_send() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2GS_Friend_Ap_Opearate::clear_is_send() {
  is_send_ = false;
  clear_has_is_send();
}
inline bool C2GS_Friend_Ap_Opearate::is_send() const {
  return is_send_;
}
inline void C2GS_Friend_Ap_Opearate::set_is_send(bool value) {
  set_has_is_send();
  is_send_ = value;
}

// -------------------------------------------------------------------

// GS2C_Friend_Ap_Opearate_Res_opt_result

// required uint64 opt_id = 1;
inline bool GS2C_Friend_Ap_Opearate_Res_opt_result::has_opt_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Friend_Ap_Opearate_Res_opt_result::set_has_opt_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Friend_Ap_Opearate_Res_opt_result::clear_has_opt_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Friend_Ap_Opearate_Res_opt_result::clear_opt_id() {
  opt_id_ = GOOGLE_ULONGLONG(0);
  clear_has_opt_id();
}
inline ::google::protobuf::uint64 GS2C_Friend_Ap_Opearate_Res_opt_result::opt_id() const {
  return opt_id_;
}
inline void GS2C_Friend_Ap_Opearate_Res_opt_result::set_opt_id(::google::protobuf::uint64 value) {
  set_has_opt_id();
  opt_id_ = value;
}

// required bool is_succeed = 2;
inline bool GS2C_Friend_Ap_Opearate_Res_opt_result::has_is_succeed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Friend_Ap_Opearate_Res_opt_result::set_has_is_succeed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Friend_Ap_Opearate_Res_opt_result::clear_has_is_succeed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Friend_Ap_Opearate_Res_opt_result::clear_is_succeed() {
  is_succeed_ = false;
  clear_has_is_succeed();
}
inline bool GS2C_Friend_Ap_Opearate_Res_opt_result::is_succeed() const {
  return is_succeed_;
}
inline void GS2C_Friend_Ap_Opearate_Res_opt_result::set_is_succeed(bool value) {
  set_has_is_succeed();
  is_succeed_ = value;
}

// -------------------------------------------------------------------

// GS2C_Friend_Ap_Opearate_Res

// repeated .pb.GS2C_Friend_Ap_Opearate_Res.opt_result op_infos = 1;
inline int GS2C_Friend_Ap_Opearate_Res::op_infos_size() const {
  return op_infos_.size();
}
inline void GS2C_Friend_Ap_Opearate_Res::clear_op_infos() {
  op_infos_.Clear();
}
inline const ::pb::GS2C_Friend_Ap_Opearate_Res_opt_result& GS2C_Friend_Ap_Opearate_Res::op_infos(int index) const {
  return op_infos_.Get(index);
}
inline ::pb::GS2C_Friend_Ap_Opearate_Res_opt_result* GS2C_Friend_Ap_Opearate_Res::mutable_op_infos(int index) {
  return op_infos_.Mutable(index);
}
inline ::pb::GS2C_Friend_Ap_Opearate_Res_opt_result* GS2C_Friend_Ap_Opearate_Res::add_op_infos() {
  return op_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Friend_Ap_Opearate_Res_opt_result >&
GS2C_Friend_Ap_Opearate_Res::op_infos() const {
  return op_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Friend_Ap_Opearate_Res_opt_result >*
GS2C_Friend_Ap_Opearate_Res::mutable_op_infos() {
  return &op_infos_;
}

// required uint64 your_guid = 2;
inline bool GS2C_Friend_Ap_Opearate_Res::has_your_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Friend_Ap_Opearate_Res::set_has_your_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Friend_Ap_Opearate_Res::clear_has_your_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Friend_Ap_Opearate_Res::clear_your_guid() {
  your_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_your_guid();
}
inline ::google::protobuf::uint64 GS2C_Friend_Ap_Opearate_Res::your_guid() const {
  return your_guid_;
}
inline void GS2C_Friend_Ap_Opearate_Res::set_your_guid(::google::protobuf::uint64 value) {
  set_has_your_guid();
  your_guid_ = value;
}

// required bool is_send = 3;
inline bool GS2C_Friend_Ap_Opearate_Res::has_is_send() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Friend_Ap_Opearate_Res::set_has_is_send() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Friend_Ap_Opearate_Res::clear_has_is_send() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Friend_Ap_Opearate_Res::clear_is_send() {
  is_send_ = false;
  clear_has_is_send();
}
inline bool GS2C_Friend_Ap_Opearate_Res::is_send() const {
  return is_send_;
}
inline void GS2C_Friend_Ap_Opearate_Res::set_is_send(bool value) {
  set_has_is_send();
  is_send_ = value;
}

// -------------------------------------------------------------------

// Friend_list_Record

// optional string friend_name = 1;
inline bool Friend_list_Record::has_friend_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Friend_list_Record::set_has_friend_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Friend_list_Record::clear_has_friend_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Friend_list_Record::clear_friend_name() {
  if (friend_name_ != &::google::protobuf::internal::kEmptyString) {
    friend_name_->clear();
  }
  clear_has_friend_name();
}
inline const ::std::string& Friend_list_Record::friend_name() const {
  return *friend_name_;
}
inline void Friend_list_Record::set_friend_name(const ::std::string& value) {
  set_has_friend_name();
  if (friend_name_ == &::google::protobuf::internal::kEmptyString) {
    friend_name_ = new ::std::string;
  }
  friend_name_->assign(value);
}
inline void Friend_list_Record::set_friend_name(const char* value) {
  set_has_friend_name();
  if (friend_name_ == &::google::protobuf::internal::kEmptyString) {
    friend_name_ = new ::std::string;
  }
  friend_name_->assign(value);
}
inline void Friend_list_Record::set_friend_name(const char* value, size_t size) {
  set_has_friend_name();
  if (friend_name_ == &::google::protobuf::internal::kEmptyString) {
    friend_name_ = new ::std::string;
  }
  friend_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Friend_list_Record::mutable_friend_name() {
  set_has_friend_name();
  if (friend_name_ == &::google::protobuf::internal::kEmptyString) {
    friend_name_ = new ::std::string;
  }
  return friend_name_;
}
inline ::std::string* Friend_list_Record::release_friend_name() {
  clear_has_friend_name();
  if (friend_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = friend_name_;
    friend_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Friend_list_Record::set_allocated_friend_name(::std::string* friend_name) {
  if (friend_name_ != &::google::protobuf::internal::kEmptyString) {
    delete friend_name_;
  }
  if (friend_name) {
    set_has_friend_name();
    friend_name_ = friend_name;
  } else {
    clear_has_friend_name();
    friend_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 friend_guid = 2;
inline bool Friend_list_Record::has_friend_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Friend_list_Record::set_has_friend_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Friend_list_Record::clear_has_friend_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Friend_list_Record::clear_friend_guid() {
  friend_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_friend_guid();
}
inline ::google::protobuf::uint64 Friend_list_Record::friend_guid() const {
  return friend_guid_;
}
inline void Friend_list_Record::set_friend_guid(::google::protobuf::uint64 value) {
  set_has_friend_guid();
  friend_guid_ = value;
}

// optional uint32 head_icon = 3;
inline bool Friend_list_Record::has_head_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Friend_list_Record::set_has_head_icon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Friend_list_Record::clear_has_head_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Friend_list_Record::clear_head_icon() {
  head_icon_ = 0u;
  clear_has_head_icon();
}
inline ::google::protobuf::uint32 Friend_list_Record::head_icon() const {
  return head_icon_;
}
inline void Friend_list_Record::set_head_icon(::google::protobuf::uint32 value) {
  set_has_head_icon();
  head_icon_ = value;
}

// optional uint32 vip_level = 4;
inline bool Friend_list_Record::has_vip_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Friend_list_Record::set_has_vip_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Friend_list_Record::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Friend_list_Record::clear_vip_level() {
  vip_level_ = 0u;
  clear_has_vip_level();
}
inline ::google::protobuf::uint32 Friend_list_Record::vip_level() const {
  return vip_level_;
}
inline void Friend_list_Record::set_vip_level(::google::protobuf::uint32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// optional uint32 level = 5;
inline bool Friend_list_Record::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Friend_list_Record::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Friend_list_Record::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Friend_list_Record::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 Friend_list_Record::level() const {
  return level_;
}
inline void Friend_list_Record::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 power = 6;
inline bool Friend_list_Record::has_power() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Friend_list_Record::set_has_power() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Friend_list_Record::clear_has_power() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Friend_list_Record::clear_power() {
  power_ = 0u;
  clear_has_power();
}
inline ::google::protobuf::uint32 Friend_list_Record::power() const {
  return power_;
}
inline void Friend_list_Record::set_power(::google::protobuf::uint32 value) {
  set_has_power();
  power_ = value;
}

// optional string guild_name = 7;
inline bool Friend_list_Record::has_guild_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Friend_list_Record::set_has_guild_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Friend_list_Record::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Friend_list_Record::clear_guild_name() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    guild_name_->clear();
  }
  clear_has_guild_name();
}
inline const ::std::string& Friend_list_Record::guild_name() const {
  return *guild_name_;
}
inline void Friend_list_Record::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void Friend_list_Record::set_guild_name(const char* value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void Friend_list_Record::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Friend_list_Record::mutable_guild_name() {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  return guild_name_;
}
inline ::std::string* Friend_list_Record::release_guild_name() {
  clear_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guild_name_;
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Friend_list_Record::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (guild_name) {
    set_has_guild_name();
    guild_name_ = guild_name;
  } else {
    clear_has_guild_name();
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 friend_type = 8;
inline bool Friend_list_Record::has_friend_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Friend_list_Record::set_has_friend_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Friend_list_Record::clear_has_friend_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Friend_list_Record::clear_friend_type() {
  friend_type_ = 0u;
  clear_has_friend_type();
}
inline ::google::protobuf::uint32 Friend_list_Record::friend_type() const {
  return friend_type_;
}
inline void Friend_list_Record::set_friend_type(::google::protobuf::uint32 value) {
  set_has_friend_type();
  friend_type_ = value;
}

// optional bool is_send_ap = 9;
inline bool Friend_list_Record::has_is_send_ap() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Friend_list_Record::set_has_is_send_ap() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Friend_list_Record::clear_has_is_send_ap() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Friend_list_Record::clear_is_send_ap() {
  is_send_ap_ = false;
  clear_has_is_send_ap();
}
inline bool Friend_list_Record::is_send_ap() const {
  return is_send_ap_;
}
inline void Friend_list_Record::set_is_send_ap(bool value) {
  set_has_is_send_ap();
  is_send_ap_ = value;
}

// optional bool is_receive_ap = 10;
inline bool Friend_list_Record::has_is_receive_ap() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Friend_list_Record::set_has_is_receive_ap() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Friend_list_Record::clear_has_is_receive_ap() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Friend_list_Record::clear_is_receive_ap() {
  is_receive_ap_ = false;
  clear_has_is_receive_ap();
}
inline bool Friend_list_Record::is_receive_ap() const {
  return is_receive_ap_;
}
inline void Friend_list_Record::set_is_receive_ap(bool value) {
  set_has_is_receive_ap();
  is_receive_ap_ = value;
}

// optional bool is_online = 11;
inline bool Friend_list_Record::has_is_online() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Friend_list_Record::set_has_is_online() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Friend_list_Record::clear_has_is_online() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Friend_list_Record::clear_is_online() {
  is_online_ = false;
  clear_has_is_online();
}
inline bool Friend_list_Record::is_online() const {
  return is_online_;
}
inline void Friend_list_Record::set_is_online(bool value) {
  set_has_is_online();
  is_online_ = value;
}

// optional uint64 last_onlin_time = 12;
inline bool Friend_list_Record::has_last_onlin_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Friend_list_Record::set_has_last_onlin_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Friend_list_Record::clear_has_last_onlin_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Friend_list_Record::clear_last_onlin_time() {
  last_onlin_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_onlin_time();
}
inline ::google::protobuf::uint64 Friend_list_Record::last_onlin_time() const {
  return last_onlin_time_;
}
inline void Friend_list_Record::set_last_onlin_time(::google::protobuf::uint64 value) {
  set_has_last_onlin_time();
  last_onlin_time_ = value;
}

// optional uint64 request_time = 13;
inline bool Friend_list_Record::has_request_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Friend_list_Record::set_has_request_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Friend_list_Record::clear_has_request_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Friend_list_Record::clear_request_time() {
  request_time_ = GOOGLE_ULONGLONG(0);
  clear_has_request_time();
}
inline ::google::protobuf::uint64 Friend_list_Record::request_time() const {
  return request_time_;
}
inline void Friend_list_Record::set_request_time(::google::protobuf::uint64 value) {
  set_has_request_time();
  request_time_ = value;
}

// -------------------------------------------------------------------

// C2GS_FriendAdd

// required uint32 add_method = 1;
inline bool C2GS_FriendAdd::has_add_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_FriendAdd::set_has_add_method() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_FriendAdd::clear_has_add_method() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_FriendAdd::clear_add_method() {
  add_method_ = 0u;
  clear_has_add_method();
}
inline ::google::protobuf::uint32 C2GS_FriendAdd::add_method() const {
  return add_method_;
}
inline void C2GS_FriendAdd::set_add_method(::google::protobuf::uint32 value) {
  set_has_add_method();
  add_method_ = value;
}

// optional string add_name = 2;
inline bool C2GS_FriendAdd::has_add_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_FriendAdd::set_has_add_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_FriendAdd::clear_has_add_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_FriendAdd::clear_add_name() {
  if (add_name_ != &::google::protobuf::internal::kEmptyString) {
    add_name_->clear();
  }
  clear_has_add_name();
}
inline const ::std::string& C2GS_FriendAdd::add_name() const {
  return *add_name_;
}
inline void C2GS_FriendAdd::set_add_name(const ::std::string& value) {
  set_has_add_name();
  if (add_name_ == &::google::protobuf::internal::kEmptyString) {
    add_name_ = new ::std::string;
  }
  add_name_->assign(value);
}
inline void C2GS_FriendAdd::set_add_name(const char* value) {
  set_has_add_name();
  if (add_name_ == &::google::protobuf::internal::kEmptyString) {
    add_name_ = new ::std::string;
  }
  add_name_->assign(value);
}
inline void C2GS_FriendAdd::set_add_name(const char* value, size_t size) {
  set_has_add_name();
  if (add_name_ == &::google::protobuf::internal::kEmptyString) {
    add_name_ = new ::std::string;
  }
  add_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2GS_FriendAdd::mutable_add_name() {
  set_has_add_name();
  if (add_name_ == &::google::protobuf::internal::kEmptyString) {
    add_name_ = new ::std::string;
  }
  return add_name_;
}
inline ::std::string* C2GS_FriendAdd::release_add_name() {
  clear_has_add_name();
  if (add_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = add_name_;
    add_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2GS_FriendAdd::set_allocated_add_name(::std::string* add_name) {
  if (add_name_ != &::google::protobuf::internal::kEmptyString) {
    delete add_name_;
  }
  if (add_name) {
    set_has_add_name();
    add_name_ = add_name;
  } else {
    clear_has_add_name();
    add_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 add_guid = 3;
inline bool C2GS_FriendAdd::has_add_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2GS_FriendAdd::set_has_add_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2GS_FriendAdd::clear_has_add_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2GS_FriendAdd::clear_add_guid() {
  add_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_add_guid();
}
inline ::google::protobuf::uint64 C2GS_FriendAdd::add_guid() const {
  return add_guid_;
}
inline void C2GS_FriendAdd::set_add_guid(::google::protobuf::uint64 value) {
  set_has_add_guid();
  add_guid_ = value;
}

// optional uint32 add_id = 4;
inline bool C2GS_FriendAdd::has_add_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void C2GS_FriendAdd::set_has_add_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void C2GS_FriendAdd::clear_has_add_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void C2GS_FriendAdd::clear_add_id() {
  add_id_ = 0u;
  clear_has_add_id();
}
inline ::google::protobuf::uint32 C2GS_FriendAdd::add_id() const {
  return add_id_;
}
inline void C2GS_FriendAdd::set_add_id(::google::protobuf::uint32 value) {
  set_has_add_id();
  add_id_ = value;
}

// required bool is_add = 5 [default = true];
inline bool C2GS_FriendAdd::has_is_add() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void C2GS_FriendAdd::set_has_is_add() {
  _has_bits_[0] |= 0x00000010u;
}
inline void C2GS_FriendAdd::clear_has_is_add() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void C2GS_FriendAdd::clear_is_add() {
  is_add_ = true;
  clear_has_is_add();
}
inline bool C2GS_FriendAdd::is_add() const {
  return is_add_;
}
inline void C2GS_FriendAdd::set_is_add(bool value) {
  set_has_is_add();
  is_add_ = value;
}

// required uint64 your_guid = 6;
inline bool C2GS_FriendAdd::has_your_guid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void C2GS_FriendAdd::set_has_your_guid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void C2GS_FriendAdd::clear_has_your_guid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void C2GS_FriendAdd::clear_your_guid() {
  your_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_your_guid();
}
inline ::google::protobuf::uint64 C2GS_FriendAdd::your_guid() const {
  return your_guid_;
}
inline void C2GS_FriendAdd::set_your_guid(::google::protobuf::uint64 value) {
  set_has_your_guid();
  your_guid_ = value;
}

// optional .pb.Friend_list_Record record = 7;
inline bool C2GS_FriendAdd::has_record() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void C2GS_FriendAdd::set_has_record() {
  _has_bits_[0] |= 0x00000040u;
}
inline void C2GS_FriendAdd::clear_has_record() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void C2GS_FriendAdd::clear_record() {
  if (record_ != NULL) record_->::pb::Friend_list_Record::Clear();
  clear_has_record();
}
inline const ::pb::Friend_list_Record& C2GS_FriendAdd::record() const {
  return record_ != NULL ? *record_ : *default_instance_->record_;
}
inline ::pb::Friend_list_Record* C2GS_FriendAdd::mutable_record() {
  set_has_record();
  if (record_ == NULL) record_ = new ::pb::Friend_list_Record;
  return record_;
}
inline ::pb::Friend_list_Record* C2GS_FriendAdd::release_record() {
  clear_has_record();
  ::pb::Friend_list_Record* temp = record_;
  record_ = NULL;
  return temp;
}
inline void C2GS_FriendAdd::set_allocated_record(::pb::Friend_list_Record* record) {
  delete record_;
  record_ = record;
  if (record) {
    set_has_record();
  } else {
    clear_has_record();
  }
}

// optional bool is_from_add_pannel = 8;
inline bool C2GS_FriendAdd::has_is_from_add_pannel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void C2GS_FriendAdd::set_has_is_from_add_pannel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void C2GS_FriendAdd::clear_has_is_from_add_pannel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void C2GS_FriendAdd::clear_is_from_add_pannel() {
  is_from_add_pannel_ = false;
  clear_has_is_from_add_pannel();
}
inline bool C2GS_FriendAdd::is_from_add_pannel() const {
  return is_from_add_pannel_;
}
inline void C2GS_FriendAdd::set_is_from_add_pannel(bool value) {
  set_has_is_from_add_pannel();
  is_from_add_pannel_ = value;
}

// -------------------------------------------------------------------

// GS2C_FriendAdd_Result

// optional uint32 errorCode = 1;
inline bool GS2C_FriendAdd_Result::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_FriendAdd_Result::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_FriendAdd_Result::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_FriendAdd_Result::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 GS2C_FriendAdd_Result::errorcode() const {
  return errorcode_;
}
inline void GS2C_FriendAdd_Result::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
}

// -------------------------------------------------------------------

// C2GS_FriendAdd_Respon

// required bool is_accept = 1;
inline bool C2GS_FriendAdd_Respon::has_is_accept() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_FriendAdd_Respon::set_has_is_accept() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_FriendAdd_Respon::clear_has_is_accept() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_FriendAdd_Respon::clear_is_accept() {
  is_accept_ = false;
  clear_has_is_accept();
}
inline bool C2GS_FriendAdd_Respon::is_accept() const {
  return is_accept_;
}
inline void C2GS_FriendAdd_Respon::set_is_accept(bool value) {
  set_has_is_accept();
  is_accept_ = value;
}

// required .pb.Friend_list_Record record = 2;
inline bool C2GS_FriendAdd_Respon::has_record() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_FriendAdd_Respon::set_has_record() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_FriendAdd_Respon::clear_has_record() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_FriendAdd_Respon::clear_record() {
  if (record_ != NULL) record_->::pb::Friend_list_Record::Clear();
  clear_has_record();
}
inline const ::pb::Friend_list_Record& C2GS_FriendAdd_Respon::record() const {
  return record_ != NULL ? *record_ : *default_instance_->record_;
}
inline ::pb::Friend_list_Record* C2GS_FriendAdd_Respon::mutable_record() {
  set_has_record();
  if (record_ == NULL) record_ = new ::pb::Friend_list_Record;
  return record_;
}
inline ::pb::Friend_list_Record* C2GS_FriendAdd_Respon::release_record() {
  clear_has_record();
  ::pb::Friend_list_Record* temp = record_;
  record_ = NULL;
  return temp;
}
inline void C2GS_FriendAdd_Respon::set_allocated_record(::pb::Friend_list_Record* record) {
  delete record_;
  record_ = record;
  if (record) {
    set_has_record();
  } else {
    clear_has_record();
  }
}

// required uint64 your_guid = 3;
inline bool C2GS_FriendAdd_Respon::has_your_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2GS_FriendAdd_Respon::set_has_your_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2GS_FriendAdd_Respon::clear_has_your_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2GS_FriendAdd_Respon::clear_your_guid() {
  your_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_your_guid();
}
inline ::google::protobuf::uint64 C2GS_FriendAdd_Respon::your_guid() const {
  return your_guid_;
}
inline void C2GS_FriendAdd_Respon::set_your_guid(::google::protobuf::uint64 value) {
  set_has_your_guid();
  your_guid_ = value;
}

// -------------------------------------------------------------------

// GS2C_FriendAdd_Respon

// required bool is_accept = 1 [default = true];
inline bool GS2C_FriendAdd_Respon::has_is_accept() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_FriendAdd_Respon::set_has_is_accept() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_FriendAdd_Respon::clear_has_is_accept() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_FriendAdd_Respon::clear_is_accept() {
  is_accept_ = true;
  clear_has_is_accept();
}
inline bool GS2C_FriendAdd_Respon::is_accept() const {
  return is_accept_;
}
inline void GS2C_FriendAdd_Respon::set_is_accept(bool value) {
  set_has_is_accept();
  is_accept_ = value;
}

// optional .pb.Friend_list_Record record = 2;
inline bool GS2C_FriendAdd_Respon::has_record() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_FriendAdd_Respon::set_has_record() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_FriendAdd_Respon::clear_has_record() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_FriendAdd_Respon::clear_record() {
  if (record_ != NULL) record_->::pb::Friend_list_Record::Clear();
  clear_has_record();
}
inline const ::pb::Friend_list_Record& GS2C_FriendAdd_Respon::record() const {
  return record_ != NULL ? *record_ : *default_instance_->record_;
}
inline ::pb::Friend_list_Record* GS2C_FriendAdd_Respon::mutable_record() {
  set_has_record();
  if (record_ == NULL) record_ = new ::pb::Friend_list_Record;
  return record_;
}
inline ::pb::Friend_list_Record* GS2C_FriendAdd_Respon::release_record() {
  clear_has_record();
  ::pb::Friend_list_Record* temp = record_;
  record_ = NULL;
  return temp;
}
inline void GS2C_FriendAdd_Respon::set_allocated_record(::pb::Friend_list_Record* record) {
  delete record_;
  record_ = record;
  if (record) {
    set_has_record();
  } else {
    clear_has_record();
  }
}

// optional uint32 errorCode = 3;
inline bool GS2C_FriendAdd_Respon::has_errorcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_FriendAdd_Respon::set_has_errorcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_FriendAdd_Respon::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_FriendAdd_Respon::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 GS2C_FriendAdd_Respon::errorcode() const {
  return errorcode_;
}
inline void GS2C_FriendAdd_Respon::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
}

// required bool is_add = 4 [default = true];
inline bool GS2C_FriendAdd_Respon::has_is_add() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_FriendAdd_Respon::set_has_is_add() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_FriendAdd_Respon::clear_has_is_add() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_FriendAdd_Respon::clear_is_add() {
  is_add_ = true;
  clear_has_is_add();
}
inline bool GS2C_FriendAdd_Respon::is_add() const {
  return is_add_;
}
inline void GS2C_FriendAdd_Respon::set_is_add(bool value) {
  set_has_is_add();
  is_add_ = value;
}

// optional bool is_reply = 5 [default = false];
inline bool GS2C_FriendAdd_Respon::has_is_reply() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GS2C_FriendAdd_Respon::set_has_is_reply() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GS2C_FriendAdd_Respon::clear_has_is_reply() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GS2C_FriendAdd_Respon::clear_is_reply() {
  is_reply_ = false;
  clear_has_is_reply();
}
inline bool GS2C_FriendAdd_Respon::is_reply() const {
  return is_reply_;
}
inline void GS2C_FriendAdd_Respon::set_is_reply(bool value) {
  set_has_is_reply();
  is_reply_ = value;
}

// -------------------------------------------------------------------

// C2GS_FriendDel

// optional uint64 del_guid = 1;
inline bool C2GS_FriendDel::has_del_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_FriendDel::set_has_del_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_FriendDel::clear_has_del_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_FriendDel::clear_del_guid() {
  del_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_del_guid();
}
inline ::google::protobuf::uint64 C2GS_FriendDel::del_guid() const {
  return del_guid_;
}
inline void C2GS_FriendDel::set_del_guid(::google::protobuf::uint64 value) {
  set_has_del_guid();
  del_guid_ = value;
}

// required bool is_for_friend_list = 2 [default = true];
inline bool C2GS_FriendDel::has_is_for_friend_list() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_FriendDel::set_has_is_for_friend_list() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_FriendDel::clear_has_is_for_friend_list() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_FriendDel::clear_is_for_friend_list() {
  is_for_friend_list_ = true;
  clear_has_is_for_friend_list();
}
inline bool C2GS_FriendDel::is_for_friend_list() const {
  return is_for_friend_list_;
}
inline void C2GS_FriendDel::set_is_for_friend_list(bool value) {
  set_has_is_for_friend_list();
  is_for_friend_list_ = value;
}

// required uint64 your_guid = 3;
inline bool C2GS_FriendDel::has_your_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2GS_FriendDel::set_has_your_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2GS_FriendDel::clear_has_your_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2GS_FriendDel::clear_your_guid() {
  your_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_your_guid();
}
inline ::google::protobuf::uint64 C2GS_FriendDel::your_guid() const {
  return your_guid_;
}
inline void C2GS_FriendDel::set_your_guid(::google::protobuf::uint64 value) {
  set_has_your_guid();
  your_guid_ = value;
}

// -------------------------------------------------------------------

// GS2C_FriendDel_Respon

// required bool is_suscess = 1;
inline bool GS2C_FriendDel_Respon::has_is_suscess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_FriendDel_Respon::set_has_is_suscess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_FriendDel_Respon::clear_has_is_suscess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_FriendDel_Respon::clear_is_suscess() {
  is_suscess_ = false;
  clear_has_is_suscess();
}
inline bool GS2C_FriendDel_Respon::is_suscess() const {
  return is_suscess_;
}
inline void GS2C_FriendDel_Respon::set_is_suscess(bool value) {
  set_has_is_suscess();
  is_suscess_ = value;
}

// required bool is_for_friend_list = 2 [default = true];
inline bool GS2C_FriendDel_Respon::has_is_for_friend_list() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_FriendDel_Respon::set_has_is_for_friend_list() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_FriendDel_Respon::clear_has_is_for_friend_list() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_FriendDel_Respon::clear_is_for_friend_list() {
  is_for_friend_list_ = true;
  clear_has_is_for_friend_list();
}
inline bool GS2C_FriendDel_Respon::is_for_friend_list() const {
  return is_for_friend_list_;
}
inline void GS2C_FriendDel_Respon::set_is_for_friend_list(bool value) {
  set_has_is_for_friend_list();
  is_for_friend_list_ = value;
}

// optional uint64 friend_guid = 3;
inline bool GS2C_FriendDel_Respon::has_friend_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_FriendDel_Respon::set_has_friend_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_FriendDel_Respon::clear_has_friend_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_FriendDel_Respon::clear_friend_guid() {
  friend_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_friend_guid();
}
inline ::google::protobuf::uint64 GS2C_FriendDel_Respon::friend_guid() const {
  return friend_guid_;
}
inline void GS2C_FriendDel_Respon::set_friend_guid(::google::protobuf::uint64 value) {
  set_has_friend_guid();
  friend_guid_ = value;
}

// -------------------------------------------------------------------

// GS2C_FriendListInfo

// repeated .pb.Friend_list_Record friends = 1;
inline int GS2C_FriendListInfo::friends_size() const {
  return friends_.size();
}
inline void GS2C_FriendListInfo::clear_friends() {
  friends_.Clear();
}
inline const ::pb::Friend_list_Record& GS2C_FriendListInfo::friends(int index) const {
  return friends_.Get(index);
}
inline ::pb::Friend_list_Record* GS2C_FriendListInfo::mutable_friends(int index) {
  return friends_.Mutable(index);
}
inline ::pb::Friend_list_Record* GS2C_FriendListInfo::add_friends() {
  return friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Friend_list_Record >&
GS2C_FriendListInfo::friends() const {
  return friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Friend_list_Record >*
GS2C_FriendListInfo::mutable_friends() {
  return &friends_;
}

// -------------------------------------------------------------------

// C2GS_Friend_Search

// required uint32 search_type = 1;
inline bool C2GS_Friend_Search::has_search_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Friend_Search::set_has_search_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Friend_Search::clear_has_search_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Friend_Search::clear_search_type() {
  search_type_ = 0u;
  clear_has_search_type();
}
inline ::google::protobuf::uint32 C2GS_Friend_Search::search_type() const {
  return search_type_;
}
inline void C2GS_Friend_Search::set_search_type(::google::protobuf::uint32 value) {
  set_has_search_type();
  search_type_ = value;
}

// optional bool is_search_by_name = 2;
inline bool C2GS_Friend_Search::has_is_search_by_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_Friend_Search::set_has_is_search_by_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_Friend_Search::clear_has_is_search_by_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_Friend_Search::clear_is_search_by_name() {
  is_search_by_name_ = false;
  clear_has_is_search_by_name();
}
inline bool C2GS_Friend_Search::is_search_by_name() const {
  return is_search_by_name_;
}
inline void C2GS_Friend_Search::set_is_search_by_name(bool value) {
  set_has_is_search_by_name();
  is_search_by_name_ = value;
}

// optional string search_name = 3;
inline bool C2GS_Friend_Search::has_search_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2GS_Friend_Search::set_has_search_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2GS_Friend_Search::clear_has_search_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2GS_Friend_Search::clear_search_name() {
  if (search_name_ != &::google::protobuf::internal::kEmptyString) {
    search_name_->clear();
  }
  clear_has_search_name();
}
inline const ::std::string& C2GS_Friend_Search::search_name() const {
  return *search_name_;
}
inline void C2GS_Friend_Search::set_search_name(const ::std::string& value) {
  set_has_search_name();
  if (search_name_ == &::google::protobuf::internal::kEmptyString) {
    search_name_ = new ::std::string;
  }
  search_name_->assign(value);
}
inline void C2GS_Friend_Search::set_search_name(const char* value) {
  set_has_search_name();
  if (search_name_ == &::google::protobuf::internal::kEmptyString) {
    search_name_ = new ::std::string;
  }
  search_name_->assign(value);
}
inline void C2GS_Friend_Search::set_search_name(const char* value, size_t size) {
  set_has_search_name();
  if (search_name_ == &::google::protobuf::internal::kEmptyString) {
    search_name_ = new ::std::string;
  }
  search_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2GS_Friend_Search::mutable_search_name() {
  set_has_search_name();
  if (search_name_ == &::google::protobuf::internal::kEmptyString) {
    search_name_ = new ::std::string;
  }
  return search_name_;
}
inline ::std::string* C2GS_Friend_Search::release_search_name() {
  clear_has_search_name();
  if (search_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = search_name_;
    search_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2GS_Friend_Search::set_allocated_search_name(::std::string* search_name) {
  if (search_name_ != &::google::protobuf::internal::kEmptyString) {
    delete search_name_;
  }
  if (search_name) {
    set_has_search_name();
    search_name_ = search_name;
  } else {
    clear_has_search_name();
    search_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 search_id = 4;
inline bool C2GS_Friend_Search::has_search_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void C2GS_Friend_Search::set_has_search_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void C2GS_Friend_Search::clear_has_search_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void C2GS_Friend_Search::clear_search_id() {
  search_id_ = GOOGLE_ULONGLONG(0);
  clear_has_search_id();
}
inline ::google::protobuf::uint64 C2GS_Friend_Search::search_id() const {
  return search_id_;
}
inline void C2GS_Friend_Search::set_search_id(::google::protobuf::uint64 value) {
  set_has_search_id();
  search_id_ = value;
}

// optional uint64 your_guid = 5;
inline bool C2GS_Friend_Search::has_your_guid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void C2GS_Friend_Search::set_has_your_guid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void C2GS_Friend_Search::clear_has_your_guid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void C2GS_Friend_Search::clear_your_guid() {
  your_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_your_guid();
}
inline ::google::protobuf::uint64 C2GS_Friend_Search::your_guid() const {
  return your_guid_;
}
inline void C2GS_Friend_Search::set_your_guid(::google::protobuf::uint64 value) {
  set_has_your_guid();
  your_guid_ = value;
}

// optional uint32 max_count = 6;
inline bool C2GS_Friend_Search::has_max_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void C2GS_Friend_Search::set_has_max_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void C2GS_Friend_Search::clear_has_max_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void C2GS_Friend_Search::clear_max_count() {
  max_count_ = 0u;
  clear_has_max_count();
}
inline ::google::protobuf::uint32 C2GS_Friend_Search::max_count() const {
  return max_count_;
}
inline void C2GS_Friend_Search::set_max_count(::google::protobuf::uint32 value) {
  set_has_max_count();
  max_count_ = value;
}

// -------------------------------------------------------------------

// GS2C_Friend_Search_Respone

// optional uint32 search_result = 1;
inline bool GS2C_Friend_Search_Respone::has_search_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Friend_Search_Respone::set_has_search_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Friend_Search_Respone::clear_has_search_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Friend_Search_Respone::clear_search_result() {
  search_result_ = 0u;
  clear_has_search_result();
}
inline ::google::protobuf::uint32 GS2C_Friend_Search_Respone::search_result() const {
  return search_result_;
}
inline void GS2C_Friend_Search_Respone::set_search_result(::google::protobuf::uint32 value) {
  set_has_search_result();
  search_result_ = value;
}

// repeated .pb.Friend_list_Record search_players = 2;
inline int GS2C_Friend_Search_Respone::search_players_size() const {
  return search_players_.size();
}
inline void GS2C_Friend_Search_Respone::clear_search_players() {
  search_players_.Clear();
}
inline const ::pb::Friend_list_Record& GS2C_Friend_Search_Respone::search_players(int index) const {
  return search_players_.Get(index);
}
inline ::pb::Friend_list_Record* GS2C_Friend_Search_Respone::mutable_search_players(int index) {
  return search_players_.Mutable(index);
}
inline ::pb::Friend_list_Record* GS2C_Friend_Search_Respone::add_search_players() {
  return search_players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Friend_list_Record >&
GS2C_Friend_Search_Respone::search_players() const {
  return search_players_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Friend_list_Record >*
GS2C_Friend_Search_Respone::mutable_search_players() {
  return &search_players_;
}

// optional uint64 your_guid = 3;
inline bool GS2C_Friend_Search_Respone::has_your_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Friend_Search_Respone::set_has_your_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Friend_Search_Respone::clear_has_your_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Friend_Search_Respone::clear_your_guid() {
  your_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_your_guid();
}
inline ::google::protobuf::uint64 GS2C_Friend_Search_Respone::your_guid() const {
  return your_guid_;
}
inline void GS2C_Friend_Search_Respone::set_your_guid(::google::protobuf::uint64 value) {
  set_has_your_guid();
  your_guid_ = value;
}

// -------------------------------------------------------------------

// GxDB_FriendInfo

// optional .pb.Friend_list_Record my_info = 1;
inline bool GxDB_FriendInfo::has_my_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GxDB_FriendInfo::set_has_my_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GxDB_FriendInfo::clear_has_my_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GxDB_FriendInfo::clear_my_info() {
  if (my_info_ != NULL) my_info_->::pb::Friend_list_Record::Clear();
  clear_has_my_info();
}
inline const ::pb::Friend_list_Record& GxDB_FriendInfo::my_info() const {
  return my_info_ != NULL ? *my_info_ : *default_instance_->my_info_;
}
inline ::pb::Friend_list_Record* GxDB_FriendInfo::mutable_my_info() {
  set_has_my_info();
  if (my_info_ == NULL) my_info_ = new ::pb::Friend_list_Record;
  return my_info_;
}
inline ::pb::Friend_list_Record* GxDB_FriendInfo::release_my_info() {
  clear_has_my_info();
  ::pb::Friend_list_Record* temp = my_info_;
  my_info_ = NULL;
  return temp;
}
inline void GxDB_FriendInfo::set_allocated_my_info(::pb::Friend_list_Record* my_info) {
  delete my_info_;
  my_info_ = my_info;
  if (my_info) {
    set_has_my_info();
  } else {
    clear_has_my_info();
  }
}

// optional .pb.GS2C_FriendListInfo friend_list = 2;
inline bool GxDB_FriendInfo::has_friend_list() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GxDB_FriendInfo::set_has_friend_list() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GxDB_FriendInfo::clear_has_friend_list() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GxDB_FriendInfo::clear_friend_list() {
  if (friend_list_ != NULL) friend_list_->::pb::GS2C_FriendListInfo::Clear();
  clear_has_friend_list();
}
inline const ::pb::GS2C_FriendListInfo& GxDB_FriendInfo::friend_list() const {
  return friend_list_ != NULL ? *friend_list_ : *default_instance_->friend_list_;
}
inline ::pb::GS2C_FriendListInfo* GxDB_FriendInfo::mutable_friend_list() {
  set_has_friend_list();
  if (friend_list_ == NULL) friend_list_ = new ::pb::GS2C_FriendListInfo;
  return friend_list_;
}
inline ::pb::GS2C_FriendListInfo* GxDB_FriendInfo::release_friend_list() {
  clear_has_friend_list();
  ::pb::GS2C_FriendListInfo* temp = friend_list_;
  friend_list_ = NULL;
  return temp;
}
inline void GxDB_FriendInfo::set_allocated_friend_list(::pb::GS2C_FriendListInfo* friend_list) {
  delete friend_list_;
  friend_list_ = friend_list;
  if (friend_list) {
    set_has_friend_list();
  } else {
    clear_has_friend_list();
  }
}

// optional string send_ap_ids = 3;
inline bool GxDB_FriendInfo::has_send_ap_ids() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GxDB_FriendInfo::set_has_send_ap_ids() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GxDB_FriendInfo::clear_has_send_ap_ids() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GxDB_FriendInfo::clear_send_ap_ids() {
  if (send_ap_ids_ != &::google::protobuf::internal::kEmptyString) {
    send_ap_ids_->clear();
  }
  clear_has_send_ap_ids();
}
inline const ::std::string& GxDB_FriendInfo::send_ap_ids() const {
  return *send_ap_ids_;
}
inline void GxDB_FriendInfo::set_send_ap_ids(const ::std::string& value) {
  set_has_send_ap_ids();
  if (send_ap_ids_ == &::google::protobuf::internal::kEmptyString) {
    send_ap_ids_ = new ::std::string;
  }
  send_ap_ids_->assign(value);
}
inline void GxDB_FriendInfo::set_send_ap_ids(const char* value) {
  set_has_send_ap_ids();
  if (send_ap_ids_ == &::google::protobuf::internal::kEmptyString) {
    send_ap_ids_ = new ::std::string;
  }
  send_ap_ids_->assign(value);
}
inline void GxDB_FriendInfo::set_send_ap_ids(const char* value, size_t size) {
  set_has_send_ap_ids();
  if (send_ap_ids_ == &::google::protobuf::internal::kEmptyString) {
    send_ap_ids_ = new ::std::string;
  }
  send_ap_ids_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GxDB_FriendInfo::mutable_send_ap_ids() {
  set_has_send_ap_ids();
  if (send_ap_ids_ == &::google::protobuf::internal::kEmptyString) {
    send_ap_ids_ = new ::std::string;
  }
  return send_ap_ids_;
}
inline ::std::string* GxDB_FriendInfo::release_send_ap_ids() {
  clear_has_send_ap_ids();
  if (send_ap_ids_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = send_ap_ids_;
    send_ap_ids_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GxDB_FriendInfo::set_allocated_send_ap_ids(::std::string* send_ap_ids) {
  if (send_ap_ids_ != &::google::protobuf::internal::kEmptyString) {
    delete send_ap_ids_;
  }
  if (send_ap_ids) {
    set_has_send_ap_ids();
    send_ap_ids_ = send_ap_ids;
  } else {
    clear_has_send_ap_ids();
    send_ap_ids_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GxDB_GuildInfo

// required uint64 guild_id = 1;
inline bool GxDB_GuildInfo::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GxDB_GuildInfo::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GxDB_GuildInfo::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GxDB_GuildInfo::clear_guild_id() {
  guild_id_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_id();
}
inline ::google::protobuf::uint64 GxDB_GuildInfo::guild_id() const {
  return guild_id_;
}
inline void GxDB_GuildInfo::set_guild_id(::google::protobuf::uint64 value) {
  set_has_guild_id();
  guild_id_ = value;
}

// required uint32 icon = 2;
inline bool GxDB_GuildInfo::has_icon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GxDB_GuildInfo::set_has_icon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GxDB_GuildInfo::clear_has_icon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GxDB_GuildInfo::clear_icon() {
  icon_ = 0u;
  clear_has_icon();
}
inline ::google::protobuf::uint32 GxDB_GuildInfo::icon() const {
  return icon_;
}
inline void GxDB_GuildInfo::set_icon(::google::protobuf::uint32 value) {
  set_has_icon();
  icon_ = value;
}

// required string name = 3;
inline bool GxDB_GuildInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GxDB_GuildInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GxDB_GuildInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GxDB_GuildInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GxDB_GuildInfo::name() const {
  return *name_;
}
inline void GxDB_GuildInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GxDB_GuildInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GxDB_GuildInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GxDB_GuildInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GxDB_GuildInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GxDB_GuildInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 create_time = 4;
inline bool GxDB_GuildInfo::has_create_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GxDB_GuildInfo::set_has_create_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GxDB_GuildInfo::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GxDB_GuildInfo::clear_create_time() {
  create_time_ = GOOGLE_ULONGLONG(0);
  clear_has_create_time();
}
inline ::google::protobuf::uint64 GxDB_GuildInfo::create_time() const {
  return create_time_;
}
inline void GxDB_GuildInfo::set_create_time(::google::protobuf::uint64 value) {
  set_has_create_time();
  create_time_ = value;
}

// optional uint32 level = 5;
inline bool GxDB_GuildInfo::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GxDB_GuildInfo::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GxDB_GuildInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GxDB_GuildInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 GxDB_GuildInfo::level() const {
  return level_;
}
inline void GxDB_GuildInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 exp = 6;
inline bool GxDB_GuildInfo::has_exp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GxDB_GuildInfo::set_has_exp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GxDB_GuildInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GxDB_GuildInfo::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 GxDB_GuildInfo::exp() const {
  return exp_;
}
inline void GxDB_GuildInfo::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 prestige = 7;
inline bool GxDB_GuildInfo::has_prestige() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GxDB_GuildInfo::set_has_prestige() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GxDB_GuildInfo::clear_has_prestige() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GxDB_GuildInfo::clear_prestige() {
  prestige_ = 0u;
  clear_has_prestige();
}
inline ::google::protobuf::uint32 GxDB_GuildInfo::prestige() const {
  return prestige_;
}
inline void GxDB_GuildInfo::set_prestige(::google::protobuf::uint32 value) {
  set_has_prestige();
  prestige_ = value;
}

// optional uint32 active = 8;
inline bool GxDB_GuildInfo::has_active() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GxDB_GuildInfo::set_has_active() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GxDB_GuildInfo::clear_has_active() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GxDB_GuildInfo::clear_active() {
  active_ = 0u;
  clear_has_active();
}
inline ::google::protobuf::uint32 GxDB_GuildInfo::active() const {
  return active_;
}
inline void GxDB_GuildInfo::set_active(::google::protobuf::uint32 value) {
  set_has_active();
  active_ = value;
}

// optional string notice = 9;
inline bool GxDB_GuildInfo::has_notice() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GxDB_GuildInfo::set_has_notice() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GxDB_GuildInfo::clear_has_notice() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GxDB_GuildInfo::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& GxDB_GuildInfo::notice() const {
  return *notice_;
}
inline void GxDB_GuildInfo::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void GxDB_GuildInfo::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void GxDB_GuildInfo::set_notice(const char* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GxDB_GuildInfo::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* GxDB_GuildInfo::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GxDB_GuildInfo::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 notice_time = 10;
inline bool GxDB_GuildInfo::has_notice_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GxDB_GuildInfo::set_has_notice_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GxDB_GuildInfo::clear_has_notice_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GxDB_GuildInfo::clear_notice_time() {
  notice_time_ = GOOGLE_ULONGLONG(0);
  clear_has_notice_time();
}
inline ::google::protobuf::uint64 GxDB_GuildInfo::notice_time() const {
  return notice_time_;
}
inline void GxDB_GuildInfo::set_notice_time(::google::protobuf::uint64 value) {
  set_has_notice_time();
  notice_time_ = value;
}

// optional uint64 notice_creater_id = 11;
inline bool GxDB_GuildInfo::has_notice_creater_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GxDB_GuildInfo::set_has_notice_creater_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GxDB_GuildInfo::clear_has_notice_creater_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GxDB_GuildInfo::clear_notice_creater_id() {
  notice_creater_id_ = GOOGLE_ULONGLONG(0);
  clear_has_notice_creater_id();
}
inline ::google::protobuf::uint64 GxDB_GuildInfo::notice_creater_id() const {
  return notice_creater_id_;
}
inline void GxDB_GuildInfo::set_notice_creater_id(::google::protobuf::uint64 value) {
  set_has_notice_creater_id();
  notice_creater_id_ = value;
}

// optional string notice_creater_name = 12;
inline bool GxDB_GuildInfo::has_notice_creater_name() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GxDB_GuildInfo::set_has_notice_creater_name() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GxDB_GuildInfo::clear_has_notice_creater_name() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GxDB_GuildInfo::clear_notice_creater_name() {
  if (notice_creater_name_ != &::google::protobuf::internal::kEmptyString) {
    notice_creater_name_->clear();
  }
  clear_has_notice_creater_name();
}
inline const ::std::string& GxDB_GuildInfo::notice_creater_name() const {
  return *notice_creater_name_;
}
inline void GxDB_GuildInfo::set_notice_creater_name(const ::std::string& value) {
  set_has_notice_creater_name();
  if (notice_creater_name_ == &::google::protobuf::internal::kEmptyString) {
    notice_creater_name_ = new ::std::string;
  }
  notice_creater_name_->assign(value);
}
inline void GxDB_GuildInfo::set_notice_creater_name(const char* value) {
  set_has_notice_creater_name();
  if (notice_creater_name_ == &::google::protobuf::internal::kEmptyString) {
    notice_creater_name_ = new ::std::string;
  }
  notice_creater_name_->assign(value);
}
inline void GxDB_GuildInfo::set_notice_creater_name(const char* value, size_t size) {
  set_has_notice_creater_name();
  if (notice_creater_name_ == &::google::protobuf::internal::kEmptyString) {
    notice_creater_name_ = new ::std::string;
  }
  notice_creater_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GxDB_GuildInfo::mutable_notice_creater_name() {
  set_has_notice_creater_name();
  if (notice_creater_name_ == &::google::protobuf::internal::kEmptyString) {
    notice_creater_name_ = new ::std::string;
  }
  return notice_creater_name_;
}
inline ::std::string* GxDB_GuildInfo::release_notice_creater_name() {
  clear_has_notice_creater_name();
  if (notice_creater_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_creater_name_;
    notice_creater_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GxDB_GuildInfo::set_allocated_notice_creater_name(::std::string* notice_creater_name) {
  if (notice_creater_name_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_creater_name_;
  }
  if (notice_creater_name) {
    set_has_notice_creater_name();
    notice_creater_name_ = notice_creater_name;
  } else {
    clear_has_notice_creater_name();
    notice_creater_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 guild_owner_id = 13;
inline bool GxDB_GuildInfo::has_guild_owner_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GxDB_GuildInfo::set_has_guild_owner_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GxDB_GuildInfo::clear_has_guild_owner_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GxDB_GuildInfo::clear_guild_owner_id() {
  guild_owner_id_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_owner_id();
}
inline ::google::protobuf::uint64 GxDB_GuildInfo::guild_owner_id() const {
  return guild_owner_id_;
}
inline void GxDB_GuildInfo::set_guild_owner_id(::google::protobuf::uint64 value) {
  set_has_guild_owner_id();
  guild_owner_id_ = value;
}

// optional string guild_owner_name = 14;
inline bool GxDB_GuildInfo::has_guild_owner_name() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GxDB_GuildInfo::set_has_guild_owner_name() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GxDB_GuildInfo::clear_has_guild_owner_name() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GxDB_GuildInfo::clear_guild_owner_name() {
  if (guild_owner_name_ != &::google::protobuf::internal::kEmptyString) {
    guild_owner_name_->clear();
  }
  clear_has_guild_owner_name();
}
inline const ::std::string& GxDB_GuildInfo::guild_owner_name() const {
  return *guild_owner_name_;
}
inline void GxDB_GuildInfo::set_guild_owner_name(const ::std::string& value) {
  set_has_guild_owner_name();
  if (guild_owner_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_owner_name_ = new ::std::string;
  }
  guild_owner_name_->assign(value);
}
inline void GxDB_GuildInfo::set_guild_owner_name(const char* value) {
  set_has_guild_owner_name();
  if (guild_owner_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_owner_name_ = new ::std::string;
  }
  guild_owner_name_->assign(value);
}
inline void GxDB_GuildInfo::set_guild_owner_name(const char* value, size_t size) {
  set_has_guild_owner_name();
  if (guild_owner_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_owner_name_ = new ::std::string;
  }
  guild_owner_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GxDB_GuildInfo::mutable_guild_owner_name() {
  set_has_guild_owner_name();
  if (guild_owner_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_owner_name_ = new ::std::string;
  }
  return guild_owner_name_;
}
inline ::std::string* GxDB_GuildInfo::release_guild_owner_name() {
  clear_has_guild_owner_name();
  if (guild_owner_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guild_owner_name_;
    guild_owner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GxDB_GuildInfo::set_allocated_guild_owner_name(::std::string* guild_owner_name) {
  if (guild_owner_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_owner_name_;
  }
  if (guild_owner_name) {
    set_has_guild_owner_name();
    guild_owner_name_ = guild_owner_name;
  } else {
    clear_has_guild_owner_name();
    guild_owner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 members_count = 15;
inline bool GxDB_GuildInfo::has_members_count() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GxDB_GuildInfo::set_has_members_count() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GxDB_GuildInfo::clear_has_members_count() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GxDB_GuildInfo::clear_members_count() {
  members_count_ = 0u;
  clear_has_members_count();
}
inline ::google::protobuf::uint32 GxDB_GuildInfo::members_count() const {
  return members_count_;
}
inline void GxDB_GuildInfo::set_members_count(::google::protobuf::uint32 value) {
  set_has_members_count();
  members_count_ = value;
}

// optional uint32 members_limit = 16;
inline bool GxDB_GuildInfo::has_members_limit() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GxDB_GuildInfo::set_has_members_limit() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GxDB_GuildInfo::clear_has_members_limit() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GxDB_GuildInfo::clear_members_limit() {
  members_limit_ = 0u;
  clear_has_members_limit();
}
inline ::google::protobuf::uint32 GxDB_GuildInfo::members_limit() const {
  return members_limit_;
}
inline void GxDB_GuildInfo::set_members_limit(::google::protobuf::uint32 value) {
  set_has_members_limit();
  members_limit_ = value;
}

// optional uint32 score = 17;
inline bool GxDB_GuildInfo::has_score() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GxDB_GuildInfo::set_has_score() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GxDB_GuildInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GxDB_GuildInfo::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 GxDB_GuildInfo::score() const {
  return score_;
}
inline void GxDB_GuildInfo::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// optional uint64 last_rank_time = 18;
inline bool GxDB_GuildInfo::has_last_rank_time() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GxDB_GuildInfo::set_has_last_rank_time() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GxDB_GuildInfo::clear_has_last_rank_time() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GxDB_GuildInfo::clear_last_rank_time() {
  last_rank_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_rank_time();
}
inline ::google::protobuf::uint64 GxDB_GuildInfo::last_rank_time() const {
  return last_rank_time_;
}
inline void GxDB_GuildInfo::set_last_rank_time(::google::protobuf::uint64 value) {
  set_has_last_rank_time();
  last_rank_time_ = value;
}

// optional .pb.GS2C_Guild_Dynamic_Event_Log logs = 19;
inline bool GxDB_GuildInfo::has_logs() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void GxDB_GuildInfo::set_has_logs() {
  _has_bits_[0] |= 0x00040000u;
}
inline void GxDB_GuildInfo::clear_has_logs() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void GxDB_GuildInfo::clear_logs() {
  if (logs_ != NULL) logs_->::pb::GS2C_Guild_Dynamic_Event_Log::Clear();
  clear_has_logs();
}
inline const ::pb::GS2C_Guild_Dynamic_Event_Log& GxDB_GuildInfo::logs() const {
  return logs_ != NULL ? *logs_ : *default_instance_->logs_;
}
inline ::pb::GS2C_Guild_Dynamic_Event_Log* GxDB_GuildInfo::mutable_logs() {
  set_has_logs();
  if (logs_ == NULL) logs_ = new ::pb::GS2C_Guild_Dynamic_Event_Log;
  return logs_;
}
inline ::pb::GS2C_Guild_Dynamic_Event_Log* GxDB_GuildInfo::release_logs() {
  clear_has_logs();
  ::pb::GS2C_Guild_Dynamic_Event_Log* temp = logs_;
  logs_ = NULL;
  return temp;
}
inline void GxDB_GuildInfo::set_allocated_logs(::pb::GS2C_Guild_Dynamic_Event_Log* logs) {
  delete logs_;
  logs_ = logs;
  if (logs) {
    set_has_logs();
  } else {
    clear_has_logs();
  }
}

// -------------------------------------------------------------------

// GxDB_GMember_Info

// optional uint64 playerId = 1;
inline bool GxDB_GMember_Info::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GxDB_GMember_Info::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GxDB_GMember_Info::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GxDB_GMember_Info::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::uint64 GxDB_GMember_Info::playerid() const {
  return playerid_;
}
inline void GxDB_GMember_Info::set_playerid(::google::protobuf::uint64 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional string player_name = 2;
inline bool GxDB_GMember_Info::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GxDB_GMember_Info::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GxDB_GMember_Info::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GxDB_GMember_Info::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& GxDB_GMember_Info::player_name() const {
  return *player_name_;
}
inline void GxDB_GMember_Info::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void GxDB_GMember_Info::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void GxDB_GMember_Info::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GxDB_GMember_Info::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* GxDB_GMember_Info::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GxDB_GMember_Info::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 guild_id = 3;
inline bool GxDB_GMember_Info::has_guild_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GxDB_GMember_Info::set_has_guild_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GxDB_GMember_Info::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GxDB_GMember_Info::clear_guild_id() {
  guild_id_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_id();
}
inline ::google::protobuf::uint64 GxDB_GMember_Info::guild_id() const {
  return guild_id_;
}
inline void GxDB_GMember_Info::set_guild_id(::google::protobuf::uint64 value) {
  set_has_guild_id();
  guild_id_ = value;
}

// optional string guild_name = 4;
inline bool GxDB_GMember_Info::has_guild_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GxDB_GMember_Info::set_has_guild_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GxDB_GMember_Info::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GxDB_GMember_Info::clear_guild_name() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    guild_name_->clear();
  }
  clear_has_guild_name();
}
inline const ::std::string& GxDB_GMember_Info::guild_name() const {
  return *guild_name_;
}
inline void GxDB_GMember_Info::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void GxDB_GMember_Info::set_guild_name(const char* value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void GxDB_GMember_Info::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GxDB_GMember_Info::mutable_guild_name() {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  return guild_name_;
}
inline ::std::string* GxDB_GMember_Info::release_guild_name() {
  clear_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guild_name_;
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GxDB_GMember_Info::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (guild_name) {
    set_has_guild_name();
    guild_name_ = guild_name;
  } else {
    clear_has_guild_name();
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 title = 5;
inline bool GxDB_GMember_Info::has_title() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GxDB_GMember_Info::set_has_title() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GxDB_GMember_Info::clear_has_title() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GxDB_GMember_Info::clear_title() {
  title_ = 0u;
  clear_has_title();
}
inline ::google::protobuf::uint32 GxDB_GMember_Info::title() const {
  return title_;
}
inline void GxDB_GMember_Info::set_title(::google::protobuf::uint32 value) {
  set_has_title();
  title_ = value;
}

// optional uint64 joinTime = 6;
inline bool GxDB_GMember_Info::has_jointime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GxDB_GMember_Info::set_has_jointime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GxDB_GMember_Info::clear_has_jointime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GxDB_GMember_Info::clear_jointime() {
  jointime_ = GOOGLE_ULONGLONG(0);
  clear_has_jointime();
}
inline ::google::protobuf::uint64 GxDB_GMember_Info::jointime() const {
  return jointime_;
}
inline void GxDB_GMember_Info::set_jointime(::google::protobuf::uint64 value) {
  set_has_jointime();
  jointime_ = value;
}

// optional uint64 lastActiveTime = 7;
inline bool GxDB_GMember_Info::has_lastactivetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GxDB_GMember_Info::set_has_lastactivetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GxDB_GMember_Info::clear_has_lastactivetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GxDB_GMember_Info::clear_lastactivetime() {
  lastactivetime_ = GOOGLE_ULONGLONG(0);
  clear_has_lastactivetime();
}
inline ::google::protobuf::uint64 GxDB_GMember_Info::lastactivetime() const {
  return lastactivetime_;
}
inline void GxDB_GMember_Info::set_lastactivetime(::google::protobuf::uint64 value) {
  set_has_lastactivetime();
  lastactivetime_ = value;
}

// optional uint32 guildcontributions = 8;
inline bool GxDB_GMember_Info::has_guildcontributions() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GxDB_GMember_Info::set_has_guildcontributions() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GxDB_GMember_Info::clear_has_guildcontributions() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GxDB_GMember_Info::clear_guildcontributions() {
  guildcontributions_ = 0u;
  clear_has_guildcontributions();
}
inline ::google::protobuf::uint32 GxDB_GMember_Info::guildcontributions() const {
  return guildcontributions_;
}
inline void GxDB_GMember_Info::set_guildcontributions(::google::protobuf::uint32 value) {
  set_has_guildcontributions();
  guildcontributions_ = value;
}

// optional uint32 level = 9;
inline bool GxDB_GMember_Info::has_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GxDB_GMember_Info::set_has_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GxDB_GMember_Info::clear_has_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GxDB_GMember_Info::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 GxDB_GMember_Info::level() const {
  return level_;
}
inline void GxDB_GMember_Info::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional bool isonline = 10;
inline bool GxDB_GMember_Info::has_isonline() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GxDB_GMember_Info::set_has_isonline() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GxDB_GMember_Info::clear_has_isonline() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GxDB_GMember_Info::clear_isonline() {
  isonline_ = false;
  clear_has_isonline();
}
inline bool GxDB_GMember_Info::isonline() const {
  return isonline_;
}
inline void GxDB_GMember_Info::set_isonline(bool value) {
  set_has_isonline();
  isonline_ = value;
}

// optional uint32 vip_level = 11;
inline bool GxDB_GMember_Info::has_vip_level() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GxDB_GMember_Info::set_has_vip_level() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GxDB_GMember_Info::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GxDB_GMember_Info::clear_vip_level() {
  vip_level_ = 0u;
  clear_has_vip_level();
}
inline ::google::protobuf::uint32 GxDB_GMember_Info::vip_level() const {
  return vip_level_;
}
inline void GxDB_GMember_Info::set_vip_level(::google::protobuf::uint32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// optional bool request_flag = 12;
inline bool GxDB_GMember_Info::has_request_flag() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GxDB_GMember_Info::set_has_request_flag() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GxDB_GMember_Info::clear_has_request_flag() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GxDB_GMember_Info::clear_request_flag() {
  request_flag_ = false;
  clear_has_request_flag();
}
inline bool GxDB_GMember_Info::request_flag() const {
  return request_flag_;
}
inline void GxDB_GMember_Info::set_request_flag(bool value) {
  set_has_request_flag();
  request_flag_ = value;
}

// optional bool invite_flag = 13;
inline bool GxDB_GMember_Info::has_invite_flag() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GxDB_GMember_Info::set_has_invite_flag() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GxDB_GMember_Info::clear_has_invite_flag() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GxDB_GMember_Info::clear_invite_flag() {
  invite_flag_ = false;
  clear_has_invite_flag();
}
inline bool GxDB_GMember_Info::invite_flag() const {
  return invite_flag_;
}
inline void GxDB_GMember_Info::set_invite_flag(bool value) {
  set_has_invite_flag();
  invite_flag_ = value;
}

// optional uint64 request_expire_time = 14;
inline bool GxDB_GMember_Info::has_request_expire_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GxDB_GMember_Info::set_has_request_expire_time() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GxDB_GMember_Info::clear_has_request_expire_time() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GxDB_GMember_Info::clear_request_expire_time() {
  request_expire_time_ = GOOGLE_ULONGLONG(0);
  clear_has_request_expire_time();
}
inline ::google::protobuf::uint64 GxDB_GMember_Info::request_expire_time() const {
  return request_expire_time_;
}
inline void GxDB_GMember_Info::set_request_expire_time(::google::protobuf::uint64 value) {
  set_has_request_expire_time();
  request_expire_time_ = value;
}

// optional uint32 power = 15;
inline bool GxDB_GMember_Info::has_power() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GxDB_GMember_Info::set_has_power() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GxDB_GMember_Info::clear_has_power() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GxDB_GMember_Info::clear_power() {
  power_ = 0u;
  clear_has_power();
}
inline ::google::protobuf::uint32 GxDB_GMember_Info::power() const {
  return power_;
}
inline void GxDB_GMember_Info::set_power(::google::protobuf::uint32 value) {
  set_has_power();
  power_ = value;
}

// optional uint32 head_icon = 16;
inline bool GxDB_GMember_Info::has_head_icon() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GxDB_GMember_Info::set_has_head_icon() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GxDB_GMember_Info::clear_has_head_icon() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GxDB_GMember_Info::clear_head_icon() {
  head_icon_ = 0u;
  clear_has_head_icon();
}
inline ::google::protobuf::uint32 GxDB_GMember_Info::head_icon() const {
  return head_icon_;
}
inline void GxDB_GMember_Info::set_head_icon(::google::protobuf::uint32 value) {
  set_has_head_icon();
  head_icon_ = value;
}

// repeated uint64 is_send_ap = 17;
inline int GxDB_GMember_Info::is_send_ap_size() const {
  return is_send_ap_.size();
}
inline void GxDB_GMember_Info::clear_is_send_ap() {
  is_send_ap_.Clear();
}
inline ::google::protobuf::uint64 GxDB_GMember_Info::is_send_ap(int index) const {
  return is_send_ap_.Get(index);
}
inline void GxDB_GMember_Info::set_is_send_ap(int index, ::google::protobuf::uint64 value) {
  is_send_ap_.Set(index, value);
}
inline void GxDB_GMember_Info::add_is_send_ap(::google::protobuf::uint64 value) {
  is_send_ap_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
GxDB_GMember_Info::is_send_ap() const {
  return is_send_ap_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
GxDB_GMember_Info::mutable_is_send_ap() {
  return &is_send_ap_;
}

// repeated uint64 is_receive_ap = 18;
inline int GxDB_GMember_Info::is_receive_ap_size() const {
  return is_receive_ap_.size();
}
inline void GxDB_GMember_Info::clear_is_receive_ap() {
  is_receive_ap_.Clear();
}
inline ::google::protobuf::uint64 GxDB_GMember_Info::is_receive_ap(int index) const {
  return is_receive_ap_.Get(index);
}
inline void GxDB_GMember_Info::set_is_receive_ap(int index, ::google::protobuf::uint64 value) {
  is_receive_ap_.Set(index, value);
}
inline void GxDB_GMember_Info::add_is_receive_ap(::google::protobuf::uint64 value) {
  is_receive_ap_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
GxDB_GMember_Info::is_receive_ap() const {
  return is_receive_ap_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
GxDB_GMember_Info::mutable_is_receive_ap() {
  return &is_receive_ap_;
}

// -------------------------------------------------------------------

// GxDB_Guild_Member

// repeated .pb.GxDB_GMember_Info memberinfo = 1;
inline int GxDB_Guild_Member::memberinfo_size() const {
  return memberinfo_.size();
}
inline void GxDB_Guild_Member::clear_memberinfo() {
  memberinfo_.Clear();
}
inline const ::pb::GxDB_GMember_Info& GxDB_Guild_Member::memberinfo(int index) const {
  return memberinfo_.Get(index);
}
inline ::pb::GxDB_GMember_Info* GxDB_Guild_Member::mutable_memberinfo(int index) {
  return memberinfo_.Mutable(index);
}
inline ::pb::GxDB_GMember_Info* GxDB_Guild_Member::add_memberinfo() {
  return memberinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GxDB_GMember_Info >&
GxDB_Guild_Member::memberinfo() const {
  return memberinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GxDB_GMember_Info >*
GxDB_Guild_Member::mutable_memberinfo() {
  return &memberinfo_;
}

// -------------------------------------------------------------------

// GxDB_Guild

// optional uint64 guild_id = 1;
inline bool GxDB_Guild::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GxDB_Guild::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GxDB_Guild::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GxDB_Guild::clear_guild_id() {
  guild_id_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_id();
}
inline ::google::protobuf::uint64 GxDB_Guild::guild_id() const {
  return guild_id_;
}
inline void GxDB_Guild::set_guild_id(::google::protobuf::uint64 value) {
  set_has_guild_id();
  guild_id_ = value;
}

// optional .pb.GxDB_GuildInfo guild_info = 2;
inline bool GxDB_Guild::has_guild_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GxDB_Guild::set_has_guild_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GxDB_Guild::clear_has_guild_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GxDB_Guild::clear_guild_info() {
  if (guild_info_ != NULL) guild_info_->::pb::GxDB_GuildInfo::Clear();
  clear_has_guild_info();
}
inline const ::pb::GxDB_GuildInfo& GxDB_Guild::guild_info() const {
  return guild_info_ != NULL ? *guild_info_ : *default_instance_->guild_info_;
}
inline ::pb::GxDB_GuildInfo* GxDB_Guild::mutable_guild_info() {
  set_has_guild_info();
  if (guild_info_ == NULL) guild_info_ = new ::pb::GxDB_GuildInfo;
  return guild_info_;
}
inline ::pb::GxDB_GuildInfo* GxDB_Guild::release_guild_info() {
  clear_has_guild_info();
  ::pb::GxDB_GuildInfo* temp = guild_info_;
  guild_info_ = NULL;
  return temp;
}
inline void GxDB_Guild::set_allocated_guild_info(::pb::GxDB_GuildInfo* guild_info) {
  delete guild_info_;
  guild_info_ = guild_info;
  if (guild_info) {
    set_has_guild_info();
  } else {
    clear_has_guild_info();
  }
}

// optional .pb.GxDB_Guild_Member members_info = 3;
inline bool GxDB_Guild::has_members_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GxDB_Guild::set_has_members_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GxDB_Guild::clear_has_members_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GxDB_Guild::clear_members_info() {
  if (members_info_ != NULL) members_info_->::pb::GxDB_Guild_Member::Clear();
  clear_has_members_info();
}
inline const ::pb::GxDB_Guild_Member& GxDB_Guild::members_info() const {
  return members_info_ != NULL ? *members_info_ : *default_instance_->members_info_;
}
inline ::pb::GxDB_Guild_Member* GxDB_Guild::mutable_members_info() {
  set_has_members_info();
  if (members_info_ == NULL) members_info_ = new ::pb::GxDB_Guild_Member;
  return members_info_;
}
inline ::pb::GxDB_Guild_Member* GxDB_Guild::release_members_info() {
  clear_has_members_info();
  ::pb::GxDB_Guild_Member* temp = members_info_;
  members_info_ = NULL;
  return temp;
}
inline void GxDB_Guild::set_allocated_members_info(::pb::GxDB_Guild_Member* members_info) {
  delete members_info_;
  members_info_ = members_info;
  if (members_info) {
    set_has_members_info();
  } else {
    clear_has_members_info();
  }
}

// optional .pb.GxDB_Guild_Member request_list = 4;
inline bool GxDB_Guild::has_request_list() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GxDB_Guild::set_has_request_list() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GxDB_Guild::clear_has_request_list() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GxDB_Guild::clear_request_list() {
  if (request_list_ != NULL) request_list_->::pb::GxDB_Guild_Member::Clear();
  clear_has_request_list();
}
inline const ::pb::GxDB_Guild_Member& GxDB_Guild::request_list() const {
  return request_list_ != NULL ? *request_list_ : *default_instance_->request_list_;
}
inline ::pb::GxDB_Guild_Member* GxDB_Guild::mutable_request_list() {
  set_has_request_list();
  if (request_list_ == NULL) request_list_ = new ::pb::GxDB_Guild_Member;
  return request_list_;
}
inline ::pb::GxDB_Guild_Member* GxDB_Guild::release_request_list() {
  clear_has_request_list();
  ::pb::GxDB_Guild_Member* temp = request_list_;
  request_list_ = NULL;
  return temp;
}
inline void GxDB_Guild::set_allocated_request_list(::pb::GxDB_Guild_Member* request_list) {
  delete request_list_;
  request_list_ = request_list;
  if (request_list) {
    set_has_request_list();
  } else {
    clear_has_request_list();
  }
}

// -------------------------------------------------------------------

// GxDB_Guilds

// repeated .pb.GxDB_Guild guildinfos = 1;
inline int GxDB_Guilds::guildinfos_size() const {
  return guildinfos_.size();
}
inline void GxDB_Guilds::clear_guildinfos() {
  guildinfos_.Clear();
}
inline const ::pb::GxDB_Guild& GxDB_Guilds::guildinfos(int index) const {
  return guildinfos_.Get(index);
}
inline ::pb::GxDB_Guild* GxDB_Guilds::mutable_guildinfos(int index) {
  return guildinfos_.Mutable(index);
}
inline ::pb::GxDB_Guild* GxDB_Guilds::add_guildinfos() {
  return guildinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GxDB_Guild >&
GxDB_Guilds::guildinfos() const {
  return guildinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GxDB_Guild >*
GxDB_Guilds::mutable_guildinfos() {
  return &guildinfos_;
}

// -------------------------------------------------------------------

// C2GS_Guild_Leaderboard_Search

// optional string key = 1;
inline bool C2GS_Guild_Leaderboard_Search::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Guild_Leaderboard_Search::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Guild_Leaderboard_Search::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Guild_Leaderboard_Search::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& C2GS_Guild_Leaderboard_Search::key() const {
  return *key_;
}
inline void C2GS_Guild_Leaderboard_Search::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void C2GS_Guild_Leaderboard_Search::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void C2GS_Guild_Leaderboard_Search::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2GS_Guild_Leaderboard_Search::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* C2GS_Guild_Leaderboard_Search::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2GS_Guild_Leaderboard_Search::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 key_id = 2;
inline bool C2GS_Guild_Leaderboard_Search::has_key_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_Guild_Leaderboard_Search::set_has_key_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_Guild_Leaderboard_Search::clear_has_key_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_Guild_Leaderboard_Search::clear_key_id() {
  key_id_ = 0u;
  clear_has_key_id();
}
inline ::google::protobuf::uint32 C2GS_Guild_Leaderboard_Search::key_id() const {
  return key_id_;
}
inline void C2GS_Guild_Leaderboard_Search::set_key_id(::google::protobuf::uint32 value) {
  set_has_key_id();
  key_id_ = value;
}

// required uint64 your_guid = 3;
inline bool C2GS_Guild_Leaderboard_Search::has_your_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2GS_Guild_Leaderboard_Search::set_has_your_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2GS_Guild_Leaderboard_Search::clear_has_your_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2GS_Guild_Leaderboard_Search::clear_your_guid() {
  your_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_your_guid();
}
inline ::google::protobuf::uint64 C2GS_Guild_Leaderboard_Search::your_guid() const {
  return your_guid_;
}
inline void C2GS_Guild_Leaderboard_Search::set_your_guid(::google::protobuf::uint64 value) {
  set_has_your_guid();
  your_guid_ = value;
}

// required bool is_leaderboard = 4 [default = true];
inline bool C2GS_Guild_Leaderboard_Search::has_is_leaderboard() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void C2GS_Guild_Leaderboard_Search::set_has_is_leaderboard() {
  _has_bits_[0] |= 0x00000008u;
}
inline void C2GS_Guild_Leaderboard_Search::clear_has_is_leaderboard() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void C2GS_Guild_Leaderboard_Search::clear_is_leaderboard() {
  is_leaderboard_ = true;
  clear_has_is_leaderboard();
}
inline bool C2GS_Guild_Leaderboard_Search::is_leaderboard() const {
  return is_leaderboard_;
}
inline void C2GS_Guild_Leaderboard_Search::set_is_leaderboard(bool value) {
  set_has_is_leaderboard();
  is_leaderboard_ = value;
}

// optional bool is_by_name = 5;
inline bool C2GS_Guild_Leaderboard_Search::has_is_by_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void C2GS_Guild_Leaderboard_Search::set_has_is_by_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void C2GS_Guild_Leaderboard_Search::clear_has_is_by_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void C2GS_Guild_Leaderboard_Search::clear_is_by_name() {
  is_by_name_ = false;
  clear_has_is_by_name();
}
inline bool C2GS_Guild_Leaderboard_Search::is_by_name() const {
  return is_by_name_;
}
inline void C2GS_Guild_Leaderboard_Search::set_is_by_name(bool value) {
  set_has_is_by_name();
  is_by_name_ = value;
}

// -------------------------------------------------------------------

// GS2C_Guild_Leaderboard_Search

// repeated .pb.GxDB_GuildInfo guild_infos = 1;
inline int GS2C_Guild_Leaderboard_Search::guild_infos_size() const {
  return guild_infos_.size();
}
inline void GS2C_Guild_Leaderboard_Search::clear_guild_infos() {
  guild_infos_.Clear();
}
inline const ::pb::GxDB_GuildInfo& GS2C_Guild_Leaderboard_Search::guild_infos(int index) const {
  return guild_infos_.Get(index);
}
inline ::pb::GxDB_GuildInfo* GS2C_Guild_Leaderboard_Search::mutable_guild_infos(int index) {
  return guild_infos_.Mutable(index);
}
inline ::pb::GxDB_GuildInfo* GS2C_Guild_Leaderboard_Search::add_guild_infos() {
  return guild_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GxDB_GuildInfo >&
GS2C_Guild_Leaderboard_Search::guild_infos() const {
  return guild_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GxDB_GuildInfo >*
GS2C_Guild_Leaderboard_Search::mutable_guild_infos() {
  return &guild_infos_;
}

// optional bool is_leaderboard = 2 [default = true];
inline bool GS2C_Guild_Leaderboard_Search::has_is_leaderboard() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Guild_Leaderboard_Search::set_has_is_leaderboard() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Guild_Leaderboard_Search::clear_has_is_leaderboard() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Guild_Leaderboard_Search::clear_is_leaderboard() {
  is_leaderboard_ = true;
  clear_has_is_leaderboard();
}
inline bool GS2C_Guild_Leaderboard_Search::is_leaderboard() const {
  return is_leaderboard_;
}
inline void GS2C_Guild_Leaderboard_Search::set_is_leaderboard(bool value) {
  set_has_is_leaderboard();
  is_leaderboard_ = value;
}

// -------------------------------------------------------------------

// C2GS_Guild_Player_Search

// required bool is_member = 1 [default = true];
inline bool C2GS_Guild_Player_Search::has_is_member() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Guild_Player_Search::set_has_is_member() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Guild_Player_Search::clear_has_is_member() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Guild_Player_Search::clear_is_member() {
  is_member_ = true;
  clear_has_is_member();
}
inline bool C2GS_Guild_Player_Search::is_member() const {
  return is_member_;
}
inline void C2GS_Guild_Player_Search::set_is_member(bool value) {
  set_has_is_member();
  is_member_ = value;
}

// optional string search_name = 2;
inline bool C2GS_Guild_Player_Search::has_search_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_Guild_Player_Search::set_has_search_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_Guild_Player_Search::clear_has_search_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_Guild_Player_Search::clear_search_name() {
  if (search_name_ != &::google::protobuf::internal::kEmptyString) {
    search_name_->clear();
  }
  clear_has_search_name();
}
inline const ::std::string& C2GS_Guild_Player_Search::search_name() const {
  return *search_name_;
}
inline void C2GS_Guild_Player_Search::set_search_name(const ::std::string& value) {
  set_has_search_name();
  if (search_name_ == &::google::protobuf::internal::kEmptyString) {
    search_name_ = new ::std::string;
  }
  search_name_->assign(value);
}
inline void C2GS_Guild_Player_Search::set_search_name(const char* value) {
  set_has_search_name();
  if (search_name_ == &::google::protobuf::internal::kEmptyString) {
    search_name_ = new ::std::string;
  }
  search_name_->assign(value);
}
inline void C2GS_Guild_Player_Search::set_search_name(const char* value, size_t size) {
  set_has_search_name();
  if (search_name_ == &::google::protobuf::internal::kEmptyString) {
    search_name_ = new ::std::string;
  }
  search_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2GS_Guild_Player_Search::mutable_search_name() {
  set_has_search_name();
  if (search_name_ == &::google::protobuf::internal::kEmptyString) {
    search_name_ = new ::std::string;
  }
  return search_name_;
}
inline ::std::string* C2GS_Guild_Player_Search::release_search_name() {
  clear_has_search_name();
  if (search_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = search_name_;
    search_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2GS_Guild_Player_Search::set_allocated_search_name(::std::string* search_name) {
  if (search_name_ != &::google::protobuf::internal::kEmptyString) {
    delete search_name_;
  }
  if (search_name) {
    set_has_search_name();
    search_name_ = search_name;
  } else {
    clear_has_search_name();
    search_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 your_guid = 3;
inline bool C2GS_Guild_Player_Search::has_your_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2GS_Guild_Player_Search::set_has_your_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2GS_Guild_Player_Search::clear_has_your_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2GS_Guild_Player_Search::clear_your_guid() {
  your_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_your_guid();
}
inline ::google::protobuf::uint64 C2GS_Guild_Player_Search::your_guid() const {
  return your_guid_;
}
inline void C2GS_Guild_Player_Search::set_your_guid(::google::protobuf::uint64 value) {
  set_has_your_guid();
  your_guid_ = value;
}

// required uint32 max_count = 4;
inline bool C2GS_Guild_Player_Search::has_max_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void C2GS_Guild_Player_Search::set_has_max_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void C2GS_Guild_Player_Search::clear_has_max_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void C2GS_Guild_Player_Search::clear_max_count() {
  max_count_ = 0u;
  clear_has_max_count();
}
inline ::google::protobuf::uint32 C2GS_Guild_Player_Search::max_count() const {
  return max_count_;
}
inline void C2GS_Guild_Player_Search::set_max_count(::google::protobuf::uint32 value) {
  set_has_max_count();
  max_count_ = value;
}

// required uint64 guild_id = 5;
inline bool C2GS_Guild_Player_Search::has_guild_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void C2GS_Guild_Player_Search::set_has_guild_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void C2GS_Guild_Player_Search::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void C2GS_Guild_Player_Search::clear_guild_id() {
  guild_id_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_id();
}
inline ::google::protobuf::uint64 C2GS_Guild_Player_Search::guild_id() const {
  return guild_id_;
}
inline void C2GS_Guild_Player_Search::set_guild_id(::google::protobuf::uint64 value) {
  set_has_guild_id();
  guild_id_ = value;
}

// -------------------------------------------------------------------

// GS2C_Guild_Player_Search_Respone

// optional uint32 search_result = 1;
inline bool GS2C_Guild_Player_Search_Respone::has_search_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Guild_Player_Search_Respone::set_has_search_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Guild_Player_Search_Respone::clear_has_search_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Guild_Player_Search_Respone::clear_search_result() {
  search_result_ = 0u;
  clear_has_search_result();
}
inline ::google::protobuf::uint32 GS2C_Guild_Player_Search_Respone::search_result() const {
  return search_result_;
}
inline void GS2C_Guild_Player_Search_Respone::set_search_result(::google::protobuf::uint32 value) {
  set_has_search_result();
  search_result_ = value;
}

// repeated .pb.GxDB_GMember_Info memberinfos = 2;
inline int GS2C_Guild_Player_Search_Respone::memberinfos_size() const {
  return memberinfos_.size();
}
inline void GS2C_Guild_Player_Search_Respone::clear_memberinfos() {
  memberinfos_.Clear();
}
inline const ::pb::GxDB_GMember_Info& GS2C_Guild_Player_Search_Respone::memberinfos(int index) const {
  return memberinfos_.Get(index);
}
inline ::pb::GxDB_GMember_Info* GS2C_Guild_Player_Search_Respone::mutable_memberinfos(int index) {
  return memberinfos_.Mutable(index);
}
inline ::pb::GxDB_GMember_Info* GS2C_Guild_Player_Search_Respone::add_memberinfos() {
  return memberinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GxDB_GMember_Info >&
GS2C_Guild_Player_Search_Respone::memberinfos() const {
  return memberinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GxDB_GMember_Info >*
GS2C_Guild_Player_Search_Respone::mutable_memberinfos() {
  return &memberinfos_;
}

// required bool is_member = 3 [default = true];
inline bool GS2C_Guild_Player_Search_Respone::has_is_member() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Guild_Player_Search_Respone::set_has_is_member() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Guild_Player_Search_Respone::clear_has_is_member() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Guild_Player_Search_Respone::clear_is_member() {
  is_member_ = true;
  clear_has_is_member();
}
inline bool GS2C_Guild_Player_Search_Respone::is_member() const {
  return is_member_;
}
inline void GS2C_Guild_Player_Search_Respone::set_is_member(bool value) {
  set_has_is_member();
  is_member_ = value;
}

// required uint64 your_guid = 4;
inline bool GS2C_Guild_Player_Search_Respone::has_your_guid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Guild_Player_Search_Respone::set_has_your_guid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Guild_Player_Search_Respone::clear_has_your_guid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Guild_Player_Search_Respone::clear_your_guid() {
  your_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_your_guid();
}
inline ::google::protobuf::uint64 GS2C_Guild_Player_Search_Respone::your_guid() const {
  return your_guid_;
}
inline void GS2C_Guild_Player_Search_Respone::set_your_guid(::google::protobuf::uint64 value) {
  set_has_your_guid();
  your_guid_ = value;
}

// -------------------------------------------------------------------

// C2GS_Guild_Add

// required string guild_name = 1;
inline bool C2GS_Guild_Add::has_guild_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Guild_Add::set_has_guild_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Guild_Add::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Guild_Add::clear_guild_name() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    guild_name_->clear();
  }
  clear_has_guild_name();
}
inline const ::std::string& C2GS_Guild_Add::guild_name() const {
  return *guild_name_;
}
inline void C2GS_Guild_Add::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void C2GS_Guild_Add::set_guild_name(const char* value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void C2GS_Guild_Add::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2GS_Guild_Add::mutable_guild_name() {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  return guild_name_;
}
inline ::std::string* C2GS_Guild_Add::release_guild_name() {
  clear_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guild_name_;
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2GS_Guild_Add::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (guild_name) {
    set_has_guild_name();
    guild_name_ = guild_name;
  } else {
    clear_has_guild_name();
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string notice = 2;
inline bool C2GS_Guild_Add::has_notice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_Guild_Add::set_has_notice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_Guild_Add::clear_has_notice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_Guild_Add::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& C2GS_Guild_Add::notice() const {
  return *notice_;
}
inline void C2GS_Guild_Add::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void C2GS_Guild_Add::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void C2GS_Guild_Add::set_notice(const char* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2GS_Guild_Add::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* C2GS_Guild_Add::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2GS_Guild_Add::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 icon = 3;
inline bool C2GS_Guild_Add::has_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2GS_Guild_Add::set_has_icon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2GS_Guild_Add::clear_has_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2GS_Guild_Add::clear_icon() {
  icon_ = 0u;
  clear_has_icon();
}
inline ::google::protobuf::uint32 C2GS_Guild_Add::icon() const {
  return icon_;
}
inline void C2GS_Guild_Add::set_icon(::google::protobuf::uint32 value) {
  set_has_icon();
  icon_ = value;
}

// required uint64 your_guid = 4;
inline bool C2GS_Guild_Add::has_your_guid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void C2GS_Guild_Add::set_has_your_guid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void C2GS_Guild_Add::clear_has_your_guid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void C2GS_Guild_Add::clear_your_guid() {
  your_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_your_guid();
}
inline ::google::protobuf::uint64 C2GS_Guild_Add::your_guid() const {
  return your_guid_;
}
inline void C2GS_Guild_Add::set_your_guid(::google::protobuf::uint64 value) {
  set_has_your_guid();
  your_guid_ = value;
}

// -------------------------------------------------------------------

// GS2C_Guild_Add_Respon

// required int32 add_result = 1;
inline bool GS2C_Guild_Add_Respon::has_add_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Guild_Add_Respon::set_has_add_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Guild_Add_Respon::clear_has_add_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Guild_Add_Respon::clear_add_result() {
  add_result_ = 0;
  clear_has_add_result();
}
inline ::google::protobuf::int32 GS2C_Guild_Add_Respon::add_result() const {
  return add_result_;
}
inline void GS2C_Guild_Add_Respon::set_add_result(::google::protobuf::int32 value) {
  set_has_add_result();
  add_result_ = value;
}

// optional .pb.GxDB_Guild guild = 2;
inline bool GS2C_Guild_Add_Respon::has_guild() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Guild_Add_Respon::set_has_guild() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Guild_Add_Respon::clear_has_guild() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Guild_Add_Respon::clear_guild() {
  if (guild_ != NULL) guild_->::pb::GxDB_Guild::Clear();
  clear_has_guild();
}
inline const ::pb::GxDB_Guild& GS2C_Guild_Add_Respon::guild() const {
  return guild_ != NULL ? *guild_ : *default_instance_->guild_;
}
inline ::pb::GxDB_Guild* GS2C_Guild_Add_Respon::mutable_guild() {
  set_has_guild();
  if (guild_ == NULL) guild_ = new ::pb::GxDB_Guild;
  return guild_;
}
inline ::pb::GxDB_Guild* GS2C_Guild_Add_Respon::release_guild() {
  clear_has_guild();
  ::pb::GxDB_Guild* temp = guild_;
  guild_ = NULL;
  return temp;
}
inline void GS2C_Guild_Add_Respon::set_allocated_guild(::pb::GxDB_Guild* guild) {
  delete guild_;
  guild_ = guild;
  if (guild) {
    set_has_guild();
  } else {
    clear_has_guild();
  }
}

// -------------------------------------------------------------------

// GS2C_Guild_Change

// required uint64 playerId = 1;
inline bool GS2C_Guild_Change::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Guild_Change::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Guild_Change::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Guild_Change::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::uint64 GS2C_Guild_Change::playerid() const {
  return playerid_;
}
inline void GS2C_Guild_Change::set_playerid(::google::protobuf::uint64 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string name = 2;
inline bool GS2C_Guild_Change::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Guild_Change::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Guild_Change::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Guild_Change::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GS2C_Guild_Change::name() const {
  return *name_;
}
inline void GS2C_Guild_Change::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GS2C_Guild_Change::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GS2C_Guild_Change::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GS2C_Guild_Change::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GS2C_Guild_Change::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GS2C_Guild_Change::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GS2C_Get_Guild_Info_Respon

// required bool isGet = 1;
inline bool GS2C_Get_Guild_Info_Respon::has_isget() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Get_Guild_Info_Respon::set_has_isget() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Get_Guild_Info_Respon::clear_has_isget() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Get_Guild_Info_Respon::clear_isget() {
  isget_ = false;
  clear_has_isget();
}
inline bool GS2C_Get_Guild_Info_Respon::isget() const {
  return isget_;
}
inline void GS2C_Get_Guild_Info_Respon::set_isget(bool value) {
  set_has_isget();
  isget_ = value;
}

// optional .pb.GxDB_Guild guild = 2;
inline bool GS2C_Get_Guild_Info_Respon::has_guild() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Get_Guild_Info_Respon::set_has_guild() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Get_Guild_Info_Respon::clear_has_guild() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Get_Guild_Info_Respon::clear_guild() {
  if (guild_ != NULL) guild_->::pb::GxDB_Guild::Clear();
  clear_has_guild();
}
inline const ::pb::GxDB_Guild& GS2C_Get_Guild_Info_Respon::guild() const {
  return guild_ != NULL ? *guild_ : *default_instance_->guild_;
}
inline ::pb::GxDB_Guild* GS2C_Get_Guild_Info_Respon::mutable_guild() {
  set_has_guild();
  if (guild_ == NULL) guild_ = new ::pb::GxDB_Guild;
  return guild_;
}
inline ::pb::GxDB_Guild* GS2C_Get_Guild_Info_Respon::release_guild() {
  clear_has_guild();
  ::pb::GxDB_Guild* temp = guild_;
  guild_ = NULL;
  return temp;
}
inline void GS2C_Get_Guild_Info_Respon::set_allocated_guild(::pb::GxDB_Guild* guild) {
  delete guild_;
  guild_ = guild;
  if (guild) {
    set_has_guild();
  } else {
    clear_has_guild();
  }
}

// -------------------------------------------------------------------

// C2GS_GuildInvite

// optional bool is_by_guid = 1 [default = true];
inline bool C2GS_GuildInvite::has_is_by_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_GuildInvite::set_has_is_by_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_GuildInvite::clear_has_is_by_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_GuildInvite::clear_is_by_guid() {
  is_by_guid_ = true;
  clear_has_is_by_guid();
}
inline bool C2GS_GuildInvite::is_by_guid() const {
  return is_by_guid_;
}
inline void C2GS_GuildInvite::set_is_by_guid(bool value) {
  set_has_is_by_guid();
  is_by_guid_ = value;
}

// optional bool is_by_guild = 2 [default = false];
inline bool C2GS_GuildInvite::has_is_by_guild() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_GuildInvite::set_has_is_by_guild() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_GuildInvite::clear_has_is_by_guild() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_GuildInvite::clear_is_by_guild() {
  is_by_guild_ = false;
  clear_has_is_by_guild();
}
inline bool C2GS_GuildInvite::is_by_guild() const {
  return is_by_guild_;
}
inline void C2GS_GuildInvite::set_is_by_guild(bool value) {
  set_has_is_by_guild();
  is_by_guild_ = value;
}

// optional string invitee_name = 3;
inline bool C2GS_GuildInvite::has_invitee_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2GS_GuildInvite::set_has_invitee_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2GS_GuildInvite::clear_has_invitee_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2GS_GuildInvite::clear_invitee_name() {
  if (invitee_name_ != &::google::protobuf::internal::kEmptyString) {
    invitee_name_->clear();
  }
  clear_has_invitee_name();
}
inline const ::std::string& C2GS_GuildInvite::invitee_name() const {
  return *invitee_name_;
}
inline void C2GS_GuildInvite::set_invitee_name(const ::std::string& value) {
  set_has_invitee_name();
  if (invitee_name_ == &::google::protobuf::internal::kEmptyString) {
    invitee_name_ = new ::std::string;
  }
  invitee_name_->assign(value);
}
inline void C2GS_GuildInvite::set_invitee_name(const char* value) {
  set_has_invitee_name();
  if (invitee_name_ == &::google::protobuf::internal::kEmptyString) {
    invitee_name_ = new ::std::string;
  }
  invitee_name_->assign(value);
}
inline void C2GS_GuildInvite::set_invitee_name(const char* value, size_t size) {
  set_has_invitee_name();
  if (invitee_name_ == &::google::protobuf::internal::kEmptyString) {
    invitee_name_ = new ::std::string;
  }
  invitee_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2GS_GuildInvite::mutable_invitee_name() {
  set_has_invitee_name();
  if (invitee_name_ == &::google::protobuf::internal::kEmptyString) {
    invitee_name_ = new ::std::string;
  }
  return invitee_name_;
}
inline ::std::string* C2GS_GuildInvite::release_invitee_name() {
  clear_has_invitee_name();
  if (invitee_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = invitee_name_;
    invitee_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2GS_GuildInvite::set_allocated_invitee_name(::std::string* invitee_name) {
  if (invitee_name_ != &::google::protobuf::internal::kEmptyString) {
    delete invitee_name_;
  }
  if (invitee_name) {
    set_has_invitee_name();
    invitee_name_ = invitee_name;
  } else {
    clear_has_invitee_name();
    invitee_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 invitee_guid = 4;
inline bool C2GS_GuildInvite::has_invitee_guid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void C2GS_GuildInvite::set_has_invitee_guid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void C2GS_GuildInvite::clear_has_invitee_guid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void C2GS_GuildInvite::clear_invitee_guid() {
  invitee_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_invitee_guid();
}
inline ::google::protobuf::uint64 C2GS_GuildInvite::invitee_guid() const {
  return invitee_guid_;
}
inline void C2GS_GuildInvite::set_invitee_guid(::google::protobuf::uint64 value) {
  set_has_invitee_guid();
  invitee_guid_ = value;
}

// required uint64 your_guid = 5;
inline bool C2GS_GuildInvite::has_your_guid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void C2GS_GuildInvite::set_has_your_guid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void C2GS_GuildInvite::clear_has_your_guid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void C2GS_GuildInvite::clear_your_guid() {
  your_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_your_guid();
}
inline ::google::protobuf::uint64 C2GS_GuildInvite::your_guid() const {
  return your_guid_;
}
inline void C2GS_GuildInvite::set_your_guid(::google::protobuf::uint64 value) {
  set_has_your_guid();
  your_guid_ = value;
}

// -------------------------------------------------------------------

// GS2C_GuildInvite

// required uint64 inviter_guid = 1;
inline bool GS2C_GuildInvite::has_inviter_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_GuildInvite::set_has_inviter_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_GuildInvite::clear_has_inviter_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_GuildInvite::clear_inviter_guid() {
  inviter_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_inviter_guid();
}
inline ::google::protobuf::uint64 GS2C_GuildInvite::inviter_guid() const {
  return inviter_guid_;
}
inline void GS2C_GuildInvite::set_inviter_guid(::google::protobuf::uint64 value) {
  set_has_inviter_guid();
  inviter_guid_ = value;
}

// required string inviter_name = 2;
inline bool GS2C_GuildInvite::has_inviter_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_GuildInvite::set_has_inviter_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_GuildInvite::clear_has_inviter_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_GuildInvite::clear_inviter_name() {
  if (inviter_name_ != &::google::protobuf::internal::kEmptyString) {
    inviter_name_->clear();
  }
  clear_has_inviter_name();
}
inline const ::std::string& GS2C_GuildInvite::inviter_name() const {
  return *inviter_name_;
}
inline void GS2C_GuildInvite::set_inviter_name(const ::std::string& value) {
  set_has_inviter_name();
  if (inviter_name_ == &::google::protobuf::internal::kEmptyString) {
    inviter_name_ = new ::std::string;
  }
  inviter_name_->assign(value);
}
inline void GS2C_GuildInvite::set_inviter_name(const char* value) {
  set_has_inviter_name();
  if (inviter_name_ == &::google::protobuf::internal::kEmptyString) {
    inviter_name_ = new ::std::string;
  }
  inviter_name_->assign(value);
}
inline void GS2C_GuildInvite::set_inviter_name(const char* value, size_t size) {
  set_has_inviter_name();
  if (inviter_name_ == &::google::protobuf::internal::kEmptyString) {
    inviter_name_ = new ::std::string;
  }
  inviter_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GS2C_GuildInvite::mutable_inviter_name() {
  set_has_inviter_name();
  if (inviter_name_ == &::google::protobuf::internal::kEmptyString) {
    inviter_name_ = new ::std::string;
  }
  return inviter_name_;
}
inline ::std::string* GS2C_GuildInvite::release_inviter_name() {
  clear_has_inviter_name();
  if (inviter_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = inviter_name_;
    inviter_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GS2C_GuildInvite::set_allocated_inviter_name(::std::string* inviter_name) {
  if (inviter_name_ != &::google::protobuf::internal::kEmptyString) {
    delete inviter_name_;
  }
  if (inviter_name) {
    set_has_inviter_name();
    inviter_name_ = inviter_name;
  } else {
    clear_has_inviter_name();
    inviter_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool is_invite = 3 [default = true];
inline bool GS2C_GuildInvite::has_is_invite() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_GuildInvite::set_has_is_invite() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_GuildInvite::clear_has_is_invite() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_GuildInvite::clear_is_invite() {
  is_invite_ = true;
  clear_has_is_invite();
}
inline bool GS2C_GuildInvite::is_invite() const {
  return is_invite_;
}
inline void GS2C_GuildInvite::set_is_invite(bool value) {
  set_has_is_invite();
  is_invite_ = value;
}

// optional string guild_name = 4;
inline bool GS2C_GuildInvite::has_guild_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_GuildInvite::set_has_guild_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_GuildInvite::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_GuildInvite::clear_guild_name() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    guild_name_->clear();
  }
  clear_has_guild_name();
}
inline const ::std::string& GS2C_GuildInvite::guild_name() const {
  return *guild_name_;
}
inline void GS2C_GuildInvite::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void GS2C_GuildInvite::set_guild_name(const char* value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void GS2C_GuildInvite::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GS2C_GuildInvite::mutable_guild_name() {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  return guild_name_;
}
inline ::std::string* GS2C_GuildInvite::release_guild_name() {
  clear_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guild_name_;
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GS2C_GuildInvite::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (guild_name) {
    set_has_guild_name();
    guild_name_ = guild_name;
  } else {
    clear_has_guild_name();
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 title = 5;
inline bool GS2C_GuildInvite::has_title() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GS2C_GuildInvite::set_has_title() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GS2C_GuildInvite::clear_has_title() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GS2C_GuildInvite::clear_title() {
  title_ = 0u;
  clear_has_title();
}
inline ::google::protobuf::uint32 GS2C_GuildInvite::title() const {
  return title_;
}
inline void GS2C_GuildInvite::set_title(::google::protobuf::uint32 value) {
  set_has_title();
  title_ = value;
}

// optional uint64 to_guid = 6;
inline bool GS2C_GuildInvite::has_to_guid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GS2C_GuildInvite::set_has_to_guid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GS2C_GuildInvite::clear_has_to_guid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GS2C_GuildInvite::clear_to_guid() {
  to_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_to_guid();
}
inline ::google::protobuf::uint64 GS2C_GuildInvite::to_guid() const {
  return to_guid_;
}
inline void GS2C_GuildInvite::set_to_guid(::google::protobuf::uint64 value) {
  set_has_to_guid();
  to_guid_ = value;
}

// -------------------------------------------------------------------

// C2GS_GuildInviteResponse

// required bool is_accept = 1;
inline bool C2GS_GuildInviteResponse::has_is_accept() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_GuildInviteResponse::set_has_is_accept() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_GuildInviteResponse::clear_has_is_accept() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_GuildInviteResponse::clear_is_accept() {
  is_accept_ = false;
  clear_has_is_accept();
}
inline bool C2GS_GuildInviteResponse::is_accept() const {
  return is_accept_;
}
inline void C2GS_GuildInviteResponse::set_is_accept(bool value) {
  set_has_is_accept();
  is_accept_ = value;
}

// required uint64 inviter_guid = 2;
inline bool C2GS_GuildInviteResponse::has_inviter_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_GuildInviteResponse::set_has_inviter_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_GuildInviteResponse::clear_has_inviter_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_GuildInviteResponse::clear_inviter_guid() {
  inviter_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_inviter_guid();
}
inline ::google::protobuf::uint64 C2GS_GuildInviteResponse::inviter_guid() const {
  return inviter_guid_;
}
inline void C2GS_GuildInviteResponse::set_inviter_guid(::google::protobuf::uint64 value) {
  set_has_inviter_guid();
  inviter_guid_ = value;
}

// required uint64 your_guid = 3;
inline bool C2GS_GuildInviteResponse::has_your_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2GS_GuildInviteResponse::set_has_your_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2GS_GuildInviteResponse::clear_has_your_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2GS_GuildInviteResponse::clear_your_guid() {
  your_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_your_guid();
}
inline ::google::protobuf::uint64 C2GS_GuildInviteResponse::your_guid() const {
  return your_guid_;
}
inline void C2GS_GuildInviteResponse::set_your_guid(::google::protobuf::uint64 value) {
  set_has_your_guid();
  your_guid_ = value;
}

// -------------------------------------------------------------------

// GS2C_GuildInviteResponse

// required bool is_accept = 1;
inline bool GS2C_GuildInviteResponse::has_is_accept() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_GuildInviteResponse::set_has_is_accept() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_GuildInviteResponse::clear_has_is_accept() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_GuildInviteResponse::clear_is_accept() {
  is_accept_ = false;
  clear_has_is_accept();
}
inline bool GS2C_GuildInviteResponse::is_accept() const {
  return is_accept_;
}
inline void GS2C_GuildInviteResponse::set_is_accept(bool value) {
  set_has_is_accept();
  is_accept_ = value;
}

// repeated uint64 player_guids = 2;
inline int GS2C_GuildInviteResponse::player_guids_size() const {
  return player_guids_.size();
}
inline void GS2C_GuildInviteResponse::clear_player_guids() {
  player_guids_.Clear();
}
inline ::google::protobuf::uint64 GS2C_GuildInviteResponse::player_guids(int index) const {
  return player_guids_.Get(index);
}
inline void GS2C_GuildInviteResponse::set_player_guids(int index, ::google::protobuf::uint64 value) {
  player_guids_.Set(index, value);
}
inline void GS2C_GuildInviteResponse::add_player_guids(::google::protobuf::uint64 value) {
  player_guids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
GS2C_GuildInviteResponse::player_guids() const {
  return player_guids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
GS2C_GuildInviteResponse::mutable_player_guids() {
  return &player_guids_;
}

// optional int32 erro_code = 3;
inline bool GS2C_GuildInviteResponse::has_erro_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_GuildInviteResponse::set_has_erro_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_GuildInviteResponse::clear_has_erro_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_GuildInviteResponse::clear_erro_code() {
  erro_code_ = 0;
  clear_has_erro_code();
}
inline ::google::protobuf::int32 GS2C_GuildInviteResponse::erro_code() const {
  return erro_code_;
}
inline void GS2C_GuildInviteResponse::set_erro_code(::google::protobuf::int32 value) {
  set_has_erro_code();
  erro_code_ = value;
}

// -------------------------------------------------------------------

// C2GS_GuildInviterApproval

// required bool is_accept = 1;
inline bool C2GS_GuildInviterApproval::has_is_accept() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_GuildInviterApproval::set_has_is_accept() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_GuildInviterApproval::clear_has_is_accept() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_GuildInviterApproval::clear_is_accept() {
  is_accept_ = false;
  clear_has_is_accept();
}
inline bool C2GS_GuildInviterApproval::is_accept() const {
  return is_accept_;
}
inline void C2GS_GuildInviterApproval::set_is_accept(bool value) {
  set_has_is_accept();
  is_accept_ = value;
}

// required uint64 inviter_guid = 2;
inline bool C2GS_GuildInviterApproval::has_inviter_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_GuildInviterApproval::set_has_inviter_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_GuildInviterApproval::clear_has_inviter_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_GuildInviterApproval::clear_inviter_guid() {
  inviter_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_inviter_guid();
}
inline ::google::protobuf::uint64 C2GS_GuildInviterApproval::inviter_guid() const {
  return inviter_guid_;
}
inline void C2GS_GuildInviterApproval::set_inviter_guid(::google::protobuf::uint64 value) {
  set_has_inviter_guid();
  inviter_guid_ = value;
}

// required uint64 your_guid = 3;
inline bool C2GS_GuildInviterApproval::has_your_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2GS_GuildInviterApproval::set_has_your_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2GS_GuildInviterApproval::clear_has_your_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2GS_GuildInviterApproval::clear_your_guid() {
  your_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_your_guid();
}
inline ::google::protobuf::uint64 C2GS_GuildInviterApproval::your_guid() const {
  return your_guid_;
}
inline void C2GS_GuildInviterApproval::set_your_guid(::google::protobuf::uint64 value) {
  set_has_your_guid();
  your_guid_ = value;
}

// -------------------------------------------------------------------

// GS2C_GuildInviterApprovalResponse

// required bool is_accept = 1;
inline bool GS2C_GuildInviterApprovalResponse::has_is_accept() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_GuildInviterApprovalResponse::set_has_is_accept() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_GuildInviterApprovalResponse::clear_has_is_accept() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_GuildInviterApprovalResponse::clear_is_accept() {
  is_accept_ = false;
  clear_has_is_accept();
}
inline bool GS2C_GuildInviterApprovalResponse::is_accept() const {
  return is_accept_;
}
inline void GS2C_GuildInviterApprovalResponse::set_is_accept(bool value) {
  set_has_is_accept();
  is_accept_ = value;
}

// repeated uint64 player_guids = 2;
inline int GS2C_GuildInviterApprovalResponse::player_guids_size() const {
  return player_guids_.size();
}
inline void GS2C_GuildInviterApprovalResponse::clear_player_guids() {
  player_guids_.Clear();
}
inline ::google::protobuf::uint64 GS2C_GuildInviterApprovalResponse::player_guids(int index) const {
  return player_guids_.Get(index);
}
inline void GS2C_GuildInviterApprovalResponse::set_player_guids(int index, ::google::protobuf::uint64 value) {
  player_guids_.Set(index, value);
}
inline void GS2C_GuildInviterApprovalResponse::add_player_guids(::google::protobuf::uint64 value) {
  player_guids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
GS2C_GuildInviterApprovalResponse::player_guids() const {
  return player_guids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
GS2C_GuildInviterApprovalResponse::mutable_player_guids() {
  return &player_guids_;
}

// optional int32 erro_code = 3;
inline bool GS2C_GuildInviterApprovalResponse::has_erro_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_GuildInviterApprovalResponse::set_has_erro_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_GuildInviterApprovalResponse::clear_has_erro_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_GuildInviterApprovalResponse::clear_erro_code() {
  erro_code_ = 0;
  clear_has_erro_code();
}
inline ::google::protobuf::int32 GS2C_GuildInviterApprovalResponse::erro_code() const {
  return erro_code_;
}
inline void GS2C_GuildInviterApprovalResponse::set_erro_code(::google::protobuf::int32 value) {
  set_has_erro_code();
  erro_code_ = value;
}

// -------------------------------------------------------------------

// GS2C_GuildInvite_Repeat

// required uint64 cur_guild_guid = 1;
inline bool GS2C_GuildInvite_Repeat::has_cur_guild_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_GuildInvite_Repeat::set_has_cur_guild_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_GuildInvite_Repeat::clear_has_cur_guild_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_GuildInvite_Repeat::clear_cur_guild_guid() {
  cur_guild_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_cur_guild_guid();
}
inline ::google::protobuf::uint64 GS2C_GuildInvite_Repeat::cur_guild_guid() const {
  return cur_guild_guid_;
}
inline void GS2C_GuildInvite_Repeat::set_cur_guild_guid(::google::protobuf::uint64 value) {
  set_has_cur_guild_guid();
  cur_guild_guid_ = value;
}

// required string cur_guild_name = 2;
inline bool GS2C_GuildInvite_Repeat::has_cur_guild_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_GuildInvite_Repeat::set_has_cur_guild_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_GuildInvite_Repeat::clear_has_cur_guild_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_GuildInvite_Repeat::clear_cur_guild_name() {
  if (cur_guild_name_ != &::google::protobuf::internal::kEmptyString) {
    cur_guild_name_->clear();
  }
  clear_has_cur_guild_name();
}
inline const ::std::string& GS2C_GuildInvite_Repeat::cur_guild_name() const {
  return *cur_guild_name_;
}
inline void GS2C_GuildInvite_Repeat::set_cur_guild_name(const ::std::string& value) {
  set_has_cur_guild_name();
  if (cur_guild_name_ == &::google::protobuf::internal::kEmptyString) {
    cur_guild_name_ = new ::std::string;
  }
  cur_guild_name_->assign(value);
}
inline void GS2C_GuildInvite_Repeat::set_cur_guild_name(const char* value) {
  set_has_cur_guild_name();
  if (cur_guild_name_ == &::google::protobuf::internal::kEmptyString) {
    cur_guild_name_ = new ::std::string;
  }
  cur_guild_name_->assign(value);
}
inline void GS2C_GuildInvite_Repeat::set_cur_guild_name(const char* value, size_t size) {
  set_has_cur_guild_name();
  if (cur_guild_name_ == &::google::protobuf::internal::kEmptyString) {
    cur_guild_name_ = new ::std::string;
  }
  cur_guild_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GS2C_GuildInvite_Repeat::mutable_cur_guild_name() {
  set_has_cur_guild_name();
  if (cur_guild_name_ == &::google::protobuf::internal::kEmptyString) {
    cur_guild_name_ = new ::std::string;
  }
  return cur_guild_name_;
}
inline ::std::string* GS2C_GuildInvite_Repeat::release_cur_guild_name() {
  clear_has_cur_guild_name();
  if (cur_guild_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cur_guild_name_;
    cur_guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GS2C_GuildInvite_Repeat::set_allocated_cur_guild_name(::std::string* cur_guild_name) {
  if (cur_guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete cur_guild_name_;
  }
  if (cur_guild_name) {
    set_has_cur_guild_name();
    cur_guild_name_ = cur_guild_name;
  } else {
    clear_has_cur_guild_name();
    cur_guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 new_guild_guid = 3;
inline bool GS2C_GuildInvite_Repeat::has_new_guild_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_GuildInvite_Repeat::set_has_new_guild_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_GuildInvite_Repeat::clear_has_new_guild_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_GuildInvite_Repeat::clear_new_guild_guid() {
  new_guild_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_new_guild_guid();
}
inline ::google::protobuf::uint64 GS2C_GuildInvite_Repeat::new_guild_guid() const {
  return new_guild_guid_;
}
inline void GS2C_GuildInvite_Repeat::set_new_guild_guid(::google::protobuf::uint64 value) {
  set_has_new_guild_guid();
  new_guild_guid_ = value;
}

// required string new_guild_name = 4;
inline bool GS2C_GuildInvite_Repeat::has_new_guild_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_GuildInvite_Repeat::set_has_new_guild_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_GuildInvite_Repeat::clear_has_new_guild_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_GuildInvite_Repeat::clear_new_guild_name() {
  if (new_guild_name_ != &::google::protobuf::internal::kEmptyString) {
    new_guild_name_->clear();
  }
  clear_has_new_guild_name();
}
inline const ::std::string& GS2C_GuildInvite_Repeat::new_guild_name() const {
  return *new_guild_name_;
}
inline void GS2C_GuildInvite_Repeat::set_new_guild_name(const ::std::string& value) {
  set_has_new_guild_name();
  if (new_guild_name_ == &::google::protobuf::internal::kEmptyString) {
    new_guild_name_ = new ::std::string;
  }
  new_guild_name_->assign(value);
}
inline void GS2C_GuildInvite_Repeat::set_new_guild_name(const char* value) {
  set_has_new_guild_name();
  if (new_guild_name_ == &::google::protobuf::internal::kEmptyString) {
    new_guild_name_ = new ::std::string;
  }
  new_guild_name_->assign(value);
}
inline void GS2C_GuildInvite_Repeat::set_new_guild_name(const char* value, size_t size) {
  set_has_new_guild_name();
  if (new_guild_name_ == &::google::protobuf::internal::kEmptyString) {
    new_guild_name_ = new ::std::string;
  }
  new_guild_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GS2C_GuildInvite_Repeat::mutable_new_guild_name() {
  set_has_new_guild_name();
  if (new_guild_name_ == &::google::protobuf::internal::kEmptyString) {
    new_guild_name_ = new ::std::string;
  }
  return new_guild_name_;
}
inline ::std::string* GS2C_GuildInvite_Repeat::release_new_guild_name() {
  clear_has_new_guild_name();
  if (new_guild_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = new_guild_name_;
    new_guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GS2C_GuildInvite_Repeat::set_allocated_new_guild_name(::std::string* new_guild_name) {
  if (new_guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete new_guild_name_;
  }
  if (new_guild_name) {
    set_has_new_guild_name();
    new_guild_name_ = new_guild_name;
  } else {
    clear_has_new_guild_name();
    new_guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 inviterId = 5;
inline bool GS2C_GuildInvite_Repeat::has_inviterid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GS2C_GuildInvite_Repeat::set_has_inviterid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GS2C_GuildInvite_Repeat::clear_has_inviterid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GS2C_GuildInvite_Repeat::clear_inviterid() {
  inviterid_ = GOOGLE_ULONGLONG(0);
  clear_has_inviterid();
}
inline ::google::protobuf::uint64 GS2C_GuildInvite_Repeat::inviterid() const {
  return inviterid_;
}
inline void GS2C_GuildInvite_Repeat::set_inviterid(::google::protobuf::uint64 value) {
  set_has_inviterid();
  inviterid_ = value;
}

// required uint64 inviteeId = 6;
inline bool GS2C_GuildInvite_Repeat::has_inviteeid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GS2C_GuildInvite_Repeat::set_has_inviteeid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GS2C_GuildInvite_Repeat::clear_has_inviteeid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GS2C_GuildInvite_Repeat::clear_inviteeid() {
  inviteeid_ = GOOGLE_ULONGLONG(0);
  clear_has_inviteeid();
}
inline ::google::protobuf::uint64 GS2C_GuildInvite_Repeat::inviteeid() const {
  return inviteeid_;
}
inline void GS2C_GuildInvite_Repeat::set_inviteeid(::google::protobuf::uint64 value) {
  set_has_inviteeid();
  inviteeid_ = value;
}

// optional bool is_invite = 7 [default = true];
inline bool GS2C_GuildInvite_Repeat::has_is_invite() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GS2C_GuildInvite_Repeat::set_has_is_invite() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GS2C_GuildInvite_Repeat::clear_has_is_invite() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GS2C_GuildInvite_Repeat::clear_is_invite() {
  is_invite_ = true;
  clear_has_is_invite();
}
inline bool GS2C_GuildInvite_Repeat::is_invite() const {
  return is_invite_;
}
inline void GS2C_GuildInvite_Repeat::set_is_invite(bool value) {
  set_has_is_invite();
  is_invite_ = value;
}

// -------------------------------------------------------------------

// C2GS_GuildInvite_Repeat_Operate

// optional bool is_replace = 1 [default = false];
inline bool C2GS_GuildInvite_Repeat_Operate::has_is_replace() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_GuildInvite_Repeat_Operate::set_has_is_replace() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_GuildInvite_Repeat_Operate::clear_has_is_replace() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_GuildInvite_Repeat_Operate::clear_is_replace() {
  is_replace_ = false;
  clear_has_is_replace();
}
inline bool C2GS_GuildInvite_Repeat_Operate::is_replace() const {
  return is_replace_;
}
inline void C2GS_GuildInvite_Repeat_Operate::set_is_replace(bool value) {
  set_has_is_replace();
  is_replace_ = value;
}

// required uint64 cur_guild_guid = 2;
inline bool C2GS_GuildInvite_Repeat_Operate::has_cur_guild_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_GuildInvite_Repeat_Operate::set_has_cur_guild_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_GuildInvite_Repeat_Operate::clear_has_cur_guild_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_GuildInvite_Repeat_Operate::clear_cur_guild_guid() {
  cur_guild_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_cur_guild_guid();
}
inline ::google::protobuf::uint64 C2GS_GuildInvite_Repeat_Operate::cur_guild_guid() const {
  return cur_guild_guid_;
}
inline void C2GS_GuildInvite_Repeat_Operate::set_cur_guild_guid(::google::protobuf::uint64 value) {
  set_has_cur_guild_guid();
  cur_guild_guid_ = value;
}

// required string cur_guild_name = 3;
inline bool C2GS_GuildInvite_Repeat_Operate::has_cur_guild_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2GS_GuildInvite_Repeat_Operate::set_has_cur_guild_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2GS_GuildInvite_Repeat_Operate::clear_has_cur_guild_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2GS_GuildInvite_Repeat_Operate::clear_cur_guild_name() {
  if (cur_guild_name_ != &::google::protobuf::internal::kEmptyString) {
    cur_guild_name_->clear();
  }
  clear_has_cur_guild_name();
}
inline const ::std::string& C2GS_GuildInvite_Repeat_Operate::cur_guild_name() const {
  return *cur_guild_name_;
}
inline void C2GS_GuildInvite_Repeat_Operate::set_cur_guild_name(const ::std::string& value) {
  set_has_cur_guild_name();
  if (cur_guild_name_ == &::google::protobuf::internal::kEmptyString) {
    cur_guild_name_ = new ::std::string;
  }
  cur_guild_name_->assign(value);
}
inline void C2GS_GuildInvite_Repeat_Operate::set_cur_guild_name(const char* value) {
  set_has_cur_guild_name();
  if (cur_guild_name_ == &::google::protobuf::internal::kEmptyString) {
    cur_guild_name_ = new ::std::string;
  }
  cur_guild_name_->assign(value);
}
inline void C2GS_GuildInvite_Repeat_Operate::set_cur_guild_name(const char* value, size_t size) {
  set_has_cur_guild_name();
  if (cur_guild_name_ == &::google::protobuf::internal::kEmptyString) {
    cur_guild_name_ = new ::std::string;
  }
  cur_guild_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2GS_GuildInvite_Repeat_Operate::mutable_cur_guild_name() {
  set_has_cur_guild_name();
  if (cur_guild_name_ == &::google::protobuf::internal::kEmptyString) {
    cur_guild_name_ = new ::std::string;
  }
  return cur_guild_name_;
}
inline ::std::string* C2GS_GuildInvite_Repeat_Operate::release_cur_guild_name() {
  clear_has_cur_guild_name();
  if (cur_guild_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cur_guild_name_;
    cur_guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2GS_GuildInvite_Repeat_Operate::set_allocated_cur_guild_name(::std::string* cur_guild_name) {
  if (cur_guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete cur_guild_name_;
  }
  if (cur_guild_name) {
    set_has_cur_guild_name();
    cur_guild_name_ = cur_guild_name;
  } else {
    clear_has_cur_guild_name();
    cur_guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 new_guild_guid = 4;
inline bool C2GS_GuildInvite_Repeat_Operate::has_new_guild_guid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void C2GS_GuildInvite_Repeat_Operate::set_has_new_guild_guid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void C2GS_GuildInvite_Repeat_Operate::clear_has_new_guild_guid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void C2GS_GuildInvite_Repeat_Operate::clear_new_guild_guid() {
  new_guild_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_new_guild_guid();
}
inline ::google::protobuf::uint64 C2GS_GuildInvite_Repeat_Operate::new_guild_guid() const {
  return new_guild_guid_;
}
inline void C2GS_GuildInvite_Repeat_Operate::set_new_guild_guid(::google::protobuf::uint64 value) {
  set_has_new_guild_guid();
  new_guild_guid_ = value;
}

// required string new_guild_name = 5;
inline bool C2GS_GuildInvite_Repeat_Operate::has_new_guild_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void C2GS_GuildInvite_Repeat_Operate::set_has_new_guild_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void C2GS_GuildInvite_Repeat_Operate::clear_has_new_guild_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void C2GS_GuildInvite_Repeat_Operate::clear_new_guild_name() {
  if (new_guild_name_ != &::google::protobuf::internal::kEmptyString) {
    new_guild_name_->clear();
  }
  clear_has_new_guild_name();
}
inline const ::std::string& C2GS_GuildInvite_Repeat_Operate::new_guild_name() const {
  return *new_guild_name_;
}
inline void C2GS_GuildInvite_Repeat_Operate::set_new_guild_name(const ::std::string& value) {
  set_has_new_guild_name();
  if (new_guild_name_ == &::google::protobuf::internal::kEmptyString) {
    new_guild_name_ = new ::std::string;
  }
  new_guild_name_->assign(value);
}
inline void C2GS_GuildInvite_Repeat_Operate::set_new_guild_name(const char* value) {
  set_has_new_guild_name();
  if (new_guild_name_ == &::google::protobuf::internal::kEmptyString) {
    new_guild_name_ = new ::std::string;
  }
  new_guild_name_->assign(value);
}
inline void C2GS_GuildInvite_Repeat_Operate::set_new_guild_name(const char* value, size_t size) {
  set_has_new_guild_name();
  if (new_guild_name_ == &::google::protobuf::internal::kEmptyString) {
    new_guild_name_ = new ::std::string;
  }
  new_guild_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2GS_GuildInvite_Repeat_Operate::mutable_new_guild_name() {
  set_has_new_guild_name();
  if (new_guild_name_ == &::google::protobuf::internal::kEmptyString) {
    new_guild_name_ = new ::std::string;
  }
  return new_guild_name_;
}
inline ::std::string* C2GS_GuildInvite_Repeat_Operate::release_new_guild_name() {
  clear_has_new_guild_name();
  if (new_guild_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = new_guild_name_;
    new_guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2GS_GuildInvite_Repeat_Operate::set_allocated_new_guild_name(::std::string* new_guild_name) {
  if (new_guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete new_guild_name_;
  }
  if (new_guild_name) {
    set_has_new_guild_name();
    new_guild_name_ = new_guild_name;
  } else {
    clear_has_new_guild_name();
    new_guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 inviterId = 6;
inline bool C2GS_GuildInvite_Repeat_Operate::has_inviterid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void C2GS_GuildInvite_Repeat_Operate::set_has_inviterid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void C2GS_GuildInvite_Repeat_Operate::clear_has_inviterid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void C2GS_GuildInvite_Repeat_Operate::clear_inviterid() {
  inviterid_ = GOOGLE_ULONGLONG(0);
  clear_has_inviterid();
}
inline ::google::protobuf::uint64 C2GS_GuildInvite_Repeat_Operate::inviterid() const {
  return inviterid_;
}
inline void C2GS_GuildInvite_Repeat_Operate::set_inviterid(::google::protobuf::uint64 value) {
  set_has_inviterid();
  inviterid_ = value;
}

// required uint64 inviteeId = 7;
inline bool C2GS_GuildInvite_Repeat_Operate::has_inviteeid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void C2GS_GuildInvite_Repeat_Operate::set_has_inviteeid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void C2GS_GuildInvite_Repeat_Operate::clear_has_inviteeid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void C2GS_GuildInvite_Repeat_Operate::clear_inviteeid() {
  inviteeid_ = GOOGLE_ULONGLONG(0);
  clear_has_inviteeid();
}
inline ::google::protobuf::uint64 C2GS_GuildInvite_Repeat_Operate::inviteeid() const {
  return inviteeid_;
}
inline void C2GS_GuildInvite_Repeat_Operate::set_inviteeid(::google::protobuf::uint64 value) {
  set_has_inviteeid();
  inviteeid_ = value;
}

// optional bool is_invite = 8 [default = true];
inline bool C2GS_GuildInvite_Repeat_Operate::has_is_invite() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void C2GS_GuildInvite_Repeat_Operate::set_has_is_invite() {
  _has_bits_[0] |= 0x00000080u;
}
inline void C2GS_GuildInvite_Repeat_Operate::clear_has_is_invite() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void C2GS_GuildInvite_Repeat_Operate::clear_is_invite() {
  is_invite_ = true;
  clear_has_is_invite();
}
inline bool C2GS_GuildInvite_Repeat_Operate::is_invite() const {
  return is_invite_;
}
inline void C2GS_GuildInvite_Repeat_Operate::set_is_invite(bool value) {
  set_has_is_invite();
  is_invite_ = value;
}

// required uint64 your_guid = 9;
inline bool C2GS_GuildInvite_Repeat_Operate::has_your_guid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void C2GS_GuildInvite_Repeat_Operate::set_has_your_guid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void C2GS_GuildInvite_Repeat_Operate::clear_has_your_guid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void C2GS_GuildInvite_Repeat_Operate::clear_your_guid() {
  your_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_your_guid();
}
inline ::google::protobuf::uint64 C2GS_GuildInvite_Repeat_Operate::your_guid() const {
  return your_guid_;
}
inline void C2GS_GuildInvite_Repeat_Operate::set_your_guid(::google::protobuf::uint64 value) {
  set_has_your_guid();
  your_guid_ = value;
}

// -------------------------------------------------------------------

// GS2C_GuildInvite_Repeat_Operate_Respon

// optional bool is_replace = 1 [default = false];
inline bool GS2C_GuildInvite_Repeat_Operate_Respon::has_is_replace() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_GuildInvite_Repeat_Operate_Respon::set_has_is_replace() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_GuildInvite_Repeat_Operate_Respon::clear_has_is_replace() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_GuildInvite_Repeat_Operate_Respon::clear_is_replace() {
  is_replace_ = false;
  clear_has_is_replace();
}
inline bool GS2C_GuildInvite_Repeat_Operate_Respon::is_replace() const {
  return is_replace_;
}
inline void GS2C_GuildInvite_Repeat_Operate_Respon::set_is_replace(bool value) {
  set_has_is_replace();
  is_replace_ = value;
}

// -------------------------------------------------------------------

// C2GS_GuildQuit

// required uint64 quit_member_guid = 1;
inline bool C2GS_GuildQuit::has_quit_member_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_GuildQuit::set_has_quit_member_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_GuildQuit::clear_has_quit_member_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_GuildQuit::clear_quit_member_guid() {
  quit_member_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_quit_member_guid();
}
inline ::google::protobuf::uint64 C2GS_GuildQuit::quit_member_guid() const {
  return quit_member_guid_;
}
inline void C2GS_GuildQuit::set_quit_member_guid(::google::protobuf::uint64 value) {
  set_has_quit_member_guid();
  quit_member_guid_ = value;
}

// required uint64 your_guid = 2;
inline bool C2GS_GuildQuit::has_your_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_GuildQuit::set_has_your_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_GuildQuit::clear_has_your_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_GuildQuit::clear_your_guid() {
  your_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_your_guid();
}
inline ::google::protobuf::uint64 C2GS_GuildQuit::your_guid() const {
  return your_guid_;
}
inline void C2GS_GuildQuit::set_your_guid(::google::protobuf::uint64 value) {
  set_has_your_guid();
  your_guid_ = value;
}

// -------------------------------------------------------------------

// GS2C_GuildQuit_Respon

// required uint32 quit_result = 1;
inline bool GS2C_GuildQuit_Respon::has_quit_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_GuildQuit_Respon::set_has_quit_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_GuildQuit_Respon::clear_has_quit_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_GuildQuit_Respon::clear_quit_result() {
  quit_result_ = 0u;
  clear_has_quit_result();
}
inline ::google::protobuf::uint32 GS2C_GuildQuit_Respon::quit_result() const {
  return quit_result_;
}
inline void GS2C_GuildQuit_Respon::set_quit_result(::google::protobuf::uint32 value) {
  set_has_quit_result();
  quit_result_ = value;
}

// -------------------------------------------------------------------

// GS2C_GuildMemberQuit

// required bool is_kicked = 1 [default = false];
inline bool GS2C_GuildMemberQuit::has_is_kicked() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_GuildMemberQuit::set_has_is_kicked() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_GuildMemberQuit::clear_has_is_kicked() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_GuildMemberQuit::clear_is_kicked() {
  is_kicked_ = false;
  clear_has_is_kicked();
}
inline bool GS2C_GuildMemberQuit::is_kicked() const {
  return is_kicked_;
}
inline void GS2C_GuildMemberQuit::set_is_kicked(bool value) {
  set_has_is_kicked();
  is_kicked_ = value;
}

// required uint64 quit_guid = 2;
inline bool GS2C_GuildMemberQuit::has_quit_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_GuildMemberQuit::set_has_quit_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_GuildMemberQuit::clear_has_quit_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_GuildMemberQuit::clear_quit_guid() {
  quit_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_quit_guid();
}
inline ::google::protobuf::uint64 GS2C_GuildMemberQuit::quit_guid() const {
  return quit_guid_;
}
inline void GS2C_GuildMemberQuit::set_quit_guid(::google::protobuf::uint64 value) {
  set_has_quit_guid();
  quit_guid_ = value;
}

// optional bool is_disband = 3 [default = false];
inline bool GS2C_GuildMemberQuit::has_is_disband() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_GuildMemberQuit::set_has_is_disband() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_GuildMemberQuit::clear_has_is_disband() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_GuildMemberQuit::clear_is_disband() {
  is_disband_ = false;
  clear_has_is_disband();
}
inline bool GS2C_GuildMemberQuit::is_disband() const {
  return is_disband_;
}
inline void GS2C_GuildMemberQuit::set_is_disband(bool value) {
  set_has_is_disband();
  is_disband_ = value;
}

// optional bool is_quit = 4 [default = false];
inline bool GS2C_GuildMemberQuit::has_is_quit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_GuildMemberQuit::set_has_is_quit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_GuildMemberQuit::clear_has_is_quit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_GuildMemberQuit::clear_is_quit() {
  is_quit_ = false;
  clear_has_is_quit();
}
inline bool GS2C_GuildMemberQuit::is_quit() const {
  return is_quit_;
}
inline void GS2C_GuildMemberQuit::set_is_quit(bool value) {
  set_has_is_quit();
  is_quit_ = value;
}

// -------------------------------------------------------------------

// GS2C_GuildDisband

// required bool is_kicked = 1 [default = false];
inline bool GS2C_GuildDisband::has_is_kicked() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_GuildDisband::set_has_is_kicked() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_GuildDisband::clear_has_is_kicked() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_GuildDisband::clear_is_kicked() {
  is_kicked_ = false;
  clear_has_is_kicked();
}
inline bool GS2C_GuildDisband::is_kicked() const {
  return is_kicked_;
}
inline void GS2C_GuildDisband::set_is_kicked(bool value) {
  set_has_is_kicked();
  is_kicked_ = value;
}

// optional bool is_disband = 2 [default = false];
inline bool GS2C_GuildDisband::has_is_disband() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_GuildDisband::set_has_is_disband() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_GuildDisband::clear_has_is_disband() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_GuildDisband::clear_is_disband() {
  is_disband_ = false;
  clear_has_is_disband();
}
inline bool GS2C_GuildDisband::is_disband() const {
  return is_disband_;
}
inline void GS2C_GuildDisband::set_is_disband(bool value) {
  set_has_is_disband();
  is_disband_ = value;
}

// optional bool is_quit = 3 [default = false];
inline bool GS2C_GuildDisband::has_is_quit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_GuildDisband::set_has_is_quit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_GuildDisband::clear_has_is_quit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_GuildDisband::clear_is_quit() {
  is_quit_ = false;
  clear_has_is_quit();
}
inline bool GS2C_GuildDisband::is_quit() const {
  return is_quit_;
}
inline void GS2C_GuildDisband::set_is_quit(bool value) {
  set_has_is_quit();
  is_quit_ = value;
}

// -------------------------------------------------------------------

// C2GS_GuildUpdate

// required uint32 update_flag = 1;
inline bool C2GS_GuildUpdate::has_update_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_GuildUpdate::set_has_update_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_GuildUpdate::clear_has_update_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_GuildUpdate::clear_update_flag() {
  update_flag_ = 0u;
  clear_has_update_flag();
}
inline ::google::protobuf::uint32 C2GS_GuildUpdate::update_flag() const {
  return update_flag_;
}
inline void C2GS_GuildUpdate::set_update_flag(::google::protobuf::uint32 value) {
  set_has_update_flag();
  update_flag_ = value;
}

// optional .pb.GxDB_Guild guild = 2;
inline bool C2GS_GuildUpdate::has_guild() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_GuildUpdate::set_has_guild() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_GuildUpdate::clear_has_guild() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_GuildUpdate::clear_guild() {
  if (guild_ != NULL) guild_->::pb::GxDB_Guild::Clear();
  clear_has_guild();
}
inline const ::pb::GxDB_Guild& C2GS_GuildUpdate::guild() const {
  return guild_ != NULL ? *guild_ : *default_instance_->guild_;
}
inline ::pb::GxDB_Guild* C2GS_GuildUpdate::mutable_guild() {
  set_has_guild();
  if (guild_ == NULL) guild_ = new ::pb::GxDB_Guild;
  return guild_;
}
inline ::pb::GxDB_Guild* C2GS_GuildUpdate::release_guild() {
  clear_has_guild();
  ::pb::GxDB_Guild* temp = guild_;
  guild_ = NULL;
  return temp;
}
inline void C2GS_GuildUpdate::set_allocated_guild(::pb::GxDB_Guild* guild) {
  delete guild_;
  guild_ = guild;
  if (guild) {
    set_has_guild();
  } else {
    clear_has_guild();
  }
}

// required uint64 your_guid = 3;
inline bool C2GS_GuildUpdate::has_your_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2GS_GuildUpdate::set_has_your_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2GS_GuildUpdate::clear_has_your_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2GS_GuildUpdate::clear_your_guid() {
  your_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_your_guid();
}
inline ::google::protobuf::uint64 C2GS_GuildUpdate::your_guid() const {
  return your_guid_;
}
inline void C2GS_GuildUpdate::set_your_guid(::google::protobuf::uint64 value) {
  set_has_your_guid();
  your_guid_ = value;
}

// -------------------------------------------------------------------

// GS2C_GuildUpdate

// required uint32 update_flag = 1;
inline bool GS2C_GuildUpdate::has_update_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_GuildUpdate::set_has_update_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_GuildUpdate::clear_has_update_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_GuildUpdate::clear_update_flag() {
  update_flag_ = 0u;
  clear_has_update_flag();
}
inline ::google::protobuf::uint32 GS2C_GuildUpdate::update_flag() const {
  return update_flag_;
}
inline void GS2C_GuildUpdate::set_update_flag(::google::protobuf::uint32 value) {
  set_has_update_flag();
  update_flag_ = value;
}

// optional .pb.GxDB_Guild guild = 2;
inline bool GS2C_GuildUpdate::has_guild() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_GuildUpdate::set_has_guild() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_GuildUpdate::clear_has_guild() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_GuildUpdate::clear_guild() {
  if (guild_ != NULL) guild_->::pb::GxDB_Guild::Clear();
  clear_has_guild();
}
inline const ::pb::GxDB_Guild& GS2C_GuildUpdate::guild() const {
  return guild_ != NULL ? *guild_ : *default_instance_->guild_;
}
inline ::pb::GxDB_Guild* GS2C_GuildUpdate::mutable_guild() {
  set_has_guild();
  if (guild_ == NULL) guild_ = new ::pb::GxDB_Guild;
  return guild_;
}
inline ::pb::GxDB_Guild* GS2C_GuildUpdate::release_guild() {
  clear_has_guild();
  ::pb::GxDB_Guild* temp = guild_;
  guild_ = NULL;
  return temp;
}
inline void GS2C_GuildUpdate::set_allocated_guild(::pb::GxDB_Guild* guild) {
  delete guild_;
  guild_ = guild;
  if (guild) {
    set_has_guild();
  } else {
    clear_has_guild();
  }
}

// required uint64 update_guid = 3;
inline bool GS2C_GuildUpdate::has_update_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_GuildUpdate::set_has_update_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_GuildUpdate::clear_has_update_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_GuildUpdate::clear_update_guid() {
  update_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_update_guid();
}
inline ::google::protobuf::uint64 GS2C_GuildUpdate::update_guid() const {
  return update_guid_;
}
inline void GS2C_GuildUpdate::set_update_guid(::google::protobuf::uint64 value) {
  set_has_update_guid();
  update_guid_ = value;
}

// -------------------------------------------------------------------

// C2GS_Guild_Autority_Operate

// required uint64 target_guid = 1;
inline bool C2GS_Guild_Autority_Operate::has_target_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Guild_Autority_Operate::set_has_target_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Guild_Autority_Operate::clear_has_target_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Guild_Autority_Operate::clear_target_guid() {
  target_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_target_guid();
}
inline ::google::protobuf::uint64 C2GS_Guild_Autority_Operate::target_guid() const {
  return target_guid_;
}
inline void C2GS_Guild_Autority_Operate::set_target_guid(::google::protobuf::uint64 value) {
  set_has_target_guid();
  target_guid_ = value;
}

// required string target_name = 2;
inline bool C2GS_Guild_Autority_Operate::has_target_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_Guild_Autority_Operate::set_has_target_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_Guild_Autority_Operate::clear_has_target_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_Guild_Autority_Operate::clear_target_name() {
  if (target_name_ != &::google::protobuf::internal::kEmptyString) {
    target_name_->clear();
  }
  clear_has_target_name();
}
inline const ::std::string& C2GS_Guild_Autority_Operate::target_name() const {
  return *target_name_;
}
inline void C2GS_Guild_Autority_Operate::set_target_name(const ::std::string& value) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(value);
}
inline void C2GS_Guild_Autority_Operate::set_target_name(const char* value) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(value);
}
inline void C2GS_Guild_Autority_Operate::set_target_name(const char* value, size_t size) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2GS_Guild_Autority_Operate::mutable_target_name() {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  return target_name_;
}
inline ::std::string* C2GS_Guild_Autority_Operate::release_target_name() {
  clear_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = target_name_;
    target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2GS_Guild_Autority_Operate::set_allocated_target_name(::std::string* target_name) {
  if (target_name_ != &::google::protobuf::internal::kEmptyString) {
    delete target_name_;
  }
  if (target_name) {
    set_has_target_name();
    target_name_ = target_name;
  } else {
    clear_has_target_name();
    target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 your_guid = 3;
inline bool C2GS_Guild_Autority_Operate::has_your_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2GS_Guild_Autority_Operate::set_has_your_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2GS_Guild_Autority_Operate::clear_has_your_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2GS_Guild_Autority_Operate::clear_your_guid() {
  your_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_your_guid();
}
inline ::google::protobuf::uint64 C2GS_Guild_Autority_Operate::your_guid() const {
  return your_guid_;
}
inline void C2GS_Guild_Autority_Operate::set_your_guid(::google::protobuf::uint64 value) {
  set_has_your_guid();
  your_guid_ = value;
}

// required string your_name = 4;
inline bool C2GS_Guild_Autority_Operate::has_your_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void C2GS_Guild_Autority_Operate::set_has_your_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void C2GS_Guild_Autority_Operate::clear_has_your_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void C2GS_Guild_Autority_Operate::clear_your_name() {
  if (your_name_ != &::google::protobuf::internal::kEmptyString) {
    your_name_->clear();
  }
  clear_has_your_name();
}
inline const ::std::string& C2GS_Guild_Autority_Operate::your_name() const {
  return *your_name_;
}
inline void C2GS_Guild_Autority_Operate::set_your_name(const ::std::string& value) {
  set_has_your_name();
  if (your_name_ == &::google::protobuf::internal::kEmptyString) {
    your_name_ = new ::std::string;
  }
  your_name_->assign(value);
}
inline void C2GS_Guild_Autority_Operate::set_your_name(const char* value) {
  set_has_your_name();
  if (your_name_ == &::google::protobuf::internal::kEmptyString) {
    your_name_ = new ::std::string;
  }
  your_name_->assign(value);
}
inline void C2GS_Guild_Autority_Operate::set_your_name(const char* value, size_t size) {
  set_has_your_name();
  if (your_name_ == &::google::protobuf::internal::kEmptyString) {
    your_name_ = new ::std::string;
  }
  your_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2GS_Guild_Autority_Operate::mutable_your_name() {
  set_has_your_name();
  if (your_name_ == &::google::protobuf::internal::kEmptyString) {
    your_name_ = new ::std::string;
  }
  return your_name_;
}
inline ::std::string* C2GS_Guild_Autority_Operate::release_your_name() {
  clear_has_your_name();
  if (your_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = your_name_;
    your_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2GS_Guild_Autority_Operate::set_allocated_your_name(::std::string* your_name) {
  if (your_name_ != &::google::protobuf::internal::kEmptyString) {
    delete your_name_;
  }
  if (your_name) {
    set_has_your_name();
    your_name_ = your_name;
  } else {
    clear_has_your_name();
    your_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 operate_type = 5;
inline bool C2GS_Guild_Autority_Operate::has_operate_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void C2GS_Guild_Autority_Operate::set_has_operate_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void C2GS_Guild_Autority_Operate::clear_has_operate_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void C2GS_Guild_Autority_Operate::clear_operate_type() {
  operate_type_ = 0u;
  clear_has_operate_type();
}
inline ::google::protobuf::uint32 C2GS_Guild_Autority_Operate::operate_type() const {
  return operate_type_;
}
inline void C2GS_Guild_Autority_Operate::set_operate_type(::google::protobuf::uint32 value) {
  set_has_operate_type();
  operate_type_ = value;
}

// -------------------------------------------------------------------

// GS2C_Guild_Autority_Operate_Respon

// required uint64 target_guid = 1;
inline bool GS2C_Guild_Autority_Operate_Respon::has_target_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Guild_Autority_Operate_Respon::set_has_target_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Guild_Autority_Operate_Respon::clear_has_target_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Guild_Autority_Operate_Respon::clear_target_guid() {
  target_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_target_guid();
}
inline ::google::protobuf::uint64 GS2C_Guild_Autority_Operate_Respon::target_guid() const {
  return target_guid_;
}
inline void GS2C_Guild_Autority_Operate_Respon::set_target_guid(::google::protobuf::uint64 value) {
  set_has_target_guid();
  target_guid_ = value;
}

// required string target_name = 2;
inline bool GS2C_Guild_Autority_Operate_Respon::has_target_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Guild_Autority_Operate_Respon::set_has_target_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Guild_Autority_Operate_Respon::clear_has_target_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Guild_Autority_Operate_Respon::clear_target_name() {
  if (target_name_ != &::google::protobuf::internal::kEmptyString) {
    target_name_->clear();
  }
  clear_has_target_name();
}
inline const ::std::string& GS2C_Guild_Autority_Operate_Respon::target_name() const {
  return *target_name_;
}
inline void GS2C_Guild_Autority_Operate_Respon::set_target_name(const ::std::string& value) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(value);
}
inline void GS2C_Guild_Autority_Operate_Respon::set_target_name(const char* value) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(value);
}
inline void GS2C_Guild_Autority_Operate_Respon::set_target_name(const char* value, size_t size) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GS2C_Guild_Autority_Operate_Respon::mutable_target_name() {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  return target_name_;
}
inline ::std::string* GS2C_Guild_Autority_Operate_Respon::release_target_name() {
  clear_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = target_name_;
    target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GS2C_Guild_Autority_Operate_Respon::set_allocated_target_name(::std::string* target_name) {
  if (target_name_ != &::google::protobuf::internal::kEmptyString) {
    delete target_name_;
  }
  if (target_name) {
    set_has_target_name();
    target_name_ = target_name;
  } else {
    clear_has_target_name();
    target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 operater_guid = 3;
inline bool GS2C_Guild_Autority_Operate_Respon::has_operater_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Guild_Autority_Operate_Respon::set_has_operater_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Guild_Autority_Operate_Respon::clear_has_operater_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Guild_Autority_Operate_Respon::clear_operater_guid() {
  operater_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_operater_guid();
}
inline ::google::protobuf::uint64 GS2C_Guild_Autority_Operate_Respon::operater_guid() const {
  return operater_guid_;
}
inline void GS2C_Guild_Autority_Operate_Respon::set_operater_guid(::google::protobuf::uint64 value) {
  set_has_operater_guid();
  operater_guid_ = value;
}

// required string operater_name = 4;
inline bool GS2C_Guild_Autority_Operate_Respon::has_operater_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Guild_Autority_Operate_Respon::set_has_operater_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Guild_Autority_Operate_Respon::clear_has_operater_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Guild_Autority_Operate_Respon::clear_operater_name() {
  if (operater_name_ != &::google::protobuf::internal::kEmptyString) {
    operater_name_->clear();
  }
  clear_has_operater_name();
}
inline const ::std::string& GS2C_Guild_Autority_Operate_Respon::operater_name() const {
  return *operater_name_;
}
inline void GS2C_Guild_Autority_Operate_Respon::set_operater_name(const ::std::string& value) {
  set_has_operater_name();
  if (operater_name_ == &::google::protobuf::internal::kEmptyString) {
    operater_name_ = new ::std::string;
  }
  operater_name_->assign(value);
}
inline void GS2C_Guild_Autority_Operate_Respon::set_operater_name(const char* value) {
  set_has_operater_name();
  if (operater_name_ == &::google::protobuf::internal::kEmptyString) {
    operater_name_ = new ::std::string;
  }
  operater_name_->assign(value);
}
inline void GS2C_Guild_Autority_Operate_Respon::set_operater_name(const char* value, size_t size) {
  set_has_operater_name();
  if (operater_name_ == &::google::protobuf::internal::kEmptyString) {
    operater_name_ = new ::std::string;
  }
  operater_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GS2C_Guild_Autority_Operate_Respon::mutable_operater_name() {
  set_has_operater_name();
  if (operater_name_ == &::google::protobuf::internal::kEmptyString) {
    operater_name_ = new ::std::string;
  }
  return operater_name_;
}
inline ::std::string* GS2C_Guild_Autority_Operate_Respon::release_operater_name() {
  clear_has_operater_name();
  if (operater_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = operater_name_;
    operater_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GS2C_Guild_Autority_Operate_Respon::set_allocated_operater_name(::std::string* operater_name) {
  if (operater_name_ != &::google::protobuf::internal::kEmptyString) {
    delete operater_name_;
  }
  if (operater_name) {
    set_has_operater_name();
    operater_name_ = operater_name;
  } else {
    clear_has_operater_name();
    operater_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 operate_type = 5;
inline bool GS2C_Guild_Autority_Operate_Respon::has_operate_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GS2C_Guild_Autority_Operate_Respon::set_has_operate_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GS2C_Guild_Autority_Operate_Respon::clear_has_operate_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GS2C_Guild_Autority_Operate_Respon::clear_operate_type() {
  operate_type_ = 0u;
  clear_has_operate_type();
}
inline ::google::protobuf::uint32 GS2C_Guild_Autority_Operate_Respon::operate_type() const {
  return operate_type_;
}
inline void GS2C_Guild_Autority_Operate_Respon::set_operate_type(::google::protobuf::uint32 value) {
  set_has_operate_type();
  operate_type_ = value;
}

// required uint32 operate_result = 6;
inline bool GS2C_Guild_Autority_Operate_Respon::has_operate_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GS2C_Guild_Autority_Operate_Respon::set_has_operate_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GS2C_Guild_Autority_Operate_Respon::clear_has_operate_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GS2C_Guild_Autority_Operate_Respon::clear_operate_result() {
  operate_result_ = 0u;
  clear_has_operate_result();
}
inline ::google::protobuf::uint32 GS2C_Guild_Autority_Operate_Respon::operate_result() const {
  return operate_result_;
}
inline void GS2C_Guild_Autority_Operate_Respon::set_operate_result(::google::protobuf::uint32 value) {
  set_has_operate_result();
  operate_result_ = value;
}

// -------------------------------------------------------------------

// C2GS_GuildUpdate_Member

// required uint32 update_flag = 1;
inline bool C2GS_GuildUpdate_Member::has_update_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_GuildUpdate_Member::set_has_update_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_GuildUpdate_Member::clear_has_update_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_GuildUpdate_Member::clear_update_flag() {
  update_flag_ = 0u;
  clear_has_update_flag();
}
inline ::google::protobuf::uint32 C2GS_GuildUpdate_Member::update_flag() const {
  return update_flag_;
}
inline void C2GS_GuildUpdate_Member::set_update_flag(::google::protobuf::uint32 value) {
  set_has_update_flag();
  update_flag_ = value;
}

// optional .pb.GxDB_GMember_Info member = 2;
inline bool C2GS_GuildUpdate_Member::has_member() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_GuildUpdate_Member::set_has_member() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_GuildUpdate_Member::clear_has_member() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_GuildUpdate_Member::clear_member() {
  if (member_ != NULL) member_->::pb::GxDB_GMember_Info::Clear();
  clear_has_member();
}
inline const ::pb::GxDB_GMember_Info& C2GS_GuildUpdate_Member::member() const {
  return member_ != NULL ? *member_ : *default_instance_->member_;
}
inline ::pb::GxDB_GMember_Info* C2GS_GuildUpdate_Member::mutable_member() {
  set_has_member();
  if (member_ == NULL) member_ = new ::pb::GxDB_GMember_Info;
  return member_;
}
inline ::pb::GxDB_GMember_Info* C2GS_GuildUpdate_Member::release_member() {
  clear_has_member();
  ::pb::GxDB_GMember_Info* temp = member_;
  member_ = NULL;
  return temp;
}
inline void C2GS_GuildUpdate_Member::set_allocated_member(::pb::GxDB_GMember_Info* member) {
  delete member_;
  member_ = member;
  if (member) {
    set_has_member();
  } else {
    clear_has_member();
  }
}

// required uint64 your_guid = 3;
inline bool C2GS_GuildUpdate_Member::has_your_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2GS_GuildUpdate_Member::set_has_your_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2GS_GuildUpdate_Member::clear_has_your_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2GS_GuildUpdate_Member::clear_your_guid() {
  your_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_your_guid();
}
inline ::google::protobuf::uint64 C2GS_GuildUpdate_Member::your_guid() const {
  return your_guid_;
}
inline void C2GS_GuildUpdate_Member::set_your_guid(::google::protobuf::uint64 value) {
  set_has_your_guid();
  your_guid_ = value;
}

// -------------------------------------------------------------------

// GS2C_GuildUpdate_Member

// required uint32 update_flag = 1;
inline bool GS2C_GuildUpdate_Member::has_update_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_GuildUpdate_Member::set_has_update_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_GuildUpdate_Member::clear_has_update_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_GuildUpdate_Member::clear_update_flag() {
  update_flag_ = 0u;
  clear_has_update_flag();
}
inline ::google::protobuf::uint32 GS2C_GuildUpdate_Member::update_flag() const {
  return update_flag_;
}
inline void GS2C_GuildUpdate_Member::set_update_flag(::google::protobuf::uint32 value) {
  set_has_update_flag();
  update_flag_ = value;
}

// optional .pb.GxDB_GMember_Info member = 2;
inline bool GS2C_GuildUpdate_Member::has_member() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_GuildUpdate_Member::set_has_member() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_GuildUpdate_Member::clear_has_member() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_GuildUpdate_Member::clear_member() {
  if (member_ != NULL) member_->::pb::GxDB_GMember_Info::Clear();
  clear_has_member();
}
inline const ::pb::GxDB_GMember_Info& GS2C_GuildUpdate_Member::member() const {
  return member_ != NULL ? *member_ : *default_instance_->member_;
}
inline ::pb::GxDB_GMember_Info* GS2C_GuildUpdate_Member::mutable_member() {
  set_has_member();
  if (member_ == NULL) member_ = new ::pb::GxDB_GMember_Info;
  return member_;
}
inline ::pb::GxDB_GMember_Info* GS2C_GuildUpdate_Member::release_member() {
  clear_has_member();
  ::pb::GxDB_GMember_Info* temp = member_;
  member_ = NULL;
  return temp;
}
inline void GS2C_GuildUpdate_Member::set_allocated_member(::pb::GxDB_GMember_Info* member) {
  delete member_;
  member_ = member;
  if (member) {
    set_has_member();
  } else {
    clear_has_member();
  }
}

// -------------------------------------------------------------------

// GS2C_Update_Respon

// required uint32 update_result = 1;
inline bool GS2C_Update_Respon::has_update_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Update_Respon::set_has_update_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Update_Respon::clear_has_update_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Update_Respon::clear_update_result() {
  update_result_ = 0u;
  clear_has_update_result();
}
inline ::google::protobuf::uint32 GS2C_Update_Respon::update_result() const {
  return update_result_;
}
inline void GS2C_Update_Respon::set_update_result(::google::protobuf::uint32 value) {
  set_has_update_result();
  update_result_ = value;
}

// -------------------------------------------------------------------

// C2GS_GuildName_Check

// required string guild_name = 1;
inline bool C2GS_GuildName_Check::has_guild_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_GuildName_Check::set_has_guild_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_GuildName_Check::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_GuildName_Check::clear_guild_name() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    guild_name_->clear();
  }
  clear_has_guild_name();
}
inline const ::std::string& C2GS_GuildName_Check::guild_name() const {
  return *guild_name_;
}
inline void C2GS_GuildName_Check::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void C2GS_GuildName_Check::set_guild_name(const char* value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void C2GS_GuildName_Check::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2GS_GuildName_Check::mutable_guild_name() {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  return guild_name_;
}
inline ::std::string* C2GS_GuildName_Check::release_guild_name() {
  clear_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guild_name_;
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2GS_GuildName_Check::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (guild_name) {
    set_has_guild_name();
    guild_name_ = guild_name;
  } else {
    clear_has_guild_name();
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 your_guid = 2;
inline bool C2GS_GuildName_Check::has_your_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_GuildName_Check::set_has_your_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_GuildName_Check::clear_has_your_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_GuildName_Check::clear_your_guid() {
  your_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_your_guid();
}
inline ::google::protobuf::uint64 C2GS_GuildName_Check::your_guid() const {
  return your_guid_;
}
inline void C2GS_GuildName_Check::set_your_guid(::google::protobuf::uint64 value) {
  set_has_your_guid();
  your_guid_ = value;
}

// -------------------------------------------------------------------

// GS2C_GuildName_Check_Respon

// required bool is_can_use = 1;
inline bool GS2C_GuildName_Check_Respon::has_is_can_use() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_GuildName_Check_Respon::set_has_is_can_use() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_GuildName_Check_Respon::clear_has_is_can_use() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_GuildName_Check_Respon::clear_is_can_use() {
  is_can_use_ = false;
  clear_has_is_can_use();
}
inline bool GS2C_GuildName_Check_Respon::is_can_use() const {
  return is_can_use_;
}
inline void GS2C_GuildName_Check_Respon::set_is_can_use(bool value) {
  set_has_is_can_use();
  is_can_use_ = value;
}

// -------------------------------------------------------------------

// GS2C_Guild_Notify

// required uint32 notify_type = 1;
inline bool GS2C_Guild_Notify::has_notify_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Guild_Notify::set_has_notify_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Guild_Notify::clear_has_notify_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Guild_Notify::clear_notify_type() {
  notify_type_ = 0u;
  clear_has_notify_type();
}
inline ::google::protobuf::uint32 GS2C_Guild_Notify::notify_type() const {
  return notify_type_;
}
inline void GS2C_Guild_Notify::set_notify_type(::google::protobuf::uint32 value) {
  set_has_notify_type();
  notify_type_ = value;
}

// optional uint64 approval_guid = 2;
inline bool GS2C_Guild_Notify::has_approval_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Guild_Notify::set_has_approval_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Guild_Notify::clear_has_approval_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Guild_Notify::clear_approval_guid() {
  approval_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_approval_guid();
}
inline ::google::protobuf::uint64 GS2C_Guild_Notify::approval_guid() const {
  return approval_guid_;
}
inline void GS2C_Guild_Notify::set_approval_guid(::google::protobuf::uint64 value) {
  set_has_approval_guid();
  approval_guid_ = value;
}

// optional string approval_name = 3;
inline bool GS2C_Guild_Notify::has_approval_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Guild_Notify::set_has_approval_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Guild_Notify::clear_has_approval_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Guild_Notify::clear_approval_name() {
  if (approval_name_ != &::google::protobuf::internal::kEmptyString) {
    approval_name_->clear();
  }
  clear_has_approval_name();
}
inline const ::std::string& GS2C_Guild_Notify::approval_name() const {
  return *approval_name_;
}
inline void GS2C_Guild_Notify::set_approval_name(const ::std::string& value) {
  set_has_approval_name();
  if (approval_name_ == &::google::protobuf::internal::kEmptyString) {
    approval_name_ = new ::std::string;
  }
  approval_name_->assign(value);
}
inline void GS2C_Guild_Notify::set_approval_name(const char* value) {
  set_has_approval_name();
  if (approval_name_ == &::google::protobuf::internal::kEmptyString) {
    approval_name_ = new ::std::string;
  }
  approval_name_->assign(value);
}
inline void GS2C_Guild_Notify::set_approval_name(const char* value, size_t size) {
  set_has_approval_name();
  if (approval_name_ == &::google::protobuf::internal::kEmptyString) {
    approval_name_ = new ::std::string;
  }
  approval_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GS2C_Guild_Notify::mutable_approval_name() {
  set_has_approval_name();
  if (approval_name_ == &::google::protobuf::internal::kEmptyString) {
    approval_name_ = new ::std::string;
  }
  return approval_name_;
}
inline ::std::string* GS2C_Guild_Notify::release_approval_name() {
  clear_has_approval_name();
  if (approval_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = approval_name_;
    approval_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GS2C_Guild_Notify::set_allocated_approval_name(::std::string* approval_name) {
  if (approval_name_ != &::google::protobuf::internal::kEmptyString) {
    delete approval_name_;
  }
  if (approval_name) {
    set_has_approval_name();
    approval_name_ = approval_name;
  } else {
    clear_has_approval_name();
    approval_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GS2C_Guild_Dynamic_Event

// optional .pb.GUILD_DYNAMIC_EVENT event_type = 1;
inline bool GS2C_Guild_Dynamic_Event::has_event_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Guild_Dynamic_Event::set_has_event_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Guild_Dynamic_Event::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Guild_Dynamic_Event::clear_event_type() {
  event_type_ = 1;
  clear_has_event_type();
}
inline ::pb::GUILD_DYNAMIC_EVENT GS2C_Guild_Dynamic_Event::event_type() const {
  return static_cast< ::pb::GUILD_DYNAMIC_EVENT >(event_type_);
}
inline void GS2C_Guild_Dynamic_Event::set_event_type(::pb::GUILD_DYNAMIC_EVENT value) {
  assert(::pb::GUILD_DYNAMIC_EVENT_IsValid(value));
  set_has_event_type();
  event_type_ = value;
}

// optional uint64 guild_id = 2;
inline bool GS2C_Guild_Dynamic_Event::has_guild_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Guild_Dynamic_Event::set_has_guild_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Guild_Dynamic_Event::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Guild_Dynamic_Event::clear_guild_id() {
  guild_id_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_id();
}
inline ::google::protobuf::uint64 GS2C_Guild_Dynamic_Event::guild_id() const {
  return guild_id_;
}
inline void GS2C_Guild_Dynamic_Event::set_guild_id(::google::protobuf::uint64 value) {
  set_has_guild_id();
  guild_id_ = value;
}

// optional string guild_name = 3;
inline bool GS2C_Guild_Dynamic_Event::has_guild_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Guild_Dynamic_Event::set_has_guild_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Guild_Dynamic_Event::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Guild_Dynamic_Event::clear_guild_name() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    guild_name_->clear();
  }
  clear_has_guild_name();
}
inline const ::std::string& GS2C_Guild_Dynamic_Event::guild_name() const {
  return *guild_name_;
}
inline void GS2C_Guild_Dynamic_Event::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void GS2C_Guild_Dynamic_Event::set_guild_name(const char* value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void GS2C_Guild_Dynamic_Event::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GS2C_Guild_Dynamic_Event::mutable_guild_name() {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  return guild_name_;
}
inline ::std::string* GS2C_Guild_Dynamic_Event::release_guild_name() {
  clear_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guild_name_;
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GS2C_Guild_Dynamic_Event::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (guild_name) {
    set_has_guild_name();
    guild_name_ = guild_name;
  } else {
    clear_has_guild_name();
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 player_id = 4;
inline bool GS2C_Guild_Dynamic_Event::has_player_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Guild_Dynamic_Event::set_has_player_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Guild_Dynamic_Event::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Guild_Dynamic_Event::clear_player_id() {
  player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::uint64 GS2C_Guild_Dynamic_Event::player_id() const {
  return player_id_;
}
inline void GS2C_Guild_Dynamic_Event::set_player_id(::google::protobuf::uint64 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string player_name = 5;
inline bool GS2C_Guild_Dynamic_Event::has_player_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GS2C_Guild_Dynamic_Event::set_has_player_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GS2C_Guild_Dynamic_Event::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GS2C_Guild_Dynamic_Event::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& GS2C_Guild_Dynamic_Event::player_name() const {
  return *player_name_;
}
inline void GS2C_Guild_Dynamic_Event::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void GS2C_Guild_Dynamic_Event::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void GS2C_Guild_Dynamic_Event::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GS2C_Guild_Dynamic_Event::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* GS2C_Guild_Dynamic_Event::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GS2C_Guild_Dynamic_Event::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 id_value = 6;
inline bool GS2C_Guild_Dynamic_Event::has_id_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GS2C_Guild_Dynamic_Event::set_has_id_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GS2C_Guild_Dynamic_Event::clear_has_id_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GS2C_Guild_Dynamic_Event::clear_id_value() {
  id_value_ = 0u;
  clear_has_id_value();
}
inline ::google::protobuf::uint32 GS2C_Guild_Dynamic_Event::id_value() const {
  return id_value_;
}
inline void GS2C_Guild_Dynamic_Event::set_id_value(::google::protobuf::uint32 value) {
  set_has_id_value();
  id_value_ = value;
}

// optional string str_value = 7;
inline bool GS2C_Guild_Dynamic_Event::has_str_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GS2C_Guild_Dynamic_Event::set_has_str_value() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GS2C_Guild_Dynamic_Event::clear_has_str_value() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GS2C_Guild_Dynamic_Event::clear_str_value() {
  if (str_value_ != &::google::protobuf::internal::kEmptyString) {
    str_value_->clear();
  }
  clear_has_str_value();
}
inline const ::std::string& GS2C_Guild_Dynamic_Event::str_value() const {
  return *str_value_;
}
inline void GS2C_Guild_Dynamic_Event::set_str_value(const ::std::string& value) {
  set_has_str_value();
  if (str_value_ == &::google::protobuf::internal::kEmptyString) {
    str_value_ = new ::std::string;
  }
  str_value_->assign(value);
}
inline void GS2C_Guild_Dynamic_Event::set_str_value(const char* value) {
  set_has_str_value();
  if (str_value_ == &::google::protobuf::internal::kEmptyString) {
    str_value_ = new ::std::string;
  }
  str_value_->assign(value);
}
inline void GS2C_Guild_Dynamic_Event::set_str_value(const char* value, size_t size) {
  set_has_str_value();
  if (str_value_ == &::google::protobuf::internal::kEmptyString) {
    str_value_ = new ::std::string;
  }
  str_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GS2C_Guild_Dynamic_Event::mutable_str_value() {
  set_has_str_value();
  if (str_value_ == &::google::protobuf::internal::kEmptyString) {
    str_value_ = new ::std::string;
  }
  return str_value_;
}
inline ::std::string* GS2C_Guild_Dynamic_Event::release_str_value() {
  clear_has_str_value();
  if (str_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_value_;
    str_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GS2C_Guild_Dynamic_Event::set_allocated_str_value(::std::string* str_value) {
  if (str_value_ != &::google::protobuf::internal::kEmptyString) {
    delete str_value_;
  }
  if (str_value) {
    set_has_str_value();
    str_value_ = str_value;
  } else {
    clear_has_str_value();
    str_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 event_time = 8;
inline bool GS2C_Guild_Dynamic_Event::has_event_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GS2C_Guild_Dynamic_Event::set_has_event_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GS2C_Guild_Dynamic_Event::clear_has_event_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GS2C_Guild_Dynamic_Event::clear_event_time() {
  event_time_ = GOOGLE_ULONGLONG(0);
  clear_has_event_time();
}
inline ::google::protobuf::uint64 GS2C_Guild_Dynamic_Event::event_time() const {
  return event_time_;
}
inline void GS2C_Guild_Dynamic_Event::set_event_time(::google::protobuf::uint64 value) {
  set_has_event_time();
  event_time_ = value;
}

// optional uint64 item_guid = 9;
inline bool GS2C_Guild_Dynamic_Event::has_item_guid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GS2C_Guild_Dynamic_Event::set_has_item_guid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GS2C_Guild_Dynamic_Event::clear_has_item_guid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GS2C_Guild_Dynamic_Event::clear_item_guid() {
  item_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_item_guid();
}
inline ::google::protobuf::uint64 GS2C_Guild_Dynamic_Event::item_guid() const {
  return item_guid_;
}
inline void GS2C_Guild_Dynamic_Event::set_item_guid(::google::protobuf::uint64 value) {
  set_has_item_guid();
  item_guid_ = value;
}

// -------------------------------------------------------------------

// GS2C_Guild_Dynamic_Event_Log

// repeated .pb.GS2C_Guild_Dynamic_Event guild_evens = 1;
inline int GS2C_Guild_Dynamic_Event_Log::guild_evens_size() const {
  return guild_evens_.size();
}
inline void GS2C_Guild_Dynamic_Event_Log::clear_guild_evens() {
  guild_evens_.Clear();
}
inline const ::pb::GS2C_Guild_Dynamic_Event& GS2C_Guild_Dynamic_Event_Log::guild_evens(int index) const {
  return guild_evens_.Get(index);
}
inline ::pb::GS2C_Guild_Dynamic_Event* GS2C_Guild_Dynamic_Event_Log::mutable_guild_evens(int index) {
  return guild_evens_.Mutable(index);
}
inline ::pb::GS2C_Guild_Dynamic_Event* GS2C_Guild_Dynamic_Event_Log::add_guild_evens() {
  return guild_evens_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Guild_Dynamic_Event >&
GS2C_Guild_Dynamic_Event_Log::guild_evens() const {
  return guild_evens_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_Guild_Dynamic_Event >*
GS2C_Guild_Dynamic_Event_Log::mutable_guild_evens() {
  return &guild_evens_;
}

// -------------------------------------------------------------------

// GS2G_GuildUpdate

// required uint32 type = 1;
inline bool GS2G_GuildUpdate::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2G_GuildUpdate::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2G_GuildUpdate::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2G_GuildUpdate::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 GS2G_GuildUpdate::type() const {
  return type_;
}
inline void GS2G_GuildUpdate::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint64 guild_id = 2;
inline bool GS2G_GuildUpdate::has_guild_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2G_GuildUpdate::set_has_guild_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2G_GuildUpdate::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2G_GuildUpdate::clear_guild_id() {
  guild_id_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_id();
}
inline ::google::protobuf::uint64 GS2G_GuildUpdate::guild_id() const {
  return guild_id_;
}
inline void GS2G_GuildUpdate::set_guild_id(::google::protobuf::uint64 value) {
  set_has_guild_id();
  guild_id_ = value;
}

// optional string guild_name = 3;
inline bool GS2G_GuildUpdate::has_guild_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2G_GuildUpdate::set_has_guild_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2G_GuildUpdate::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2G_GuildUpdate::clear_guild_name() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    guild_name_->clear();
  }
  clear_has_guild_name();
}
inline const ::std::string& GS2G_GuildUpdate::guild_name() const {
  return *guild_name_;
}
inline void GS2G_GuildUpdate::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void GS2G_GuildUpdate::set_guild_name(const char* value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void GS2G_GuildUpdate::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GS2G_GuildUpdate::mutable_guild_name() {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  return guild_name_;
}
inline ::std::string* GS2G_GuildUpdate::release_guild_name() {
  clear_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guild_name_;
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GS2G_GuildUpdate::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (guild_name) {
    set_has_guild_name();
    guild_name_ = guild_name;
  } else {
    clear_has_guild_name();
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::CHAT_TYPE>() {
  return ::pb::CHAT_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::MsgPlayerBaseDataType>() {
  return ::pb::MsgPlayerBaseDataType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ENUM_FRIEND_TYPE>() {
  return ::pb::ENUM_FRIEND_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::FRIEND_SEARCH_TYPE>() {
  return ::pb::FRIEND_SEARCH_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::FRIEND_SEARCH_TYPE_RESULT>() {
  return ::pb::FRIEND_SEARCH_TYPE_RESULT_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::GUILD_DYNAMIC_EVENT>() {
  return ::pb::GUILD_DYNAMIC_EVENT_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Social_2eproto__INCLUDED
