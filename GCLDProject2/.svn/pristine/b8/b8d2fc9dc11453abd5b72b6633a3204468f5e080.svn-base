// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Web.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Web.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* GetGameServerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGameServerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameServerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameServerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebGetPlayerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebGetPlayerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebGetPlayerListRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebGetPlayerListRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebPay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebPay_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebPayRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebPayRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebPayToDatabase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebPayToDatabase_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebPayToDatabaseRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebPayToDatabaseRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* GXDB_PayOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GXDB_PayOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sdk_PayResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sdk_PayResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServersMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServersMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerForbid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerForbid_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetPlayerVip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetPlayerVip_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReCreateOder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReCreateOder_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServersNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServersNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* HotResReload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HotResReload_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnlinePlayerCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnlinePlayerCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* serverInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  serverInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateGiftCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateGiftCode_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Language_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WebPayCurrentType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SdkChannelType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PlatformType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WebPayResult_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Web_2eproto() {
  protobuf_AddDesc_Web_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Web.proto");
  GOOGLE_CHECK(file != NULL);
  GetGameServerList_descriptor_ = file->message_type(0);
  static const int GetGameServerList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameServerList, lang_),
  };
  GetGameServerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGameServerList_descriptor_,
      GetGameServerList::default_instance_,
      GetGameServerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameServerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameServerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGameServerList));
  GameServerInfo_descriptor_ = file->message_type(1);
  static const int GameServerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerInfo, name_),
  };
  GameServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameServerInfo_descriptor_,
      GameServerInfo::default_instance_,
      GameServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameServerInfo));
  GameServerList_descriptor_ = file->message_type(2);
  static const int GameServerList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerList, infos_),
  };
  GameServerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameServerList_descriptor_,
      GameServerList::default_instance_,
      GameServerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameServerList));
  WebGetPlayerList_descriptor_ = file->message_type(3);
  static const int WebGetPlayerList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGetPlayerList, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGetPlayerList, user_id_),
  };
  WebGetPlayerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebGetPlayerList_descriptor_,
      WebGetPlayerList::default_instance_,
      WebGetPlayerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGetPlayerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGetPlayerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebGetPlayerList));
  WebPlayerInfo_descriptor_ = file->message_type(4);
  static const int WebPlayerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPlayerInfo, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPlayerInfo, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPlayerInfo, prefession_name_),
  };
  WebPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebPlayerInfo_descriptor_,
      WebPlayerInfo::default_instance_,
      WebPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebPlayerInfo));
  WebGetPlayerListRet_descriptor_ = file->message_type(5);
  static const int WebGetPlayerListRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGetPlayerListRet, player_info_),
  };
  WebGetPlayerListRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebGetPlayerListRet_descriptor_,
      WebGetPlayerListRet::default_instance_,
      WebGetPlayerListRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGetPlayerListRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGetPlayerListRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebGetPlayerListRet));
  WebPay_descriptor_ = file->message_type(6);
  static const int WebPay_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPay, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPay, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPay, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPay, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPay, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPay, sdk_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPay, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPay, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPay, present_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPay, product_id_),
  };
  WebPay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebPay_descriptor_,
      WebPay::default_instance_,
      WebPay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebPay));
  WebPayRet_descriptor_ = file->message_type(7);
  static const int WebPayRet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPayRet, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPayRet, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPayRet, error_msg_),
  };
  WebPayRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebPayRet_descriptor_,
      WebPayRet::default_instance_,
      WebPayRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPayRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPayRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebPayRet));
  WebPayToDatabase_descriptor_ = file->message_type(8);
  static const int WebPayToDatabase_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPayToDatabase, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPayToDatabase, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPayToDatabase, present_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPayToDatabase, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPayToDatabase, sdk_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPayToDatabase, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPayToDatabase, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPayToDatabase, platform_),
  };
  WebPayToDatabase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebPayToDatabase_descriptor_,
      WebPayToDatabase::default_instance_,
      WebPayToDatabase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPayToDatabase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPayToDatabase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebPayToDatabase));
  WebPayToDatabaseRet_descriptor_ = file->message_type(9);
  static const int WebPayToDatabaseRet_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPayToDatabaseRet, is_ok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPayToDatabaseRet, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPayToDatabaseRet, is_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPayToDatabaseRet, order_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPayToDatabaseRet, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPayToDatabaseRet, error_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPayToDatabaseRet, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPayToDatabaseRet, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPayToDatabaseRet, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPayToDatabaseRet, platform_),
  };
  WebPayToDatabaseRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebPayToDatabaseRet_descriptor_,
      WebPayToDatabaseRet::default_instance_,
      WebPayToDatabaseRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPayToDatabaseRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPayToDatabaseRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebPayToDatabaseRet));
  GXDB_PayOrder_descriptor_ = file->message_type(10);
  static const int GXDB_PayOrder_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GXDB_PayOrder, is_new_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GXDB_PayOrder, product_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GXDB_PayOrder, vip_xp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GXDB_PayOrder, crystal_final_),
  };
  GXDB_PayOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GXDB_PayOrder_descriptor_,
      GXDB_PayOrder::default_instance_,
      GXDB_PayOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GXDB_PayOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GXDB_PayOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GXDB_PayOrder));
  Sdk_PayResult_descriptor_ = file->message_type(11);
  static const int Sdk_PayResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sdk_PayResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sdk_PayResult, payinfo_),
  };
  Sdk_PayResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sdk_PayResult_descriptor_,
      Sdk_PayResult::default_instance_,
      Sdk_PayResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sdk_PayResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sdk_PayResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sdk_PayResult));
  ServerCode_descriptor_ = file->message_type(12);
  static const int ServerCode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCode, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCode, code_),
  };
  ServerCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerCode_descriptor_,
      ServerCode::default_instance_,
      ServerCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerCode));
  ServerResponse_descriptor_ = file->message_type(13);
  static const int ServerResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerResponse, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerResponse, reg_),
  };
  ServerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerResponse_descriptor_,
      ServerResponse::default_instance_,
      ServerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerResponse));
  ServersMail_descriptor_ = file->message_type(14);
  static const int ServersMail_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServersMail, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServersMail, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServersMail, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServersMail, moldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServersMail, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServersMail, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServersMail, mail_award_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServersMail, alv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServersMail, blv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServersMail, avip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServersMail, bvip_),
  };
  ServersMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServersMail_descriptor_,
      ServersMail::default_instance_,
      ServersMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServersMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServersMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServersMail));
  PlayerMail_descriptor_ = file->message_type(15);
  static const int PlayerMail_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMail, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMail, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMail, moldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMail, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMail, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMail, mail_award_),
  };
  PlayerMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerMail_descriptor_,
      PlayerMail::default_instance_,
      PlayerMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerMail));
  PlayerForbid_descriptor_ = file->message_type(16);
  static const int PlayerForbid_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerForbid, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerForbid, lordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerForbid, forbidid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerForbid, time_),
  };
  PlayerForbid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerForbid_descriptor_,
      PlayerForbid::default_instance_,
      PlayerForbid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerForbid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerForbid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerForbid));
  SetPlayerVip_descriptor_ = file->message_type(17);
  static const int SetPlayerVip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPlayerVip, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPlayerVip, lordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPlayerVip, typevalue_),
  };
  SetPlayerVip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetPlayerVip_descriptor_,
      SetPlayerVip::default_instance_,
      SetPlayerVip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPlayerVip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPlayerVip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetPlayerVip));
  ReCreateOder_descriptor_ = file->message_type(18);
  static const int ReCreateOder_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReCreateOder, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReCreateOder, lordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReCreateOder, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReCreateOder, oredrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReCreateOder, platno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReCreateOder, platid_),
  };
  ReCreateOder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReCreateOder_descriptor_,
      ReCreateOder::default_instance_,
      ReCreateOder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReCreateOder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReCreateOder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReCreateOder));
  ServersNotice_descriptor_ = file->message_type(19);
  static const int ServersNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServersNotice, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServersNotice, notice_),
  };
  ServersNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServersNotice_descriptor_,
      ServersNotice::default_instance_,
      ServersNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServersNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServersNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServersNotice));
  HotResReload_descriptor_ = file->message_type(20);
  static const int HotResReload_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotResReload, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotResReload, type_),
  };
  HotResReload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HotResReload_descriptor_,
      HotResReload::default_instance_,
      HotResReload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotResReload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotResReload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HotResReload));
  OnlinePlayerCount_descriptor_ = file->message_type(21);
  static const int OnlinePlayerCount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlinePlayerCount, sid_),
  };
  OnlinePlayerCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnlinePlayerCount_descriptor_,
      OnlinePlayerCount::default_instance_,
      OnlinePlayerCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlinePlayerCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlinePlayerCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnlinePlayerCount));
  serverInfo_descriptor_ = file->message_type(22);
  static const int serverInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serverInfo, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serverInfo, info_),
  };
  serverInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      serverInfo_descriptor_,
      serverInfo::default_instance_,
      serverInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serverInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serverInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(serverInfo));
  CreateGiftCode_descriptor_ = file->message_type(23);
  static const int CreateGiftCode_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGiftCode, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGiftCode, giftid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGiftCode, giftname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGiftCode, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGiftCode, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGiftCode, gift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGiftCode, reuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGiftCode, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGiftCode, platno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGiftCode, mark_),
  };
  CreateGiftCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateGiftCode_descriptor_,
      CreateGiftCode::default_instance_,
      CreateGiftCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGiftCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGiftCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateGiftCode));
  Language_descriptor_ = file->enum_type(0);
  WebPayCurrentType_descriptor_ = file->enum_type(1);
  SdkChannelType_descriptor_ = file->enum_type(2);
  PlatformType_descriptor_ = file->enum_type(3);
  WebPayResult_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Web_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGameServerList_descriptor_, &GetGameServerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameServerInfo_descriptor_, &GameServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameServerList_descriptor_, &GameServerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebGetPlayerList_descriptor_, &WebGetPlayerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebPlayerInfo_descriptor_, &WebPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebGetPlayerListRet_descriptor_, &WebGetPlayerListRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebPay_descriptor_, &WebPay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebPayRet_descriptor_, &WebPayRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebPayToDatabase_descriptor_, &WebPayToDatabase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebPayToDatabaseRet_descriptor_, &WebPayToDatabaseRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GXDB_PayOrder_descriptor_, &GXDB_PayOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sdk_PayResult_descriptor_, &Sdk_PayResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerCode_descriptor_, &ServerCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerResponse_descriptor_, &ServerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServersMail_descriptor_, &ServersMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerMail_descriptor_, &PlayerMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerForbid_descriptor_, &PlayerForbid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetPlayerVip_descriptor_, &SetPlayerVip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReCreateOder_descriptor_, &ReCreateOder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServersNotice_descriptor_, &ServersNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HotResReload_descriptor_, &HotResReload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnlinePlayerCount_descriptor_, &OnlinePlayerCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    serverInfo_descriptor_, &serverInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateGiftCode_descriptor_, &CreateGiftCode::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Web_2eproto() {
  delete GetGameServerList::default_instance_;
  delete GetGameServerList_reflection_;
  delete GameServerInfo::default_instance_;
  delete GameServerInfo_reflection_;
  delete GameServerList::default_instance_;
  delete GameServerList_reflection_;
  delete WebGetPlayerList::default_instance_;
  delete WebGetPlayerList_reflection_;
  delete WebPlayerInfo::default_instance_;
  delete WebPlayerInfo_reflection_;
  delete WebGetPlayerListRet::default_instance_;
  delete WebGetPlayerListRet_reflection_;
  delete WebPay::default_instance_;
  delete WebPay_reflection_;
  delete WebPayRet::default_instance_;
  delete WebPayRet_reflection_;
  delete WebPayToDatabase::default_instance_;
  delete WebPayToDatabase_reflection_;
  delete WebPayToDatabaseRet::default_instance_;
  delete WebPayToDatabaseRet_reflection_;
  delete GXDB_PayOrder::default_instance_;
  delete GXDB_PayOrder_reflection_;
  delete Sdk_PayResult::default_instance_;
  delete Sdk_PayResult_reflection_;
  delete ServerCode::default_instance_;
  delete ServerCode_reflection_;
  delete ServerResponse::default_instance_;
  delete ServerResponse_reflection_;
  delete ServersMail::default_instance_;
  delete ServersMail_reflection_;
  delete PlayerMail::default_instance_;
  delete PlayerMail_reflection_;
  delete PlayerForbid::default_instance_;
  delete PlayerForbid_reflection_;
  delete SetPlayerVip::default_instance_;
  delete SetPlayerVip_reflection_;
  delete ReCreateOder::default_instance_;
  delete ReCreateOder_reflection_;
  delete ServersNotice::default_instance_;
  delete ServersNotice_reflection_;
  delete HotResReload::default_instance_;
  delete HotResReload_reflection_;
  delete OnlinePlayerCount::default_instance_;
  delete OnlinePlayerCount_reflection_;
  delete serverInfo::default_instance_;
  delete serverInfo_reflection_;
  delete CreateGiftCode::default_instance_;
  delete CreateGiftCode_reflection_;
}

void protobuf_AddDesc_Web_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tWeb.proto\022\002pb\"/\n\021GetGameServerList\022\032\n\004"
    "lang\030\001 \001(\0162\014.pb.Language\"*\n\016GameServerIn"
    "fo\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\"3\n\016GameServ"
    "erList\022!\n\005infos\030\001 \003(\0132\022.pb.GameServerInf"
    "o\"6\n\020WebGetPlayerList\022\021\n\tserver_id\030\001 \001(\r"
    "\022\017\n\007user_id\030\002 \001(\t\"L\n\rWebPlayerInfo\022\017\n\007ro"
    "le_id\030\001 \001(\t\022\021\n\trole_name\030\002 \001(\t\022\027\n\017prefes"
    "sion_name\030\003 \001(\t\"=\n\023WebGetPlayerListRet\022&"
    "\n\013player_info\030\001 \003(\0132\021.pb.WebPlayerInfo\"\371"
    "\001\n\006WebPay\022\020\n\010order_id\030\001 \001(\t\022#\n\007channel\030\002"
    " \001(\0162\022.pb.SdkChannelType\022\"\n\010platform\030\003 \001"
    "(\0162\020.pb.PlatformType\022\'\n\010currency\030\004 \001(\0162\025"
    ".pb.WebPayCurrentType\022\r\n\005money\030\005 \001(\002\022\023\n\013"
    "sdk_account\030\006 \001(\t\022\017\n\007role_id\030\007 \001(\t\022\021\n\tse"
    "rver_id\030\010 \001(\r\022\017\n\007present\030\t \001(\002\022\022\n\nproduc"
    "t_id\030\n \001(\t\"R\n\tWebPayRet\022 \n\006result\030\001 \001(\0162"
    "\020.pb.WebPayResult\022\020\n\010order_id\030\002 \001(\t\022\021\n\te"
    "rror_msg\030\003 \001(\t\"\307\001\n\020WebPayToDatabase\022\020\n\010o"
    "rder_id\030\001 \001(\t\022\020\n\010currency\030\002 \001(\r\022\017\n\007prese"
    "nt\030\003 \001(\002\022\021\n\tplayer_id\030\004 \001(\004\022\023\n\013sdk_accou"
    "nt\030\005 \001(\t\022\r\n\005money\030\006 \001(\002\022#\n\007channel\030\007 \001(\016"
    "2\022.pb.SdkChannelType\022\"\n\010platform\030\010 \001(\0162\020"
    ".pb.PlatformType\"\222\002\n\023WebPayToDatabaseRet"
    "\022\r\n\005is_ok\030\001 \001(\010\022\020\n\010order_id\030\002 \001(\t\022\021\n\tis_"
    "online\030\003 \001(\010\022\'\n\014order_record\030\004 \001(\0132\021.pb."
    "GXDB_PayOrder\022\021\n\tplayer_id\030\005 \001(\004\022\021\n\terro"
    "r_msg\030\006 \001(\t\022#\n\007channel\030\007 \001(\0162\022.pb.SdkCha"
    "nnelType\022 \n\006result\030\010 \001(\0162\020.pb.WebPayResu"
    "lt\022\r\n\005money\030\t \001(\002\022\"\n\010platform\030\n \001(\0162\020.pb"
    ".PlatformType\"Z\n\rGXDB_PayOrder\022\016\n\006is_new"
    "\030\001 \001(\010\022\022\n\nproduct_id\030\002 \001(\t\022\016\n\006vip_xp\030\003 \001"
    "(\r\022\025\n\rcrystal_final\030\004 \001(\r\"K\n\rSdk_PayResu"
    "lt\022\035\n\006result\030\001 \001(\0132\r.pb.WebPayRet\022\033\n\007pay"
    "Info\030\002 \001(\0132\n.pb.WebPay\"&\n\nServerCode\022\n\n\002"
    "id\030\001 \001(\005\022\014\n\004code\030\002 \001(\005\";\n\016ServerResponse"
    "\022\014\n\004code\030\001 \001(\005\022\033\n\003reg\030\002 \003(\0132\016.pb.ServerC"
    "ode\"\265\001\n\013ServersMail\022\013\n\003sid\030\001 \001(\t\022\016\n\006onli"
    "ne\030\002 \001(\005\022\017\n\007channel\030\003 \001(\t\022\016\n\006moldid\030\004 \001("
    "\005\022\r\n\005title\030\005 \001(\t\022\017\n\007content\030\006 \001(\t\022\022\n\nmai"
    "l_award\030\007 \001(\t\022\013\n\003alv\030\010 \001(\005\022\013\n\003blv\030\t \001(\005\022"
    "\014\n\004avip\030\n \001(\005\022\014\n\004bvip\030\013 \001(\005\"i\n\nPlayerMai"
    "l\022\013\n\003sid\030\001 \001(\005\022\n\n\002to\030\002 \001(\t\022\016\n\006moldid\030\003 \001"
    "(\005\022\r\n\005title\030\004 \001(\t\022\017\n\007content\030\005 \001(\t\022\022\n\nma"
    "il_award\030\006 \001(\t\"K\n\014PlayerForbid\022\013\n\003sid\030\001 "
    "\001(\005\022\016\n\006lordId\030\002 \001(\t\022\020\n\010forbidId\030\003 \001(\005\022\014\n"
    "\004time\030\004 \001(\005\">\n\014SetPlayerVip\022\013\n\003sid\030\001 \001(\005"
    "\022\016\n\006lordId\030\002 \001(\t\022\021\n\ttypeValue\030\003 \001(\005\"k\n\014R"
    "eCreateOder\022\013\n\003sid\030\001 \001(\005\022\016\n\006lordId\030\002 \001(\t"
    "\022\r\n\005money\030\003 \001(\005\022\017\n\007oredrId\030\004 \001(\t\022\016\n\006plat"
    "No\030\005 \001(\t\022\016\n\006platId\030\006 \001(\t\",\n\rServersNotic"
    "e\022\013\n\003sid\030\001 \001(\t\022\016\n\006notice\030\002 \001(\t\")\n\014HotRes"
    "Reload\022\013\n\003sid\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\" \n\021Onl"
    "inePlayerCount\022\013\n\003sid\030\001 \001(\005\"\'\n\nserverInf"
    "o\022\013\n\003sid\030\001 \001(\005\022\014\n\004info\030\002 \001(\t\"\261\001\n\016CreateG"
    "iftCode\022\017\n\007operate\030\001 \001(\005\022\016\n\006giftId\030\002 \001(\005"
    "\022\020\n\010giftName\030\003 \001(\t\022\021\n\tbeginTime\030\004 \001(\t\022\017\n"
    "\007endTime\030\005 \001(\t\022\014\n\004gift\030\006 \001(\t\022\r\n\005reuse\030\007 "
    "\001(\005\022\r\n\005count\030\010 \001(\005\022\016\n\006platNo\030\t \001(\t\022\014\n\004ma"
    "rk\030\n \001(\t*2\n\010Language\022\006\n\002sc\020\000\022\006\n\002en\020\001\022\006\n\002"
    "th\020\002\022\006\n\002ve\020\003\022\006\n\002tc\020\004*5\n\021WebPayCurrentTyp"
    "e\022\017\n\013WEB_PAY_USD\020\000\022\017\n\013WEB_PAY_RMB\020\001*\302\001\n\016"
    "SdkChannelType\022\014\n\010SDK_NONE\020\000\022\016\n\nSDK_CAOH"
    "UA\020\001\022\n\n\006SDK_UC\020\002\022\016\n\nSDK_HUAWEI\020\003\022\r\n\tSDK_"
    "JINLI\020\004\022\013\n\007SDK_360\020\005\022\r\n\tSDK_MEIZU\020\006\022\016\n\nS"
    "DK_XIAOMI\020\007\022\014\n\010SDK_OPPO\020\010\022\014\n\010SDK_VIVO\020\t\022"
    "\022\n\016SDK_YINGYOUBAO\020\n\022\013\n\007SDK_ALL\020\013*b\n\014Plat"
    "formType\022\013\n\007WINDOWS\020\000\022\013\n\007ANDROID\020\001\022\007\n\003IO"
    "S\020\002\022\017\n\013THIRD_PARTY\020\003\022\014\n\010WEB_PAGE\020\004\022\020\n\014AL"
    "L_PLATFORM\020\005*\342\001\n\014WebPayResult\022\026\n\022WEB_PAY"
    "_RERSULT_OK\020\000\022\030\n\024CAN_NOT_FIND_ACCOUNT\020\001\022"
    "\025\n\021CAN_NOT_FIND_ROLE\020\002\022\035\n\031CHANNEL_PLATFO"
    "RM_ID_ERROR\020\003\022\027\n\023CAN_NOT_FIND_SERVER\020\004\022\033"
    "\n\027CAN_NOT_FIND_MONEY_TYPE\020\005\022\032\n\026CAN_NOT_F"
    "IND_ITEM_TYPE\020\006\022\030\n\024CAN_MONEY_NOT_ENOUGH\020"
    "\007", 2961);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Web.proto", &protobuf_RegisterTypes);
  GetGameServerList::default_instance_ = new GetGameServerList();
  GameServerInfo::default_instance_ = new GameServerInfo();
  GameServerList::default_instance_ = new GameServerList();
  WebGetPlayerList::default_instance_ = new WebGetPlayerList();
  WebPlayerInfo::default_instance_ = new WebPlayerInfo();
  WebGetPlayerListRet::default_instance_ = new WebGetPlayerListRet();
  WebPay::default_instance_ = new WebPay();
  WebPayRet::default_instance_ = new WebPayRet();
  WebPayToDatabase::default_instance_ = new WebPayToDatabase();
  WebPayToDatabaseRet::default_instance_ = new WebPayToDatabaseRet();
  GXDB_PayOrder::default_instance_ = new GXDB_PayOrder();
  Sdk_PayResult::default_instance_ = new Sdk_PayResult();
  ServerCode::default_instance_ = new ServerCode();
  ServerResponse::default_instance_ = new ServerResponse();
  ServersMail::default_instance_ = new ServersMail();
  PlayerMail::default_instance_ = new PlayerMail();
  PlayerForbid::default_instance_ = new PlayerForbid();
  SetPlayerVip::default_instance_ = new SetPlayerVip();
  ReCreateOder::default_instance_ = new ReCreateOder();
  ServersNotice::default_instance_ = new ServersNotice();
  HotResReload::default_instance_ = new HotResReload();
  OnlinePlayerCount::default_instance_ = new OnlinePlayerCount();
  serverInfo::default_instance_ = new serverInfo();
  CreateGiftCode::default_instance_ = new CreateGiftCode();
  GetGameServerList::default_instance_->InitAsDefaultInstance();
  GameServerInfo::default_instance_->InitAsDefaultInstance();
  GameServerList::default_instance_->InitAsDefaultInstance();
  WebGetPlayerList::default_instance_->InitAsDefaultInstance();
  WebPlayerInfo::default_instance_->InitAsDefaultInstance();
  WebGetPlayerListRet::default_instance_->InitAsDefaultInstance();
  WebPay::default_instance_->InitAsDefaultInstance();
  WebPayRet::default_instance_->InitAsDefaultInstance();
  WebPayToDatabase::default_instance_->InitAsDefaultInstance();
  WebPayToDatabaseRet::default_instance_->InitAsDefaultInstance();
  GXDB_PayOrder::default_instance_->InitAsDefaultInstance();
  Sdk_PayResult::default_instance_->InitAsDefaultInstance();
  ServerCode::default_instance_->InitAsDefaultInstance();
  ServerResponse::default_instance_->InitAsDefaultInstance();
  ServersMail::default_instance_->InitAsDefaultInstance();
  PlayerMail::default_instance_->InitAsDefaultInstance();
  PlayerForbid::default_instance_->InitAsDefaultInstance();
  SetPlayerVip::default_instance_->InitAsDefaultInstance();
  ReCreateOder::default_instance_->InitAsDefaultInstance();
  ServersNotice::default_instance_->InitAsDefaultInstance();
  HotResReload::default_instance_->InitAsDefaultInstance();
  OnlinePlayerCount::default_instance_->InitAsDefaultInstance();
  serverInfo::default_instance_->InitAsDefaultInstance();
  CreateGiftCode::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Web_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Web_2eproto {
  StaticDescriptorInitializer_Web_2eproto() {
    protobuf_AddDesc_Web_2eproto();
  }
} static_descriptor_initializer_Web_2eproto_;
const ::google::protobuf::EnumDescriptor* Language_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Language_descriptor_;
}
bool Language_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WebPayCurrentType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebPayCurrentType_descriptor_;
}
bool WebPayCurrentType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SdkChannelType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkChannelType_descriptor_;
}
bool SdkChannelType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlatformType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlatformType_descriptor_;
}
bool PlatformType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WebPayResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebPayResult_descriptor_;
}
bool WebPayResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GetGameServerList::kLangFieldNumber;
#endif  // !_MSC_VER

GetGameServerList::GetGameServerList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGameServerList::InitAsDefaultInstance() {
}

GetGameServerList::GetGameServerList(const GetGameServerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGameServerList::SharedCtor() {
  _cached_size_ = 0;
  lang_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGameServerList::~GetGameServerList() {
  SharedDtor();
}

void GetGameServerList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGameServerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGameServerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGameServerList_descriptor_;
}

const GetGameServerList& GetGameServerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Web_2eproto();
  return *default_instance_;
}

GetGameServerList* GetGameServerList::default_instance_ = NULL;

GetGameServerList* GetGameServerList::New() const {
  return new GetGameServerList;
}

void GetGameServerList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lang_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGameServerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.Language lang = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Language_IsValid(value)) {
            set_lang(static_cast< ::pb::Language >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGameServerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.Language lang = 1;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->lang(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGameServerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.Language lang = 1;
  if (has_lang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->lang(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGameServerList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.Language lang = 1;
    if (has_lang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lang());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGameServerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGameServerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGameServerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGameServerList::MergeFrom(const GetGameServerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lang()) {
      set_lang(from.lang());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGameServerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGameServerList::CopyFrom(const GetGameServerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGameServerList::IsInitialized() const {

  return true;
}

void GetGameServerList::Swap(GetGameServerList* other) {
  if (other != this) {
    std::swap(lang_, other->lang_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGameServerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGameServerList_descriptor_;
  metadata.reflection = GetGameServerList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameServerInfo::kIdFieldNumber;
const int GameServerInfo::kNameFieldNumber;
#endif  // !_MSC_VER

GameServerInfo::GameServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameServerInfo::InitAsDefaultInstance() {
}

GameServerInfo::GameServerInfo(const GameServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameServerInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameServerInfo::~GameServerInfo() {
  SharedDtor();
}

void GameServerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GameServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameServerInfo_descriptor_;
}

const GameServerInfo& GameServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Web_2eproto();
  return *default_instance_;
}

GameServerInfo* GameServerInfo::default_instance_ = NULL;

GameServerInfo* GameServerInfo::New() const {
  return new GameServerInfo;
}

void GameServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameServerInfo::MergeFrom(const GameServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerInfo::CopyFrom(const GameServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerInfo::IsInitialized() const {

  return true;
}

void GameServerInfo::Swap(GameServerInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameServerInfo_descriptor_;
  metadata.reflection = GameServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameServerList::kInfosFieldNumber;
#endif  // !_MSC_VER

GameServerList::GameServerList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameServerList::InitAsDefaultInstance() {
}

GameServerList::GameServerList(const GameServerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameServerList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameServerList::~GameServerList() {
  SharedDtor();
}

void GameServerList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameServerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameServerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameServerList_descriptor_;
}

const GameServerList& GameServerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Web_2eproto();
  return *default_instance_;
}

GameServerList* GameServerList::default_instance_ = NULL;

GameServerList* GameServerList::New() const {
  return new GameServerList;
}

void GameServerList::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameServerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GameServerInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameServerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GameServerInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameServerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GameServerInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameServerList::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GameServerInfo infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameServerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameServerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameServerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameServerList::MergeFrom(const GameServerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameServerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerList::CopyFrom(const GameServerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerList::IsInitialized() const {

  return true;
}

void GameServerList::Swap(GameServerList* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameServerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameServerList_descriptor_;
  metadata.reflection = GameServerList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WebGetPlayerList::kServerIdFieldNumber;
const int WebGetPlayerList::kUserIdFieldNumber;
#endif  // !_MSC_VER

WebGetPlayerList::WebGetPlayerList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WebGetPlayerList::InitAsDefaultInstance() {
}

WebGetPlayerList::WebGetPlayerList(const WebGetPlayerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WebGetPlayerList::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebGetPlayerList::~WebGetPlayerList() {
  SharedDtor();
}

void WebGetPlayerList::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (this != default_instance_) {
  }
}

void WebGetPlayerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebGetPlayerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebGetPlayerList_descriptor_;
}

const WebGetPlayerList& WebGetPlayerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Web_2eproto();
  return *default_instance_;
}

WebGetPlayerList* WebGetPlayerList::default_instance_ = NULL;

WebGetPlayerList* WebGetPlayerList::New() const {
  return new WebGetPlayerList;
}

void WebGetPlayerList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebGetPlayerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }

      // optional string user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WebGetPlayerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  // optional string user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WebGetPlayerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  // optional string user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WebGetPlayerList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // optional string user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebGetPlayerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebGetPlayerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebGetPlayerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebGetPlayerList::MergeFrom(const WebGetPlayerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebGetPlayerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebGetPlayerList::CopyFrom(const WebGetPlayerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebGetPlayerList::IsInitialized() const {

  return true;
}

void WebGetPlayerList::Swap(WebGetPlayerList* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebGetPlayerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebGetPlayerList_descriptor_;
  metadata.reflection = WebGetPlayerList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WebPlayerInfo::kRoleIdFieldNumber;
const int WebPlayerInfo::kRoleNameFieldNumber;
const int WebPlayerInfo::kPrefessionNameFieldNumber;
#endif  // !_MSC_VER

WebPlayerInfo::WebPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WebPlayerInfo::InitAsDefaultInstance() {
}

WebPlayerInfo::WebPlayerInfo(const WebPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WebPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prefession_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebPlayerInfo::~WebPlayerInfo() {
  SharedDtor();
}

void WebPlayerInfo::SharedDtor() {
  if (role_id_ != &::google::protobuf::internal::kEmptyString) {
    delete role_id_;
  }
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (prefession_name_ != &::google::protobuf::internal::kEmptyString) {
    delete prefession_name_;
  }
  if (this != default_instance_) {
  }
}

void WebPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebPlayerInfo_descriptor_;
}

const WebPlayerInfo& WebPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Web_2eproto();
  return *default_instance_;
}

WebPlayerInfo* WebPlayerInfo::default_instance_ = NULL;

WebPlayerInfo* WebPlayerInfo::New() const {
  return new WebPlayerInfo;
}

void WebPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_role_id()) {
      if (role_id_ != &::google::protobuf::internal::kEmptyString) {
        role_id_->clear();
      }
    }
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    if (has_prefession_name()) {
      if (prefession_name_ != &::google::protobuf::internal::kEmptyString) {
        prefession_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_id().data(), this->role_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }

      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_prefession_name;
        break;
      }

      // optional string prefession_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prefession_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefession_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prefession_name().data(), this->prefession_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WebPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_id().data(), this->role_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->role_id(), output);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }

  // optional string prefession_name = 3;
  if (has_prefession_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prefession_name().data(), this->prefession_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->prefession_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WebPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_id().data(), this->role_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->role_id(), target);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // optional string prefession_name = 3;
  if (has_prefession_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prefession_name().data(), this->prefession_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->prefession_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WebPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_id());
    }

    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional string prefession_name = 3;
    if (has_prefession_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prefession_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebPlayerInfo::MergeFrom(const WebPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_prefession_name()) {
      set_prefession_name(from.prefession_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebPlayerInfo::CopyFrom(const WebPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebPlayerInfo::IsInitialized() const {

  return true;
}

void WebPlayerInfo::Swap(WebPlayerInfo* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(prefession_name_, other->prefession_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebPlayerInfo_descriptor_;
  metadata.reflection = WebPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WebGetPlayerListRet::kPlayerInfoFieldNumber;
#endif  // !_MSC_VER

WebGetPlayerListRet::WebGetPlayerListRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WebGetPlayerListRet::InitAsDefaultInstance() {
}

WebGetPlayerListRet::WebGetPlayerListRet(const WebGetPlayerListRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WebGetPlayerListRet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebGetPlayerListRet::~WebGetPlayerListRet() {
  SharedDtor();
}

void WebGetPlayerListRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WebGetPlayerListRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebGetPlayerListRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebGetPlayerListRet_descriptor_;
}

const WebGetPlayerListRet& WebGetPlayerListRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Web_2eproto();
  return *default_instance_;
}

WebGetPlayerListRet* WebGetPlayerListRet::default_instance_ = NULL;

WebGetPlayerListRet* WebGetPlayerListRet::New() const {
  return new WebGetPlayerListRet;
}

void WebGetPlayerListRet::Clear() {
  player_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebGetPlayerListRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.WebPlayerInfo player_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_player_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WebGetPlayerListRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.WebPlayerInfo player_info = 1;
  for (int i = 0; i < this->player_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WebGetPlayerListRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.WebPlayerInfo player_info = 1;
  for (int i = 0; i < this->player_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WebGetPlayerListRet::ByteSize() const {
  int total_size = 0;

  // repeated .pb.WebPlayerInfo player_info = 1;
  total_size += 1 * this->player_info_size();
  for (int i = 0; i < this->player_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebGetPlayerListRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebGetPlayerListRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebGetPlayerListRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebGetPlayerListRet::MergeFrom(const WebGetPlayerListRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_info_.MergeFrom(from.player_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebGetPlayerListRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebGetPlayerListRet::CopyFrom(const WebGetPlayerListRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebGetPlayerListRet::IsInitialized() const {

  return true;
}

void WebGetPlayerListRet::Swap(WebGetPlayerListRet* other) {
  if (other != this) {
    player_info_.Swap(&other->player_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebGetPlayerListRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebGetPlayerListRet_descriptor_;
  metadata.reflection = WebGetPlayerListRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WebPay::kOrderIdFieldNumber;
const int WebPay::kChannelFieldNumber;
const int WebPay::kPlatformFieldNumber;
const int WebPay::kCurrencyFieldNumber;
const int WebPay::kMoneyFieldNumber;
const int WebPay::kSdkAccountFieldNumber;
const int WebPay::kRoleIdFieldNumber;
const int WebPay::kServerIdFieldNumber;
const int WebPay::kPresentFieldNumber;
const int WebPay::kProductIdFieldNumber;
#endif  // !_MSC_VER

WebPay::WebPay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WebPay::InitAsDefaultInstance() {
}

WebPay::WebPay(const WebPay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WebPay::SharedCtor() {
  _cached_size_ = 0;
  order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = 0;
  platform_ = 0;
  currency_ = 0;
  money_ = 0;
  sdk_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = 0u;
  present_ = 0;
  product_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebPay::~WebPay() {
  SharedDtor();
}

void WebPay::SharedDtor() {
  if (order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete order_id_;
  }
  if (sdk_account_ != &::google::protobuf::internal::kEmptyString) {
    delete sdk_account_;
  }
  if (role_id_ != &::google::protobuf::internal::kEmptyString) {
    delete role_id_;
  }
  if (product_id_ != &::google::protobuf::internal::kEmptyString) {
    delete product_id_;
  }
  if (this != default_instance_) {
  }
}

void WebPay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebPay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebPay_descriptor_;
}

const WebPay& WebPay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Web_2eproto();
  return *default_instance_;
}

WebPay* WebPay::default_instance_ = NULL;

WebPay* WebPay::New() const {
  return new WebPay;
}

void WebPay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_order_id()) {
      if (order_id_ != &::google::protobuf::internal::kEmptyString) {
        order_id_->clear();
      }
    }
    channel_ = 0;
    platform_ = 0;
    currency_ = 0;
    money_ = 0;
    if (has_sdk_account()) {
      if (sdk_account_ != &::google::protobuf::internal::kEmptyString) {
        sdk_account_->clear();
      }
    }
    if (has_role_id()) {
      if (role_id_ != &::google::protobuf::internal::kEmptyString) {
        role_id_->clear();
      }
    }
    server_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    present_ = 0;
    if (has_product_id()) {
      if (product_id_ != &::google::protobuf::internal::kEmptyString) {
        product_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebPay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string order_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->order_id().data(), this->order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional .pb.SdkChannelType channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::SdkChannelType_IsValid(value)) {
            set_channel(static_cast< ::pb::SdkChannelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_platform;
        break;
      }

      // optional .pb.PlatformType platform = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::PlatformType_IsValid(value)) {
            set_platform(static_cast< ::pb::PlatformType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_currency;
        break;
      }

      // optional .pb.WebPayCurrentType currency = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currency:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::WebPayCurrentType_IsValid(value)) {
            set_currency(static_cast< ::pb::WebPayCurrentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_money;
        break;
      }

      // optional float money = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sdk_account;
        break;
      }

      // optional string sdk_account = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sdk_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdk_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sdk_account().data(), this->sdk_account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_role_id;
        break;
      }

      // optional string role_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_id().data(), this->role_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_server_id;
        break;
      }

      // optional uint32 server_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_present;
        break;
      }

      // optional float present = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_present:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &present_)));
          set_has_present();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_product_id;
        break;
      }

      // optional string product_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->product_id().data(), this->product_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WebPay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->order_id(), output);
  }

  // optional .pb.SdkChannelType channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->channel(), output);
  }

  // optional .pb.PlatformType platform = 3;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->platform(), output);
  }

  // optional .pb.WebPayCurrentType currency = 4;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->currency(), output);
  }

  // optional float money = 5;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->money(), output);
  }

  // optional string sdk_account = 6;
  if (has_sdk_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdk_account().data(), this->sdk_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->sdk_account(), output);
  }

  // optional string role_id = 7;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_id().data(), this->role_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->role_id(), output);
  }

  // optional uint32 server_id = 8;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->server_id(), output);
  }

  // optional float present = 9;
  if (has_present()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->present(), output);
  }

  // optional string product_id = 10;
  if (has_product_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->product_id().data(), this->product_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->product_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WebPay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->order_id(), target);
  }

  // optional .pb.SdkChannelType channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->channel(), target);
  }

  // optional .pb.PlatformType platform = 3;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->platform(), target);
  }

  // optional .pb.WebPayCurrentType currency = 4;
  if (has_currency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->currency(), target);
  }

  // optional float money = 5;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->money(), target);
  }

  // optional string sdk_account = 6;
  if (has_sdk_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdk_account().data(), this->sdk_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sdk_account(), target);
  }

  // optional string role_id = 7;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_id().data(), this->role_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->role_id(), target);
  }

  // optional uint32 server_id = 8;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->server_id(), target);
  }

  // optional float present = 9;
  if (has_present()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->present(), target);
  }

  // optional string product_id = 10;
  if (has_product_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->product_id().data(), this->product_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->product_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WebPay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string order_id = 1;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_id());
    }

    // optional .pb.SdkChannelType channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
    }

    // optional .pb.PlatformType platform = 3;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->platform());
    }

    // optional .pb.WebPayCurrentType currency = 4;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->currency());
    }

    // optional float money = 5;
    if (has_money()) {
      total_size += 1 + 4;
    }

    // optional string sdk_account = 6;
    if (has_sdk_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sdk_account());
    }

    // optional string role_id = 7;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_id());
    }

    // optional uint32 server_id = 8;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float present = 9;
    if (has_present()) {
      total_size += 1 + 4;
    }

    // optional string product_id = 10;
    if (has_product_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebPay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebPay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebPay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebPay::MergeFrom(const WebPay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_sdk_account()) {
      set_sdk_account(from.sdk_account());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_present()) {
      set_present(from.present());
    }
    if (from.has_product_id()) {
      set_product_id(from.product_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebPay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebPay::CopyFrom(const WebPay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebPay::IsInitialized() const {

  return true;
}

void WebPay::Swap(WebPay* other) {
  if (other != this) {
    std::swap(order_id_, other->order_id_);
    std::swap(channel_, other->channel_);
    std::swap(platform_, other->platform_);
    std::swap(currency_, other->currency_);
    std::swap(money_, other->money_);
    std::swap(sdk_account_, other->sdk_account_);
    std::swap(role_id_, other->role_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(present_, other->present_);
    std::swap(product_id_, other->product_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebPay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebPay_descriptor_;
  metadata.reflection = WebPay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WebPayRet::kResultFieldNumber;
const int WebPayRet::kOrderIdFieldNumber;
const int WebPayRet::kErrorMsgFieldNumber;
#endif  // !_MSC_VER

WebPayRet::WebPayRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WebPayRet::InitAsDefaultInstance() {
}

WebPayRet::WebPayRet(const WebPayRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WebPayRet::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebPayRet::~WebPayRet() {
  SharedDtor();
}

void WebPayRet::SharedDtor() {
  if (order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete order_id_;
  }
  if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete error_msg_;
  }
  if (this != default_instance_) {
  }
}

void WebPayRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebPayRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebPayRet_descriptor_;
}

const WebPayRet& WebPayRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Web_2eproto();
  return *default_instance_;
}

WebPayRet* WebPayRet::default_instance_ = NULL;

WebPayRet* WebPayRet::New() const {
  return new WebPayRet;
}

void WebPayRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_order_id()) {
      if (order_id_ != &::google::protobuf::internal::kEmptyString) {
        order_id_->clear();
      }
    }
    if (has_error_msg()) {
      if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
        error_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebPayRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.WebPayResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::WebPayResult_IsValid(value)) {
            set_result(static_cast< ::pb::WebPayResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_order_id;
        break;
      }

      // optional string order_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->order_id().data(), this->order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_error_msg;
        break;
      }

      // optional string error_msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_msg().data(), this->error_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WebPayRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.WebPayResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string order_id = 2;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->order_id(), output);
  }

  // optional string error_msg = 3;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->error_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WebPayRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.WebPayResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional string order_id = 2;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->order_id(), target);
  }

  // optional string error_msg = 3;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WebPayRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.WebPayResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string order_id = 2;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_id());
    }

    // optional string error_msg = 3;
    if (has_error_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebPayRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebPayRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebPayRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebPayRet::MergeFrom(const WebPayRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_error_msg()) {
      set_error_msg(from.error_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebPayRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebPayRet::CopyFrom(const WebPayRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebPayRet::IsInitialized() const {

  return true;
}

void WebPayRet::Swap(WebPayRet* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(order_id_, other->order_id_);
    std::swap(error_msg_, other->error_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebPayRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebPayRet_descriptor_;
  metadata.reflection = WebPayRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WebPayToDatabase::kOrderIdFieldNumber;
const int WebPayToDatabase::kCurrencyFieldNumber;
const int WebPayToDatabase::kPresentFieldNumber;
const int WebPayToDatabase::kPlayerIdFieldNumber;
const int WebPayToDatabase::kSdkAccountFieldNumber;
const int WebPayToDatabase::kMoneyFieldNumber;
const int WebPayToDatabase::kChannelFieldNumber;
const int WebPayToDatabase::kPlatformFieldNumber;
#endif  // !_MSC_VER

WebPayToDatabase::WebPayToDatabase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WebPayToDatabase::InitAsDefaultInstance() {
}

WebPayToDatabase::WebPayToDatabase(const WebPayToDatabase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WebPayToDatabase::SharedCtor() {
  _cached_size_ = 0;
  order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  currency_ = 0u;
  present_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  sdk_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  money_ = 0;
  channel_ = 0;
  platform_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebPayToDatabase::~WebPayToDatabase() {
  SharedDtor();
}

void WebPayToDatabase::SharedDtor() {
  if (order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete order_id_;
  }
  if (sdk_account_ != &::google::protobuf::internal::kEmptyString) {
    delete sdk_account_;
  }
  if (this != default_instance_) {
  }
}

void WebPayToDatabase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebPayToDatabase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebPayToDatabase_descriptor_;
}

const WebPayToDatabase& WebPayToDatabase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Web_2eproto();
  return *default_instance_;
}

WebPayToDatabase* WebPayToDatabase::default_instance_ = NULL;

WebPayToDatabase* WebPayToDatabase::New() const {
  return new WebPayToDatabase;
}

void WebPayToDatabase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_order_id()) {
      if (order_id_ != &::google::protobuf::internal::kEmptyString) {
        order_id_->clear();
      }
    }
    currency_ = 0u;
    present_ = 0;
    player_id_ = GOOGLE_ULONGLONG(0);
    if (has_sdk_account()) {
      if (sdk_account_ != &::google::protobuf::internal::kEmptyString) {
        sdk_account_->clear();
      }
    }
    money_ = 0;
    channel_ = 0;
    platform_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebPayToDatabase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string order_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->order_id().data(), this->order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_currency;
        break;
      }

      // optional uint32 currency = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currency_)));
          set_has_currency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_present;
        break;
      }

      // optional float present = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_present:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &present_)));
          set_has_present();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_player_id;
        break;
      }

      // optional uint64 player_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sdk_account;
        break;
      }

      // optional string sdk_account = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sdk_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdk_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sdk_account().data(), this->sdk_account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_money;
        break;
      }

      // optional float money = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_channel;
        break;
      }

      // optional .pb.SdkChannelType channel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::SdkChannelType_IsValid(value)) {
            set_channel(static_cast< ::pb::SdkChannelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_platform;
        break;
      }

      // optional .pb.PlatformType platform = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::PlatformType_IsValid(value)) {
            set_platform(static_cast< ::pb::PlatformType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WebPayToDatabase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->order_id(), output);
  }

  // optional uint32 currency = 2;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->currency(), output);
  }

  // optional float present = 3;
  if (has_present()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->present(), output);
  }

  // optional uint64 player_id = 4;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->player_id(), output);
  }

  // optional string sdk_account = 5;
  if (has_sdk_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdk_account().data(), this->sdk_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->sdk_account(), output);
  }

  // optional float money = 6;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->money(), output);
  }

  // optional .pb.SdkChannelType channel = 7;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->channel(), output);
  }

  // optional .pb.PlatformType platform = 8;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->platform(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WebPayToDatabase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->order_id(), target);
  }

  // optional uint32 currency = 2;
  if (has_currency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->currency(), target);
  }

  // optional float present = 3;
  if (has_present()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->present(), target);
  }

  // optional uint64 player_id = 4;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->player_id(), target);
  }

  // optional string sdk_account = 5;
  if (has_sdk_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdk_account().data(), this->sdk_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sdk_account(), target);
  }

  // optional float money = 6;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->money(), target);
  }

  // optional .pb.SdkChannelType channel = 7;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->channel(), target);
  }

  // optional .pb.PlatformType platform = 8;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->platform(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WebPayToDatabase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string order_id = 1;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_id());
    }

    // optional uint32 currency = 2;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currency());
    }

    // optional float present = 3;
    if (has_present()) {
      total_size += 1 + 4;
    }

    // optional uint64 player_id = 4;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional string sdk_account = 5;
    if (has_sdk_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sdk_account());
    }

    // optional float money = 6;
    if (has_money()) {
      total_size += 1 + 4;
    }

    // optional .pb.SdkChannelType channel = 7;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
    }

    // optional .pb.PlatformType platform = 8;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->platform());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebPayToDatabase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebPayToDatabase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebPayToDatabase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebPayToDatabase::MergeFrom(const WebPayToDatabase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_present()) {
      set_present(from.present());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_sdk_account()) {
      set_sdk_account(from.sdk_account());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebPayToDatabase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebPayToDatabase::CopyFrom(const WebPayToDatabase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebPayToDatabase::IsInitialized() const {

  return true;
}

void WebPayToDatabase::Swap(WebPayToDatabase* other) {
  if (other != this) {
    std::swap(order_id_, other->order_id_);
    std::swap(currency_, other->currency_);
    std::swap(present_, other->present_);
    std::swap(player_id_, other->player_id_);
    std::swap(sdk_account_, other->sdk_account_);
    std::swap(money_, other->money_);
    std::swap(channel_, other->channel_);
    std::swap(platform_, other->platform_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebPayToDatabase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebPayToDatabase_descriptor_;
  metadata.reflection = WebPayToDatabase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WebPayToDatabaseRet::kIsOkFieldNumber;
const int WebPayToDatabaseRet::kOrderIdFieldNumber;
const int WebPayToDatabaseRet::kIsOnlineFieldNumber;
const int WebPayToDatabaseRet::kOrderRecordFieldNumber;
const int WebPayToDatabaseRet::kPlayerIdFieldNumber;
const int WebPayToDatabaseRet::kErrorMsgFieldNumber;
const int WebPayToDatabaseRet::kChannelFieldNumber;
const int WebPayToDatabaseRet::kResultFieldNumber;
const int WebPayToDatabaseRet::kMoneyFieldNumber;
const int WebPayToDatabaseRet::kPlatformFieldNumber;
#endif  // !_MSC_VER

WebPayToDatabaseRet::WebPayToDatabaseRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WebPayToDatabaseRet::InitAsDefaultInstance() {
  order_record_ = const_cast< ::pb::GXDB_PayOrder*>(&::pb::GXDB_PayOrder::default_instance());
}

WebPayToDatabaseRet::WebPayToDatabaseRet(const WebPayToDatabaseRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WebPayToDatabaseRet::SharedCtor() {
  _cached_size_ = 0;
  is_ok_ = false;
  order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_online_ = false;
  order_record_ = NULL;
  player_id_ = GOOGLE_ULONGLONG(0);
  error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = 0;
  result_ = 0;
  money_ = 0;
  platform_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebPayToDatabaseRet::~WebPayToDatabaseRet() {
  SharedDtor();
}

void WebPayToDatabaseRet::SharedDtor() {
  if (order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete order_id_;
  }
  if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete error_msg_;
  }
  if (this != default_instance_) {
    delete order_record_;
  }
}

void WebPayToDatabaseRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebPayToDatabaseRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebPayToDatabaseRet_descriptor_;
}

const WebPayToDatabaseRet& WebPayToDatabaseRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Web_2eproto();
  return *default_instance_;
}

WebPayToDatabaseRet* WebPayToDatabaseRet::default_instance_ = NULL;

WebPayToDatabaseRet* WebPayToDatabaseRet::New() const {
  return new WebPayToDatabaseRet;
}

void WebPayToDatabaseRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_ok_ = false;
    if (has_order_id()) {
      if (order_id_ != &::google::protobuf::internal::kEmptyString) {
        order_id_->clear();
      }
    }
    is_online_ = false;
    if (has_order_record()) {
      if (order_record_ != NULL) order_record_->::pb::GXDB_PayOrder::Clear();
    }
    player_id_ = GOOGLE_ULONGLONG(0);
    if (has_error_msg()) {
      if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
        error_msg_->clear();
      }
    }
    channel_ = 0;
    result_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    money_ = 0;
    platform_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebPayToDatabaseRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_ok = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ok_)));
          set_has_is_ok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_order_id;
        break;
      }

      // optional string order_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->order_id().data(), this->order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_online;
        break;
      }

      // optional bool is_online = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_online_)));
          set_has_is_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_order_record;
        break;
      }

      // optional .pb.GXDB_PayOrder order_record = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_player_id;
        break;
      }

      // optional uint64 player_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_error_msg;
        break;
      }

      // optional string error_msg = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_msg().data(), this->error_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_channel;
        break;
      }

      // optional .pb.SdkChannelType channel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::SdkChannelType_IsValid(value)) {
            set_channel(static_cast< ::pb::SdkChannelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_result;
        break;
      }

      // optional .pb.WebPayResult result = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::WebPayResult_IsValid(value)) {
            set_result(static_cast< ::pb::WebPayResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_money;
        break;
      }

      // optional float money = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_platform;
        break;
      }

      // optional .pb.PlatformType platform = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::PlatformType_IsValid(value)) {
            set_platform(static_cast< ::pb::PlatformType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WebPayToDatabaseRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_ok = 1;
  if (has_is_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_ok(), output);
  }

  // optional string order_id = 2;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->order_id(), output);
  }

  // optional bool is_online = 3;
  if (has_is_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_online(), output);
  }

  // optional .pb.GXDB_PayOrder order_record = 4;
  if (has_order_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->order_record(), output);
  }

  // optional uint64 player_id = 5;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->player_id(), output);
  }

  // optional string error_msg = 6;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->error_msg(), output);
  }

  // optional .pb.SdkChannelType channel = 7;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->channel(), output);
  }

  // optional .pb.WebPayResult result = 8;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->result(), output);
  }

  // optional float money = 9;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->money(), output);
  }

  // optional .pb.PlatformType platform = 10;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->platform(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WebPayToDatabaseRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_ok = 1;
  if (has_is_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_ok(), target);
  }

  // optional string order_id = 2;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->order_id(), target);
  }

  // optional bool is_online = 3;
  if (has_is_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_online(), target);
  }

  // optional .pb.GXDB_PayOrder order_record = 4;
  if (has_order_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->order_record(), target);
  }

  // optional uint64 player_id = 5;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->player_id(), target);
  }

  // optional string error_msg = 6;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->error_msg(), target);
  }

  // optional .pb.SdkChannelType channel = 7;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->channel(), target);
  }

  // optional .pb.WebPayResult result = 8;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->result(), target);
  }

  // optional float money = 9;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->money(), target);
  }

  // optional .pb.PlatformType platform = 10;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->platform(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WebPayToDatabaseRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_ok = 1;
    if (has_is_ok()) {
      total_size += 1 + 1;
    }

    // optional string order_id = 2;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_id());
    }

    // optional bool is_online = 3;
    if (has_is_online()) {
      total_size += 1 + 1;
    }

    // optional .pb.GXDB_PayOrder order_record = 4;
    if (has_order_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->order_record());
    }

    // optional uint64 player_id = 5;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional string error_msg = 6;
    if (has_error_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_msg());
    }

    // optional .pb.SdkChannelType channel = 7;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
    }

    // optional .pb.WebPayResult result = 8;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float money = 9;
    if (has_money()) {
      total_size += 1 + 4;
    }

    // optional .pb.PlatformType platform = 10;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->platform());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebPayToDatabaseRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebPayToDatabaseRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebPayToDatabaseRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebPayToDatabaseRet::MergeFrom(const WebPayToDatabaseRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_ok()) {
      set_is_ok(from.is_ok());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_is_online()) {
      set_is_online(from.is_online());
    }
    if (from.has_order_record()) {
      mutable_order_record()->::pb::GXDB_PayOrder::MergeFrom(from.order_record());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_error_msg()) {
      set_error_msg(from.error_msg());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebPayToDatabaseRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebPayToDatabaseRet::CopyFrom(const WebPayToDatabaseRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebPayToDatabaseRet::IsInitialized() const {

  return true;
}

void WebPayToDatabaseRet::Swap(WebPayToDatabaseRet* other) {
  if (other != this) {
    std::swap(is_ok_, other->is_ok_);
    std::swap(order_id_, other->order_id_);
    std::swap(is_online_, other->is_online_);
    std::swap(order_record_, other->order_record_);
    std::swap(player_id_, other->player_id_);
    std::swap(error_msg_, other->error_msg_);
    std::swap(channel_, other->channel_);
    std::swap(result_, other->result_);
    std::swap(money_, other->money_);
    std::swap(platform_, other->platform_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebPayToDatabaseRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebPayToDatabaseRet_descriptor_;
  metadata.reflection = WebPayToDatabaseRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GXDB_PayOrder::kIsNewFieldNumber;
const int GXDB_PayOrder::kProductIdFieldNumber;
const int GXDB_PayOrder::kVipXpFieldNumber;
const int GXDB_PayOrder::kCrystalFinalFieldNumber;
#endif  // !_MSC_VER

GXDB_PayOrder::GXDB_PayOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GXDB_PayOrder::InitAsDefaultInstance() {
}

GXDB_PayOrder::GXDB_PayOrder(const GXDB_PayOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GXDB_PayOrder::SharedCtor() {
  _cached_size_ = 0;
  is_new_ = false;
  product_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vip_xp_ = 0u;
  crystal_final_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GXDB_PayOrder::~GXDB_PayOrder() {
  SharedDtor();
}

void GXDB_PayOrder::SharedDtor() {
  if (product_id_ != &::google::protobuf::internal::kEmptyString) {
    delete product_id_;
  }
  if (this != default_instance_) {
  }
}

void GXDB_PayOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GXDB_PayOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GXDB_PayOrder_descriptor_;
}

const GXDB_PayOrder& GXDB_PayOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Web_2eproto();
  return *default_instance_;
}

GXDB_PayOrder* GXDB_PayOrder::default_instance_ = NULL;

GXDB_PayOrder* GXDB_PayOrder::New() const {
  return new GXDB_PayOrder;
}

void GXDB_PayOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_new_ = false;
    if (has_product_id()) {
      if (product_id_ != &::google::protobuf::internal::kEmptyString) {
        product_id_->clear();
      }
    }
    vip_xp_ = 0u;
    crystal_final_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GXDB_PayOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_new = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_new_)));
          set_has_is_new();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_product_id;
        break;
      }

      // optional string product_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->product_id().data(), this->product_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vip_xp;
        break;
      }

      // optional uint32 vip_xp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_xp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_xp_)));
          set_has_vip_xp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_crystal_final;
        break;
      }

      // optional uint32 crystal_final = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystal_final:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crystal_final_)));
          set_has_crystal_final();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GXDB_PayOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_new = 1;
  if (has_is_new()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_new(), output);
  }

  // optional string product_id = 2;
  if (has_product_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->product_id().data(), this->product_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->product_id(), output);
  }

  // optional uint32 vip_xp = 3;
  if (has_vip_xp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vip_xp(), output);
  }

  // optional uint32 crystal_final = 4;
  if (has_crystal_final()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crystal_final(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GXDB_PayOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_new = 1;
  if (has_is_new()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_new(), target);
  }

  // optional string product_id = 2;
  if (has_product_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->product_id().data(), this->product_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->product_id(), target);
  }

  // optional uint32 vip_xp = 3;
  if (has_vip_xp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vip_xp(), target);
  }

  // optional uint32 crystal_final = 4;
  if (has_crystal_final()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->crystal_final(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GXDB_PayOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_new = 1;
    if (has_is_new()) {
      total_size += 1 + 1;
    }

    // optional string product_id = 2;
    if (has_product_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product_id());
    }

    // optional uint32 vip_xp = 3;
    if (has_vip_xp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_xp());
    }

    // optional uint32 crystal_final = 4;
    if (has_crystal_final()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crystal_final());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GXDB_PayOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GXDB_PayOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GXDB_PayOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GXDB_PayOrder::MergeFrom(const GXDB_PayOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_new()) {
      set_is_new(from.is_new());
    }
    if (from.has_product_id()) {
      set_product_id(from.product_id());
    }
    if (from.has_vip_xp()) {
      set_vip_xp(from.vip_xp());
    }
    if (from.has_crystal_final()) {
      set_crystal_final(from.crystal_final());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GXDB_PayOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GXDB_PayOrder::CopyFrom(const GXDB_PayOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GXDB_PayOrder::IsInitialized() const {

  return true;
}

void GXDB_PayOrder::Swap(GXDB_PayOrder* other) {
  if (other != this) {
    std::swap(is_new_, other->is_new_);
    std::swap(product_id_, other->product_id_);
    std::swap(vip_xp_, other->vip_xp_);
    std::swap(crystal_final_, other->crystal_final_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GXDB_PayOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GXDB_PayOrder_descriptor_;
  metadata.reflection = GXDB_PayOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sdk_PayResult::kResultFieldNumber;
const int Sdk_PayResult::kPayInfoFieldNumber;
#endif  // !_MSC_VER

Sdk_PayResult::Sdk_PayResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sdk_PayResult::InitAsDefaultInstance() {
  result_ = const_cast< ::pb::WebPayRet*>(&::pb::WebPayRet::default_instance());
  payinfo_ = const_cast< ::pb::WebPay*>(&::pb::WebPay::default_instance());
}

Sdk_PayResult::Sdk_PayResult(const Sdk_PayResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sdk_PayResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  payinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sdk_PayResult::~Sdk_PayResult() {
  SharedDtor();
}

void Sdk_PayResult::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
    delete payinfo_;
  }
}

void Sdk_PayResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sdk_PayResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sdk_PayResult_descriptor_;
}

const Sdk_PayResult& Sdk_PayResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Web_2eproto();
  return *default_instance_;
}

Sdk_PayResult* Sdk_PayResult::default_instance_ = NULL;

Sdk_PayResult* Sdk_PayResult::New() const {
  return new Sdk_PayResult;
}

void Sdk_PayResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result()) {
      if (result_ != NULL) result_->::pb::WebPayRet::Clear();
    }
    if (has_payinfo()) {
      if (payinfo_ != NULL) payinfo_->::pb::WebPay::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sdk_PayResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.WebPayRet result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_payInfo;
        break;
      }

      // optional .pb.WebPay payInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_payinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sdk_PayResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.WebPayRet result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional .pb.WebPay payInfo = 2;
  if (has_payinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->payinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sdk_PayResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.WebPayRet result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional .pb.WebPay payInfo = 2;
  if (has_payinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->payinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sdk_PayResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.WebPayRet result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional .pb.WebPay payInfo = 2;
    if (has_payinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->payinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sdk_PayResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sdk_PayResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sdk_PayResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sdk_PayResult::MergeFrom(const Sdk_PayResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::pb::WebPayRet::MergeFrom(from.result());
    }
    if (from.has_payinfo()) {
      mutable_payinfo()->::pb::WebPay::MergeFrom(from.payinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sdk_PayResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sdk_PayResult::CopyFrom(const Sdk_PayResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sdk_PayResult::IsInitialized() const {

  return true;
}

void Sdk_PayResult::Swap(Sdk_PayResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(payinfo_, other->payinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sdk_PayResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sdk_PayResult_descriptor_;
  metadata.reflection = Sdk_PayResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerCode::kIdFieldNumber;
const int ServerCode::kCodeFieldNumber;
#endif  // !_MSC_VER

ServerCode::ServerCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerCode::InitAsDefaultInstance() {
}

ServerCode::ServerCode(const ServerCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerCode::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerCode::~ServerCode() {
  SharedDtor();
}

void ServerCode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerCode_descriptor_;
}

const ServerCode& ServerCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Web_2eproto();
  return *default_instance_;
}

ServerCode* ServerCode::default_instance_ = NULL;

ServerCode* ServerCode::New() const {
  return new ServerCode;
}

void ServerCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional int32 code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerCode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerCode::MergeFrom(const ServerCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerCode::CopyFrom(const ServerCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerCode::IsInitialized() const {

  return true;
}

void ServerCode::Swap(ServerCode* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerCode_descriptor_;
  metadata.reflection = ServerCode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerResponse::kCodeFieldNumber;
const int ServerResponse::kRegFieldNumber;
#endif  // !_MSC_VER

ServerResponse::ServerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerResponse::InitAsDefaultInstance() {
}

ServerResponse::ServerResponse(const ServerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerResponse::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerResponse::~ServerResponse() {
  SharedDtor();
}

void ServerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerResponse_descriptor_;
}

const ServerResponse& ServerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Web_2eproto();
  return *default_instance_;
}

ServerResponse* ServerResponse::default_instance_ = NULL;

ServerResponse* ServerResponse::New() const {
  return new ServerResponse;
}

void ServerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
  }
  reg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reg;
        break;
      }

      // repeated .pb.ServerCode reg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // repeated .pb.ServerCode reg = 2;
  for (int i = 0; i < this->reg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reg(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // repeated .pb.ServerCode reg = 2;
  for (int i = 0; i < this->reg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reg(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  // repeated .pb.ServerCode reg = 2;
  total_size += 1 * this->reg_size();
  for (int i = 0; i < this->reg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerResponse::MergeFrom(const ServerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  reg_.MergeFrom(from.reg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerResponse::CopyFrom(const ServerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerResponse::IsInitialized() const {

  return true;
}

void ServerResponse::Swap(ServerResponse* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    reg_.Swap(&other->reg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerResponse_descriptor_;
  metadata.reflection = ServerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServersMail::kSidFieldNumber;
const int ServersMail::kOnlineFieldNumber;
const int ServersMail::kChannelFieldNumber;
const int ServersMail::kMoldidFieldNumber;
const int ServersMail::kTitleFieldNumber;
const int ServersMail::kContentFieldNumber;
const int ServersMail::kMailAwardFieldNumber;
const int ServersMail::kAlvFieldNumber;
const int ServersMail::kBlvFieldNumber;
const int ServersMail::kAvipFieldNumber;
const int ServersMail::kBvipFieldNumber;
#endif  // !_MSC_VER

ServersMail::ServersMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServersMail::InitAsDefaultInstance() {
}

ServersMail::ServersMail(const ServersMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServersMail::SharedCtor() {
  _cached_size_ = 0;
  sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  online_ = 0;
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  moldid_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mail_award_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alv_ = 0;
  blv_ = 0;
  avip_ = 0;
  bvip_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServersMail::~ServersMail() {
  SharedDtor();
}

void ServersMail::SharedDtor() {
  if (sid_ != &::google::protobuf::internal::kEmptyString) {
    delete sid_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (mail_award_ != &::google::protobuf::internal::kEmptyString) {
    delete mail_award_;
  }
  if (this != default_instance_) {
  }
}

void ServersMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServersMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServersMail_descriptor_;
}

const ServersMail& ServersMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Web_2eproto();
  return *default_instance_;
}

ServersMail* ServersMail::default_instance_ = NULL;

ServersMail* ServersMail::New() const {
  return new ServersMail;
}

void ServersMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sid()) {
      if (sid_ != &::google::protobuf::internal::kEmptyString) {
        sid_->clear();
      }
    }
    online_ = 0;
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
    moldid_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_mail_award()) {
      if (mail_award_ != &::google::protobuf::internal::kEmptyString) {
        mail_award_->clear();
      }
    }
    alv_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    blv_ = 0;
    avip_ = 0;
    bvip_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServersMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sid().data(), this->sid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_online;
        break;
      }

      // optional int32 online = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_channel;
        break;
      }

      // optional string channel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_moldid;
        break;
      }

      // optional int32 moldid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moldid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moldid_)));
          set_has_moldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_title;
        break;
      }

      // optional string title = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_mail_award;
        break;
      }

      // optional string mail_award = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mail_award()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mail_award().data(), this->mail_award().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_alv;
        break;
      }

      // optional int32 alv = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alv_)));
          set_has_alv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_blv;
        break;
      }

      // optional int32 blv = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blv_)));
          set_has_blv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_avip;
        break;
      }

      // optional int32 avip = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avip_)));
          set_has_avip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bvip;
        break;
      }

      // optional int32 bvip = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bvip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bvip_)));
          set_has_bvip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServersMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string sid = 1;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sid(), output);
  }

  // optional int32 online = 2;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->online(), output);
  }

  // optional string channel = 3;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->channel(), output);
  }

  // optional int32 moldid = 4;
  if (has_moldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->moldid(), output);
  }

  // optional string title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->title(), output);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->content(), output);
  }

  // optional string mail_award = 7;
  if (has_mail_award()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mail_award().data(), this->mail_award().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->mail_award(), output);
  }

  // optional int32 alv = 8;
  if (has_alv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->alv(), output);
  }

  // optional int32 blv = 9;
  if (has_blv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->blv(), output);
  }

  // optional int32 avip = 10;
  if (has_avip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->avip(), output);
  }

  // optional int32 bvip = 11;
  if (has_bvip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->bvip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServersMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string sid = 1;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sid(), target);
  }

  // optional int32 online = 2;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->online(), target);
  }

  // optional string channel = 3;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->channel(), target);
  }

  // optional int32 moldid = 4;
  if (has_moldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->moldid(), target);
  }

  // optional string title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->title(), target);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // optional string mail_award = 7;
  if (has_mail_award()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mail_award().data(), this->mail_award().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->mail_award(), target);
  }

  // optional int32 alv = 8;
  if (has_alv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->alv(), target);
  }

  // optional int32 blv = 9;
  if (has_blv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->blv(), target);
  }

  // optional int32 avip = 10;
  if (has_avip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->avip(), target);
  }

  // optional int32 bvip = 11;
  if (has_bvip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->bvip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServersMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string sid = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }

    // optional int32 online = 2;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online());
    }

    // optional string channel = 3;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

    // optional int32 moldid = 4;
    if (has_moldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moldid());
    }

    // optional string title = 5;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string mail_award = 7;
    if (has_mail_award()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mail_award());
    }

    // optional int32 alv = 8;
    if (has_alv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alv());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 blv = 9;
    if (has_blv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blv());
    }

    // optional int32 avip = 10;
    if (has_avip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avip());
    }

    // optional int32 bvip = 11;
    if (has_bvip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bvip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServersMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServersMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServersMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServersMail::MergeFrom(const ServersMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_moldid()) {
      set_moldid(from.moldid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_mail_award()) {
      set_mail_award(from.mail_award());
    }
    if (from.has_alv()) {
      set_alv(from.alv());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_blv()) {
      set_blv(from.blv());
    }
    if (from.has_avip()) {
      set_avip(from.avip());
    }
    if (from.has_bvip()) {
      set_bvip(from.bvip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServersMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServersMail::CopyFrom(const ServersMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServersMail::IsInitialized() const {

  return true;
}

void ServersMail::Swap(ServersMail* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(online_, other->online_);
    std::swap(channel_, other->channel_);
    std::swap(moldid_, other->moldid_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(mail_award_, other->mail_award_);
    std::swap(alv_, other->alv_);
    std::swap(blv_, other->blv_);
    std::swap(avip_, other->avip_);
    std::swap(bvip_, other->bvip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServersMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServersMail_descriptor_;
  metadata.reflection = ServersMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerMail::kSidFieldNumber;
const int PlayerMail::kToFieldNumber;
const int PlayerMail::kMoldidFieldNumber;
const int PlayerMail::kTitleFieldNumber;
const int PlayerMail::kContentFieldNumber;
const int PlayerMail::kMailAwardFieldNumber;
#endif  // !_MSC_VER

PlayerMail::PlayerMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerMail::InitAsDefaultInstance() {
}

PlayerMail::PlayerMail(const PlayerMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerMail::SharedCtor() {
  _cached_size_ = 0;
  sid_ = 0;
  to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  moldid_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mail_award_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerMail::~PlayerMail() {
  SharedDtor();
}

void PlayerMail::SharedDtor() {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (mail_award_ != &::google::protobuf::internal::kEmptyString) {
    delete mail_award_;
  }
  if (this != default_instance_) {
  }
}

void PlayerMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerMail_descriptor_;
}

const PlayerMail& PlayerMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Web_2eproto();
  return *default_instance_;
}

PlayerMail* PlayerMail::default_instance_ = NULL;

PlayerMail* PlayerMail::New() const {
  return new PlayerMail;
}

void PlayerMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sid_ = 0;
    if (has_to()) {
      if (to_ != &::google::protobuf::internal::kEmptyString) {
        to_->clear();
      }
    }
    moldid_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_mail_award()) {
      if (mail_award_ != &::google::protobuf::internal::kEmptyString) {
        mail_award_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_to;
        break;
      }

      // optional string to = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to().data(), this->to().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_moldid;
        break;
      }

      // optional int32 moldid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moldid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moldid_)));
          set_has_moldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_title;
        break;
      }

      // optional string title = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }

      // optional string content = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mail_award;
        break;
      }

      // optional string mail_award = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mail_award()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mail_award().data(), this->mail_award().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sid = 1;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }

  // optional string to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->to(), output);
  }

  // optional int32 moldid = 3;
  if (has_moldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->moldid(), output);
  }

  // optional string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->title(), output);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->content(), output);
  }

  // optional string mail_award = 6;
  if (has_mail_award()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mail_award().data(), this->mail_award().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->mail_award(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sid = 1;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }

  // optional string to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->to(), target);
  }

  // optional int32 moldid = 3;
  if (has_moldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->moldid(), target);
  }

  // optional string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->title(), target);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content(), target);
  }

  // optional string mail_award = 6;
  if (has_mail_award()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mail_award().data(), this->mail_award().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mail_award(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sid = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional string to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to());
    }

    // optional int32 moldid = 3;
    if (has_moldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moldid());
    }

    // optional string title = 4;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string mail_award = 6;
    if (has_mail_award()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mail_award());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerMail::MergeFrom(const PlayerMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_moldid()) {
      set_moldid(from.moldid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_mail_award()) {
      set_mail_award(from.mail_award());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerMail::CopyFrom(const PlayerMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerMail::IsInitialized() const {

  return true;
}

void PlayerMail::Swap(PlayerMail* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(to_, other->to_);
    std::swap(moldid_, other->moldid_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(mail_award_, other->mail_award_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerMail_descriptor_;
  metadata.reflection = PlayerMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerForbid::kSidFieldNumber;
const int PlayerForbid::kLordIdFieldNumber;
const int PlayerForbid::kForbidIdFieldNumber;
const int PlayerForbid::kTimeFieldNumber;
#endif  // !_MSC_VER

PlayerForbid::PlayerForbid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerForbid::InitAsDefaultInstance() {
}

PlayerForbid::PlayerForbid(const PlayerForbid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerForbid::SharedCtor() {
  _cached_size_ = 0;
  sid_ = 0;
  lordid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  forbidid_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerForbid::~PlayerForbid() {
  SharedDtor();
}

void PlayerForbid::SharedDtor() {
  if (lordid_ != &::google::protobuf::internal::kEmptyString) {
    delete lordid_;
  }
  if (this != default_instance_) {
  }
}

void PlayerForbid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerForbid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerForbid_descriptor_;
}

const PlayerForbid& PlayerForbid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Web_2eproto();
  return *default_instance_;
}

PlayerForbid* PlayerForbid::default_instance_ = NULL;

PlayerForbid* PlayerForbid::New() const {
  return new PlayerForbid;
}

void PlayerForbid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sid_ = 0;
    if (has_lordid()) {
      if (lordid_ != &::google::protobuf::internal::kEmptyString) {
        lordid_->clear();
      }
    }
    forbidid_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerForbid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lordId;
        break;
      }

      // optional string lordId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lordId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lordid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lordid().data(), this->lordid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_forbidId;
        break;
      }

      // optional int32 forbidId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forbidId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &forbidid_)));
          set_has_forbidid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerForbid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sid = 1;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }

  // optional string lordId = 2;
  if (has_lordid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lordid().data(), this->lordid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->lordid(), output);
  }

  // optional int32 forbidId = 3;
  if (has_forbidid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->forbidid(), output);
  }

  // optional int32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerForbid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sid = 1;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }

  // optional string lordId = 2;
  if (has_lordid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lordid().data(), this->lordid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lordid(), target);
  }

  // optional int32 forbidId = 3;
  if (has_forbidid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->forbidid(), target);
  }

  // optional int32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerForbid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sid = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional string lordId = 2;
    if (has_lordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lordid());
    }

    // optional int32 forbidId = 3;
    if (has_forbidid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->forbidid());
    }

    // optional int32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerForbid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerForbid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerForbid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerForbid::MergeFrom(const PlayerForbid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_lordid()) {
      set_lordid(from.lordid());
    }
    if (from.has_forbidid()) {
      set_forbidid(from.forbidid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerForbid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerForbid::CopyFrom(const PlayerForbid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerForbid::IsInitialized() const {

  return true;
}

void PlayerForbid::Swap(PlayerForbid* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(lordid_, other->lordid_);
    std::swap(forbidid_, other->forbidid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerForbid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerForbid_descriptor_;
  metadata.reflection = PlayerForbid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetPlayerVip::kSidFieldNumber;
const int SetPlayerVip::kLordIdFieldNumber;
const int SetPlayerVip::kTypeValueFieldNumber;
#endif  // !_MSC_VER

SetPlayerVip::SetPlayerVip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetPlayerVip::InitAsDefaultInstance() {
}

SetPlayerVip::SetPlayerVip(const SetPlayerVip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetPlayerVip::SharedCtor() {
  _cached_size_ = 0;
  sid_ = 0;
  lordid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  typevalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetPlayerVip::~SetPlayerVip() {
  SharedDtor();
}

void SetPlayerVip::SharedDtor() {
  if (lordid_ != &::google::protobuf::internal::kEmptyString) {
    delete lordid_;
  }
  if (this != default_instance_) {
  }
}

void SetPlayerVip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetPlayerVip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetPlayerVip_descriptor_;
}

const SetPlayerVip& SetPlayerVip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Web_2eproto();
  return *default_instance_;
}

SetPlayerVip* SetPlayerVip::default_instance_ = NULL;

SetPlayerVip* SetPlayerVip::New() const {
  return new SetPlayerVip;
}

void SetPlayerVip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sid_ = 0;
    if (has_lordid()) {
      if (lordid_ != &::google::protobuf::internal::kEmptyString) {
        lordid_->clear();
      }
    }
    typevalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetPlayerVip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lordId;
        break;
      }

      // optional string lordId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lordId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lordid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lordid().data(), this->lordid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_typeValue;
        break;
      }

      // optional int32 typeValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_typeValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typevalue_)));
          set_has_typevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetPlayerVip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sid = 1;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }

  // optional string lordId = 2;
  if (has_lordid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lordid().data(), this->lordid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->lordid(), output);
  }

  // optional int32 typeValue = 3;
  if (has_typevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->typevalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetPlayerVip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sid = 1;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }

  // optional string lordId = 2;
  if (has_lordid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lordid().data(), this->lordid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lordid(), target);
  }

  // optional int32 typeValue = 3;
  if (has_typevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->typevalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetPlayerVip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sid = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional string lordId = 2;
    if (has_lordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lordid());
    }

    // optional int32 typeValue = 3;
    if (has_typevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typevalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetPlayerVip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetPlayerVip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetPlayerVip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetPlayerVip::MergeFrom(const SetPlayerVip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_lordid()) {
      set_lordid(from.lordid());
    }
    if (from.has_typevalue()) {
      set_typevalue(from.typevalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetPlayerVip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPlayerVip::CopyFrom(const SetPlayerVip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPlayerVip::IsInitialized() const {

  return true;
}

void SetPlayerVip::Swap(SetPlayerVip* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(lordid_, other->lordid_);
    std::swap(typevalue_, other->typevalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetPlayerVip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetPlayerVip_descriptor_;
  metadata.reflection = SetPlayerVip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReCreateOder::kSidFieldNumber;
const int ReCreateOder::kLordIdFieldNumber;
const int ReCreateOder::kMoneyFieldNumber;
const int ReCreateOder::kOredrIdFieldNumber;
const int ReCreateOder::kPlatNoFieldNumber;
const int ReCreateOder::kPlatIdFieldNumber;
#endif  // !_MSC_VER

ReCreateOder::ReCreateOder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReCreateOder::InitAsDefaultInstance() {
}

ReCreateOder::ReCreateOder(const ReCreateOder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReCreateOder::SharedCtor() {
  _cached_size_ = 0;
  sid_ = 0;
  lordid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  money_ = 0;
  oredrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReCreateOder::~ReCreateOder() {
  SharedDtor();
}

void ReCreateOder::SharedDtor() {
  if (lordid_ != &::google::protobuf::internal::kEmptyString) {
    delete lordid_;
  }
  if (oredrid_ != &::google::protobuf::internal::kEmptyString) {
    delete oredrid_;
  }
  if (platno_ != &::google::protobuf::internal::kEmptyString) {
    delete platno_;
  }
  if (platid_ != &::google::protobuf::internal::kEmptyString) {
    delete platid_;
  }
  if (this != default_instance_) {
  }
}

void ReCreateOder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReCreateOder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReCreateOder_descriptor_;
}

const ReCreateOder& ReCreateOder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Web_2eproto();
  return *default_instance_;
}

ReCreateOder* ReCreateOder::default_instance_ = NULL;

ReCreateOder* ReCreateOder::New() const {
  return new ReCreateOder;
}

void ReCreateOder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sid_ = 0;
    if (has_lordid()) {
      if (lordid_ != &::google::protobuf::internal::kEmptyString) {
        lordid_->clear();
      }
    }
    money_ = 0;
    if (has_oredrid()) {
      if (oredrid_ != &::google::protobuf::internal::kEmptyString) {
        oredrid_->clear();
      }
    }
    if (has_platno()) {
      if (platno_ != &::google::protobuf::internal::kEmptyString) {
        platno_->clear();
      }
    }
    if (has_platid()) {
      if (platid_ != &::google::protobuf::internal::kEmptyString) {
        platid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReCreateOder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lordId;
        break;
      }

      // optional string lordId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lordId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lordid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lordid().data(), this->lordid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }

      // optional int32 money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_oredrId;
        break;
      }

      // optional string oredrId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oredrId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oredrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->oredrid().data(), this->oredrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_platNo;
        break;
      }

      // optional string platNo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platno().data(), this->platno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_platId;
        break;
      }

      // optional string platId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platid().data(), this->platid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReCreateOder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sid = 1;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }

  // optional string lordId = 2;
  if (has_lordid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lordid().data(), this->lordid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->lordid(), output);
  }

  // optional int32 money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->money(), output);
  }

  // optional string oredrId = 4;
  if (has_oredrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oredrid().data(), this->oredrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->oredrid(), output);
  }

  // optional string platNo = 5;
  if (has_platno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platno().data(), this->platno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->platno(), output);
  }

  // optional string platId = 6;
  if (has_platid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->platid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReCreateOder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sid = 1;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }

  // optional string lordId = 2;
  if (has_lordid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lordid().data(), this->lordid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lordid(), target);
  }

  // optional int32 money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->money(), target);
  }

  // optional string oredrId = 4;
  if (has_oredrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oredrid().data(), this->oredrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->oredrid(), target);
  }

  // optional string platNo = 5;
  if (has_platno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platno().data(), this->platno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->platno(), target);
  }

  // optional string platId = 6;
  if (has_platid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->platid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReCreateOder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sid = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional string lordId = 2;
    if (has_lordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lordid());
    }

    // optional int32 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional string oredrId = 4;
    if (has_oredrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oredrid());
    }

    // optional string platNo = 5;
    if (has_platno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platno());
    }

    // optional string platId = 6;
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReCreateOder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReCreateOder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReCreateOder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReCreateOder::MergeFrom(const ReCreateOder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_lordid()) {
      set_lordid(from.lordid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_oredrid()) {
      set_oredrid(from.oredrid());
    }
    if (from.has_platno()) {
      set_platno(from.platno());
    }
    if (from.has_platid()) {
      set_platid(from.platid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReCreateOder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReCreateOder::CopyFrom(const ReCreateOder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReCreateOder::IsInitialized() const {

  return true;
}

void ReCreateOder::Swap(ReCreateOder* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(lordid_, other->lordid_);
    std::swap(money_, other->money_);
    std::swap(oredrid_, other->oredrid_);
    std::swap(platno_, other->platno_);
    std::swap(platid_, other->platid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReCreateOder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReCreateOder_descriptor_;
  metadata.reflection = ReCreateOder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServersNotice::kSidFieldNumber;
const int ServersNotice::kNoticeFieldNumber;
#endif  // !_MSC_VER

ServersNotice::ServersNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServersNotice::InitAsDefaultInstance() {
}

ServersNotice::ServersNotice(const ServersNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServersNotice::SharedCtor() {
  _cached_size_ = 0;
  sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServersNotice::~ServersNotice() {
  SharedDtor();
}

void ServersNotice::SharedDtor() {
  if (sid_ != &::google::protobuf::internal::kEmptyString) {
    delete sid_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void ServersNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServersNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServersNotice_descriptor_;
}

const ServersNotice& ServersNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Web_2eproto();
  return *default_instance_;
}

ServersNotice* ServersNotice::default_instance_ = NULL;

ServersNotice* ServersNotice::New() const {
  return new ServersNotice;
}

void ServersNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sid()) {
      if (sid_ != &::google::protobuf::internal::kEmptyString) {
        sid_->clear();
      }
    }
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServersNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sid().data(), this->sid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_notice;
        break;
      }

      // optional string notice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServersNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string sid = 1;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sid(), output);
  }

  // optional string notice = 2;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->notice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServersNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string sid = 1;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sid(), target);
  }

  // optional string notice = 2;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->notice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServersNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string sid = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }

    // optional string notice = 2;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServersNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServersNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServersNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServersNotice::MergeFrom(const ServersNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServersNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServersNotice::CopyFrom(const ServersNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServersNotice::IsInitialized() const {

  return true;
}

void ServersNotice::Swap(ServersNotice* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServersNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServersNotice_descriptor_;
  metadata.reflection = ServersNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HotResReload::kSidFieldNumber;
const int HotResReload::kTypeFieldNumber;
#endif  // !_MSC_VER

HotResReload::HotResReload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HotResReload::InitAsDefaultInstance() {
}

HotResReload::HotResReload(const HotResReload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HotResReload::SharedCtor() {
  _cached_size_ = 0;
  sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HotResReload::~HotResReload() {
  SharedDtor();
}

void HotResReload::SharedDtor() {
  if (sid_ != &::google::protobuf::internal::kEmptyString) {
    delete sid_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void HotResReload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HotResReload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HotResReload_descriptor_;
}

const HotResReload& HotResReload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Web_2eproto();
  return *default_instance_;
}

HotResReload* HotResReload::default_instance_ = NULL;

HotResReload* HotResReload::New() const {
  return new HotResReload;
}

void HotResReload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sid()) {
      if (sid_ != &::google::protobuf::internal::kEmptyString) {
        sid_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HotResReload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sid().data(), this->sid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HotResReload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string sid = 1;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sid(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HotResReload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string sid = 1;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sid(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HotResReload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string sid = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HotResReload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HotResReload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HotResReload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HotResReload::MergeFrom(const HotResReload& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HotResReload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HotResReload::CopyFrom(const HotResReload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HotResReload::IsInitialized() const {

  return true;
}

void HotResReload::Swap(HotResReload* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HotResReload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HotResReload_descriptor_;
  metadata.reflection = HotResReload_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnlinePlayerCount::kSidFieldNumber;
#endif  // !_MSC_VER

OnlinePlayerCount::OnlinePlayerCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OnlinePlayerCount::InitAsDefaultInstance() {
}

OnlinePlayerCount::OnlinePlayerCount(const OnlinePlayerCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OnlinePlayerCount::SharedCtor() {
  _cached_size_ = 0;
  sid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlinePlayerCount::~OnlinePlayerCount() {
  SharedDtor();
}

void OnlinePlayerCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OnlinePlayerCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlinePlayerCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlinePlayerCount_descriptor_;
}

const OnlinePlayerCount& OnlinePlayerCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Web_2eproto();
  return *default_instance_;
}

OnlinePlayerCount* OnlinePlayerCount::default_instance_ = NULL;

OnlinePlayerCount* OnlinePlayerCount::New() const {
  return new OnlinePlayerCount;
}

void OnlinePlayerCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnlinePlayerCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnlinePlayerCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sid = 1;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OnlinePlayerCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sid = 1;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OnlinePlayerCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sid = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlinePlayerCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnlinePlayerCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnlinePlayerCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnlinePlayerCount::MergeFrom(const OnlinePlayerCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sid()) {
      set_sid(from.sid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnlinePlayerCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlinePlayerCount::CopyFrom(const OnlinePlayerCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlinePlayerCount::IsInitialized() const {

  return true;
}

void OnlinePlayerCount::Swap(OnlinePlayerCount* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnlinePlayerCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnlinePlayerCount_descriptor_;
  metadata.reflection = OnlinePlayerCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int serverInfo::kSidFieldNumber;
const int serverInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

serverInfo::serverInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void serverInfo::InitAsDefaultInstance() {
}

serverInfo::serverInfo(const serverInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void serverInfo::SharedCtor() {
  _cached_size_ = 0;
  sid_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

serverInfo::~serverInfo() {
  SharedDtor();
}

void serverInfo::SharedDtor() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void serverInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* serverInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return serverInfo_descriptor_;
}

const serverInfo& serverInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Web_2eproto();
  return *default_instance_;
}

serverInfo* serverInfo::default_instance_ = NULL;

serverInfo* serverInfo::New() const {
  return new serverInfo;
}

void serverInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sid_ = 0;
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool serverInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional string info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void serverInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sid = 1;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }

  // optional string info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* serverInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sid = 1;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }

  // optional string info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int serverInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sid = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional string info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void serverInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const serverInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const serverInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void serverInfo::MergeFrom(const serverInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void serverInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void serverInfo::CopyFrom(const serverInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool serverInfo::IsInitialized() const {

  return true;
}

void serverInfo::Swap(serverInfo* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata serverInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = serverInfo_descriptor_;
  metadata.reflection = serverInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateGiftCode::kOperateFieldNumber;
const int CreateGiftCode::kGiftIdFieldNumber;
const int CreateGiftCode::kGiftNameFieldNumber;
const int CreateGiftCode::kBeginTimeFieldNumber;
const int CreateGiftCode::kEndTimeFieldNumber;
const int CreateGiftCode::kGiftFieldNumber;
const int CreateGiftCode::kReuseFieldNumber;
const int CreateGiftCode::kCountFieldNumber;
const int CreateGiftCode::kPlatNoFieldNumber;
const int CreateGiftCode::kMarkFieldNumber;
#endif  // !_MSC_VER

CreateGiftCode::CreateGiftCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateGiftCode::InitAsDefaultInstance() {
}

CreateGiftCode::CreateGiftCode(const CreateGiftCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateGiftCode::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  giftid_ = 0;
  giftname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  begintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gift_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reuse_ = 0;
  count_ = 0;
  platno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateGiftCode::~CreateGiftCode() {
  SharedDtor();
}

void CreateGiftCode::SharedDtor() {
  if (giftname_ != &::google::protobuf::internal::kEmptyString) {
    delete giftname_;
  }
  if (begintime_ != &::google::protobuf::internal::kEmptyString) {
    delete begintime_;
  }
  if (endtime_ != &::google::protobuf::internal::kEmptyString) {
    delete endtime_;
  }
  if (gift_ != &::google::protobuf::internal::kEmptyString) {
    delete gift_;
  }
  if (platno_ != &::google::protobuf::internal::kEmptyString) {
    delete platno_;
  }
  if (mark_ != &::google::protobuf::internal::kEmptyString) {
    delete mark_;
  }
  if (this != default_instance_) {
  }
}

void CreateGiftCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateGiftCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateGiftCode_descriptor_;
}

const CreateGiftCode& CreateGiftCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Web_2eproto();
  return *default_instance_;
}

CreateGiftCode* CreateGiftCode::default_instance_ = NULL;

CreateGiftCode* CreateGiftCode::New() const {
  return new CreateGiftCode;
}

void CreateGiftCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    operate_ = 0;
    giftid_ = 0;
    if (has_giftname()) {
      if (giftname_ != &::google::protobuf::internal::kEmptyString) {
        giftname_->clear();
      }
    }
    if (has_begintime()) {
      if (begintime_ != &::google::protobuf::internal::kEmptyString) {
        begintime_->clear();
      }
    }
    if (has_endtime()) {
      if (endtime_ != &::google::protobuf::internal::kEmptyString) {
        endtime_->clear();
      }
    }
    if (has_gift()) {
      if (gift_ != &::google::protobuf::internal::kEmptyString) {
        gift_->clear();
      }
    }
    reuse_ = 0;
    count_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_platno()) {
      if (platno_ != &::google::protobuf::internal::kEmptyString) {
        platno_->clear();
      }
    }
    if (has_mark()) {
      if (mark_ != &::google::protobuf::internal::kEmptyString) {
        mark_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateGiftCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_giftId;
        break;
      }

      // optional int32 giftId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giftId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &giftid_)));
          set_has_giftid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_giftName;
        break;
      }

      // optional string giftName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_giftName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_giftname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->giftname().data(), this->giftname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_beginTime;
        break;
      }

      // optional string beginTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beginTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_begintime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->begintime().data(), this->begintime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_endTime;
        break;
      }

      // optional string endTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->endtime().data(), this->endtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_gift;
        break;
      }

      // optional string gift = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gift()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gift().data(), this->gift().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_reuse;
        break;
      }

      // optional int32 reuse = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reuse_)));
          set_has_reuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_count;
        break;
      }

      // optional int32 count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_platNo;
        break;
      }

      // optional string platNo = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platno().data(), this->platno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_mark;
        break;
      }

      // optional string mark = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mark().data(), this->mark().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateGiftCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 giftId = 2;
  if (has_giftid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->giftid(), output);
  }

  // optional string giftName = 3;
  if (has_giftname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->giftname().data(), this->giftname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->giftname(), output);
  }

  // optional string beginTime = 4;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->begintime().data(), this->begintime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->begintime(), output);
  }

  // optional string endTime = 5;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->endtime(), output);
  }

  // optional string gift = 6;
  if (has_gift()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gift().data(), this->gift().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->gift(), output);
  }

  // optional int32 reuse = 7;
  if (has_reuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->reuse(), output);
  }

  // optional int32 count = 8;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->count(), output);
  }

  // optional string platNo = 9;
  if (has_platno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platno().data(), this->platno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->platno(), output);
  }

  // optional string mark = 10;
  if (has_mark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mark().data(), this->mark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->mark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateGiftCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 giftId = 2;
  if (has_giftid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->giftid(), target);
  }

  // optional string giftName = 3;
  if (has_giftname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->giftname().data(), this->giftname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->giftname(), target);
  }

  // optional string beginTime = 4;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->begintime().data(), this->begintime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->begintime(), target);
  }

  // optional string endTime = 5;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->endtime(), target);
  }

  // optional string gift = 6;
  if (has_gift()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gift().data(), this->gift().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->gift(), target);
  }

  // optional int32 reuse = 7;
  if (has_reuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->reuse(), target);
  }

  // optional int32 count = 8;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->count(), target);
  }

  // optional string platNo = 9;
  if (has_platno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platno().data(), this->platno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->platno(), target);
  }

  // optional string mark = 10;
  if (has_mark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mark().data(), this->mark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->mark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateGiftCode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 giftId = 2;
    if (has_giftid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftid());
    }

    // optional string giftName = 3;
    if (has_giftname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->giftname());
    }

    // optional string beginTime = 4;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->begintime());
    }

    // optional string endTime = 5;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endtime());
    }

    // optional string gift = 6;
    if (has_gift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gift());
    }

    // optional int32 reuse = 7;
    if (has_reuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reuse());
    }

    // optional int32 count = 8;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string platNo = 9;
    if (has_platno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platno());
    }

    // optional string mark = 10;
    if (has_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mark());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateGiftCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateGiftCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateGiftCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateGiftCode::MergeFrom(const CreateGiftCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_giftid()) {
      set_giftid(from.giftid());
    }
    if (from.has_giftname()) {
      set_giftname(from.giftname());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_gift()) {
      set_gift(from.gift());
    }
    if (from.has_reuse()) {
      set_reuse(from.reuse());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_platno()) {
      set_platno(from.platno());
    }
    if (from.has_mark()) {
      set_mark(from.mark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateGiftCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGiftCode::CopyFrom(const CreateGiftCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGiftCode::IsInitialized() const {

  return true;
}

void CreateGiftCode::Swap(CreateGiftCode* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(giftid_, other->giftid_);
    std::swap(giftname_, other->giftname_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(gift_, other->gift_);
    std::swap(reuse_, other->reuse_);
    std::swap(count_, other->count_);
    std::swap(platno_, other->platno_);
    std::swap(mark_, other->mark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateGiftCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateGiftCode_descriptor_;
  metadata.reflection = CreateGiftCode_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
