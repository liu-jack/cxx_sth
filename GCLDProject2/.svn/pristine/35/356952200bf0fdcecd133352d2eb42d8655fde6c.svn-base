// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* CVersionCheck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CVersionCheck_reflection_ = NULL;
const ::google::protobuf::Descriptor* SVersionCheck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SVersionCheck_reflection_ = NULL;
const ::google::protobuf::Descriptor* CVstarGameAccountCheck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CVstarGameAccountCheck_reflection_ = NULL;
const ::google::protobuf::Descriptor* SVstarGameAccountCheck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SVstarGameAccountCheck_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAccountCheck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAccountCheck_reflection_ = NULL;
const ::google::protobuf::Descriptor* SAccountCheck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SAccountCheck_reflection_ = NULL;
const ::google::protobuf::Descriptor* CRegisterAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CRegisterAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* SRegisterAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SRegisterAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* CChangeAccountAndPassord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CChangeAccountAndPassord_reflection_ = NULL;
const ::google::protobuf::Descriptor* SChangeAccountAndPassord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SChangeAccountAndPassord_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGetServerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGetServerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SGetServerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SGetServerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSelectServerId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSelectServerId_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSelectServerId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSelectServerId_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGetPlayerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGetPlayerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerListInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerListInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SGetPlayerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SGetPlayerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCreateChar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCreateChar_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_ChangeName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_ChangeName_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_SetNameAndHeadId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_SetNameAndHeadId_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCreateChar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCreateChar_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCreateCharRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCreateCharRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSlectPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSlectPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSlectPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSlectPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* SGuideProcess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SGuideProcess_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* VERSION_CHECK_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ACCOUNT_CHECK_METHOD_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ACCOUNT_CHECK_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ACCOUNT_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* REGISTER_ACCOUNT_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* REGISTER_ACCOUNT_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CHANGE_ACCOUNT_PASSWORD_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ASK_SELECTSERVERID_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GET_PLAYER_LIST_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CREATE_PLAYER_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SELECT_PLAYER_RESULT_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Login_2eproto() {
  protobuf_AddDesc_Login_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Login.proto");
  GOOGLE_CHECK(file != NULL);
  CVersionCheck_descriptor_ = file->message_type(0);
  static const int CVersionCheck_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVersionCheck, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVersionCheck, platform_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVersionCheck, version_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVersionCheck, resource_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVersionCheck, device_id_),
  };
  CVersionCheck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CVersionCheck_descriptor_,
      CVersionCheck::default_instance_,
      CVersionCheck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVersionCheck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVersionCheck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CVersionCheck));
  SVersionCheck_descriptor_ = file->message_type(1);
  static const int SVersionCheck_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVersionCheck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVersionCheck, resource_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVersionCheck, notice_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVersionCheck, resource_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVersionCheck, is_hot_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVersionCheck, newest_version_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVersionCheck, apk_size_),
  };
  SVersionCheck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SVersionCheck_descriptor_,
      SVersionCheck::default_instance_,
      SVersionCheck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVersionCheck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVersionCheck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SVersionCheck));
  CVstarGameAccountCheck_descriptor_ = file->message_type(2);
  static const int CVstarGameAccountCheck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVstarGameAccountCheck, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVstarGameAccountCheck, sdk_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVstarGameAccountCheck, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVstarGameAccountCheck, register_info_),
  };
  CVstarGameAccountCheck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CVstarGameAccountCheck_descriptor_,
      CVstarGameAccountCheck::default_instance_,
      CVstarGameAccountCheck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVstarGameAccountCheck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVstarGameAccountCheck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CVstarGameAccountCheck));
  SVstarGameAccountCheck_descriptor_ = file->message_type(3);
  static const int SVstarGameAccountCheck_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVstarGameAccountCheck, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVstarGameAccountCheck, sdk_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVstarGameAccountCheck, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVstarGameAccountCheck, error_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVstarGameAccountCheck, account_id_),
  };
  SVstarGameAccountCheck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SVstarGameAccountCheck_descriptor_,
      SVstarGameAccountCheck::default_instance_,
      SVstarGameAccountCheck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVstarGameAccountCheck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVstarGameAccountCheck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SVstarGameAccountCheck));
  CAccountCheck_descriptor_ = file->message_type(4);
  static const int CAccountCheck_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountCheck, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountCheck, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountCheck, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountCheck, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountCheck, platform_id_),
  };
  CAccountCheck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAccountCheck_descriptor_,
      CAccountCheck::default_instance_,
      CAccountCheck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountCheck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountCheck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAccountCheck));
  SAccountCheck_descriptor_ = file->message_type(5);
  static const int SAccountCheck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SAccountCheck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SAccountCheck, account_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SAccountCheck, account_id_),
  };
  SAccountCheck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SAccountCheck_descriptor_,
      SAccountCheck::default_instance_,
      SAccountCheck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SAccountCheck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SAccountCheck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SAccountCheck));
  CRegisterAccount_descriptor_ = file->message_type(6);
  static const int CRegisterAccount_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRegisterAccount, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRegisterAccount, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRegisterAccount, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRegisterAccount, phone_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRegisterAccount, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRegisterAccount, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRegisterAccount, platform_id_),
  };
  CRegisterAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CRegisterAccount_descriptor_,
      CRegisterAccount::default_instance_,
      CRegisterAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRegisterAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRegisterAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CRegisterAccount));
  SRegisterAccount_descriptor_ = file->message_type(7);
  static const int SRegisterAccount_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRegisterAccount, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRegisterAccount, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRegisterAccount, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRegisterAccount, password_),
  };
  SRegisterAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SRegisterAccount_descriptor_,
      SRegisterAccount::default_instance_,
      SRegisterAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRegisterAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRegisterAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SRegisterAccount));
  CChangeAccountAndPassord_descriptor_ = file->message_type(8);
  static const int CChangeAccountAndPassord_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CChangeAccountAndPassord, old_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CChangeAccountAndPassord, old_password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CChangeAccountAndPassord, new_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CChangeAccountAndPassord, new_password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CChangeAccountAndPassord, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CChangeAccountAndPassord, platform_id_),
  };
  CChangeAccountAndPassord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CChangeAccountAndPassord_descriptor_,
      CChangeAccountAndPassord::default_instance_,
      CChangeAccountAndPassord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CChangeAccountAndPassord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CChangeAccountAndPassord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CChangeAccountAndPassord));
  SChangeAccountAndPassord_descriptor_ = file->message_type(9);
  static const int SChangeAccountAndPassord_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SChangeAccountAndPassord, result_),
  };
  SChangeAccountAndPassord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SChangeAccountAndPassord_descriptor_,
      SChangeAccountAndPassord::default_instance_,
      SChangeAccountAndPassord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SChangeAccountAndPassord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SChangeAccountAndPassord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SChangeAccountAndPassord));
  CGetServerList_descriptor_ = file->message_type(10);
  static const int CGetServerList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGetServerList, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGetServerList, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGetServerList, platform_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGetServerList, version_id_),
  };
  CGetServerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGetServerList_descriptor_,
      CGetServerList::default_instance_,
      CGetServerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGetServerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGetServerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGetServerList));
  ServerInfo_descriptor_ = file->message_type(11);
  static const int ServerInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, server_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, is_new_),
  };
  ServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerInfo_descriptor_,
      ServerInfo::default_instance_,
      ServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInfo));
  SGetServerList_descriptor_ = file->message_type(12);
  static const int SGetServerList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGetServerList, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGetServerList, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGetServerList, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGetServerList, server_info_),
  };
  SGetServerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SGetServerList_descriptor_,
      SGetServerList::default_instance_,
      SGetServerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGetServerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGetServerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SGetServerList));
  CSelectServerId_descriptor_ = file->message_type(13);
  static const int CSelectServerId_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSelectServerId, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSelectServerId, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSelectServerId, account_id_),
  };
  CSelectServerId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSelectServerId_descriptor_,
      CSelectServerId::default_instance_,
      CSelectServerId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSelectServerId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSelectServerId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSelectServerId));
  SSelectServerId_descriptor_ = file->message_type(14);
  static const int SSelectServerId_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSelectServerId, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSelectServerId, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSelectServerId, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSelectServerId, session_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSelectServerId, key_value_),
  };
  SSelectServerId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSelectServerId_descriptor_,
      SSelectServerId::default_instance_,
      SSelectServerId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSelectServerId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSelectServerId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSelectServerId));
  CGetPlayerList_descriptor_ = file->message_type(15);
  static const int CGetPlayerList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGetPlayerList, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGetPlayerList, session_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGetPlayerList, key_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGetPlayerList, account_),
  };
  CGetPlayerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGetPlayerList_descriptor_,
      CGetPlayerList::default_instance_,
      CGetPlayerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGetPlayerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGetPlayerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGetPlayerList));
  PlayerListInfo_descriptor_ = file->message_type(16);
  static const int PlayerListInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerListInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerListInfo, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerListInfo, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerListInfo, head_icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerListInfo, country_id_),
  };
  PlayerListInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerListInfo_descriptor_,
      PlayerListInfo::default_instance_,
      PlayerListInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerListInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerListInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerListInfo));
  SGetPlayerList_descriptor_ = file->message_type(17);
  static const int SGetPlayerList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGetPlayerList, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGetPlayerList, player_infos_),
  };
  SGetPlayerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SGetPlayerList_descriptor_,
      SGetPlayerList::default_instance_,
      SGetPlayerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGetPlayerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGetPlayerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SGetPlayerList));
  CCreateChar_descriptor_ = file->message_type(18);
  static const int CCreateChar_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCreateChar, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCreateChar, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCreateChar, card_solution_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCreateChar, sdk_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCreateChar, platform_id_),
  };
  CCreateChar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCreateChar_descriptor_,
      CCreateChar::default_instance_,
      CCreateChar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCreateChar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCreateChar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCreateChar));
  MSG_ChangeName_descriptor_ = file->message_type(19);
  static const int MSG_ChangeName_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_ChangeName, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_ChangeName, err_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_ChangeName, player_id_),
  };
  MSG_ChangeName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_ChangeName_descriptor_,
      MSG_ChangeName::default_instance_,
      MSG_ChangeName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_ChangeName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_ChangeName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_ChangeName));
  MSG_SetNameAndHeadId_descriptor_ = file->message_type(20);
  static const int MSG_SetNameAndHeadId_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_SetNameAndHeadId, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_SetNameAndHeadId, head_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_SetNameAndHeadId, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_SetNameAndHeadId, err_code_),
  };
  MSG_SetNameAndHeadId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_SetNameAndHeadId_descriptor_,
      MSG_SetNameAndHeadId::default_instance_,
      MSG_SetNameAndHeadId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_SetNameAndHeadId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_SetNameAndHeadId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_SetNameAndHeadId));
  SCreateChar_descriptor_ = file->message_type(21);
  static const int SCreateChar_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCreateChar, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCreateChar, player_id_),
  };
  SCreateChar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCreateChar_descriptor_,
      SCreateChar::default_instance_,
      SCreateChar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCreateChar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCreateChar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCreateChar));
  SCreateCharRes_descriptor_ = file->message_type(22);
  static const int SCreateCharRes_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCreateCharRes, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCreateCharRes, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCreateCharRes, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCreateCharRes, sdk_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCreateCharRes, platform_id_),
  };
  SCreateCharRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCreateCharRes_descriptor_,
      SCreateCharRes::default_instance_,
      SCreateCharRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCreateCharRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCreateCharRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCreateCharRes));
  CSlectPlayer_descriptor_ = file->message_type(23);
  static const int CSlectPlayer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSlectPlayer, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSlectPlayer, platform_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSlectPlayer, country_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSlectPlayer, headpic_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSlectPlayer, expected_country_id_),
  };
  CSlectPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSlectPlayer_descriptor_,
      CSlectPlayer::default_instance_,
      CSlectPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSlectPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSlectPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSlectPlayer));
  SSlectPlayer_descriptor_ = file->message_type(24);
  static const int SSlectPlayer_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSlectPlayer, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSlectPlayer, player_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSlectPlayer, is_quick_login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSlectPlayer, country_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSlectPlayer, headpic_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSlectPlayer, expected_country_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSlectPlayer, player_id_),
  };
  SSlectPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSlectPlayer_descriptor_,
      SSlectPlayer::default_instance_,
      SSlectPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSlectPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSlectPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSlectPlayer));
  SGuideProcess_descriptor_ = file->message_type(25);
  static const int SGuideProcess_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGuideProcess, is_need_guide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGuideProcess, is_finished_guide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGuideProcess, cur_process_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGuideProcess, left_precess_),
  };
  SGuideProcess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SGuideProcess_descriptor_,
      SGuideProcess::default_instance_,
      SGuideProcess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGuideProcess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGuideProcess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SGuideProcess));
  VERSION_CHECK_RESULT_descriptor_ = file->enum_type(0);
  ACCOUNT_CHECK_METHOD_descriptor_ = file->enum_type(1);
  ACCOUNT_CHECK_RESULT_descriptor_ = file->enum_type(2);
  ACCOUNT_TYPE_descriptor_ = file->enum_type(3);
  REGISTER_ACCOUNT_TYPE_descriptor_ = file->enum_type(4);
  REGISTER_ACCOUNT_RESULT_descriptor_ = file->enum_type(5);
  CHANGE_ACCOUNT_PASSWORD_RESULT_descriptor_ = file->enum_type(6);
  ServerState_descriptor_ = file->enum_type(7);
  ASK_SELECTSERVERID_RESULT_descriptor_ = file->enum_type(8);
  GET_PLAYER_LIST_RESULT_descriptor_ = file->enum_type(9);
  CREATE_PLAYER_RESULT_descriptor_ = file->enum_type(10);
  SELECT_PLAYER_RESULT_descriptor_ = file->enum_type(11);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Login_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CVersionCheck_descriptor_, &CVersionCheck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SVersionCheck_descriptor_, &SVersionCheck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CVstarGameAccountCheck_descriptor_, &CVstarGameAccountCheck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SVstarGameAccountCheck_descriptor_, &SVstarGameAccountCheck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAccountCheck_descriptor_, &CAccountCheck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SAccountCheck_descriptor_, &SAccountCheck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CRegisterAccount_descriptor_, &CRegisterAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SRegisterAccount_descriptor_, &SRegisterAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CChangeAccountAndPassord_descriptor_, &CChangeAccountAndPassord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SChangeAccountAndPassord_descriptor_, &SChangeAccountAndPassord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGetServerList_descriptor_, &CGetServerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInfo_descriptor_, &ServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SGetServerList_descriptor_, &SGetServerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSelectServerId_descriptor_, &CSelectServerId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSelectServerId_descriptor_, &SSelectServerId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGetPlayerList_descriptor_, &CGetPlayerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerListInfo_descriptor_, &PlayerListInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SGetPlayerList_descriptor_, &SGetPlayerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCreateChar_descriptor_, &CCreateChar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_ChangeName_descriptor_, &MSG_ChangeName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_SetNameAndHeadId_descriptor_, &MSG_SetNameAndHeadId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCreateChar_descriptor_, &SCreateChar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCreateCharRes_descriptor_, &SCreateCharRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSlectPlayer_descriptor_, &CSlectPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSlectPlayer_descriptor_, &SSlectPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SGuideProcess_descriptor_, &SGuideProcess::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Login_2eproto() {
  delete CVersionCheck::default_instance_;
  delete CVersionCheck_reflection_;
  delete SVersionCheck::default_instance_;
  delete SVersionCheck_reflection_;
  delete CVstarGameAccountCheck::default_instance_;
  delete CVstarGameAccountCheck_reflection_;
  delete SVstarGameAccountCheck::default_instance_;
  delete SVstarGameAccountCheck_reflection_;
  delete CAccountCheck::default_instance_;
  delete CAccountCheck_reflection_;
  delete SAccountCheck::default_instance_;
  delete SAccountCheck_reflection_;
  delete CRegisterAccount::default_instance_;
  delete CRegisterAccount_reflection_;
  delete SRegisterAccount::default_instance_;
  delete SRegisterAccount_reflection_;
  delete CChangeAccountAndPassord::default_instance_;
  delete CChangeAccountAndPassord_reflection_;
  delete SChangeAccountAndPassord::default_instance_;
  delete SChangeAccountAndPassord_reflection_;
  delete CGetServerList::default_instance_;
  delete CGetServerList_reflection_;
  delete ServerInfo::default_instance_;
  delete ServerInfo_reflection_;
  delete SGetServerList::default_instance_;
  delete SGetServerList_reflection_;
  delete CSelectServerId::default_instance_;
  delete CSelectServerId_reflection_;
  delete SSelectServerId::default_instance_;
  delete SSelectServerId_reflection_;
  delete CGetPlayerList::default_instance_;
  delete CGetPlayerList_reflection_;
  delete PlayerListInfo::default_instance_;
  delete PlayerListInfo_reflection_;
  delete SGetPlayerList::default_instance_;
  delete SGetPlayerList_reflection_;
  delete CCreateChar::default_instance_;
  delete CCreateChar_reflection_;
  delete MSG_ChangeName::default_instance_;
  delete MSG_ChangeName_reflection_;
  delete MSG_SetNameAndHeadId::default_instance_;
  delete MSG_SetNameAndHeadId_reflection_;
  delete SCreateChar::default_instance_;
  delete SCreateChar_reflection_;
  delete SCreateCharRes::default_instance_;
  delete SCreateCharRes_reflection_;
  delete CSlectPlayer::default_instance_;
  delete CSlectPlayer_reflection_;
  delete SSlectPlayer::default_instance_;
  delete SSlectPlayer_reflection_;
  delete SGuideProcess::default_instance_;
  delete SGuideProcess_reflection_;
}

void protobuf_AddDesc_Login_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_GameServer_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Login.proto\022\002pb\032\020GameServer.proto\"t\n\rC"
    "VersionCheck\022\022\n\nchannel_id\030\001 \002(\r\022\023\n\013plat"
    "form_id\030\002 \002(\r\022\022\n\nversion_id\030\003 \002(\r\022\023\n\013res"
    "ource_id\030\004 \002(\r\022\021\n\tdevice_id\030\005 \001(\t\"\311\001\n\rSV"
    "ersionCheck\022(\n\006result\030\001 \002(\0162\030.pb.VERSION"
    "_CHECK_RESULT\022\023\n\013resource_id\030\002 \001(\r\022\026\n\016no"
    "tice_address\030\003 \001(\t\022\030\n\020resource_address\030\004"
    " \001(\t\022\025\n\ris_hot_update\030\005 \001(\r\022\036\n\026newest_ve"
    "rsion_address\030\006 \001(\t\022\020\n\010apk_size\030\007 \001(\002\"|\n"
    "\026CVstarGameAccountCheck\022\021\n\tclient_id\030\001 \001"
    "(\t\022\023\n\013sdk_user_id\030\002 \001(\t\022\r\n\005token\030\003 \001(\t\022+"
    "\n\rregister_info\030\004 \001(\0132\024.pb.CRegisterAcco"
    "unt\"x\n\026SVstarGameAccountCheck\022\016\n\006status\030"
    "\001 \001(\010\022\023\n\013sdk_user_id\030\002 \001(\t\022\022\n\nerror_code"
    "\030\003 \001(\r\022\021\n\terror_msg\030\004 \001(\t\022\022\n\naccount_id\030"
    "\005 \001(\004\"\205\001\n\rCAccountCheck\022(\n\006method\030\001 \002(\0162"
    "\030.pb.ACCOUNT_CHECK_METHOD\022\017\n\007account\030\002 \001"
    "(\t\022\020\n\010password\030\003 \001(\t\022\022\n\nchannel_id\030\004 \002(\r"
    "\022\023\n\013platform_id\030\005 \002(\r\"u\n\rSAccountCheck\022("
    "\n\006result\030\001 \002(\0162\030.pb.ACCOUNT_CHECK_RESULT"
    "\022&\n\014account_type\030\002 \001(\0162\020.pb.ACCOUNT_TYPE"
    "\022\022\n\naccount_id\030\003 \001(\004\"\260\001\n\020CRegisterAccoun"
    "t\022\'\n\004type\030\001 \002(\0162\031.pb.REGISTER_ACCOUNT_TY"
    "PE\022\017\n\007account\030\002 \001(\t\022\020\n\010password\030\003 \001(\t\022\024\n"
    "\014phone_number\030\004 \001(\t\022\021\n\tdevice_id\030\005 \001(\t\022\022"
    "\n\nchannel_id\030\006 \001(\r\022\023\n\013platform_id\030\007 \001(\r\""
    "v\n\020SRegisterAccount\022+\n\006result\030\001 \002(\0162\033.pb"
    ".REGISTER_ACCOUNT_RESULT\022\022\n\naccount_id\030\002"
    " \001(\004\022\017\n\007account\030\003 \001(\t\022\020\n\010password\030\004 \001(\t\""
    "\231\001\n\030CChangeAccountAndPassord\022\023\n\013old_acco"
    "unt\030\001 \001(\t\022\024\n\014old_password\030\002 \001(\t\022\023\n\013new_a"
    "ccount\030\003 \001(\t\022\024\n\014new_password\030\004 \001(\t\022\022\n\nch"
    "annel_id\030\005 \002(\r\022\023\n\013platform_id\030\006 \002(\r\"N\n\030S"
    "ChangeAccountAndPassord\0222\n\006result\030\001 \002(\0162"
    "\".pb.CHANGE_ACCOUNT_PASSWORD_RESULT\"a\n\016C"
    "GetServerList\022\022\n\naccount_id\030\001 \002(\004\022\022\n\ncha"
    "nnel_id\030\002 \001(\r\022\023\n\013platform_id\030\003 \001(\r\022\022\n\nve"
    "rsion_id\030\004 \001(\r\"{\n\nServerInfo\022\021\n\tregion_i"
    "d\030\001 \001(\r\022\020\n\010group_id\030\002 \001(\r\022\021\n\tserver_id\030\003"
    " \001(\r\022%\n\014server_state\030\004 \001(\0162\017.pb.ServerSt"
    "ate\022\016\n\006is_new\030\005 \001(\010\"m\n\016SGetServerList\022\021\n"
    "\tregion_id\030\001 \001(\r\022\020\n\010group_id\030\002 \001(\r\022\021\n\tse"
    "rver_id\030\003 \001(\r\022#\n\013server_info\030\004 \003(\0132\016.pb."
    "ServerInfo\"K\n\017CSelectServerId\022\021\n\tregion_"
    "id\030\001 \001(\r\022\021\n\tserver_id\030\002 \001(\r\022\022\n\naccount_i"
    "d\030\003 \001(\004\"\202\001\n\017SSelectServerId\022-\n\006result\030\001 "
    "\002(\0162\035.pb.ASK_SELECTSERVERID_RESULT\022\n\n\002ip"
    "\030\002 \001(\t\022\014\n\004port\030\003 \001(\t\022\023\n\013session_key\030\004 \001("
    "\t\022\021\n\tkey_value\030\005 \001(\004\"]\n\016CGetPlayerList\022\022"
    "\n\naccount_id\030\001 \002(\004\022\023\n\013session_key\030\002 \001(\t\022"
    "\021\n\tkey_value\030\003 \001(\004\022\017\n\007account\030\004 \001(\t\"f\n\016P"
    "layerListInfo\022\014\n\004name\030\001 \002(\t\022\014\n\004slot\030\002 \001("
    "\005\022\021\n\tplayer_id\030\003 \002(\004\022\021\n\thead_icon\030\004 \001(\r\022"
    "\022\n\ncountry_id\030\005 \001(\r\"f\n\016SGetPlayerList\022*\n"
    "\006result\030\001 \002(\0162\032.pb.GET_PLAYER_LIST_RESUL"
    "T\022(\n\014player_infos\030\002 \003(\0132\022.pb.PlayerListI"
    "nfo\"s\n\013CCreateChar\022\014\n\004name\030\001 \002(\t\022\022\n\nchan"
    "nel_id\030\002 \001(\r\022\030\n\020card_solution_id\030\003 \001(\r\022\023"
    "\n\013sdk_user_id\030\004 \001(\t\022\023\n\013platform_id\030\005 \001(\r"
    "\"C\n\016MSG_ChangeName\022\014\n\004name\030\001 \002(\t\022\020\n\010err_"
    "code\030\002 \001(\r\022\021\n\tplayer_id\030\003 \001(\004\"Z\n\024MSG_Set"
    "NameAndHeadId\022\014\n\004name\030\001 \002(\t\022\017\n\007head_id\030\002"
    " \002(\r\022\021\n\tplayer_id\030\003 \001(\004\022\020\n\010err_code\030\004 \001("
    "\r\"J\n\013SCreateChar\022(\n\006result\030\001 \002(\0162\030.pb.CR"
    "EATE_PLAYER_RESULT\022\021\n\tplayer_id\030\002 \001(\004\"z\n"
    "\016SCreateCharRes\022\034\n\003res\030\001 \002(\0132\017.pb.SCreat"
    "eChar\022\014\n\004name\030\002 \002(\t\022\022\n\nchannel_id\030\003 \001(\r\022"
    "\023\n\013sdk_user_id\030\004 \001(\t\022\023\n\013platform_id\030\005 \001("
    "\r\"{\n\014CSlectPlayer\022\021\n\tplayer_id\030\001 \002(\004\022\023\n\013"
    "platform_id\030\002 \001(\r\022\022\n\ncountry_id\030\003 \001(\r\022\022\n"
    "\nheadpic_id\030\004 \001(\r\022\033\n\023expected_country_id"
    "\030\005 \001(\r\"\320\001\n\014SSlectPlayer\022(\n\006result\030\001 \002(\0162"
    "\030.pb.SELECT_PLAYER_RESULT\022&\n\013player_data"
    "\030\002 \001(\0132\021.pb.PlayerAllData\022\026\n\016is_quick_lo"
    "gin\030\003 \001(\010\022\022\n\ncountry_id\030\004 \001(\r\022\022\n\nheadpic"
    "_id\030\005 \001(\r\022\033\n\023expected_country_id\030\006 \001(\r\022\021"
    "\n\tplayer_id\030\007 \002(\004\"l\n\rSGuideProcess\022\025\n\ris"
    "_need_guide\030\001 \002(\010\022\031\n\021is_finished_guide\030\002"
    " \002(\010\022\023\n\013cur_process\030\003 \002(\r\022\024\n\014left_preces"
    "s\030\004 \001(\r*\332\001\n\024VERSION_CHECK_RESULT\022\'\n#VERS"
    "ION_CHECK_NEWEST_VERION_SUCCESS\020\000\022!\n\035VER"
    "SION_CHECK_INVALID_VERSION\020\001\022)\n%VERSION_"
    "CHECK_INVALID_RESOURCE_VESION\020\002\022\'\n#VERSI"
    "ON_CHECK_CAN_NOT_FIND_PLATFORM\020\003\022\"\n\036VERS"
    "ION_CHECK_RESOURCE_NOT_SET\020\004*1\n\024ACCOUNT_"
    "CHECK_METHOD\022\031\n\025ACCOUNT_CHECK_ACCOUNT\020\001*"
    "\251\001\n\024ACCOUNT_CHECK_RESULT\022\031\n\025ACCOUNT_CHEC"
    "K_SUCCESS\020\000\022\034\n\030ACCOUNT_CHECK_NAME_ERROR\020"
    "\001\022\033\n\027ACCOUNT_CHECK_PWD_ERROR\020\002\022\037\n\033ACCOUN"
    "T_CHECK_METHOD_UNKNOW\020\003\022\032\n\026ACCOUNT_CHECK"
    "_FORBIDEN\020\004*\?\n\014ACCOUNT_TYPE\022\026\n\022ACCOUNT_T"
    "YPE_GUEST\020\000\022\027\n\023ACCOUNT_TYPE_NORMAL\020\001*Q\n\025"
    "REGISTER_ACCOUNT_TYPE\022\034\n\030REGISTER_ACCOUN"
    "T_ACCOUNT\020\000\022\032\n\026REGISTER_ACCOUNT_GUEST\020\001*"
    "\231\001\n\027REGISTER_ACCOUNT_RESULT\022\034\n\030REGISTER_"
    "ACCOUNT_SUCCESS\020\000\022\037\n\033REGISTER_ACCOUNT_NA"
    "ME_ERROR\020\001\022\037\n\033REGISTER_ACCOUNT_NAME_EXIS"
    "T\020\002\022\036\n\032REGISTER_ACCOUTN_PWD_ERROR\020\003*\225\001\n\036"
    "CHANGE_ACCOUNT_PASSWORD_RESULT\022&\n\"CHANGE"
    "_ACCOUNT_PWD_ACCOUNT_SUCCESS\020\000\022$\n CHANGE"
    "_ACCOUNT_PWD_ACCOUNT_ERROR\020\001\022%\n!CHANGE_A"
    "CCOUNT_PWD_PASSWORD_ERROR\020\002*n\n\013ServerSta"
    "te\022\025\n\021SERVER_STATE_GOOD\020\000\022\025\n\021SERVER_STAT"
    "E_BUSY\020\001\022\026\n\022SERVER_STATE_LIMIT\020\002\022\031\n\025SERV"
    "ER_STATE_MAINTAIN\020\003*\260\001\n\031ASK_SELECTSERVER"
    "ID_RESULT\022\036\n\032ASK_SELECTSERVERID_SUCCESS\020"
    "\000\022%\n!ASK_SELECTSERVERID_INVALID_SERVER\020\001"
    "\022(\n$ASK_SELECTSERVERID_RECH_SERVER_LIMIT"
    "\020\002\022\"\n\036ASK_SELECTSERVERID_IN_MAINTAIN\020\003*\231"
    "\001\n\026GET_PLAYER_LIST_RESULT\022\033\n\027GET_PALYER_"
    "LIST_SUCCESS\020\000\022\035\n\031GET_PLAYER_LIST_KEY_ER"
    "ROR\020\001\022%\n!GET_PLAYER_LIST_KEY_VALUE_INVAL"
    "ID\020\002\022\034\n\030GET_PLAYER_LIST_DB_ERROR\020\003*\371\001\n\024C"
    "REATE_PLAYER_RESULT\022\031\n\025CREATE_PLAYER_SUC"
    "CESS\020\000\022\033\n\027CREATE_PLAYER_SAME_NAME\020\001\022$\n C"
    "REATE_PLAYER_UNAVAILABLE_SERVER\020\002\022\026\n\022CRE"
    "ATE_PLAYER_FULL\020\003\022\036\n\032CREATE_PLAYER_INVAL"
    "ID_NAME\020\004\022#\n\037CREATE_PLAYER_CREATE_INFO_E"
    "RROR\020\005\022&\n\"CREATE_PLAYER_DATABASE_INSERT_"
    "FAIL\020\006*\236\001\n\024SELECT_PLAYER_RESULT\022\031\n\025SELEC"
    "T_PLAYER_SUCCESS\020\000\022$\n SELECT_PLAYER_UNAV"
    "AILABLE_SERVER\020\001\022!\n\035SELECT_PLAYER_PLAYER"
    "_ID_ERROR\020\002\022\"\n\036SELECT_PLAYER_PLAYER_ID_L"
    "OCKED\020\003", 4927);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Login.proto", &protobuf_RegisterTypes);
  CVersionCheck::default_instance_ = new CVersionCheck();
  SVersionCheck::default_instance_ = new SVersionCheck();
  CVstarGameAccountCheck::default_instance_ = new CVstarGameAccountCheck();
  SVstarGameAccountCheck::default_instance_ = new SVstarGameAccountCheck();
  CAccountCheck::default_instance_ = new CAccountCheck();
  SAccountCheck::default_instance_ = new SAccountCheck();
  CRegisterAccount::default_instance_ = new CRegisterAccount();
  SRegisterAccount::default_instance_ = new SRegisterAccount();
  CChangeAccountAndPassord::default_instance_ = new CChangeAccountAndPassord();
  SChangeAccountAndPassord::default_instance_ = new SChangeAccountAndPassord();
  CGetServerList::default_instance_ = new CGetServerList();
  ServerInfo::default_instance_ = new ServerInfo();
  SGetServerList::default_instance_ = new SGetServerList();
  CSelectServerId::default_instance_ = new CSelectServerId();
  SSelectServerId::default_instance_ = new SSelectServerId();
  CGetPlayerList::default_instance_ = new CGetPlayerList();
  PlayerListInfo::default_instance_ = new PlayerListInfo();
  SGetPlayerList::default_instance_ = new SGetPlayerList();
  CCreateChar::default_instance_ = new CCreateChar();
  MSG_ChangeName::default_instance_ = new MSG_ChangeName();
  MSG_SetNameAndHeadId::default_instance_ = new MSG_SetNameAndHeadId();
  SCreateChar::default_instance_ = new SCreateChar();
  SCreateCharRes::default_instance_ = new SCreateCharRes();
  CSlectPlayer::default_instance_ = new CSlectPlayer();
  SSlectPlayer::default_instance_ = new SSlectPlayer();
  SGuideProcess::default_instance_ = new SGuideProcess();
  CVersionCheck::default_instance_->InitAsDefaultInstance();
  SVersionCheck::default_instance_->InitAsDefaultInstance();
  CVstarGameAccountCheck::default_instance_->InitAsDefaultInstance();
  SVstarGameAccountCheck::default_instance_->InitAsDefaultInstance();
  CAccountCheck::default_instance_->InitAsDefaultInstance();
  SAccountCheck::default_instance_->InitAsDefaultInstance();
  CRegisterAccount::default_instance_->InitAsDefaultInstance();
  SRegisterAccount::default_instance_->InitAsDefaultInstance();
  CChangeAccountAndPassord::default_instance_->InitAsDefaultInstance();
  SChangeAccountAndPassord::default_instance_->InitAsDefaultInstance();
  CGetServerList::default_instance_->InitAsDefaultInstance();
  ServerInfo::default_instance_->InitAsDefaultInstance();
  SGetServerList::default_instance_->InitAsDefaultInstance();
  CSelectServerId::default_instance_->InitAsDefaultInstance();
  SSelectServerId::default_instance_->InitAsDefaultInstance();
  CGetPlayerList::default_instance_->InitAsDefaultInstance();
  PlayerListInfo::default_instance_->InitAsDefaultInstance();
  SGetPlayerList::default_instance_->InitAsDefaultInstance();
  CCreateChar::default_instance_->InitAsDefaultInstance();
  MSG_ChangeName::default_instance_->InitAsDefaultInstance();
  MSG_SetNameAndHeadId::default_instance_->InitAsDefaultInstance();
  SCreateChar::default_instance_->InitAsDefaultInstance();
  SCreateCharRes::default_instance_->InitAsDefaultInstance();
  CSlectPlayer::default_instance_->InitAsDefaultInstance();
  SSlectPlayer::default_instance_->InitAsDefaultInstance();
  SGuideProcess::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Login_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Login_2eproto {
  StaticDescriptorInitializer_Login_2eproto() {
    protobuf_AddDesc_Login_2eproto();
  }
} static_descriptor_initializer_Login_2eproto_;
const ::google::protobuf::EnumDescriptor* VERSION_CHECK_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VERSION_CHECK_RESULT_descriptor_;
}
bool VERSION_CHECK_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ACCOUNT_CHECK_METHOD_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACCOUNT_CHECK_METHOD_descriptor_;
}
bool ACCOUNT_CHECK_METHOD_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ACCOUNT_CHECK_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACCOUNT_CHECK_RESULT_descriptor_;
}
bool ACCOUNT_CHECK_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ACCOUNT_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACCOUNT_TYPE_descriptor_;
}
bool ACCOUNT_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* REGISTER_ACCOUNT_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REGISTER_ACCOUNT_TYPE_descriptor_;
}
bool REGISTER_ACCOUNT_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* REGISTER_ACCOUNT_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REGISTER_ACCOUNT_RESULT_descriptor_;
}
bool REGISTER_ACCOUNT_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CHANGE_ACCOUNT_PASSWORD_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CHANGE_ACCOUNT_PASSWORD_RESULT_descriptor_;
}
bool CHANGE_ACCOUNT_PASSWORD_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ServerState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerState_descriptor_;
}
bool ServerState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ASK_SELECTSERVERID_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ASK_SELECTSERVERID_RESULT_descriptor_;
}
bool ASK_SELECTSERVERID_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GET_PLAYER_LIST_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GET_PLAYER_LIST_RESULT_descriptor_;
}
bool GET_PLAYER_LIST_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CREATE_PLAYER_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CREATE_PLAYER_RESULT_descriptor_;
}
bool CREATE_PLAYER_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SELECT_PLAYER_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SELECT_PLAYER_RESULT_descriptor_;
}
bool SELECT_PLAYER_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CVersionCheck::kChannelIdFieldNumber;
const int CVersionCheck::kPlatformIdFieldNumber;
const int CVersionCheck::kVersionIdFieldNumber;
const int CVersionCheck::kResourceIdFieldNumber;
const int CVersionCheck::kDeviceIdFieldNumber;
#endif  // !_MSC_VER

CVersionCheck::CVersionCheck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CVersionCheck::InitAsDefaultInstance() {
}

CVersionCheck::CVersionCheck(const CVersionCheck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CVersionCheck::SharedCtor() {
  _cached_size_ = 0;
  channel_id_ = 0u;
  platform_id_ = 0u;
  version_id_ = 0u;
  resource_id_ = 0u;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CVersionCheck::~CVersionCheck() {
  SharedDtor();
}

void CVersionCheck::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void CVersionCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CVersionCheck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CVersionCheck_descriptor_;
}

const CVersionCheck& CVersionCheck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

CVersionCheck* CVersionCheck::default_instance_ = NULL;

CVersionCheck* CVersionCheck::New() const {
  return new CVersionCheck;
}

void CVersionCheck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_id_ = 0u;
    platform_id_ = 0u;
    version_id_ = 0u;
    resource_id_ = 0u;
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CVersionCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 channel_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_platform_id;
        break;
      }

      // required uint32 platform_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_id_)));
          set_has_platform_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_version_id;
        break;
      }

      // required uint32 version_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_id_)));
          set_has_version_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_resource_id;
        break;
      }

      // required uint32 resource_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resource_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resource_id_)));
          set_has_resource_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_device_id;
        break;
      }

      // optional string device_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CVersionCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel_id(), output);
  }

  // required uint32 platform_id = 2;
  if (has_platform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->platform_id(), output);
  }

  // required uint32 version_id = 3;
  if (has_version_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version_id(), output);
  }

  // required uint32 resource_id = 4;
  if (has_resource_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->resource_id(), output);
  }

  // optional string device_id = 5;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->device_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CVersionCheck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 channel_id = 1;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel_id(), target);
  }

  // required uint32 platform_id = 2;
  if (has_platform_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->platform_id(), target);
  }

  // required uint32 version_id = 3;
  if (has_version_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->version_id(), target);
  }

  // required uint32 resource_id = 4;
  if (has_resource_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->resource_id(), target);
  }

  // optional string device_id = 5;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->device_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CVersionCheck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // required uint32 platform_id = 2;
    if (has_platform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platform_id());
    }

    // required uint32 version_id = 3;
    if (has_version_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_id());
    }

    // required uint32 resource_id = 4;
    if (has_resource_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resource_id());
    }

    // optional string device_id = 5;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CVersionCheck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CVersionCheck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CVersionCheck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CVersionCheck::MergeFrom(const CVersionCheck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_platform_id()) {
      set_platform_id(from.platform_id());
    }
    if (from.has_version_id()) {
      set_version_id(from.version_id());
    }
    if (from.has_resource_id()) {
      set_resource_id(from.resource_id());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CVersionCheck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVersionCheck::CopyFrom(const CVersionCheck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVersionCheck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CVersionCheck::Swap(CVersionCheck* other) {
  if (other != this) {
    std::swap(channel_id_, other->channel_id_);
    std::swap(platform_id_, other->platform_id_);
    std::swap(version_id_, other->version_id_);
    std::swap(resource_id_, other->resource_id_);
    std::swap(device_id_, other->device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CVersionCheck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CVersionCheck_descriptor_;
  metadata.reflection = CVersionCheck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SVersionCheck::kResultFieldNumber;
const int SVersionCheck::kResourceIdFieldNumber;
const int SVersionCheck::kNoticeAddressFieldNumber;
const int SVersionCheck::kResourceAddressFieldNumber;
const int SVersionCheck::kIsHotUpdateFieldNumber;
const int SVersionCheck::kNewestVersionAddressFieldNumber;
const int SVersionCheck::kApkSizeFieldNumber;
#endif  // !_MSC_VER

SVersionCheck::SVersionCheck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SVersionCheck::InitAsDefaultInstance() {
}

SVersionCheck::SVersionCheck(const SVersionCheck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SVersionCheck::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  resource_id_ = 0u;
  notice_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resource_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_hot_update_ = 0u;
  newest_version_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  apk_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SVersionCheck::~SVersionCheck() {
  SharedDtor();
}

void SVersionCheck::SharedDtor() {
  if (notice_address_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_address_;
  }
  if (resource_address_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_address_;
  }
  if (newest_version_address_ != &::google::protobuf::internal::kEmptyString) {
    delete newest_version_address_;
  }
  if (this != default_instance_) {
  }
}

void SVersionCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SVersionCheck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SVersionCheck_descriptor_;
}

const SVersionCheck& SVersionCheck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

SVersionCheck* SVersionCheck::default_instance_ = NULL;

SVersionCheck* SVersionCheck::New() const {
  return new SVersionCheck;
}

void SVersionCheck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    resource_id_ = 0u;
    if (has_notice_address()) {
      if (notice_address_ != &::google::protobuf::internal::kEmptyString) {
        notice_address_->clear();
      }
    }
    if (has_resource_address()) {
      if (resource_address_ != &::google::protobuf::internal::kEmptyString) {
        resource_address_->clear();
      }
    }
    is_hot_update_ = 0u;
    if (has_newest_version_address()) {
      if (newest_version_address_ != &::google::protobuf::internal::kEmptyString) {
        newest_version_address_->clear();
      }
    }
    apk_size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SVersionCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.VERSION_CHECK_RESULT result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::VERSION_CHECK_RESULT_IsValid(value)) {
            set_result(static_cast< ::pb::VERSION_CHECK_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_resource_id;
        break;
      }

      // optional uint32 resource_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resource_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resource_id_)));
          set_has_resource_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_notice_address;
        break;
      }

      // optional string notice_address = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice_address().data(), this->notice_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_resource_address;
        break;
      }

      // optional string resource_address = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resource_address().data(), this->resource_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_hot_update;
        break;
      }

      // optional uint32 is_hot_update = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_hot_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_hot_update_)));
          set_has_is_hot_update();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_newest_version_address;
        break;
      }

      // optional string newest_version_address = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newest_version_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newest_version_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newest_version_address().data(), this->newest_version_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_apk_size;
        break;
      }

      // optional float apk_size = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_apk_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &apk_size_)));
          set_has_apk_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SVersionCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.VERSION_CHECK_RESULT result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 resource_id = 2;
  if (has_resource_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->resource_id(), output);
  }

  // optional string notice_address = 3;
  if (has_notice_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice_address().data(), this->notice_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->notice_address(), output);
  }

  // optional string resource_address = 4;
  if (has_resource_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource_address().data(), this->resource_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->resource_address(), output);
  }

  // optional uint32 is_hot_update = 5;
  if (has_is_hot_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->is_hot_update(), output);
  }

  // optional string newest_version_address = 6;
  if (has_newest_version_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newest_version_address().data(), this->newest_version_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->newest_version_address(), output);
  }

  // optional float apk_size = 7;
  if (has_apk_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->apk_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SVersionCheck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.VERSION_CHECK_RESULT result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 resource_id = 2;
  if (has_resource_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->resource_id(), target);
  }

  // optional string notice_address = 3;
  if (has_notice_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice_address().data(), this->notice_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->notice_address(), target);
  }

  // optional string resource_address = 4;
  if (has_resource_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource_address().data(), this->resource_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->resource_address(), target);
  }

  // optional uint32 is_hot_update = 5;
  if (has_is_hot_update()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->is_hot_update(), target);
  }

  // optional string newest_version_address = 6;
  if (has_newest_version_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newest_version_address().data(), this->newest_version_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->newest_version_address(), target);
  }

  // optional float apk_size = 7;
  if (has_apk_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->apk_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SVersionCheck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.VERSION_CHECK_RESULT result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 resource_id = 2;
    if (has_resource_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resource_id());
    }

    // optional string notice_address = 3;
    if (has_notice_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice_address());
    }

    // optional string resource_address = 4;
    if (has_resource_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource_address());
    }

    // optional uint32 is_hot_update = 5;
    if (has_is_hot_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_hot_update());
    }

    // optional string newest_version_address = 6;
    if (has_newest_version_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newest_version_address());
    }

    // optional float apk_size = 7;
    if (has_apk_size()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SVersionCheck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SVersionCheck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SVersionCheck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SVersionCheck::MergeFrom(const SVersionCheck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_resource_id()) {
      set_resource_id(from.resource_id());
    }
    if (from.has_notice_address()) {
      set_notice_address(from.notice_address());
    }
    if (from.has_resource_address()) {
      set_resource_address(from.resource_address());
    }
    if (from.has_is_hot_update()) {
      set_is_hot_update(from.is_hot_update());
    }
    if (from.has_newest_version_address()) {
      set_newest_version_address(from.newest_version_address());
    }
    if (from.has_apk_size()) {
      set_apk_size(from.apk_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SVersionCheck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SVersionCheck::CopyFrom(const SVersionCheck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SVersionCheck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SVersionCheck::Swap(SVersionCheck* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(resource_id_, other->resource_id_);
    std::swap(notice_address_, other->notice_address_);
    std::swap(resource_address_, other->resource_address_);
    std::swap(is_hot_update_, other->is_hot_update_);
    std::swap(newest_version_address_, other->newest_version_address_);
    std::swap(apk_size_, other->apk_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SVersionCheck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SVersionCheck_descriptor_;
  metadata.reflection = SVersionCheck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CVstarGameAccountCheck::kClientIdFieldNumber;
const int CVstarGameAccountCheck::kSdkUserIdFieldNumber;
const int CVstarGameAccountCheck::kTokenFieldNumber;
const int CVstarGameAccountCheck::kRegisterInfoFieldNumber;
#endif  // !_MSC_VER

CVstarGameAccountCheck::CVstarGameAccountCheck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CVstarGameAccountCheck::InitAsDefaultInstance() {
  register_info_ = const_cast< ::pb::CRegisterAccount*>(&::pb::CRegisterAccount::default_instance());
}

CVstarGameAccountCheck::CVstarGameAccountCheck(const CVstarGameAccountCheck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CVstarGameAccountCheck::SharedCtor() {
  _cached_size_ = 0;
  client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sdk_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  register_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CVstarGameAccountCheck::~CVstarGameAccountCheck() {
  SharedDtor();
}

void CVstarGameAccountCheck::SharedDtor() {
  if (client_id_ != &::google::protobuf::internal::kEmptyString) {
    delete client_id_;
  }
  if (sdk_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete sdk_user_id_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
    delete register_info_;
  }
}

void CVstarGameAccountCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CVstarGameAccountCheck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CVstarGameAccountCheck_descriptor_;
}

const CVstarGameAccountCheck& CVstarGameAccountCheck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

CVstarGameAccountCheck* CVstarGameAccountCheck::default_instance_ = NULL;

CVstarGameAccountCheck* CVstarGameAccountCheck::New() const {
  return new CVstarGameAccountCheck;
}

void CVstarGameAccountCheck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_client_id()) {
      if (client_id_ != &::google::protobuf::internal::kEmptyString) {
        client_id_->clear();
      }
    }
    if (has_sdk_user_id()) {
      if (sdk_user_id_ != &::google::protobuf::internal::kEmptyString) {
        sdk_user_id_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_register_info()) {
      if (register_info_ != NULL) register_info_->::pb::CRegisterAccount::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CVstarGameAccountCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string client_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->client_id().data(), this->client_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sdk_user_id;
        break;
      }

      // optional string sdk_user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sdk_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdk_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sdk_user_id().data(), this->sdk_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional string token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_register_info;
        break;
      }

      // optional .pb.CRegisterAccount register_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_register_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_register_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CVstarGameAccountCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string client_id = 1;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->client_id(), output);
  }

  // optional string sdk_user_id = 2;
  if (has_sdk_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdk_user_id().data(), this->sdk_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sdk_user_id(), output);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->token(), output);
  }

  // optional .pb.CRegisterAccount register_info = 4;
  if (has_register_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->register_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CVstarGameAccountCheck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string client_id = 1;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_id(), target);
  }

  // optional string sdk_user_id = 2;
  if (has_sdk_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdk_user_id().data(), this->sdk_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sdk_user_id(), target);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // optional .pb.CRegisterAccount register_info = 4;
  if (has_register_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->register_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CVstarGameAccountCheck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string client_id = 1;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_id());
    }

    // optional string sdk_user_id = 2;
    if (has_sdk_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sdk_user_id());
    }

    // optional string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional .pb.CRegisterAccount register_info = 4;
    if (has_register_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->register_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CVstarGameAccountCheck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CVstarGameAccountCheck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CVstarGameAccountCheck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CVstarGameAccountCheck::MergeFrom(const CVstarGameAccountCheck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
    if (from.has_sdk_user_id()) {
      set_sdk_user_id(from.sdk_user_id());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_register_info()) {
      mutable_register_info()->::pb::CRegisterAccount::MergeFrom(from.register_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CVstarGameAccountCheck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVstarGameAccountCheck::CopyFrom(const CVstarGameAccountCheck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVstarGameAccountCheck::IsInitialized() const {

  if (has_register_info()) {
    if (!this->register_info().IsInitialized()) return false;
  }
  return true;
}

void CVstarGameAccountCheck::Swap(CVstarGameAccountCheck* other) {
  if (other != this) {
    std::swap(client_id_, other->client_id_);
    std::swap(sdk_user_id_, other->sdk_user_id_);
    std::swap(token_, other->token_);
    std::swap(register_info_, other->register_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CVstarGameAccountCheck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CVstarGameAccountCheck_descriptor_;
  metadata.reflection = CVstarGameAccountCheck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SVstarGameAccountCheck::kStatusFieldNumber;
const int SVstarGameAccountCheck::kSdkUserIdFieldNumber;
const int SVstarGameAccountCheck::kErrorCodeFieldNumber;
const int SVstarGameAccountCheck::kErrorMsgFieldNumber;
const int SVstarGameAccountCheck::kAccountIdFieldNumber;
#endif  // !_MSC_VER

SVstarGameAccountCheck::SVstarGameAccountCheck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SVstarGameAccountCheck::InitAsDefaultInstance() {
}

SVstarGameAccountCheck::SVstarGameAccountCheck(const SVstarGameAccountCheck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SVstarGameAccountCheck::SharedCtor() {
  _cached_size_ = 0;
  status_ = false;
  sdk_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  error_code_ = 0u;
  error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SVstarGameAccountCheck::~SVstarGameAccountCheck() {
  SharedDtor();
}

void SVstarGameAccountCheck::SharedDtor() {
  if (sdk_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete sdk_user_id_;
  }
  if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete error_msg_;
  }
  if (this != default_instance_) {
  }
}

void SVstarGameAccountCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SVstarGameAccountCheck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SVstarGameAccountCheck_descriptor_;
}

const SVstarGameAccountCheck& SVstarGameAccountCheck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

SVstarGameAccountCheck* SVstarGameAccountCheck::default_instance_ = NULL;

SVstarGameAccountCheck* SVstarGameAccountCheck::New() const {
  return new SVstarGameAccountCheck;
}

void SVstarGameAccountCheck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = false;
    if (has_sdk_user_id()) {
      if (sdk_user_id_ != &::google::protobuf::internal::kEmptyString) {
        sdk_user_id_->clear();
      }
    }
    error_code_ = 0u;
    if (has_error_msg()) {
      if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
        error_msg_->clear();
      }
    }
    account_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SVstarGameAccountCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sdk_user_id;
        break;
      }

      // optional string sdk_user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sdk_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdk_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sdk_user_id().data(), this->sdk_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_error_code;
        break;
      }

      // optional uint32 error_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_error_msg;
        break;
      }

      // optional string error_msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_msg().data(), this->error_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_account_id;
        break;
      }

      // optional uint64 account_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SVstarGameAccountCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->status(), output);
  }

  // optional string sdk_user_id = 2;
  if (has_sdk_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdk_user_id().data(), this->sdk_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sdk_user_id(), output);
  }

  // optional uint32 error_code = 3;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->error_code(), output);
  }

  // optional string error_msg = 4;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->error_msg(), output);
  }

  // optional uint64 account_id = 5;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SVstarGameAccountCheck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->status(), target);
  }

  // optional string sdk_user_id = 2;
  if (has_sdk_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdk_user_id().data(), this->sdk_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sdk_user_id(), target);
  }

  // optional uint32 error_code = 3;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->error_code(), target);
  }

  // optional string error_msg = 4;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->error_msg(), target);
  }

  // optional uint64 account_id = 5;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SVstarGameAccountCheck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool status = 1;
    if (has_status()) {
      total_size += 1 + 1;
    }

    // optional string sdk_user_id = 2;
    if (has_sdk_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sdk_user_id());
    }

    // optional uint32 error_code = 3;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // optional string error_msg = 4;
    if (has_error_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_msg());
    }

    // optional uint64 account_id = 5;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SVstarGameAccountCheck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SVstarGameAccountCheck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SVstarGameAccountCheck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SVstarGameAccountCheck::MergeFrom(const SVstarGameAccountCheck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_sdk_user_id()) {
      set_sdk_user_id(from.sdk_user_id());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_error_msg()) {
      set_error_msg(from.error_msg());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SVstarGameAccountCheck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SVstarGameAccountCheck::CopyFrom(const SVstarGameAccountCheck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SVstarGameAccountCheck::IsInitialized() const {

  return true;
}

void SVstarGameAccountCheck::Swap(SVstarGameAccountCheck* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(sdk_user_id_, other->sdk_user_id_);
    std::swap(error_code_, other->error_code_);
    std::swap(error_msg_, other->error_msg_);
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SVstarGameAccountCheck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SVstarGameAccountCheck_descriptor_;
  metadata.reflection = SVstarGameAccountCheck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAccountCheck::kMethodFieldNumber;
const int CAccountCheck::kAccountFieldNumber;
const int CAccountCheck::kPasswordFieldNumber;
const int CAccountCheck::kChannelIdFieldNumber;
const int CAccountCheck::kPlatformIdFieldNumber;
#endif  // !_MSC_VER

CAccountCheck::CAccountCheck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAccountCheck::InitAsDefaultInstance() {
}

CAccountCheck::CAccountCheck(const CAccountCheck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAccountCheck::SharedCtor() {
  _cached_size_ = 0;
  method_ = 1;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_id_ = 0u;
  platform_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAccountCheck::~CAccountCheck() {
  SharedDtor();
}

void CAccountCheck::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void CAccountCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAccountCheck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAccountCheck_descriptor_;
}

const CAccountCheck& CAccountCheck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

CAccountCheck* CAccountCheck::default_instance_ = NULL;

CAccountCheck* CAccountCheck::New() const {
  return new CAccountCheck;
}

void CAccountCheck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    method_ = 1;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    channel_id_ = 0u;
    platform_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAccountCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.ACCOUNT_CHECK_METHOD method = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ACCOUNT_CHECK_METHOD_IsValid(value)) {
            set_method(static_cast< ::pb::ACCOUNT_CHECK_METHOD >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_channel_id;
        break;
      }

      // required uint32 channel_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_platform_id;
        break;
      }

      // required uint32 platform_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_id_)));
          set_has_platform_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAccountCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.ACCOUNT_CHECK_METHOD method = 1;
  if (has_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->method(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }

  // required uint32 channel_id = 4;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->channel_id(), output);
  }

  // required uint32 platform_id = 5;
  if (has_platform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->platform_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAccountCheck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.ACCOUNT_CHECK_METHOD method = 1;
  if (has_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->method(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // required uint32 channel_id = 4;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->channel_id(), target);
  }

  // required uint32 platform_id = 5;
  if (has_platform_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->platform_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAccountCheck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.ACCOUNT_CHECK_METHOD method = 1;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->method());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // required uint32 channel_id = 4;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // required uint32 platform_id = 5;
    if (has_platform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platform_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAccountCheck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAccountCheck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAccountCheck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAccountCheck::MergeFrom(const CAccountCheck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_platform_id()) {
      set_platform_id(from.platform_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAccountCheck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountCheck::CopyFrom(const CAccountCheck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountCheck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;

  return true;
}

void CAccountCheck::Swap(CAccountCheck* other) {
  if (other != this) {
    std::swap(method_, other->method_);
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(platform_id_, other->platform_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAccountCheck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAccountCheck_descriptor_;
  metadata.reflection = CAccountCheck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SAccountCheck::kResultFieldNumber;
const int SAccountCheck::kAccountTypeFieldNumber;
const int SAccountCheck::kAccountIdFieldNumber;
#endif  // !_MSC_VER

SAccountCheck::SAccountCheck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SAccountCheck::InitAsDefaultInstance() {
}

SAccountCheck::SAccountCheck(const SAccountCheck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SAccountCheck::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  account_type_ = 0;
  account_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SAccountCheck::~SAccountCheck() {
  SharedDtor();
}

void SAccountCheck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SAccountCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SAccountCheck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SAccountCheck_descriptor_;
}

const SAccountCheck& SAccountCheck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

SAccountCheck* SAccountCheck::default_instance_ = NULL;

SAccountCheck* SAccountCheck::New() const {
  return new SAccountCheck;
}

void SAccountCheck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    account_type_ = 0;
    account_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SAccountCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.ACCOUNT_CHECK_RESULT result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ACCOUNT_CHECK_RESULT_IsValid(value)) {
            set_result(static_cast< ::pb::ACCOUNT_CHECK_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_type;
        break;
      }

      // optional .pb.ACCOUNT_TYPE account_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ACCOUNT_TYPE_IsValid(value)) {
            set_account_type(static_cast< ::pb::ACCOUNT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_account_id;
        break;
      }

      // optional uint64 account_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SAccountCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.ACCOUNT_CHECK_RESULT result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .pb.ACCOUNT_TYPE account_type = 2;
  if (has_account_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->account_type(), output);
  }

  // optional uint64 account_id = 3;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SAccountCheck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.ACCOUNT_CHECK_RESULT result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .pb.ACCOUNT_TYPE account_type = 2;
  if (has_account_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->account_type(), target);
  }

  // optional uint64 account_id = 3;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SAccountCheck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.ACCOUNT_CHECK_RESULT result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .pb.ACCOUNT_TYPE account_type = 2;
    if (has_account_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->account_type());
    }

    // optional uint64 account_id = 3;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SAccountCheck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SAccountCheck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SAccountCheck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SAccountCheck::MergeFrom(const SAccountCheck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_account_type()) {
      set_account_type(from.account_type());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SAccountCheck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SAccountCheck::CopyFrom(const SAccountCheck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SAccountCheck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SAccountCheck::Swap(SAccountCheck* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(account_type_, other->account_type_);
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SAccountCheck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SAccountCheck_descriptor_;
  metadata.reflection = SAccountCheck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CRegisterAccount::kTypeFieldNumber;
const int CRegisterAccount::kAccountFieldNumber;
const int CRegisterAccount::kPasswordFieldNumber;
const int CRegisterAccount::kPhoneNumberFieldNumber;
const int CRegisterAccount::kDeviceIdFieldNumber;
const int CRegisterAccount::kChannelIdFieldNumber;
const int CRegisterAccount::kPlatformIdFieldNumber;
#endif  // !_MSC_VER

CRegisterAccount::CRegisterAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CRegisterAccount::InitAsDefaultInstance() {
}

CRegisterAccount::CRegisterAccount(const CRegisterAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CRegisterAccount::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_id_ = 0u;
  platform_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CRegisterAccount::~CRegisterAccount() {
  SharedDtor();
}

void CRegisterAccount::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (phone_number_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_number_;
  }
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void CRegisterAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CRegisterAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CRegisterAccount_descriptor_;
}

const CRegisterAccount& CRegisterAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

CRegisterAccount* CRegisterAccount::default_instance_ = NULL;

CRegisterAccount* CRegisterAccount::New() const {
  return new CRegisterAccount;
}

void CRegisterAccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_phone_number()) {
      if (phone_number_ != &::google::protobuf::internal::kEmptyString) {
        phone_number_->clear();
      }
    }
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    channel_id_ = 0u;
    platform_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CRegisterAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.REGISTER_ACCOUNT_TYPE type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::REGISTER_ACCOUNT_TYPE_IsValid(value)) {
            set_type(static_cast< ::pb::REGISTER_ACCOUNT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_phone_number;
        break;
      }

      // optional string phone_number = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone_number().data(), this->phone_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_device_id;
        break;
      }

      // optional string device_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_platform_id;
        break;
      }

      // optional uint32 platform_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_id_)));
          set_has_platform_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CRegisterAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.REGISTER_ACCOUNT_TYPE type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }

  // optional string phone_number = 4;
  if (has_phone_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone_number().data(), this->phone_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->phone_number(), output);
  }

  // optional string device_id = 5;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->device_id(), output);
  }

  // optional uint32 channel_id = 6;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->channel_id(), output);
  }

  // optional uint32 platform_id = 7;
  if (has_platform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->platform_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CRegisterAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.REGISTER_ACCOUNT_TYPE type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional string phone_number = 4;
  if (has_phone_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone_number().data(), this->phone_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->phone_number(), target);
  }

  // optional string device_id = 5;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->device_id(), target);
  }

  // optional uint32 channel_id = 6;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->channel_id(), target);
  }

  // optional uint32 platform_id = 7;
  if (has_platform_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->platform_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CRegisterAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.REGISTER_ACCOUNT_TYPE type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string phone_number = 4;
    if (has_phone_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone_number());
    }

    // optional string device_id = 5;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional uint32 channel_id = 6;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional uint32 platform_id = 7;
    if (has_platform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platform_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CRegisterAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CRegisterAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CRegisterAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CRegisterAccount::MergeFrom(const CRegisterAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_phone_number()) {
      set_phone_number(from.phone_number());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_platform_id()) {
      set_platform_id(from.platform_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CRegisterAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRegisterAccount::CopyFrom(const CRegisterAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRegisterAccount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CRegisterAccount::Swap(CRegisterAccount* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(phone_number_, other->phone_number_);
    std::swap(device_id_, other->device_id_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(platform_id_, other->platform_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CRegisterAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CRegisterAccount_descriptor_;
  metadata.reflection = CRegisterAccount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SRegisterAccount::kResultFieldNumber;
const int SRegisterAccount::kAccountIdFieldNumber;
const int SRegisterAccount::kAccountFieldNumber;
const int SRegisterAccount::kPasswordFieldNumber;
#endif  // !_MSC_VER

SRegisterAccount::SRegisterAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SRegisterAccount::InitAsDefaultInstance() {
}

SRegisterAccount::SRegisterAccount(const SRegisterAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SRegisterAccount::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  account_id_ = GOOGLE_ULONGLONG(0);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SRegisterAccount::~SRegisterAccount() {
  SharedDtor();
}

void SRegisterAccount::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void SRegisterAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SRegisterAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SRegisterAccount_descriptor_;
}

const SRegisterAccount& SRegisterAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

SRegisterAccount* SRegisterAccount::default_instance_ = NULL;

SRegisterAccount* SRegisterAccount::New() const {
  return new SRegisterAccount;
}

void SRegisterAccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    account_id_ = GOOGLE_ULONGLONG(0);
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SRegisterAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.REGISTER_ACCOUNT_RESULT result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::REGISTER_ACCOUNT_RESULT_IsValid(value)) {
            set_result(static_cast< ::pb::REGISTER_ACCOUNT_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }

      // optional uint64 account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // optional string account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }

      // optional string password = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SRegisterAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.REGISTER_ACCOUNT_RESULT result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint64 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->account_id(), output);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account(), output);
  }

  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SRegisterAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.REGISTER_ACCOUNT_RESULT result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint64 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->account_id(), target);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SRegisterAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.REGISTER_ACCOUNT_RESULT result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint64 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->account_id());
    }

    // optional string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SRegisterAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SRegisterAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SRegisterAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SRegisterAccount::MergeFrom(const SRegisterAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SRegisterAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRegisterAccount::CopyFrom(const SRegisterAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRegisterAccount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SRegisterAccount::Swap(SRegisterAccount* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(account_id_, other->account_id_);
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SRegisterAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SRegisterAccount_descriptor_;
  metadata.reflection = SRegisterAccount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CChangeAccountAndPassord::kOldAccountFieldNumber;
const int CChangeAccountAndPassord::kOldPasswordFieldNumber;
const int CChangeAccountAndPassord::kNewAccountFieldNumber;
const int CChangeAccountAndPassord::kNewPasswordFieldNumber;
const int CChangeAccountAndPassord::kChannelIdFieldNumber;
const int CChangeAccountAndPassord::kPlatformIdFieldNumber;
#endif  // !_MSC_VER

CChangeAccountAndPassord::CChangeAccountAndPassord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CChangeAccountAndPassord::InitAsDefaultInstance() {
}

CChangeAccountAndPassord::CChangeAccountAndPassord(const CChangeAccountAndPassord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CChangeAccountAndPassord::SharedCtor() {
  _cached_size_ = 0;
  old_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  old_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  new_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  new_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_id_ = 0u;
  platform_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CChangeAccountAndPassord::~CChangeAccountAndPassord() {
  SharedDtor();
}

void CChangeAccountAndPassord::SharedDtor() {
  if (old_account_ != &::google::protobuf::internal::kEmptyString) {
    delete old_account_;
  }
  if (old_password_ != &::google::protobuf::internal::kEmptyString) {
    delete old_password_;
  }
  if (new_account_ != &::google::protobuf::internal::kEmptyString) {
    delete new_account_;
  }
  if (new_password_ != &::google::protobuf::internal::kEmptyString) {
    delete new_password_;
  }
  if (this != default_instance_) {
  }
}

void CChangeAccountAndPassord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CChangeAccountAndPassord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CChangeAccountAndPassord_descriptor_;
}

const CChangeAccountAndPassord& CChangeAccountAndPassord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

CChangeAccountAndPassord* CChangeAccountAndPassord::default_instance_ = NULL;

CChangeAccountAndPassord* CChangeAccountAndPassord::New() const {
  return new CChangeAccountAndPassord;
}

void CChangeAccountAndPassord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_old_account()) {
      if (old_account_ != &::google::protobuf::internal::kEmptyString) {
        old_account_->clear();
      }
    }
    if (has_old_password()) {
      if (old_password_ != &::google::protobuf::internal::kEmptyString) {
        old_password_->clear();
      }
    }
    if (has_new_account()) {
      if (new_account_ != &::google::protobuf::internal::kEmptyString) {
        new_account_->clear();
      }
    }
    if (has_new_password()) {
      if (new_password_ != &::google::protobuf::internal::kEmptyString) {
        new_password_->clear();
      }
    }
    channel_id_ = 0u;
    platform_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CChangeAccountAndPassord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string old_account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->old_account().data(), this->old_account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_old_password;
        break;
      }

      // optional string old_password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->old_password().data(), this->old_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_account;
        break;
      }

      // optional string new_account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_account().data(), this->new_account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_new_password;
        break;
      }

      // optional string new_password = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_password().data(), this->new_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_channel_id;
        break;
      }

      // required uint32 channel_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_platform_id;
        break;
      }

      // required uint32 platform_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_id_)));
          set_has_platform_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CChangeAccountAndPassord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string old_account = 1;
  if (has_old_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_account().data(), this->old_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->old_account(), output);
  }

  // optional string old_password = 2;
  if (has_old_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_password().data(), this->old_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->old_password(), output);
  }

  // optional string new_account = 3;
  if (has_new_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_account().data(), this->new_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->new_account(), output);
  }

  // optional string new_password = 4;
  if (has_new_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_password().data(), this->new_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->new_password(), output);
  }

  // required uint32 channel_id = 5;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channel_id(), output);
  }

  // required uint32 platform_id = 6;
  if (has_platform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->platform_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CChangeAccountAndPassord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string old_account = 1;
  if (has_old_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_account().data(), this->old_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->old_account(), target);
  }

  // optional string old_password = 2;
  if (has_old_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_password().data(), this->old_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->old_password(), target);
  }

  // optional string new_account = 3;
  if (has_new_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_account().data(), this->new_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->new_account(), target);
  }

  // optional string new_password = 4;
  if (has_new_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_password().data(), this->new_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->new_password(), target);
  }

  // required uint32 channel_id = 5;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channel_id(), target);
  }

  // required uint32 platform_id = 6;
  if (has_platform_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->platform_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CChangeAccountAndPassord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string old_account = 1;
    if (has_old_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->old_account());
    }

    // optional string old_password = 2;
    if (has_old_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->old_password());
    }

    // optional string new_account = 3;
    if (has_new_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_account());
    }

    // optional string new_password = 4;
    if (has_new_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_password());
    }

    // required uint32 channel_id = 5;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // required uint32 platform_id = 6;
    if (has_platform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platform_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CChangeAccountAndPassord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CChangeAccountAndPassord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CChangeAccountAndPassord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CChangeAccountAndPassord::MergeFrom(const CChangeAccountAndPassord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_old_account()) {
      set_old_account(from.old_account());
    }
    if (from.has_old_password()) {
      set_old_password(from.old_password());
    }
    if (from.has_new_account()) {
      set_new_account(from.new_account());
    }
    if (from.has_new_password()) {
      set_new_password(from.new_password());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_platform_id()) {
      set_platform_id(from.platform_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CChangeAccountAndPassord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChangeAccountAndPassord::CopyFrom(const CChangeAccountAndPassord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChangeAccountAndPassord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000030) != 0x00000030) return false;

  return true;
}

void CChangeAccountAndPassord::Swap(CChangeAccountAndPassord* other) {
  if (other != this) {
    std::swap(old_account_, other->old_account_);
    std::swap(old_password_, other->old_password_);
    std::swap(new_account_, other->new_account_);
    std::swap(new_password_, other->new_password_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(platform_id_, other->platform_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CChangeAccountAndPassord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CChangeAccountAndPassord_descriptor_;
  metadata.reflection = CChangeAccountAndPassord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SChangeAccountAndPassord::kResultFieldNumber;
#endif  // !_MSC_VER

SChangeAccountAndPassord::SChangeAccountAndPassord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SChangeAccountAndPassord::InitAsDefaultInstance() {
}

SChangeAccountAndPassord::SChangeAccountAndPassord(const SChangeAccountAndPassord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SChangeAccountAndPassord::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SChangeAccountAndPassord::~SChangeAccountAndPassord() {
  SharedDtor();
}

void SChangeAccountAndPassord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SChangeAccountAndPassord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SChangeAccountAndPassord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SChangeAccountAndPassord_descriptor_;
}

const SChangeAccountAndPassord& SChangeAccountAndPassord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

SChangeAccountAndPassord* SChangeAccountAndPassord::default_instance_ = NULL;

SChangeAccountAndPassord* SChangeAccountAndPassord::New() const {
  return new SChangeAccountAndPassord;
}

void SChangeAccountAndPassord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SChangeAccountAndPassord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.CHANGE_ACCOUNT_PASSWORD_RESULT result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::CHANGE_ACCOUNT_PASSWORD_RESULT_IsValid(value)) {
            set_result(static_cast< ::pb::CHANGE_ACCOUNT_PASSWORD_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SChangeAccountAndPassord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.CHANGE_ACCOUNT_PASSWORD_RESULT result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SChangeAccountAndPassord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.CHANGE_ACCOUNT_PASSWORD_RESULT result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SChangeAccountAndPassord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.CHANGE_ACCOUNT_PASSWORD_RESULT result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SChangeAccountAndPassord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SChangeAccountAndPassord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SChangeAccountAndPassord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SChangeAccountAndPassord::MergeFrom(const SChangeAccountAndPassord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SChangeAccountAndPassord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SChangeAccountAndPassord::CopyFrom(const SChangeAccountAndPassord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SChangeAccountAndPassord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SChangeAccountAndPassord::Swap(SChangeAccountAndPassord* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SChangeAccountAndPassord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SChangeAccountAndPassord_descriptor_;
  metadata.reflection = SChangeAccountAndPassord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGetServerList::kAccountIdFieldNumber;
const int CGetServerList::kChannelIdFieldNumber;
const int CGetServerList::kPlatformIdFieldNumber;
const int CGetServerList::kVersionIdFieldNumber;
#endif  // !_MSC_VER

CGetServerList::CGetServerList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGetServerList::InitAsDefaultInstance() {
}

CGetServerList::CGetServerList(const CGetServerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGetServerList::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = GOOGLE_ULONGLONG(0);
  channel_id_ = 0u;
  platform_id_ = 0u;
  version_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGetServerList::~CGetServerList() {
  SharedDtor();
}

void CGetServerList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGetServerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGetServerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGetServerList_descriptor_;
}

const CGetServerList& CGetServerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

CGetServerList* CGetServerList::default_instance_ = NULL;

CGetServerList* CGetServerList::New() const {
  return new CGetServerList;
}

void CGetServerList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = GOOGLE_ULONGLONG(0);
    channel_id_ = 0u;
    platform_id_ = 0u;
    version_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGetServerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_platform_id;
        break;
      }

      // optional uint32 platform_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_id_)));
          set_has_platform_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_version_id;
        break;
      }

      // optional uint32 version_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_id_)));
          set_has_version_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGetServerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->account_id(), output);
  }

  // optional uint32 channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_id(), output);
  }

  // optional uint32 platform_id = 3;
  if (has_platform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->platform_id(), output);
  }

  // optional uint32 version_id = 4;
  if (has_version_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->version_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGetServerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->account_id(), target);
  }

  // optional uint32 channel_id = 2;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel_id(), target);
  }

  // optional uint32 platform_id = 3;
  if (has_platform_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->platform_id(), target);
  }

  // optional uint32 version_id = 4;
  if (has_version_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->version_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGetServerList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->account_id());
    }

    // optional uint32 channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional uint32 platform_id = 3;
    if (has_platform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platform_id());
    }

    // optional uint32 version_id = 4;
    if (has_version_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGetServerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGetServerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGetServerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGetServerList::MergeFrom(const CGetServerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_platform_id()) {
      set_platform_id(from.platform_id());
    }
    if (from.has_version_id()) {
      set_version_id(from.version_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGetServerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGetServerList::CopyFrom(const CGetServerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGetServerList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CGetServerList::Swap(CGetServerList* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(platform_id_, other->platform_id_);
    std::swap(version_id_, other->version_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGetServerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGetServerList_descriptor_;
  metadata.reflection = CGetServerList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerInfo::kRegionIdFieldNumber;
const int ServerInfo::kGroupIdFieldNumber;
const int ServerInfo::kServerIdFieldNumber;
const int ServerInfo::kServerStateFieldNumber;
const int ServerInfo::kIsNewFieldNumber;
#endif  // !_MSC_VER

ServerInfo::ServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerInfo::InitAsDefaultInstance() {
}

ServerInfo::ServerInfo(const ServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerInfo::SharedCtor() {
  _cached_size_ = 0;
  region_id_ = 0u;
  group_id_ = 0u;
  server_id_ = 0u;
  server_state_ = 0;
  is_new_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfo::~ServerInfo() {
  SharedDtor();
}

void ServerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfo_descriptor_;
}

const ServerInfo& ServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

ServerInfo* ServerInfo::default_instance_ = NULL;

ServerInfo* ServerInfo::New() const {
  return new ServerInfo;
}

void ServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    region_id_ = 0u;
    group_id_ = 0u;
    server_id_ = 0u;
    server_state_ = 0;
    is_new_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 region_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // optional uint32 group_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_id;
        break;
      }

      // optional uint32 server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_server_state;
        break;
      }

      // optional .pb.ServerState server_state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ServerState_IsValid(value)) {
            set_server_state(static_cast< ::pb::ServerState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_new;
        break;
      }

      // optional bool is_new = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_new:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_new_)));
          set_has_is_new();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 region_id = 1;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->region_id(), output);
  }

  // optional uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // optional uint32 server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_id(), output);
  }

  // optional .pb.ServerState server_state = 4;
  if (has_server_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->server_state(), output);
  }

  // optional bool is_new = 5;
  if (has_is_new()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_new(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 region_id = 1;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->region_id(), target);
  }

  // optional uint32 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->group_id(), target);
  }

  // optional uint32 server_id = 3;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_id(), target);
  }

  // optional .pb.ServerState server_state = 4;
  if (has_server_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->server_state(), target);
  }

  // optional bool is_new = 5;
  if (has_is_new()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_new(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 region_id = 1;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_id());
    }

    // optional uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional uint32 server_id = 3;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // optional .pb.ServerState server_state = 4;
    if (has_server_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->server_state());
    }

    // optional bool is_new = 5;
    if (has_is_new()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_server_state()) {
      set_server_state(from.server_state());
    }
    if (from.has_is_new()) {
      set_is_new(from.is_new());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {

  return true;
}

void ServerInfo::Swap(ServerInfo* other) {
  if (other != this) {
    std::swap(region_id_, other->region_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(server_state_, other->server_state_);
    std::swap(is_new_, other->is_new_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfo_descriptor_;
  metadata.reflection = ServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SGetServerList::kRegionIdFieldNumber;
const int SGetServerList::kGroupIdFieldNumber;
const int SGetServerList::kServerIdFieldNumber;
const int SGetServerList::kServerInfoFieldNumber;
#endif  // !_MSC_VER

SGetServerList::SGetServerList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SGetServerList::InitAsDefaultInstance() {
}

SGetServerList::SGetServerList(const SGetServerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SGetServerList::SharedCtor() {
  _cached_size_ = 0;
  region_id_ = 0u;
  group_id_ = 0u;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SGetServerList::~SGetServerList() {
  SharedDtor();
}

void SGetServerList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SGetServerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SGetServerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SGetServerList_descriptor_;
}

const SGetServerList& SGetServerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

SGetServerList* SGetServerList::default_instance_ = NULL;

SGetServerList* SGetServerList::New() const {
  return new SGetServerList;
}

void SGetServerList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    region_id_ = 0u;
    group_id_ = 0u;
    server_id_ = 0u;
  }
  server_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SGetServerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 region_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // optional uint32 group_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_id;
        break;
      }

      // optional uint32 server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_server_info;
        break;
      }

      // repeated .pb.ServerInfo server_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_server_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SGetServerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 region_id = 1;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->region_id(), output);
  }

  // optional uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // optional uint32 server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_id(), output);
  }

  // repeated .pb.ServerInfo server_info = 4;
  for (int i = 0; i < this->server_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->server_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SGetServerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 region_id = 1;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->region_id(), target);
  }

  // optional uint32 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->group_id(), target);
  }

  // optional uint32 server_id = 3;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_id(), target);
  }

  // repeated .pb.ServerInfo server_info = 4;
  for (int i = 0; i < this->server_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->server_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SGetServerList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 region_id = 1;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_id());
    }

    // optional uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional uint32 server_id = 3;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  // repeated .pb.ServerInfo server_info = 4;
  total_size += 1 * this->server_info_size();
  for (int i = 0; i < this->server_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SGetServerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SGetServerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SGetServerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SGetServerList::MergeFrom(const SGetServerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  server_info_.MergeFrom(from.server_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SGetServerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGetServerList::CopyFrom(const SGetServerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGetServerList::IsInitialized() const {

  return true;
}

void SGetServerList::Swap(SGetServerList* other) {
  if (other != this) {
    std::swap(region_id_, other->region_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(server_id_, other->server_id_);
    server_info_.Swap(&other->server_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SGetServerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SGetServerList_descriptor_;
  metadata.reflection = SGetServerList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSelectServerId::kRegionIdFieldNumber;
const int CSelectServerId::kServerIdFieldNumber;
const int CSelectServerId::kAccountIdFieldNumber;
#endif  // !_MSC_VER

CSelectServerId::CSelectServerId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSelectServerId::InitAsDefaultInstance() {
}

CSelectServerId::CSelectServerId(const CSelectServerId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSelectServerId::SharedCtor() {
  _cached_size_ = 0;
  region_id_ = 0u;
  server_id_ = 0u;
  account_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSelectServerId::~CSelectServerId() {
  SharedDtor();
}

void CSelectServerId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSelectServerId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSelectServerId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSelectServerId_descriptor_;
}

const CSelectServerId& CSelectServerId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

CSelectServerId* CSelectServerId::default_instance_ = NULL;

CSelectServerId* CSelectServerId::New() const {
  return new CSelectServerId;
}

void CSelectServerId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    region_id_ = 0u;
    server_id_ = 0u;
    account_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSelectServerId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 region_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }

      // optional uint32 server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_account_id;
        break;
      }

      // optional uint64 account_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSelectServerId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 region_id = 1;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->region_id(), output);
  }

  // optional uint32 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_id(), output);
  }

  // optional uint64 account_id = 3;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSelectServerId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 region_id = 1;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->region_id(), target);
  }

  // optional uint32 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_id(), target);
  }

  // optional uint64 account_id = 3;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSelectServerId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 region_id = 1;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_id());
    }

    // optional uint32 server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // optional uint64 account_id = 3;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSelectServerId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSelectServerId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSelectServerId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSelectServerId::MergeFrom(const CSelectServerId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSelectServerId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSelectServerId::CopyFrom(const CSelectServerId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSelectServerId::IsInitialized() const {

  return true;
}

void CSelectServerId::Swap(CSelectServerId* other) {
  if (other != this) {
    std::swap(region_id_, other->region_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSelectServerId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSelectServerId_descriptor_;
  metadata.reflection = CSelectServerId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SSelectServerId::kResultFieldNumber;
const int SSelectServerId::kIpFieldNumber;
const int SSelectServerId::kPortFieldNumber;
const int SSelectServerId::kSessionKeyFieldNumber;
const int SSelectServerId::kKeyValueFieldNumber;
#endif  // !_MSC_VER

SSelectServerId::SSelectServerId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSelectServerId::InitAsDefaultInstance() {
}

SSelectServerId::SSelectServerId(const SSelectServerId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSelectServerId::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSelectServerId::~SSelectServerId() {
  SharedDtor();
}

void SSelectServerId::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (session_key_ != &::google::protobuf::internal::kEmptyString) {
    delete session_key_;
  }
  if (this != default_instance_) {
  }
}

void SSelectServerId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSelectServerId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSelectServerId_descriptor_;
}

const SSelectServerId& SSelectServerId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

SSelectServerId* SSelectServerId::default_instance_ = NULL;

SSelectServerId* SSelectServerId::New() const {
  return new SSelectServerId;
}

void SSelectServerId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_port()) {
      if (port_ != &::google::protobuf::internal::kEmptyString) {
        port_->clear();
      }
    }
    if (has_session_key()) {
      if (session_key_ != &::google::protobuf::internal::kEmptyString) {
        session_key_->clear();
      }
    }
    key_value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSelectServerId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.ASK_SELECTSERVERID_RESULT result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ASK_SELECTSERVERID_RESULT_IsValid(value)) {
            set_result(static_cast< ::pb::ASK_SELECTSERVERID_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_port;
        break;
      }

      // optional string port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_session_key;
        break;
      }

      // optional string session_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_key().data(), this->session_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_key_value;
        break;
      }

      // optional uint64 key_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_value_)));
          set_has_key_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSelectServerId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.ASK_SELECTSERVERID_RESULT result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // optional string port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->port(), output);
  }

  // optional string session_key = 4;
  if (has_session_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_key().data(), this->session_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->session_key(), output);
  }

  // optional uint64 key_value = 5;
  if (has_key_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->key_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSelectServerId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.ASK_SELECTSERVERID_RESULT result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional string port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->port(), target);
  }

  // optional string session_key = 4;
  if (has_session_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_key().data(), this->session_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->session_key(), target);
  }

  // optional uint64 key_value = 5;
  if (has_key_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->key_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSelectServerId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.ASK_SELECTSERVERID_RESULT result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port());
    }

    // optional string session_key = 4;
    if (has_session_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_key());
    }

    // optional uint64 key_value = 5;
    if (has_key_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSelectServerId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSelectServerId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSelectServerId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSelectServerId::MergeFrom(const SSelectServerId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_session_key()) {
      set_session_key(from.session_key());
    }
    if (from.has_key_value()) {
      set_key_value(from.key_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSelectServerId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSelectServerId::CopyFrom(const SSelectServerId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSelectServerId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SSelectServerId::Swap(SSelectServerId* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(session_key_, other->session_key_);
    std::swap(key_value_, other->key_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSelectServerId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSelectServerId_descriptor_;
  metadata.reflection = SSelectServerId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGetPlayerList::kAccountIdFieldNumber;
const int CGetPlayerList::kSessionKeyFieldNumber;
const int CGetPlayerList::kKeyValueFieldNumber;
const int CGetPlayerList::kAccountFieldNumber;
#endif  // !_MSC_VER

CGetPlayerList::CGetPlayerList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGetPlayerList::InitAsDefaultInstance() {
}

CGetPlayerList::CGetPlayerList(const CGetPlayerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGetPlayerList::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = GOOGLE_ULONGLONG(0);
  session_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_value_ = GOOGLE_ULONGLONG(0);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGetPlayerList::~CGetPlayerList() {
  SharedDtor();
}

void CGetPlayerList::SharedDtor() {
  if (session_key_ != &::google::protobuf::internal::kEmptyString) {
    delete session_key_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void CGetPlayerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGetPlayerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGetPlayerList_descriptor_;
}

const CGetPlayerList& CGetPlayerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

CGetPlayerList* CGetPlayerList::default_instance_ = NULL;

CGetPlayerList* CGetPlayerList::New() const {
  return new CGetPlayerList;
}

void CGetPlayerList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = GOOGLE_ULONGLONG(0);
    if (has_session_key()) {
      if (session_key_ != &::google::protobuf::internal::kEmptyString) {
        session_key_->clear();
      }
    }
    key_value_ = GOOGLE_ULONGLONG(0);
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGetPlayerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_key;
        break;
      }

      // optional string session_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_key().data(), this->session_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_key_value;
        break;
      }

      // optional uint64 key_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_value_)));
          set_has_key_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_account;
        break;
      }

      // optional string account = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGetPlayerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->account_id(), output);
  }

  // optional string session_key = 2;
  if (has_session_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_key().data(), this->session_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_key(), output);
  }

  // optional uint64 key_value = 3;
  if (has_key_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->key_value(), output);
  }

  // optional string account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGetPlayerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->account_id(), target);
  }

  // optional string session_key = 2;
  if (has_session_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_key().data(), this->session_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_key(), target);
  }

  // optional uint64 key_value = 3;
  if (has_key_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->key_value(), target);
  }

  // optional string account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGetPlayerList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->account_id());
    }

    // optional string session_key = 2;
    if (has_session_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_key());
    }

    // optional uint64 key_value = 3;
    if (has_key_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key_value());
    }

    // optional string account = 4;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGetPlayerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGetPlayerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGetPlayerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGetPlayerList::MergeFrom(const CGetPlayerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_session_key()) {
      set_session_key(from.session_key());
    }
    if (from.has_key_value()) {
      set_key_value(from.key_value());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGetPlayerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGetPlayerList::CopyFrom(const CGetPlayerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGetPlayerList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CGetPlayerList::Swap(CGetPlayerList* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(session_key_, other->session_key_);
    std::swap(key_value_, other->key_value_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGetPlayerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGetPlayerList_descriptor_;
  metadata.reflection = CGetPlayerList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerListInfo::kNameFieldNumber;
const int PlayerListInfo::kSlotFieldNumber;
const int PlayerListInfo::kPlayerIdFieldNumber;
const int PlayerListInfo::kHeadIconFieldNumber;
const int PlayerListInfo::kCountryIdFieldNumber;
#endif  // !_MSC_VER

PlayerListInfo::PlayerListInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerListInfo::InitAsDefaultInstance() {
}

PlayerListInfo::PlayerListInfo(const PlayerListInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerListInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  slot_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  head_icon_ = 0u;
  country_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerListInfo::~PlayerListInfo() {
  SharedDtor();
}

void PlayerListInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PlayerListInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerListInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerListInfo_descriptor_;
}

const PlayerListInfo& PlayerListInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

PlayerListInfo* PlayerListInfo::default_instance_ = NULL;

PlayerListInfo* PlayerListInfo::New() const {
  return new PlayerListInfo;
}

void PlayerListInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    slot_ = 0;
    player_id_ = GOOGLE_ULONGLONG(0);
    head_icon_ = 0u;
    country_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerListInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot;
        break;
      }

      // optional int32 slot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_id;
        break;
      }

      // required uint64 player_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_head_icon;
        break;
      }

      // optional uint32 head_icon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_icon_)));
          set_has_head_icon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_country_id;
        break;
      }

      // optional uint32 country_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_id_)));
          set_has_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerListInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot(), output);
  }

  // required uint64 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->player_id(), output);
  }

  // optional uint32 head_icon = 4;
  if (has_head_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->head_icon(), output);
  }

  // optional uint32 country_id = 5;
  if (has_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->country_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerListInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot(), target);
  }

  // required uint64 player_id = 3;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->player_id(), target);
  }

  // optional uint32 head_icon = 4;
  if (has_head_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->head_icon(), target);
  }

  // optional uint32 country_id = 5;
  if (has_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->country_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerListInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 slot = 2;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

    // required uint64 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint32 head_icon = 4;
    if (has_head_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_icon());
    }

    // optional uint32 country_id = 5;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerListInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerListInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerListInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerListInfo::MergeFrom(const PlayerListInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_head_icon()) {
      set_head_icon(from.head_icon());
    }
    if (from.has_country_id()) {
      set_country_id(from.country_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerListInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerListInfo::CopyFrom(const PlayerListInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerListInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void PlayerListInfo::Swap(PlayerListInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(slot_, other->slot_);
    std::swap(player_id_, other->player_id_);
    std::swap(head_icon_, other->head_icon_);
    std::swap(country_id_, other->country_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerListInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerListInfo_descriptor_;
  metadata.reflection = PlayerListInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SGetPlayerList::kResultFieldNumber;
const int SGetPlayerList::kPlayerInfosFieldNumber;
#endif  // !_MSC_VER

SGetPlayerList::SGetPlayerList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SGetPlayerList::InitAsDefaultInstance() {
}

SGetPlayerList::SGetPlayerList(const SGetPlayerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SGetPlayerList::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SGetPlayerList::~SGetPlayerList() {
  SharedDtor();
}

void SGetPlayerList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SGetPlayerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SGetPlayerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SGetPlayerList_descriptor_;
}

const SGetPlayerList& SGetPlayerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

SGetPlayerList* SGetPlayerList::default_instance_ = NULL;

SGetPlayerList* SGetPlayerList::New() const {
  return new SGetPlayerList;
}

void SGetPlayerList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  player_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SGetPlayerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.GET_PLAYER_LIST_RESULT result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::GET_PLAYER_LIST_RESULT_IsValid(value)) {
            set_result(static_cast< ::pb::GET_PLAYER_LIST_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_infos;
        break;
      }

      // repeated .pb.PlayerListInfo player_infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SGetPlayerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.GET_PLAYER_LIST_RESULT result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated .pb.PlayerListInfo player_infos = 2;
  for (int i = 0; i < this->player_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SGetPlayerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.GET_PLAYER_LIST_RESULT result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated .pb.PlayerListInfo player_infos = 2;
  for (int i = 0; i < this->player_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SGetPlayerList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.GET_PLAYER_LIST_RESULT result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  // repeated .pb.PlayerListInfo player_infos = 2;
  total_size += 1 * this->player_infos_size();
  for (int i = 0; i < this->player_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SGetPlayerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SGetPlayerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SGetPlayerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SGetPlayerList::MergeFrom(const SGetPlayerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_infos_.MergeFrom(from.player_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SGetPlayerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGetPlayerList::CopyFrom(const SGetPlayerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGetPlayerList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < player_infos_size(); i++) {
    if (!this->player_infos(i).IsInitialized()) return false;
  }
  return true;
}

void SGetPlayerList::Swap(SGetPlayerList* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    player_infos_.Swap(&other->player_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SGetPlayerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SGetPlayerList_descriptor_;
  metadata.reflection = SGetPlayerList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCreateChar::kNameFieldNumber;
const int CCreateChar::kChannelIdFieldNumber;
const int CCreateChar::kCardSolutionIdFieldNumber;
const int CCreateChar::kSdkUserIdFieldNumber;
const int CCreateChar::kPlatformIdFieldNumber;
#endif  // !_MSC_VER

CCreateChar::CCreateChar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCreateChar::InitAsDefaultInstance() {
}

CCreateChar::CCreateChar(const CCreateChar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCreateChar::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_id_ = 0u;
  card_solution_id_ = 0u;
  sdk_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCreateChar::~CCreateChar() {
  SharedDtor();
}

void CCreateChar::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (sdk_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete sdk_user_id_;
  }
  if (this != default_instance_) {
  }
}

void CCreateChar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCreateChar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCreateChar_descriptor_;
}

const CCreateChar& CCreateChar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

CCreateChar* CCreateChar::default_instance_ = NULL;

CCreateChar* CCreateChar::New() const {
  return new CCreateChar;
}

void CCreateChar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    channel_id_ = 0u;
    card_solution_id_ = 0u;
    if (has_sdk_user_id()) {
      if (sdk_user_id_ != &::google::protobuf::internal::kEmptyString) {
        sdk_user_id_->clear();
      }
    }
    platform_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCreateChar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_card_solution_id;
        break;
      }

      // optional uint32 card_solution_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_solution_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_solution_id_)));
          set_has_card_solution_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sdk_user_id;
        break;
      }

      // optional string sdk_user_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sdk_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdk_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sdk_user_id().data(), this->sdk_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_platform_id;
        break;
      }

      // optional uint32 platform_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_id_)));
          set_has_platform_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCreateChar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_id(), output);
  }

  // optional uint32 card_solution_id = 3;
  if (has_card_solution_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->card_solution_id(), output);
  }

  // optional string sdk_user_id = 4;
  if (has_sdk_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdk_user_id().data(), this->sdk_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sdk_user_id(), output);
  }

  // optional uint32 platform_id = 5;
  if (has_platform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->platform_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCreateChar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 channel_id = 2;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel_id(), target);
  }

  // optional uint32 card_solution_id = 3;
  if (has_card_solution_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->card_solution_id(), target);
  }

  // optional string sdk_user_id = 4;
  if (has_sdk_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdk_user_id().data(), this->sdk_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sdk_user_id(), target);
  }

  // optional uint32 platform_id = 5;
  if (has_platform_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->platform_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCreateChar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional uint32 card_solution_id = 3;
    if (has_card_solution_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_solution_id());
    }

    // optional string sdk_user_id = 4;
    if (has_sdk_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sdk_user_id());
    }

    // optional uint32 platform_id = 5;
    if (has_platform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platform_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCreateChar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCreateChar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCreateChar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCreateChar::MergeFrom(const CCreateChar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_card_solution_id()) {
      set_card_solution_id(from.card_solution_id());
    }
    if (from.has_sdk_user_id()) {
      set_sdk_user_id(from.sdk_user_id());
    }
    if (from.has_platform_id()) {
      set_platform_id(from.platform_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCreateChar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCreateChar::CopyFrom(const CCreateChar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCreateChar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CCreateChar::Swap(CCreateChar* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(card_solution_id_, other->card_solution_id_);
    std::swap(sdk_user_id_, other->sdk_user_id_);
    std::swap(platform_id_, other->platform_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCreateChar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCreateChar_descriptor_;
  metadata.reflection = CCreateChar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_ChangeName::kNameFieldNumber;
const int MSG_ChangeName::kErrCodeFieldNumber;
const int MSG_ChangeName::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

MSG_ChangeName::MSG_ChangeName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_ChangeName::InitAsDefaultInstance() {
}

MSG_ChangeName::MSG_ChangeName(const MSG_ChangeName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_ChangeName::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  err_code_ = 0u;
  player_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_ChangeName::~MSG_ChangeName() {
  SharedDtor();
}

void MSG_ChangeName::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MSG_ChangeName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_ChangeName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_ChangeName_descriptor_;
}

const MSG_ChangeName& MSG_ChangeName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

MSG_ChangeName* MSG_ChangeName::default_instance_ = NULL;

MSG_ChangeName* MSG_ChangeName::New() const {
  return new MSG_ChangeName;
}

void MSG_ChangeName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    err_code_ = 0u;
    player_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_ChangeName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_err_code;
        break;
      }

      // optional uint32 err_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &err_code_)));
          set_has_err_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_id;
        break;
      }

      // optional uint64 player_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_ChangeName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 err_code = 2;
  if (has_err_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->err_code(), output);
  }

  // optional uint64 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_ChangeName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 err_code = 2;
  if (has_err_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->err_code(), target);
  }

  // optional uint64 player_id = 3;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_ChangeName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 err_code = 2;
    if (has_err_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->err_code());
    }

    // optional uint64 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_ChangeName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_ChangeName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_ChangeName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_ChangeName::MergeFrom(const MSG_ChangeName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_err_code()) {
      set_err_code(from.err_code());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_ChangeName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ChangeName::CopyFrom(const MSG_ChangeName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ChangeName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MSG_ChangeName::Swap(MSG_ChangeName* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(err_code_, other->err_code_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_ChangeName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_ChangeName_descriptor_;
  metadata.reflection = MSG_ChangeName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_SetNameAndHeadId::kNameFieldNumber;
const int MSG_SetNameAndHeadId::kHeadIdFieldNumber;
const int MSG_SetNameAndHeadId::kPlayerIdFieldNumber;
const int MSG_SetNameAndHeadId::kErrCodeFieldNumber;
#endif  // !_MSC_VER

MSG_SetNameAndHeadId::MSG_SetNameAndHeadId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_SetNameAndHeadId::InitAsDefaultInstance() {
}

MSG_SetNameAndHeadId::MSG_SetNameAndHeadId(const MSG_SetNameAndHeadId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_SetNameAndHeadId::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_id_ = 0u;
  player_id_ = GOOGLE_ULONGLONG(0);
  err_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_SetNameAndHeadId::~MSG_SetNameAndHeadId() {
  SharedDtor();
}

void MSG_SetNameAndHeadId::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MSG_SetNameAndHeadId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_SetNameAndHeadId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_SetNameAndHeadId_descriptor_;
}

const MSG_SetNameAndHeadId& MSG_SetNameAndHeadId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

MSG_SetNameAndHeadId* MSG_SetNameAndHeadId::default_instance_ = NULL;

MSG_SetNameAndHeadId* MSG_SetNameAndHeadId::New() const {
  return new MSG_SetNameAndHeadId;
}

void MSG_SetNameAndHeadId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    head_id_ = 0u;
    player_id_ = GOOGLE_ULONGLONG(0);
    err_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_SetNameAndHeadId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_head_id;
        break;
      }

      // required uint32 head_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_id_)));
          set_has_head_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_id;
        break;
      }

      // optional uint64 player_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_err_code;
        break;
      }

      // optional uint32 err_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &err_code_)));
          set_has_err_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_SetNameAndHeadId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required uint32 head_id = 2;
  if (has_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->head_id(), output);
  }

  // optional uint64 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->player_id(), output);
  }

  // optional uint32 err_code = 4;
  if (has_err_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->err_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_SetNameAndHeadId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 head_id = 2;
  if (has_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->head_id(), target);
  }

  // optional uint64 player_id = 3;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->player_id(), target);
  }

  // optional uint32 err_code = 4;
  if (has_err_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->err_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_SetNameAndHeadId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 head_id = 2;
    if (has_head_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_id());
    }

    // optional uint64 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint32 err_code = 4;
    if (has_err_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->err_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_SetNameAndHeadId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_SetNameAndHeadId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_SetNameAndHeadId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_SetNameAndHeadId::MergeFrom(const MSG_SetNameAndHeadId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head_id()) {
      set_head_id(from.head_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_err_code()) {
      set_err_code(from.err_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_SetNameAndHeadId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_SetNameAndHeadId::CopyFrom(const MSG_SetNameAndHeadId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_SetNameAndHeadId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MSG_SetNameAndHeadId::Swap(MSG_SetNameAndHeadId* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(head_id_, other->head_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(err_code_, other->err_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_SetNameAndHeadId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_SetNameAndHeadId_descriptor_;
  metadata.reflection = MSG_SetNameAndHeadId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCreateChar::kResultFieldNumber;
const int SCreateChar::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

SCreateChar::SCreateChar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCreateChar::InitAsDefaultInstance() {
}

SCreateChar::SCreateChar(const SCreateChar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCreateChar::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCreateChar::~SCreateChar() {
  SharedDtor();
}

void SCreateChar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCreateChar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCreateChar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCreateChar_descriptor_;
}

const SCreateChar& SCreateChar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

SCreateChar* SCreateChar::default_instance_ = NULL;

SCreateChar* SCreateChar::New() const {
  return new SCreateChar;
}

void SCreateChar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    player_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCreateChar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.CREATE_PLAYER_RESULT result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::CREATE_PLAYER_RESULT_IsValid(value)) {
            set_result(static_cast< ::pb::CREATE_PLAYER_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional uint64 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCreateChar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.CREATE_PLAYER_RESULT result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint64 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCreateChar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.CREATE_PLAYER_RESULT result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint64 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCreateChar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.CREATE_PLAYER_RESULT result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint64 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCreateChar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCreateChar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCreateChar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCreateChar::MergeFrom(const SCreateChar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCreateChar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCreateChar::CopyFrom(const SCreateChar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCreateChar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SCreateChar::Swap(SCreateChar* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCreateChar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCreateChar_descriptor_;
  metadata.reflection = SCreateChar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCreateCharRes::kResFieldNumber;
const int SCreateCharRes::kNameFieldNumber;
const int SCreateCharRes::kChannelIdFieldNumber;
const int SCreateCharRes::kSdkUserIdFieldNumber;
const int SCreateCharRes::kPlatformIdFieldNumber;
#endif  // !_MSC_VER

SCreateCharRes::SCreateCharRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCreateCharRes::InitAsDefaultInstance() {
  res_ = const_cast< ::pb::SCreateChar*>(&::pb::SCreateChar::default_instance());
}

SCreateCharRes::SCreateCharRes(const SCreateCharRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCreateCharRes::SharedCtor() {
  _cached_size_ = 0;
  res_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_id_ = 0u;
  sdk_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCreateCharRes::~SCreateCharRes() {
  SharedDtor();
}

void SCreateCharRes::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (sdk_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete sdk_user_id_;
  }
  if (this != default_instance_) {
    delete res_;
  }
}

void SCreateCharRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCreateCharRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCreateCharRes_descriptor_;
}

const SCreateCharRes& SCreateCharRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

SCreateCharRes* SCreateCharRes::default_instance_ = NULL;

SCreateCharRes* SCreateCharRes::New() const {
  return new SCreateCharRes;
}

void SCreateCharRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_res()) {
      if (res_ != NULL) res_->::pb::SCreateChar::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    channel_id_ = 0u;
    if (has_sdk_user_id()) {
      if (sdk_user_id_ != &::google::protobuf::internal::kEmptyString) {
        sdk_user_id_->clear();
      }
    }
    platform_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCreateCharRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.SCreateChar res = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sdk_user_id;
        break;
      }

      // optional string sdk_user_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sdk_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdk_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sdk_user_id().data(), this->sdk_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_platform_id;
        break;
      }

      // optional uint32 platform_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_id_)));
          set_has_platform_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCreateCharRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.SCreateChar res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->res(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }

  // optional string sdk_user_id = 4;
  if (has_sdk_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdk_user_id().data(), this->sdk_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sdk_user_id(), output);
  }

  // optional uint32 platform_id = 5;
  if (has_platform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->platform_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCreateCharRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.SCreateChar res = 1;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->res(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }

  // optional string sdk_user_id = 4;
  if (has_sdk_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdk_user_id().data(), this->sdk_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sdk_user_id(), target);
  }

  // optional uint32 platform_id = 5;
  if (has_platform_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->platform_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCreateCharRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.SCreateChar res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->res());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional string sdk_user_id = 4;
    if (has_sdk_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sdk_user_id());
    }

    // optional uint32 platform_id = 5;
    if (has_platform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platform_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCreateCharRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCreateCharRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCreateCharRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCreateCharRes::MergeFrom(const SCreateCharRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      mutable_res()->::pb::SCreateChar::MergeFrom(from.res());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_sdk_user_id()) {
      set_sdk_user_id(from.sdk_user_id());
    }
    if (from.has_platform_id()) {
      set_platform_id(from.platform_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCreateCharRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCreateCharRes::CopyFrom(const SCreateCharRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCreateCharRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_res()) {
    if (!this->res().IsInitialized()) return false;
  }
  return true;
}

void SCreateCharRes::Swap(SCreateCharRes* other) {
  if (other != this) {
    std::swap(res_, other->res_);
    std::swap(name_, other->name_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(sdk_user_id_, other->sdk_user_id_);
    std::swap(platform_id_, other->platform_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCreateCharRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCreateCharRes_descriptor_;
  metadata.reflection = SCreateCharRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSlectPlayer::kPlayerIdFieldNumber;
const int CSlectPlayer::kPlatformIdFieldNumber;
const int CSlectPlayer::kCountryIdFieldNumber;
const int CSlectPlayer::kHeadpicIdFieldNumber;
const int CSlectPlayer::kExpectedCountryIdFieldNumber;
#endif  // !_MSC_VER

CSlectPlayer::CSlectPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSlectPlayer::InitAsDefaultInstance() {
}

CSlectPlayer::CSlectPlayer(const CSlectPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSlectPlayer::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  platform_id_ = 0u;
  country_id_ = 0u;
  headpic_id_ = 0u;
  expected_country_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSlectPlayer::~CSlectPlayer() {
  SharedDtor();
}

void CSlectPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSlectPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSlectPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSlectPlayer_descriptor_;
}

const CSlectPlayer& CSlectPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

CSlectPlayer* CSlectPlayer::default_instance_ = NULL;

CSlectPlayer* CSlectPlayer::New() const {
  return new CSlectPlayer;
}

void CSlectPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    platform_id_ = 0u;
    country_id_ = 0u;
    headpic_id_ = 0u;
    expected_country_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSlectPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_platform_id;
        break;
      }

      // optional uint32 platform_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_id_)));
          set_has_platform_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_country_id;
        break;
      }

      // optional uint32 country_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_id_)));
          set_has_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_headpic_id;
        break;
      }

      // optional uint32 headpic_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headpic_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headpic_id_)));
          set_has_headpic_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_expected_country_id;
        break;
      }

      // optional uint32 expected_country_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expected_country_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expected_country_id_)));
          set_has_expected_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSlectPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional uint32 platform_id = 2;
  if (has_platform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->platform_id(), output);
  }

  // optional uint32 country_id = 3;
  if (has_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->country_id(), output);
  }

  // optional uint32 headpic_id = 4;
  if (has_headpic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->headpic_id(), output);
  }

  // optional uint32 expected_country_id = 5;
  if (has_expected_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->expected_country_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSlectPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional uint32 platform_id = 2;
  if (has_platform_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->platform_id(), target);
  }

  // optional uint32 country_id = 3;
  if (has_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->country_id(), target);
  }

  // optional uint32 headpic_id = 4;
  if (has_headpic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->headpic_id(), target);
  }

  // optional uint32 expected_country_id = 5;
  if (has_expected_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->expected_country_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSlectPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint32 platform_id = 2;
    if (has_platform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platform_id());
    }

    // optional uint32 country_id = 3;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_id());
    }

    // optional uint32 headpic_id = 4;
    if (has_headpic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headpic_id());
    }

    // optional uint32 expected_country_id = 5;
    if (has_expected_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expected_country_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSlectPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSlectPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSlectPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSlectPlayer::MergeFrom(const CSlectPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_platform_id()) {
      set_platform_id(from.platform_id());
    }
    if (from.has_country_id()) {
      set_country_id(from.country_id());
    }
    if (from.has_headpic_id()) {
      set_headpic_id(from.headpic_id());
    }
    if (from.has_expected_country_id()) {
      set_expected_country_id(from.expected_country_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSlectPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSlectPlayer::CopyFrom(const CSlectPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSlectPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSlectPlayer::Swap(CSlectPlayer* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(platform_id_, other->platform_id_);
    std::swap(country_id_, other->country_id_);
    std::swap(headpic_id_, other->headpic_id_);
    std::swap(expected_country_id_, other->expected_country_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSlectPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSlectPlayer_descriptor_;
  metadata.reflection = CSlectPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SSlectPlayer::kResultFieldNumber;
const int SSlectPlayer::kPlayerDataFieldNumber;
const int SSlectPlayer::kIsQuickLoginFieldNumber;
const int SSlectPlayer::kCountryIdFieldNumber;
const int SSlectPlayer::kHeadpicIdFieldNumber;
const int SSlectPlayer::kExpectedCountryIdFieldNumber;
const int SSlectPlayer::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

SSlectPlayer::SSlectPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSlectPlayer::InitAsDefaultInstance() {
  player_data_ = const_cast< ::pb::PlayerAllData*>(&::pb::PlayerAllData::default_instance());
}

SSlectPlayer::SSlectPlayer(const SSlectPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSlectPlayer::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  player_data_ = NULL;
  is_quick_login_ = false;
  country_id_ = 0u;
  headpic_id_ = 0u;
  expected_country_id_ = 0u;
  player_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSlectPlayer::~SSlectPlayer() {
  SharedDtor();
}

void SSlectPlayer::SharedDtor() {
  if (this != default_instance_) {
    delete player_data_;
  }
}

void SSlectPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSlectPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSlectPlayer_descriptor_;
}

const SSlectPlayer& SSlectPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

SSlectPlayer* SSlectPlayer::default_instance_ = NULL;

SSlectPlayer* SSlectPlayer::New() const {
  return new SSlectPlayer;
}

void SSlectPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_player_data()) {
      if (player_data_ != NULL) player_data_->::pb::PlayerAllData::Clear();
    }
    is_quick_login_ = false;
    country_id_ = 0u;
    headpic_id_ = 0u;
    expected_country_id_ = 0u;
    player_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSlectPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.SELECT_PLAYER_RESULT result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::SELECT_PLAYER_RESULT_IsValid(value)) {
            set_result(static_cast< ::pb::SELECT_PLAYER_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_data;
        break;
      }

      // optional .pb.PlayerAllData player_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_quick_login;
        break;
      }

      // optional bool is_quick_login = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_quick_login:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_quick_login_)));
          set_has_is_quick_login();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_country_id;
        break;
      }

      // optional uint32 country_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_id_)));
          set_has_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_headpic_id;
        break;
      }

      // optional uint32 headpic_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headpic_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headpic_id_)));
          set_has_headpic_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_expected_country_id;
        break;
      }

      // optional uint32 expected_country_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expected_country_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expected_country_id_)));
          set_has_expected_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_player_id;
        break;
      }

      // required uint64 player_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSlectPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.SELECT_PLAYER_RESULT result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .pb.PlayerAllData player_data = 2;
  if (has_player_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_data(), output);
  }

  // optional bool is_quick_login = 3;
  if (has_is_quick_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_quick_login(), output);
  }

  // optional uint32 country_id = 4;
  if (has_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->country_id(), output);
  }

  // optional uint32 headpic_id = 5;
  if (has_headpic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->headpic_id(), output);
  }

  // optional uint32 expected_country_id = 6;
  if (has_expected_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->expected_country_id(), output);
  }

  // required uint64 player_id = 7;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSlectPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.SELECT_PLAYER_RESULT result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .pb.PlayerAllData player_data = 2;
  if (has_player_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_data(), target);
  }

  // optional bool is_quick_login = 3;
  if (has_is_quick_login()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_quick_login(), target);
  }

  // optional uint32 country_id = 4;
  if (has_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->country_id(), target);
  }

  // optional uint32 headpic_id = 5;
  if (has_headpic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->headpic_id(), target);
  }

  // optional uint32 expected_country_id = 6;
  if (has_expected_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->expected_country_id(), target);
  }

  // required uint64 player_id = 7;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSlectPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.SELECT_PLAYER_RESULT result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .pb.PlayerAllData player_data = 2;
    if (has_player_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_data());
    }

    // optional bool is_quick_login = 3;
    if (has_is_quick_login()) {
      total_size += 1 + 1;
    }

    // optional uint32 country_id = 4;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_id());
    }

    // optional uint32 headpic_id = 5;
    if (has_headpic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headpic_id());
    }

    // optional uint32 expected_country_id = 6;
    if (has_expected_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expected_country_id());
    }

    // required uint64 player_id = 7;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSlectPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSlectPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSlectPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSlectPlayer::MergeFrom(const SSlectPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_player_data()) {
      mutable_player_data()->::pb::PlayerAllData::MergeFrom(from.player_data());
    }
    if (from.has_is_quick_login()) {
      set_is_quick_login(from.is_quick_login());
    }
    if (from.has_country_id()) {
      set_country_id(from.country_id());
    }
    if (from.has_headpic_id()) {
      set_headpic_id(from.headpic_id());
    }
    if (from.has_expected_country_id()) {
      set_expected_country_id(from.expected_country_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSlectPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSlectPlayer::CopyFrom(const SSlectPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSlectPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000041) != 0x00000041) return false;

  if (has_player_data()) {
    if (!this->player_data().IsInitialized()) return false;
  }
  return true;
}

void SSlectPlayer::Swap(SSlectPlayer* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(player_data_, other->player_data_);
    std::swap(is_quick_login_, other->is_quick_login_);
    std::swap(country_id_, other->country_id_);
    std::swap(headpic_id_, other->headpic_id_);
    std::swap(expected_country_id_, other->expected_country_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSlectPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSlectPlayer_descriptor_;
  metadata.reflection = SSlectPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SGuideProcess::kIsNeedGuideFieldNumber;
const int SGuideProcess::kIsFinishedGuideFieldNumber;
const int SGuideProcess::kCurProcessFieldNumber;
const int SGuideProcess::kLeftPrecessFieldNumber;
#endif  // !_MSC_VER

SGuideProcess::SGuideProcess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SGuideProcess::InitAsDefaultInstance() {
}

SGuideProcess::SGuideProcess(const SGuideProcess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SGuideProcess::SharedCtor() {
  _cached_size_ = 0;
  is_need_guide_ = false;
  is_finished_guide_ = false;
  cur_process_ = 0u;
  left_precess_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SGuideProcess::~SGuideProcess() {
  SharedDtor();
}

void SGuideProcess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SGuideProcess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SGuideProcess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SGuideProcess_descriptor_;
}

const SGuideProcess& SGuideProcess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

SGuideProcess* SGuideProcess::default_instance_ = NULL;

SGuideProcess* SGuideProcess::New() const {
  return new SGuideProcess;
}

void SGuideProcess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_need_guide_ = false;
    is_finished_guide_ = false;
    cur_process_ = 0u;
    left_precess_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SGuideProcess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_need_guide = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_need_guide_)));
          set_has_is_need_guide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_finished_guide;
        break;
      }

      // required bool is_finished_guide = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_finished_guide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_finished_guide_)));
          set_has_is_finished_guide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_process;
        break;
      }

      // required uint32 cur_process = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_process:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_process_)));
          set_has_cur_process();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_left_precess;
        break;
      }

      // optional uint32 left_precess = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_precess:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_precess_)));
          set_has_left_precess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SGuideProcess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_need_guide = 1;
  if (has_is_need_guide()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_need_guide(), output);
  }

  // required bool is_finished_guide = 2;
  if (has_is_finished_guide()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_finished_guide(), output);
  }

  // required uint32 cur_process = 3;
  if (has_cur_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_process(), output);
  }

  // optional uint32 left_precess = 4;
  if (has_left_precess()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->left_precess(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SGuideProcess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_need_guide = 1;
  if (has_is_need_guide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_need_guide(), target);
  }

  // required bool is_finished_guide = 2;
  if (has_is_finished_guide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_finished_guide(), target);
  }

  // required uint32 cur_process = 3;
  if (has_cur_process()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_process(), target);
  }

  // optional uint32 left_precess = 4;
  if (has_left_precess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->left_precess(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SGuideProcess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_need_guide = 1;
    if (has_is_need_guide()) {
      total_size += 1 + 1;
    }

    // required bool is_finished_guide = 2;
    if (has_is_finished_guide()) {
      total_size += 1 + 1;
    }

    // required uint32 cur_process = 3;
    if (has_cur_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_process());
    }

    // optional uint32 left_precess = 4;
    if (has_left_precess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_precess());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SGuideProcess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SGuideProcess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SGuideProcess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SGuideProcess::MergeFrom(const SGuideProcess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_need_guide()) {
      set_is_need_guide(from.is_need_guide());
    }
    if (from.has_is_finished_guide()) {
      set_is_finished_guide(from.is_finished_guide());
    }
    if (from.has_cur_process()) {
      set_cur_process(from.cur_process());
    }
    if (from.has_left_precess()) {
      set_left_precess(from.left_precess());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SGuideProcess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGuideProcess::CopyFrom(const SGuideProcess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGuideProcess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SGuideProcess::Swap(SGuideProcess* other) {
  if (other != this) {
    std::swap(is_need_guide_, other->is_need_guide_);
    std::swap(is_finished_guide_, other->is_finished_guide_);
    std::swap(cur_process_, other->cur_process_);
    std::swap(left_precess_, other->left_precess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SGuideProcess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SGuideProcess_descriptor_;
  metadata.reflection = SGuideProcess_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
