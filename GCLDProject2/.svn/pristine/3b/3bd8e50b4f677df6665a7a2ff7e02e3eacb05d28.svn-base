// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Country.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Country.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* CountyLevelUpTaskPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountyLevelUpTaskPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonsterCity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterCity_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonsterCityLst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterCityLst_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountryCrossWarInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountryCrossWarInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrossWarInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrossWarInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Country_Levle_Up_Task_Rank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Country_Levle_Up_Task_Rank_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Country_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Country_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Country_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Country_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* Struct_Country_Task_Base_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Struct_Country_Task_Base_reflection_ = NULL;
const ::google::protobuf::Descriptor* Struct_Country_Task_City_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Struct_Country_Task_City_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Country_Task_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Country_Task_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Country_Task_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Country_Task_Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Country_Task_Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Country_Task_Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Country_Task_Reward_Ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Country_Task_Reward_Ret_reflection_ = NULL;
const ::google::protobuf::Descriptor* Country_Task_Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Country_Task_Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Country_Task_End_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Country_Task_End_reflection_ = NULL;
const ::google::protobuf::Descriptor* Struct_Country_Pk_Player_mirror_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Struct_Country_Pk_Player_mirror_reflection_ = NULL;
const ::google::protobuf::Descriptor* Struct_Country_Pk_History_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Struct_Country_Pk_History_reflection_ = NULL;
const ::google::protobuf::Descriptor* Struct_Country_Pk_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Struct_Country_Pk_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Country_Task_Pk_Challenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Country_Task_Pk_Challenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Monster_City_All_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Monster_City_All_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Monster_City_Donate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Monster_City_Donate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Monster_City_Donate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Monster_City_Donate_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Monster_City_Start_Invade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Monster_City_Start_Invade_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Monster_City_Invade_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Monster_City_Invade_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Country_Task_Insvest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Country_Task_Insvest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Country_Invest_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Country_Invest_Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Country_Invest_Donate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Country_Invest_Donate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Country_Invest_Donate_Ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Country_Invest_Donate_Ret_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Country_Invest_Take_Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Country_Invest_Take_Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Country_Invest_Take_Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Country_Invest_Take_Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Country_Invest_Clear_CD_Ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Country_Invest_Clear_CD_Ret_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Country_Task_Occupy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Country_Task_Occupy_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Country_Occupy_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Country_Occupy_Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Country_Occupy_Take_Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Country_Occupy_Take_Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Country_Occupy_Take_Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Country_Occupy_Take_Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneTaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneTaskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_PersonalTask_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_PersonalTask_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_PersonalTask_One_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_PersonalTask_One_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_PersonalTask_Take_Award_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_PersonalTask_Take_Award_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_PersonalTask_Take_Award_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_PersonalTask_Take_Award_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Notice_Country_NPC_NextTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Notice_Country_NPC_NextTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Country_Task_DefenceBorderland_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Country_Task_DefenceBorderland_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Country_DefenceBorderland_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Country_DefenceBorderland_Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Country_DefenceBorderland_Take_Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Country_DefenceBorderland_Take_Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Country_DefenceBorderland_Take_Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Country_DefenceBorderland_Take_Reward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CROSS_STATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* E_MONSTER_CITY_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Country_Task_Err_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Country_2eproto() {
  protobuf_AddDesc_Country_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Country.proto");
  GOOGLE_CHECK(file != NULL);
  CountyLevelUpTaskPlayer_descriptor_ = file->message_type(0);
  static const int CountyLevelUpTaskPlayer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountyLevelUpTaskPlayer, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountyLevelUpTaskPlayer, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountyLevelUpTaskPlayer, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountyLevelUpTaskPlayer, statistic_kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountyLevelUpTaskPlayer, is_take_reward_),
  };
  CountyLevelUpTaskPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountyLevelUpTaskPlayer_descriptor_,
      CountyLevelUpTaskPlayer::default_instance_,
      CountyLevelUpTaskPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountyLevelUpTaskPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountyLevelUpTaskPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountyLevelUpTaskPlayer));
  MonsterCity_descriptor_ = file->message_type(1);
  static const int MonsterCity_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterCity, donation_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterCity, friend_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterCity, moster_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterCity, invade_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterCity, today_invade_count_),
  };
  MonsterCity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterCity_descriptor_,
      MonsterCity::default_instance_,
      MonsterCity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterCity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterCity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterCity));
  MonsterCityLst_descriptor_ = file->message_type(2);
  static const int MonsterCityLst_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterCityLst, list_),
  };
  MonsterCityLst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterCityLst_descriptor_,
      MonsterCityLst::default_instance_,
      MonsterCityLst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterCityLst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterCityLst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterCityLst));
  CountryCrossWarInfo_descriptor_ = file->message_type(3);
  static const int CountryCrossWarInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryCrossWarInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryCrossWarInfo, cross_war_info_),
  };
  CountryCrossWarInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountryCrossWarInfo_descriptor_,
      CountryCrossWarInfo::default_instance_,
      CountryCrossWarInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryCrossWarInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryCrossWarInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountryCrossWarInfo));
  CrossWarInfo_descriptor_ = file->message_type(4);
  static const int CrossWarInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossWarInfo, is_open_cross_war_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossWarInfo, is_open_anabasis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossWarInfo, cross_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossWarInfo, anabasis_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossWarInfo, cross_war_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossWarInfo, cross_server_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossWarInfo, cross_server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossWarInfo, is_anabasis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossWarInfo, anabasis_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossWarInfo, anabasis_server_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossWarInfo, anabasis_server_port_),
  };
  CrossWarInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrossWarInfo_descriptor_,
      CrossWarInfo::default_instance_,
      CrossWarInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossWarInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossWarInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrossWarInfo));
  CountyInfo_descriptor_ = file->message_type(5);
  static const int CountyInfo_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountyInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountyInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountyInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountyInfo, donate_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountyInfo, country_npc_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountyInfo, country_npc_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountyInfo, have_city_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountyInfo, open_level_up_task_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountyInfo, cur_level_do_task_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountyInfo, kill_monster_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountyInfo, is_monster_task_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountyInfo, is_monster_task_succeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountyInfo, cross_war_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountyInfo, monster_city_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountyInfo, last_check_npc_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountyInfo, npc_level_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountyInfo, tuntian_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountyInfo, tuntian_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountyInfo, prosperity_degree_),
  };
  CountyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountyInfo_descriptor_,
      CountyInfo::default_instance_,
      CountyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountyInfo));
  Country_Levle_Up_Task_Rank_descriptor_ = file->message_type(6);
  static const int Country_Levle_Up_Task_Rank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country_Levle_Up_Task_Rank, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country_Levle_Up_Task_Rank, player_lst_),
  };
  Country_Levle_Up_Task_Rank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Country_Levle_Up_Task_Rank_descriptor_,
      Country_Levle_Up_Task_Rank::default_instance_,
      Country_Levle_Up_Task_Rank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country_Levle_Up_Task_Rank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country_Levle_Up_Task_Rank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Country_Levle_Up_Task_Rank));
  C2GS_Country_Info_descriptor_ = file->message_type(7);
  static const int C2GS_Country_Info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Country_Info, id_),
  };
  C2GS_Country_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Country_Info_descriptor_,
      C2GS_Country_Info::default_instance_,
      C2GS_Country_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Country_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Country_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Country_Info));
  GS2C_Country_Info_descriptor_ = file->message_type(8);
  static const int GS2C_Country_Info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Info, country_),
  };
  GS2C_Country_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Country_Info_descriptor_,
      GS2C_Country_Info::default_instance_,
      GS2C_Country_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Country_Info));
  Struct_Country_Task_Base_descriptor_ = file->message_type(9);
  static const int Struct_Country_Task_Base_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Task_Base, is_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Task_Base, cur_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Task_Base, cur_stage_begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Task_Base, is_waiting_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Task_Base, cur_stage_begin_country_citys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Task_Base, cur_stage_now_country_occupy_citys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Task_Base, cur_stage_target_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Task_Base, cur_stage_now_country_invest_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Task_Base, is_country_failed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Task_Base, country_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Task_Base, cur_stage_fighting_city_num_),
  };
  Struct_Country_Task_Base_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Struct_Country_Task_Base_descriptor_,
      Struct_Country_Task_Base::default_instance_,
      Struct_Country_Task_Base_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Task_Base, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Task_Base, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Struct_Country_Task_Base));
  Struct_Country_Task_City_descriptor_ = file->message_type(10);
  static const int Struct_Country_Task_City_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Task_City, city_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Task_City, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Task_City, win_country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Task_City, origin_country_),
  };
  Struct_Country_Task_City_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Struct_Country_Task_City_descriptor_,
      Struct_Country_Task_City::default_instance_,
      Struct_Country_Task_City_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Task_City, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Task_City, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Struct_Country_Task_City));
  GS2C_Country_Task_Info_descriptor_ = file->message_type(11);
  static const int GS2C_Country_Task_Info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Info, is_running_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Info, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Info, base_),
  };
  GS2C_Country_Task_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Country_Task_Info_descriptor_,
      GS2C_Country_Task_Info::default_instance_,
      GS2C_Country_Task_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Country_Task_Info));
  GS2C_Country_Task_Player_descriptor_ = file->message_type(12);
  static const int GS2C_Country_Task_Player_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Player, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Player, kill_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Player, is_take_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Player, task_end_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Player, rank_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Player, win_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Player, cd_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Player, pk_info_),
  };
  GS2C_Country_Task_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Country_Task_Player_descriptor_,
      GS2C_Country_Task_Player::default_instance_,
      GS2C_Country_Task_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Country_Task_Player));
  C2GS_Country_Task_Reward_descriptor_ = file->message_type(13);
  static const int C2GS_Country_Task_Reward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Country_Task_Reward, task_idx_),
  };
  C2GS_Country_Task_Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Country_Task_Reward_descriptor_,
      C2GS_Country_Task_Reward::default_instance_,
      C2GS_Country_Task_Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Country_Task_Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Country_Task_Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Country_Task_Reward));
  GS2C_Country_Task_Reward_Ret_descriptor_ = file->message_type(14);
  static const int GS2C_Country_Task_Reward_Ret_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Reward_Ret, issuccess_),
  };
  GS2C_Country_Task_Reward_Ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Country_Task_Reward_Ret_descriptor_,
      GS2C_Country_Task_Reward_Ret::default_instance_,
      GS2C_Country_Task_Reward_Ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Reward_Ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Reward_Ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Country_Task_Reward_Ret));
  Country_Task_Result_descriptor_ = file->message_type(15);
  static const int Country_Task_Result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country_Task_Result, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country_Task_Result, kill_count_),
  };
  Country_Task_Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Country_Task_Result_descriptor_,
      Country_Task_Result::default_instance_,
      Country_Task_Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country_Task_Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country_Task_Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Country_Task_Result));
  GS2C_Country_Task_End_descriptor_ = file->message_type(16);
  static const int GS2C_Country_Task_End_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_End, city_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_End, result_),
  };
  GS2C_Country_Task_End_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Country_Task_End_descriptor_,
      GS2C_Country_Task_End::default_instance_,
      GS2C_Country_Task_End_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_End, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_End, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Country_Task_End));
  Struct_Country_Pk_Player_mirror_descriptor_ = file->message_type(17);
  static const int Struct_Country_Pk_Player_mirror_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Pk_Player_mirror, head_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Pk_Player_mirror, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Pk_Player_mirror, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Pk_Player_mirror, card_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Pk_Player_mirror, card_lv_),
  };
  Struct_Country_Pk_Player_mirror_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Struct_Country_Pk_Player_mirror_descriptor_,
      Struct_Country_Pk_Player_mirror::default_instance_,
      Struct_Country_Pk_Player_mirror_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Pk_Player_mirror, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Pk_Player_mirror, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Struct_Country_Pk_Player_mirror));
  Struct_Country_Pk_History_descriptor_ = file->message_type(18);
  static const int Struct_Country_Pk_History_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Pk_History, rival_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Pk_History, rival_is_att_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Pk_History, rival_is_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Pk_History, my_score_change_),
  };
  Struct_Country_Pk_History_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Struct_Country_Pk_History_descriptor_,
      Struct_Country_Pk_History::default_instance_,
      Struct_Country_Pk_History_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Pk_History, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Pk_History, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Struct_Country_Pk_History));
  Struct_Country_Pk_Info_descriptor_ = file->message_type(19);
  static const int Struct_Country_Pk_Info_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Pk_Info, recent_player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Pk_Info, recent_player_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Pk_Info, recent_player_country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Pk_Info, rank_no1_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Pk_Info, mirror_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Pk_Info, pk_history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Pk_Info, is_pking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Pk_Info, total_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Pk_Info, total_lose_),
  };
  Struct_Country_Pk_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Struct_Country_Pk_Info_descriptor_,
      Struct_Country_Pk_Info::default_instance_,
      Struct_Country_Pk_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Pk_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Country_Pk_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Struct_Country_Pk_Info));
  C2GS_Country_Task_Pk_Challenge_descriptor_ = file->message_type(20);
  static const int C2GS_Country_Task_Pk_Challenge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Country_Task_Pk_Challenge, idx_),
  };
  C2GS_Country_Task_Pk_Challenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Country_Task_Pk_Challenge_descriptor_,
      C2GS_Country_Task_Pk_Challenge::default_instance_,
      C2GS_Country_Task_Pk_Challenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Country_Task_Pk_Challenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Country_Task_Pk_Challenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Country_Task_Pk_Challenge));
  GS2C_Monster_City_All_Info_descriptor_ = file->message_type(21);
  static const int GS2C_Monster_City_All_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Monster_City_All_Info, all_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Monster_City_All_Info, cdendtime_),
  };
  GS2C_Monster_City_All_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Monster_City_All_Info_descriptor_,
      GS2C_Monster_City_All_Info::default_instance_,
      GS2C_Monster_City_All_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Monster_City_All_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Monster_City_All_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Monster_City_All_Info));
  C2GS_Monster_City_Donate_descriptor_ = file->message_type(22);
  static const int C2GS_Monster_City_Donate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Monster_City_Donate, dest_country_id_),
  };
  C2GS_Monster_City_Donate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Monster_City_Donate_descriptor_,
      C2GS_Monster_City_Donate::default_instance_,
      C2GS_Monster_City_Donate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Monster_City_Donate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Monster_City_Donate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Monster_City_Donate));
  GS2C_Monster_City_Donate_descriptor_ = file->message_type(23);
  static const int GS2C_Monster_City_Donate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Monster_City_Donate, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Monster_City_Donate, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Monster_City_Donate, cdendtime_),
  };
  GS2C_Monster_City_Donate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Monster_City_Donate_descriptor_,
      GS2C_Monster_City_Donate::default_instance_,
      GS2C_Monster_City_Donate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Monster_City_Donate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Monster_City_Donate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Monster_City_Donate));
  C2GS_Monster_City_Start_Invade_descriptor_ = file->message_type(24);
  static const int C2GS_Monster_City_Start_Invade_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Monster_City_Start_Invade, dest_country_id_),
  };
  C2GS_Monster_City_Start_Invade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Monster_City_Start_Invade_descriptor_,
      C2GS_Monster_City_Start_Invade::default_instance_,
      C2GS_Monster_City_Start_Invade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Monster_City_Start_Invade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Monster_City_Start_Invade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Monster_City_Start_Invade));
  GS2C_Monster_City_Invade_Rsp_descriptor_ = file->message_type(25);
  static const int GS2C_Monster_City_Invade_Rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Monster_City_Invade_Rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Monster_City_Invade_Rsp, info_),
  };
  GS2C_Monster_City_Invade_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Monster_City_Invade_Rsp_descriptor_,
      GS2C_Monster_City_Invade_Rsp::default_instance_,
      GS2C_Monster_City_Invade_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Monster_City_Invade_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Monster_City_Invade_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Monster_City_Invade_Rsp));
  GS2C_Country_Task_Insvest_descriptor_ = file->message_type(26);
  static const int GS2C_Country_Task_Insvest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Insvest, is_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Insvest, cur_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Insvest, cur_stage_begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Insvest, cur_stage_now_country_invest_money_),
  };
  GS2C_Country_Task_Insvest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Country_Task_Insvest_descriptor_,
      GS2C_Country_Task_Insvest::default_instance_,
      GS2C_Country_Task_Insvest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Insvest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Insvest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Country_Task_Insvest));
  GS2C_Country_Invest_Player_descriptor_ = file->message_type(27);
  static const int GS2C_Country_Invest_Player_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Invest_Player, stageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Invest_Player, rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Invest_Player, donatenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Invest_Player, is_take_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Invest_Player, cantakeexreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Invest_Player, cd_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Invest_Player, rank_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Invest_Player, win_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Invest_Player, total_donate_),
  };
  GS2C_Country_Invest_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Country_Invest_Player_descriptor_,
      GS2C_Country_Invest_Player::default_instance_,
      GS2C_Country_Invest_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Invest_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Invest_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Country_Invest_Player));
  C2GS_Country_Invest_Donate_descriptor_ = file->message_type(28);
  static const int C2GS_Country_Invest_Donate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Country_Invest_Donate, stage_),
  };
  C2GS_Country_Invest_Donate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Country_Invest_Donate_descriptor_,
      C2GS_Country_Invest_Donate::default_instance_,
      C2GS_Country_Invest_Donate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Country_Invest_Donate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Country_Invest_Donate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Country_Invest_Donate));
  GS2C_Country_Invest_Donate_Ret_descriptor_ = file->message_type(29);
  static const int GS2C_Country_Invest_Donate_Ret_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Invest_Donate_Ret, issuccess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Invest_Donate_Ret, errret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Invest_Donate_Ret, my_invest_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Invest_Donate_Ret, country_invest_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Invest_Donate_Ret, cd_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Invest_Donate_Ret, total_donate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Invest_Donate_Ret, successaward_),
  };
  GS2C_Country_Invest_Donate_Ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Country_Invest_Donate_Ret_descriptor_,
      GS2C_Country_Invest_Donate_Ret::default_instance_,
      GS2C_Country_Invest_Donate_Ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Invest_Donate_Ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Invest_Donate_Ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Country_Invest_Donate_Ret));
  C2GS_Country_Invest_Take_Reward_descriptor_ = file->message_type(30);
  static const int C2GS_Country_Invest_Take_Reward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Country_Invest_Take_Reward, stage_),
  };
  C2GS_Country_Invest_Take_Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Country_Invest_Take_Reward_descriptor_,
      C2GS_Country_Invest_Take_Reward::default_instance_,
      C2GS_Country_Invest_Take_Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Country_Invest_Take_Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Country_Invest_Take_Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Country_Invest_Take_Reward));
  GS2C_Country_Invest_Take_Reward_descriptor_ = file->message_type(31);
  static const int GS2C_Country_Invest_Take_Reward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Invest_Take_Reward, issuccess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Invest_Take_Reward, errret_),
  };
  GS2C_Country_Invest_Take_Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Country_Invest_Take_Reward_descriptor_,
      GS2C_Country_Invest_Take_Reward::default_instance_,
      GS2C_Country_Invest_Take_Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Invest_Take_Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Invest_Take_Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Country_Invest_Take_Reward));
  GS2C_Country_Invest_Clear_CD_Ret_descriptor_ = file->message_type(32);
  static const int GS2C_Country_Invest_Clear_CD_Ret_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Invest_Clear_CD_Ret, issuccess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Invest_Clear_CD_Ret, errret_),
  };
  GS2C_Country_Invest_Clear_CD_Ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Country_Invest_Clear_CD_Ret_descriptor_,
      GS2C_Country_Invest_Clear_CD_Ret::default_instance_,
      GS2C_Country_Invest_Clear_CD_Ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Invest_Clear_CD_Ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Invest_Clear_CD_Ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Country_Invest_Clear_CD_Ret));
  GS2C_Country_Task_Occupy_descriptor_ = file->message_type(33);
  static const int GS2C_Country_Task_Occupy_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Occupy, is_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Occupy, cur_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Occupy, cur_stage_begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Occupy, cur_stage_now_country_have_citys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Occupy, cur_stage_begin_have_citys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Occupy, need_total_citys_),
  };
  GS2C_Country_Task_Occupy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Country_Task_Occupy_descriptor_,
      GS2C_Country_Task_Occupy::default_instance_,
      GS2C_Country_Task_Occupy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Occupy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_Occupy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Country_Task_Occupy));
  GS2C_Country_Occupy_Player_descriptor_ = file->message_type(34);
  static const int GS2C_Country_Occupy_Player_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Occupy_Player, stageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Occupy_Player, rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Occupy_Player, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Occupy_Player, is_take_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Occupy_Player, cantakeexreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Occupy_Player, rank_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Occupy_Player, win_reward_),
  };
  GS2C_Country_Occupy_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Country_Occupy_Player_descriptor_,
      GS2C_Country_Occupy_Player::default_instance_,
      GS2C_Country_Occupy_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Occupy_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Occupy_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Country_Occupy_Player));
  C2GS_Country_Occupy_Take_Reward_descriptor_ = file->message_type(35);
  static const int C2GS_Country_Occupy_Take_Reward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Country_Occupy_Take_Reward, stage_),
  };
  C2GS_Country_Occupy_Take_Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Country_Occupy_Take_Reward_descriptor_,
      C2GS_Country_Occupy_Take_Reward::default_instance_,
      C2GS_Country_Occupy_Take_Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Country_Occupy_Take_Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Country_Occupy_Take_Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Country_Occupy_Take_Reward));
  GS2C_Country_Occupy_Take_Reward_descriptor_ = file->message_type(36);
  static const int GS2C_Country_Occupy_Take_Reward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Occupy_Take_Reward, issuccess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Occupy_Take_Reward, errret_),
  };
  GS2C_Country_Occupy_Take_Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Country_Occupy_Take_Reward_descriptor_,
      GS2C_Country_Occupy_Take_Reward::default_instance_,
      GS2C_Country_Occupy_Take_Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Occupy_Take_Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Occupy_Take_Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Country_Occupy_Take_Reward));
  OneTaskInfo_descriptor_ = file->message_type(37);
  static const int OneTaskInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneTaskInfo, stageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneTaskInfo, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneTaskInfo, curcompletion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneTaskInfo, istakeaward_),
  };
  OneTaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneTaskInfo_descriptor_,
      OneTaskInfo::default_instance_,
      OneTaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneTaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneTaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneTaskInfo));
  GS2C_PersonalTask_Info_descriptor_ = file->message_type(38);
  static const int GS2C_PersonalTask_Info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PersonalTask_Info, is_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PersonalTask_Info, curstage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PersonalTask_Info, cursubstage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PersonalTask_Info, taskbegintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PersonalTask_Info, tasks_),
  };
  GS2C_PersonalTask_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_PersonalTask_Info_descriptor_,
      GS2C_PersonalTask_Info::default_instance_,
      GS2C_PersonalTask_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PersonalTask_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PersonalTask_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_PersonalTask_Info));
  C2GS_PersonalTask_One_descriptor_ = file->message_type(39);
  static const int C2GS_PersonalTask_One_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_PersonalTask_One, taskid_),
  };
  C2GS_PersonalTask_One_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_PersonalTask_One_descriptor_,
      C2GS_PersonalTask_One::default_instance_,
      C2GS_PersonalTask_One_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_PersonalTask_One, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_PersonalTask_One, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_PersonalTask_One));
  C2GS_PersonalTask_Take_Award_descriptor_ = file->message_type(40);
  static const int C2GS_PersonalTask_Take_Award_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_PersonalTask_Take_Award, taskid_),
  };
  C2GS_PersonalTask_Take_Award_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_PersonalTask_Take_Award_descriptor_,
      C2GS_PersonalTask_Take_Award::default_instance_,
      C2GS_PersonalTask_Take_Award_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_PersonalTask_Take_Award, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_PersonalTask_Take_Award, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_PersonalTask_Take_Award));
  GS2C_PersonalTask_Take_Award_descriptor_ = file->message_type(41);
  static const int GS2C_PersonalTask_Take_Award_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PersonalTask_Take_Award, issuccess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PersonalTask_Take_Award, errret_),
  };
  GS2C_PersonalTask_Take_Award_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_PersonalTask_Take_Award_descriptor_,
      GS2C_PersonalTask_Take_Award::default_instance_,
      GS2C_PersonalTask_Take_Award_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PersonalTask_Take_Award, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PersonalTask_Take_Award, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_PersonalTask_Take_Award));
  GS2C_Notice_Country_NPC_NextTime_descriptor_ = file->message_type(42);
  static const int GS2C_Notice_Country_NPC_NextTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Notice_Country_NPC_NextTime, npctype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Notice_Country_NPC_NextTime, nexttime_),
  };
  GS2C_Notice_Country_NPC_NextTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Notice_Country_NPC_NextTime_descriptor_,
      GS2C_Notice_Country_NPC_NextTime::default_instance_,
      GS2C_Notice_Country_NPC_NextTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Notice_Country_NPC_NextTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Notice_Country_NPC_NextTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Notice_Country_NPC_NextTime));
  GS2C_Country_Task_DefenceBorderland_descriptor_ = file->message_type(43);
  static const int GS2C_Country_Task_DefenceBorderland_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_DefenceBorderland, is_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_DefenceBorderland, cur_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_DefenceBorderland, cur_sub_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_DefenceBorderland, cur_stage_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_DefenceBorderland, cur_sub_stage_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_DefenceBorderland, is_country_failed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_DefenceBorderland, cityid_monster_attack_),
  };
  GS2C_Country_Task_DefenceBorderland_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Country_Task_DefenceBorderland_descriptor_,
      GS2C_Country_Task_DefenceBorderland::default_instance_,
      GS2C_Country_Task_DefenceBorderland_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_DefenceBorderland, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_Task_DefenceBorderland, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Country_Task_DefenceBorderland));
  GS2C_Country_DefenceBorderland_Player_descriptor_ = file->message_type(44);
  static const int GS2C_Country_DefenceBorderland_Player_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_DefenceBorderland_Player, stageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_DefenceBorderland_Player, rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_DefenceBorderland_Player, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_DefenceBorderland_Player, killnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_DefenceBorderland_Player, is_take_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_DefenceBorderland_Player, cantakeexreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_DefenceBorderland_Player, rank_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_DefenceBorderland_Player, win_reward_),
  };
  GS2C_Country_DefenceBorderland_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Country_DefenceBorderland_Player_descriptor_,
      GS2C_Country_DefenceBorderland_Player::default_instance_,
      GS2C_Country_DefenceBorderland_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_DefenceBorderland_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_DefenceBorderland_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Country_DefenceBorderland_Player));
  C2GS_Country_DefenceBorderland_Take_Reward_descriptor_ = file->message_type(45);
  static const int C2GS_Country_DefenceBorderland_Take_Reward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Country_DefenceBorderland_Take_Reward, stage_),
  };
  C2GS_Country_DefenceBorderland_Take_Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Country_DefenceBorderland_Take_Reward_descriptor_,
      C2GS_Country_DefenceBorderland_Take_Reward::default_instance_,
      C2GS_Country_DefenceBorderland_Take_Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Country_DefenceBorderland_Take_Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Country_DefenceBorderland_Take_Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Country_DefenceBorderland_Take_Reward));
  GS2C_Country_DefenceBorderland_Take_Reward_descriptor_ = file->message_type(46);
  static const int GS2C_Country_DefenceBorderland_Take_Reward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_DefenceBorderland_Take_Reward, issuccess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_DefenceBorderland_Take_Reward, errret_),
  };
  GS2C_Country_DefenceBorderland_Take_Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Country_DefenceBorderland_Take_Reward_descriptor_,
      GS2C_Country_DefenceBorderland_Take_Reward::default_instance_,
      GS2C_Country_DefenceBorderland_Take_Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_DefenceBorderland_Take_Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Country_DefenceBorderland_Take_Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Country_DefenceBorderland_Take_Reward));
  CROSS_STATE_descriptor_ = file->enum_type(0);
  E_MONSTER_CITY_descriptor_ = file->enum_type(1);
  Country_Task_Err_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Country_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountyLevelUpTaskPlayer_descriptor_, &CountyLevelUpTaskPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterCity_descriptor_, &MonsterCity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterCityLst_descriptor_, &MonsterCityLst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountryCrossWarInfo_descriptor_, &CountryCrossWarInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrossWarInfo_descriptor_, &CrossWarInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountyInfo_descriptor_, &CountyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Country_Levle_Up_Task_Rank_descriptor_, &Country_Levle_Up_Task_Rank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Country_Info_descriptor_, &C2GS_Country_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Country_Info_descriptor_, &GS2C_Country_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Struct_Country_Task_Base_descriptor_, &Struct_Country_Task_Base::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Struct_Country_Task_City_descriptor_, &Struct_Country_Task_City::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Country_Task_Info_descriptor_, &GS2C_Country_Task_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Country_Task_Player_descriptor_, &GS2C_Country_Task_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Country_Task_Reward_descriptor_, &C2GS_Country_Task_Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Country_Task_Reward_Ret_descriptor_, &GS2C_Country_Task_Reward_Ret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Country_Task_Result_descriptor_, &Country_Task_Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Country_Task_End_descriptor_, &GS2C_Country_Task_End::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Struct_Country_Pk_Player_mirror_descriptor_, &Struct_Country_Pk_Player_mirror::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Struct_Country_Pk_History_descriptor_, &Struct_Country_Pk_History::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Struct_Country_Pk_Info_descriptor_, &Struct_Country_Pk_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Country_Task_Pk_Challenge_descriptor_, &C2GS_Country_Task_Pk_Challenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Monster_City_All_Info_descriptor_, &GS2C_Monster_City_All_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Monster_City_Donate_descriptor_, &C2GS_Monster_City_Donate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Monster_City_Donate_descriptor_, &GS2C_Monster_City_Donate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Monster_City_Start_Invade_descriptor_, &C2GS_Monster_City_Start_Invade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Monster_City_Invade_Rsp_descriptor_, &GS2C_Monster_City_Invade_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Country_Task_Insvest_descriptor_, &GS2C_Country_Task_Insvest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Country_Invest_Player_descriptor_, &GS2C_Country_Invest_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Country_Invest_Donate_descriptor_, &C2GS_Country_Invest_Donate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Country_Invest_Donate_Ret_descriptor_, &GS2C_Country_Invest_Donate_Ret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Country_Invest_Take_Reward_descriptor_, &C2GS_Country_Invest_Take_Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Country_Invest_Take_Reward_descriptor_, &GS2C_Country_Invest_Take_Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Country_Invest_Clear_CD_Ret_descriptor_, &GS2C_Country_Invest_Clear_CD_Ret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Country_Task_Occupy_descriptor_, &GS2C_Country_Task_Occupy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Country_Occupy_Player_descriptor_, &GS2C_Country_Occupy_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Country_Occupy_Take_Reward_descriptor_, &C2GS_Country_Occupy_Take_Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Country_Occupy_Take_Reward_descriptor_, &GS2C_Country_Occupy_Take_Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneTaskInfo_descriptor_, &OneTaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_PersonalTask_Info_descriptor_, &GS2C_PersonalTask_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_PersonalTask_One_descriptor_, &C2GS_PersonalTask_One::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_PersonalTask_Take_Award_descriptor_, &C2GS_PersonalTask_Take_Award::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_PersonalTask_Take_Award_descriptor_, &GS2C_PersonalTask_Take_Award::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Notice_Country_NPC_NextTime_descriptor_, &GS2C_Notice_Country_NPC_NextTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Country_Task_DefenceBorderland_descriptor_, &GS2C_Country_Task_DefenceBorderland::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Country_DefenceBorderland_Player_descriptor_, &GS2C_Country_DefenceBorderland_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Country_DefenceBorderland_Take_Reward_descriptor_, &C2GS_Country_DefenceBorderland_Take_Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Country_DefenceBorderland_Take_Reward_descriptor_, &GS2C_Country_DefenceBorderland_Take_Reward::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Country_2eproto() {
  delete CountyLevelUpTaskPlayer::default_instance_;
  delete CountyLevelUpTaskPlayer_reflection_;
  delete MonsterCity::default_instance_;
  delete MonsterCity_reflection_;
  delete MonsterCityLst::default_instance_;
  delete MonsterCityLst_reflection_;
  delete CountryCrossWarInfo::default_instance_;
  delete CountryCrossWarInfo_reflection_;
  delete CrossWarInfo::default_instance_;
  delete CrossWarInfo_reflection_;
  delete CountyInfo::default_instance_;
  delete CountyInfo_reflection_;
  delete Country_Levle_Up_Task_Rank::default_instance_;
  delete Country_Levle_Up_Task_Rank_reflection_;
  delete C2GS_Country_Info::default_instance_;
  delete C2GS_Country_Info_reflection_;
  delete GS2C_Country_Info::default_instance_;
  delete GS2C_Country_Info_reflection_;
  delete Struct_Country_Task_Base::default_instance_;
  delete Struct_Country_Task_Base_reflection_;
  delete Struct_Country_Task_City::default_instance_;
  delete Struct_Country_Task_City_reflection_;
  delete GS2C_Country_Task_Info::default_instance_;
  delete GS2C_Country_Task_Info_reflection_;
  delete GS2C_Country_Task_Player::default_instance_;
  delete GS2C_Country_Task_Player_reflection_;
  delete C2GS_Country_Task_Reward::default_instance_;
  delete C2GS_Country_Task_Reward_reflection_;
  delete GS2C_Country_Task_Reward_Ret::default_instance_;
  delete GS2C_Country_Task_Reward_Ret_reflection_;
  delete Country_Task_Result::default_instance_;
  delete Country_Task_Result_reflection_;
  delete GS2C_Country_Task_End::default_instance_;
  delete GS2C_Country_Task_End_reflection_;
  delete Struct_Country_Pk_Player_mirror::default_instance_;
  delete Struct_Country_Pk_Player_mirror_reflection_;
  delete Struct_Country_Pk_History::default_instance_;
  delete Struct_Country_Pk_History_reflection_;
  delete Struct_Country_Pk_Info::default_instance_;
  delete Struct_Country_Pk_Info_reflection_;
  delete C2GS_Country_Task_Pk_Challenge::default_instance_;
  delete C2GS_Country_Task_Pk_Challenge_reflection_;
  delete GS2C_Monster_City_All_Info::default_instance_;
  delete GS2C_Monster_City_All_Info_reflection_;
  delete C2GS_Monster_City_Donate::default_instance_;
  delete C2GS_Monster_City_Donate_reflection_;
  delete GS2C_Monster_City_Donate::default_instance_;
  delete GS2C_Monster_City_Donate_reflection_;
  delete C2GS_Monster_City_Start_Invade::default_instance_;
  delete C2GS_Monster_City_Start_Invade_reflection_;
  delete GS2C_Monster_City_Invade_Rsp::default_instance_;
  delete GS2C_Monster_City_Invade_Rsp_reflection_;
  delete GS2C_Country_Task_Insvest::default_instance_;
  delete GS2C_Country_Task_Insvest_reflection_;
  delete GS2C_Country_Invest_Player::default_instance_;
  delete GS2C_Country_Invest_Player_reflection_;
  delete C2GS_Country_Invest_Donate::default_instance_;
  delete C2GS_Country_Invest_Donate_reflection_;
  delete GS2C_Country_Invest_Donate_Ret::default_instance_;
  delete GS2C_Country_Invest_Donate_Ret_reflection_;
  delete C2GS_Country_Invest_Take_Reward::default_instance_;
  delete C2GS_Country_Invest_Take_Reward_reflection_;
  delete GS2C_Country_Invest_Take_Reward::default_instance_;
  delete GS2C_Country_Invest_Take_Reward_reflection_;
  delete GS2C_Country_Invest_Clear_CD_Ret::default_instance_;
  delete GS2C_Country_Invest_Clear_CD_Ret_reflection_;
  delete GS2C_Country_Task_Occupy::default_instance_;
  delete GS2C_Country_Task_Occupy_reflection_;
  delete GS2C_Country_Occupy_Player::default_instance_;
  delete GS2C_Country_Occupy_Player_reflection_;
  delete C2GS_Country_Occupy_Take_Reward::default_instance_;
  delete C2GS_Country_Occupy_Take_Reward_reflection_;
  delete GS2C_Country_Occupy_Take_Reward::default_instance_;
  delete GS2C_Country_Occupy_Take_Reward_reflection_;
  delete OneTaskInfo::default_instance_;
  delete OneTaskInfo_reflection_;
  delete GS2C_PersonalTask_Info::default_instance_;
  delete GS2C_PersonalTask_Info_reflection_;
  delete C2GS_PersonalTask_One::default_instance_;
  delete C2GS_PersonalTask_One_reflection_;
  delete C2GS_PersonalTask_Take_Award::default_instance_;
  delete C2GS_PersonalTask_Take_Award_reflection_;
  delete GS2C_PersonalTask_Take_Award::default_instance_;
  delete GS2C_PersonalTask_Take_Award_reflection_;
  delete GS2C_Notice_Country_NPC_NextTime::default_instance_;
  delete GS2C_Notice_Country_NPC_NextTime_reflection_;
  delete GS2C_Country_Task_DefenceBorderland::default_instance_;
  delete GS2C_Country_Task_DefenceBorderland_reflection_;
  delete GS2C_Country_DefenceBorderland_Player::default_instance_;
  delete GS2C_Country_DefenceBorderland_Player_reflection_;
  delete C2GS_Country_DefenceBorderland_Take_Reward::default_instance_;
  delete C2GS_Country_DefenceBorderland_Take_Reward_reflection_;
  delete GS2C_Country_DefenceBorderland_Take_Reward::default_instance_;
  delete GS2C_Country_DefenceBorderland_Take_Reward_reflection_;
}

void protobuf_AddDesc_Country_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_CommomDef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rCountry.proto\022\002pb\032\017CommomDef.proto\"z\n\027"
    "CountyLevelUpTaskPlayer\022\020\n\010playerId\030\001 \002("
    "\004\022\017\n\007country\030\002 \002(\r\022\014\n\004rank\030\003 \002(\r\022\026\n\016stat"
    "istic_kill\030\004 \002(\r\022\026\n\016is_take_reward\030\005 \002(\010"
    "\"\177\n\013MonsterCity\022\026\n\016donation_money\030\001 \002(\r\022"
    "\022\n\nfriend_val\030\002 \002(\r\022\024\n\014moster_level\030\003 \002("
    "\r\022\022\n\ninvade_cnt\030\004 \002(\r\022\032\n\022today_invade_co"
    "unt\030\005 \002(\r\"/\n\016MonsterCityLst\022\035\n\004list\030\001 \003("
    "\0132\017.pb.MonsterCity\"K\n\023CountryCrossWarInf"
    "o\022\n\n\002id\030\001 \002(\r\022(\n\016cross_war_info\030\002 \002(\0132\020."
    "pb.CrossWarInfo\"\320\002\n\014CrossWarInfo\022\031\n\021is_o"
    "pen_cross_war\030\001 \001(\010\022\030\n\020is_open_anabasis\030"
    "\002 \001(\010\022$\n\013cross_state\030\003 \001(\0162\017.pb.CROSS_ST"
    "ATE\022\'\n\016anabasis_state\030\004 \001(\0162\017.pb.CROSS_S"
    "TATE\022\034\n\024cross_war_start_time\030\005 \001(\004\022\027\n\017cr"
    "oss_server_ip\030\006 \001(\t\022\031\n\021cross_server_port"
    "\030\007 \001(\t\022\023\n\013is_anabasis\030\010 \001(\010\022\033\n\023anabasis_"
    "start_time\030\t \001(\004\022\032\n\022anabasis_server_ip\030\n"
    " \001(\t\022\034\n\024anabasis_server_port\030\013 \001(\t\"\377\003\n\nC"
    "ountyInfo\022\n\n\002id\030\001 \002(\r\022\013\n\003exp\030\002 \002(\r\022\r\n\005le"
    "vel\030\003 \002(\r\022\024\n\014donate_times\030\004 \002(\r\022\031\n\021count"
    "ry_npc_level\030\005 \002(\r\022\027\n\017country_npc_exp\030\006 "
    "\002(\r\022\025\n\rhave_city_cnt\030\007 \001(\r\022\037\n\027open_level"
    "_up_task_time\030\010 \001(\004\022\035\n\025cur_level_do_task"
    "_cnt\030\t \001(\r\022\030\n\020kill_monster_num\030\n \001(\r\022\034\n\024"
    "is_monster_task_open\030\013 \001(\010\022\037\n\027is_monster"
    "_task_succeed\030\014 \001(\010\022(\n\016cross_war_info\030\r "
    "\001(\0132\020.pb.CrossWarInfo\022,\n\020monster_city_ls"
    "t\030\016 \001(\0132\022.pb.MonsterCityLst\022\032\n\022last_chec"
    "k_npc_exp\030\017 \001(\004\022\024\n\014npc_level_id\030\020 \001(\r\022\025\n"
    "\rtuntian_level\030\021 \001(\r\022\023\n\013tuntian_exp\030\022 \001("
    "\004\022\031\n\021Prosperity_Degree\030\023 \001(\r\"^\n\032Country_"
    "Levle_Up_Task_Rank\022\017\n\007country\030\001 \002(\r\022/\n\np"
    "layer_lst\030\002 \003(\0132\033.pb.CountyLevelUpTaskPl"
    "ayer\"\037\n\021C2GS_Country_Info\022\n\n\002id\030\001 \002(\r\"4\n"
    "\021GS2C_Country_Info\022\037\n\007country\030\001 \003(\0132\016.pb"
    ".CountyInfo\"\353\002\n\030Struct_Country_Task_Base"
    "\022\020\n\010is_begin\030\001 \002(\010\022\021\n\tcur_stage\030\002 \001(\r\022\034\n"
    "\024cur_stage_begin_time\030\003 \001(\004\022\030\n\020is_waitin"
    "g_state\030\004 \001(\010\022%\n\035cur_stage_begin_country"
    "_citys\030\005 \003(\r\022*\n\"cur_stage_now_country_oc"
    "cupy_citys\030\006 \003(\r\022\034\n\024cur_stage_target_num"
    "\030\007 \003(\r\022*\n\"cur_stage_now_country_invest_m"
    "oney\030\010 \003(\r\022\031\n\021is_country_failed\030\t \003(\010\022\025\n"
    "\rcountry_score\030\n \003(\r\022#\n\033cur_stage_fighti"
    "ng_city_num\030\013 \003(\r\"j\n\030Struct_Country_Task"
    "_City\022\017\n\007city_id\030\001 \002(\r\022\020\n\010end_time\030\002 \002(\004"
    "\022\023\n\013win_country\030\003 \001(\r\022\026\n\016origin_country\030"
    "\004 \001(\r\"\204\001\n\026GS2C_Country_Task_Info\022\022\n\nis_r"
    "unning\030\001 \001(\010\022*\n\004city\030\002 \003(\0132\034.pb.Struct_C"
    "ountry_Task_City\022*\n\004base\030\003 \001(\0132\034.pb.Stru"
    "ct_Country_Task_Base\"\370\001\n\030GS2C_Country_Ta"
    "sk_Player\022\014\n\004rank\030\001 \002(\r\022\022\n\nkill_count\030\002 "
    "\002(\r\022\026\n\016is_take_reward\030\003 \003(\010\022\025\n\rtask_end_"
    "rank\030\004 \003(\r\022&\n\013rank_reward\030\005 \003(\0132\021.pb.GS2"
    "C_LootList\022%\n\nwin_reward\030\006 \001(\0132\021.pb.GS2C"
    "_LootList\022\017\n\007cd_time\030\007 \001(\004\022+\n\007pk_info\030\010 "
    "\001(\0132\032.pb.Struct_Country_Pk_Info\",\n\030C2GS_"
    "Country_Task_Reward\022\020\n\010task_idx\030\001 \002(\r\"1\n"
    "\034GS2C_Country_Task_Reward_Ret\022\021\n\tisSucce"
    "ss\030\001 \002(\010\"7\n\023Country_Task_Result\022\014\n\004rank\030"
    "\001 \001(\r\022\022\n\nkill_count\030\002 \001(\r\"Q\n\025GS2C_Countr"
    "y_Task_End\022\017\n\007city_id\030\001 \002(\r\022\'\n\006result\030\002 "
    "\001(\0132\027.pb.Country_Task_Result\"r\n\037Struct_C"
    "ountry_Pk_Player_mirror\022\017\n\007head_id\030\001 \002(\r"
    "\022\014\n\004name\030\002 \002(\t\022\r\n\005level\030\003 \002(\r\022\020\n\010card_ti"
    "d\030\004 \003(\r\022\017\n\007card_lv\030\005 \003(\r\"t\n\031Struct_Count"
    "ry_Pk_History\022\022\n\nrival_name\030\001 \002(\t\022\024\n\014riv"
    "al_is_att\030\002 \002(\010\022\024\n\014rival_is_win\030\003 \002(\010\022\027\n"
    "\017my_score_change\030\004 \002(\r\"\255\002\n\026Struct_Countr"
    "y_Pk_Info\022\032\n\022recent_player_name\030\001 \003(\t\022\033\n"
    "\023recent_player_score\030\002 \003(\r\022\035\n\025recent_pla"
    "yer_country\030\003 \003(\r\022\025\n\rrank_no1_name\030\004 \002(\t"
    "\0228\n\013mirror_list\030\005 \003(\0132#.pb.Struct_Countr"
    "y_Pk_Player_mirror\0221\n\npk_history\030\006 \003(\0132\035"
    ".pb.Struct_Country_Pk_History\022\020\n\010is_pkin"
    "g\030\007 \002(\010\022\021\n\ttotal_win\030\010 \002(\r\022\022\n\ntotal_lose"
    "\030\t \002(\r\"-\n\036C2GS_Country_Task_Pk_Challenge"
    "\022\013\n\003idx\030\001 \002(\r\"U\n\032GS2C_Monster_City_All_I"
    "nfo\022$\n\010all_info\030\001 \001(\0132\022.pb.MonsterCityLs"
    "t\022\021\n\tCDEndTime\030\002 \001(\004\"3\n\030C2GS_Monster_Cit"
    "y_Donate\022\027\n\017dest_country_id\030\001 \002(\r\"j\n\030GS2"
    "C_Monster_City_Donate\022\034\n\006reward\030\001 \001(\0132\014."
    "pb.StReward\022\035\n\004info\030\002 \001(\0132\017.pb.MonsterCi"
    "ty\022\021\n\tCDEndTime\030\003 \001(\004\"9\n\036C2GS_Monster_Ci"
    "ty_Start_Invade\022\027\n\017dest_country_id\030\001 \002(\r"
    "\"J\n\034GS2C_Monster_City_Invade_Rsp\022\013\n\003ret\030"
    "\001 \001(\r\022\035\n\004info\030\002 \001(\0132\017.pb.MonsterCity\"\212\001\n"
    "\031GS2C_Country_Task_Insvest\022\020\n\010is_begin\030\001"
    " \002(\010\022\021\n\tcur_stage\030\002 \001(\r\022\034\n\024cur_stage_beg"
    "in_time\030\003 \001(\004\022*\n\"cur_stage_now_country_i"
    "nvest_money\030\004 \003(\r\"\367\001\n\032GS2C_Country_Inves"
    "t_Player\022\017\n\007stageID\030\001 \001(\r\022\016\n\006rankID\030\002 \001("
    "\r\022\021\n\tdonateNum\030\003 \001(\r\022\026\n\016is_take_reward\030\004"
    " \001(\010\022\027\n\017canTakeExReward\030\005 \001(\010\022\017\n\007cd_time"
    "\030\006 \001(\004\022&\n\013rank_reward\030\007 \001(\0132\021.pb.GS2C_Lo"
    "otList\022%\n\nwin_reward\030\010 \001(\0132\021.pb.GS2C_Loo"
    "tList\022\024\n\014total_donate\030\t \001(\r\"+\n\032C2GS_Coun"
    "try_Invest_Donate\022\r\n\005stage\030\001 \001(\r\"\340\001\n\036GS2"
    "C_Country_Invest_Donate_Ret\022\021\n\tisSuccess"
    "\030\001 \002(\010\022$\n\006errRet\030\002 \001(\0162\024.pb.Country_Task"
    "_Err\022\027\n\017my_invest_money\030\003 \001(\r\022\034\n\024country"
    "_invest_money\030\004 \001(\r\022\017\n\007cd_time\030\005 \001(\004\022\024\n\014"
    "total_donate\030\006 \001(\r\022\'\n\014successAward\030\007 \001(\013"
    "2\021.pb.GS2C_LootList\"0\n\037C2GS_Country_Inve"
    "st_Take_Reward\022\r\n\005stage\030\001 \001(\r\"Z\n\037GS2C_Co"
    "untry_Invest_Take_Reward\022\021\n\tisSuccess\030\001 "
    "\002(\010\022$\n\006errRet\030\002 \001(\0162\024.pb.Country_Task_Er"
    "r\"[\n GS2C_Country_Invest_Clear_CD_Ret\022\021\n"
    "\tisSuccess\030\001 \002(\010\022$\n\006errRet\030\002 \001(\0162\024.pb.Co"
    "untry_Task_Err\"\305\001\n\030GS2C_Country_Task_Occ"
    "upy\022\020\n\010is_begin\030\001 \002(\010\022\021\n\tcur_stage\030\002 \001(\r"
    "\022\034\n\024cur_stage_begin_time\030\003 \001(\004\022(\n cur_st"
    "age_now_country_have_citys\030\004 \003(\r\022\"\n\032cur_"
    "stage_begin_have_citys\030\005 \003(\r\022\030\n\020need_tot"
    "al_citys\030\006 \003(\r\"\313\001\n\032GS2C_Country_Occupy_P"
    "layer\022\017\n\007stageID\030\001 \001(\r\022\016\n\006rankID\030\002 \001(\r\022\014"
    "\n\004rank\030\003 \001(\r\022\026\n\016is_take_reward\030\004 \001(\010\022\027\n\017"
    "canTakeExReward\030\005 \001(\010\022&\n\013rank_reward\030\006 \001"
    "(\0132\021.pb.GS2C_LootList\022%\n\nwin_reward\030\007 \001("
    "\0132\021.pb.GS2C_LootList\"0\n\037C2GS_Country_Occ"
    "upy_Take_Reward\022\r\n\005stage\030\001 \001(\r\"Z\n\037GS2C_C"
    "ountry_Occupy_Take_Reward\022\021\n\tisSuccess\030\001"
    " \002(\010\022$\n\006errRet\030\002 \001(\0162\024.pb.Country_Task_E"
    "rr\"Z\n\013OneTaskInfo\022\017\n\007stageid\030\001 \001(\r\022\016\n\006ta"
    "skid\030\002 \001(\r\022\025\n\rcurCompletion\030\003 \001(\r\022\023\n\013isT"
    "akeAward\030\004 \001(\010\"\210\001\n\026GS2C_PersonalTask_Inf"
    "o\022\020\n\010is_begin\030\001 \001(\010\022\020\n\010curStage\030\002 \001(\r\022\023\n"
    "\013curSubStage\030\003 \001(\r\022\025\n\rtaskBeginTime\030\004 \001("
    "\004\022\036\n\005tasks\030\005 \003(\0132\017.pb.OneTaskInfo\"\'\n\025C2G"
    "S_PersonalTask_One\022\016\n\006taskid\030\001 \002(\r\".\n\034C2"
    "GS_PersonalTask_Take_Award\022\016\n\006taskid\030\001 \001"
    "(\r\"W\n\034GS2C_PersonalTask_Take_Award\022\021\n\tis"
    "Success\030\001 \002(\010\022$\n\006errRet\030\002 \001(\0162\024.pb.Count"
    "ry_Task_Err\"E\n GS2C_Notice_Country_NPC_N"
    "extTime\022\017\n\007npcType\030\001 \001(\r\022\020\n\010nextTime\030\002 \001"
    "(\004\"\327\001\n#GS2C_Country_Task_DefenceBorderla"
    "nd\022\020\n\010is_begin\030\001 \002(\010\022\021\n\tcur_stage\030\002 \001(\r\022"
    "\025\n\rcur_sub_stage\030\003 \001(\r\022\032\n\022cur_stage_end_"
    "time\030\004 \001(\004\022\036\n\026cur_sub_stage_end_time\030\005 \001"
    "(\004\022\031\n\021is_country_failed\030\006 \003(\010\022\035\n\025cityid_"
    "monster_attack\030\007 \003(\r\"\347\001\n%GS2C_Country_De"
    "fenceBorderland_Player\022\017\n\007stageID\030\001 \001(\r\022"
    "\016\n\006rankID\030\002 \001(\r\022\014\n\004rank\030\003 \001(\r\022\017\n\007killNum"
    "\030\004 \001(\r\022\026\n\016is_take_reward\030\005 \001(\010\022\027\n\017canTak"
    "eExReward\030\006 \001(\010\022&\n\013rank_reward\030\007 \001(\0132\021.p"
    "b.GS2C_LootList\022%\n\nwin_reward\030\010 \001(\0132\021.pb"
    ".GS2C_LootList\";\n*C2GS_Country_DefenceBo"
    "rderland_Take_Reward\022\r\n\005stage\030\001 \001(\r\"e\n*G"
    "S2C_Country_DefenceBorderland_Take_Rewar"
    "d\022\021\n\tisSuccess\030\001 \002(\010\022$\n\006errRet\030\002 \001(\0162\024.p"
    "b.Country_Task_Err*\217\001\n\013CROSS_STATE\022\016\n\nSt"
    "ate_Null\020\000\022\026\n\022State_Collect_Info\020\001\022\020\n\014St"
    "ate_Devide\020\002\022\021\n\rState_Prepare\020\003\022\021\n\rState"
    "_Preview\020\004\022\017\n\013State_Start\020\005\022\017\n\013State_Awa"
    "rd\020\006*\312\001\n\016E_MONSTER_CITY\022\025\n\021M_OPERATE_SUC"
    "CESS\020\001\022\"\n\036M_OPERATE_NO_TODAY_INVADE_TIME"
    "\020\002\022\035\n\031M_OPERATE_GOLD_NOT_ENOUGH\020\003\022\035\n\031M_O"
    "PERATE_ITEM_NOT_ENOUGH\020\004\022\034\n\030M_OPERATE_NO"
    "_INVADE_TIME\020\005\022!\n\035M_OPERATE_OFFICE_ID_NO"
    "T_MATCH\020\006*\221\002\n\020Country_Task_Err\022\013\n\007TaskEr"
    "r\020\001\022\022\n\016investUpperErr\020\002\022\027\n\023investStageNo"
    "tMatch\020\003\022\016\n\ninvestInCD\020\004\022\021\n\rinvestNoMone"
    "y\020\005\022\022\n\016rewardHasTaken\020\006\022\024\n\020stageNotInves"
    "ted\020\007\022\027\n\023OccupyStageNotMatch\020\010\022\024\n\020stageN"
    "otOccupied\020\t\022\014\n\010NoRecord\020\n\022\021\n\rStageNotMa"
    "tch\020\013\022\017\n\013TaskNotFind\020\014\022\025\n\021TaskIsNotFinis"
    "hed\020\r", 6685);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Country.proto", &protobuf_RegisterTypes);
  CountyLevelUpTaskPlayer::default_instance_ = new CountyLevelUpTaskPlayer();
  MonsterCity::default_instance_ = new MonsterCity();
  MonsterCityLst::default_instance_ = new MonsterCityLst();
  CountryCrossWarInfo::default_instance_ = new CountryCrossWarInfo();
  CrossWarInfo::default_instance_ = new CrossWarInfo();
  CountyInfo::default_instance_ = new CountyInfo();
  Country_Levle_Up_Task_Rank::default_instance_ = new Country_Levle_Up_Task_Rank();
  C2GS_Country_Info::default_instance_ = new C2GS_Country_Info();
  GS2C_Country_Info::default_instance_ = new GS2C_Country_Info();
  Struct_Country_Task_Base::default_instance_ = new Struct_Country_Task_Base();
  Struct_Country_Task_City::default_instance_ = new Struct_Country_Task_City();
  GS2C_Country_Task_Info::default_instance_ = new GS2C_Country_Task_Info();
  GS2C_Country_Task_Player::default_instance_ = new GS2C_Country_Task_Player();
  C2GS_Country_Task_Reward::default_instance_ = new C2GS_Country_Task_Reward();
  GS2C_Country_Task_Reward_Ret::default_instance_ = new GS2C_Country_Task_Reward_Ret();
  Country_Task_Result::default_instance_ = new Country_Task_Result();
  GS2C_Country_Task_End::default_instance_ = new GS2C_Country_Task_End();
  Struct_Country_Pk_Player_mirror::default_instance_ = new Struct_Country_Pk_Player_mirror();
  Struct_Country_Pk_History::default_instance_ = new Struct_Country_Pk_History();
  Struct_Country_Pk_Info::default_instance_ = new Struct_Country_Pk_Info();
  C2GS_Country_Task_Pk_Challenge::default_instance_ = new C2GS_Country_Task_Pk_Challenge();
  GS2C_Monster_City_All_Info::default_instance_ = new GS2C_Monster_City_All_Info();
  C2GS_Monster_City_Donate::default_instance_ = new C2GS_Monster_City_Donate();
  GS2C_Monster_City_Donate::default_instance_ = new GS2C_Monster_City_Donate();
  C2GS_Monster_City_Start_Invade::default_instance_ = new C2GS_Monster_City_Start_Invade();
  GS2C_Monster_City_Invade_Rsp::default_instance_ = new GS2C_Monster_City_Invade_Rsp();
  GS2C_Country_Task_Insvest::default_instance_ = new GS2C_Country_Task_Insvest();
  GS2C_Country_Invest_Player::default_instance_ = new GS2C_Country_Invest_Player();
  C2GS_Country_Invest_Donate::default_instance_ = new C2GS_Country_Invest_Donate();
  GS2C_Country_Invest_Donate_Ret::default_instance_ = new GS2C_Country_Invest_Donate_Ret();
  C2GS_Country_Invest_Take_Reward::default_instance_ = new C2GS_Country_Invest_Take_Reward();
  GS2C_Country_Invest_Take_Reward::default_instance_ = new GS2C_Country_Invest_Take_Reward();
  GS2C_Country_Invest_Clear_CD_Ret::default_instance_ = new GS2C_Country_Invest_Clear_CD_Ret();
  GS2C_Country_Task_Occupy::default_instance_ = new GS2C_Country_Task_Occupy();
  GS2C_Country_Occupy_Player::default_instance_ = new GS2C_Country_Occupy_Player();
  C2GS_Country_Occupy_Take_Reward::default_instance_ = new C2GS_Country_Occupy_Take_Reward();
  GS2C_Country_Occupy_Take_Reward::default_instance_ = new GS2C_Country_Occupy_Take_Reward();
  OneTaskInfo::default_instance_ = new OneTaskInfo();
  GS2C_PersonalTask_Info::default_instance_ = new GS2C_PersonalTask_Info();
  C2GS_PersonalTask_One::default_instance_ = new C2GS_PersonalTask_One();
  C2GS_PersonalTask_Take_Award::default_instance_ = new C2GS_PersonalTask_Take_Award();
  GS2C_PersonalTask_Take_Award::default_instance_ = new GS2C_PersonalTask_Take_Award();
  GS2C_Notice_Country_NPC_NextTime::default_instance_ = new GS2C_Notice_Country_NPC_NextTime();
  GS2C_Country_Task_DefenceBorderland::default_instance_ = new GS2C_Country_Task_DefenceBorderland();
  GS2C_Country_DefenceBorderland_Player::default_instance_ = new GS2C_Country_DefenceBorderland_Player();
  C2GS_Country_DefenceBorderland_Take_Reward::default_instance_ = new C2GS_Country_DefenceBorderland_Take_Reward();
  GS2C_Country_DefenceBorderland_Take_Reward::default_instance_ = new GS2C_Country_DefenceBorderland_Take_Reward();
  CountyLevelUpTaskPlayer::default_instance_->InitAsDefaultInstance();
  MonsterCity::default_instance_->InitAsDefaultInstance();
  MonsterCityLst::default_instance_->InitAsDefaultInstance();
  CountryCrossWarInfo::default_instance_->InitAsDefaultInstance();
  CrossWarInfo::default_instance_->InitAsDefaultInstance();
  CountyInfo::default_instance_->InitAsDefaultInstance();
  Country_Levle_Up_Task_Rank::default_instance_->InitAsDefaultInstance();
  C2GS_Country_Info::default_instance_->InitAsDefaultInstance();
  GS2C_Country_Info::default_instance_->InitAsDefaultInstance();
  Struct_Country_Task_Base::default_instance_->InitAsDefaultInstance();
  Struct_Country_Task_City::default_instance_->InitAsDefaultInstance();
  GS2C_Country_Task_Info::default_instance_->InitAsDefaultInstance();
  GS2C_Country_Task_Player::default_instance_->InitAsDefaultInstance();
  C2GS_Country_Task_Reward::default_instance_->InitAsDefaultInstance();
  GS2C_Country_Task_Reward_Ret::default_instance_->InitAsDefaultInstance();
  Country_Task_Result::default_instance_->InitAsDefaultInstance();
  GS2C_Country_Task_End::default_instance_->InitAsDefaultInstance();
  Struct_Country_Pk_Player_mirror::default_instance_->InitAsDefaultInstance();
  Struct_Country_Pk_History::default_instance_->InitAsDefaultInstance();
  Struct_Country_Pk_Info::default_instance_->InitAsDefaultInstance();
  C2GS_Country_Task_Pk_Challenge::default_instance_->InitAsDefaultInstance();
  GS2C_Monster_City_All_Info::default_instance_->InitAsDefaultInstance();
  C2GS_Monster_City_Donate::default_instance_->InitAsDefaultInstance();
  GS2C_Monster_City_Donate::default_instance_->InitAsDefaultInstance();
  C2GS_Monster_City_Start_Invade::default_instance_->InitAsDefaultInstance();
  GS2C_Monster_City_Invade_Rsp::default_instance_->InitAsDefaultInstance();
  GS2C_Country_Task_Insvest::default_instance_->InitAsDefaultInstance();
  GS2C_Country_Invest_Player::default_instance_->InitAsDefaultInstance();
  C2GS_Country_Invest_Donate::default_instance_->InitAsDefaultInstance();
  GS2C_Country_Invest_Donate_Ret::default_instance_->InitAsDefaultInstance();
  C2GS_Country_Invest_Take_Reward::default_instance_->InitAsDefaultInstance();
  GS2C_Country_Invest_Take_Reward::default_instance_->InitAsDefaultInstance();
  GS2C_Country_Invest_Clear_CD_Ret::default_instance_->InitAsDefaultInstance();
  GS2C_Country_Task_Occupy::default_instance_->InitAsDefaultInstance();
  GS2C_Country_Occupy_Player::default_instance_->InitAsDefaultInstance();
  C2GS_Country_Occupy_Take_Reward::default_instance_->InitAsDefaultInstance();
  GS2C_Country_Occupy_Take_Reward::default_instance_->InitAsDefaultInstance();
  OneTaskInfo::default_instance_->InitAsDefaultInstance();
  GS2C_PersonalTask_Info::default_instance_->InitAsDefaultInstance();
  C2GS_PersonalTask_One::default_instance_->InitAsDefaultInstance();
  C2GS_PersonalTask_Take_Award::default_instance_->InitAsDefaultInstance();
  GS2C_PersonalTask_Take_Award::default_instance_->InitAsDefaultInstance();
  GS2C_Notice_Country_NPC_NextTime::default_instance_->InitAsDefaultInstance();
  GS2C_Country_Task_DefenceBorderland::default_instance_->InitAsDefaultInstance();
  GS2C_Country_DefenceBorderland_Player::default_instance_->InitAsDefaultInstance();
  C2GS_Country_DefenceBorderland_Take_Reward::default_instance_->InitAsDefaultInstance();
  GS2C_Country_DefenceBorderland_Take_Reward::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Country_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Country_2eproto {
  StaticDescriptorInitializer_Country_2eproto() {
    protobuf_AddDesc_Country_2eproto();
  }
} static_descriptor_initializer_Country_2eproto_;
const ::google::protobuf::EnumDescriptor* CROSS_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CROSS_STATE_descriptor_;
}
bool CROSS_STATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* E_MONSTER_CITY_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MONSTER_CITY_descriptor_;
}
bool E_MONSTER_CITY_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Country_Task_Err_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Country_Task_Err_descriptor_;
}
bool Country_Task_Err_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CountyLevelUpTaskPlayer::kPlayerIdFieldNumber;
const int CountyLevelUpTaskPlayer::kCountryFieldNumber;
const int CountyLevelUpTaskPlayer::kRankFieldNumber;
const int CountyLevelUpTaskPlayer::kStatisticKillFieldNumber;
const int CountyLevelUpTaskPlayer::kIsTakeRewardFieldNumber;
#endif  // !_MSC_VER

CountyLevelUpTaskPlayer::CountyLevelUpTaskPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CountyLevelUpTaskPlayer::InitAsDefaultInstance() {
}

CountyLevelUpTaskPlayer::CountyLevelUpTaskPlayer(const CountyLevelUpTaskPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CountyLevelUpTaskPlayer::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  country_ = 0u;
  rank_ = 0u;
  statistic_kill_ = 0u;
  is_take_reward_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountyLevelUpTaskPlayer::~CountyLevelUpTaskPlayer() {
  SharedDtor();
}

void CountyLevelUpTaskPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CountyLevelUpTaskPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountyLevelUpTaskPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountyLevelUpTaskPlayer_descriptor_;
}

const CountyLevelUpTaskPlayer& CountyLevelUpTaskPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

CountyLevelUpTaskPlayer* CountyLevelUpTaskPlayer::default_instance_ = NULL;

CountyLevelUpTaskPlayer* CountyLevelUpTaskPlayer::New() const {
  return new CountyLevelUpTaskPlayer;
}

void CountyLevelUpTaskPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    country_ = 0u;
    rank_ = 0u;
    statistic_kill_ = 0u;
    is_take_reward_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountyLevelUpTaskPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_country;
        break;
      }

      // required uint32 country = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // required uint32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_statistic_kill;
        break;
      }

      // required uint32 statistic_kill = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_statistic_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &statistic_kill_)));
          set_has_statistic_kill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_take_reward;
        break;
      }

      // required bool is_take_reward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_take_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_take_reward_)));
          set_has_is_take_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CountyLevelUpTaskPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // required uint32 country = 2;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->country(), output);
  }

  // required uint32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }

  // required uint32 statistic_kill = 4;
  if (has_statistic_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->statistic_kill(), output);
  }

  // required bool is_take_reward = 5;
  if (has_is_take_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_take_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CountyLevelUpTaskPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // required uint32 country = 2;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->country(), target);
  }

  // required uint32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }

  // required uint32 statistic_kill = 4;
  if (has_statistic_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->statistic_kill(), target);
  }

  // required bool is_take_reward = 5;
  if (has_is_take_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_take_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CountyLevelUpTaskPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // required uint32 country = 2;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country());
    }

    // required uint32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // required uint32 statistic_kill = 4;
    if (has_statistic_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->statistic_kill());
    }

    // required bool is_take_reward = 5;
    if (has_is_take_reward()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountyLevelUpTaskPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountyLevelUpTaskPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountyLevelUpTaskPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountyLevelUpTaskPlayer::MergeFrom(const CountyLevelUpTaskPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_statistic_kill()) {
      set_statistic_kill(from.statistic_kill());
    }
    if (from.has_is_take_reward()) {
      set_is_take_reward(from.is_take_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountyLevelUpTaskPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountyLevelUpTaskPlayer::CopyFrom(const CountyLevelUpTaskPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountyLevelUpTaskPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CountyLevelUpTaskPlayer::Swap(CountyLevelUpTaskPlayer* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(country_, other->country_);
    std::swap(rank_, other->rank_);
    std::swap(statistic_kill_, other->statistic_kill_);
    std::swap(is_take_reward_, other->is_take_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountyLevelUpTaskPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountyLevelUpTaskPlayer_descriptor_;
  metadata.reflection = CountyLevelUpTaskPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonsterCity::kDonationMoneyFieldNumber;
const int MonsterCity::kFriendValFieldNumber;
const int MonsterCity::kMosterLevelFieldNumber;
const int MonsterCity::kInvadeCntFieldNumber;
const int MonsterCity::kTodayInvadeCountFieldNumber;
#endif  // !_MSC_VER

MonsterCity::MonsterCity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonsterCity::InitAsDefaultInstance() {
}

MonsterCity::MonsterCity(const MonsterCity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonsterCity::SharedCtor() {
  _cached_size_ = 0;
  donation_money_ = 0u;
  friend_val_ = 0u;
  moster_level_ = 0u;
  invade_cnt_ = 0u;
  today_invade_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterCity::~MonsterCity() {
  SharedDtor();
}

void MonsterCity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MonsterCity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonsterCity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterCity_descriptor_;
}

const MonsterCity& MonsterCity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

MonsterCity* MonsterCity::default_instance_ = NULL;

MonsterCity* MonsterCity::New() const {
  return new MonsterCity;
}

void MonsterCity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    donation_money_ = 0u;
    friend_val_ = 0u;
    moster_level_ = 0u;
    invade_cnt_ = 0u;
    today_invade_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonsterCity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 donation_money = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donation_money_)));
          set_has_donation_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_friend_val;
        break;
      }

      // required uint32 friend_val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend_val_)));
          set_has_friend_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_moster_level;
        break;
      }

      // required uint32 moster_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moster_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moster_level_)));
          set_has_moster_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_invade_cnt;
        break;
      }

      // required uint32 invade_cnt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invade_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invade_cnt_)));
          set_has_invade_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_today_invade_count;
        break;
      }

      // required uint32 today_invade_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_invade_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_invade_count_)));
          set_has_today_invade_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonsterCity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 donation_money = 1;
  if (has_donation_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->donation_money(), output);
  }

  // required uint32 friend_val = 2;
  if (has_friend_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->friend_val(), output);
  }

  // required uint32 moster_level = 3;
  if (has_moster_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->moster_level(), output);
  }

  // required uint32 invade_cnt = 4;
  if (has_invade_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->invade_cnt(), output);
  }

  // required uint32 today_invade_count = 5;
  if (has_today_invade_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->today_invade_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonsterCity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 donation_money = 1;
  if (has_donation_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->donation_money(), target);
  }

  // required uint32 friend_val = 2;
  if (has_friend_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->friend_val(), target);
  }

  // required uint32 moster_level = 3;
  if (has_moster_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->moster_level(), target);
  }

  // required uint32 invade_cnt = 4;
  if (has_invade_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->invade_cnt(), target);
  }

  // required uint32 today_invade_count = 5;
  if (has_today_invade_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->today_invade_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonsterCity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 donation_money = 1;
    if (has_donation_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donation_money());
    }

    // required uint32 friend_val = 2;
    if (has_friend_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friend_val());
    }

    // required uint32 moster_level = 3;
    if (has_moster_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moster_level());
    }

    // required uint32 invade_cnt = 4;
    if (has_invade_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invade_cnt());
    }

    // required uint32 today_invade_count = 5;
    if (has_today_invade_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_invade_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterCity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterCity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterCity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonsterCity::MergeFrom(const MonsterCity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_donation_money()) {
      set_donation_money(from.donation_money());
    }
    if (from.has_friend_val()) {
      set_friend_val(from.friend_val());
    }
    if (from.has_moster_level()) {
      set_moster_level(from.moster_level());
    }
    if (from.has_invade_cnt()) {
      set_invade_cnt(from.invade_cnt());
    }
    if (from.has_today_invade_count()) {
      set_today_invade_count(from.today_invade_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonsterCity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterCity::CopyFrom(const MonsterCity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterCity::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void MonsterCity::Swap(MonsterCity* other) {
  if (other != this) {
    std::swap(donation_money_, other->donation_money_);
    std::swap(friend_val_, other->friend_val_);
    std::swap(moster_level_, other->moster_level_);
    std::swap(invade_cnt_, other->invade_cnt_);
    std::swap(today_invade_count_, other->today_invade_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonsterCity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterCity_descriptor_;
  metadata.reflection = MonsterCity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonsterCityLst::kListFieldNumber;
#endif  // !_MSC_VER

MonsterCityLst::MonsterCityLst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonsterCityLst::InitAsDefaultInstance() {
}

MonsterCityLst::MonsterCityLst(const MonsterCityLst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonsterCityLst::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterCityLst::~MonsterCityLst() {
  SharedDtor();
}

void MonsterCityLst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MonsterCityLst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonsterCityLst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterCityLst_descriptor_;
}

const MonsterCityLst& MonsterCityLst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

MonsterCityLst* MonsterCityLst::default_instance_ = NULL;

MonsterCityLst* MonsterCityLst::New() const {
  return new MonsterCityLst;
}

void MonsterCityLst::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonsterCityLst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.MonsterCity list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonsterCityLst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.MonsterCity list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonsterCityLst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.MonsterCity list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonsterCityLst::ByteSize() const {
  int total_size = 0;

  // repeated .pb.MonsterCity list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterCityLst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterCityLst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterCityLst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonsterCityLst::MergeFrom(const MonsterCityLst& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonsterCityLst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterCityLst::CopyFrom(const MonsterCityLst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterCityLst::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void MonsterCityLst::Swap(MonsterCityLst* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonsterCityLst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterCityLst_descriptor_;
  metadata.reflection = MonsterCityLst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountryCrossWarInfo::kIdFieldNumber;
const int CountryCrossWarInfo::kCrossWarInfoFieldNumber;
#endif  // !_MSC_VER

CountryCrossWarInfo::CountryCrossWarInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CountryCrossWarInfo::InitAsDefaultInstance() {
  cross_war_info_ = const_cast< ::pb::CrossWarInfo*>(&::pb::CrossWarInfo::default_instance());
}

CountryCrossWarInfo::CountryCrossWarInfo(const CountryCrossWarInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CountryCrossWarInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  cross_war_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountryCrossWarInfo::~CountryCrossWarInfo() {
  SharedDtor();
}

void CountryCrossWarInfo::SharedDtor() {
  if (this != default_instance_) {
    delete cross_war_info_;
  }
}

void CountryCrossWarInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountryCrossWarInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryCrossWarInfo_descriptor_;
}

const CountryCrossWarInfo& CountryCrossWarInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

CountryCrossWarInfo* CountryCrossWarInfo::default_instance_ = NULL;

CountryCrossWarInfo* CountryCrossWarInfo::New() const {
  return new CountryCrossWarInfo;
}

void CountryCrossWarInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_cross_war_info()) {
      if (cross_war_info_ != NULL) cross_war_info_->::pb::CrossWarInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountryCrossWarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cross_war_info;
        break;
      }

      // required .pb.CrossWarInfo cross_war_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cross_war_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cross_war_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CountryCrossWarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .pb.CrossWarInfo cross_war_info = 2;
  if (has_cross_war_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cross_war_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CountryCrossWarInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .pb.CrossWarInfo cross_war_info = 2;
  if (has_cross_war_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cross_war_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CountryCrossWarInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required .pb.CrossWarInfo cross_war_info = 2;
    if (has_cross_war_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cross_war_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountryCrossWarInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountryCrossWarInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountryCrossWarInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountryCrossWarInfo::MergeFrom(const CountryCrossWarInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cross_war_info()) {
      mutable_cross_war_info()->::pb::CrossWarInfo::MergeFrom(from.cross_war_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountryCrossWarInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryCrossWarInfo::CopyFrom(const CountryCrossWarInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryCrossWarInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CountryCrossWarInfo::Swap(CountryCrossWarInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cross_war_info_, other->cross_war_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountryCrossWarInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountryCrossWarInfo_descriptor_;
  metadata.reflection = CountryCrossWarInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CrossWarInfo::kIsOpenCrossWarFieldNumber;
const int CrossWarInfo::kIsOpenAnabasisFieldNumber;
const int CrossWarInfo::kCrossStateFieldNumber;
const int CrossWarInfo::kAnabasisStateFieldNumber;
const int CrossWarInfo::kCrossWarStartTimeFieldNumber;
const int CrossWarInfo::kCrossServerIpFieldNumber;
const int CrossWarInfo::kCrossServerPortFieldNumber;
const int CrossWarInfo::kIsAnabasisFieldNumber;
const int CrossWarInfo::kAnabasisStartTimeFieldNumber;
const int CrossWarInfo::kAnabasisServerIpFieldNumber;
const int CrossWarInfo::kAnabasisServerPortFieldNumber;
#endif  // !_MSC_VER

CrossWarInfo::CrossWarInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CrossWarInfo::InitAsDefaultInstance() {
}

CrossWarInfo::CrossWarInfo(const CrossWarInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CrossWarInfo::SharedCtor() {
  _cached_size_ = 0;
  is_open_cross_war_ = false;
  is_open_anabasis_ = false;
  cross_state_ = 0;
  anabasis_state_ = 0;
  cross_war_start_time_ = GOOGLE_ULONGLONG(0);
  cross_server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cross_server_port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_anabasis_ = false;
  anabasis_start_time_ = GOOGLE_ULONGLONG(0);
  anabasis_server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  anabasis_server_port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrossWarInfo::~CrossWarInfo() {
  SharedDtor();
}

void CrossWarInfo::SharedDtor() {
  if (cross_server_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete cross_server_ip_;
  }
  if (cross_server_port_ != &::google::protobuf::internal::kEmptyString) {
    delete cross_server_port_;
  }
  if (anabasis_server_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete anabasis_server_ip_;
  }
  if (anabasis_server_port_ != &::google::protobuf::internal::kEmptyString) {
    delete anabasis_server_port_;
  }
  if (this != default_instance_) {
  }
}

void CrossWarInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrossWarInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrossWarInfo_descriptor_;
}

const CrossWarInfo& CrossWarInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

CrossWarInfo* CrossWarInfo::default_instance_ = NULL;

CrossWarInfo* CrossWarInfo::New() const {
  return new CrossWarInfo;
}

void CrossWarInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_open_cross_war_ = false;
    is_open_anabasis_ = false;
    cross_state_ = 0;
    anabasis_state_ = 0;
    cross_war_start_time_ = GOOGLE_ULONGLONG(0);
    if (has_cross_server_ip()) {
      if (cross_server_ip_ != &::google::protobuf::internal::kEmptyString) {
        cross_server_ip_->clear();
      }
    }
    if (has_cross_server_port()) {
      if (cross_server_port_ != &::google::protobuf::internal::kEmptyString) {
        cross_server_port_->clear();
      }
    }
    is_anabasis_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    anabasis_start_time_ = GOOGLE_ULONGLONG(0);
    if (has_anabasis_server_ip()) {
      if (anabasis_server_ip_ != &::google::protobuf::internal::kEmptyString) {
        anabasis_server_ip_->clear();
      }
    }
    if (has_anabasis_server_port()) {
      if (anabasis_server_port_ != &::google::protobuf::internal::kEmptyString) {
        anabasis_server_port_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrossWarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_open_cross_war = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_open_cross_war_)));
          set_has_is_open_cross_war();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_open_anabasis;
        break;
      }

      // optional bool is_open_anabasis = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_open_anabasis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_open_anabasis_)));
          set_has_is_open_anabasis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cross_state;
        break;
      }

      // optional .pb.CROSS_STATE cross_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cross_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::CROSS_STATE_IsValid(value)) {
            set_cross_state(static_cast< ::pb::CROSS_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_anabasis_state;
        break;
      }

      // optional .pb.CROSS_STATE anabasis_state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_anabasis_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::CROSS_STATE_IsValid(value)) {
            set_anabasis_state(static_cast< ::pb::CROSS_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cross_war_start_time;
        break;
      }

      // optional uint64 cross_war_start_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cross_war_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cross_war_start_time_)));
          set_has_cross_war_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cross_server_ip;
        break;
      }

      // optional string cross_server_ip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cross_server_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cross_server_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cross_server_ip().data(), this->cross_server_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_cross_server_port;
        break;
      }

      // optional string cross_server_port = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cross_server_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cross_server_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cross_server_port().data(), this->cross_server_port().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_is_anabasis;
        break;
      }

      // optional bool is_anabasis = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_anabasis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_anabasis_)));
          set_has_is_anabasis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_anabasis_start_time;
        break;
      }

      // optional uint64 anabasis_start_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_anabasis_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &anabasis_start_time_)));
          set_has_anabasis_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_anabasis_server_ip;
        break;
      }

      // optional string anabasis_server_ip = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_anabasis_server_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_anabasis_server_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->anabasis_server_ip().data(), this->anabasis_server_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_anabasis_server_port;
        break;
      }

      // optional string anabasis_server_port = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_anabasis_server_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_anabasis_server_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->anabasis_server_port().data(), this->anabasis_server_port().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CrossWarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_open_cross_war = 1;
  if (has_is_open_cross_war()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_open_cross_war(), output);
  }

  // optional bool is_open_anabasis = 2;
  if (has_is_open_anabasis()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_open_anabasis(), output);
  }

  // optional .pb.CROSS_STATE cross_state = 3;
  if (has_cross_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->cross_state(), output);
  }

  // optional .pb.CROSS_STATE anabasis_state = 4;
  if (has_anabasis_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->anabasis_state(), output);
  }

  // optional uint64 cross_war_start_time = 5;
  if (has_cross_war_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->cross_war_start_time(), output);
  }

  // optional string cross_server_ip = 6;
  if (has_cross_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cross_server_ip().data(), this->cross_server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->cross_server_ip(), output);
  }

  // optional string cross_server_port = 7;
  if (has_cross_server_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cross_server_port().data(), this->cross_server_port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->cross_server_port(), output);
  }

  // optional bool is_anabasis = 8;
  if (has_is_anabasis()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_anabasis(), output);
  }

  // optional uint64 anabasis_start_time = 9;
  if (has_anabasis_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->anabasis_start_time(), output);
  }

  // optional string anabasis_server_ip = 10;
  if (has_anabasis_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->anabasis_server_ip().data(), this->anabasis_server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->anabasis_server_ip(), output);
  }

  // optional string anabasis_server_port = 11;
  if (has_anabasis_server_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->anabasis_server_port().data(), this->anabasis_server_port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->anabasis_server_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CrossWarInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_open_cross_war = 1;
  if (has_is_open_cross_war()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_open_cross_war(), target);
  }

  // optional bool is_open_anabasis = 2;
  if (has_is_open_anabasis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_open_anabasis(), target);
  }

  // optional .pb.CROSS_STATE cross_state = 3;
  if (has_cross_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->cross_state(), target);
  }

  // optional .pb.CROSS_STATE anabasis_state = 4;
  if (has_anabasis_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->anabasis_state(), target);
  }

  // optional uint64 cross_war_start_time = 5;
  if (has_cross_war_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->cross_war_start_time(), target);
  }

  // optional string cross_server_ip = 6;
  if (has_cross_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cross_server_ip().data(), this->cross_server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->cross_server_ip(), target);
  }

  // optional string cross_server_port = 7;
  if (has_cross_server_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cross_server_port().data(), this->cross_server_port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->cross_server_port(), target);
  }

  // optional bool is_anabasis = 8;
  if (has_is_anabasis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_anabasis(), target);
  }

  // optional uint64 anabasis_start_time = 9;
  if (has_anabasis_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->anabasis_start_time(), target);
  }

  // optional string anabasis_server_ip = 10;
  if (has_anabasis_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->anabasis_server_ip().data(), this->anabasis_server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->anabasis_server_ip(), target);
  }

  // optional string anabasis_server_port = 11;
  if (has_anabasis_server_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->anabasis_server_port().data(), this->anabasis_server_port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->anabasis_server_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CrossWarInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_open_cross_war = 1;
    if (has_is_open_cross_war()) {
      total_size += 1 + 1;
    }

    // optional bool is_open_anabasis = 2;
    if (has_is_open_anabasis()) {
      total_size += 1 + 1;
    }

    // optional .pb.CROSS_STATE cross_state = 3;
    if (has_cross_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cross_state());
    }

    // optional .pb.CROSS_STATE anabasis_state = 4;
    if (has_anabasis_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->anabasis_state());
    }

    // optional uint64 cross_war_start_time = 5;
    if (has_cross_war_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cross_war_start_time());
    }

    // optional string cross_server_ip = 6;
    if (has_cross_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cross_server_ip());
    }

    // optional string cross_server_port = 7;
    if (has_cross_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cross_server_port());
    }

    // optional bool is_anabasis = 8;
    if (has_is_anabasis()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 anabasis_start_time = 9;
    if (has_anabasis_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->anabasis_start_time());
    }

    // optional string anabasis_server_ip = 10;
    if (has_anabasis_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->anabasis_server_ip());
    }

    // optional string anabasis_server_port = 11;
    if (has_anabasis_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->anabasis_server_port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrossWarInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrossWarInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrossWarInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrossWarInfo::MergeFrom(const CrossWarInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_open_cross_war()) {
      set_is_open_cross_war(from.is_open_cross_war());
    }
    if (from.has_is_open_anabasis()) {
      set_is_open_anabasis(from.is_open_anabasis());
    }
    if (from.has_cross_state()) {
      set_cross_state(from.cross_state());
    }
    if (from.has_anabasis_state()) {
      set_anabasis_state(from.anabasis_state());
    }
    if (from.has_cross_war_start_time()) {
      set_cross_war_start_time(from.cross_war_start_time());
    }
    if (from.has_cross_server_ip()) {
      set_cross_server_ip(from.cross_server_ip());
    }
    if (from.has_cross_server_port()) {
      set_cross_server_port(from.cross_server_port());
    }
    if (from.has_is_anabasis()) {
      set_is_anabasis(from.is_anabasis());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_anabasis_start_time()) {
      set_anabasis_start_time(from.anabasis_start_time());
    }
    if (from.has_anabasis_server_ip()) {
      set_anabasis_server_ip(from.anabasis_server_ip());
    }
    if (from.has_anabasis_server_port()) {
      set_anabasis_server_port(from.anabasis_server_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrossWarInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrossWarInfo::CopyFrom(const CrossWarInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrossWarInfo::IsInitialized() const {

  return true;
}

void CrossWarInfo::Swap(CrossWarInfo* other) {
  if (other != this) {
    std::swap(is_open_cross_war_, other->is_open_cross_war_);
    std::swap(is_open_anabasis_, other->is_open_anabasis_);
    std::swap(cross_state_, other->cross_state_);
    std::swap(anabasis_state_, other->anabasis_state_);
    std::swap(cross_war_start_time_, other->cross_war_start_time_);
    std::swap(cross_server_ip_, other->cross_server_ip_);
    std::swap(cross_server_port_, other->cross_server_port_);
    std::swap(is_anabasis_, other->is_anabasis_);
    std::swap(anabasis_start_time_, other->anabasis_start_time_);
    std::swap(anabasis_server_ip_, other->anabasis_server_ip_);
    std::swap(anabasis_server_port_, other->anabasis_server_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrossWarInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrossWarInfo_descriptor_;
  metadata.reflection = CrossWarInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountyInfo::kIdFieldNumber;
const int CountyInfo::kExpFieldNumber;
const int CountyInfo::kLevelFieldNumber;
const int CountyInfo::kDonateTimesFieldNumber;
const int CountyInfo::kCountryNpcLevelFieldNumber;
const int CountyInfo::kCountryNpcExpFieldNumber;
const int CountyInfo::kHaveCityCntFieldNumber;
const int CountyInfo::kOpenLevelUpTaskTimeFieldNumber;
const int CountyInfo::kCurLevelDoTaskCntFieldNumber;
const int CountyInfo::kKillMonsterNumFieldNumber;
const int CountyInfo::kIsMonsterTaskOpenFieldNumber;
const int CountyInfo::kIsMonsterTaskSucceedFieldNumber;
const int CountyInfo::kCrossWarInfoFieldNumber;
const int CountyInfo::kMonsterCityLstFieldNumber;
const int CountyInfo::kLastCheckNpcExpFieldNumber;
const int CountyInfo::kNpcLevelIdFieldNumber;
const int CountyInfo::kTuntianLevelFieldNumber;
const int CountyInfo::kTuntianExpFieldNumber;
const int CountyInfo::kProsperityDegreeFieldNumber;
#endif  // !_MSC_VER

CountyInfo::CountyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CountyInfo::InitAsDefaultInstance() {
  cross_war_info_ = const_cast< ::pb::CrossWarInfo*>(&::pb::CrossWarInfo::default_instance());
  monster_city_lst_ = const_cast< ::pb::MonsterCityLst*>(&::pb::MonsterCityLst::default_instance());
}

CountyInfo::CountyInfo(const CountyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CountyInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  exp_ = 0u;
  level_ = 0u;
  donate_times_ = 0u;
  country_npc_level_ = 0u;
  country_npc_exp_ = 0u;
  have_city_cnt_ = 0u;
  open_level_up_task_time_ = GOOGLE_ULONGLONG(0);
  cur_level_do_task_cnt_ = 0u;
  kill_monster_num_ = 0u;
  is_monster_task_open_ = false;
  is_monster_task_succeed_ = false;
  cross_war_info_ = NULL;
  monster_city_lst_ = NULL;
  last_check_npc_exp_ = GOOGLE_ULONGLONG(0);
  npc_level_id_ = 0u;
  tuntian_level_ = 0u;
  tuntian_exp_ = GOOGLE_ULONGLONG(0);
  prosperity_degree_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountyInfo::~CountyInfo() {
  SharedDtor();
}

void CountyInfo::SharedDtor() {
  if (this != default_instance_) {
    delete cross_war_info_;
    delete monster_city_lst_;
  }
}

void CountyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountyInfo_descriptor_;
}

const CountyInfo& CountyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

CountyInfo* CountyInfo::default_instance_ = NULL;

CountyInfo* CountyInfo::New() const {
  return new CountyInfo;
}

void CountyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    exp_ = 0u;
    level_ = 0u;
    donate_times_ = 0u;
    country_npc_level_ = 0u;
    country_npc_exp_ = 0u;
    have_city_cnt_ = 0u;
    open_level_up_task_time_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cur_level_do_task_cnt_ = 0u;
    kill_monster_num_ = 0u;
    is_monster_task_open_ = false;
    is_monster_task_succeed_ = false;
    if (has_cross_war_info()) {
      if (cross_war_info_ != NULL) cross_war_info_->::pb::CrossWarInfo::Clear();
    }
    if (has_monster_city_lst()) {
      if (monster_city_lst_ != NULL) monster_city_lst_->::pb::MonsterCityLst::Clear();
    }
    last_check_npc_exp_ = GOOGLE_ULONGLONG(0);
    npc_level_id_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    tuntian_level_ = 0u;
    tuntian_exp_ = GOOGLE_ULONGLONG(0);
    prosperity_degree_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // required uint32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_donate_times;
        break;
      }

      // required uint32 donate_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_donate_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donate_times_)));
          set_has_donate_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_country_npc_level;
        break;
      }

      // required uint32 country_npc_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country_npc_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_npc_level_)));
          set_has_country_npc_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_country_npc_exp;
        break;
      }

      // required uint32 country_npc_exp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country_npc_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_npc_exp_)));
          set_has_country_npc_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_have_city_cnt;
        break;
      }

      // optional uint32 have_city_cnt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_city_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &have_city_cnt_)));
          set_has_have_city_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_open_level_up_task_time;
        break;
      }

      // optional uint64 open_level_up_task_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_level_up_task_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &open_level_up_task_time_)));
          set_has_open_level_up_task_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cur_level_do_task_cnt;
        break;
      }

      // optional uint32 cur_level_do_task_cnt = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_level_do_task_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_level_do_task_cnt_)));
          set_has_cur_level_do_task_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_kill_monster_num;
        break;
      }

      // optional uint32 kill_monster_num = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_monster_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_monster_num_)));
          set_has_kill_monster_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_is_monster_task_open;
        break;
      }

      // optional bool is_monster_task_open = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_monster_task_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_monster_task_open_)));
          set_has_is_monster_task_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_is_monster_task_succeed;
        break;
      }

      // optional bool is_monster_task_succeed = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_monster_task_succeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_monster_task_succeed_)));
          set_has_is_monster_task_succeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_cross_war_info;
        break;
      }

      // optional .pb.CrossWarInfo cross_war_info = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cross_war_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cross_war_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_monster_city_lst;
        break;
      }

      // optional .pb.MonsterCityLst monster_city_lst = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monster_city_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monster_city_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_last_check_npc_exp;
        break;
      }

      // optional uint64 last_check_npc_exp = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_check_npc_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_check_npc_exp_)));
          set_has_last_check_npc_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_npc_level_id;
        break;
      }

      // optional uint32 npc_level_id = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_level_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npc_level_id_)));
          set_has_npc_level_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_tuntian_level;
        break;
      }

      // optional uint32 tuntian_level = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tuntian_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tuntian_level_)));
          set_has_tuntian_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_tuntian_exp;
        break;
      }

      // optional uint64 tuntian_exp = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tuntian_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tuntian_exp_)));
          set_has_tuntian_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_Prosperity_Degree;
        break;
      }

      // optional uint32 Prosperity_Degree = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Prosperity_Degree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prosperity_degree_)));
          set_has_prosperity_degree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CountyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exp(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // required uint32 donate_times = 4;
  if (has_donate_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->donate_times(), output);
  }

  // required uint32 country_npc_level = 5;
  if (has_country_npc_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->country_npc_level(), output);
  }

  // required uint32 country_npc_exp = 6;
  if (has_country_npc_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->country_npc_exp(), output);
  }

  // optional uint32 have_city_cnt = 7;
  if (has_have_city_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->have_city_cnt(), output);
  }

  // optional uint64 open_level_up_task_time = 8;
  if (has_open_level_up_task_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->open_level_up_task_time(), output);
  }

  // optional uint32 cur_level_do_task_cnt = 9;
  if (has_cur_level_do_task_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->cur_level_do_task_cnt(), output);
  }

  // optional uint32 kill_monster_num = 10;
  if (has_kill_monster_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->kill_monster_num(), output);
  }

  // optional bool is_monster_task_open = 11;
  if (has_is_monster_task_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_monster_task_open(), output);
  }

  // optional bool is_monster_task_succeed = 12;
  if (has_is_monster_task_succeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_monster_task_succeed(), output);
  }

  // optional .pb.CrossWarInfo cross_war_info = 13;
  if (has_cross_war_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->cross_war_info(), output);
  }

  // optional .pb.MonsterCityLst monster_city_lst = 14;
  if (has_monster_city_lst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->monster_city_lst(), output);
  }

  // optional uint64 last_check_npc_exp = 15;
  if (has_last_check_npc_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->last_check_npc_exp(), output);
  }

  // optional uint32 npc_level_id = 16;
  if (has_npc_level_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->npc_level_id(), output);
  }

  // optional uint32 tuntian_level = 17;
  if (has_tuntian_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->tuntian_level(), output);
  }

  // optional uint64 tuntian_exp = 18;
  if (has_tuntian_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->tuntian_exp(), output);
  }

  // optional uint32 Prosperity_Degree = 19;
  if (has_prosperity_degree()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->prosperity_degree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CountyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exp(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // required uint32 donate_times = 4;
  if (has_donate_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->donate_times(), target);
  }

  // required uint32 country_npc_level = 5;
  if (has_country_npc_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->country_npc_level(), target);
  }

  // required uint32 country_npc_exp = 6;
  if (has_country_npc_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->country_npc_exp(), target);
  }

  // optional uint32 have_city_cnt = 7;
  if (has_have_city_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->have_city_cnt(), target);
  }

  // optional uint64 open_level_up_task_time = 8;
  if (has_open_level_up_task_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->open_level_up_task_time(), target);
  }

  // optional uint32 cur_level_do_task_cnt = 9;
  if (has_cur_level_do_task_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->cur_level_do_task_cnt(), target);
  }

  // optional uint32 kill_monster_num = 10;
  if (has_kill_monster_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->kill_monster_num(), target);
  }

  // optional bool is_monster_task_open = 11;
  if (has_is_monster_task_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_monster_task_open(), target);
  }

  // optional bool is_monster_task_succeed = 12;
  if (has_is_monster_task_succeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_monster_task_succeed(), target);
  }

  // optional .pb.CrossWarInfo cross_war_info = 13;
  if (has_cross_war_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->cross_war_info(), target);
  }

  // optional .pb.MonsterCityLst monster_city_lst = 14;
  if (has_monster_city_lst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->monster_city_lst(), target);
  }

  // optional uint64 last_check_npc_exp = 15;
  if (has_last_check_npc_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->last_check_npc_exp(), target);
  }

  // optional uint32 npc_level_id = 16;
  if (has_npc_level_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->npc_level_id(), target);
  }

  // optional uint32 tuntian_level = 17;
  if (has_tuntian_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->tuntian_level(), target);
  }

  // optional uint64 tuntian_exp = 18;
  if (has_tuntian_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->tuntian_exp(), target);
  }

  // optional uint32 Prosperity_Degree = 19;
  if (has_prosperity_degree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->prosperity_degree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CountyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 donate_times = 4;
    if (has_donate_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donate_times());
    }

    // required uint32 country_npc_level = 5;
    if (has_country_npc_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_npc_level());
    }

    // required uint32 country_npc_exp = 6;
    if (has_country_npc_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_npc_exp());
    }

    // optional uint32 have_city_cnt = 7;
    if (has_have_city_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->have_city_cnt());
    }

    // optional uint64 open_level_up_task_time = 8;
    if (has_open_level_up_task_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->open_level_up_task_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 cur_level_do_task_cnt = 9;
    if (has_cur_level_do_task_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_level_do_task_cnt());
    }

    // optional uint32 kill_monster_num = 10;
    if (has_kill_monster_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill_monster_num());
    }

    // optional bool is_monster_task_open = 11;
    if (has_is_monster_task_open()) {
      total_size += 1 + 1;
    }

    // optional bool is_monster_task_succeed = 12;
    if (has_is_monster_task_succeed()) {
      total_size += 1 + 1;
    }

    // optional .pb.CrossWarInfo cross_war_info = 13;
    if (has_cross_war_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cross_war_info());
    }

    // optional .pb.MonsterCityLst monster_city_lst = 14;
    if (has_monster_city_lst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->monster_city_lst());
    }

    // optional uint64 last_check_npc_exp = 15;
    if (has_last_check_npc_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_check_npc_exp());
    }

    // optional uint32 npc_level_id = 16;
    if (has_npc_level_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npc_level_id());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 tuntian_level = 17;
    if (has_tuntian_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tuntian_level());
    }

    // optional uint64 tuntian_exp = 18;
    if (has_tuntian_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tuntian_exp());
    }

    // optional uint32 Prosperity_Degree = 19;
    if (has_prosperity_degree()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prosperity_degree());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountyInfo::MergeFrom(const CountyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_donate_times()) {
      set_donate_times(from.donate_times());
    }
    if (from.has_country_npc_level()) {
      set_country_npc_level(from.country_npc_level());
    }
    if (from.has_country_npc_exp()) {
      set_country_npc_exp(from.country_npc_exp());
    }
    if (from.has_have_city_cnt()) {
      set_have_city_cnt(from.have_city_cnt());
    }
    if (from.has_open_level_up_task_time()) {
      set_open_level_up_task_time(from.open_level_up_task_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cur_level_do_task_cnt()) {
      set_cur_level_do_task_cnt(from.cur_level_do_task_cnt());
    }
    if (from.has_kill_monster_num()) {
      set_kill_monster_num(from.kill_monster_num());
    }
    if (from.has_is_monster_task_open()) {
      set_is_monster_task_open(from.is_monster_task_open());
    }
    if (from.has_is_monster_task_succeed()) {
      set_is_monster_task_succeed(from.is_monster_task_succeed());
    }
    if (from.has_cross_war_info()) {
      mutable_cross_war_info()->::pb::CrossWarInfo::MergeFrom(from.cross_war_info());
    }
    if (from.has_monster_city_lst()) {
      mutable_monster_city_lst()->::pb::MonsterCityLst::MergeFrom(from.monster_city_lst());
    }
    if (from.has_last_check_npc_exp()) {
      set_last_check_npc_exp(from.last_check_npc_exp());
    }
    if (from.has_npc_level_id()) {
      set_npc_level_id(from.npc_level_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tuntian_level()) {
      set_tuntian_level(from.tuntian_level());
    }
    if (from.has_tuntian_exp()) {
      set_tuntian_exp(from.tuntian_exp());
    }
    if (from.has_prosperity_degree()) {
      set_prosperity_degree(from.prosperity_degree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountyInfo::CopyFrom(const CountyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_monster_city_lst()) {
    if (!this->monster_city_lst().IsInitialized()) return false;
  }
  return true;
}

void CountyInfo::Swap(CountyInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    std::swap(donate_times_, other->donate_times_);
    std::swap(country_npc_level_, other->country_npc_level_);
    std::swap(country_npc_exp_, other->country_npc_exp_);
    std::swap(have_city_cnt_, other->have_city_cnt_);
    std::swap(open_level_up_task_time_, other->open_level_up_task_time_);
    std::swap(cur_level_do_task_cnt_, other->cur_level_do_task_cnt_);
    std::swap(kill_monster_num_, other->kill_monster_num_);
    std::swap(is_monster_task_open_, other->is_monster_task_open_);
    std::swap(is_monster_task_succeed_, other->is_monster_task_succeed_);
    std::swap(cross_war_info_, other->cross_war_info_);
    std::swap(monster_city_lst_, other->monster_city_lst_);
    std::swap(last_check_npc_exp_, other->last_check_npc_exp_);
    std::swap(npc_level_id_, other->npc_level_id_);
    std::swap(tuntian_level_, other->tuntian_level_);
    std::swap(tuntian_exp_, other->tuntian_exp_);
    std::swap(prosperity_degree_, other->prosperity_degree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountyInfo_descriptor_;
  metadata.reflection = CountyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Country_Levle_Up_Task_Rank::kCountryFieldNumber;
const int Country_Levle_Up_Task_Rank::kPlayerLstFieldNumber;
#endif  // !_MSC_VER

Country_Levle_Up_Task_Rank::Country_Levle_Up_Task_Rank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Country_Levle_Up_Task_Rank::InitAsDefaultInstance() {
}

Country_Levle_Up_Task_Rank::Country_Levle_Up_Task_Rank(const Country_Levle_Up_Task_Rank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Country_Levle_Up_Task_Rank::SharedCtor() {
  _cached_size_ = 0;
  country_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Country_Levle_Up_Task_Rank::~Country_Levle_Up_Task_Rank() {
  SharedDtor();
}

void Country_Levle_Up_Task_Rank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Country_Levle_Up_Task_Rank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Country_Levle_Up_Task_Rank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Country_Levle_Up_Task_Rank_descriptor_;
}

const Country_Levle_Up_Task_Rank& Country_Levle_Up_Task_Rank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

Country_Levle_Up_Task_Rank* Country_Levle_Up_Task_Rank::default_instance_ = NULL;

Country_Levle_Up_Task_Rank* Country_Levle_Up_Task_Rank::New() const {
  return new Country_Levle_Up_Task_Rank;
}

void Country_Levle_Up_Task_Rank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    country_ = 0u;
  }
  player_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Country_Levle_Up_Task_Rank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 country = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_lst;
        break;
      }

      // repeated .pb.CountyLevelUpTaskPlayer player_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Country_Levle_Up_Task_Rank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 country = 1;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->country(), output);
  }

  // repeated .pb.CountyLevelUpTaskPlayer player_lst = 2;
  for (int i = 0; i < this->player_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Country_Levle_Up_Task_Rank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 country = 1;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->country(), target);
  }

  // repeated .pb.CountyLevelUpTaskPlayer player_lst = 2;
  for (int i = 0; i < this->player_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Country_Levle_Up_Task_Rank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 country = 1;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country());
    }

  }
  // repeated .pb.CountyLevelUpTaskPlayer player_lst = 2;
  total_size += 1 * this->player_lst_size();
  for (int i = 0; i < this->player_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Country_Levle_Up_Task_Rank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Country_Levle_Up_Task_Rank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Country_Levle_Up_Task_Rank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Country_Levle_Up_Task_Rank::MergeFrom(const Country_Levle_Up_Task_Rank& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_lst_.MergeFrom(from.player_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country()) {
      set_country(from.country());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Country_Levle_Up_Task_Rank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Country_Levle_Up_Task_Rank::CopyFrom(const Country_Levle_Up_Task_Rank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Country_Levle_Up_Task_Rank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < player_lst_size(); i++) {
    if (!this->player_lst(i).IsInitialized()) return false;
  }
  return true;
}

void Country_Levle_Up_Task_Rank::Swap(Country_Levle_Up_Task_Rank* other) {
  if (other != this) {
    std::swap(country_, other->country_);
    player_lst_.Swap(&other->player_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Country_Levle_Up_Task_Rank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Country_Levle_Up_Task_Rank_descriptor_;
  metadata.reflection = Country_Levle_Up_Task_Rank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Country_Info::kIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Country_Info::C2GS_Country_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Country_Info::InitAsDefaultInstance() {
}

C2GS_Country_Info::C2GS_Country_Info(const C2GS_Country_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Country_Info::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Country_Info::~C2GS_Country_Info() {
  SharedDtor();
}

void C2GS_Country_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Country_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Country_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Country_Info_descriptor_;
}

const C2GS_Country_Info& C2GS_Country_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

C2GS_Country_Info* C2GS_Country_Info::default_instance_ = NULL;

C2GS_Country_Info* C2GS_Country_Info::New() const {
  return new C2GS_Country_Info;
}

void C2GS_Country_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Country_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Country_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Country_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Country_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Country_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Country_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Country_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Country_Info::MergeFrom(const C2GS_Country_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Country_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Country_Info::CopyFrom(const C2GS_Country_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Country_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Country_Info::Swap(C2GS_Country_Info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Country_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Country_Info_descriptor_;
  metadata.reflection = C2GS_Country_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Country_Info::kCountryFieldNumber;
#endif  // !_MSC_VER

GS2C_Country_Info::GS2C_Country_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Country_Info::InitAsDefaultInstance() {
}

GS2C_Country_Info::GS2C_Country_Info(const GS2C_Country_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Country_Info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Country_Info::~GS2C_Country_Info() {
  SharedDtor();
}

void GS2C_Country_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Country_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Country_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Country_Info_descriptor_;
}

const GS2C_Country_Info& GS2C_Country_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

GS2C_Country_Info* GS2C_Country_Info::default_instance_ = NULL;

GS2C_Country_Info* GS2C_Country_Info::New() const {
  return new GS2C_Country_Info;
}

void GS2C_Country_Info::Clear() {
  country_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Country_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.CountyInfo country = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_country()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_country;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Country_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.CountyInfo country = 1;
  for (int i = 0; i < this->country_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->country(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Country_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.CountyInfo country = 1;
  for (int i = 0; i < this->country_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->country(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Country_Info::ByteSize() const {
  int total_size = 0;

  // repeated .pb.CountyInfo country = 1;
  total_size += 1 * this->country_size();
  for (int i = 0; i < this->country_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->country(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Country_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Country_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Country_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Country_Info::MergeFrom(const GS2C_Country_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  country_.MergeFrom(from.country_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Country_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Country_Info::CopyFrom(const GS2C_Country_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Country_Info::IsInitialized() const {

  for (int i = 0; i < country_size(); i++) {
    if (!this->country(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Country_Info::Swap(GS2C_Country_Info* other) {
  if (other != this) {
    country_.Swap(&other->country_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Country_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Country_Info_descriptor_;
  metadata.reflection = GS2C_Country_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Struct_Country_Task_Base::kIsBeginFieldNumber;
const int Struct_Country_Task_Base::kCurStageFieldNumber;
const int Struct_Country_Task_Base::kCurStageBeginTimeFieldNumber;
const int Struct_Country_Task_Base::kIsWaitingStateFieldNumber;
const int Struct_Country_Task_Base::kCurStageBeginCountryCitysFieldNumber;
const int Struct_Country_Task_Base::kCurStageNowCountryOccupyCitysFieldNumber;
const int Struct_Country_Task_Base::kCurStageTargetNumFieldNumber;
const int Struct_Country_Task_Base::kCurStageNowCountryInvestMoneyFieldNumber;
const int Struct_Country_Task_Base::kIsCountryFailedFieldNumber;
const int Struct_Country_Task_Base::kCountryScoreFieldNumber;
const int Struct_Country_Task_Base::kCurStageFightingCityNumFieldNumber;
#endif  // !_MSC_VER

Struct_Country_Task_Base::Struct_Country_Task_Base()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Struct_Country_Task_Base::InitAsDefaultInstance() {
}

Struct_Country_Task_Base::Struct_Country_Task_Base(const Struct_Country_Task_Base& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Struct_Country_Task_Base::SharedCtor() {
  _cached_size_ = 0;
  is_begin_ = false;
  cur_stage_ = 0u;
  cur_stage_begin_time_ = GOOGLE_ULONGLONG(0);
  is_waiting_state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Struct_Country_Task_Base::~Struct_Country_Task_Base() {
  SharedDtor();
}

void Struct_Country_Task_Base::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Struct_Country_Task_Base::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Struct_Country_Task_Base::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Struct_Country_Task_Base_descriptor_;
}

const Struct_Country_Task_Base& Struct_Country_Task_Base::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

Struct_Country_Task_Base* Struct_Country_Task_Base::default_instance_ = NULL;

Struct_Country_Task_Base* Struct_Country_Task_Base::New() const {
  return new Struct_Country_Task_Base;
}

void Struct_Country_Task_Base::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_begin_ = false;
    cur_stage_ = 0u;
    cur_stage_begin_time_ = GOOGLE_ULONGLONG(0);
    is_waiting_state_ = false;
  }
  cur_stage_begin_country_citys_.Clear();
  cur_stage_now_country_occupy_citys_.Clear();
  cur_stage_target_num_.Clear();
  cur_stage_now_country_invest_money_.Clear();
  is_country_failed_.Clear();
  country_score_.Clear();
  cur_stage_fighting_city_num_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Struct_Country_Task_Base::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_begin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_begin_)));
          set_has_is_begin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_stage;
        break;
      }

      // optional uint32 cur_stage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_stage_)));
          set_has_cur_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_stage_begin_time;
        break;
      }

      // optional uint64 cur_stage_begin_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_stage_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_stage_begin_time_)));
          set_has_cur_stage_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_waiting_state;
        break;
      }

      // optional bool is_waiting_state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_waiting_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_waiting_state_)));
          set_has_is_waiting_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cur_stage_begin_country_citys;
        break;
      }

      // repeated uint32 cur_stage_begin_country_citys = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_stage_begin_country_citys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_cur_stage_begin_country_citys())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cur_stage_begin_country_citys())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cur_stage_begin_country_citys;
        if (input->ExpectTag(48)) goto parse_cur_stage_now_country_occupy_citys;
        break;
      }

      // repeated uint32 cur_stage_now_country_occupy_citys = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_stage_now_country_occupy_citys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_cur_stage_now_country_occupy_citys())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cur_stage_now_country_occupy_citys())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cur_stage_now_country_occupy_citys;
        if (input->ExpectTag(56)) goto parse_cur_stage_target_num;
        break;
      }

      // repeated uint32 cur_stage_target_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_stage_target_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_cur_stage_target_num())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cur_stage_target_num())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cur_stage_target_num;
        if (input->ExpectTag(64)) goto parse_cur_stage_now_country_invest_money;
        break;
      }

      // repeated uint32 cur_stage_now_country_invest_money = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_stage_now_country_invest_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_cur_stage_now_country_invest_money())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cur_stage_now_country_invest_money())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cur_stage_now_country_invest_money;
        if (input->ExpectTag(72)) goto parse_is_country_failed;
        break;
      }

      // repeated bool is_country_failed = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_country_failed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 72, input, this->mutable_is_country_failed())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_is_country_failed())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_is_country_failed;
        if (input->ExpectTag(80)) goto parse_country_score;
        break;
      }

      // repeated uint32 country_score = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_country_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_country_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_country_score;
        if (input->ExpectTag(88)) goto parse_cur_stage_fighting_city_num;
        break;
      }

      // repeated uint32 cur_stage_fighting_city_num = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_stage_fighting_city_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88, input, this->mutable_cur_stage_fighting_city_num())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cur_stage_fighting_city_num())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_cur_stage_fighting_city_num;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Struct_Country_Task_Base::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_begin = 1;
  if (has_is_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_begin(), output);
  }

  // optional uint32 cur_stage = 2;
  if (has_cur_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_stage(), output);
  }

  // optional uint64 cur_stage_begin_time = 3;
  if (has_cur_stage_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cur_stage_begin_time(), output);
  }

  // optional bool is_waiting_state = 4;
  if (has_is_waiting_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_waiting_state(), output);
  }

  // repeated uint32 cur_stage_begin_country_citys = 5;
  for (int i = 0; i < this->cur_stage_begin_country_citys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->cur_stage_begin_country_citys(i), output);
  }

  // repeated uint32 cur_stage_now_country_occupy_citys = 6;
  for (int i = 0; i < this->cur_stage_now_country_occupy_citys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->cur_stage_now_country_occupy_citys(i), output);
  }

  // repeated uint32 cur_stage_target_num = 7;
  for (int i = 0; i < this->cur_stage_target_num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->cur_stage_target_num(i), output);
  }

  // repeated uint32 cur_stage_now_country_invest_money = 8;
  for (int i = 0; i < this->cur_stage_now_country_invest_money_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->cur_stage_now_country_invest_money(i), output);
  }

  // repeated bool is_country_failed = 9;
  for (int i = 0; i < this->is_country_failed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      9, this->is_country_failed(i), output);
  }

  // repeated uint32 country_score = 10;
  for (int i = 0; i < this->country_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->country_score(i), output);
  }

  // repeated uint32 cur_stage_fighting_city_num = 11;
  for (int i = 0; i < this->cur_stage_fighting_city_num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->cur_stage_fighting_city_num(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Struct_Country_Task_Base::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_begin = 1;
  if (has_is_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_begin(), target);
  }

  // optional uint32 cur_stage = 2;
  if (has_cur_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_stage(), target);
  }

  // optional uint64 cur_stage_begin_time = 3;
  if (has_cur_stage_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cur_stage_begin_time(), target);
  }

  // optional bool is_waiting_state = 4;
  if (has_is_waiting_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_waiting_state(), target);
  }

  // repeated uint32 cur_stage_begin_country_citys = 5;
  for (int i = 0; i < this->cur_stage_begin_country_citys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->cur_stage_begin_country_citys(i), target);
  }

  // repeated uint32 cur_stage_now_country_occupy_citys = 6;
  for (int i = 0; i < this->cur_stage_now_country_occupy_citys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->cur_stage_now_country_occupy_citys(i), target);
  }

  // repeated uint32 cur_stage_target_num = 7;
  for (int i = 0; i < this->cur_stage_target_num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->cur_stage_target_num(i), target);
  }

  // repeated uint32 cur_stage_now_country_invest_money = 8;
  for (int i = 0; i < this->cur_stage_now_country_invest_money_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->cur_stage_now_country_invest_money(i), target);
  }

  // repeated bool is_country_failed = 9;
  for (int i = 0; i < this->is_country_failed_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(9, this->is_country_failed(i), target);
  }

  // repeated uint32 country_score = 10;
  for (int i = 0; i < this->country_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->country_score(i), target);
  }

  // repeated uint32 cur_stage_fighting_city_num = 11;
  for (int i = 0; i < this->cur_stage_fighting_city_num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(11, this->cur_stage_fighting_city_num(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Struct_Country_Task_Base::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_begin = 1;
    if (has_is_begin()) {
      total_size += 1 + 1;
    }

    // optional uint32 cur_stage = 2;
    if (has_cur_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_stage());
    }

    // optional uint64 cur_stage_begin_time = 3;
    if (has_cur_stage_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_stage_begin_time());
    }

    // optional bool is_waiting_state = 4;
    if (has_is_waiting_state()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 cur_stage_begin_country_citys = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->cur_stage_begin_country_citys_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cur_stage_begin_country_citys(i));
    }
    total_size += 1 * this->cur_stage_begin_country_citys_size() + data_size;
  }

  // repeated uint32 cur_stage_now_country_occupy_citys = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->cur_stage_now_country_occupy_citys_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cur_stage_now_country_occupy_citys(i));
    }
    total_size += 1 * this->cur_stage_now_country_occupy_citys_size() + data_size;
  }

  // repeated uint32 cur_stage_target_num = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->cur_stage_target_num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cur_stage_target_num(i));
    }
    total_size += 1 * this->cur_stage_target_num_size() + data_size;
  }

  // repeated uint32 cur_stage_now_country_invest_money = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->cur_stage_now_country_invest_money_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cur_stage_now_country_invest_money(i));
    }
    total_size += 1 * this->cur_stage_now_country_invest_money_size() + data_size;
  }

  // repeated bool is_country_failed = 9;
  {
    int data_size = 0;
    data_size = 1 * this->is_country_failed_size();
    total_size += 1 * this->is_country_failed_size() + data_size;
  }

  // repeated uint32 country_score = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->country_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->country_score(i));
    }
    total_size += 1 * this->country_score_size() + data_size;
  }

  // repeated uint32 cur_stage_fighting_city_num = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->cur_stage_fighting_city_num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cur_stage_fighting_city_num(i));
    }
    total_size += 1 * this->cur_stage_fighting_city_num_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Struct_Country_Task_Base::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Struct_Country_Task_Base* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Struct_Country_Task_Base*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Struct_Country_Task_Base::MergeFrom(const Struct_Country_Task_Base& from) {
  GOOGLE_CHECK_NE(&from, this);
  cur_stage_begin_country_citys_.MergeFrom(from.cur_stage_begin_country_citys_);
  cur_stage_now_country_occupy_citys_.MergeFrom(from.cur_stage_now_country_occupy_citys_);
  cur_stage_target_num_.MergeFrom(from.cur_stage_target_num_);
  cur_stage_now_country_invest_money_.MergeFrom(from.cur_stage_now_country_invest_money_);
  is_country_failed_.MergeFrom(from.is_country_failed_);
  country_score_.MergeFrom(from.country_score_);
  cur_stage_fighting_city_num_.MergeFrom(from.cur_stage_fighting_city_num_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_begin()) {
      set_is_begin(from.is_begin());
    }
    if (from.has_cur_stage()) {
      set_cur_stage(from.cur_stage());
    }
    if (from.has_cur_stage_begin_time()) {
      set_cur_stage_begin_time(from.cur_stage_begin_time());
    }
    if (from.has_is_waiting_state()) {
      set_is_waiting_state(from.is_waiting_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Struct_Country_Task_Base::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Struct_Country_Task_Base::CopyFrom(const Struct_Country_Task_Base& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Struct_Country_Task_Base::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Struct_Country_Task_Base::Swap(Struct_Country_Task_Base* other) {
  if (other != this) {
    std::swap(is_begin_, other->is_begin_);
    std::swap(cur_stage_, other->cur_stage_);
    std::swap(cur_stage_begin_time_, other->cur_stage_begin_time_);
    std::swap(is_waiting_state_, other->is_waiting_state_);
    cur_stage_begin_country_citys_.Swap(&other->cur_stage_begin_country_citys_);
    cur_stage_now_country_occupy_citys_.Swap(&other->cur_stage_now_country_occupy_citys_);
    cur_stage_target_num_.Swap(&other->cur_stage_target_num_);
    cur_stage_now_country_invest_money_.Swap(&other->cur_stage_now_country_invest_money_);
    is_country_failed_.Swap(&other->is_country_failed_);
    country_score_.Swap(&other->country_score_);
    cur_stage_fighting_city_num_.Swap(&other->cur_stage_fighting_city_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Struct_Country_Task_Base::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Struct_Country_Task_Base_descriptor_;
  metadata.reflection = Struct_Country_Task_Base_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Struct_Country_Task_City::kCityIdFieldNumber;
const int Struct_Country_Task_City::kEndTimeFieldNumber;
const int Struct_Country_Task_City::kWinCountryFieldNumber;
const int Struct_Country_Task_City::kOriginCountryFieldNumber;
#endif  // !_MSC_VER

Struct_Country_Task_City::Struct_Country_Task_City()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Struct_Country_Task_City::InitAsDefaultInstance() {
}

Struct_Country_Task_City::Struct_Country_Task_City(const Struct_Country_Task_City& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Struct_Country_Task_City::SharedCtor() {
  _cached_size_ = 0;
  city_id_ = 0u;
  end_time_ = GOOGLE_ULONGLONG(0);
  win_country_ = 0u;
  origin_country_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Struct_Country_Task_City::~Struct_Country_Task_City() {
  SharedDtor();
}

void Struct_Country_Task_City::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Struct_Country_Task_City::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Struct_Country_Task_City::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Struct_Country_Task_City_descriptor_;
}

const Struct_Country_Task_City& Struct_Country_Task_City::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

Struct_Country_Task_City* Struct_Country_Task_City::default_instance_ = NULL;

Struct_Country_Task_City* Struct_Country_Task_City::New() const {
  return new Struct_Country_Task_City;
}

void Struct_Country_Task_City::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    city_id_ = 0u;
    end_time_ = GOOGLE_ULONGLONG(0);
    win_country_ = 0u;
    origin_country_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Struct_Country_Task_City::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 city_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end_time;
        break;
      }

      // required uint64 end_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win_country;
        break;
      }

      // optional uint32 win_country = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_country_)));
          set_has_win_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_origin_country;
        break;
      }

      // optional uint32 origin_country = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_origin_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &origin_country_)));
          set_has_origin_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Struct_Country_Task_City::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->city_id(), output);
  }

  // required uint64 end_time = 2;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end_time(), output);
  }

  // optional uint32 win_country = 3;
  if (has_win_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->win_country(), output);
  }

  // optional uint32 origin_country = 4;
  if (has_origin_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->origin_country(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Struct_Country_Task_City::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->city_id(), target);
  }

  // required uint64 end_time = 2;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end_time(), target);
  }

  // optional uint32 win_country = 3;
  if (has_win_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->win_country(), target);
  }

  // optional uint32 origin_country = 4;
  if (has_origin_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->origin_country(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Struct_Country_Task_City::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 city_id = 1;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

    // required uint64 end_time = 2;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

    // optional uint32 win_country = 3;
    if (has_win_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_country());
    }

    // optional uint32 origin_country = 4;
    if (has_origin_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->origin_country());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Struct_Country_Task_City::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Struct_Country_Task_City* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Struct_Country_Task_City*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Struct_Country_Task_City::MergeFrom(const Struct_Country_Task_City& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_win_country()) {
      set_win_country(from.win_country());
    }
    if (from.has_origin_country()) {
      set_origin_country(from.origin_country());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Struct_Country_Task_City::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Struct_Country_Task_City::CopyFrom(const Struct_Country_Task_City& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Struct_Country_Task_City::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Struct_Country_Task_City::Swap(Struct_Country_Task_City* other) {
  if (other != this) {
    std::swap(city_id_, other->city_id_);
    std::swap(end_time_, other->end_time_);
    std::swap(win_country_, other->win_country_);
    std::swap(origin_country_, other->origin_country_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Struct_Country_Task_City::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Struct_Country_Task_City_descriptor_;
  metadata.reflection = Struct_Country_Task_City_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Country_Task_Info::kIsRunningFieldNumber;
const int GS2C_Country_Task_Info::kCityFieldNumber;
const int GS2C_Country_Task_Info::kBaseFieldNumber;
#endif  // !_MSC_VER

GS2C_Country_Task_Info::GS2C_Country_Task_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Country_Task_Info::InitAsDefaultInstance() {
  base_ = const_cast< ::pb::Struct_Country_Task_Base*>(&::pb::Struct_Country_Task_Base::default_instance());
}

GS2C_Country_Task_Info::GS2C_Country_Task_Info(const GS2C_Country_Task_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Country_Task_Info::SharedCtor() {
  _cached_size_ = 0;
  is_running_ = false;
  base_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Country_Task_Info::~GS2C_Country_Task_Info() {
  SharedDtor();
}

void GS2C_Country_Task_Info::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void GS2C_Country_Task_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Country_Task_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Country_Task_Info_descriptor_;
}

const GS2C_Country_Task_Info& GS2C_Country_Task_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

GS2C_Country_Task_Info* GS2C_Country_Task_Info::default_instance_ = NULL;

GS2C_Country_Task_Info* GS2C_Country_Task_Info::New() const {
  return new GS2C_Country_Task_Info;
}

void GS2C_Country_Task_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_running_ = false;
    if (has_base()) {
      if (base_ != NULL) base_->::pb::Struct_Country_Task_Base::Clear();
    }
  }
  city_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Country_Task_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_running = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_running_)));
          set_has_is_running();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_city;
        break;
      }

      // repeated .pb.Struct_Country_Task_City city = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_city()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_city;
        if (input->ExpectTag(26)) goto parse_base;
        break;
      }

      // optional .pb.Struct_Country_Task_Base base = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Country_Task_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_running = 1;
  if (has_is_running()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_running(), output);
  }

  // repeated .pb.Struct_Country_Task_City city = 2;
  for (int i = 0; i < this->city_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->city(i), output);
  }

  // optional .pb.Struct_Country_Task_Base base = 3;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->base(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Country_Task_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_running = 1;
  if (has_is_running()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_running(), target);
  }

  // repeated .pb.Struct_Country_Task_City city = 2;
  for (int i = 0; i < this->city_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->city(i), target);
  }

  // optional .pb.Struct_Country_Task_Base base = 3;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->base(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Country_Task_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_running = 1;
    if (has_is_running()) {
      total_size += 1 + 1;
    }

    // optional .pb.Struct_Country_Task_Base base = 3;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

  }
  // repeated .pb.Struct_Country_Task_City city = 2;
  total_size += 1 * this->city_size();
  for (int i = 0; i < this->city_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->city(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Country_Task_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Country_Task_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Country_Task_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Country_Task_Info::MergeFrom(const GS2C_Country_Task_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  city_.MergeFrom(from.city_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_running()) {
      set_is_running(from.is_running());
    }
    if (from.has_base()) {
      mutable_base()->::pb::Struct_Country_Task_Base::MergeFrom(from.base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Country_Task_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Country_Task_Info::CopyFrom(const GS2C_Country_Task_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Country_Task_Info::IsInitialized() const {

  for (int i = 0; i < city_size(); i++) {
    if (!this->city(i).IsInitialized()) return false;
  }
  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  return true;
}

void GS2C_Country_Task_Info::Swap(GS2C_Country_Task_Info* other) {
  if (other != this) {
    std::swap(is_running_, other->is_running_);
    city_.Swap(&other->city_);
    std::swap(base_, other->base_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Country_Task_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Country_Task_Info_descriptor_;
  metadata.reflection = GS2C_Country_Task_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Country_Task_Player::kRankFieldNumber;
const int GS2C_Country_Task_Player::kKillCountFieldNumber;
const int GS2C_Country_Task_Player::kIsTakeRewardFieldNumber;
const int GS2C_Country_Task_Player::kTaskEndRankFieldNumber;
const int GS2C_Country_Task_Player::kRankRewardFieldNumber;
const int GS2C_Country_Task_Player::kWinRewardFieldNumber;
const int GS2C_Country_Task_Player::kCdTimeFieldNumber;
const int GS2C_Country_Task_Player::kPkInfoFieldNumber;
#endif  // !_MSC_VER

GS2C_Country_Task_Player::GS2C_Country_Task_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Country_Task_Player::InitAsDefaultInstance() {
  win_reward_ = const_cast< ::pb::GS2C_LootList*>(&::pb::GS2C_LootList::default_instance());
  pk_info_ = const_cast< ::pb::Struct_Country_Pk_Info*>(&::pb::Struct_Country_Pk_Info::default_instance());
}

GS2C_Country_Task_Player::GS2C_Country_Task_Player(const GS2C_Country_Task_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Country_Task_Player::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  kill_count_ = 0u;
  win_reward_ = NULL;
  cd_time_ = GOOGLE_ULONGLONG(0);
  pk_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Country_Task_Player::~GS2C_Country_Task_Player() {
  SharedDtor();
}

void GS2C_Country_Task_Player::SharedDtor() {
  if (this != default_instance_) {
    delete win_reward_;
    delete pk_info_;
  }
}

void GS2C_Country_Task_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Country_Task_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Country_Task_Player_descriptor_;
}

const GS2C_Country_Task_Player& GS2C_Country_Task_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

GS2C_Country_Task_Player* GS2C_Country_Task_Player::default_instance_ = NULL;

GS2C_Country_Task_Player* GS2C_Country_Task_Player::New() const {
  return new GS2C_Country_Task_Player;
}

void GS2C_Country_Task_Player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0u;
    kill_count_ = 0u;
    if (has_win_reward()) {
      if (win_reward_ != NULL) win_reward_->::pb::GS2C_LootList::Clear();
    }
    cd_time_ = GOOGLE_ULONGLONG(0);
    if (has_pk_info()) {
      if (pk_info_ != NULL) pk_info_->::pb::Struct_Country_Pk_Info::Clear();
    }
  }
  is_take_reward_.Clear();
  task_end_rank_.Clear();
  rank_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Country_Task_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kill_count;
        break;
      }

      // required uint32 kill_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_count_)));
          set_has_kill_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_take_reward;
        break;
      }

      // repeated bool is_take_reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_take_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 24, input, this->mutable_is_take_reward())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_is_take_reward())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_take_reward;
        if (input->ExpectTag(32)) goto parse_task_end_rank;
        break;
      }

      // repeated uint32 task_end_rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_end_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_task_end_rank())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_task_end_rank())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_task_end_rank;
        if (input->ExpectTag(42)) goto parse_rank_reward;
        break;
      }

      // repeated .pb.GS2C_LootList rank_reward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rank_reward;
        if (input->ExpectTag(50)) goto parse_win_reward;
        break;
      }

      // optional .pb.GS2C_LootList win_reward = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_win_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_win_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cd_time;
        break;
      }

      // optional uint64 cd_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cd_time_)));
          set_has_cd_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_pk_info;
        break;
      }

      // optional .pb.Struct_Country_Pk_Info pk_info = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pk_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pk_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Country_Task_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // required uint32 kill_count = 2;
  if (has_kill_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kill_count(), output);
  }

  // repeated bool is_take_reward = 3;
  for (int i = 0; i < this->is_take_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      3, this->is_take_reward(i), output);
  }

  // repeated uint32 task_end_rank = 4;
  for (int i = 0; i < this->task_end_rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->task_end_rank(i), output);
  }

  // repeated .pb.GS2C_LootList rank_reward = 5;
  for (int i = 0; i < this->rank_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rank_reward(i), output);
  }

  // optional .pb.GS2C_LootList win_reward = 6;
  if (has_win_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->win_reward(), output);
  }

  // optional uint64 cd_time = 7;
  if (has_cd_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->cd_time(), output);
  }

  // optional .pb.Struct_Country_Pk_Info pk_info = 8;
  if (has_pk_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->pk_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Country_Task_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // required uint32 kill_count = 2;
  if (has_kill_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kill_count(), target);
  }

  // repeated bool is_take_reward = 3;
  for (int i = 0; i < this->is_take_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(3, this->is_take_reward(i), target);
  }

  // repeated uint32 task_end_rank = 4;
  for (int i = 0; i < this->task_end_rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->task_end_rank(i), target);
  }

  // repeated .pb.GS2C_LootList rank_reward = 5;
  for (int i = 0; i < this->rank_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rank_reward(i), target);
  }

  // optional .pb.GS2C_LootList win_reward = 6;
  if (has_win_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->win_reward(), target);
  }

  // optional uint64 cd_time = 7;
  if (has_cd_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->cd_time(), target);
  }

  // optional .pb.Struct_Country_Pk_Info pk_info = 8;
  if (has_pk_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->pk_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Country_Task_Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // required uint32 kill_count = 2;
    if (has_kill_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill_count());
    }

    // optional .pb.GS2C_LootList win_reward = 6;
    if (has_win_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->win_reward());
    }

    // optional uint64 cd_time = 7;
    if (has_cd_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cd_time());
    }

    // optional .pb.Struct_Country_Pk_Info pk_info = 8;
    if (has_pk_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pk_info());
    }

  }
  // repeated bool is_take_reward = 3;
  {
    int data_size = 0;
    data_size = 1 * this->is_take_reward_size();
    total_size += 1 * this->is_take_reward_size() + data_size;
  }

  // repeated uint32 task_end_rank = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->task_end_rank_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->task_end_rank(i));
    }
    total_size += 1 * this->task_end_rank_size() + data_size;
  }

  // repeated .pb.GS2C_LootList rank_reward = 5;
  total_size += 1 * this->rank_reward_size();
  for (int i = 0; i < this->rank_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Country_Task_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Country_Task_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Country_Task_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Country_Task_Player::MergeFrom(const GS2C_Country_Task_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  is_take_reward_.MergeFrom(from.is_take_reward_);
  task_end_rank_.MergeFrom(from.task_end_rank_);
  rank_reward_.MergeFrom(from.rank_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_kill_count()) {
      set_kill_count(from.kill_count());
    }
    if (from.has_win_reward()) {
      mutable_win_reward()->::pb::GS2C_LootList::MergeFrom(from.win_reward());
    }
    if (from.has_cd_time()) {
      set_cd_time(from.cd_time());
    }
    if (from.has_pk_info()) {
      mutable_pk_info()->::pb::Struct_Country_Pk_Info::MergeFrom(from.pk_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Country_Task_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Country_Task_Player::CopyFrom(const GS2C_Country_Task_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Country_Task_Player::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pk_info()) {
    if (!this->pk_info().IsInitialized()) return false;
  }
  return true;
}

void GS2C_Country_Task_Player::Swap(GS2C_Country_Task_Player* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(kill_count_, other->kill_count_);
    is_take_reward_.Swap(&other->is_take_reward_);
    task_end_rank_.Swap(&other->task_end_rank_);
    rank_reward_.Swap(&other->rank_reward_);
    std::swap(win_reward_, other->win_reward_);
    std::swap(cd_time_, other->cd_time_);
    std::swap(pk_info_, other->pk_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Country_Task_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Country_Task_Player_descriptor_;
  metadata.reflection = GS2C_Country_Task_Player_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Country_Task_Reward::kTaskIdxFieldNumber;
#endif  // !_MSC_VER

C2GS_Country_Task_Reward::C2GS_Country_Task_Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Country_Task_Reward::InitAsDefaultInstance() {
}

C2GS_Country_Task_Reward::C2GS_Country_Task_Reward(const C2GS_Country_Task_Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Country_Task_Reward::SharedCtor() {
  _cached_size_ = 0;
  task_idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Country_Task_Reward::~C2GS_Country_Task_Reward() {
  SharedDtor();
}

void C2GS_Country_Task_Reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Country_Task_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Country_Task_Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Country_Task_Reward_descriptor_;
}

const C2GS_Country_Task_Reward& C2GS_Country_Task_Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

C2GS_Country_Task_Reward* C2GS_Country_Task_Reward::default_instance_ = NULL;

C2GS_Country_Task_Reward* C2GS_Country_Task_Reward::New() const {
  return new C2GS_Country_Task_Reward;
}

void C2GS_Country_Task_Reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_idx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Country_Task_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_idx_)));
          set_has_task_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Country_Task_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 task_idx = 1;
  if (has_task_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Country_Task_Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_idx = 1;
  if (has_task_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Country_Task_Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_idx = 1;
    if (has_task_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Country_Task_Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Country_Task_Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Country_Task_Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Country_Task_Reward::MergeFrom(const C2GS_Country_Task_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_idx()) {
      set_task_idx(from.task_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Country_Task_Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Country_Task_Reward::CopyFrom(const C2GS_Country_Task_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Country_Task_Reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Country_Task_Reward::Swap(C2GS_Country_Task_Reward* other) {
  if (other != this) {
    std::swap(task_idx_, other->task_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Country_Task_Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Country_Task_Reward_descriptor_;
  metadata.reflection = C2GS_Country_Task_Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Country_Task_Reward_Ret::kIsSuccessFieldNumber;
#endif  // !_MSC_VER

GS2C_Country_Task_Reward_Ret::GS2C_Country_Task_Reward_Ret()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Country_Task_Reward_Ret::InitAsDefaultInstance() {
}

GS2C_Country_Task_Reward_Ret::GS2C_Country_Task_Reward_Ret(const GS2C_Country_Task_Reward_Ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Country_Task_Reward_Ret::SharedCtor() {
  _cached_size_ = 0;
  issuccess_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Country_Task_Reward_Ret::~GS2C_Country_Task_Reward_Ret() {
  SharedDtor();
}

void GS2C_Country_Task_Reward_Ret::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Country_Task_Reward_Ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Country_Task_Reward_Ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Country_Task_Reward_Ret_descriptor_;
}

const GS2C_Country_Task_Reward_Ret& GS2C_Country_Task_Reward_Ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

GS2C_Country_Task_Reward_Ret* GS2C_Country_Task_Reward_Ret::default_instance_ = NULL;

GS2C_Country_Task_Reward_Ret* GS2C_Country_Task_Reward_Ret::New() const {
  return new GS2C_Country_Task_Reward_Ret;
}

void GS2C_Country_Task_Reward_Ret::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    issuccess_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Country_Task_Reward_Ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isSuccess = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issuccess_)));
          set_has_issuccess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Country_Task_Reward_Ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isSuccess = 1;
  if (has_issuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->issuccess(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Country_Task_Reward_Ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isSuccess = 1;
  if (has_issuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->issuccess(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Country_Task_Reward_Ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isSuccess = 1;
    if (has_issuccess()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Country_Task_Reward_Ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Country_Task_Reward_Ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Country_Task_Reward_Ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Country_Task_Reward_Ret::MergeFrom(const GS2C_Country_Task_Reward_Ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issuccess()) {
      set_issuccess(from.issuccess());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Country_Task_Reward_Ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Country_Task_Reward_Ret::CopyFrom(const GS2C_Country_Task_Reward_Ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Country_Task_Reward_Ret::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Country_Task_Reward_Ret::Swap(GS2C_Country_Task_Reward_Ret* other) {
  if (other != this) {
    std::swap(issuccess_, other->issuccess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Country_Task_Reward_Ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Country_Task_Reward_Ret_descriptor_;
  metadata.reflection = GS2C_Country_Task_Reward_Ret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Country_Task_Result::kRankFieldNumber;
const int Country_Task_Result::kKillCountFieldNumber;
#endif  // !_MSC_VER

Country_Task_Result::Country_Task_Result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Country_Task_Result::InitAsDefaultInstance() {
}

Country_Task_Result::Country_Task_Result(const Country_Task_Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Country_Task_Result::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  kill_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Country_Task_Result::~Country_Task_Result() {
  SharedDtor();
}

void Country_Task_Result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Country_Task_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Country_Task_Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Country_Task_Result_descriptor_;
}

const Country_Task_Result& Country_Task_Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

Country_Task_Result* Country_Task_Result::default_instance_ = NULL;

Country_Task_Result* Country_Task_Result::New() const {
  return new Country_Task_Result;
}

void Country_Task_Result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0u;
    kill_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Country_Task_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kill_count;
        break;
      }

      // optional uint32 kill_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_count_)));
          set_has_kill_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Country_Task_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // optional uint32 kill_count = 2;
  if (has_kill_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kill_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Country_Task_Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // optional uint32 kill_count = 2;
  if (has_kill_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kill_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Country_Task_Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 kill_count = 2;
    if (has_kill_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Country_Task_Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Country_Task_Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Country_Task_Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Country_Task_Result::MergeFrom(const Country_Task_Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_kill_count()) {
      set_kill_count(from.kill_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Country_Task_Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Country_Task_Result::CopyFrom(const Country_Task_Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Country_Task_Result::IsInitialized() const {

  return true;
}

void Country_Task_Result::Swap(Country_Task_Result* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(kill_count_, other->kill_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Country_Task_Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Country_Task_Result_descriptor_;
  metadata.reflection = Country_Task_Result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Country_Task_End::kCityIdFieldNumber;
const int GS2C_Country_Task_End::kResultFieldNumber;
#endif  // !_MSC_VER

GS2C_Country_Task_End::GS2C_Country_Task_End()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Country_Task_End::InitAsDefaultInstance() {
  result_ = const_cast< ::pb::Country_Task_Result*>(&::pb::Country_Task_Result::default_instance());
}

GS2C_Country_Task_End::GS2C_Country_Task_End(const GS2C_Country_Task_End& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Country_Task_End::SharedCtor() {
  _cached_size_ = 0;
  city_id_ = 0u;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Country_Task_End::~GS2C_Country_Task_End() {
  SharedDtor();
}

void GS2C_Country_Task_End::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void GS2C_Country_Task_End::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Country_Task_End::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Country_Task_End_descriptor_;
}

const GS2C_Country_Task_End& GS2C_Country_Task_End::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

GS2C_Country_Task_End* GS2C_Country_Task_End::default_instance_ = NULL;

GS2C_Country_Task_End* GS2C_Country_Task_End::New() const {
  return new GS2C_Country_Task_End;
}

void GS2C_Country_Task_End::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    city_id_ = 0u;
    if (has_result()) {
      if (result_ != NULL) result_->::pb::Country_Task_Result::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Country_Task_End::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 city_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional .pb.Country_Task_Result result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Country_Task_End::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->city_id(), output);
  }

  // optional .pb.Country_Task_Result result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Country_Task_End::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->city_id(), target);
  }

  // optional .pb.Country_Task_Result result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Country_Task_End::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 city_id = 1;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

    // optional .pb.Country_Task_Result result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Country_Task_End::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Country_Task_End* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Country_Task_End*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Country_Task_End::MergeFrom(const GS2C_Country_Task_End& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
    if (from.has_result()) {
      mutable_result()->::pb::Country_Task_Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Country_Task_End::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Country_Task_End::CopyFrom(const GS2C_Country_Task_End& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Country_Task_End::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Country_Task_End::Swap(GS2C_Country_Task_End* other) {
  if (other != this) {
    std::swap(city_id_, other->city_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Country_Task_End::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Country_Task_End_descriptor_;
  metadata.reflection = GS2C_Country_Task_End_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Struct_Country_Pk_Player_mirror::kHeadIdFieldNumber;
const int Struct_Country_Pk_Player_mirror::kNameFieldNumber;
const int Struct_Country_Pk_Player_mirror::kLevelFieldNumber;
const int Struct_Country_Pk_Player_mirror::kCardTidFieldNumber;
const int Struct_Country_Pk_Player_mirror::kCardLvFieldNumber;
#endif  // !_MSC_VER

Struct_Country_Pk_Player_mirror::Struct_Country_Pk_Player_mirror()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Struct_Country_Pk_Player_mirror::InitAsDefaultInstance() {
}

Struct_Country_Pk_Player_mirror::Struct_Country_Pk_Player_mirror(const Struct_Country_Pk_Player_mirror& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Struct_Country_Pk_Player_mirror::SharedCtor() {
  _cached_size_ = 0;
  head_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Struct_Country_Pk_Player_mirror::~Struct_Country_Pk_Player_mirror() {
  SharedDtor();
}

void Struct_Country_Pk_Player_mirror::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Struct_Country_Pk_Player_mirror::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Struct_Country_Pk_Player_mirror::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Struct_Country_Pk_Player_mirror_descriptor_;
}

const Struct_Country_Pk_Player_mirror& Struct_Country_Pk_Player_mirror::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

Struct_Country_Pk_Player_mirror* Struct_Country_Pk_Player_mirror::default_instance_ = NULL;

Struct_Country_Pk_Player_mirror* Struct_Country_Pk_Player_mirror::New() const {
  return new Struct_Country_Pk_Player_mirror;
}

void Struct_Country_Pk_Player_mirror::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    head_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
  }
  card_tid_.Clear();
  card_lv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Struct_Country_Pk_Player_mirror::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 head_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_id_)));
          set_has_head_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_card_tid;
        break;
      }

      // repeated uint32 card_tid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_card_tid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_tid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_card_tid;
        if (input->ExpectTag(40)) goto parse_card_lv;
        break;
      }

      // repeated uint32 card_lv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_card_lv())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_lv())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_card_lv;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Struct_Country_Pk_Player_mirror::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 head_id = 1;
  if (has_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->head_id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // repeated uint32 card_tid = 4;
  for (int i = 0; i < this->card_tid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->card_tid(i), output);
  }

  // repeated uint32 card_lv = 5;
  for (int i = 0; i < this->card_lv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->card_lv(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Struct_Country_Pk_Player_mirror::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 head_id = 1;
  if (has_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->head_id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // repeated uint32 card_tid = 4;
  for (int i = 0; i < this->card_tid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->card_tid(i), target);
  }

  // repeated uint32 card_lv = 5;
  for (int i = 0; i < this->card_lv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->card_lv(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Struct_Country_Pk_Player_mirror::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 head_id = 1;
    if (has_head_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  // repeated uint32 card_tid = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_tid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_tid(i));
    }
    total_size += 1 * this->card_tid_size() + data_size;
  }

  // repeated uint32 card_lv = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_lv_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_lv(i));
    }
    total_size += 1 * this->card_lv_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Struct_Country_Pk_Player_mirror::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Struct_Country_Pk_Player_mirror* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Struct_Country_Pk_Player_mirror*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Struct_Country_Pk_Player_mirror::MergeFrom(const Struct_Country_Pk_Player_mirror& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_tid_.MergeFrom(from.card_tid_);
  card_lv_.MergeFrom(from.card_lv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head_id()) {
      set_head_id(from.head_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Struct_Country_Pk_Player_mirror::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Struct_Country_Pk_Player_mirror::CopyFrom(const Struct_Country_Pk_Player_mirror& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Struct_Country_Pk_Player_mirror::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Struct_Country_Pk_Player_mirror::Swap(Struct_Country_Pk_Player_mirror* other) {
  if (other != this) {
    std::swap(head_id_, other->head_id_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    card_tid_.Swap(&other->card_tid_);
    card_lv_.Swap(&other->card_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Struct_Country_Pk_Player_mirror::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Struct_Country_Pk_Player_mirror_descriptor_;
  metadata.reflection = Struct_Country_Pk_Player_mirror_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Struct_Country_Pk_History::kRivalNameFieldNumber;
const int Struct_Country_Pk_History::kRivalIsAttFieldNumber;
const int Struct_Country_Pk_History::kRivalIsWinFieldNumber;
const int Struct_Country_Pk_History::kMyScoreChangeFieldNumber;
#endif  // !_MSC_VER

Struct_Country_Pk_History::Struct_Country_Pk_History()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Struct_Country_Pk_History::InitAsDefaultInstance() {
}

Struct_Country_Pk_History::Struct_Country_Pk_History(const Struct_Country_Pk_History& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Struct_Country_Pk_History::SharedCtor() {
  _cached_size_ = 0;
  rival_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rival_is_att_ = false;
  rival_is_win_ = false;
  my_score_change_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Struct_Country_Pk_History::~Struct_Country_Pk_History() {
  SharedDtor();
}

void Struct_Country_Pk_History::SharedDtor() {
  if (rival_name_ != &::google::protobuf::internal::kEmptyString) {
    delete rival_name_;
  }
  if (this != default_instance_) {
  }
}

void Struct_Country_Pk_History::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Struct_Country_Pk_History::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Struct_Country_Pk_History_descriptor_;
}

const Struct_Country_Pk_History& Struct_Country_Pk_History::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

Struct_Country_Pk_History* Struct_Country_Pk_History::default_instance_ = NULL;

Struct_Country_Pk_History* Struct_Country_Pk_History::New() const {
  return new Struct_Country_Pk_History;
}

void Struct_Country_Pk_History::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rival_name()) {
      if (rival_name_ != &::google::protobuf::internal::kEmptyString) {
        rival_name_->clear();
      }
    }
    rival_is_att_ = false;
    rival_is_win_ = false;
    my_score_change_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Struct_Country_Pk_History::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string rival_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rival_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rival_name().data(), this->rival_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rival_is_att;
        break;
      }

      // required bool rival_is_att = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rival_is_att:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rival_is_att_)));
          set_has_rival_is_att();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rival_is_win;
        break;
      }

      // required bool rival_is_win = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rival_is_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rival_is_win_)));
          set_has_rival_is_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_my_score_change;
        break;
      }

      // required uint32 my_score_change = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_score_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &my_score_change_)));
          set_has_my_score_change();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Struct_Country_Pk_History::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string rival_name = 1;
  if (has_rival_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rival_name().data(), this->rival_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rival_name(), output);
  }

  // required bool rival_is_att = 2;
  if (has_rival_is_att()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->rival_is_att(), output);
  }

  // required bool rival_is_win = 3;
  if (has_rival_is_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->rival_is_win(), output);
  }

  // required uint32 my_score_change = 4;
  if (has_my_score_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->my_score_change(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Struct_Country_Pk_History::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string rival_name = 1;
  if (has_rival_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rival_name().data(), this->rival_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rival_name(), target);
  }

  // required bool rival_is_att = 2;
  if (has_rival_is_att()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->rival_is_att(), target);
  }

  // required bool rival_is_win = 3;
  if (has_rival_is_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->rival_is_win(), target);
  }

  // required uint32 my_score_change = 4;
  if (has_my_score_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->my_score_change(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Struct_Country_Pk_History::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string rival_name = 1;
    if (has_rival_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rival_name());
    }

    // required bool rival_is_att = 2;
    if (has_rival_is_att()) {
      total_size += 1 + 1;
    }

    // required bool rival_is_win = 3;
    if (has_rival_is_win()) {
      total_size += 1 + 1;
    }

    // required uint32 my_score_change = 4;
    if (has_my_score_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->my_score_change());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Struct_Country_Pk_History::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Struct_Country_Pk_History* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Struct_Country_Pk_History*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Struct_Country_Pk_History::MergeFrom(const Struct_Country_Pk_History& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rival_name()) {
      set_rival_name(from.rival_name());
    }
    if (from.has_rival_is_att()) {
      set_rival_is_att(from.rival_is_att());
    }
    if (from.has_rival_is_win()) {
      set_rival_is_win(from.rival_is_win());
    }
    if (from.has_my_score_change()) {
      set_my_score_change(from.my_score_change());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Struct_Country_Pk_History::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Struct_Country_Pk_History::CopyFrom(const Struct_Country_Pk_History& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Struct_Country_Pk_History::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Struct_Country_Pk_History::Swap(Struct_Country_Pk_History* other) {
  if (other != this) {
    std::swap(rival_name_, other->rival_name_);
    std::swap(rival_is_att_, other->rival_is_att_);
    std::swap(rival_is_win_, other->rival_is_win_);
    std::swap(my_score_change_, other->my_score_change_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Struct_Country_Pk_History::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Struct_Country_Pk_History_descriptor_;
  metadata.reflection = Struct_Country_Pk_History_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Struct_Country_Pk_Info::kRecentPlayerNameFieldNumber;
const int Struct_Country_Pk_Info::kRecentPlayerScoreFieldNumber;
const int Struct_Country_Pk_Info::kRecentPlayerCountryFieldNumber;
const int Struct_Country_Pk_Info::kRankNo1NameFieldNumber;
const int Struct_Country_Pk_Info::kMirrorListFieldNumber;
const int Struct_Country_Pk_Info::kPkHistoryFieldNumber;
const int Struct_Country_Pk_Info::kIsPkingFieldNumber;
const int Struct_Country_Pk_Info::kTotalWinFieldNumber;
const int Struct_Country_Pk_Info::kTotalLoseFieldNumber;
#endif  // !_MSC_VER

Struct_Country_Pk_Info::Struct_Country_Pk_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Struct_Country_Pk_Info::InitAsDefaultInstance() {
}

Struct_Country_Pk_Info::Struct_Country_Pk_Info(const Struct_Country_Pk_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Struct_Country_Pk_Info::SharedCtor() {
  _cached_size_ = 0;
  rank_no1_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_pking_ = false;
  total_win_ = 0u;
  total_lose_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Struct_Country_Pk_Info::~Struct_Country_Pk_Info() {
  SharedDtor();
}

void Struct_Country_Pk_Info::SharedDtor() {
  if (rank_no1_name_ != &::google::protobuf::internal::kEmptyString) {
    delete rank_no1_name_;
  }
  if (this != default_instance_) {
  }
}

void Struct_Country_Pk_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Struct_Country_Pk_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Struct_Country_Pk_Info_descriptor_;
}

const Struct_Country_Pk_Info& Struct_Country_Pk_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

Struct_Country_Pk_Info* Struct_Country_Pk_Info::default_instance_ = NULL;

Struct_Country_Pk_Info* Struct_Country_Pk_Info::New() const {
  return new Struct_Country_Pk_Info;
}

void Struct_Country_Pk_Info::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (has_rank_no1_name()) {
      if (rank_no1_name_ != &::google::protobuf::internal::kEmptyString) {
        rank_no1_name_->clear();
      }
    }
    is_pking_ = false;
    total_win_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    total_lose_ = 0u;
  }
  recent_player_name_.Clear();
  recent_player_score_.Clear();
  recent_player_country_.Clear();
  mirror_list_.Clear();
  pk_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Struct_Country_Pk_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string recent_player_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recent_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_recent_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recent_player_name(this->recent_player_name_size() - 1).data(),
            this->recent_player_name(this->recent_player_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_recent_player_name;
        if (input->ExpectTag(16)) goto parse_recent_player_score;
        break;
      }

      // repeated uint32 recent_player_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recent_player_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_recent_player_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_recent_player_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_recent_player_score;
        if (input->ExpectTag(24)) goto parse_recent_player_country;
        break;
      }

      // repeated uint32 recent_player_country = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recent_player_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_recent_player_country())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_recent_player_country())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_recent_player_country;
        if (input->ExpectTag(34)) goto parse_rank_no1_name;
        break;
      }

      // required string rank_no1_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_no1_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rank_no1_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rank_no1_name().data(), this->rank_no1_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_mirror_list;
        break;
      }

      // repeated .pb.Struct_Country_Pk_Player_mirror mirror_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mirror_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mirror_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_mirror_list;
        if (input->ExpectTag(50)) goto parse_pk_history;
        break;
      }

      // repeated .pb.Struct_Country_Pk_History pk_history = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pk_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pk_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pk_history;
        if (input->ExpectTag(56)) goto parse_is_pking;
        break;
      }

      // required bool is_pking = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_pking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pking_)));
          set_has_is_pking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_total_win;
        break;
      }

      // required uint32 total_win = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_win_)));
          set_has_total_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_total_lose;
        break;
      }

      // required uint32 total_lose = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_lose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_lose_)));
          set_has_total_lose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Struct_Country_Pk_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string recent_player_name = 1;
  for (int i = 0; i < this->recent_player_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->recent_player_name(i).data(), this->recent_player_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->recent_player_name(i), output);
  }

  // repeated uint32 recent_player_score = 2;
  for (int i = 0; i < this->recent_player_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->recent_player_score(i), output);
  }

  // repeated uint32 recent_player_country = 3;
  for (int i = 0; i < this->recent_player_country_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->recent_player_country(i), output);
  }

  // required string rank_no1_name = 4;
  if (has_rank_no1_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rank_no1_name().data(), this->rank_no1_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->rank_no1_name(), output);
  }

  // repeated .pb.Struct_Country_Pk_Player_mirror mirror_list = 5;
  for (int i = 0; i < this->mirror_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mirror_list(i), output);
  }

  // repeated .pb.Struct_Country_Pk_History pk_history = 6;
  for (int i = 0; i < this->pk_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pk_history(i), output);
  }

  // required bool is_pking = 7;
  if (has_is_pking()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_pking(), output);
  }

  // required uint32 total_win = 8;
  if (has_total_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->total_win(), output);
  }

  // required uint32 total_lose = 9;
  if (has_total_lose()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->total_lose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Struct_Country_Pk_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string recent_player_name = 1;
  for (int i = 0; i < this->recent_player_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recent_player_name(i).data(), this->recent_player_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->recent_player_name(i), target);
  }

  // repeated uint32 recent_player_score = 2;
  for (int i = 0; i < this->recent_player_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->recent_player_score(i), target);
  }

  // repeated uint32 recent_player_country = 3;
  for (int i = 0; i < this->recent_player_country_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->recent_player_country(i), target);
  }

  // required string rank_no1_name = 4;
  if (has_rank_no1_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rank_no1_name().data(), this->rank_no1_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rank_no1_name(), target);
  }

  // repeated .pb.Struct_Country_Pk_Player_mirror mirror_list = 5;
  for (int i = 0; i < this->mirror_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->mirror_list(i), target);
  }

  // repeated .pb.Struct_Country_Pk_History pk_history = 6;
  for (int i = 0; i < this->pk_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pk_history(i), target);
  }

  // required bool is_pking = 7;
  if (has_is_pking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_pking(), target);
  }

  // required uint32 total_win = 8;
  if (has_total_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->total_win(), target);
  }

  // required uint32 total_lose = 9;
  if (has_total_lose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->total_lose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Struct_Country_Pk_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // required string rank_no1_name = 4;
    if (has_rank_no1_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rank_no1_name());
    }

    // required bool is_pking = 7;
    if (has_is_pking()) {
      total_size += 1 + 1;
    }

    // required uint32 total_win = 8;
    if (has_total_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_win());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 total_lose = 9;
    if (has_total_lose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_lose());
    }

  }
  // repeated string recent_player_name = 1;
  total_size += 1 * this->recent_player_name_size();
  for (int i = 0; i < this->recent_player_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->recent_player_name(i));
  }

  // repeated uint32 recent_player_score = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->recent_player_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->recent_player_score(i));
    }
    total_size += 1 * this->recent_player_score_size() + data_size;
  }

  // repeated uint32 recent_player_country = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->recent_player_country_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->recent_player_country(i));
    }
    total_size += 1 * this->recent_player_country_size() + data_size;
  }

  // repeated .pb.Struct_Country_Pk_Player_mirror mirror_list = 5;
  total_size += 1 * this->mirror_list_size();
  for (int i = 0; i < this->mirror_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mirror_list(i));
  }

  // repeated .pb.Struct_Country_Pk_History pk_history = 6;
  total_size += 1 * this->pk_history_size();
  for (int i = 0; i < this->pk_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pk_history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Struct_Country_Pk_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Struct_Country_Pk_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Struct_Country_Pk_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Struct_Country_Pk_Info::MergeFrom(const Struct_Country_Pk_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  recent_player_name_.MergeFrom(from.recent_player_name_);
  recent_player_score_.MergeFrom(from.recent_player_score_);
  recent_player_country_.MergeFrom(from.recent_player_country_);
  mirror_list_.MergeFrom(from.mirror_list_);
  pk_history_.MergeFrom(from.pk_history_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_rank_no1_name()) {
      set_rank_no1_name(from.rank_no1_name());
    }
    if (from.has_is_pking()) {
      set_is_pking(from.is_pking());
    }
    if (from.has_total_win()) {
      set_total_win(from.total_win());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_total_lose()) {
      set_total_lose(from.total_lose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Struct_Country_Pk_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Struct_Country_Pk_Info::CopyFrom(const Struct_Country_Pk_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Struct_Country_Pk_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001c8) != 0x000001c8) return false;

  for (int i = 0; i < mirror_list_size(); i++) {
    if (!this->mirror_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < pk_history_size(); i++) {
    if (!this->pk_history(i).IsInitialized()) return false;
  }
  return true;
}

void Struct_Country_Pk_Info::Swap(Struct_Country_Pk_Info* other) {
  if (other != this) {
    recent_player_name_.Swap(&other->recent_player_name_);
    recent_player_score_.Swap(&other->recent_player_score_);
    recent_player_country_.Swap(&other->recent_player_country_);
    std::swap(rank_no1_name_, other->rank_no1_name_);
    mirror_list_.Swap(&other->mirror_list_);
    pk_history_.Swap(&other->pk_history_);
    std::swap(is_pking_, other->is_pking_);
    std::swap(total_win_, other->total_win_);
    std::swap(total_lose_, other->total_lose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Struct_Country_Pk_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Struct_Country_Pk_Info_descriptor_;
  metadata.reflection = Struct_Country_Pk_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Country_Task_Pk_Challenge::kIdxFieldNumber;
#endif  // !_MSC_VER

C2GS_Country_Task_Pk_Challenge::C2GS_Country_Task_Pk_Challenge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Country_Task_Pk_Challenge::InitAsDefaultInstance() {
}

C2GS_Country_Task_Pk_Challenge::C2GS_Country_Task_Pk_Challenge(const C2GS_Country_Task_Pk_Challenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Country_Task_Pk_Challenge::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Country_Task_Pk_Challenge::~C2GS_Country_Task_Pk_Challenge() {
  SharedDtor();
}

void C2GS_Country_Task_Pk_Challenge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Country_Task_Pk_Challenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Country_Task_Pk_Challenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Country_Task_Pk_Challenge_descriptor_;
}

const C2GS_Country_Task_Pk_Challenge& C2GS_Country_Task_Pk_Challenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

C2GS_Country_Task_Pk_Challenge* C2GS_Country_Task_Pk_Challenge::default_instance_ = NULL;

C2GS_Country_Task_Pk_Challenge* C2GS_Country_Task_Pk_Challenge::New() const {
  return new C2GS_Country_Task_Pk_Challenge;
}

void C2GS_Country_Task_Pk_Challenge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Country_Task_Pk_Challenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Country_Task_Pk_Challenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Country_Task_Pk_Challenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Country_Task_Pk_Challenge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Country_Task_Pk_Challenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Country_Task_Pk_Challenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Country_Task_Pk_Challenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Country_Task_Pk_Challenge::MergeFrom(const C2GS_Country_Task_Pk_Challenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Country_Task_Pk_Challenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Country_Task_Pk_Challenge::CopyFrom(const C2GS_Country_Task_Pk_Challenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Country_Task_Pk_Challenge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Country_Task_Pk_Challenge::Swap(C2GS_Country_Task_Pk_Challenge* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Country_Task_Pk_Challenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Country_Task_Pk_Challenge_descriptor_;
  metadata.reflection = C2GS_Country_Task_Pk_Challenge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Monster_City_All_Info::kAllInfoFieldNumber;
const int GS2C_Monster_City_All_Info::kCDEndTimeFieldNumber;
#endif  // !_MSC_VER

GS2C_Monster_City_All_Info::GS2C_Monster_City_All_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Monster_City_All_Info::InitAsDefaultInstance() {
  all_info_ = const_cast< ::pb::MonsterCityLst*>(&::pb::MonsterCityLst::default_instance());
}

GS2C_Monster_City_All_Info::GS2C_Monster_City_All_Info(const GS2C_Monster_City_All_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Monster_City_All_Info::SharedCtor() {
  _cached_size_ = 0;
  all_info_ = NULL;
  cdendtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Monster_City_All_Info::~GS2C_Monster_City_All_Info() {
  SharedDtor();
}

void GS2C_Monster_City_All_Info::SharedDtor() {
  if (this != default_instance_) {
    delete all_info_;
  }
}

void GS2C_Monster_City_All_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Monster_City_All_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Monster_City_All_Info_descriptor_;
}

const GS2C_Monster_City_All_Info& GS2C_Monster_City_All_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

GS2C_Monster_City_All_Info* GS2C_Monster_City_All_Info::default_instance_ = NULL;

GS2C_Monster_City_All_Info* GS2C_Monster_City_All_Info::New() const {
  return new GS2C_Monster_City_All_Info;
}

void GS2C_Monster_City_All_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_all_info()) {
      if (all_info_ != NULL) all_info_->::pb::MonsterCityLst::Clear();
    }
    cdendtime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Monster_City_All_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.MonsterCityLst all_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_all_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CDEndTime;
        break;
      }

      // optional uint64 CDEndTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CDEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cdendtime_)));
          set_has_cdendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Monster_City_All_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.MonsterCityLst all_info = 1;
  if (has_all_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->all_info(), output);
  }

  // optional uint64 CDEndTime = 2;
  if (has_cdendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cdendtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Monster_City_All_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.MonsterCityLst all_info = 1;
  if (has_all_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->all_info(), target);
  }

  // optional uint64 CDEndTime = 2;
  if (has_cdendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cdendtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Monster_City_All_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.MonsterCityLst all_info = 1;
    if (has_all_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->all_info());
    }

    // optional uint64 CDEndTime = 2;
    if (has_cdendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cdendtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Monster_City_All_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Monster_City_All_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Monster_City_All_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Monster_City_All_Info::MergeFrom(const GS2C_Monster_City_All_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_all_info()) {
      mutable_all_info()->::pb::MonsterCityLst::MergeFrom(from.all_info());
    }
    if (from.has_cdendtime()) {
      set_cdendtime(from.cdendtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Monster_City_All_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Monster_City_All_Info::CopyFrom(const GS2C_Monster_City_All_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Monster_City_All_Info::IsInitialized() const {

  if (has_all_info()) {
    if (!this->all_info().IsInitialized()) return false;
  }
  return true;
}

void GS2C_Monster_City_All_Info::Swap(GS2C_Monster_City_All_Info* other) {
  if (other != this) {
    std::swap(all_info_, other->all_info_);
    std::swap(cdendtime_, other->cdendtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Monster_City_All_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Monster_City_All_Info_descriptor_;
  metadata.reflection = GS2C_Monster_City_All_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Monster_City_Donate::kDestCountryIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Monster_City_Donate::C2GS_Monster_City_Donate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Monster_City_Donate::InitAsDefaultInstance() {
}

C2GS_Monster_City_Donate::C2GS_Monster_City_Donate(const C2GS_Monster_City_Donate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Monster_City_Donate::SharedCtor() {
  _cached_size_ = 0;
  dest_country_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Monster_City_Donate::~C2GS_Monster_City_Donate() {
  SharedDtor();
}

void C2GS_Monster_City_Donate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Monster_City_Donate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Monster_City_Donate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Monster_City_Donate_descriptor_;
}

const C2GS_Monster_City_Donate& C2GS_Monster_City_Donate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

C2GS_Monster_City_Donate* C2GS_Monster_City_Donate::default_instance_ = NULL;

C2GS_Monster_City_Donate* C2GS_Monster_City_Donate::New() const {
  return new C2GS_Monster_City_Donate;
}

void C2GS_Monster_City_Donate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dest_country_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Monster_City_Donate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dest_country_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_country_id_)));
          set_has_dest_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Monster_City_Donate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 dest_country_id = 1;
  if (has_dest_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dest_country_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Monster_City_Donate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 dest_country_id = 1;
  if (has_dest_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dest_country_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Monster_City_Donate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dest_country_id = 1;
    if (has_dest_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_country_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Monster_City_Donate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Monster_City_Donate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Monster_City_Donate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Monster_City_Donate::MergeFrom(const C2GS_Monster_City_Donate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dest_country_id()) {
      set_dest_country_id(from.dest_country_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Monster_City_Donate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Monster_City_Donate::CopyFrom(const C2GS_Monster_City_Donate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Monster_City_Donate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Monster_City_Donate::Swap(C2GS_Monster_City_Donate* other) {
  if (other != this) {
    std::swap(dest_country_id_, other->dest_country_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Monster_City_Donate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Monster_City_Donate_descriptor_;
  metadata.reflection = C2GS_Monster_City_Donate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Monster_City_Donate::kRewardFieldNumber;
const int GS2C_Monster_City_Donate::kInfoFieldNumber;
const int GS2C_Monster_City_Donate::kCDEndTimeFieldNumber;
#endif  // !_MSC_VER

GS2C_Monster_City_Donate::GS2C_Monster_City_Donate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Monster_City_Donate::InitAsDefaultInstance() {
  reward_ = const_cast< ::pb::StReward*>(&::pb::StReward::default_instance());
  info_ = const_cast< ::pb::MonsterCity*>(&::pb::MonsterCity::default_instance());
}

GS2C_Monster_City_Donate::GS2C_Monster_City_Donate(const GS2C_Monster_City_Donate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Monster_City_Donate::SharedCtor() {
  _cached_size_ = 0;
  reward_ = NULL;
  info_ = NULL;
  cdendtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Monster_City_Donate::~GS2C_Monster_City_Donate() {
  SharedDtor();
}

void GS2C_Monster_City_Donate::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
    delete info_;
  }
}

void GS2C_Monster_City_Donate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Monster_City_Donate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Monster_City_Donate_descriptor_;
}

const GS2C_Monster_City_Donate& GS2C_Monster_City_Donate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

GS2C_Monster_City_Donate* GS2C_Monster_City_Donate::default_instance_ = NULL;

GS2C_Monster_City_Donate* GS2C_Monster_City_Donate::New() const {
  return new GS2C_Monster_City_Donate;
}

void GS2C_Monster_City_Donate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_reward()) {
      if (reward_ != NULL) reward_->::pb::StReward::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::pb::MonsterCity::Clear();
    }
    cdendtime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Monster_City_Donate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.StReward reward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .pb.MonsterCity info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CDEndTime;
        break;
      }

      // optional uint64 CDEndTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CDEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cdendtime_)));
          set_has_cdendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Monster_City_Donate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.StReward reward = 1;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward(), output);
  }

  // optional .pb.MonsterCity info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  // optional uint64 CDEndTime = 3;
  if (has_cdendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cdendtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Monster_City_Donate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.StReward reward = 1;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward(), target);
  }

  // optional .pb.MonsterCity info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  // optional uint64 CDEndTime = 3;
  if (has_cdendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cdendtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Monster_City_Donate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.StReward reward = 1;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

    // optional .pb.MonsterCity info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional uint64 CDEndTime = 3;
    if (has_cdendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cdendtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Monster_City_Donate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Monster_City_Donate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Monster_City_Donate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Monster_City_Donate::MergeFrom(const GS2C_Monster_City_Donate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward()) {
      mutable_reward()->::pb::StReward::MergeFrom(from.reward());
    }
    if (from.has_info()) {
      mutable_info()->::pb::MonsterCity::MergeFrom(from.info());
    }
    if (from.has_cdendtime()) {
      set_cdendtime(from.cdendtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Monster_City_Donate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Monster_City_Donate::CopyFrom(const GS2C_Monster_City_Donate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Monster_City_Donate::IsInitialized() const {

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void GS2C_Monster_City_Donate::Swap(GS2C_Monster_City_Donate* other) {
  if (other != this) {
    std::swap(reward_, other->reward_);
    std::swap(info_, other->info_);
    std::swap(cdendtime_, other->cdendtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Monster_City_Donate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Monster_City_Donate_descriptor_;
  metadata.reflection = GS2C_Monster_City_Donate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Monster_City_Start_Invade::kDestCountryIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Monster_City_Start_Invade::C2GS_Monster_City_Start_Invade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Monster_City_Start_Invade::InitAsDefaultInstance() {
}

C2GS_Monster_City_Start_Invade::C2GS_Monster_City_Start_Invade(const C2GS_Monster_City_Start_Invade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Monster_City_Start_Invade::SharedCtor() {
  _cached_size_ = 0;
  dest_country_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Monster_City_Start_Invade::~C2GS_Monster_City_Start_Invade() {
  SharedDtor();
}

void C2GS_Monster_City_Start_Invade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Monster_City_Start_Invade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Monster_City_Start_Invade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Monster_City_Start_Invade_descriptor_;
}

const C2GS_Monster_City_Start_Invade& C2GS_Monster_City_Start_Invade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

C2GS_Monster_City_Start_Invade* C2GS_Monster_City_Start_Invade::default_instance_ = NULL;

C2GS_Monster_City_Start_Invade* C2GS_Monster_City_Start_Invade::New() const {
  return new C2GS_Monster_City_Start_Invade;
}

void C2GS_Monster_City_Start_Invade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dest_country_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Monster_City_Start_Invade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dest_country_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_country_id_)));
          set_has_dest_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Monster_City_Start_Invade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 dest_country_id = 1;
  if (has_dest_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dest_country_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Monster_City_Start_Invade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 dest_country_id = 1;
  if (has_dest_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dest_country_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Monster_City_Start_Invade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dest_country_id = 1;
    if (has_dest_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_country_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Monster_City_Start_Invade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Monster_City_Start_Invade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Monster_City_Start_Invade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Monster_City_Start_Invade::MergeFrom(const C2GS_Monster_City_Start_Invade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dest_country_id()) {
      set_dest_country_id(from.dest_country_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Monster_City_Start_Invade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Monster_City_Start_Invade::CopyFrom(const C2GS_Monster_City_Start_Invade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Monster_City_Start_Invade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Monster_City_Start_Invade::Swap(C2GS_Monster_City_Start_Invade* other) {
  if (other != this) {
    std::swap(dest_country_id_, other->dest_country_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Monster_City_Start_Invade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Monster_City_Start_Invade_descriptor_;
  metadata.reflection = C2GS_Monster_City_Start_Invade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Monster_City_Invade_Rsp::kRetFieldNumber;
const int GS2C_Monster_City_Invade_Rsp::kInfoFieldNumber;
#endif  // !_MSC_VER

GS2C_Monster_City_Invade_Rsp::GS2C_Monster_City_Invade_Rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Monster_City_Invade_Rsp::InitAsDefaultInstance() {
  info_ = const_cast< ::pb::MonsterCity*>(&::pb::MonsterCity::default_instance());
}

GS2C_Monster_City_Invade_Rsp::GS2C_Monster_City_Invade_Rsp(const GS2C_Monster_City_Invade_Rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Monster_City_Invade_Rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Monster_City_Invade_Rsp::~GS2C_Monster_City_Invade_Rsp() {
  SharedDtor();
}

void GS2C_Monster_City_Invade_Rsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void GS2C_Monster_City_Invade_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Monster_City_Invade_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Monster_City_Invade_Rsp_descriptor_;
}

const GS2C_Monster_City_Invade_Rsp& GS2C_Monster_City_Invade_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

GS2C_Monster_City_Invade_Rsp* GS2C_Monster_City_Invade_Rsp::default_instance_ = NULL;

GS2C_Monster_City_Invade_Rsp* GS2C_Monster_City_Invade_Rsp::New() const {
  return new GS2C_Monster_City_Invade_Rsp;
}

void GS2C_Monster_City_Invade_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::pb::MonsterCity::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Monster_City_Invade_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .pb.MonsterCity info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Monster_City_Invade_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // optional .pb.MonsterCity info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Monster_City_Invade_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // optional .pb.MonsterCity info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Monster_City_Invade_Rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional .pb.MonsterCity info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Monster_City_Invade_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Monster_City_Invade_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Monster_City_Invade_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Monster_City_Invade_Rsp::MergeFrom(const GS2C_Monster_City_Invade_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_info()) {
      mutable_info()->::pb::MonsterCity::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Monster_City_Invade_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Monster_City_Invade_Rsp::CopyFrom(const GS2C_Monster_City_Invade_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Monster_City_Invade_Rsp::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void GS2C_Monster_City_Invade_Rsp::Swap(GS2C_Monster_City_Invade_Rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Monster_City_Invade_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Monster_City_Invade_Rsp_descriptor_;
  metadata.reflection = GS2C_Monster_City_Invade_Rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Country_Task_Insvest::kIsBeginFieldNumber;
const int GS2C_Country_Task_Insvest::kCurStageFieldNumber;
const int GS2C_Country_Task_Insvest::kCurStageBeginTimeFieldNumber;
const int GS2C_Country_Task_Insvest::kCurStageNowCountryInvestMoneyFieldNumber;
#endif  // !_MSC_VER

GS2C_Country_Task_Insvest::GS2C_Country_Task_Insvest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Country_Task_Insvest::InitAsDefaultInstance() {
}

GS2C_Country_Task_Insvest::GS2C_Country_Task_Insvest(const GS2C_Country_Task_Insvest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Country_Task_Insvest::SharedCtor() {
  _cached_size_ = 0;
  is_begin_ = false;
  cur_stage_ = 0u;
  cur_stage_begin_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Country_Task_Insvest::~GS2C_Country_Task_Insvest() {
  SharedDtor();
}

void GS2C_Country_Task_Insvest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Country_Task_Insvest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Country_Task_Insvest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Country_Task_Insvest_descriptor_;
}

const GS2C_Country_Task_Insvest& GS2C_Country_Task_Insvest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

GS2C_Country_Task_Insvest* GS2C_Country_Task_Insvest::default_instance_ = NULL;

GS2C_Country_Task_Insvest* GS2C_Country_Task_Insvest::New() const {
  return new GS2C_Country_Task_Insvest;
}

void GS2C_Country_Task_Insvest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_begin_ = false;
    cur_stage_ = 0u;
    cur_stage_begin_time_ = GOOGLE_ULONGLONG(0);
  }
  cur_stage_now_country_invest_money_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Country_Task_Insvest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_begin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_begin_)));
          set_has_is_begin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_stage;
        break;
      }

      // optional uint32 cur_stage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_stage_)));
          set_has_cur_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_stage_begin_time;
        break;
      }

      // optional uint64 cur_stage_begin_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_stage_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_stage_begin_time_)));
          set_has_cur_stage_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_stage_now_country_invest_money;
        break;
      }

      // repeated uint32 cur_stage_now_country_invest_money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_stage_now_country_invest_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_cur_stage_now_country_invest_money())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cur_stage_now_country_invest_money())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_stage_now_country_invest_money;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Country_Task_Insvest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_begin = 1;
  if (has_is_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_begin(), output);
  }

  // optional uint32 cur_stage = 2;
  if (has_cur_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_stage(), output);
  }

  // optional uint64 cur_stage_begin_time = 3;
  if (has_cur_stage_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cur_stage_begin_time(), output);
  }

  // repeated uint32 cur_stage_now_country_invest_money = 4;
  for (int i = 0; i < this->cur_stage_now_country_invest_money_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->cur_stage_now_country_invest_money(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Country_Task_Insvest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_begin = 1;
  if (has_is_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_begin(), target);
  }

  // optional uint32 cur_stage = 2;
  if (has_cur_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_stage(), target);
  }

  // optional uint64 cur_stage_begin_time = 3;
  if (has_cur_stage_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cur_stage_begin_time(), target);
  }

  // repeated uint32 cur_stage_now_country_invest_money = 4;
  for (int i = 0; i < this->cur_stage_now_country_invest_money_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->cur_stage_now_country_invest_money(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Country_Task_Insvest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_begin = 1;
    if (has_is_begin()) {
      total_size += 1 + 1;
    }

    // optional uint32 cur_stage = 2;
    if (has_cur_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_stage());
    }

    // optional uint64 cur_stage_begin_time = 3;
    if (has_cur_stage_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_stage_begin_time());
    }

  }
  // repeated uint32 cur_stage_now_country_invest_money = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cur_stage_now_country_invest_money_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cur_stage_now_country_invest_money(i));
    }
    total_size += 1 * this->cur_stage_now_country_invest_money_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Country_Task_Insvest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Country_Task_Insvest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Country_Task_Insvest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Country_Task_Insvest::MergeFrom(const GS2C_Country_Task_Insvest& from) {
  GOOGLE_CHECK_NE(&from, this);
  cur_stage_now_country_invest_money_.MergeFrom(from.cur_stage_now_country_invest_money_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_begin()) {
      set_is_begin(from.is_begin());
    }
    if (from.has_cur_stage()) {
      set_cur_stage(from.cur_stage());
    }
    if (from.has_cur_stage_begin_time()) {
      set_cur_stage_begin_time(from.cur_stage_begin_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Country_Task_Insvest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Country_Task_Insvest::CopyFrom(const GS2C_Country_Task_Insvest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Country_Task_Insvest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Country_Task_Insvest::Swap(GS2C_Country_Task_Insvest* other) {
  if (other != this) {
    std::swap(is_begin_, other->is_begin_);
    std::swap(cur_stage_, other->cur_stage_);
    std::swap(cur_stage_begin_time_, other->cur_stage_begin_time_);
    cur_stage_now_country_invest_money_.Swap(&other->cur_stage_now_country_invest_money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Country_Task_Insvest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Country_Task_Insvest_descriptor_;
  metadata.reflection = GS2C_Country_Task_Insvest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Country_Invest_Player::kStageIDFieldNumber;
const int GS2C_Country_Invest_Player::kRankIDFieldNumber;
const int GS2C_Country_Invest_Player::kDonateNumFieldNumber;
const int GS2C_Country_Invest_Player::kIsTakeRewardFieldNumber;
const int GS2C_Country_Invest_Player::kCanTakeExRewardFieldNumber;
const int GS2C_Country_Invest_Player::kCdTimeFieldNumber;
const int GS2C_Country_Invest_Player::kRankRewardFieldNumber;
const int GS2C_Country_Invest_Player::kWinRewardFieldNumber;
const int GS2C_Country_Invest_Player::kTotalDonateFieldNumber;
#endif  // !_MSC_VER

GS2C_Country_Invest_Player::GS2C_Country_Invest_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Country_Invest_Player::InitAsDefaultInstance() {
  rank_reward_ = const_cast< ::pb::GS2C_LootList*>(&::pb::GS2C_LootList::default_instance());
  win_reward_ = const_cast< ::pb::GS2C_LootList*>(&::pb::GS2C_LootList::default_instance());
}

GS2C_Country_Invest_Player::GS2C_Country_Invest_Player(const GS2C_Country_Invest_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Country_Invest_Player::SharedCtor() {
  _cached_size_ = 0;
  stageid_ = 0u;
  rankid_ = 0u;
  donatenum_ = 0u;
  is_take_reward_ = false;
  cantakeexreward_ = false;
  cd_time_ = GOOGLE_ULONGLONG(0);
  rank_reward_ = NULL;
  win_reward_ = NULL;
  total_donate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Country_Invest_Player::~GS2C_Country_Invest_Player() {
  SharedDtor();
}

void GS2C_Country_Invest_Player::SharedDtor() {
  if (this != default_instance_) {
    delete rank_reward_;
    delete win_reward_;
  }
}

void GS2C_Country_Invest_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Country_Invest_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Country_Invest_Player_descriptor_;
}

const GS2C_Country_Invest_Player& GS2C_Country_Invest_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

GS2C_Country_Invest_Player* GS2C_Country_Invest_Player::default_instance_ = NULL;

GS2C_Country_Invest_Player* GS2C_Country_Invest_Player::New() const {
  return new GS2C_Country_Invest_Player;
}

void GS2C_Country_Invest_Player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stageid_ = 0u;
    rankid_ = 0u;
    donatenum_ = 0u;
    is_take_reward_ = false;
    cantakeexreward_ = false;
    cd_time_ = GOOGLE_ULONGLONG(0);
    if (has_rank_reward()) {
      if (rank_reward_ != NULL) rank_reward_->::pb::GS2C_LootList::Clear();
    }
    if (has_win_reward()) {
      if (win_reward_ != NULL) win_reward_->::pb::GS2C_LootList::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    total_donate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Country_Invest_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stageID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stageid_)));
          set_has_stageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rankID;
        break;
      }

      // optional uint32 rankID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_donateNum;
        break;
      }

      // optional uint32 donateNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_donateNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donatenum_)));
          set_has_donatenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_take_reward;
        break;
      }

      // optional bool is_take_reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_take_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_take_reward_)));
          set_has_is_take_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_canTakeExReward;
        break;
      }

      // optional bool canTakeExReward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canTakeExReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cantakeexreward_)));
          set_has_cantakeexreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cd_time;
        break;
      }

      // optional uint64 cd_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cd_time_)));
          set_has_cd_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rank_reward;
        break;
      }

      // optional .pb.GS2C_LootList rank_reward = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rank_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_win_reward;
        break;
      }

      // optional .pb.GS2C_LootList win_reward = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_win_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_win_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_total_donate;
        break;
      }

      // optional uint32 total_donate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_donate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_donate_)));
          set_has_total_donate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Country_Invest_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stageID = 1;
  if (has_stageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stageid(), output);
  }

  // optional uint32 rankID = 2;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rankid(), output);
  }

  // optional uint32 donateNum = 3;
  if (has_donatenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->donatenum(), output);
  }

  // optional bool is_take_reward = 4;
  if (has_is_take_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_take_reward(), output);
  }

  // optional bool canTakeExReward = 5;
  if (has_cantakeexreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->cantakeexreward(), output);
  }

  // optional uint64 cd_time = 6;
  if (has_cd_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->cd_time(), output);
  }

  // optional .pb.GS2C_LootList rank_reward = 7;
  if (has_rank_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->rank_reward(), output);
  }

  // optional .pb.GS2C_LootList win_reward = 8;
  if (has_win_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->win_reward(), output);
  }

  // optional uint32 total_donate = 9;
  if (has_total_donate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->total_donate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Country_Invest_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 stageID = 1;
  if (has_stageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stageid(), target);
  }

  // optional uint32 rankID = 2;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rankid(), target);
  }

  // optional uint32 donateNum = 3;
  if (has_donatenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->donatenum(), target);
  }

  // optional bool is_take_reward = 4;
  if (has_is_take_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_take_reward(), target);
  }

  // optional bool canTakeExReward = 5;
  if (has_cantakeexreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->cantakeexreward(), target);
  }

  // optional uint64 cd_time = 6;
  if (has_cd_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->cd_time(), target);
  }

  // optional .pb.GS2C_LootList rank_reward = 7;
  if (has_rank_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->rank_reward(), target);
  }

  // optional .pb.GS2C_LootList win_reward = 8;
  if (has_win_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->win_reward(), target);
  }

  // optional uint32 total_donate = 9;
  if (has_total_donate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->total_donate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Country_Invest_Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stageID = 1;
    if (has_stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stageid());
    }

    // optional uint32 rankID = 2;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rankid());
    }

    // optional uint32 donateNum = 3;
    if (has_donatenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donatenum());
    }

    // optional bool is_take_reward = 4;
    if (has_is_take_reward()) {
      total_size += 1 + 1;
    }

    // optional bool canTakeExReward = 5;
    if (has_cantakeexreward()) {
      total_size += 1 + 1;
    }

    // optional uint64 cd_time = 6;
    if (has_cd_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cd_time());
    }

    // optional .pb.GS2C_LootList rank_reward = 7;
    if (has_rank_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rank_reward());
    }

    // optional .pb.GS2C_LootList win_reward = 8;
    if (has_win_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->win_reward());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 total_donate = 9;
    if (has_total_donate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_donate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Country_Invest_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Country_Invest_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Country_Invest_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Country_Invest_Player::MergeFrom(const GS2C_Country_Invest_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stageid()) {
      set_stageid(from.stageid());
    }
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
    if (from.has_donatenum()) {
      set_donatenum(from.donatenum());
    }
    if (from.has_is_take_reward()) {
      set_is_take_reward(from.is_take_reward());
    }
    if (from.has_cantakeexreward()) {
      set_cantakeexreward(from.cantakeexreward());
    }
    if (from.has_cd_time()) {
      set_cd_time(from.cd_time());
    }
    if (from.has_rank_reward()) {
      mutable_rank_reward()->::pb::GS2C_LootList::MergeFrom(from.rank_reward());
    }
    if (from.has_win_reward()) {
      mutable_win_reward()->::pb::GS2C_LootList::MergeFrom(from.win_reward());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_total_donate()) {
      set_total_donate(from.total_donate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Country_Invest_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Country_Invest_Player::CopyFrom(const GS2C_Country_Invest_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Country_Invest_Player::IsInitialized() const {

  return true;
}

void GS2C_Country_Invest_Player::Swap(GS2C_Country_Invest_Player* other) {
  if (other != this) {
    std::swap(stageid_, other->stageid_);
    std::swap(rankid_, other->rankid_);
    std::swap(donatenum_, other->donatenum_);
    std::swap(is_take_reward_, other->is_take_reward_);
    std::swap(cantakeexreward_, other->cantakeexreward_);
    std::swap(cd_time_, other->cd_time_);
    std::swap(rank_reward_, other->rank_reward_);
    std::swap(win_reward_, other->win_reward_);
    std::swap(total_donate_, other->total_donate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Country_Invest_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Country_Invest_Player_descriptor_;
  metadata.reflection = GS2C_Country_Invest_Player_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Country_Invest_Donate::kStageFieldNumber;
#endif  // !_MSC_VER

C2GS_Country_Invest_Donate::C2GS_Country_Invest_Donate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Country_Invest_Donate::InitAsDefaultInstance() {
}

C2GS_Country_Invest_Donate::C2GS_Country_Invest_Donate(const C2GS_Country_Invest_Donate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Country_Invest_Donate::SharedCtor() {
  _cached_size_ = 0;
  stage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Country_Invest_Donate::~C2GS_Country_Invest_Donate() {
  SharedDtor();
}

void C2GS_Country_Invest_Donate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Country_Invest_Donate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Country_Invest_Donate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Country_Invest_Donate_descriptor_;
}

const C2GS_Country_Invest_Donate& C2GS_Country_Invest_Donate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

C2GS_Country_Invest_Donate* C2GS_Country_Invest_Donate::default_instance_ = NULL;

C2GS_Country_Invest_Donate* C2GS_Country_Invest_Donate::New() const {
  return new C2GS_Country_Invest_Donate;
}

void C2GS_Country_Invest_Donate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Country_Invest_Donate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Country_Invest_Donate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stage = 1;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Country_Invest_Donate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 stage = 1;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Country_Invest_Donate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stage = 1;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Country_Invest_Donate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Country_Invest_Donate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Country_Invest_Donate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Country_Invest_Donate::MergeFrom(const C2GS_Country_Invest_Donate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage()) {
      set_stage(from.stage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Country_Invest_Donate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Country_Invest_Donate::CopyFrom(const C2GS_Country_Invest_Donate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Country_Invest_Donate::IsInitialized() const {

  return true;
}

void C2GS_Country_Invest_Donate::Swap(C2GS_Country_Invest_Donate* other) {
  if (other != this) {
    std::swap(stage_, other->stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Country_Invest_Donate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Country_Invest_Donate_descriptor_;
  metadata.reflection = C2GS_Country_Invest_Donate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Country_Invest_Donate_Ret::kIsSuccessFieldNumber;
const int GS2C_Country_Invest_Donate_Ret::kErrRetFieldNumber;
const int GS2C_Country_Invest_Donate_Ret::kMyInvestMoneyFieldNumber;
const int GS2C_Country_Invest_Donate_Ret::kCountryInvestMoneyFieldNumber;
const int GS2C_Country_Invest_Donate_Ret::kCdTimeFieldNumber;
const int GS2C_Country_Invest_Donate_Ret::kTotalDonateFieldNumber;
const int GS2C_Country_Invest_Donate_Ret::kSuccessAwardFieldNumber;
#endif  // !_MSC_VER

GS2C_Country_Invest_Donate_Ret::GS2C_Country_Invest_Donate_Ret()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Country_Invest_Donate_Ret::InitAsDefaultInstance() {
  successaward_ = const_cast< ::pb::GS2C_LootList*>(&::pb::GS2C_LootList::default_instance());
}

GS2C_Country_Invest_Donate_Ret::GS2C_Country_Invest_Donate_Ret(const GS2C_Country_Invest_Donate_Ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Country_Invest_Donate_Ret::SharedCtor() {
  _cached_size_ = 0;
  issuccess_ = false;
  errret_ = 1;
  my_invest_money_ = 0u;
  country_invest_money_ = 0u;
  cd_time_ = GOOGLE_ULONGLONG(0);
  total_donate_ = 0u;
  successaward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Country_Invest_Donate_Ret::~GS2C_Country_Invest_Donate_Ret() {
  SharedDtor();
}

void GS2C_Country_Invest_Donate_Ret::SharedDtor() {
  if (this != default_instance_) {
    delete successaward_;
  }
}

void GS2C_Country_Invest_Donate_Ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Country_Invest_Donate_Ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Country_Invest_Donate_Ret_descriptor_;
}

const GS2C_Country_Invest_Donate_Ret& GS2C_Country_Invest_Donate_Ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

GS2C_Country_Invest_Donate_Ret* GS2C_Country_Invest_Donate_Ret::default_instance_ = NULL;

GS2C_Country_Invest_Donate_Ret* GS2C_Country_Invest_Donate_Ret::New() const {
  return new GS2C_Country_Invest_Donate_Ret;
}

void GS2C_Country_Invest_Donate_Ret::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    issuccess_ = false;
    errret_ = 1;
    my_invest_money_ = 0u;
    country_invest_money_ = 0u;
    cd_time_ = GOOGLE_ULONGLONG(0);
    total_donate_ = 0u;
    if (has_successaward()) {
      if (successaward_ != NULL) successaward_->::pb::GS2C_LootList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Country_Invest_Donate_Ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isSuccess = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issuccess_)));
          set_has_issuccess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_errRet;
        break;
      }

      // optional .pb.Country_Task_Err errRet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errRet:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Country_Task_Err_IsValid(value)) {
            set_errret(static_cast< ::pb::Country_Task_Err >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_my_invest_money;
        break;
      }

      // optional uint32 my_invest_money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_invest_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &my_invest_money_)));
          set_has_my_invest_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_country_invest_money;
        break;
      }

      // optional uint32 country_invest_money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country_invest_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_invest_money_)));
          set_has_country_invest_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cd_time;
        break;
      }

      // optional uint64 cd_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cd_time_)));
          set_has_cd_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_total_donate;
        break;
      }

      // optional uint32 total_donate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_donate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_donate_)));
          set_has_total_donate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_successAward;
        break;
      }

      // optional .pb.GS2C_LootList successAward = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_successAward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_successaward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Country_Invest_Donate_Ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isSuccess = 1;
  if (has_issuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->issuccess(), output);
  }

  // optional .pb.Country_Task_Err errRet = 2;
  if (has_errret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->errret(), output);
  }

  // optional uint32 my_invest_money = 3;
  if (has_my_invest_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->my_invest_money(), output);
  }

  // optional uint32 country_invest_money = 4;
  if (has_country_invest_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->country_invest_money(), output);
  }

  // optional uint64 cd_time = 5;
  if (has_cd_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->cd_time(), output);
  }

  // optional uint32 total_donate = 6;
  if (has_total_donate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->total_donate(), output);
  }

  // optional .pb.GS2C_LootList successAward = 7;
  if (has_successaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->successaward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Country_Invest_Donate_Ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isSuccess = 1;
  if (has_issuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->issuccess(), target);
  }

  // optional .pb.Country_Task_Err errRet = 2;
  if (has_errret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->errret(), target);
  }

  // optional uint32 my_invest_money = 3;
  if (has_my_invest_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->my_invest_money(), target);
  }

  // optional uint32 country_invest_money = 4;
  if (has_country_invest_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->country_invest_money(), target);
  }

  // optional uint64 cd_time = 5;
  if (has_cd_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->cd_time(), target);
  }

  // optional uint32 total_donate = 6;
  if (has_total_donate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->total_donate(), target);
  }

  // optional .pb.GS2C_LootList successAward = 7;
  if (has_successaward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->successaward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Country_Invest_Donate_Ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isSuccess = 1;
    if (has_issuccess()) {
      total_size += 1 + 1;
    }

    // optional .pb.Country_Task_Err errRet = 2;
    if (has_errret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->errret());
    }

    // optional uint32 my_invest_money = 3;
    if (has_my_invest_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->my_invest_money());
    }

    // optional uint32 country_invest_money = 4;
    if (has_country_invest_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_invest_money());
    }

    // optional uint64 cd_time = 5;
    if (has_cd_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cd_time());
    }

    // optional uint32 total_donate = 6;
    if (has_total_donate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_donate());
    }

    // optional .pb.GS2C_LootList successAward = 7;
    if (has_successaward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->successaward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Country_Invest_Donate_Ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Country_Invest_Donate_Ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Country_Invest_Donate_Ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Country_Invest_Donate_Ret::MergeFrom(const GS2C_Country_Invest_Donate_Ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issuccess()) {
      set_issuccess(from.issuccess());
    }
    if (from.has_errret()) {
      set_errret(from.errret());
    }
    if (from.has_my_invest_money()) {
      set_my_invest_money(from.my_invest_money());
    }
    if (from.has_country_invest_money()) {
      set_country_invest_money(from.country_invest_money());
    }
    if (from.has_cd_time()) {
      set_cd_time(from.cd_time());
    }
    if (from.has_total_donate()) {
      set_total_donate(from.total_donate());
    }
    if (from.has_successaward()) {
      mutable_successaward()->::pb::GS2C_LootList::MergeFrom(from.successaward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Country_Invest_Donate_Ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Country_Invest_Donate_Ret::CopyFrom(const GS2C_Country_Invest_Donate_Ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Country_Invest_Donate_Ret::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Country_Invest_Donate_Ret::Swap(GS2C_Country_Invest_Donate_Ret* other) {
  if (other != this) {
    std::swap(issuccess_, other->issuccess_);
    std::swap(errret_, other->errret_);
    std::swap(my_invest_money_, other->my_invest_money_);
    std::swap(country_invest_money_, other->country_invest_money_);
    std::swap(cd_time_, other->cd_time_);
    std::swap(total_donate_, other->total_donate_);
    std::swap(successaward_, other->successaward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Country_Invest_Donate_Ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Country_Invest_Donate_Ret_descriptor_;
  metadata.reflection = GS2C_Country_Invest_Donate_Ret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Country_Invest_Take_Reward::kStageFieldNumber;
#endif  // !_MSC_VER

C2GS_Country_Invest_Take_Reward::C2GS_Country_Invest_Take_Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Country_Invest_Take_Reward::InitAsDefaultInstance() {
}

C2GS_Country_Invest_Take_Reward::C2GS_Country_Invest_Take_Reward(const C2GS_Country_Invest_Take_Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Country_Invest_Take_Reward::SharedCtor() {
  _cached_size_ = 0;
  stage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Country_Invest_Take_Reward::~C2GS_Country_Invest_Take_Reward() {
  SharedDtor();
}

void C2GS_Country_Invest_Take_Reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Country_Invest_Take_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Country_Invest_Take_Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Country_Invest_Take_Reward_descriptor_;
}

const C2GS_Country_Invest_Take_Reward& C2GS_Country_Invest_Take_Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

C2GS_Country_Invest_Take_Reward* C2GS_Country_Invest_Take_Reward::default_instance_ = NULL;

C2GS_Country_Invest_Take_Reward* C2GS_Country_Invest_Take_Reward::New() const {
  return new C2GS_Country_Invest_Take_Reward;
}

void C2GS_Country_Invest_Take_Reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Country_Invest_Take_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Country_Invest_Take_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stage = 1;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Country_Invest_Take_Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 stage = 1;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Country_Invest_Take_Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stage = 1;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Country_Invest_Take_Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Country_Invest_Take_Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Country_Invest_Take_Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Country_Invest_Take_Reward::MergeFrom(const C2GS_Country_Invest_Take_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage()) {
      set_stage(from.stage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Country_Invest_Take_Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Country_Invest_Take_Reward::CopyFrom(const C2GS_Country_Invest_Take_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Country_Invest_Take_Reward::IsInitialized() const {

  return true;
}

void C2GS_Country_Invest_Take_Reward::Swap(C2GS_Country_Invest_Take_Reward* other) {
  if (other != this) {
    std::swap(stage_, other->stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Country_Invest_Take_Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Country_Invest_Take_Reward_descriptor_;
  metadata.reflection = C2GS_Country_Invest_Take_Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Country_Invest_Take_Reward::kIsSuccessFieldNumber;
const int GS2C_Country_Invest_Take_Reward::kErrRetFieldNumber;
#endif  // !_MSC_VER

GS2C_Country_Invest_Take_Reward::GS2C_Country_Invest_Take_Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Country_Invest_Take_Reward::InitAsDefaultInstance() {
}

GS2C_Country_Invest_Take_Reward::GS2C_Country_Invest_Take_Reward(const GS2C_Country_Invest_Take_Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Country_Invest_Take_Reward::SharedCtor() {
  _cached_size_ = 0;
  issuccess_ = false;
  errret_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Country_Invest_Take_Reward::~GS2C_Country_Invest_Take_Reward() {
  SharedDtor();
}

void GS2C_Country_Invest_Take_Reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Country_Invest_Take_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Country_Invest_Take_Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Country_Invest_Take_Reward_descriptor_;
}

const GS2C_Country_Invest_Take_Reward& GS2C_Country_Invest_Take_Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

GS2C_Country_Invest_Take_Reward* GS2C_Country_Invest_Take_Reward::default_instance_ = NULL;

GS2C_Country_Invest_Take_Reward* GS2C_Country_Invest_Take_Reward::New() const {
  return new GS2C_Country_Invest_Take_Reward;
}

void GS2C_Country_Invest_Take_Reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    issuccess_ = false;
    errret_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Country_Invest_Take_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isSuccess = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issuccess_)));
          set_has_issuccess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_errRet;
        break;
      }

      // optional .pb.Country_Task_Err errRet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errRet:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Country_Task_Err_IsValid(value)) {
            set_errret(static_cast< ::pb::Country_Task_Err >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Country_Invest_Take_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isSuccess = 1;
  if (has_issuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->issuccess(), output);
  }

  // optional .pb.Country_Task_Err errRet = 2;
  if (has_errret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->errret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Country_Invest_Take_Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isSuccess = 1;
  if (has_issuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->issuccess(), target);
  }

  // optional .pb.Country_Task_Err errRet = 2;
  if (has_errret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->errret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Country_Invest_Take_Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isSuccess = 1;
    if (has_issuccess()) {
      total_size += 1 + 1;
    }

    // optional .pb.Country_Task_Err errRet = 2;
    if (has_errret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->errret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Country_Invest_Take_Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Country_Invest_Take_Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Country_Invest_Take_Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Country_Invest_Take_Reward::MergeFrom(const GS2C_Country_Invest_Take_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issuccess()) {
      set_issuccess(from.issuccess());
    }
    if (from.has_errret()) {
      set_errret(from.errret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Country_Invest_Take_Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Country_Invest_Take_Reward::CopyFrom(const GS2C_Country_Invest_Take_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Country_Invest_Take_Reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Country_Invest_Take_Reward::Swap(GS2C_Country_Invest_Take_Reward* other) {
  if (other != this) {
    std::swap(issuccess_, other->issuccess_);
    std::swap(errret_, other->errret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Country_Invest_Take_Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Country_Invest_Take_Reward_descriptor_;
  metadata.reflection = GS2C_Country_Invest_Take_Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Country_Invest_Clear_CD_Ret::kIsSuccessFieldNumber;
const int GS2C_Country_Invest_Clear_CD_Ret::kErrRetFieldNumber;
#endif  // !_MSC_VER

GS2C_Country_Invest_Clear_CD_Ret::GS2C_Country_Invest_Clear_CD_Ret()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Country_Invest_Clear_CD_Ret::InitAsDefaultInstance() {
}

GS2C_Country_Invest_Clear_CD_Ret::GS2C_Country_Invest_Clear_CD_Ret(const GS2C_Country_Invest_Clear_CD_Ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Country_Invest_Clear_CD_Ret::SharedCtor() {
  _cached_size_ = 0;
  issuccess_ = false;
  errret_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Country_Invest_Clear_CD_Ret::~GS2C_Country_Invest_Clear_CD_Ret() {
  SharedDtor();
}

void GS2C_Country_Invest_Clear_CD_Ret::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Country_Invest_Clear_CD_Ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Country_Invest_Clear_CD_Ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Country_Invest_Clear_CD_Ret_descriptor_;
}

const GS2C_Country_Invest_Clear_CD_Ret& GS2C_Country_Invest_Clear_CD_Ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

GS2C_Country_Invest_Clear_CD_Ret* GS2C_Country_Invest_Clear_CD_Ret::default_instance_ = NULL;

GS2C_Country_Invest_Clear_CD_Ret* GS2C_Country_Invest_Clear_CD_Ret::New() const {
  return new GS2C_Country_Invest_Clear_CD_Ret;
}

void GS2C_Country_Invest_Clear_CD_Ret::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    issuccess_ = false;
    errret_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Country_Invest_Clear_CD_Ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isSuccess = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issuccess_)));
          set_has_issuccess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_errRet;
        break;
      }

      // optional .pb.Country_Task_Err errRet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errRet:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Country_Task_Err_IsValid(value)) {
            set_errret(static_cast< ::pb::Country_Task_Err >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Country_Invest_Clear_CD_Ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isSuccess = 1;
  if (has_issuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->issuccess(), output);
  }

  // optional .pb.Country_Task_Err errRet = 2;
  if (has_errret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->errret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Country_Invest_Clear_CD_Ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isSuccess = 1;
  if (has_issuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->issuccess(), target);
  }

  // optional .pb.Country_Task_Err errRet = 2;
  if (has_errret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->errret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Country_Invest_Clear_CD_Ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isSuccess = 1;
    if (has_issuccess()) {
      total_size += 1 + 1;
    }

    // optional .pb.Country_Task_Err errRet = 2;
    if (has_errret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->errret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Country_Invest_Clear_CD_Ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Country_Invest_Clear_CD_Ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Country_Invest_Clear_CD_Ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Country_Invest_Clear_CD_Ret::MergeFrom(const GS2C_Country_Invest_Clear_CD_Ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issuccess()) {
      set_issuccess(from.issuccess());
    }
    if (from.has_errret()) {
      set_errret(from.errret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Country_Invest_Clear_CD_Ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Country_Invest_Clear_CD_Ret::CopyFrom(const GS2C_Country_Invest_Clear_CD_Ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Country_Invest_Clear_CD_Ret::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Country_Invest_Clear_CD_Ret::Swap(GS2C_Country_Invest_Clear_CD_Ret* other) {
  if (other != this) {
    std::swap(issuccess_, other->issuccess_);
    std::swap(errret_, other->errret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Country_Invest_Clear_CD_Ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Country_Invest_Clear_CD_Ret_descriptor_;
  metadata.reflection = GS2C_Country_Invest_Clear_CD_Ret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Country_Task_Occupy::kIsBeginFieldNumber;
const int GS2C_Country_Task_Occupy::kCurStageFieldNumber;
const int GS2C_Country_Task_Occupy::kCurStageBeginTimeFieldNumber;
const int GS2C_Country_Task_Occupy::kCurStageNowCountryHaveCitysFieldNumber;
const int GS2C_Country_Task_Occupy::kCurStageBeginHaveCitysFieldNumber;
const int GS2C_Country_Task_Occupy::kNeedTotalCitysFieldNumber;
#endif  // !_MSC_VER

GS2C_Country_Task_Occupy::GS2C_Country_Task_Occupy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Country_Task_Occupy::InitAsDefaultInstance() {
}

GS2C_Country_Task_Occupy::GS2C_Country_Task_Occupy(const GS2C_Country_Task_Occupy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Country_Task_Occupy::SharedCtor() {
  _cached_size_ = 0;
  is_begin_ = false;
  cur_stage_ = 0u;
  cur_stage_begin_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Country_Task_Occupy::~GS2C_Country_Task_Occupy() {
  SharedDtor();
}

void GS2C_Country_Task_Occupy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Country_Task_Occupy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Country_Task_Occupy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Country_Task_Occupy_descriptor_;
}

const GS2C_Country_Task_Occupy& GS2C_Country_Task_Occupy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

GS2C_Country_Task_Occupy* GS2C_Country_Task_Occupy::default_instance_ = NULL;

GS2C_Country_Task_Occupy* GS2C_Country_Task_Occupy::New() const {
  return new GS2C_Country_Task_Occupy;
}

void GS2C_Country_Task_Occupy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_begin_ = false;
    cur_stage_ = 0u;
    cur_stage_begin_time_ = GOOGLE_ULONGLONG(0);
  }
  cur_stage_now_country_have_citys_.Clear();
  cur_stage_begin_have_citys_.Clear();
  need_total_citys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Country_Task_Occupy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_begin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_begin_)));
          set_has_is_begin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_stage;
        break;
      }

      // optional uint32 cur_stage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_stage_)));
          set_has_cur_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_stage_begin_time;
        break;
      }

      // optional uint64 cur_stage_begin_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_stage_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_stage_begin_time_)));
          set_has_cur_stage_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_stage_now_country_have_citys;
        break;
      }

      // repeated uint32 cur_stage_now_country_have_citys = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_stage_now_country_have_citys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_cur_stage_now_country_have_citys())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cur_stage_now_country_have_citys())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_stage_now_country_have_citys;
        if (input->ExpectTag(40)) goto parse_cur_stage_begin_have_citys;
        break;
      }

      // repeated uint32 cur_stage_begin_have_citys = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_stage_begin_have_citys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_cur_stage_begin_have_citys())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cur_stage_begin_have_citys())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cur_stage_begin_have_citys;
        if (input->ExpectTag(48)) goto parse_need_total_citys;
        break;
      }

      // repeated uint32 need_total_citys = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_total_citys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_need_total_citys())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_need_total_citys())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_need_total_citys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Country_Task_Occupy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_begin = 1;
  if (has_is_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_begin(), output);
  }

  // optional uint32 cur_stage = 2;
  if (has_cur_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_stage(), output);
  }

  // optional uint64 cur_stage_begin_time = 3;
  if (has_cur_stage_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cur_stage_begin_time(), output);
  }

  // repeated uint32 cur_stage_now_country_have_citys = 4;
  for (int i = 0; i < this->cur_stage_now_country_have_citys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->cur_stage_now_country_have_citys(i), output);
  }

  // repeated uint32 cur_stage_begin_have_citys = 5;
  for (int i = 0; i < this->cur_stage_begin_have_citys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->cur_stage_begin_have_citys(i), output);
  }

  // repeated uint32 need_total_citys = 6;
  for (int i = 0; i < this->need_total_citys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->need_total_citys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Country_Task_Occupy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_begin = 1;
  if (has_is_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_begin(), target);
  }

  // optional uint32 cur_stage = 2;
  if (has_cur_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_stage(), target);
  }

  // optional uint64 cur_stage_begin_time = 3;
  if (has_cur_stage_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cur_stage_begin_time(), target);
  }

  // repeated uint32 cur_stage_now_country_have_citys = 4;
  for (int i = 0; i < this->cur_stage_now_country_have_citys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->cur_stage_now_country_have_citys(i), target);
  }

  // repeated uint32 cur_stage_begin_have_citys = 5;
  for (int i = 0; i < this->cur_stage_begin_have_citys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->cur_stage_begin_have_citys(i), target);
  }

  // repeated uint32 need_total_citys = 6;
  for (int i = 0; i < this->need_total_citys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->need_total_citys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Country_Task_Occupy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_begin = 1;
    if (has_is_begin()) {
      total_size += 1 + 1;
    }

    // optional uint32 cur_stage = 2;
    if (has_cur_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_stage());
    }

    // optional uint64 cur_stage_begin_time = 3;
    if (has_cur_stage_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_stage_begin_time());
    }

  }
  // repeated uint32 cur_stage_now_country_have_citys = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cur_stage_now_country_have_citys_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cur_stage_now_country_have_citys(i));
    }
    total_size += 1 * this->cur_stage_now_country_have_citys_size() + data_size;
  }

  // repeated uint32 cur_stage_begin_have_citys = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->cur_stage_begin_have_citys_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cur_stage_begin_have_citys(i));
    }
    total_size += 1 * this->cur_stage_begin_have_citys_size() + data_size;
  }

  // repeated uint32 need_total_citys = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->need_total_citys_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->need_total_citys(i));
    }
    total_size += 1 * this->need_total_citys_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Country_Task_Occupy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Country_Task_Occupy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Country_Task_Occupy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Country_Task_Occupy::MergeFrom(const GS2C_Country_Task_Occupy& from) {
  GOOGLE_CHECK_NE(&from, this);
  cur_stage_now_country_have_citys_.MergeFrom(from.cur_stage_now_country_have_citys_);
  cur_stage_begin_have_citys_.MergeFrom(from.cur_stage_begin_have_citys_);
  need_total_citys_.MergeFrom(from.need_total_citys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_begin()) {
      set_is_begin(from.is_begin());
    }
    if (from.has_cur_stage()) {
      set_cur_stage(from.cur_stage());
    }
    if (from.has_cur_stage_begin_time()) {
      set_cur_stage_begin_time(from.cur_stage_begin_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Country_Task_Occupy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Country_Task_Occupy::CopyFrom(const GS2C_Country_Task_Occupy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Country_Task_Occupy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Country_Task_Occupy::Swap(GS2C_Country_Task_Occupy* other) {
  if (other != this) {
    std::swap(is_begin_, other->is_begin_);
    std::swap(cur_stage_, other->cur_stage_);
    std::swap(cur_stage_begin_time_, other->cur_stage_begin_time_);
    cur_stage_now_country_have_citys_.Swap(&other->cur_stage_now_country_have_citys_);
    cur_stage_begin_have_citys_.Swap(&other->cur_stage_begin_have_citys_);
    need_total_citys_.Swap(&other->need_total_citys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Country_Task_Occupy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Country_Task_Occupy_descriptor_;
  metadata.reflection = GS2C_Country_Task_Occupy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Country_Occupy_Player::kStageIDFieldNumber;
const int GS2C_Country_Occupy_Player::kRankIDFieldNumber;
const int GS2C_Country_Occupy_Player::kRankFieldNumber;
const int GS2C_Country_Occupy_Player::kIsTakeRewardFieldNumber;
const int GS2C_Country_Occupy_Player::kCanTakeExRewardFieldNumber;
const int GS2C_Country_Occupy_Player::kRankRewardFieldNumber;
const int GS2C_Country_Occupy_Player::kWinRewardFieldNumber;
#endif  // !_MSC_VER

GS2C_Country_Occupy_Player::GS2C_Country_Occupy_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Country_Occupy_Player::InitAsDefaultInstance() {
  rank_reward_ = const_cast< ::pb::GS2C_LootList*>(&::pb::GS2C_LootList::default_instance());
  win_reward_ = const_cast< ::pb::GS2C_LootList*>(&::pb::GS2C_LootList::default_instance());
}

GS2C_Country_Occupy_Player::GS2C_Country_Occupy_Player(const GS2C_Country_Occupy_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Country_Occupy_Player::SharedCtor() {
  _cached_size_ = 0;
  stageid_ = 0u;
  rankid_ = 0u;
  rank_ = 0u;
  is_take_reward_ = false;
  cantakeexreward_ = false;
  rank_reward_ = NULL;
  win_reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Country_Occupy_Player::~GS2C_Country_Occupy_Player() {
  SharedDtor();
}

void GS2C_Country_Occupy_Player::SharedDtor() {
  if (this != default_instance_) {
    delete rank_reward_;
    delete win_reward_;
  }
}

void GS2C_Country_Occupy_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Country_Occupy_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Country_Occupy_Player_descriptor_;
}

const GS2C_Country_Occupy_Player& GS2C_Country_Occupy_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

GS2C_Country_Occupy_Player* GS2C_Country_Occupy_Player::default_instance_ = NULL;

GS2C_Country_Occupy_Player* GS2C_Country_Occupy_Player::New() const {
  return new GS2C_Country_Occupy_Player;
}

void GS2C_Country_Occupy_Player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stageid_ = 0u;
    rankid_ = 0u;
    rank_ = 0u;
    is_take_reward_ = false;
    cantakeexreward_ = false;
    if (has_rank_reward()) {
      if (rank_reward_ != NULL) rank_reward_->::pb::GS2C_LootList::Clear();
    }
    if (has_win_reward()) {
      if (win_reward_ != NULL) win_reward_->::pb::GS2C_LootList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Country_Occupy_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stageID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stageid_)));
          set_has_stageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rankID;
        break;
      }

      // optional uint32 rankID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_take_reward;
        break;
      }

      // optional bool is_take_reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_take_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_take_reward_)));
          set_has_is_take_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_canTakeExReward;
        break;
      }

      // optional bool canTakeExReward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canTakeExReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cantakeexreward_)));
          set_has_cantakeexreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_rank_reward;
        break;
      }

      // optional .pb.GS2C_LootList rank_reward = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rank_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_win_reward;
        break;
      }

      // optional .pb.GS2C_LootList win_reward = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_win_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_win_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Country_Occupy_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stageID = 1;
  if (has_stageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stageid(), output);
  }

  // optional uint32 rankID = 2;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rankid(), output);
  }

  // optional uint32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }

  // optional bool is_take_reward = 4;
  if (has_is_take_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_take_reward(), output);
  }

  // optional bool canTakeExReward = 5;
  if (has_cantakeexreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->cantakeexreward(), output);
  }

  // optional .pb.GS2C_LootList rank_reward = 6;
  if (has_rank_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rank_reward(), output);
  }

  // optional .pb.GS2C_LootList win_reward = 7;
  if (has_win_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->win_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Country_Occupy_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 stageID = 1;
  if (has_stageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stageid(), target);
  }

  // optional uint32 rankID = 2;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rankid(), target);
  }

  // optional uint32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }

  // optional bool is_take_reward = 4;
  if (has_is_take_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_take_reward(), target);
  }

  // optional bool canTakeExReward = 5;
  if (has_cantakeexreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->cantakeexreward(), target);
  }

  // optional .pb.GS2C_LootList rank_reward = 6;
  if (has_rank_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->rank_reward(), target);
  }

  // optional .pb.GS2C_LootList win_reward = 7;
  if (has_win_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->win_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Country_Occupy_Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stageID = 1;
    if (has_stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stageid());
    }

    // optional uint32 rankID = 2;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rankid());
    }

    // optional uint32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional bool is_take_reward = 4;
    if (has_is_take_reward()) {
      total_size += 1 + 1;
    }

    // optional bool canTakeExReward = 5;
    if (has_cantakeexreward()) {
      total_size += 1 + 1;
    }

    // optional .pb.GS2C_LootList rank_reward = 6;
    if (has_rank_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rank_reward());
    }

    // optional .pb.GS2C_LootList win_reward = 7;
    if (has_win_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->win_reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Country_Occupy_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Country_Occupy_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Country_Occupy_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Country_Occupy_Player::MergeFrom(const GS2C_Country_Occupy_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stageid()) {
      set_stageid(from.stageid());
    }
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_is_take_reward()) {
      set_is_take_reward(from.is_take_reward());
    }
    if (from.has_cantakeexreward()) {
      set_cantakeexreward(from.cantakeexreward());
    }
    if (from.has_rank_reward()) {
      mutable_rank_reward()->::pb::GS2C_LootList::MergeFrom(from.rank_reward());
    }
    if (from.has_win_reward()) {
      mutable_win_reward()->::pb::GS2C_LootList::MergeFrom(from.win_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Country_Occupy_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Country_Occupy_Player::CopyFrom(const GS2C_Country_Occupy_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Country_Occupy_Player::IsInitialized() const {

  return true;
}

void GS2C_Country_Occupy_Player::Swap(GS2C_Country_Occupy_Player* other) {
  if (other != this) {
    std::swap(stageid_, other->stageid_);
    std::swap(rankid_, other->rankid_);
    std::swap(rank_, other->rank_);
    std::swap(is_take_reward_, other->is_take_reward_);
    std::swap(cantakeexreward_, other->cantakeexreward_);
    std::swap(rank_reward_, other->rank_reward_);
    std::swap(win_reward_, other->win_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Country_Occupy_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Country_Occupy_Player_descriptor_;
  metadata.reflection = GS2C_Country_Occupy_Player_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Country_Occupy_Take_Reward::kStageFieldNumber;
#endif  // !_MSC_VER

C2GS_Country_Occupy_Take_Reward::C2GS_Country_Occupy_Take_Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Country_Occupy_Take_Reward::InitAsDefaultInstance() {
}

C2GS_Country_Occupy_Take_Reward::C2GS_Country_Occupy_Take_Reward(const C2GS_Country_Occupy_Take_Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Country_Occupy_Take_Reward::SharedCtor() {
  _cached_size_ = 0;
  stage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Country_Occupy_Take_Reward::~C2GS_Country_Occupy_Take_Reward() {
  SharedDtor();
}

void C2GS_Country_Occupy_Take_Reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Country_Occupy_Take_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Country_Occupy_Take_Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Country_Occupy_Take_Reward_descriptor_;
}

const C2GS_Country_Occupy_Take_Reward& C2GS_Country_Occupy_Take_Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

C2GS_Country_Occupy_Take_Reward* C2GS_Country_Occupy_Take_Reward::default_instance_ = NULL;

C2GS_Country_Occupy_Take_Reward* C2GS_Country_Occupy_Take_Reward::New() const {
  return new C2GS_Country_Occupy_Take_Reward;
}

void C2GS_Country_Occupy_Take_Reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Country_Occupy_Take_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Country_Occupy_Take_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stage = 1;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Country_Occupy_Take_Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 stage = 1;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Country_Occupy_Take_Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stage = 1;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Country_Occupy_Take_Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Country_Occupy_Take_Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Country_Occupy_Take_Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Country_Occupy_Take_Reward::MergeFrom(const C2GS_Country_Occupy_Take_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage()) {
      set_stage(from.stage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Country_Occupy_Take_Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Country_Occupy_Take_Reward::CopyFrom(const C2GS_Country_Occupy_Take_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Country_Occupy_Take_Reward::IsInitialized() const {

  return true;
}

void C2GS_Country_Occupy_Take_Reward::Swap(C2GS_Country_Occupy_Take_Reward* other) {
  if (other != this) {
    std::swap(stage_, other->stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Country_Occupy_Take_Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Country_Occupy_Take_Reward_descriptor_;
  metadata.reflection = C2GS_Country_Occupy_Take_Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Country_Occupy_Take_Reward::kIsSuccessFieldNumber;
const int GS2C_Country_Occupy_Take_Reward::kErrRetFieldNumber;
#endif  // !_MSC_VER

GS2C_Country_Occupy_Take_Reward::GS2C_Country_Occupy_Take_Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Country_Occupy_Take_Reward::InitAsDefaultInstance() {
}

GS2C_Country_Occupy_Take_Reward::GS2C_Country_Occupy_Take_Reward(const GS2C_Country_Occupy_Take_Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Country_Occupy_Take_Reward::SharedCtor() {
  _cached_size_ = 0;
  issuccess_ = false;
  errret_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Country_Occupy_Take_Reward::~GS2C_Country_Occupy_Take_Reward() {
  SharedDtor();
}

void GS2C_Country_Occupy_Take_Reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Country_Occupy_Take_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Country_Occupy_Take_Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Country_Occupy_Take_Reward_descriptor_;
}

const GS2C_Country_Occupy_Take_Reward& GS2C_Country_Occupy_Take_Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

GS2C_Country_Occupy_Take_Reward* GS2C_Country_Occupy_Take_Reward::default_instance_ = NULL;

GS2C_Country_Occupy_Take_Reward* GS2C_Country_Occupy_Take_Reward::New() const {
  return new GS2C_Country_Occupy_Take_Reward;
}

void GS2C_Country_Occupy_Take_Reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    issuccess_ = false;
    errret_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Country_Occupy_Take_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isSuccess = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issuccess_)));
          set_has_issuccess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_errRet;
        break;
      }

      // optional .pb.Country_Task_Err errRet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errRet:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Country_Task_Err_IsValid(value)) {
            set_errret(static_cast< ::pb::Country_Task_Err >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Country_Occupy_Take_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isSuccess = 1;
  if (has_issuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->issuccess(), output);
  }

  // optional .pb.Country_Task_Err errRet = 2;
  if (has_errret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->errret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Country_Occupy_Take_Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isSuccess = 1;
  if (has_issuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->issuccess(), target);
  }

  // optional .pb.Country_Task_Err errRet = 2;
  if (has_errret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->errret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Country_Occupy_Take_Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isSuccess = 1;
    if (has_issuccess()) {
      total_size += 1 + 1;
    }

    // optional .pb.Country_Task_Err errRet = 2;
    if (has_errret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->errret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Country_Occupy_Take_Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Country_Occupy_Take_Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Country_Occupy_Take_Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Country_Occupy_Take_Reward::MergeFrom(const GS2C_Country_Occupy_Take_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issuccess()) {
      set_issuccess(from.issuccess());
    }
    if (from.has_errret()) {
      set_errret(from.errret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Country_Occupy_Take_Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Country_Occupy_Take_Reward::CopyFrom(const GS2C_Country_Occupy_Take_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Country_Occupy_Take_Reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Country_Occupy_Take_Reward::Swap(GS2C_Country_Occupy_Take_Reward* other) {
  if (other != this) {
    std::swap(issuccess_, other->issuccess_);
    std::swap(errret_, other->errret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Country_Occupy_Take_Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Country_Occupy_Take_Reward_descriptor_;
  metadata.reflection = GS2C_Country_Occupy_Take_Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneTaskInfo::kStageidFieldNumber;
const int OneTaskInfo::kTaskidFieldNumber;
const int OneTaskInfo::kCurCompletionFieldNumber;
const int OneTaskInfo::kIsTakeAwardFieldNumber;
#endif  // !_MSC_VER

OneTaskInfo::OneTaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OneTaskInfo::InitAsDefaultInstance() {
}

OneTaskInfo::OneTaskInfo(const OneTaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OneTaskInfo::SharedCtor() {
  _cached_size_ = 0;
  stageid_ = 0u;
  taskid_ = 0u;
  curcompletion_ = 0u;
  istakeaward_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneTaskInfo::~OneTaskInfo() {
  SharedDtor();
}

void OneTaskInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OneTaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneTaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneTaskInfo_descriptor_;
}

const OneTaskInfo& OneTaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

OneTaskInfo* OneTaskInfo::default_instance_ = NULL;

OneTaskInfo* OneTaskInfo::New() const {
  return new OneTaskInfo;
}

void OneTaskInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stageid_ = 0u;
    taskid_ = 0u;
    curcompletion_ = 0u;
    istakeaward_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneTaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stageid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stageid_)));
          set_has_stageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_taskid;
        break;
      }

      // optional uint32 taskid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curCompletion;
        break;
      }

      // optional uint32 curCompletion = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curCompletion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curcompletion_)));
          set_has_curcompletion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isTakeAward;
        break;
      }

      // optional bool isTakeAward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTakeAward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istakeaward_)));
          set_has_istakeaward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OneTaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stageid = 1;
  if (has_stageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stageid(), output);
  }

  // optional uint32 taskid = 2;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->taskid(), output);
  }

  // optional uint32 curCompletion = 3;
  if (has_curcompletion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curcompletion(), output);
  }

  // optional bool isTakeAward = 4;
  if (has_istakeaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->istakeaward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OneTaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 stageid = 1;
  if (has_stageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stageid(), target);
  }

  // optional uint32 taskid = 2;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->taskid(), target);
  }

  // optional uint32 curCompletion = 3;
  if (has_curcompletion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curcompletion(), target);
  }

  // optional bool isTakeAward = 4;
  if (has_istakeaward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->istakeaward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OneTaskInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stageid = 1;
    if (has_stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stageid());
    }

    // optional uint32 taskid = 2;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // optional uint32 curCompletion = 3;
    if (has_curcompletion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curcompletion());
    }

    // optional bool isTakeAward = 4;
    if (has_istakeaward()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneTaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneTaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneTaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneTaskInfo::MergeFrom(const OneTaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stageid()) {
      set_stageid(from.stageid());
    }
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_curcompletion()) {
      set_curcompletion(from.curcompletion());
    }
    if (from.has_istakeaward()) {
      set_istakeaward(from.istakeaward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneTaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneTaskInfo::CopyFrom(const OneTaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneTaskInfo::IsInitialized() const {

  return true;
}

void OneTaskInfo::Swap(OneTaskInfo* other) {
  if (other != this) {
    std::swap(stageid_, other->stageid_);
    std::swap(taskid_, other->taskid_);
    std::swap(curcompletion_, other->curcompletion_);
    std::swap(istakeaward_, other->istakeaward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneTaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneTaskInfo_descriptor_;
  metadata.reflection = OneTaskInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_PersonalTask_Info::kIsBeginFieldNumber;
const int GS2C_PersonalTask_Info::kCurStageFieldNumber;
const int GS2C_PersonalTask_Info::kCurSubStageFieldNumber;
const int GS2C_PersonalTask_Info::kTaskBeginTimeFieldNumber;
const int GS2C_PersonalTask_Info::kTasksFieldNumber;
#endif  // !_MSC_VER

GS2C_PersonalTask_Info::GS2C_PersonalTask_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_PersonalTask_Info::InitAsDefaultInstance() {
}

GS2C_PersonalTask_Info::GS2C_PersonalTask_Info(const GS2C_PersonalTask_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_PersonalTask_Info::SharedCtor() {
  _cached_size_ = 0;
  is_begin_ = false;
  curstage_ = 0u;
  cursubstage_ = 0u;
  taskbegintime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_PersonalTask_Info::~GS2C_PersonalTask_Info() {
  SharedDtor();
}

void GS2C_PersonalTask_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_PersonalTask_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_PersonalTask_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_PersonalTask_Info_descriptor_;
}

const GS2C_PersonalTask_Info& GS2C_PersonalTask_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

GS2C_PersonalTask_Info* GS2C_PersonalTask_Info::default_instance_ = NULL;

GS2C_PersonalTask_Info* GS2C_PersonalTask_Info::New() const {
  return new GS2C_PersonalTask_Info;
}

void GS2C_PersonalTask_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_begin_ = false;
    curstage_ = 0u;
    cursubstage_ = 0u;
    taskbegintime_ = GOOGLE_ULONGLONG(0);
  }
  tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_PersonalTask_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_begin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_begin_)));
          set_has_is_begin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_curStage;
        break;
      }

      // optional uint32 curStage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curStage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curstage_)));
          set_has_curstage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curSubStage;
        break;
      }

      // optional uint32 curSubStage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curSubStage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cursubstage_)));
          set_has_cursubstage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_taskBeginTime;
        break;
      }

      // optional uint64 taskBeginTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskBeginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &taskbegintime_)));
          set_has_taskbegintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tasks;
        break;
      }

      // repeated .pb.OneTaskInfo tasks = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tasks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_PersonalTask_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_begin = 1;
  if (has_is_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_begin(), output);
  }

  // optional uint32 curStage = 2;
  if (has_curstage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curstage(), output);
  }

  // optional uint32 curSubStage = 3;
  if (has_cursubstage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cursubstage(), output);
  }

  // optional uint64 taskBeginTime = 4;
  if (has_taskbegintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->taskbegintime(), output);
  }

  // repeated .pb.OneTaskInfo tasks = 5;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tasks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_PersonalTask_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_begin = 1;
  if (has_is_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_begin(), target);
  }

  // optional uint32 curStage = 2;
  if (has_curstage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curstage(), target);
  }

  // optional uint32 curSubStage = 3;
  if (has_cursubstage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cursubstage(), target);
  }

  // optional uint64 taskBeginTime = 4;
  if (has_taskbegintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->taskbegintime(), target);
  }

  // repeated .pb.OneTaskInfo tasks = 5;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tasks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_PersonalTask_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_begin = 1;
    if (has_is_begin()) {
      total_size += 1 + 1;
    }

    // optional uint32 curStage = 2;
    if (has_curstage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curstage());
    }

    // optional uint32 curSubStage = 3;
    if (has_cursubstage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cursubstage());
    }

    // optional uint64 taskBeginTime = 4;
    if (has_taskbegintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->taskbegintime());
    }

  }
  // repeated .pb.OneTaskInfo tasks = 5;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_PersonalTask_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_PersonalTask_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_PersonalTask_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_PersonalTask_Info::MergeFrom(const GS2C_PersonalTask_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_begin()) {
      set_is_begin(from.is_begin());
    }
    if (from.has_curstage()) {
      set_curstage(from.curstage());
    }
    if (from.has_cursubstage()) {
      set_cursubstage(from.cursubstage());
    }
    if (from.has_taskbegintime()) {
      set_taskbegintime(from.taskbegintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_PersonalTask_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_PersonalTask_Info::CopyFrom(const GS2C_PersonalTask_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_PersonalTask_Info::IsInitialized() const {

  return true;
}

void GS2C_PersonalTask_Info::Swap(GS2C_PersonalTask_Info* other) {
  if (other != this) {
    std::swap(is_begin_, other->is_begin_);
    std::swap(curstage_, other->curstage_);
    std::swap(cursubstage_, other->cursubstage_);
    std::swap(taskbegintime_, other->taskbegintime_);
    tasks_.Swap(&other->tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_PersonalTask_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_PersonalTask_Info_descriptor_;
  metadata.reflection = GS2C_PersonalTask_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_PersonalTask_One::kTaskidFieldNumber;
#endif  // !_MSC_VER

C2GS_PersonalTask_One::C2GS_PersonalTask_One()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_PersonalTask_One::InitAsDefaultInstance() {
}

C2GS_PersonalTask_One::C2GS_PersonalTask_One(const C2GS_PersonalTask_One& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_PersonalTask_One::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_PersonalTask_One::~C2GS_PersonalTask_One() {
  SharedDtor();
}

void C2GS_PersonalTask_One::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_PersonalTask_One::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_PersonalTask_One::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_PersonalTask_One_descriptor_;
}

const C2GS_PersonalTask_One& C2GS_PersonalTask_One::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

C2GS_PersonalTask_One* C2GS_PersonalTask_One::default_instance_ = NULL;

C2GS_PersonalTask_One* C2GS_PersonalTask_One::New() const {
  return new C2GS_PersonalTask_One;
}

void C2GS_PersonalTask_One::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_PersonalTask_One::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_PersonalTask_One::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_PersonalTask_One::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 taskid = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_PersonalTask_One::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_PersonalTask_One::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_PersonalTask_One* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_PersonalTask_One*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_PersonalTask_One::MergeFrom(const C2GS_PersonalTask_One& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_PersonalTask_One::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_PersonalTask_One::CopyFrom(const C2GS_PersonalTask_One& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_PersonalTask_One::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_PersonalTask_One::Swap(C2GS_PersonalTask_One* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_PersonalTask_One::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_PersonalTask_One_descriptor_;
  metadata.reflection = C2GS_PersonalTask_One_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_PersonalTask_Take_Award::kTaskidFieldNumber;
#endif  // !_MSC_VER

C2GS_PersonalTask_Take_Award::C2GS_PersonalTask_Take_Award()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_PersonalTask_Take_Award::InitAsDefaultInstance() {
}

C2GS_PersonalTask_Take_Award::C2GS_PersonalTask_Take_Award(const C2GS_PersonalTask_Take_Award& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_PersonalTask_Take_Award::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_PersonalTask_Take_Award::~C2GS_PersonalTask_Take_Award() {
  SharedDtor();
}

void C2GS_PersonalTask_Take_Award::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_PersonalTask_Take_Award::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_PersonalTask_Take_Award::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_PersonalTask_Take_Award_descriptor_;
}

const C2GS_PersonalTask_Take_Award& C2GS_PersonalTask_Take_Award::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

C2GS_PersonalTask_Take_Award* C2GS_PersonalTask_Take_Award::default_instance_ = NULL;

C2GS_PersonalTask_Take_Award* C2GS_PersonalTask_Take_Award::New() const {
  return new C2GS_PersonalTask_Take_Award;
}

void C2GS_PersonalTask_Take_Award::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_PersonalTask_Take_Award::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_PersonalTask_Take_Award::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_PersonalTask_Take_Award::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 taskid = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_PersonalTask_Take_Award::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_PersonalTask_Take_Award::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_PersonalTask_Take_Award* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_PersonalTask_Take_Award*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_PersonalTask_Take_Award::MergeFrom(const C2GS_PersonalTask_Take_Award& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_PersonalTask_Take_Award::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_PersonalTask_Take_Award::CopyFrom(const C2GS_PersonalTask_Take_Award& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_PersonalTask_Take_Award::IsInitialized() const {

  return true;
}

void C2GS_PersonalTask_Take_Award::Swap(C2GS_PersonalTask_Take_Award* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_PersonalTask_Take_Award::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_PersonalTask_Take_Award_descriptor_;
  metadata.reflection = C2GS_PersonalTask_Take_Award_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_PersonalTask_Take_Award::kIsSuccessFieldNumber;
const int GS2C_PersonalTask_Take_Award::kErrRetFieldNumber;
#endif  // !_MSC_VER

GS2C_PersonalTask_Take_Award::GS2C_PersonalTask_Take_Award()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_PersonalTask_Take_Award::InitAsDefaultInstance() {
}

GS2C_PersonalTask_Take_Award::GS2C_PersonalTask_Take_Award(const GS2C_PersonalTask_Take_Award& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_PersonalTask_Take_Award::SharedCtor() {
  _cached_size_ = 0;
  issuccess_ = false;
  errret_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_PersonalTask_Take_Award::~GS2C_PersonalTask_Take_Award() {
  SharedDtor();
}

void GS2C_PersonalTask_Take_Award::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_PersonalTask_Take_Award::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_PersonalTask_Take_Award::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_PersonalTask_Take_Award_descriptor_;
}

const GS2C_PersonalTask_Take_Award& GS2C_PersonalTask_Take_Award::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

GS2C_PersonalTask_Take_Award* GS2C_PersonalTask_Take_Award::default_instance_ = NULL;

GS2C_PersonalTask_Take_Award* GS2C_PersonalTask_Take_Award::New() const {
  return new GS2C_PersonalTask_Take_Award;
}

void GS2C_PersonalTask_Take_Award::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    issuccess_ = false;
    errret_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_PersonalTask_Take_Award::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isSuccess = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issuccess_)));
          set_has_issuccess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_errRet;
        break;
      }

      // optional .pb.Country_Task_Err errRet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errRet:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Country_Task_Err_IsValid(value)) {
            set_errret(static_cast< ::pb::Country_Task_Err >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_PersonalTask_Take_Award::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isSuccess = 1;
  if (has_issuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->issuccess(), output);
  }

  // optional .pb.Country_Task_Err errRet = 2;
  if (has_errret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->errret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_PersonalTask_Take_Award::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isSuccess = 1;
  if (has_issuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->issuccess(), target);
  }

  // optional .pb.Country_Task_Err errRet = 2;
  if (has_errret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->errret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_PersonalTask_Take_Award::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isSuccess = 1;
    if (has_issuccess()) {
      total_size += 1 + 1;
    }

    // optional .pb.Country_Task_Err errRet = 2;
    if (has_errret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->errret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_PersonalTask_Take_Award::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_PersonalTask_Take_Award* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_PersonalTask_Take_Award*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_PersonalTask_Take_Award::MergeFrom(const GS2C_PersonalTask_Take_Award& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issuccess()) {
      set_issuccess(from.issuccess());
    }
    if (from.has_errret()) {
      set_errret(from.errret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_PersonalTask_Take_Award::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_PersonalTask_Take_Award::CopyFrom(const GS2C_PersonalTask_Take_Award& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_PersonalTask_Take_Award::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_PersonalTask_Take_Award::Swap(GS2C_PersonalTask_Take_Award* other) {
  if (other != this) {
    std::swap(issuccess_, other->issuccess_);
    std::swap(errret_, other->errret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_PersonalTask_Take_Award::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_PersonalTask_Take_Award_descriptor_;
  metadata.reflection = GS2C_PersonalTask_Take_Award_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Notice_Country_NPC_NextTime::kNpcTypeFieldNumber;
const int GS2C_Notice_Country_NPC_NextTime::kNextTimeFieldNumber;
#endif  // !_MSC_VER

GS2C_Notice_Country_NPC_NextTime::GS2C_Notice_Country_NPC_NextTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Notice_Country_NPC_NextTime::InitAsDefaultInstance() {
}

GS2C_Notice_Country_NPC_NextTime::GS2C_Notice_Country_NPC_NextTime(const GS2C_Notice_Country_NPC_NextTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Notice_Country_NPC_NextTime::SharedCtor() {
  _cached_size_ = 0;
  npctype_ = 0u;
  nexttime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Notice_Country_NPC_NextTime::~GS2C_Notice_Country_NPC_NextTime() {
  SharedDtor();
}

void GS2C_Notice_Country_NPC_NextTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Notice_Country_NPC_NextTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Notice_Country_NPC_NextTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Notice_Country_NPC_NextTime_descriptor_;
}

const GS2C_Notice_Country_NPC_NextTime& GS2C_Notice_Country_NPC_NextTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

GS2C_Notice_Country_NPC_NextTime* GS2C_Notice_Country_NPC_NextTime::default_instance_ = NULL;

GS2C_Notice_Country_NPC_NextTime* GS2C_Notice_Country_NPC_NextTime::New() const {
  return new GS2C_Notice_Country_NPC_NextTime;
}

void GS2C_Notice_Country_NPC_NextTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npctype_ = 0u;
    nexttime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Notice_Country_NPC_NextTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 npcType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npctype_)));
          set_has_npctype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nextTime;
        break;
      }

      // optional uint64 nextTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nexttime_)));
          set_has_nexttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Notice_Country_NPC_NextTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 npcType = 1;
  if (has_npctype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->npctype(), output);
  }

  // optional uint64 nextTime = 2;
  if (has_nexttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->nexttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Notice_Country_NPC_NextTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 npcType = 1;
  if (has_npctype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->npctype(), target);
  }

  // optional uint64 nextTime = 2;
  if (has_nexttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->nexttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Notice_Country_NPC_NextTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 npcType = 1;
    if (has_npctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npctype());
    }

    // optional uint64 nextTime = 2;
    if (has_nexttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nexttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Notice_Country_NPC_NextTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Notice_Country_NPC_NextTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Notice_Country_NPC_NextTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Notice_Country_NPC_NextTime::MergeFrom(const GS2C_Notice_Country_NPC_NextTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npctype()) {
      set_npctype(from.npctype());
    }
    if (from.has_nexttime()) {
      set_nexttime(from.nexttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Notice_Country_NPC_NextTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Notice_Country_NPC_NextTime::CopyFrom(const GS2C_Notice_Country_NPC_NextTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Notice_Country_NPC_NextTime::IsInitialized() const {

  return true;
}

void GS2C_Notice_Country_NPC_NextTime::Swap(GS2C_Notice_Country_NPC_NextTime* other) {
  if (other != this) {
    std::swap(npctype_, other->npctype_);
    std::swap(nexttime_, other->nexttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Notice_Country_NPC_NextTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Notice_Country_NPC_NextTime_descriptor_;
  metadata.reflection = GS2C_Notice_Country_NPC_NextTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Country_Task_DefenceBorderland::kIsBeginFieldNumber;
const int GS2C_Country_Task_DefenceBorderland::kCurStageFieldNumber;
const int GS2C_Country_Task_DefenceBorderland::kCurSubStageFieldNumber;
const int GS2C_Country_Task_DefenceBorderland::kCurStageEndTimeFieldNumber;
const int GS2C_Country_Task_DefenceBorderland::kCurSubStageEndTimeFieldNumber;
const int GS2C_Country_Task_DefenceBorderland::kIsCountryFailedFieldNumber;
const int GS2C_Country_Task_DefenceBorderland::kCityidMonsterAttackFieldNumber;
#endif  // !_MSC_VER

GS2C_Country_Task_DefenceBorderland::GS2C_Country_Task_DefenceBorderland()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Country_Task_DefenceBorderland::InitAsDefaultInstance() {
}

GS2C_Country_Task_DefenceBorderland::GS2C_Country_Task_DefenceBorderland(const GS2C_Country_Task_DefenceBorderland& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Country_Task_DefenceBorderland::SharedCtor() {
  _cached_size_ = 0;
  is_begin_ = false;
  cur_stage_ = 0u;
  cur_sub_stage_ = 0u;
  cur_stage_end_time_ = GOOGLE_ULONGLONG(0);
  cur_sub_stage_end_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Country_Task_DefenceBorderland::~GS2C_Country_Task_DefenceBorderland() {
  SharedDtor();
}

void GS2C_Country_Task_DefenceBorderland::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Country_Task_DefenceBorderland::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Country_Task_DefenceBorderland::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Country_Task_DefenceBorderland_descriptor_;
}

const GS2C_Country_Task_DefenceBorderland& GS2C_Country_Task_DefenceBorderland::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

GS2C_Country_Task_DefenceBorderland* GS2C_Country_Task_DefenceBorderland::default_instance_ = NULL;

GS2C_Country_Task_DefenceBorderland* GS2C_Country_Task_DefenceBorderland::New() const {
  return new GS2C_Country_Task_DefenceBorderland;
}

void GS2C_Country_Task_DefenceBorderland::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_begin_ = false;
    cur_stage_ = 0u;
    cur_sub_stage_ = 0u;
    cur_stage_end_time_ = GOOGLE_ULONGLONG(0);
    cur_sub_stage_end_time_ = GOOGLE_ULONGLONG(0);
  }
  is_country_failed_.Clear();
  cityid_monster_attack_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Country_Task_DefenceBorderland::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_begin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_begin_)));
          set_has_is_begin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_stage;
        break;
      }

      // optional uint32 cur_stage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_stage_)));
          set_has_cur_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_sub_stage;
        break;
      }

      // optional uint32 cur_sub_stage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_sub_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_sub_stage_)));
          set_has_cur_sub_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_stage_end_time;
        break;
      }

      // optional uint64 cur_stage_end_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_stage_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_stage_end_time_)));
          set_has_cur_stage_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cur_sub_stage_end_time;
        break;
      }

      // optional uint64 cur_sub_stage_end_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_sub_stage_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_sub_stage_end_time_)));
          set_has_cur_sub_stage_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_country_failed;
        break;
      }

      // repeated bool is_country_failed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_country_failed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 48, input, this->mutable_is_country_failed())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_is_country_failed())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_country_failed;
        if (input->ExpectTag(56)) goto parse_cityid_monster_attack;
        break;
      }

      // repeated uint32 cityid_monster_attack = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cityid_monster_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_cityid_monster_attack())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cityid_monster_attack())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cityid_monster_attack;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Country_Task_DefenceBorderland::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_begin = 1;
  if (has_is_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_begin(), output);
  }

  // optional uint32 cur_stage = 2;
  if (has_cur_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_stage(), output);
  }

  // optional uint32 cur_sub_stage = 3;
  if (has_cur_sub_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_sub_stage(), output);
  }

  // optional uint64 cur_stage_end_time = 4;
  if (has_cur_stage_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->cur_stage_end_time(), output);
  }

  // optional uint64 cur_sub_stage_end_time = 5;
  if (has_cur_sub_stage_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->cur_sub_stage_end_time(), output);
  }

  // repeated bool is_country_failed = 6;
  for (int i = 0; i < this->is_country_failed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      6, this->is_country_failed(i), output);
  }

  // repeated uint32 cityid_monster_attack = 7;
  for (int i = 0; i < this->cityid_monster_attack_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->cityid_monster_attack(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Country_Task_DefenceBorderland::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_begin = 1;
  if (has_is_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_begin(), target);
  }

  // optional uint32 cur_stage = 2;
  if (has_cur_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_stage(), target);
  }

  // optional uint32 cur_sub_stage = 3;
  if (has_cur_sub_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_sub_stage(), target);
  }

  // optional uint64 cur_stage_end_time = 4;
  if (has_cur_stage_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->cur_stage_end_time(), target);
  }

  // optional uint64 cur_sub_stage_end_time = 5;
  if (has_cur_sub_stage_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->cur_sub_stage_end_time(), target);
  }

  // repeated bool is_country_failed = 6;
  for (int i = 0; i < this->is_country_failed_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(6, this->is_country_failed(i), target);
  }

  // repeated uint32 cityid_monster_attack = 7;
  for (int i = 0; i < this->cityid_monster_attack_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->cityid_monster_attack(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Country_Task_DefenceBorderland::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_begin = 1;
    if (has_is_begin()) {
      total_size += 1 + 1;
    }

    // optional uint32 cur_stage = 2;
    if (has_cur_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_stage());
    }

    // optional uint32 cur_sub_stage = 3;
    if (has_cur_sub_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_sub_stage());
    }

    // optional uint64 cur_stage_end_time = 4;
    if (has_cur_stage_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_stage_end_time());
    }

    // optional uint64 cur_sub_stage_end_time = 5;
    if (has_cur_sub_stage_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_sub_stage_end_time());
    }

  }
  // repeated bool is_country_failed = 6;
  {
    int data_size = 0;
    data_size = 1 * this->is_country_failed_size();
    total_size += 1 * this->is_country_failed_size() + data_size;
  }

  // repeated uint32 cityid_monster_attack = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->cityid_monster_attack_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cityid_monster_attack(i));
    }
    total_size += 1 * this->cityid_monster_attack_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Country_Task_DefenceBorderland::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Country_Task_DefenceBorderland* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Country_Task_DefenceBorderland*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Country_Task_DefenceBorderland::MergeFrom(const GS2C_Country_Task_DefenceBorderland& from) {
  GOOGLE_CHECK_NE(&from, this);
  is_country_failed_.MergeFrom(from.is_country_failed_);
  cityid_monster_attack_.MergeFrom(from.cityid_monster_attack_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_begin()) {
      set_is_begin(from.is_begin());
    }
    if (from.has_cur_stage()) {
      set_cur_stage(from.cur_stage());
    }
    if (from.has_cur_sub_stage()) {
      set_cur_sub_stage(from.cur_sub_stage());
    }
    if (from.has_cur_stage_end_time()) {
      set_cur_stage_end_time(from.cur_stage_end_time());
    }
    if (from.has_cur_sub_stage_end_time()) {
      set_cur_sub_stage_end_time(from.cur_sub_stage_end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Country_Task_DefenceBorderland::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Country_Task_DefenceBorderland::CopyFrom(const GS2C_Country_Task_DefenceBorderland& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Country_Task_DefenceBorderland::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Country_Task_DefenceBorderland::Swap(GS2C_Country_Task_DefenceBorderland* other) {
  if (other != this) {
    std::swap(is_begin_, other->is_begin_);
    std::swap(cur_stage_, other->cur_stage_);
    std::swap(cur_sub_stage_, other->cur_sub_stage_);
    std::swap(cur_stage_end_time_, other->cur_stage_end_time_);
    std::swap(cur_sub_stage_end_time_, other->cur_sub_stage_end_time_);
    is_country_failed_.Swap(&other->is_country_failed_);
    cityid_monster_attack_.Swap(&other->cityid_monster_attack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Country_Task_DefenceBorderland::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Country_Task_DefenceBorderland_descriptor_;
  metadata.reflection = GS2C_Country_Task_DefenceBorderland_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Country_DefenceBorderland_Player::kStageIDFieldNumber;
const int GS2C_Country_DefenceBorderland_Player::kRankIDFieldNumber;
const int GS2C_Country_DefenceBorderland_Player::kRankFieldNumber;
const int GS2C_Country_DefenceBorderland_Player::kKillNumFieldNumber;
const int GS2C_Country_DefenceBorderland_Player::kIsTakeRewardFieldNumber;
const int GS2C_Country_DefenceBorderland_Player::kCanTakeExRewardFieldNumber;
const int GS2C_Country_DefenceBorderland_Player::kRankRewardFieldNumber;
const int GS2C_Country_DefenceBorderland_Player::kWinRewardFieldNumber;
#endif  // !_MSC_VER

GS2C_Country_DefenceBorderland_Player::GS2C_Country_DefenceBorderland_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Country_DefenceBorderland_Player::InitAsDefaultInstance() {
  rank_reward_ = const_cast< ::pb::GS2C_LootList*>(&::pb::GS2C_LootList::default_instance());
  win_reward_ = const_cast< ::pb::GS2C_LootList*>(&::pb::GS2C_LootList::default_instance());
}

GS2C_Country_DefenceBorderland_Player::GS2C_Country_DefenceBorderland_Player(const GS2C_Country_DefenceBorderland_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Country_DefenceBorderland_Player::SharedCtor() {
  _cached_size_ = 0;
  stageid_ = 0u;
  rankid_ = 0u;
  rank_ = 0u;
  killnum_ = 0u;
  is_take_reward_ = false;
  cantakeexreward_ = false;
  rank_reward_ = NULL;
  win_reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Country_DefenceBorderland_Player::~GS2C_Country_DefenceBorderland_Player() {
  SharedDtor();
}

void GS2C_Country_DefenceBorderland_Player::SharedDtor() {
  if (this != default_instance_) {
    delete rank_reward_;
    delete win_reward_;
  }
}

void GS2C_Country_DefenceBorderland_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Country_DefenceBorderland_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Country_DefenceBorderland_Player_descriptor_;
}

const GS2C_Country_DefenceBorderland_Player& GS2C_Country_DefenceBorderland_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

GS2C_Country_DefenceBorderland_Player* GS2C_Country_DefenceBorderland_Player::default_instance_ = NULL;

GS2C_Country_DefenceBorderland_Player* GS2C_Country_DefenceBorderland_Player::New() const {
  return new GS2C_Country_DefenceBorderland_Player;
}

void GS2C_Country_DefenceBorderland_Player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stageid_ = 0u;
    rankid_ = 0u;
    rank_ = 0u;
    killnum_ = 0u;
    is_take_reward_ = false;
    cantakeexreward_ = false;
    if (has_rank_reward()) {
      if (rank_reward_ != NULL) rank_reward_->::pb::GS2C_LootList::Clear();
    }
    if (has_win_reward()) {
      if (win_reward_ != NULL) win_reward_->::pb::GS2C_LootList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Country_DefenceBorderland_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stageID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stageid_)));
          set_has_stageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rankID;
        break;
      }

      // optional uint32 rankID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_killNum;
        break;
      }

      // optional uint32 killNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killnum_)));
          set_has_killnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_take_reward;
        break;
      }

      // optional bool is_take_reward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_take_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_take_reward_)));
          set_has_is_take_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_canTakeExReward;
        break;
      }

      // optional bool canTakeExReward = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canTakeExReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cantakeexreward_)));
          set_has_cantakeexreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rank_reward;
        break;
      }

      // optional .pb.GS2C_LootList rank_reward = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rank_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_win_reward;
        break;
      }

      // optional .pb.GS2C_LootList win_reward = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_win_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_win_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Country_DefenceBorderland_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stageID = 1;
  if (has_stageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stageid(), output);
  }

  // optional uint32 rankID = 2;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rankid(), output);
  }

  // optional uint32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }

  // optional uint32 killNum = 4;
  if (has_killnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->killnum(), output);
  }

  // optional bool is_take_reward = 5;
  if (has_is_take_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_take_reward(), output);
  }

  // optional bool canTakeExReward = 6;
  if (has_cantakeexreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->cantakeexreward(), output);
  }

  // optional .pb.GS2C_LootList rank_reward = 7;
  if (has_rank_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->rank_reward(), output);
  }

  // optional .pb.GS2C_LootList win_reward = 8;
  if (has_win_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->win_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Country_DefenceBorderland_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 stageID = 1;
  if (has_stageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stageid(), target);
  }

  // optional uint32 rankID = 2;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rankid(), target);
  }

  // optional uint32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }

  // optional uint32 killNum = 4;
  if (has_killnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->killnum(), target);
  }

  // optional bool is_take_reward = 5;
  if (has_is_take_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_take_reward(), target);
  }

  // optional bool canTakeExReward = 6;
  if (has_cantakeexreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->cantakeexreward(), target);
  }

  // optional .pb.GS2C_LootList rank_reward = 7;
  if (has_rank_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->rank_reward(), target);
  }

  // optional .pb.GS2C_LootList win_reward = 8;
  if (has_win_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->win_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Country_DefenceBorderland_Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stageID = 1;
    if (has_stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stageid());
    }

    // optional uint32 rankID = 2;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rankid());
    }

    // optional uint32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 killNum = 4;
    if (has_killnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killnum());
    }

    // optional bool is_take_reward = 5;
    if (has_is_take_reward()) {
      total_size += 1 + 1;
    }

    // optional bool canTakeExReward = 6;
    if (has_cantakeexreward()) {
      total_size += 1 + 1;
    }

    // optional .pb.GS2C_LootList rank_reward = 7;
    if (has_rank_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rank_reward());
    }

    // optional .pb.GS2C_LootList win_reward = 8;
    if (has_win_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->win_reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Country_DefenceBorderland_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Country_DefenceBorderland_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Country_DefenceBorderland_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Country_DefenceBorderland_Player::MergeFrom(const GS2C_Country_DefenceBorderland_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stageid()) {
      set_stageid(from.stageid());
    }
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_killnum()) {
      set_killnum(from.killnum());
    }
    if (from.has_is_take_reward()) {
      set_is_take_reward(from.is_take_reward());
    }
    if (from.has_cantakeexreward()) {
      set_cantakeexreward(from.cantakeexreward());
    }
    if (from.has_rank_reward()) {
      mutable_rank_reward()->::pb::GS2C_LootList::MergeFrom(from.rank_reward());
    }
    if (from.has_win_reward()) {
      mutable_win_reward()->::pb::GS2C_LootList::MergeFrom(from.win_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Country_DefenceBorderland_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Country_DefenceBorderland_Player::CopyFrom(const GS2C_Country_DefenceBorderland_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Country_DefenceBorderland_Player::IsInitialized() const {

  return true;
}

void GS2C_Country_DefenceBorderland_Player::Swap(GS2C_Country_DefenceBorderland_Player* other) {
  if (other != this) {
    std::swap(stageid_, other->stageid_);
    std::swap(rankid_, other->rankid_);
    std::swap(rank_, other->rank_);
    std::swap(killnum_, other->killnum_);
    std::swap(is_take_reward_, other->is_take_reward_);
    std::swap(cantakeexreward_, other->cantakeexreward_);
    std::swap(rank_reward_, other->rank_reward_);
    std::swap(win_reward_, other->win_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Country_DefenceBorderland_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Country_DefenceBorderland_Player_descriptor_;
  metadata.reflection = GS2C_Country_DefenceBorderland_Player_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Country_DefenceBorderland_Take_Reward::kStageFieldNumber;
#endif  // !_MSC_VER

C2GS_Country_DefenceBorderland_Take_Reward::C2GS_Country_DefenceBorderland_Take_Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Country_DefenceBorderland_Take_Reward::InitAsDefaultInstance() {
}

C2GS_Country_DefenceBorderland_Take_Reward::C2GS_Country_DefenceBorderland_Take_Reward(const C2GS_Country_DefenceBorderland_Take_Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Country_DefenceBorderland_Take_Reward::SharedCtor() {
  _cached_size_ = 0;
  stage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Country_DefenceBorderland_Take_Reward::~C2GS_Country_DefenceBorderland_Take_Reward() {
  SharedDtor();
}

void C2GS_Country_DefenceBorderland_Take_Reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Country_DefenceBorderland_Take_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Country_DefenceBorderland_Take_Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Country_DefenceBorderland_Take_Reward_descriptor_;
}

const C2GS_Country_DefenceBorderland_Take_Reward& C2GS_Country_DefenceBorderland_Take_Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

C2GS_Country_DefenceBorderland_Take_Reward* C2GS_Country_DefenceBorderland_Take_Reward::default_instance_ = NULL;

C2GS_Country_DefenceBorderland_Take_Reward* C2GS_Country_DefenceBorderland_Take_Reward::New() const {
  return new C2GS_Country_DefenceBorderland_Take_Reward;
}

void C2GS_Country_DefenceBorderland_Take_Reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Country_DefenceBorderland_Take_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Country_DefenceBorderland_Take_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stage = 1;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Country_DefenceBorderland_Take_Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 stage = 1;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Country_DefenceBorderland_Take_Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stage = 1;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Country_DefenceBorderland_Take_Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Country_DefenceBorderland_Take_Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Country_DefenceBorderland_Take_Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Country_DefenceBorderland_Take_Reward::MergeFrom(const C2GS_Country_DefenceBorderland_Take_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage()) {
      set_stage(from.stage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Country_DefenceBorderland_Take_Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Country_DefenceBorderland_Take_Reward::CopyFrom(const C2GS_Country_DefenceBorderland_Take_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Country_DefenceBorderland_Take_Reward::IsInitialized() const {

  return true;
}

void C2GS_Country_DefenceBorderland_Take_Reward::Swap(C2GS_Country_DefenceBorderland_Take_Reward* other) {
  if (other != this) {
    std::swap(stage_, other->stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Country_DefenceBorderland_Take_Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Country_DefenceBorderland_Take_Reward_descriptor_;
  metadata.reflection = C2GS_Country_DefenceBorderland_Take_Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Country_DefenceBorderland_Take_Reward::kIsSuccessFieldNumber;
const int GS2C_Country_DefenceBorderland_Take_Reward::kErrRetFieldNumber;
#endif  // !_MSC_VER

GS2C_Country_DefenceBorderland_Take_Reward::GS2C_Country_DefenceBorderland_Take_Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Country_DefenceBorderland_Take_Reward::InitAsDefaultInstance() {
}

GS2C_Country_DefenceBorderland_Take_Reward::GS2C_Country_DefenceBorderland_Take_Reward(const GS2C_Country_DefenceBorderland_Take_Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Country_DefenceBorderland_Take_Reward::SharedCtor() {
  _cached_size_ = 0;
  issuccess_ = false;
  errret_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Country_DefenceBorderland_Take_Reward::~GS2C_Country_DefenceBorderland_Take_Reward() {
  SharedDtor();
}

void GS2C_Country_DefenceBorderland_Take_Reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Country_DefenceBorderland_Take_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Country_DefenceBorderland_Take_Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Country_DefenceBorderland_Take_Reward_descriptor_;
}

const GS2C_Country_DefenceBorderland_Take_Reward& GS2C_Country_DefenceBorderland_Take_Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2eproto();
  return *default_instance_;
}

GS2C_Country_DefenceBorderland_Take_Reward* GS2C_Country_DefenceBorderland_Take_Reward::default_instance_ = NULL;

GS2C_Country_DefenceBorderland_Take_Reward* GS2C_Country_DefenceBorderland_Take_Reward::New() const {
  return new GS2C_Country_DefenceBorderland_Take_Reward;
}

void GS2C_Country_DefenceBorderland_Take_Reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    issuccess_ = false;
    errret_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Country_DefenceBorderland_Take_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isSuccess = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issuccess_)));
          set_has_issuccess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_errRet;
        break;
      }

      // optional .pb.Country_Task_Err errRet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errRet:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Country_Task_Err_IsValid(value)) {
            set_errret(static_cast< ::pb::Country_Task_Err >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Country_DefenceBorderland_Take_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isSuccess = 1;
  if (has_issuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->issuccess(), output);
  }

  // optional .pb.Country_Task_Err errRet = 2;
  if (has_errret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->errret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Country_DefenceBorderland_Take_Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isSuccess = 1;
  if (has_issuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->issuccess(), target);
  }

  // optional .pb.Country_Task_Err errRet = 2;
  if (has_errret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->errret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Country_DefenceBorderland_Take_Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isSuccess = 1;
    if (has_issuccess()) {
      total_size += 1 + 1;
    }

    // optional .pb.Country_Task_Err errRet = 2;
    if (has_errret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->errret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Country_DefenceBorderland_Take_Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Country_DefenceBorderland_Take_Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Country_DefenceBorderland_Take_Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Country_DefenceBorderland_Take_Reward::MergeFrom(const GS2C_Country_DefenceBorderland_Take_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issuccess()) {
      set_issuccess(from.issuccess());
    }
    if (from.has_errret()) {
      set_errret(from.errret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Country_DefenceBorderland_Take_Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Country_DefenceBorderland_Take_Reward::CopyFrom(const GS2C_Country_DefenceBorderland_Take_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Country_DefenceBorderland_Take_Reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Country_DefenceBorderland_Take_Reward::Swap(GS2C_Country_DefenceBorderland_Take_Reward* other) {
  if (other != this) {
    std::swap(issuccess_, other->issuccess_);
    std::swap(errret_, other->errret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Country_DefenceBorderland_Take_Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Country_DefenceBorderland_Take_Reward_descriptor_;
  metadata.reflection = GS2C_Country_DefenceBorderland_Take_Reward_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
