// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameServer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* OtherInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OtherInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerAllData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerAllData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreatePlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatePlayerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegistCrossPlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegistCrossPlayerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerAppendData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerAppendData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncPlayerCacheData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncPlayerCacheData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CQuickLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CQuickLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* SQuickLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SQuickLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_ItemOperateError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_ItemOperateError_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Player_Online_State_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Player_Online_State_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Is_Player_Exist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Is_Player_Exist_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Is_Player_Exist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Is_Player_Exist_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeedbackInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeedbackInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeedbackRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeedbackRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* NUll_Ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NUll_Ret_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* KickErrorType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QuickLoginResult_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameServer_2eproto() {
  protobuf_AddDesc_GameServer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameServer.proto");
  GOOGLE_CHECK(file != NULL);
  OtherInfo_descriptor_ = file->message_type(0);
  static const int OtherInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherInfo, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherInfo, platform_id_),
  };
  OtherInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OtherInfo_descriptor_,
      OtherInfo::default_instance_,
      OtherInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OtherInfo));
  PlayerAllData_descriptor_ = file->message_type(1);
  static const int PlayerAllData_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, full_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, bag_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, character_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, mails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, quest_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, behavior_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, other_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, string_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, fuben_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, world_map_logic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, market_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, altar_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, dungeon_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, bao_qi_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, smithy_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, buff_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, technology_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, dailyquest_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, growupquest_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, growupquestgroup_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, sign_up_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, pass_stage_reward_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, activity_star_box_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, achievement_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, gov_affairs_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, hero_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, world_fight_achieve_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, seige_force_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, continue_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, teach_rec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, congratulate_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, con_been_congratulated_),
  };
  PlayerAllData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerAllData_descriptor_,
      PlayerAllData::default_instance_,
      PlayerAllData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAllData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerAllData));
  CreatePlayerData_descriptor_ = file->message_type(2);
  static const int CreatePlayerData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayerData, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayerData, all_data_),
  };
  CreatePlayerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatePlayerData_descriptor_,
      CreatePlayerData::default_instance_,
      CreatePlayerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatePlayerData));
  RegistCrossPlayerData_descriptor_ = file->message_type(3);
  static const int RegistCrossPlayerData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistCrossPlayerData, player_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistCrossPlayerData, append_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistCrossPlayerData, country_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistCrossPlayerData, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistCrossPlayerData, cross_unique_id_),
  };
  RegistCrossPlayerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegistCrossPlayerData_descriptor_,
      RegistCrossPlayerData::default_instance_,
      RegistCrossPlayerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistCrossPlayerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistCrossPlayerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegistCrossPlayerData));
  PlayerAppendData_descriptor_ = file->message_type(4);
  static const int PlayerAppendData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAppendData, module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAppendData, building_),
  };
  PlayerAppendData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerAppendData_descriptor_,
      PlayerAppendData::default_instance_,
      PlayerAppendData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAppendData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAppendData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerAppendData));
  SyncPlayerCacheData_descriptor_ = file->message_type(5);
  static const int SyncPlayerCacheData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPlayerCacheData, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPlayerCacheData, all_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPlayerCacheData, append_),
  };
  SyncPlayerCacheData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncPlayerCacheData_descriptor_,
      SyncPlayerCacheData::default_instance_,
      SyncPlayerCacheData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPlayerCacheData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPlayerCacheData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncPlayerCacheData));
  CQuickLogin_descriptor_ = file->message_type(6);
  static const int CQuickLogin_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuickLogin, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuickLogin, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuickLogin, session_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuickLogin, platform_id_),
  };
  CQuickLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CQuickLogin_descriptor_,
      CQuickLogin::default_instance_,
      CQuickLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuickLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuickLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CQuickLogin));
  SQuickLogin_descriptor_ = file->message_type(7);
  static const int SQuickLogin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SQuickLogin, result_),
  };
  SQuickLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SQuickLogin_descriptor_,
      SQuickLogin::default_instance_,
      SQuickLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SQuickLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SQuickLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SQuickLogin));
  GS2C_ItemOperateError_descriptor_ = file->message_type(8);
  static const int GS2C_ItemOperateError_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ItemOperateError, error_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ItemOperateError, property_),
  };
  GS2C_ItemOperateError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_ItemOperateError_descriptor_,
      GS2C_ItemOperateError::default_instance_,
      GS2C_ItemOperateError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ItemOperateError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ItemOperateError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_ItemOperateError));
  GS2C_Player_Online_State_descriptor_ = file->message_type(9);
  static const int GS2C_Player_Online_State_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Player_Online_State, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Player_Online_State, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Player_Online_State, isonline_),
  };
  GS2C_Player_Online_State_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Player_Online_State_descriptor_,
      GS2C_Player_Online_State::default_instance_,
      GS2C_Player_Online_State_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Player_Online_State, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Player_Online_State, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Player_Online_State));
  C2GS_Is_Player_Exist_descriptor_ = file->message_type(10);
  static const int C2GS_Is_Player_Exist_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Is_Player_Exist, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Is_Player_Exist, your_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Is_Player_Exist, send_from_),
  };
  C2GS_Is_Player_Exist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Is_Player_Exist_descriptor_,
      C2GS_Is_Player_Exist::default_instance_,
      C2GS_Is_Player_Exist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Is_Player_Exist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Is_Player_Exist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Is_Player_Exist));
  GS2C_Is_Player_Exist_descriptor_ = file->message_type(11);
  static const int GS2C_Is_Player_Exist_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Is_Player_Exist, is_exist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Is_Player_Exist, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Is_Player_Exist, is_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Is_Player_Exist, your_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Is_Player_Exist, send_from_),
  };
  GS2C_Is_Player_Exist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Is_Player_Exist_descriptor_,
      GS2C_Is_Player_Exist::default_instance_,
      GS2C_Is_Player_Exist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Is_Player_Exist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Is_Player_Exist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Is_Player_Exist));
  FeedbackInfo_descriptor_ = file->message_type(12);
  static const int FeedbackInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackInfo, feedback_),
  };
  FeedbackInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeedbackInfo_descriptor_,
      FeedbackInfo::default_instance_,
      FeedbackInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeedbackInfo));
  FeedbackRet_descriptor_ = file->message_type(13);
  static const int FeedbackRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackRet, is_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackRet, error_code_),
  };
  FeedbackRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeedbackRet_descriptor_,
      FeedbackRet::default_instance_,
      FeedbackRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeedbackRet));
  NUll_Ret_descriptor_ = file->message_type(14);
  static const int NUll_Ret_offsets_[1] = {
  };
  NUll_Ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NUll_Ret_descriptor_,
      NUll_Ret::default_instance_,
      NUll_Ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NUll_Ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NUll_Ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NUll_Ret));
  KickErrorType_descriptor_ = file->enum_type(0);
  QuickLoginResult_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameServer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OtherInfo_descriptor_, &OtherInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerAllData_descriptor_, &PlayerAllData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatePlayerData_descriptor_, &CreatePlayerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegistCrossPlayerData_descriptor_, &RegistCrossPlayerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerAppendData_descriptor_, &PlayerAppendData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncPlayerCacheData_descriptor_, &SyncPlayerCacheData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CQuickLogin_descriptor_, &CQuickLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SQuickLogin_descriptor_, &SQuickLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_ItemOperateError_descriptor_, &GS2C_ItemOperateError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Player_Online_State_descriptor_, &GS2C_Player_Online_State::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Is_Player_Exist_descriptor_, &C2GS_Is_Player_Exist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Is_Player_Exist_descriptor_, &GS2C_Is_Player_Exist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeedbackInfo_descriptor_, &FeedbackInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeedbackRet_descriptor_, &FeedbackRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NUll_Ret_descriptor_, &NUll_Ret::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameServer_2eproto() {
  delete OtherInfo::default_instance_;
  delete OtherInfo_reflection_;
  delete PlayerAllData::default_instance_;
  delete PlayerAllData_reflection_;
  delete CreatePlayerData::default_instance_;
  delete CreatePlayerData_reflection_;
  delete RegistCrossPlayerData::default_instance_;
  delete RegistCrossPlayerData_reflection_;
  delete PlayerAppendData::default_instance_;
  delete PlayerAppendData_reflection_;
  delete SyncPlayerCacheData::default_instance_;
  delete SyncPlayerCacheData_reflection_;
  delete CQuickLogin::default_instance_;
  delete CQuickLogin_reflection_;
  delete SQuickLogin::default_instance_;
  delete SQuickLogin_reflection_;
  delete GS2C_ItemOperateError::default_instance_;
  delete GS2C_ItemOperateError_reflection_;
  delete GS2C_Player_Online_State::default_instance_;
  delete GS2C_Player_Online_State_reflection_;
  delete C2GS_Is_Player_Exist::default_instance_;
  delete C2GS_Is_Player_Exist_reflection_;
  delete GS2C_Is_Player_Exist::default_instance_;
  delete GS2C_Is_Player_Exist_reflection_;
  delete FeedbackInfo::default_instance_;
  delete FeedbackInfo_reflection_;
  delete FeedbackRet::default_instance_;
  delete FeedbackRet_reflection_;
  delete NUll_Ret::default_instance_;
  delete NUll_Ret_reflection_;
}

void protobuf_AddDesc_GameServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_CommomDef_2eproto();
  ::pb::protobuf_AddDesc_Stage_2eproto();
  ::pb::protobuf_AddDesc_Fuben_2eproto();
  ::pb::protobuf_AddDesc_MapLogic_2eproto();
  ::pb::protobuf_AddDesc_Item_2eproto();
  ::pb::protobuf_AddDesc_Character_2eproto();
  ::pb::protobuf_AddDesc_Quest_2eproto();
  ::pb::protobuf_AddDesc_Mail_2eproto();
  ::pb::protobuf_AddDesc_Market_2eproto();
  ::pb::protobuf_AddDesc_Altar_2eproto();
  ::pb::protobuf_AddDesc_Dungeon_2eproto();
  ::pb::protobuf_AddDesc_BaoQi_2eproto();
  ::pb::protobuf_AddDesc_Smithy_2eproto();
  ::pb::protobuf_AddDesc_Buff_2eproto();
  ::pb::protobuf_AddDesc_Technology_2eproto();
  ::pb::protobuf_AddDesc_Module_2eproto();
  ::pb::protobuf_AddDesc_Activity_2eproto();
  ::pb::protobuf_AddDesc_Palace_2eproto();
  ::pb::protobuf_AddDesc_World_2eproto();
  ::pb::protobuf_AddDesc_TeachMap_2eproto();
  ::pb::protobuf_AddDesc_Rank_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020GameServer.proto\022\002pb\032\017CommomDef.proto\032"
    "\013Stage.proto\032\013Fuben.proto\032\016MapLogic.prot"
    "o\032\nItem.proto\032\017Character.proto\032\013Quest.pr"
    "oto\032\nMail.proto\032\014Market.proto\032\013Altar.pro"
    "to\032\rDungeon.proto\032\013BaoQi.proto\032\014Smithy.p"
    "roto\032\nBuff.proto\032\020Technology.proto\032\014Modu"
    "le.proto\032\016Activity.proto\032\014Palace.proto\032\013"
    "World.proto\032\016TeachMap.proto\032\nRank.proto\""
    "4\n\tOtherInfo\022\022\n\nchannel_id\030\001 \001(\r\022\023\n\013plat"
    "form_id\030\002 \001(\r\"\264\014\n\rPlayerAllData\022\'\n\nfull_"
    "value\030\001 \001(\0132\023.pb.ObjectFullValue\022\036\n\010bag_"
    "info\030\002 \001(\0132\014.pb.GS2C_Bag\0221\n\016character_in"
    "fo\030\003 \001(\0132\031.pb.GS2C_CharacterStorage\022%\n\005m"
    "ails\030\004 \001(\0132\026.pb.GS2C_Mail_MailList\022%\n\tqu"
    "est_log\030\005 \001(\0132\022.pb.GS2C_QuestList\022-\n\016beh"
    "avior_count\030\006 \001(\0132\025.pb.GxDB_BehaviorList"
    "\022!\n\nother_info\030\007 \001(\0132\r.pb.OtherInfo\022/\n\013s"
    "tring_data\030\010 \001(\0132\032.pb.GS2C_PlayerStringG"
    "roup\022+\n\nfuben_info\030\t \001(\0132\027.pb.GS2C_Fuben"
    "_All_Info\022/\n\017world_map_logic\030\n \001(\0132\026.pb."
    "GS2C_MapLogic_Init\022-\n\013market_info\030\013 \001(\0132"
    "\030.pb.GS2C_Market_All_Info\022+\n\naltar_info\030"
    "\014 \001(\0132\027.pb.GS2C_Altar_All_Info\022/\n\014dungeo"
    "n_info\030\r \001(\0132\031.pb.GS2C_Dungeon_All_Info\022"
    ",\n\013bao_qi_info\030\016 \001(\0132\027.pb.GS2C_BaoQi_All"
    "_Info\022-\n\013smithy_info\030\017 \001(\0132\030.pb.GS2C_Smi"
    "thy_All_Info\022)\n\tbuff_info\030\020 \001(\0132\026.pb.GS2"
    "C_Buff_All_Info\0225\n\017technology_info\030\021 \001(\013"
    "2\034.pb.GxDB_Technology_All_Info\022-\n\017dailyq"
    "uest_info\030\022 \001(\0132\024.pb.GxDB_Daily_Quest\0220\n"
    "\020growupquest_info\030\023 \001(\0132\026.pb.GxDB_Grow_U"
    "p_Quest\022;\n\025growupquestgroup_info\030\024 \001(\0132\034"
    ".pb.GxDB_Grow_Up_Quest_Group\022&\n\014sign_up_"
    "info\030\025 \001(\0132\020.pb.GxDB_Sign_Up\022:\n\026pass_sta"
    "ge_reward_info\030\026 \001(\0132\032.pb.GxDB_Pass_Stag"
    "e_Reward\0228\n\026activity_star_box_info\030\027 \001(\013"
    "2\030.pb.GxDB_ActivityStarBox\0224\n\020achievemen"
    "t_info\030\030 \001(\0132\032.pb.GxDB_PalaceAchievement"
    "\0221\n\020gov_affairs_info\030\031 \001(\0132\027.pb.GxDB_Gov"
    "AffairsInfo\022)\n\013hero_reward\030\032 \001(\0132\024.pb.Gx"
    "DB_Hero_Reward\022<\n\030world_fight_achieve_in"
    "fo\030\033 \001(\0132\032.pb.GxDB_World_Achievement\0228\n\020"
    "seige_force_info\030\034 \001(\0132\036.pb.GxDB_Seige_F"
    "orce_Info_Pack\0226\n\rcontinue_info\030\035 \001(\0132\037."
    "pb.GxDB_ContinueOccupyCityInfo\022)\n\tteach_"
    "rec\030\036 \001(\0132\026.pb.GS2C_Get_Teach_Rec\0229\n\021con"
    "gratulate_info\030\037 \001(\0132\036.pb.GxDB_Congratul"
    "ateRewardLog\022F\n\026con_been_congratulated\030 "
    " \001(\0132&.pb.GxDB_CongratulateBeenCongratua"
    "lted\"K\n\020CreatePlayerData\022\022\n\naccount_id\030\001"
    " \002(\004\022#\n\010all_data\030\002 \002(\0132\021.pb.PlayerAllDat"
    "a\"\246\001\n\025RegistCrossPlayerData\022&\n\013player_da"
    "ta\030\001 \002(\0132\021.pb.PlayerAllData\022$\n\006append\030\002 "
    "\001(\0132\024.pb.PlayerAppendData\022\022\n\ncountry_id\030"
    "\003 \001(\r\022\022\n\naccount_id\030\004 \001(\004\022\027\n\017cross_Uniqu"
    "e_id\030\005 \001(\r\"d\n\020PlayerAppendData\022%\n\006module"
    "\030\001 \001(\0132\025.pb.GxDB_Modules_Info\022)\n\010buildin"
    "g\030\002 \001(\0132\027.pb.GxDB_Buildings_Info\"t\n\023Sync"
    "PlayerCacheData\022\022\n\naccount_id\030\001 \002(\004\022#\n\010a"
    "ll_data\030\002 \002(\0132\021.pb.PlayerAllData\022$\n\006appe"
    "nd\030\003 \001(\0132\024.pb.PlayerAppendData\"^\n\013CQuick"
    "Login\022\022\n\naccount_id\030\001 \001(\004\022\021\n\tplayer_id\030\002"
    " \001(\004\022\023\n\013session_key\030\003 \001(\t\022\023\n\013platform_id"
    "\030\004 \001(\r\"3\n\013SQuickLogin\022$\n\006result\030\001 \002(\0162\024."
    "pb.QuickLoginResult\"=\n\025GS2C_ItemOperateE"
    "rror\022\022\n\nerror_type\030\001 \002(\r\022\020\n\010property\030\002 \001"
    "(\r\"V\n\030GS2C_Player_Online_State\022\023\n\013player"
    "_guid\030\001 \001(\004\022\023\n\013player_name\030\002 \001(\t\022\020\n\010ison"
    "line\030\003 \001(\010\"Q\n\024C2GS_Is_Player_Exist\022\023\n\013pl"
    "ayer_name\030\001 \002(\t\022\021\n\tyour_guid\030\002 \002(\004\022\021\n\tse"
    "nd_from\030\003 \001(\r\"v\n\024GS2C_Is_Player_Exist\022\020\n"
    "\010is_exist\030\001 \002(\010\022\023\n\013player_name\030\002 \001(\t\022\021\n\t"
    "is_online\030\003 \001(\010\022\021\n\tyour_guid\030\004 \002(\004\022\021\n\tse"
    "nd_from\030\005 \001(\r\" \n\014FeedbackInfo\022\020\n\010feedbac"
    "k\030\001 \001(\t\"5\n\013FeedbackRet\022\022\n\nis_success\030\001 \002"
    "(\010\022\022\n\nerror_code\030\002 \001(\005\"\n\n\010NUll_Ret*\034\n\rKi"
    "ckErrorType\022\013\n\007RELOGIN\020\001*\372\001\n\020QuickLoginR"
    "esult\022\027\n\023QUICK_LOGIN_SUCCESS\020\000\022!\n\035QUICK_"
    "LOGIN_SUCCESS_NO_PLAYER\020\001\022\031\n\025QUICK_LOGIN"
    "_KEY_ERROR\020\002\022\034\n\030QUICK_LOGIN_KEY_PAST_DUE"
    "\020\003\022&\n\"QUICK_LOGIN_KEY_UNAVAILABLE_SERVER"
    "\020\004\022%\n!QUICK_LOGIN_CAN_NOT_FIND_KEY_INFO\020"
    "\005\022\"\n\036QUICK_LOGIN_NEED_RELOGIN_AGAIN\020\006", 3317);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameServer.proto", &protobuf_RegisterTypes);
  OtherInfo::default_instance_ = new OtherInfo();
  PlayerAllData::default_instance_ = new PlayerAllData();
  CreatePlayerData::default_instance_ = new CreatePlayerData();
  RegistCrossPlayerData::default_instance_ = new RegistCrossPlayerData();
  PlayerAppendData::default_instance_ = new PlayerAppendData();
  SyncPlayerCacheData::default_instance_ = new SyncPlayerCacheData();
  CQuickLogin::default_instance_ = new CQuickLogin();
  SQuickLogin::default_instance_ = new SQuickLogin();
  GS2C_ItemOperateError::default_instance_ = new GS2C_ItemOperateError();
  GS2C_Player_Online_State::default_instance_ = new GS2C_Player_Online_State();
  C2GS_Is_Player_Exist::default_instance_ = new C2GS_Is_Player_Exist();
  GS2C_Is_Player_Exist::default_instance_ = new GS2C_Is_Player_Exist();
  FeedbackInfo::default_instance_ = new FeedbackInfo();
  FeedbackRet::default_instance_ = new FeedbackRet();
  NUll_Ret::default_instance_ = new NUll_Ret();
  OtherInfo::default_instance_->InitAsDefaultInstance();
  PlayerAllData::default_instance_->InitAsDefaultInstance();
  CreatePlayerData::default_instance_->InitAsDefaultInstance();
  RegistCrossPlayerData::default_instance_->InitAsDefaultInstance();
  PlayerAppendData::default_instance_->InitAsDefaultInstance();
  SyncPlayerCacheData::default_instance_->InitAsDefaultInstance();
  CQuickLogin::default_instance_->InitAsDefaultInstance();
  SQuickLogin::default_instance_->InitAsDefaultInstance();
  GS2C_ItemOperateError::default_instance_->InitAsDefaultInstance();
  GS2C_Player_Online_State::default_instance_->InitAsDefaultInstance();
  C2GS_Is_Player_Exist::default_instance_->InitAsDefaultInstance();
  GS2C_Is_Player_Exist::default_instance_->InitAsDefaultInstance();
  FeedbackInfo::default_instance_->InitAsDefaultInstance();
  FeedbackRet::default_instance_->InitAsDefaultInstance();
  NUll_Ret::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameServer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameServer_2eproto {
  StaticDescriptorInitializer_GameServer_2eproto() {
    protobuf_AddDesc_GameServer_2eproto();
  }
} static_descriptor_initializer_GameServer_2eproto_;
const ::google::protobuf::EnumDescriptor* KickErrorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickErrorType_descriptor_;
}
bool KickErrorType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QuickLoginResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuickLoginResult_descriptor_;
}
bool QuickLoginResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int OtherInfo::kChannelIdFieldNumber;
const int OtherInfo::kPlatformIdFieldNumber;
#endif  // !_MSC_VER

OtherInfo::OtherInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OtherInfo::InitAsDefaultInstance() {
}

OtherInfo::OtherInfo(const OtherInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OtherInfo::SharedCtor() {
  _cached_size_ = 0;
  channel_id_ = 0u;
  platform_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OtherInfo::~OtherInfo() {
  SharedDtor();
}

void OtherInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OtherInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OtherInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OtherInfo_descriptor_;
}

const OtherInfo& OtherInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
  return *default_instance_;
}

OtherInfo* OtherInfo::default_instance_ = NULL;

OtherInfo* OtherInfo::New() const {
  return new OtherInfo;
}

void OtherInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_id_ = 0u;
    platform_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OtherInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_platform_id;
        break;
      }

      // optional uint32 platform_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_id_)));
          set_has_platform_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OtherInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel_id(), output);
  }

  // optional uint32 platform_id = 2;
  if (has_platform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->platform_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OtherInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 channel_id = 1;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel_id(), target);
  }

  // optional uint32 platform_id = 2;
  if (has_platform_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->platform_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OtherInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional uint32 platform_id = 2;
    if (has_platform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platform_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OtherInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OtherInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OtherInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OtherInfo::MergeFrom(const OtherInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_platform_id()) {
      set_platform_id(from.platform_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OtherInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtherInfo::CopyFrom(const OtherInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherInfo::IsInitialized() const {

  return true;
}

void OtherInfo::Swap(OtherInfo* other) {
  if (other != this) {
    std::swap(channel_id_, other->channel_id_);
    std::swap(platform_id_, other->platform_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OtherInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OtherInfo_descriptor_;
  metadata.reflection = OtherInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerAllData::kFullValueFieldNumber;
const int PlayerAllData::kBagInfoFieldNumber;
const int PlayerAllData::kCharacterInfoFieldNumber;
const int PlayerAllData::kMailsFieldNumber;
const int PlayerAllData::kQuestLogFieldNumber;
const int PlayerAllData::kBehaviorCountFieldNumber;
const int PlayerAllData::kOtherInfoFieldNumber;
const int PlayerAllData::kStringDataFieldNumber;
const int PlayerAllData::kFubenInfoFieldNumber;
const int PlayerAllData::kWorldMapLogicFieldNumber;
const int PlayerAllData::kMarketInfoFieldNumber;
const int PlayerAllData::kAltarInfoFieldNumber;
const int PlayerAllData::kDungeonInfoFieldNumber;
const int PlayerAllData::kBaoQiInfoFieldNumber;
const int PlayerAllData::kSmithyInfoFieldNumber;
const int PlayerAllData::kBuffInfoFieldNumber;
const int PlayerAllData::kTechnologyInfoFieldNumber;
const int PlayerAllData::kDailyquestInfoFieldNumber;
const int PlayerAllData::kGrowupquestInfoFieldNumber;
const int PlayerAllData::kGrowupquestgroupInfoFieldNumber;
const int PlayerAllData::kSignUpInfoFieldNumber;
const int PlayerAllData::kPassStageRewardInfoFieldNumber;
const int PlayerAllData::kActivityStarBoxInfoFieldNumber;
const int PlayerAllData::kAchievementInfoFieldNumber;
const int PlayerAllData::kGovAffairsInfoFieldNumber;
const int PlayerAllData::kHeroRewardFieldNumber;
const int PlayerAllData::kWorldFightAchieveInfoFieldNumber;
const int PlayerAllData::kSeigeForceInfoFieldNumber;
const int PlayerAllData::kContinueInfoFieldNumber;
const int PlayerAllData::kTeachRecFieldNumber;
const int PlayerAllData::kCongratulateInfoFieldNumber;
const int PlayerAllData::kConBeenCongratulatedFieldNumber;
#endif  // !_MSC_VER

PlayerAllData::PlayerAllData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerAllData::InitAsDefaultInstance() {
  full_value_ = const_cast< ::pb::ObjectFullValue*>(&::pb::ObjectFullValue::default_instance());
  bag_info_ = const_cast< ::pb::GS2C_Bag*>(&::pb::GS2C_Bag::default_instance());
  character_info_ = const_cast< ::pb::GS2C_CharacterStorage*>(&::pb::GS2C_CharacterStorage::default_instance());
  mails_ = const_cast< ::pb::GS2C_Mail_MailList*>(&::pb::GS2C_Mail_MailList::default_instance());
  quest_log_ = const_cast< ::pb::GS2C_QuestList*>(&::pb::GS2C_QuestList::default_instance());
  behavior_count_ = const_cast< ::pb::GxDB_BehaviorList*>(&::pb::GxDB_BehaviorList::default_instance());
  other_info_ = const_cast< ::pb::OtherInfo*>(&::pb::OtherInfo::default_instance());
  string_data_ = const_cast< ::pb::GS2C_PlayerStringGroup*>(&::pb::GS2C_PlayerStringGroup::default_instance());
  fuben_info_ = const_cast< ::pb::GS2C_Fuben_All_Info*>(&::pb::GS2C_Fuben_All_Info::default_instance());
  world_map_logic_ = const_cast< ::pb::GS2C_MapLogic_Init*>(&::pb::GS2C_MapLogic_Init::default_instance());
  market_info_ = const_cast< ::pb::GS2C_Market_All_Info*>(&::pb::GS2C_Market_All_Info::default_instance());
  altar_info_ = const_cast< ::pb::GS2C_Altar_All_Info*>(&::pb::GS2C_Altar_All_Info::default_instance());
  dungeon_info_ = const_cast< ::pb::GS2C_Dungeon_All_Info*>(&::pb::GS2C_Dungeon_All_Info::default_instance());
  bao_qi_info_ = const_cast< ::pb::GS2C_BaoQi_All_Info*>(&::pb::GS2C_BaoQi_All_Info::default_instance());
  smithy_info_ = const_cast< ::pb::GS2C_Smithy_All_Info*>(&::pb::GS2C_Smithy_All_Info::default_instance());
  buff_info_ = const_cast< ::pb::GS2C_Buff_All_Info*>(&::pb::GS2C_Buff_All_Info::default_instance());
  technology_info_ = const_cast< ::pb::GxDB_Technology_All_Info*>(&::pb::GxDB_Technology_All_Info::default_instance());
  dailyquest_info_ = const_cast< ::pb::GxDB_Daily_Quest*>(&::pb::GxDB_Daily_Quest::default_instance());
  growupquest_info_ = const_cast< ::pb::GxDB_Grow_Up_Quest*>(&::pb::GxDB_Grow_Up_Quest::default_instance());
  growupquestgroup_info_ = const_cast< ::pb::GxDB_Grow_Up_Quest_Group*>(&::pb::GxDB_Grow_Up_Quest_Group::default_instance());
  sign_up_info_ = const_cast< ::pb::GxDB_Sign_Up*>(&::pb::GxDB_Sign_Up::default_instance());
  pass_stage_reward_info_ = const_cast< ::pb::GxDB_Pass_Stage_Reward*>(&::pb::GxDB_Pass_Stage_Reward::default_instance());
  activity_star_box_info_ = const_cast< ::pb::GxDB_ActivityStarBox*>(&::pb::GxDB_ActivityStarBox::default_instance());
  achievement_info_ = const_cast< ::pb::GxDB_PalaceAchievement*>(&::pb::GxDB_PalaceAchievement::default_instance());
  gov_affairs_info_ = const_cast< ::pb::GxDB_GovAffairsInfo*>(&::pb::GxDB_GovAffairsInfo::default_instance());
  hero_reward_ = const_cast< ::pb::GxDB_Hero_Reward*>(&::pb::GxDB_Hero_Reward::default_instance());
  world_fight_achieve_info_ = const_cast< ::pb::GxDB_World_Achievement*>(&::pb::GxDB_World_Achievement::default_instance());
  seige_force_info_ = const_cast< ::pb::GxDB_Seige_Force_Info_Pack*>(&::pb::GxDB_Seige_Force_Info_Pack::default_instance());
  continue_info_ = const_cast< ::pb::GxDB_ContinueOccupyCityInfo*>(&::pb::GxDB_ContinueOccupyCityInfo::default_instance());
  teach_rec_ = const_cast< ::pb::GS2C_Get_Teach_Rec*>(&::pb::GS2C_Get_Teach_Rec::default_instance());
  congratulate_info_ = const_cast< ::pb::GxDB_CongratulateRewardLog*>(&::pb::GxDB_CongratulateRewardLog::default_instance());
  con_been_congratulated_ = const_cast< ::pb::GxDB_CongratulateBeenCongratualted*>(&::pb::GxDB_CongratulateBeenCongratualted::default_instance());
}

PlayerAllData::PlayerAllData(const PlayerAllData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerAllData::SharedCtor() {
  _cached_size_ = 0;
  full_value_ = NULL;
  bag_info_ = NULL;
  character_info_ = NULL;
  mails_ = NULL;
  quest_log_ = NULL;
  behavior_count_ = NULL;
  other_info_ = NULL;
  string_data_ = NULL;
  fuben_info_ = NULL;
  world_map_logic_ = NULL;
  market_info_ = NULL;
  altar_info_ = NULL;
  dungeon_info_ = NULL;
  bao_qi_info_ = NULL;
  smithy_info_ = NULL;
  buff_info_ = NULL;
  technology_info_ = NULL;
  dailyquest_info_ = NULL;
  growupquest_info_ = NULL;
  growupquestgroup_info_ = NULL;
  sign_up_info_ = NULL;
  pass_stage_reward_info_ = NULL;
  activity_star_box_info_ = NULL;
  achievement_info_ = NULL;
  gov_affairs_info_ = NULL;
  hero_reward_ = NULL;
  world_fight_achieve_info_ = NULL;
  seige_force_info_ = NULL;
  continue_info_ = NULL;
  teach_rec_ = NULL;
  congratulate_info_ = NULL;
  con_been_congratulated_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerAllData::~PlayerAllData() {
  SharedDtor();
}

void PlayerAllData::SharedDtor() {
  if (this != default_instance_) {
    delete full_value_;
    delete bag_info_;
    delete character_info_;
    delete mails_;
    delete quest_log_;
    delete behavior_count_;
    delete other_info_;
    delete string_data_;
    delete fuben_info_;
    delete world_map_logic_;
    delete market_info_;
    delete altar_info_;
    delete dungeon_info_;
    delete bao_qi_info_;
    delete smithy_info_;
    delete buff_info_;
    delete technology_info_;
    delete dailyquest_info_;
    delete growupquest_info_;
    delete growupquestgroup_info_;
    delete sign_up_info_;
    delete pass_stage_reward_info_;
    delete activity_star_box_info_;
    delete achievement_info_;
    delete gov_affairs_info_;
    delete hero_reward_;
    delete world_fight_achieve_info_;
    delete seige_force_info_;
    delete continue_info_;
    delete teach_rec_;
    delete congratulate_info_;
    delete con_been_congratulated_;
  }
}

void PlayerAllData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerAllData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerAllData_descriptor_;
}

const PlayerAllData& PlayerAllData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
  return *default_instance_;
}

PlayerAllData* PlayerAllData::default_instance_ = NULL;

PlayerAllData* PlayerAllData::New() const {
  return new PlayerAllData;
}

void PlayerAllData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_full_value()) {
      if (full_value_ != NULL) full_value_->::pb::ObjectFullValue::Clear();
    }
    if (has_bag_info()) {
      if (bag_info_ != NULL) bag_info_->::pb::GS2C_Bag::Clear();
    }
    if (has_character_info()) {
      if (character_info_ != NULL) character_info_->::pb::GS2C_CharacterStorage::Clear();
    }
    if (has_mails()) {
      if (mails_ != NULL) mails_->::pb::GS2C_Mail_MailList::Clear();
    }
    if (has_quest_log()) {
      if (quest_log_ != NULL) quest_log_->::pb::GS2C_QuestList::Clear();
    }
    if (has_behavior_count()) {
      if (behavior_count_ != NULL) behavior_count_->::pb::GxDB_BehaviorList::Clear();
    }
    if (has_other_info()) {
      if (other_info_ != NULL) other_info_->::pb::OtherInfo::Clear();
    }
    if (has_string_data()) {
      if (string_data_ != NULL) string_data_->::pb::GS2C_PlayerStringGroup::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_fuben_info()) {
      if (fuben_info_ != NULL) fuben_info_->::pb::GS2C_Fuben_All_Info::Clear();
    }
    if (has_world_map_logic()) {
      if (world_map_logic_ != NULL) world_map_logic_->::pb::GS2C_MapLogic_Init::Clear();
    }
    if (has_market_info()) {
      if (market_info_ != NULL) market_info_->::pb::GS2C_Market_All_Info::Clear();
    }
    if (has_altar_info()) {
      if (altar_info_ != NULL) altar_info_->::pb::GS2C_Altar_All_Info::Clear();
    }
    if (has_dungeon_info()) {
      if (dungeon_info_ != NULL) dungeon_info_->::pb::GS2C_Dungeon_All_Info::Clear();
    }
    if (has_bao_qi_info()) {
      if (bao_qi_info_ != NULL) bao_qi_info_->::pb::GS2C_BaoQi_All_Info::Clear();
    }
    if (has_smithy_info()) {
      if (smithy_info_ != NULL) smithy_info_->::pb::GS2C_Smithy_All_Info::Clear();
    }
    if (has_buff_info()) {
      if (buff_info_ != NULL) buff_info_->::pb::GS2C_Buff_All_Info::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_technology_info()) {
      if (technology_info_ != NULL) technology_info_->::pb::GxDB_Technology_All_Info::Clear();
    }
    if (has_dailyquest_info()) {
      if (dailyquest_info_ != NULL) dailyquest_info_->::pb::GxDB_Daily_Quest::Clear();
    }
    if (has_growupquest_info()) {
      if (growupquest_info_ != NULL) growupquest_info_->::pb::GxDB_Grow_Up_Quest::Clear();
    }
    if (has_growupquestgroup_info()) {
      if (growupquestgroup_info_ != NULL) growupquestgroup_info_->::pb::GxDB_Grow_Up_Quest_Group::Clear();
    }
    if (has_sign_up_info()) {
      if (sign_up_info_ != NULL) sign_up_info_->::pb::GxDB_Sign_Up::Clear();
    }
    if (has_pass_stage_reward_info()) {
      if (pass_stage_reward_info_ != NULL) pass_stage_reward_info_->::pb::GxDB_Pass_Stage_Reward::Clear();
    }
    if (has_activity_star_box_info()) {
      if (activity_star_box_info_ != NULL) activity_star_box_info_->::pb::GxDB_ActivityStarBox::Clear();
    }
    if (has_achievement_info()) {
      if (achievement_info_ != NULL) achievement_info_->::pb::GxDB_PalaceAchievement::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_gov_affairs_info()) {
      if (gov_affairs_info_ != NULL) gov_affairs_info_->::pb::GxDB_GovAffairsInfo::Clear();
    }
    if (has_hero_reward()) {
      if (hero_reward_ != NULL) hero_reward_->::pb::GxDB_Hero_Reward::Clear();
    }
    if (has_world_fight_achieve_info()) {
      if (world_fight_achieve_info_ != NULL) world_fight_achieve_info_->::pb::GxDB_World_Achievement::Clear();
    }
    if (has_seige_force_info()) {
      if (seige_force_info_ != NULL) seige_force_info_->::pb::GxDB_Seige_Force_Info_Pack::Clear();
    }
    if (has_continue_info()) {
      if (continue_info_ != NULL) continue_info_->::pb::GxDB_ContinueOccupyCityInfo::Clear();
    }
    if (has_teach_rec()) {
      if (teach_rec_ != NULL) teach_rec_->::pb::GS2C_Get_Teach_Rec::Clear();
    }
    if (has_congratulate_info()) {
      if (congratulate_info_ != NULL) congratulate_info_->::pb::GxDB_CongratulateRewardLog::Clear();
    }
    if (has_con_been_congratulated()) {
      if (con_been_congratulated_ != NULL) con_been_congratulated_->::pb::GxDB_CongratulateBeenCongratualted::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerAllData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ObjectFullValue full_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_full_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bag_info;
        break;
      }

      // optional .pb.GS2C_Bag bag_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bag_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bag_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_character_info;
        break;
      }

      // optional .pb.GS2C_CharacterStorage character_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_character_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_character_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mails;
        break;
      }

      // optional .pb.GS2C_Mail_MailList mails = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_quest_log;
        break;
      }

      // optional .pb.GS2C_QuestList quest_log = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quest_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quest_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_behavior_count;
        break;
      }

      // optional .pb.GxDB_BehaviorList behavior_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_behavior_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_behavior_count()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_other_info;
        break;
      }

      // optional .pb.OtherInfo other_info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_other_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_other_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_string_data;
        break;
      }

      // optional .pb.GS2C_PlayerStringGroup string_data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_string_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_fuben_info;
        break;
      }

      // optional .pb.GS2C_Fuben_All_Info fuben_info = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fuben_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fuben_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_world_map_logic;
        break;
      }

      // optional .pb.GS2C_MapLogic_Init world_map_logic = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_world_map_logic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_world_map_logic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_market_info;
        break;
      }

      // optional .pb.GS2C_Market_All_Info market_info = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_market_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_market_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_altar_info;
        break;
      }

      // optional .pb.GS2C_Altar_All_Info altar_info = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_altar_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_altar_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_dungeon_info;
        break;
      }

      // optional .pb.GS2C_Dungeon_All_Info dungeon_info = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dungeon_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dungeon_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_bao_qi_info;
        break;
      }

      // optional .pb.GS2C_BaoQi_All_Info bao_qi_info = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bao_qi_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bao_qi_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_smithy_info;
        break;
      }

      // optional .pb.GS2C_Smithy_All_Info smithy_info = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_smithy_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smithy_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_buff_info;
        break;
      }

      // optional .pb.GS2C_Buff_All_Info buff_info = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buff_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buff_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_technology_info;
        break;
      }

      // optional .pb.GxDB_Technology_All_Info technology_info = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_technology_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_technology_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_dailyquest_info;
        break;
      }

      // optional .pb.GxDB_Daily_Quest dailyquest_info = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dailyquest_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dailyquest_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_growupquest_info;
        break;
      }

      // optional .pb.GxDB_Grow_Up_Quest growupquest_info = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_growupquest_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_growupquest_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_growupquestgroup_info;
        break;
      }

      // optional .pb.GxDB_Grow_Up_Quest_Group growupquestgroup_info = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_growupquestgroup_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_growupquestgroup_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_sign_up_info;
        break;
      }

      // optional .pb.GxDB_Sign_Up sign_up_info = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign_up_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sign_up_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_pass_stage_reward_info;
        break;
      }

      // optional .pb.GxDB_Pass_Stage_Reward pass_stage_reward_info = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pass_stage_reward_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pass_stage_reward_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_activity_star_box_info;
        break;
      }

      // optional .pb.GxDB_ActivityStarBox activity_star_box_info = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activity_star_box_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activity_star_box_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_achievement_info;
        break;
      }

      // optional .pb.GxDB_PalaceAchievement achievement_info = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achievement_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_achievement_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_gov_affairs_info;
        break;
      }

      // optional .pb.GxDB_GovAffairsInfo gov_affairs_info = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gov_affairs_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gov_affairs_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_hero_reward;
        break;
      }

      // optional .pb.GxDB_Hero_Reward hero_reward = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_world_fight_achieve_info;
        break;
      }

      // optional .pb.GxDB_World_Achievement world_fight_achieve_info = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_world_fight_achieve_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_world_fight_achieve_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_seige_force_info;
        break;
      }

      // optional .pb.GxDB_Seige_Force_Info_Pack seige_force_info = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seige_force_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seige_force_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_continue_info;
        break;
      }

      // optional .pb.GxDB_ContinueOccupyCityInfo continue_info = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_continue_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_continue_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_teach_rec;
        break;
      }

      // optional .pb.GS2C_Get_Teach_Rec teach_rec = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teach_rec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teach_rec()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_congratulate_info;
        break;
      }

      // optional .pb.GxDB_CongratulateRewardLog congratulate_info = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_congratulate_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_congratulate_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_con_been_congratulated;
        break;
      }

      // optional .pb.GxDB_CongratulateBeenCongratualted con_been_congratulated = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_con_been_congratulated:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_con_been_congratulated()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerAllData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.ObjectFullValue full_value = 1;
  if (has_full_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->full_value(), output);
  }

  // optional .pb.GS2C_Bag bag_info = 2;
  if (has_bag_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bag_info(), output);
  }

  // optional .pb.GS2C_CharacterStorage character_info = 3;
  if (has_character_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->character_info(), output);
  }

  // optional .pb.GS2C_Mail_MailList mails = 4;
  if (has_mails()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mails(), output);
  }

  // optional .pb.GS2C_QuestList quest_log = 5;
  if (has_quest_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->quest_log(), output);
  }

  // optional .pb.GxDB_BehaviorList behavior_count = 6;
  if (has_behavior_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->behavior_count(), output);
  }

  // optional .pb.OtherInfo other_info = 7;
  if (has_other_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->other_info(), output);
  }

  // optional .pb.GS2C_PlayerStringGroup string_data = 8;
  if (has_string_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->string_data(), output);
  }

  // optional .pb.GS2C_Fuben_All_Info fuben_info = 9;
  if (has_fuben_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->fuben_info(), output);
  }

  // optional .pb.GS2C_MapLogic_Init world_map_logic = 10;
  if (has_world_map_logic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->world_map_logic(), output);
  }

  // optional .pb.GS2C_Market_All_Info market_info = 11;
  if (has_market_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->market_info(), output);
  }

  // optional .pb.GS2C_Altar_All_Info altar_info = 12;
  if (has_altar_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->altar_info(), output);
  }

  // optional .pb.GS2C_Dungeon_All_Info dungeon_info = 13;
  if (has_dungeon_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->dungeon_info(), output);
  }

  // optional .pb.GS2C_BaoQi_All_Info bao_qi_info = 14;
  if (has_bao_qi_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->bao_qi_info(), output);
  }

  // optional .pb.GS2C_Smithy_All_Info smithy_info = 15;
  if (has_smithy_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->smithy_info(), output);
  }

  // optional .pb.GS2C_Buff_All_Info buff_info = 16;
  if (has_buff_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->buff_info(), output);
  }

  // optional .pb.GxDB_Technology_All_Info technology_info = 17;
  if (has_technology_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->technology_info(), output);
  }

  // optional .pb.GxDB_Daily_Quest dailyquest_info = 18;
  if (has_dailyquest_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->dailyquest_info(), output);
  }

  // optional .pb.GxDB_Grow_Up_Quest growupquest_info = 19;
  if (has_growupquest_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->growupquest_info(), output);
  }

  // optional .pb.GxDB_Grow_Up_Quest_Group growupquestgroup_info = 20;
  if (has_growupquestgroup_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->growupquestgroup_info(), output);
  }

  // optional .pb.GxDB_Sign_Up sign_up_info = 21;
  if (has_sign_up_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->sign_up_info(), output);
  }

  // optional .pb.GxDB_Pass_Stage_Reward pass_stage_reward_info = 22;
  if (has_pass_stage_reward_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->pass_stage_reward_info(), output);
  }

  // optional .pb.GxDB_ActivityStarBox activity_star_box_info = 23;
  if (has_activity_star_box_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->activity_star_box_info(), output);
  }

  // optional .pb.GxDB_PalaceAchievement achievement_info = 24;
  if (has_achievement_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->achievement_info(), output);
  }

  // optional .pb.GxDB_GovAffairsInfo gov_affairs_info = 25;
  if (has_gov_affairs_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->gov_affairs_info(), output);
  }

  // optional .pb.GxDB_Hero_Reward hero_reward = 26;
  if (has_hero_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->hero_reward(), output);
  }

  // optional .pb.GxDB_World_Achievement world_fight_achieve_info = 27;
  if (has_world_fight_achieve_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->world_fight_achieve_info(), output);
  }

  // optional .pb.GxDB_Seige_Force_Info_Pack seige_force_info = 28;
  if (has_seige_force_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->seige_force_info(), output);
  }

  // optional .pb.GxDB_ContinueOccupyCityInfo continue_info = 29;
  if (has_continue_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->continue_info(), output);
  }

  // optional .pb.GS2C_Get_Teach_Rec teach_rec = 30;
  if (has_teach_rec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->teach_rec(), output);
  }

  // optional .pb.GxDB_CongratulateRewardLog congratulate_info = 31;
  if (has_congratulate_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->congratulate_info(), output);
  }

  // optional .pb.GxDB_CongratulateBeenCongratualted con_been_congratulated = 32;
  if (has_con_been_congratulated()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->con_been_congratulated(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerAllData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.ObjectFullValue full_value = 1;
  if (has_full_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->full_value(), target);
  }

  // optional .pb.GS2C_Bag bag_info = 2;
  if (has_bag_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bag_info(), target);
  }

  // optional .pb.GS2C_CharacterStorage character_info = 3;
  if (has_character_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->character_info(), target);
  }

  // optional .pb.GS2C_Mail_MailList mails = 4;
  if (has_mails()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mails(), target);
  }

  // optional .pb.GS2C_QuestList quest_log = 5;
  if (has_quest_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->quest_log(), target);
  }

  // optional .pb.GxDB_BehaviorList behavior_count = 6;
  if (has_behavior_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->behavior_count(), target);
  }

  // optional .pb.OtherInfo other_info = 7;
  if (has_other_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->other_info(), target);
  }

  // optional .pb.GS2C_PlayerStringGroup string_data = 8;
  if (has_string_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->string_data(), target);
  }

  // optional .pb.GS2C_Fuben_All_Info fuben_info = 9;
  if (has_fuben_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->fuben_info(), target);
  }

  // optional .pb.GS2C_MapLogic_Init world_map_logic = 10;
  if (has_world_map_logic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->world_map_logic(), target);
  }

  // optional .pb.GS2C_Market_All_Info market_info = 11;
  if (has_market_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->market_info(), target);
  }

  // optional .pb.GS2C_Altar_All_Info altar_info = 12;
  if (has_altar_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->altar_info(), target);
  }

  // optional .pb.GS2C_Dungeon_All_Info dungeon_info = 13;
  if (has_dungeon_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->dungeon_info(), target);
  }

  // optional .pb.GS2C_BaoQi_All_Info bao_qi_info = 14;
  if (has_bao_qi_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->bao_qi_info(), target);
  }

  // optional .pb.GS2C_Smithy_All_Info smithy_info = 15;
  if (has_smithy_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->smithy_info(), target);
  }

  // optional .pb.GS2C_Buff_All_Info buff_info = 16;
  if (has_buff_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->buff_info(), target);
  }

  // optional .pb.GxDB_Technology_All_Info technology_info = 17;
  if (has_technology_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->technology_info(), target);
  }

  // optional .pb.GxDB_Daily_Quest dailyquest_info = 18;
  if (has_dailyquest_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->dailyquest_info(), target);
  }

  // optional .pb.GxDB_Grow_Up_Quest growupquest_info = 19;
  if (has_growupquest_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->growupquest_info(), target);
  }

  // optional .pb.GxDB_Grow_Up_Quest_Group growupquestgroup_info = 20;
  if (has_growupquestgroup_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->growupquestgroup_info(), target);
  }

  // optional .pb.GxDB_Sign_Up sign_up_info = 21;
  if (has_sign_up_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->sign_up_info(), target);
  }

  // optional .pb.GxDB_Pass_Stage_Reward pass_stage_reward_info = 22;
  if (has_pass_stage_reward_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->pass_stage_reward_info(), target);
  }

  // optional .pb.GxDB_ActivityStarBox activity_star_box_info = 23;
  if (has_activity_star_box_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->activity_star_box_info(), target);
  }

  // optional .pb.GxDB_PalaceAchievement achievement_info = 24;
  if (has_achievement_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->achievement_info(), target);
  }

  // optional .pb.GxDB_GovAffairsInfo gov_affairs_info = 25;
  if (has_gov_affairs_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->gov_affairs_info(), target);
  }

  // optional .pb.GxDB_Hero_Reward hero_reward = 26;
  if (has_hero_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->hero_reward(), target);
  }

  // optional .pb.GxDB_World_Achievement world_fight_achieve_info = 27;
  if (has_world_fight_achieve_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->world_fight_achieve_info(), target);
  }

  // optional .pb.GxDB_Seige_Force_Info_Pack seige_force_info = 28;
  if (has_seige_force_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->seige_force_info(), target);
  }

  // optional .pb.GxDB_ContinueOccupyCityInfo continue_info = 29;
  if (has_continue_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->continue_info(), target);
  }

  // optional .pb.GS2C_Get_Teach_Rec teach_rec = 30;
  if (has_teach_rec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->teach_rec(), target);
  }

  // optional .pb.GxDB_CongratulateRewardLog congratulate_info = 31;
  if (has_congratulate_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->congratulate_info(), target);
  }

  // optional .pb.GxDB_CongratulateBeenCongratualted con_been_congratulated = 32;
  if (has_con_been_congratulated()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->con_been_congratulated(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerAllData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ObjectFullValue full_value = 1;
    if (has_full_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->full_value());
    }

    // optional .pb.GS2C_Bag bag_info = 2;
    if (has_bag_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bag_info());
    }

    // optional .pb.GS2C_CharacterStorage character_info = 3;
    if (has_character_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->character_info());
    }

    // optional .pb.GS2C_Mail_MailList mails = 4;
    if (has_mails()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mails());
    }

    // optional .pb.GS2C_QuestList quest_log = 5;
    if (has_quest_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quest_log());
    }

    // optional .pb.GxDB_BehaviorList behavior_count = 6;
    if (has_behavior_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->behavior_count());
    }

    // optional .pb.OtherInfo other_info = 7;
    if (has_other_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->other_info());
    }

    // optional .pb.GS2C_PlayerStringGroup string_data = 8;
    if (has_string_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->string_data());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pb.GS2C_Fuben_All_Info fuben_info = 9;
    if (has_fuben_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fuben_info());
    }

    // optional .pb.GS2C_MapLogic_Init world_map_logic = 10;
    if (has_world_map_logic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->world_map_logic());
    }

    // optional .pb.GS2C_Market_All_Info market_info = 11;
    if (has_market_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->market_info());
    }

    // optional .pb.GS2C_Altar_All_Info altar_info = 12;
    if (has_altar_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->altar_info());
    }

    // optional .pb.GS2C_Dungeon_All_Info dungeon_info = 13;
    if (has_dungeon_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dungeon_info());
    }

    // optional .pb.GS2C_BaoQi_All_Info bao_qi_info = 14;
    if (has_bao_qi_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bao_qi_info());
    }

    // optional .pb.GS2C_Smithy_All_Info smithy_info = 15;
    if (has_smithy_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->smithy_info());
    }

    // optional .pb.GS2C_Buff_All_Info buff_info = 16;
    if (has_buff_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buff_info());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .pb.GxDB_Technology_All_Info technology_info = 17;
    if (has_technology_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->technology_info());
    }

    // optional .pb.GxDB_Daily_Quest dailyquest_info = 18;
    if (has_dailyquest_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dailyquest_info());
    }

    // optional .pb.GxDB_Grow_Up_Quest growupquest_info = 19;
    if (has_growupquest_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->growupquest_info());
    }

    // optional .pb.GxDB_Grow_Up_Quest_Group growupquestgroup_info = 20;
    if (has_growupquestgroup_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->growupquestgroup_info());
    }

    // optional .pb.GxDB_Sign_Up sign_up_info = 21;
    if (has_sign_up_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sign_up_info());
    }

    // optional .pb.GxDB_Pass_Stage_Reward pass_stage_reward_info = 22;
    if (has_pass_stage_reward_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pass_stage_reward_info());
    }

    // optional .pb.GxDB_ActivityStarBox activity_star_box_info = 23;
    if (has_activity_star_box_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activity_star_box_info());
    }

    // optional .pb.GxDB_PalaceAchievement achievement_info = 24;
    if (has_achievement_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->achievement_info());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .pb.GxDB_GovAffairsInfo gov_affairs_info = 25;
    if (has_gov_affairs_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gov_affairs_info());
    }

    // optional .pb.GxDB_Hero_Reward hero_reward = 26;
    if (has_hero_reward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero_reward());
    }

    // optional .pb.GxDB_World_Achievement world_fight_achieve_info = 27;
    if (has_world_fight_achieve_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->world_fight_achieve_info());
    }

    // optional .pb.GxDB_Seige_Force_Info_Pack seige_force_info = 28;
    if (has_seige_force_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seige_force_info());
    }

    // optional .pb.GxDB_ContinueOccupyCityInfo continue_info = 29;
    if (has_continue_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->continue_info());
    }

    // optional .pb.GS2C_Get_Teach_Rec teach_rec = 30;
    if (has_teach_rec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teach_rec());
    }

    // optional .pb.GxDB_CongratulateRewardLog congratulate_info = 31;
    if (has_congratulate_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->congratulate_info());
    }

    // optional .pb.GxDB_CongratulateBeenCongratualted con_been_congratulated = 32;
    if (has_con_been_congratulated()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->con_been_congratulated());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerAllData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerAllData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerAllData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerAllData::MergeFrom(const PlayerAllData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_full_value()) {
      mutable_full_value()->::pb::ObjectFullValue::MergeFrom(from.full_value());
    }
    if (from.has_bag_info()) {
      mutable_bag_info()->::pb::GS2C_Bag::MergeFrom(from.bag_info());
    }
    if (from.has_character_info()) {
      mutable_character_info()->::pb::GS2C_CharacterStorage::MergeFrom(from.character_info());
    }
    if (from.has_mails()) {
      mutable_mails()->::pb::GS2C_Mail_MailList::MergeFrom(from.mails());
    }
    if (from.has_quest_log()) {
      mutable_quest_log()->::pb::GS2C_QuestList::MergeFrom(from.quest_log());
    }
    if (from.has_behavior_count()) {
      mutable_behavior_count()->::pb::GxDB_BehaviorList::MergeFrom(from.behavior_count());
    }
    if (from.has_other_info()) {
      mutable_other_info()->::pb::OtherInfo::MergeFrom(from.other_info());
    }
    if (from.has_string_data()) {
      mutable_string_data()->::pb::GS2C_PlayerStringGroup::MergeFrom(from.string_data());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fuben_info()) {
      mutable_fuben_info()->::pb::GS2C_Fuben_All_Info::MergeFrom(from.fuben_info());
    }
    if (from.has_world_map_logic()) {
      mutable_world_map_logic()->::pb::GS2C_MapLogic_Init::MergeFrom(from.world_map_logic());
    }
    if (from.has_market_info()) {
      mutable_market_info()->::pb::GS2C_Market_All_Info::MergeFrom(from.market_info());
    }
    if (from.has_altar_info()) {
      mutable_altar_info()->::pb::GS2C_Altar_All_Info::MergeFrom(from.altar_info());
    }
    if (from.has_dungeon_info()) {
      mutable_dungeon_info()->::pb::GS2C_Dungeon_All_Info::MergeFrom(from.dungeon_info());
    }
    if (from.has_bao_qi_info()) {
      mutable_bao_qi_info()->::pb::GS2C_BaoQi_All_Info::MergeFrom(from.bao_qi_info());
    }
    if (from.has_smithy_info()) {
      mutable_smithy_info()->::pb::GS2C_Smithy_All_Info::MergeFrom(from.smithy_info());
    }
    if (from.has_buff_info()) {
      mutable_buff_info()->::pb::GS2C_Buff_All_Info::MergeFrom(from.buff_info());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_technology_info()) {
      mutable_technology_info()->::pb::GxDB_Technology_All_Info::MergeFrom(from.technology_info());
    }
    if (from.has_dailyquest_info()) {
      mutable_dailyquest_info()->::pb::GxDB_Daily_Quest::MergeFrom(from.dailyquest_info());
    }
    if (from.has_growupquest_info()) {
      mutable_growupquest_info()->::pb::GxDB_Grow_Up_Quest::MergeFrom(from.growupquest_info());
    }
    if (from.has_growupquestgroup_info()) {
      mutable_growupquestgroup_info()->::pb::GxDB_Grow_Up_Quest_Group::MergeFrom(from.growupquestgroup_info());
    }
    if (from.has_sign_up_info()) {
      mutable_sign_up_info()->::pb::GxDB_Sign_Up::MergeFrom(from.sign_up_info());
    }
    if (from.has_pass_stage_reward_info()) {
      mutable_pass_stage_reward_info()->::pb::GxDB_Pass_Stage_Reward::MergeFrom(from.pass_stage_reward_info());
    }
    if (from.has_activity_star_box_info()) {
      mutable_activity_star_box_info()->::pb::GxDB_ActivityStarBox::MergeFrom(from.activity_star_box_info());
    }
    if (from.has_achievement_info()) {
      mutable_achievement_info()->::pb::GxDB_PalaceAchievement::MergeFrom(from.achievement_info());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_gov_affairs_info()) {
      mutable_gov_affairs_info()->::pb::GxDB_GovAffairsInfo::MergeFrom(from.gov_affairs_info());
    }
    if (from.has_hero_reward()) {
      mutable_hero_reward()->::pb::GxDB_Hero_Reward::MergeFrom(from.hero_reward());
    }
    if (from.has_world_fight_achieve_info()) {
      mutable_world_fight_achieve_info()->::pb::GxDB_World_Achievement::MergeFrom(from.world_fight_achieve_info());
    }
    if (from.has_seige_force_info()) {
      mutable_seige_force_info()->::pb::GxDB_Seige_Force_Info_Pack::MergeFrom(from.seige_force_info());
    }
    if (from.has_continue_info()) {
      mutable_continue_info()->::pb::GxDB_ContinueOccupyCityInfo::MergeFrom(from.continue_info());
    }
    if (from.has_teach_rec()) {
      mutable_teach_rec()->::pb::GS2C_Get_Teach_Rec::MergeFrom(from.teach_rec());
    }
    if (from.has_congratulate_info()) {
      mutable_congratulate_info()->::pb::GxDB_CongratulateRewardLog::MergeFrom(from.congratulate_info());
    }
    if (from.has_con_been_congratulated()) {
      mutable_con_been_congratulated()->::pb::GxDB_CongratulateBeenCongratualted::MergeFrom(from.con_been_congratulated());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerAllData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerAllData::CopyFrom(const PlayerAllData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerAllData::IsInitialized() const {

  if (has_bag_info()) {
    if (!this->bag_info().IsInitialized()) return false;
  }
  if (has_character_info()) {
    if (!this->character_info().IsInitialized()) return false;
  }
  if (has_mails()) {
    if (!this->mails().IsInitialized()) return false;
  }
  if (has_quest_log()) {
    if (!this->quest_log().IsInitialized()) return false;
  }
  if (has_behavior_count()) {
    if (!this->behavior_count().IsInitialized()) return false;
  }
  if (has_string_data()) {
    if (!this->string_data().IsInitialized()) return false;
  }
  if (has_fuben_info()) {
    if (!this->fuben_info().IsInitialized()) return false;
  }
  if (has_world_map_logic()) {
    if (!this->world_map_logic().IsInitialized()) return false;
  }
  if (has_market_info()) {
    if (!this->market_info().IsInitialized()) return false;
  }
  if (has_altar_info()) {
    if (!this->altar_info().IsInitialized()) return false;
  }
  if (has_dungeon_info()) {
    if (!this->dungeon_info().IsInitialized()) return false;
  }
  if (has_bao_qi_info()) {
    if (!this->bao_qi_info().IsInitialized()) return false;
  }
  if (has_smithy_info()) {
    if (!this->smithy_info().IsInitialized()) return false;
  }
  if (has_technology_info()) {
    if (!this->technology_info().IsInitialized()) return false;
  }
  if (has_dailyquest_info()) {
    if (!this->dailyquest_info().IsInitialized()) return false;
  }
  if (has_growupquest_info()) {
    if (!this->growupquest_info().IsInitialized()) return false;
  }
  if (has_growupquestgroup_info()) {
    if (!this->growupquestgroup_info().IsInitialized()) return false;
  }
  if (has_sign_up_info()) {
    if (!this->sign_up_info().IsInitialized()) return false;
  }
  if (has_pass_stage_reward_info()) {
    if (!this->pass_stage_reward_info().IsInitialized()) return false;
  }
  if (has_activity_star_box_info()) {
    if (!this->activity_star_box_info().IsInitialized()) return false;
  }
  if (has_con_been_congratulated()) {
    if (!this->con_been_congratulated().IsInitialized()) return false;
  }
  return true;
}

void PlayerAllData::Swap(PlayerAllData* other) {
  if (other != this) {
    std::swap(full_value_, other->full_value_);
    std::swap(bag_info_, other->bag_info_);
    std::swap(character_info_, other->character_info_);
    std::swap(mails_, other->mails_);
    std::swap(quest_log_, other->quest_log_);
    std::swap(behavior_count_, other->behavior_count_);
    std::swap(other_info_, other->other_info_);
    std::swap(string_data_, other->string_data_);
    std::swap(fuben_info_, other->fuben_info_);
    std::swap(world_map_logic_, other->world_map_logic_);
    std::swap(market_info_, other->market_info_);
    std::swap(altar_info_, other->altar_info_);
    std::swap(dungeon_info_, other->dungeon_info_);
    std::swap(bao_qi_info_, other->bao_qi_info_);
    std::swap(smithy_info_, other->smithy_info_);
    std::swap(buff_info_, other->buff_info_);
    std::swap(technology_info_, other->technology_info_);
    std::swap(dailyquest_info_, other->dailyquest_info_);
    std::swap(growupquest_info_, other->growupquest_info_);
    std::swap(growupquestgroup_info_, other->growupquestgroup_info_);
    std::swap(sign_up_info_, other->sign_up_info_);
    std::swap(pass_stage_reward_info_, other->pass_stage_reward_info_);
    std::swap(activity_star_box_info_, other->activity_star_box_info_);
    std::swap(achievement_info_, other->achievement_info_);
    std::swap(gov_affairs_info_, other->gov_affairs_info_);
    std::swap(hero_reward_, other->hero_reward_);
    std::swap(world_fight_achieve_info_, other->world_fight_achieve_info_);
    std::swap(seige_force_info_, other->seige_force_info_);
    std::swap(continue_info_, other->continue_info_);
    std::swap(teach_rec_, other->teach_rec_);
    std::swap(congratulate_info_, other->congratulate_info_);
    std::swap(con_been_congratulated_, other->con_been_congratulated_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerAllData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerAllData_descriptor_;
  metadata.reflection = PlayerAllData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreatePlayerData::kAccountIdFieldNumber;
const int CreatePlayerData::kAllDataFieldNumber;
#endif  // !_MSC_VER

CreatePlayerData::CreatePlayerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatePlayerData::InitAsDefaultInstance() {
  all_data_ = const_cast< ::pb::PlayerAllData*>(&::pb::PlayerAllData::default_instance());
}

CreatePlayerData::CreatePlayerData(const CreatePlayerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatePlayerData::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = GOOGLE_ULONGLONG(0);
  all_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatePlayerData::~CreatePlayerData() {
  SharedDtor();
}

void CreatePlayerData::SharedDtor() {
  if (this != default_instance_) {
    delete all_data_;
  }
}

void CreatePlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatePlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatePlayerData_descriptor_;
}

const CreatePlayerData& CreatePlayerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
  return *default_instance_;
}

CreatePlayerData* CreatePlayerData::default_instance_ = NULL;

CreatePlayerData* CreatePlayerData::New() const {
  return new CreatePlayerData;
}

void CreatePlayerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = GOOGLE_ULONGLONG(0);
    if (has_all_data()) {
      if (all_data_ != NULL) all_data_->::pb::PlayerAllData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreatePlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_all_data;
        break;
      }

      // required .pb.PlayerAllData all_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_all_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_all_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatePlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->account_id(), output);
  }

  // required .pb.PlayerAllData all_data = 2;
  if (has_all_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->all_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatePlayerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->account_id(), target);
  }

  // required .pb.PlayerAllData all_data = 2;
  if (has_all_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->all_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatePlayerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->account_id());
    }

    // required .pb.PlayerAllData all_data = 2;
    if (has_all_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->all_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatePlayerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatePlayerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatePlayerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreatePlayerData::MergeFrom(const CreatePlayerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_all_data()) {
      mutable_all_data()->::pb::PlayerAllData::MergeFrom(from.all_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreatePlayerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePlayerData::CopyFrom(const CreatePlayerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePlayerData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_all_data()) {
    if (!this->all_data().IsInitialized()) return false;
  }
  return true;
}

void CreatePlayerData::Swap(CreatePlayerData* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(all_data_, other->all_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreatePlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatePlayerData_descriptor_;
  metadata.reflection = CreatePlayerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegistCrossPlayerData::kPlayerDataFieldNumber;
const int RegistCrossPlayerData::kAppendFieldNumber;
const int RegistCrossPlayerData::kCountryIdFieldNumber;
const int RegistCrossPlayerData::kAccountIdFieldNumber;
const int RegistCrossPlayerData::kCrossUniqueIdFieldNumber;
#endif  // !_MSC_VER

RegistCrossPlayerData::RegistCrossPlayerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegistCrossPlayerData::InitAsDefaultInstance() {
  player_data_ = const_cast< ::pb::PlayerAllData*>(&::pb::PlayerAllData::default_instance());
  append_ = const_cast< ::pb::PlayerAppendData*>(&::pb::PlayerAppendData::default_instance());
}

RegistCrossPlayerData::RegistCrossPlayerData(const RegistCrossPlayerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegistCrossPlayerData::SharedCtor() {
  _cached_size_ = 0;
  player_data_ = NULL;
  append_ = NULL;
  country_id_ = 0u;
  account_id_ = GOOGLE_ULONGLONG(0);
  cross_unique_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegistCrossPlayerData::~RegistCrossPlayerData() {
  SharedDtor();
}

void RegistCrossPlayerData::SharedDtor() {
  if (this != default_instance_) {
    delete player_data_;
    delete append_;
  }
}

void RegistCrossPlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegistCrossPlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegistCrossPlayerData_descriptor_;
}

const RegistCrossPlayerData& RegistCrossPlayerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
  return *default_instance_;
}

RegistCrossPlayerData* RegistCrossPlayerData::default_instance_ = NULL;

RegistCrossPlayerData* RegistCrossPlayerData::New() const {
  return new RegistCrossPlayerData;
}

void RegistCrossPlayerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_data()) {
      if (player_data_ != NULL) player_data_->::pb::PlayerAllData::Clear();
    }
    if (has_append()) {
      if (append_ != NULL) append_->::pb::PlayerAppendData::Clear();
    }
    country_id_ = 0u;
    account_id_ = GOOGLE_ULONGLONG(0);
    cross_unique_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegistCrossPlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.PlayerAllData player_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_append;
        break;
      }

      // optional .pb.PlayerAppendData append = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_append:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_append()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_country_id;
        break;
      }

      // optional uint32 country_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_id_)));
          set_has_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_account_id;
        break;
      }

      // optional uint64 account_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cross_Unique_id;
        break;
      }

      // optional uint32 cross_Unique_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cross_Unique_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cross_unique_id_)));
          set_has_cross_unique_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegistCrossPlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.PlayerAllData player_data = 1;
  if (has_player_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_data(), output);
  }

  // optional .pb.PlayerAppendData append = 2;
  if (has_append()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->append(), output);
  }

  // optional uint32 country_id = 3;
  if (has_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->country_id(), output);
  }

  // optional uint64 account_id = 4;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->account_id(), output);
  }

  // optional uint32 cross_Unique_id = 5;
  if (has_cross_unique_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cross_unique_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegistCrossPlayerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.PlayerAllData player_data = 1;
  if (has_player_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_data(), target);
  }

  // optional .pb.PlayerAppendData append = 2;
  if (has_append()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->append(), target);
  }

  // optional uint32 country_id = 3;
  if (has_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->country_id(), target);
  }

  // optional uint64 account_id = 4;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->account_id(), target);
  }

  // optional uint32 cross_Unique_id = 5;
  if (has_cross_unique_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cross_unique_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegistCrossPlayerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.PlayerAllData player_data = 1;
    if (has_player_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_data());
    }

    // optional .pb.PlayerAppendData append = 2;
    if (has_append()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->append());
    }

    // optional uint32 country_id = 3;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_id());
    }

    // optional uint64 account_id = 4;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->account_id());
    }

    // optional uint32 cross_Unique_id = 5;
    if (has_cross_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cross_unique_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegistCrossPlayerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegistCrossPlayerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegistCrossPlayerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegistCrossPlayerData::MergeFrom(const RegistCrossPlayerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_data()) {
      mutable_player_data()->::pb::PlayerAllData::MergeFrom(from.player_data());
    }
    if (from.has_append()) {
      mutable_append()->::pb::PlayerAppendData::MergeFrom(from.append());
    }
    if (from.has_country_id()) {
      set_country_id(from.country_id());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_cross_unique_id()) {
      set_cross_unique_id(from.cross_unique_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegistCrossPlayerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegistCrossPlayerData::CopyFrom(const RegistCrossPlayerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistCrossPlayerData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_player_data()) {
    if (!this->player_data().IsInitialized()) return false;
  }
  return true;
}

void RegistCrossPlayerData::Swap(RegistCrossPlayerData* other) {
  if (other != this) {
    std::swap(player_data_, other->player_data_);
    std::swap(append_, other->append_);
    std::swap(country_id_, other->country_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(cross_unique_id_, other->cross_unique_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegistCrossPlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegistCrossPlayerData_descriptor_;
  metadata.reflection = RegistCrossPlayerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerAppendData::kModuleFieldNumber;
const int PlayerAppendData::kBuildingFieldNumber;
#endif  // !_MSC_VER

PlayerAppendData::PlayerAppendData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerAppendData::InitAsDefaultInstance() {
  module_ = const_cast< ::pb::GxDB_Modules_Info*>(&::pb::GxDB_Modules_Info::default_instance());
  building_ = const_cast< ::pb::GxDB_Buildings_Info*>(&::pb::GxDB_Buildings_Info::default_instance());
}

PlayerAppendData::PlayerAppendData(const PlayerAppendData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerAppendData::SharedCtor() {
  _cached_size_ = 0;
  module_ = NULL;
  building_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerAppendData::~PlayerAppendData() {
  SharedDtor();
}

void PlayerAppendData::SharedDtor() {
  if (this != default_instance_) {
    delete module_;
    delete building_;
  }
}

void PlayerAppendData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerAppendData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerAppendData_descriptor_;
}

const PlayerAppendData& PlayerAppendData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
  return *default_instance_;
}

PlayerAppendData* PlayerAppendData::default_instance_ = NULL;

PlayerAppendData* PlayerAppendData::New() const {
  return new PlayerAppendData;
}

void PlayerAppendData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_module()) {
      if (module_ != NULL) module_->::pb::GxDB_Modules_Info::Clear();
    }
    if (has_building()) {
      if (building_ != NULL) building_->::pb::GxDB_Buildings_Info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerAppendData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.GxDB_Modules_Info module = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_module()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_building;
        break;
      }

      // optional .pb.GxDB_Buildings_Info building = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_building:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_building()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerAppendData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.GxDB_Modules_Info module = 1;
  if (has_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->module(), output);
  }

  // optional .pb.GxDB_Buildings_Info building = 2;
  if (has_building()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->building(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerAppendData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.GxDB_Modules_Info module = 1;
  if (has_module()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->module(), target);
  }

  // optional .pb.GxDB_Buildings_Info building = 2;
  if (has_building()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->building(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerAppendData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.GxDB_Modules_Info module = 1;
    if (has_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->module());
    }

    // optional .pb.GxDB_Buildings_Info building = 2;
    if (has_building()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->building());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerAppendData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerAppendData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerAppendData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerAppendData::MergeFrom(const PlayerAppendData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module()) {
      mutable_module()->::pb::GxDB_Modules_Info::MergeFrom(from.module());
    }
    if (from.has_building()) {
      mutable_building()->::pb::GxDB_Buildings_Info::MergeFrom(from.building());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerAppendData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerAppendData::CopyFrom(const PlayerAppendData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerAppendData::IsInitialized() const {

  return true;
}

void PlayerAppendData::Swap(PlayerAppendData* other) {
  if (other != this) {
    std::swap(module_, other->module_);
    std::swap(building_, other->building_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerAppendData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerAppendData_descriptor_;
  metadata.reflection = PlayerAppendData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncPlayerCacheData::kAccountIdFieldNumber;
const int SyncPlayerCacheData::kAllDataFieldNumber;
const int SyncPlayerCacheData::kAppendFieldNumber;
#endif  // !_MSC_VER

SyncPlayerCacheData::SyncPlayerCacheData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncPlayerCacheData::InitAsDefaultInstance() {
  all_data_ = const_cast< ::pb::PlayerAllData*>(&::pb::PlayerAllData::default_instance());
  append_ = const_cast< ::pb::PlayerAppendData*>(&::pb::PlayerAppendData::default_instance());
}

SyncPlayerCacheData::SyncPlayerCacheData(const SyncPlayerCacheData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncPlayerCacheData::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = GOOGLE_ULONGLONG(0);
  all_data_ = NULL;
  append_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncPlayerCacheData::~SyncPlayerCacheData() {
  SharedDtor();
}

void SyncPlayerCacheData::SharedDtor() {
  if (this != default_instance_) {
    delete all_data_;
    delete append_;
  }
}

void SyncPlayerCacheData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncPlayerCacheData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncPlayerCacheData_descriptor_;
}

const SyncPlayerCacheData& SyncPlayerCacheData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
  return *default_instance_;
}

SyncPlayerCacheData* SyncPlayerCacheData::default_instance_ = NULL;

SyncPlayerCacheData* SyncPlayerCacheData::New() const {
  return new SyncPlayerCacheData;
}

void SyncPlayerCacheData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = GOOGLE_ULONGLONG(0);
    if (has_all_data()) {
      if (all_data_ != NULL) all_data_->::pb::PlayerAllData::Clear();
    }
    if (has_append()) {
      if (append_ != NULL) append_->::pb::PlayerAppendData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncPlayerCacheData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_all_data;
        break;
      }

      // required .pb.PlayerAllData all_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_all_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_all_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_append;
        break;
      }

      // optional .pb.PlayerAppendData append = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_append:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_append()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncPlayerCacheData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->account_id(), output);
  }

  // required .pb.PlayerAllData all_data = 2;
  if (has_all_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->all_data(), output);
  }

  // optional .pb.PlayerAppendData append = 3;
  if (has_append()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->append(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncPlayerCacheData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->account_id(), target);
  }

  // required .pb.PlayerAllData all_data = 2;
  if (has_all_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->all_data(), target);
  }

  // optional .pb.PlayerAppendData append = 3;
  if (has_append()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->append(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncPlayerCacheData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->account_id());
    }

    // required .pb.PlayerAllData all_data = 2;
    if (has_all_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->all_data());
    }

    // optional .pb.PlayerAppendData append = 3;
    if (has_append()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->append());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncPlayerCacheData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncPlayerCacheData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncPlayerCacheData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncPlayerCacheData::MergeFrom(const SyncPlayerCacheData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_all_data()) {
      mutable_all_data()->::pb::PlayerAllData::MergeFrom(from.all_data());
    }
    if (from.has_append()) {
      mutable_append()->::pb::PlayerAppendData::MergeFrom(from.append());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncPlayerCacheData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncPlayerCacheData::CopyFrom(const SyncPlayerCacheData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncPlayerCacheData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_all_data()) {
    if (!this->all_data().IsInitialized()) return false;
  }
  return true;
}

void SyncPlayerCacheData::Swap(SyncPlayerCacheData* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(all_data_, other->all_data_);
    std::swap(append_, other->append_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncPlayerCacheData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncPlayerCacheData_descriptor_;
  metadata.reflection = SyncPlayerCacheData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CQuickLogin::kAccountIdFieldNumber;
const int CQuickLogin::kPlayerIdFieldNumber;
const int CQuickLogin::kSessionKeyFieldNumber;
const int CQuickLogin::kPlatformIdFieldNumber;
#endif  // !_MSC_VER

CQuickLogin::CQuickLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CQuickLogin::InitAsDefaultInstance() {
}

CQuickLogin::CQuickLogin(const CQuickLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CQuickLogin::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = GOOGLE_ULONGLONG(0);
  player_id_ = GOOGLE_ULONGLONG(0);
  session_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CQuickLogin::~CQuickLogin() {
  SharedDtor();
}

void CQuickLogin::SharedDtor() {
  if (session_key_ != &::google::protobuf::internal::kEmptyString) {
    delete session_key_;
  }
  if (this != default_instance_) {
  }
}

void CQuickLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CQuickLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CQuickLogin_descriptor_;
}

const CQuickLogin& CQuickLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
  return *default_instance_;
}

CQuickLogin* CQuickLogin::default_instance_ = NULL;

CQuickLogin* CQuickLogin::New() const {
  return new CQuickLogin;
}

void CQuickLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = GOOGLE_ULONGLONG(0);
    player_id_ = GOOGLE_ULONGLONG(0);
    if (has_session_key()) {
      if (session_key_ != &::google::protobuf::internal::kEmptyString) {
        session_key_->clear();
      }
    }
    platform_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CQuickLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional uint64 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_session_key;
        break;
      }

      // optional string session_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_key().data(), this->session_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_platform_id;
        break;
      }

      // optional uint32 platform_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_id_)));
          set_has_platform_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CQuickLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->account_id(), output);
  }

  // optional uint64 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->player_id(), output);
  }

  // optional string session_key = 3;
  if (has_session_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_key().data(), this->session_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->session_key(), output);
  }

  // optional uint32 platform_id = 4;
  if (has_platform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->platform_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CQuickLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->account_id(), target);
  }

  // optional uint64 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->player_id(), target);
  }

  // optional string session_key = 3;
  if (has_session_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_key().data(), this->session_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->session_key(), target);
  }

  // optional uint32 platform_id = 4;
  if (has_platform_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->platform_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CQuickLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->account_id());
    }

    // optional uint64 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional string session_key = 3;
    if (has_session_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_key());
    }

    // optional uint32 platform_id = 4;
    if (has_platform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platform_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CQuickLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CQuickLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CQuickLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CQuickLogin::MergeFrom(const CQuickLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_session_key()) {
      set_session_key(from.session_key());
    }
    if (from.has_platform_id()) {
      set_platform_id(from.platform_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CQuickLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CQuickLogin::CopyFrom(const CQuickLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQuickLogin::IsInitialized() const {

  return true;
}

void CQuickLogin::Swap(CQuickLogin* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(session_key_, other->session_key_);
    std::swap(platform_id_, other->platform_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CQuickLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CQuickLogin_descriptor_;
  metadata.reflection = CQuickLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SQuickLogin::kResultFieldNumber;
#endif  // !_MSC_VER

SQuickLogin::SQuickLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SQuickLogin::InitAsDefaultInstance() {
}

SQuickLogin::SQuickLogin(const SQuickLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SQuickLogin::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SQuickLogin::~SQuickLogin() {
  SharedDtor();
}

void SQuickLogin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SQuickLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SQuickLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SQuickLogin_descriptor_;
}

const SQuickLogin& SQuickLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
  return *default_instance_;
}

SQuickLogin* SQuickLogin::default_instance_ = NULL;

SQuickLogin* SQuickLogin::New() const {
  return new SQuickLogin;
}

void SQuickLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SQuickLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.QuickLoginResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::QuickLoginResult_IsValid(value)) {
            set_result(static_cast< ::pb::QuickLoginResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SQuickLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.QuickLoginResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SQuickLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.QuickLoginResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SQuickLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.QuickLoginResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SQuickLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SQuickLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SQuickLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SQuickLogin::MergeFrom(const SQuickLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SQuickLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SQuickLogin::CopyFrom(const SQuickLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SQuickLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SQuickLogin::Swap(SQuickLogin* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SQuickLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SQuickLogin_descriptor_;
  metadata.reflection = SQuickLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_ItemOperateError::kErrorTypeFieldNumber;
const int GS2C_ItemOperateError::kPropertyFieldNumber;
#endif  // !_MSC_VER

GS2C_ItemOperateError::GS2C_ItemOperateError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_ItemOperateError::InitAsDefaultInstance() {
}

GS2C_ItemOperateError::GS2C_ItemOperateError(const GS2C_ItemOperateError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_ItemOperateError::SharedCtor() {
  _cached_size_ = 0;
  error_type_ = 0u;
  property_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_ItemOperateError::~GS2C_ItemOperateError() {
  SharedDtor();
}

void GS2C_ItemOperateError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_ItemOperateError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_ItemOperateError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_ItemOperateError_descriptor_;
}

const GS2C_ItemOperateError& GS2C_ItemOperateError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
  return *default_instance_;
}

GS2C_ItemOperateError* GS2C_ItemOperateError::default_instance_ = NULL;

GS2C_ItemOperateError* GS2C_ItemOperateError::New() const {
  return new GS2C_ItemOperateError;
}

void GS2C_ItemOperateError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_type_ = 0u;
    property_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_ItemOperateError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_type_)));
          set_has_error_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_property;
        break;
      }

      // optional uint32 property = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_property:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &property_)));
          set_has_property();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_ItemOperateError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_type = 1;
  if (has_error_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_type(), output);
  }

  // optional uint32 property = 2;
  if (has_property()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->property(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_ItemOperateError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_type = 1;
  if (has_error_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_type(), target);
  }

  // optional uint32 property = 2;
  if (has_property()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->property(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_ItemOperateError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_type = 1;
    if (has_error_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_type());
    }

    // optional uint32 property = 2;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->property());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_ItemOperateError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_ItemOperateError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_ItemOperateError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_ItemOperateError::MergeFrom(const GS2C_ItemOperateError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_type()) {
      set_error_type(from.error_type());
    }
    if (from.has_property()) {
      set_property(from.property());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_ItemOperateError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_ItemOperateError::CopyFrom(const GS2C_ItemOperateError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_ItemOperateError::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_ItemOperateError::Swap(GS2C_ItemOperateError* other) {
  if (other != this) {
    std::swap(error_type_, other->error_type_);
    std::swap(property_, other->property_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_ItemOperateError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_ItemOperateError_descriptor_;
  metadata.reflection = GS2C_ItemOperateError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Player_Online_State::kPlayerGuidFieldNumber;
const int GS2C_Player_Online_State::kPlayerNameFieldNumber;
const int GS2C_Player_Online_State::kIsonlineFieldNumber;
#endif  // !_MSC_VER

GS2C_Player_Online_State::GS2C_Player_Online_State()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Player_Online_State::InitAsDefaultInstance() {
}

GS2C_Player_Online_State::GS2C_Player_Online_State(const GS2C_Player_Online_State& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Player_Online_State::SharedCtor() {
  _cached_size_ = 0;
  player_guid_ = GOOGLE_ULONGLONG(0);
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isonline_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Player_Online_State::~GS2C_Player_Online_State() {
  SharedDtor();
}

void GS2C_Player_Online_State::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (this != default_instance_) {
  }
}

void GS2C_Player_Online_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Player_Online_State::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Player_Online_State_descriptor_;
}

const GS2C_Player_Online_State& GS2C_Player_Online_State::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
  return *default_instance_;
}

GS2C_Player_Online_State* GS2C_Player_Online_State::default_instance_ = NULL;

GS2C_Player_Online_State* GS2C_Player_Online_State::New() const {
  return new GS2C_Player_Online_State;
}

void GS2C_Player_Online_State::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_guid_ = GOOGLE_ULONGLONG(0);
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    isonline_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Player_Online_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isonline;
        break;
      }

      // optional bool isonline = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isonline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isonline_)));
          set_has_isonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Player_Online_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_guid = 1;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_guid(), output);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_name(), output);
  }

  // optional bool isonline = 3;
  if (has_isonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isonline(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Player_Online_State::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_guid = 1;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_guid(), target);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // optional bool isonline = 3;
  if (has_isonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isonline(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Player_Online_State::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_guid = 1;
    if (has_player_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_guid());
    }

    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional bool isonline = 3;
    if (has_isonline()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Player_Online_State::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Player_Online_State* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Player_Online_State*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Player_Online_State::MergeFrom(const GS2C_Player_Online_State& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_isonline()) {
      set_isonline(from.isonline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Player_Online_State::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Player_Online_State::CopyFrom(const GS2C_Player_Online_State& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Player_Online_State::IsInitialized() const {

  return true;
}

void GS2C_Player_Online_State::Swap(GS2C_Player_Online_State* other) {
  if (other != this) {
    std::swap(player_guid_, other->player_guid_);
    std::swap(player_name_, other->player_name_);
    std::swap(isonline_, other->isonline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Player_Online_State::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Player_Online_State_descriptor_;
  metadata.reflection = GS2C_Player_Online_State_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Is_Player_Exist::kPlayerNameFieldNumber;
const int C2GS_Is_Player_Exist::kYourGuidFieldNumber;
const int C2GS_Is_Player_Exist::kSendFromFieldNumber;
#endif  // !_MSC_VER

C2GS_Is_Player_Exist::C2GS_Is_Player_Exist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Is_Player_Exist::InitAsDefaultInstance() {
}

C2GS_Is_Player_Exist::C2GS_Is_Player_Exist(const C2GS_Is_Player_Exist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Is_Player_Exist::SharedCtor() {
  _cached_size_ = 0;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  your_guid_ = GOOGLE_ULONGLONG(0);
  send_from_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Is_Player_Exist::~C2GS_Is_Player_Exist() {
  SharedDtor();
}

void C2GS_Is_Player_Exist::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (this != default_instance_) {
  }
}

void C2GS_Is_Player_Exist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Is_Player_Exist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Is_Player_Exist_descriptor_;
}

const C2GS_Is_Player_Exist& C2GS_Is_Player_Exist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
  return *default_instance_;
}

C2GS_Is_Player_Exist* C2GS_Is_Player_Exist::default_instance_ = NULL;

C2GS_Is_Player_Exist* C2GS_Is_Player_Exist::New() const {
  return new C2GS_Is_Player_Exist;
}

void C2GS_Is_Player_Exist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    your_guid_ = GOOGLE_ULONGLONG(0);
    send_from_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Is_Player_Exist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string player_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_your_guid;
        break;
      }

      // required uint64 your_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_your_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &your_guid_)));
          set_has_your_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_send_from;
        break;
      }

      // optional uint32 send_from = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_from_)));
          set_has_send_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Is_Player_Exist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string player_name = 1;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->player_name(), output);
  }

  // required uint64 your_guid = 2;
  if (has_your_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->your_guid(), output);
  }

  // optional uint32 send_from = 3;
  if (has_send_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->send_from(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Is_Player_Exist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string player_name = 1;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->player_name(), target);
  }

  // required uint64 your_guid = 2;
  if (has_your_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->your_guid(), target);
  }

  // optional uint32 send_from = 3;
  if (has_send_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->send_from(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Is_Player_Exist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string player_name = 1;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // required uint64 your_guid = 2;
    if (has_your_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->your_guid());
    }

    // optional uint32 send_from = 3;
    if (has_send_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_from());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Is_Player_Exist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Is_Player_Exist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Is_Player_Exist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Is_Player_Exist::MergeFrom(const C2GS_Is_Player_Exist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_your_guid()) {
      set_your_guid(from.your_guid());
    }
    if (from.has_send_from()) {
      set_send_from(from.send_from());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Is_Player_Exist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Is_Player_Exist::CopyFrom(const C2GS_Is_Player_Exist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Is_Player_Exist::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2GS_Is_Player_Exist::Swap(C2GS_Is_Player_Exist* other) {
  if (other != this) {
    std::swap(player_name_, other->player_name_);
    std::swap(your_guid_, other->your_guid_);
    std::swap(send_from_, other->send_from_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Is_Player_Exist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Is_Player_Exist_descriptor_;
  metadata.reflection = C2GS_Is_Player_Exist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Is_Player_Exist::kIsExistFieldNumber;
const int GS2C_Is_Player_Exist::kPlayerNameFieldNumber;
const int GS2C_Is_Player_Exist::kIsOnlineFieldNumber;
const int GS2C_Is_Player_Exist::kYourGuidFieldNumber;
const int GS2C_Is_Player_Exist::kSendFromFieldNumber;
#endif  // !_MSC_VER

GS2C_Is_Player_Exist::GS2C_Is_Player_Exist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Is_Player_Exist::InitAsDefaultInstance() {
}

GS2C_Is_Player_Exist::GS2C_Is_Player_Exist(const GS2C_Is_Player_Exist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Is_Player_Exist::SharedCtor() {
  _cached_size_ = 0;
  is_exist_ = false;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_online_ = false;
  your_guid_ = GOOGLE_ULONGLONG(0);
  send_from_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Is_Player_Exist::~GS2C_Is_Player_Exist() {
  SharedDtor();
}

void GS2C_Is_Player_Exist::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (this != default_instance_) {
  }
}

void GS2C_Is_Player_Exist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Is_Player_Exist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Is_Player_Exist_descriptor_;
}

const GS2C_Is_Player_Exist& GS2C_Is_Player_Exist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
  return *default_instance_;
}

GS2C_Is_Player_Exist* GS2C_Is_Player_Exist::default_instance_ = NULL;

GS2C_Is_Player_Exist* GS2C_Is_Player_Exist::New() const {
  return new GS2C_Is_Player_Exist;
}

void GS2C_Is_Player_Exist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_exist_ = false;
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    is_online_ = false;
    your_guid_ = GOOGLE_ULONGLONG(0);
    send_from_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Is_Player_Exist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_exist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_exist_)));
          set_has_is_exist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_online;
        break;
      }

      // optional bool is_online = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_online_)));
          set_has_is_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_your_guid;
        break;
      }

      // required uint64 your_guid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_your_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &your_guid_)));
          set_has_your_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_send_from;
        break;
      }

      // optional uint32 send_from = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_from_)));
          set_has_send_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Is_Player_Exist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_exist = 1;
  if (has_is_exist()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_exist(), output);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_name(), output);
  }

  // optional bool is_online = 3;
  if (has_is_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_online(), output);
  }

  // required uint64 your_guid = 4;
  if (has_your_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->your_guid(), output);
  }

  // optional uint32 send_from = 5;
  if (has_send_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->send_from(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Is_Player_Exist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_exist = 1;
  if (has_is_exist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_exist(), target);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // optional bool is_online = 3;
  if (has_is_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_online(), target);
  }

  // required uint64 your_guid = 4;
  if (has_your_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->your_guid(), target);
  }

  // optional uint32 send_from = 5;
  if (has_send_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->send_from(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Is_Player_Exist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_exist = 1;
    if (has_is_exist()) {
      total_size += 1 + 1;
    }

    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional bool is_online = 3;
    if (has_is_online()) {
      total_size += 1 + 1;
    }

    // required uint64 your_guid = 4;
    if (has_your_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->your_guid());
    }

    // optional uint32 send_from = 5;
    if (has_send_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_from());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Is_Player_Exist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Is_Player_Exist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Is_Player_Exist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Is_Player_Exist::MergeFrom(const GS2C_Is_Player_Exist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_exist()) {
      set_is_exist(from.is_exist());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_is_online()) {
      set_is_online(from.is_online());
    }
    if (from.has_your_guid()) {
      set_your_guid(from.your_guid());
    }
    if (from.has_send_from()) {
      set_send_from(from.send_from());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Is_Player_Exist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Is_Player_Exist::CopyFrom(const GS2C_Is_Player_Exist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Is_Player_Exist::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  return true;
}

void GS2C_Is_Player_Exist::Swap(GS2C_Is_Player_Exist* other) {
  if (other != this) {
    std::swap(is_exist_, other->is_exist_);
    std::swap(player_name_, other->player_name_);
    std::swap(is_online_, other->is_online_);
    std::swap(your_guid_, other->your_guid_);
    std::swap(send_from_, other->send_from_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Is_Player_Exist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Is_Player_Exist_descriptor_;
  metadata.reflection = GS2C_Is_Player_Exist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeedbackInfo::kFeedbackFieldNumber;
#endif  // !_MSC_VER

FeedbackInfo::FeedbackInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FeedbackInfo::InitAsDefaultInstance() {
}

FeedbackInfo::FeedbackInfo(const FeedbackInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FeedbackInfo::SharedCtor() {
  _cached_size_ = 0;
  feedback_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeedbackInfo::~FeedbackInfo() {
  SharedDtor();
}

void FeedbackInfo::SharedDtor() {
  if (feedback_ != &::google::protobuf::internal::kEmptyString) {
    delete feedback_;
  }
  if (this != default_instance_) {
  }
}

void FeedbackInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeedbackInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeedbackInfo_descriptor_;
}

const FeedbackInfo& FeedbackInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
  return *default_instance_;
}

FeedbackInfo* FeedbackInfo::default_instance_ = NULL;

FeedbackInfo* FeedbackInfo::New() const {
  return new FeedbackInfo;
}

void FeedbackInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_feedback()) {
      if (feedback_ != &::google::protobuf::internal::kEmptyString) {
        feedback_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeedbackInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string feedback = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feedback()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->feedback().data(), this->feedback().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FeedbackInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string feedback = 1;
  if (has_feedback()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->feedback().data(), this->feedback().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->feedback(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FeedbackInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string feedback = 1;
  if (has_feedback()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->feedback().data(), this->feedback().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->feedback(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FeedbackInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string feedback = 1;
    if (has_feedback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->feedback());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedbackInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeedbackInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeedbackInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeedbackInfo::MergeFrom(const FeedbackInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_feedback()) {
      set_feedback(from.feedback());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeedbackInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedbackInfo::CopyFrom(const FeedbackInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedbackInfo::IsInitialized() const {

  return true;
}

void FeedbackInfo::Swap(FeedbackInfo* other) {
  if (other != this) {
    std::swap(feedback_, other->feedback_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeedbackInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeedbackInfo_descriptor_;
  metadata.reflection = FeedbackInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeedbackRet::kIsSuccessFieldNumber;
const int FeedbackRet::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

FeedbackRet::FeedbackRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FeedbackRet::InitAsDefaultInstance() {
}

FeedbackRet::FeedbackRet(const FeedbackRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FeedbackRet::SharedCtor() {
  _cached_size_ = 0;
  is_success_ = false;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeedbackRet::~FeedbackRet() {
  SharedDtor();
}

void FeedbackRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FeedbackRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeedbackRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeedbackRet_descriptor_;
}

const FeedbackRet& FeedbackRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
  return *default_instance_;
}

FeedbackRet* FeedbackRet::default_instance_ = NULL;

FeedbackRet* FeedbackRet::New() const {
  return new FeedbackRet;
}

void FeedbackRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_success_ = false;
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeedbackRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_success_)));
          set_has_is_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }

      // optional int32 error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FeedbackRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_success = 1;
  if (has_is_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_success(), output);
  }

  // optional int32 error_code = 2;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FeedbackRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_success = 1;
  if (has_is_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_success(), target);
  }

  // optional int32 error_code = 2;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FeedbackRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_success = 1;
    if (has_is_success()) {
      total_size += 1 + 1;
    }

    // optional int32 error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedbackRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeedbackRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeedbackRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeedbackRet::MergeFrom(const FeedbackRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_success()) {
      set_is_success(from.is_success());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeedbackRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedbackRet::CopyFrom(const FeedbackRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedbackRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FeedbackRet::Swap(FeedbackRet* other) {
  if (other != this) {
    std::swap(is_success_, other->is_success_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeedbackRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeedbackRet_descriptor_;
  metadata.reflection = FeedbackRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NUll_Ret::NUll_Ret()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NUll_Ret::InitAsDefaultInstance() {
}

NUll_Ret::NUll_Ret(const NUll_Ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NUll_Ret::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NUll_Ret::~NUll_Ret() {
  SharedDtor();
}

void NUll_Ret::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NUll_Ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NUll_Ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NUll_Ret_descriptor_;
}

const NUll_Ret& NUll_Ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServer_2eproto();
  return *default_instance_;
}

NUll_Ret* NUll_Ret::default_instance_ = NULL;

NUll_Ret* NUll_Ret::New() const {
  return new NUll_Ret;
}

void NUll_Ret::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NUll_Ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NUll_Ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NUll_Ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NUll_Ret::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NUll_Ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NUll_Ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NUll_Ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NUll_Ret::MergeFrom(const NUll_Ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NUll_Ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NUll_Ret::CopyFrom(const NUll_Ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NUll_Ret::IsInitialized() const {

  return true;
}

void NUll_Ret::Swap(NUll_Ret* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NUll_Ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NUll_Ret_descriptor_;
  metadata.reflection = NUll_Ret_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
