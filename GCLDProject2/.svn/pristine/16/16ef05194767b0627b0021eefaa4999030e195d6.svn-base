// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Enum.proto

#ifndef PROTOBUF_Enum_2eproto__INCLUDED
#define PROTOBUF_Enum_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Enum_2eproto();
void protobuf_AssignDesc_Enum_2eproto();
void protobuf_ShutdownFile_Enum_2eproto();


enum PLAYER_32_BIT_FLAGS_TYPE {
  PLAYER_FLAG_IS_NEW = 1,
  PLAYER_FLAG_HAD_FIRST_PAY = 2,
  PLAYER_FLAG_HAD_HARVEST = 4,
  PLAYER_FLAG_HAD_SUPPORT = 8,
  PLAYER_FLAG_HAD_DEEP = 16,
  PLAYER_FLAG_FIRST_REFRESH_EQUIP_SHOP = 32,
  PLAYER_GET_AUTO_BUILD = 64,
  PLAYER_GET_TROOPS_ODER_EVERYDAY = 128,
  PLAYER_OPEN_ADVANCED_RES_FUBEN = 256,
  PLAYER_UP_KILL_ENEMY_HORNOR = 512,
  PLAYER_UP_RES_CAPCITY = 1024,
  PLAYER_UP_WORD_MAP_MOVE_SPEED = 2048,
  PLAYER_UP_COUNTRY_WAR_TIME = 4096,
  PLAYER_CAN_FAR_TRIGE_PERSONAL_EVENT = 8192,
  PLAYER_FLAG_HAD_TAKE_FIRST_PAY_REWARD = 16384,
  PLAYER_FLAG_QUEST_GET_EXPLOIT_ACTIVE = 32768,
  PLAYER_NO_SHOP_COOL_DOWN_TIME = 65536,
  PLAYER_CRUSADE_ADD_HERO_TIMES = 131072,
  PLAYER_FLAG_BRANCH_QUEST_GET_EXPLOIT_ACTIVE = 262144,
  PLAYER_CONGRATULATE_SHENQI_80 = 524288,
  PLAYER_CONGRATULATE_SHENQI_100 = 1048576,
  PLAYER_CONGRATULATE_SHENQI_120 = 2097152,
  PLAYER_CONGRATULATE_SHENQI_150 = 4194304,
  PLAYER_LOTTERY_DAILY_DONE = 8388608
};
bool PLAYER_32_BIT_FLAGS_TYPE_IsValid(int value);
const PLAYER_32_BIT_FLAGS_TYPE PLAYER_32_BIT_FLAGS_TYPE_MIN = PLAYER_FLAG_IS_NEW;
const PLAYER_32_BIT_FLAGS_TYPE PLAYER_32_BIT_FLAGS_TYPE_MAX = PLAYER_LOTTERY_DAILY_DONE;
const int PLAYER_32_BIT_FLAGS_TYPE_ARRAYSIZE = PLAYER_32_BIT_FLAGS_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* PLAYER_32_BIT_FLAGS_TYPE_descriptor();
inline const ::std::string& PLAYER_32_BIT_FLAGS_TYPE_Name(PLAYER_32_BIT_FLAGS_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    PLAYER_32_BIT_FLAGS_TYPE_descriptor(), value);
}
inline bool PLAYER_32_BIT_FLAGS_TYPE_Parse(
    const ::std::string& name, PLAYER_32_BIT_FLAGS_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PLAYER_32_BIT_FLAGS_TYPE>(
    PLAYER_32_BIT_FLAGS_TYPE_descriptor(), name, value);
}
enum PLAYER_VALUE_TYPE {
  PLAYER_VALUE_TYPE_32_BIT_FLAGS = 0,
  PLAYER_VALUE_TYPE_32_BIT_FIELD = 1,
  PLAYER_VALUE_TYPE_64_BIT_FIELD = 2,
  PLAYER_VALUE_TYPE_FLOAT_FIELD = 3,
  PLAYER_VALUE_TYPE_STR_FIELD = 4,
  PLAYER_VALUE_TYPE_STR_DATA = 5
};
bool PLAYER_VALUE_TYPE_IsValid(int value);
const PLAYER_VALUE_TYPE PLAYER_VALUE_TYPE_MIN = PLAYER_VALUE_TYPE_32_BIT_FLAGS;
const PLAYER_VALUE_TYPE PLAYER_VALUE_TYPE_MAX = PLAYER_VALUE_TYPE_STR_DATA;
const int PLAYER_VALUE_TYPE_ARRAYSIZE = PLAYER_VALUE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* PLAYER_VALUE_TYPE_descriptor();
inline const ::std::string& PLAYER_VALUE_TYPE_Name(PLAYER_VALUE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    PLAYER_VALUE_TYPE_descriptor(), value);
}
inline bool PLAYER_VALUE_TYPE_Parse(
    const ::std::string& name, PLAYER_VALUE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PLAYER_VALUE_TYPE>(
    PLAYER_VALUE_TYPE_descriptor(), name, value);
}
enum PLAYER_32_BIT_FIELD {
  PLAYER_FIELD_CONTINUOUSLY_LOGIN_DAY = 0,
  PLAYER_FIELD_FLAGS = 1,
  PLAYER_FIELD_HEAD_ICON_ID = 2,
  PLAYER_FIELD_GUIDE_PROCESS = 3,
  PLAYER_FIELD_LOCKREASON = 4,
  PLAYER_FIELD_LEVEL = 5,
  PLAYER_FIELD_VIP_LEVEL = 6,
  PLAYER_FIELD_COIN = 7,
  PLAYER_FIELD_SYS_GOLD = 8,
  PLAYER_FIELD_IRON = 9,
  PLAYER_FIELD_FOOD = 10,
  PLAYER_FIELD_WOOD = 11,
  PLAYER_FIELD_HORNOR = 12,
  PLAYER_FIELD_BUILDING_HORNOR = 13,
  PLAYER_FIELD_TRAINING = 14,
  PLAYER_FIELD_TROOPSNUM = 15,
  PLAYER_FIELD_FREECOLLECTNUM = 16,
  PLAYER_FIELD_SUPERCOLLECTNUM = 17,
  PLAYER_FIELD_TROOPSODER = 18,
  PLAYER_FIELD_GOLDHAMMER = 19,
  PLAYER_FIELD_COUPON = 20,
  PLAYER_FIELD_MARKETBUYNUM = 21,
  PLAYER_FIELD_FREEPURIFY = 22,
  PLAYER_FIELD_EXTRMEPURIFY = 23,
  PLAYER_FIELD_GODSTONEPURIFY = 24,
  PLAYER_FIELD_CASH_GOLD = 25,
  PLAYER_FIELD_CUR_XP = 26,
  PLAYER_FIELD_CUR_VIP_XP = 27,
  PLAYER_FIELD_DAILY_QUEST_SCORE = 28,
  PlAYER_FIELD_AUTO_HAMMER = 29,
  PLAYER_FIELD_LOGIN_7_DAY_REWARD_TAKE_COUNT = 30,
  PLAYER_FIELD_LOGIN_MONTLY_REWARD_TAKE_COUNT = 31,
  PlAYER_FIELD_PRE_BATTLE_ID = 32,
  PlAYER_FIELD_PALACE_LOW_OFFICE_ID = 33,
  PLAYER_FIELD_PANZER_ID = 34,
  PLAYER_FIELD_BAG_CAPACITY = 35,
  PLAYER_FIELD_IS_REGIST_CROSS_SERVER = 36,
  PLAYER_FIELD_IS_IN_CROSS_SERVER = 37,
  PlAYER_FIELD_IS_AUTO_INCREASE_TROOPS = 38,
  PLAYER_FIELD_BUY_LABOUR_TIMES = 39,
  PLAYER_FIELD_LABOUR_NUM = 40,
  PLAYER_FIELD_CUR_REBUILD_ID = 41,
  PLAYER_FIELD_IS_BEGIN_REBUILD = 42,
  PLAYER_FIELD_CUR_PALACE_REBUILD_ROUND = 43,
  PLAYER_FIELD_CUR_ROUND_INVEST1 = 44,
  PLAYER_FIELD_CUR_ROUND_INVEST2 = 45,
  PLAYER_FIELD_CUR_ROUND_INVEST3 = 46,
  PLYAER_FIELD_HEROS_EXPUP_PERCENT = 47,
  PLAYER_FIELD_EXPLOIT_RANK_VALUE = 48,
  PLAYER_FIELD_MILITARY_POWER_VALUE = 49,
  PLAYER_FIELD_EXPLOIT_RANK_NORMAL_BOX = 50,
  PLAYER_FIELD_EXPLOIT_RANK_ADVANCE_BOX = 51,
  PLAYER_FIELD_EXPLOIT_RANK_BOX_LEVEL = 52,
  PLAYER_FIELD_TRICK_RANK_VALUE = 53,
  PLAYER_FIELD_OCCUPY_RANK_VALUE = 54,
  PLAYER_FIELD_SUM_DINNER_NUMBER = 55,
  PLAYER_FIELD_DINNER_NUMBER = 56,
  PLAYER_FIELD_TRAINING_FIGHT = 57,
  PLAYER_FIELD_TRAINING_DOUBLE = 58,
  PLAYER_FIELD_TRAINING_REDUCE = 59,
  PLAYER_FIELD_DRAFT_ORDER_LIMIT = 60,
  PLAYER_FIELD_NORMAL_EXPLOIT_BOX_LIMIT = 61,
  PLAYER_FIELD_ADVANCE_EXPLOT_BOX_LIMIT = 62,
  PLAYER_FLIELD_TROOPS_ORDER_LIMIT = 63,
  PLAYER_FIELD_TRICKREWARD_STEP = 64,
  PLAYER_FIELD_OCCUPYREWARD_STEP = 65,
  PLAYER_FIELD_IS_ADVANCE_BOX = 66,
  PLAYER_FIELD_CARD_SLOT_COUNT = 67,
  PLAYER_FIELD_CREATESHADOW_NUM = 68,
  PLAYER_FIELD_TODAY_ADD_XP = 69,
  PLAYER_FIELD_TAKE_VIP_REWARD_FLAG = 70,
  PLAYER_FIELD_TAKE_EXPLOIT_BOX_STEP = 71,
  PLAYER_FIELD_TAKE_DAILY_QUEST_REWARD_FLAG = 72,
  PLAYER_FIELD_GROW_UP_QUEST_EXPLOIT_VALUE = 73,
  PLAYER_FIELD_XILIAN_COUNT = 74,
  PLAYER_FIELD_CHAR_ROW_NUM = 75,
  PLAYER_FIELD_CONTUINE_SIGNUP_DAY = 76,
  PLAYER_FIELD_RETROACTIVE_DAY = 77,
  PLAYER_FIELD_SIGN_EXTRA_REWARD_FLAG = 78,
  PLAYER_FIELD_ACTIVITY_STAR_BOX_LEVEL = 79,
  PLAYER_FIELD_USE_FREE_QUICK_COMBAT_TIMES = 80,
  PLAYER_FIELD_OPEN_FOG_COUNT = 81,
  PLAYER_FIELD_TAKE_FOG_REWARD_FLAG = 82,
  PLAYER_FIELD_ACTIVITY_XILIAN_COUNT = 83,
  PLAYER_FIELD_TAKE_XILIAN_REWARD_FLAG = 84,
  PLAYER_FIELD_IRON_COLLECT_TIMES = 85,
  PLAYER_FIELD_IRON_COLLECT_REWARD_FLAG = 86,
  PLAYER_FIELD_IRON_COLLECT_TEN = 87,
  PLAYER_FIELD_XILIAN_TEN_TIMES = 88,
  PLAYER_FIELD_PEOPLE_LOYAL = 89,
  PLAYER_FIELD_ZHENGWU_TIMES = 90,
  PLAYER_FIELD_RENOWN = 91,
  PLAYER_FIELD_STARCRYSTAL = 92,
  PLAYER_FIELD_BOARD = 93,
  PLAYER_FIELD_GENE_CODE = 94,
  PLAYER_FIELD_VISIT_FAMOUS = 95,
  PLAYER_FIELD_LIMITED_SHOP_FLAG = 96,
  PLAYER_FIELD_BEEF = 97,
  PLAYER_FIELD_WINE = 98,
  PLAYER_FIELD_HERO_REWARD_BOX = 99,
  PLAYER_FIELD_ACTIVITY_GOLD_NUM = 100,
  PLAYER_FIELD_ACTIVITY_GOLD_TAKE_FLAG = 101,
  PLAYER_FIELD_BRANCH_QUEST_EXPLOIT = 102,
  PLAYER_FIELD_WORLD_FIGHT_TAKE_REWARD_FLAG = 103,
  PLAYER_FIELD_CURR_REWARD_CHAR_ID = 104,
  PLAYER_FIELD_LOGIN_DAYS = 105,
  PLAYER_FIELD_TODAY_CONGRATULATE_TIMES = 106,
  PLAYER_FIELD_MAIN_QUEST_GET_EXPLOIT = 107,
  PLAYER_FIELD_TODAY_OCCUPY_CITY = 108,
  PLAYER_FIELD_TODAY_ZHUZHENG = 109,
  PLAYER_FIELD_TODAY_ZHUGONG = 110,
  PLAYER_FIELD_TODAY_CONTINUE_OCCPUY_CITY = 111,
  PLAYER_FIELD_ACTIVITY_OCCUPY_CITY_NUM = 112,
  PLAYER_FIELD_ACTIVITY_ADD_SOLDIER = 113,
  PLAYER_FIELD_32_BIT_COUNT = 114
};
bool PLAYER_32_BIT_FIELD_IsValid(int value);
const PLAYER_32_BIT_FIELD PLAYER_32_BIT_FIELD_MIN = PLAYER_FIELD_CONTINUOUSLY_LOGIN_DAY;
const PLAYER_32_BIT_FIELD PLAYER_32_BIT_FIELD_MAX = PLAYER_FIELD_32_BIT_COUNT;
const int PLAYER_32_BIT_FIELD_ARRAYSIZE = PLAYER_32_BIT_FIELD_MAX + 1;

const ::google::protobuf::EnumDescriptor* PLAYER_32_BIT_FIELD_descriptor();
inline const ::std::string& PLAYER_32_BIT_FIELD_Name(PLAYER_32_BIT_FIELD value) {
  return ::google::protobuf::internal::NameOfEnum(
    PLAYER_32_BIT_FIELD_descriptor(), value);
}
inline bool PLAYER_32_BIT_FIELD_Parse(
    const ::std::string& name, PLAYER_32_BIT_FIELD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PLAYER_32_BIT_FIELD>(
    PLAYER_32_BIT_FIELD_descriptor(), name, value);
}
enum PLAYER_64_BIT_FIELD {
  PLAYER_FIELD_PLAYER_ID = 0,
  PLAYER_FIELD_GUILD_ID = 1,
  PLAYER_FIELD_LAST_LOGIN_TIME = 2,
  PLAYER_FIELD_REGIST_TIME = 3,
  PLAYER_FIELD_NEXT_RECOVER_HORNOR_TIME = 4,
  PLAYER_FIELD_NEXT_RECOVER_MARKET_BUY_NUM_TIME = 5,
  PLAYER_FIELD_NEXT_RECOVER_FREE_PURIFY_TIME = 6,
  PLAYER_FIELD_NEXT_RECOVER_DAILY_QUEST_SCORE_TIME = 7,
  PLAYER_FIELD_NEXT_RECOVER_SMITHY_BUY_NUM_TIME = 8,
  PLAYER_FIELD_LOGIN_7_DAY_REWARD_TAKE_TIME = 9,
  PLAYER_FIELD_LOGIN_MONTLY_REWARD_TAKE_TIME = 10,
  PLAYER_FIELD_CUR_REBUILD_END_TIME = 11,
  PLAYER_FIELD_PALACE_TAKE_SALARY_TIME = 12,
  PLAYER_FIELD_LOCK_TIME = 13,
  PLAYER_FIELD_KILL_NUM = 14,
  PLAYER_FIELD_ENTER_WORLD_TIME = 15,
  PLAYER_FIELD_BUY_MONTH_CARD_NORMAL = 16,
  PLAYER_FIELD_BUY_MONTH_CARD_ADVANCE = 17,
  PLAYER_FIELD_TAKE_MONTH_CARD_NORMAL = 18,
  PLAYER_FIELD_TAKE_MONTH_CARD_ADVANCE = 19,
  PLAYER_FIELD_CONGRATULATE_ACTIVE_TIME = 20,
  PLAYER_FIELD_64_BIT_COUNT = 21
};
bool PLAYER_64_BIT_FIELD_IsValid(int value);
const PLAYER_64_BIT_FIELD PLAYER_64_BIT_FIELD_MIN = PLAYER_FIELD_PLAYER_ID;
const PLAYER_64_BIT_FIELD PLAYER_64_BIT_FIELD_MAX = PLAYER_FIELD_64_BIT_COUNT;
const int PLAYER_64_BIT_FIELD_ARRAYSIZE = PLAYER_64_BIT_FIELD_MAX + 1;

const ::google::protobuf::EnumDescriptor* PLAYER_64_BIT_FIELD_descriptor();
inline const ::std::string& PLAYER_64_BIT_FIELD_Name(PLAYER_64_BIT_FIELD value) {
  return ::google::protobuf::internal::NameOfEnum(
    PLAYER_64_BIT_FIELD_descriptor(), value);
}
inline bool PLAYER_64_BIT_FIELD_Parse(
    const ::std::string& name, PLAYER_64_BIT_FIELD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PLAYER_64_BIT_FIELD>(
    PLAYER_64_BIT_FIELD_descriptor(), name, value);
}
enum PLAYER_FLOAT_FIELD {
  PLAYER_FIELD_FLOAT_COUNT = 0
};
bool PLAYER_FLOAT_FIELD_IsValid(int value);
const PLAYER_FLOAT_FIELD PLAYER_FLOAT_FIELD_MIN = PLAYER_FIELD_FLOAT_COUNT;
const PLAYER_FLOAT_FIELD PLAYER_FLOAT_FIELD_MAX = PLAYER_FIELD_FLOAT_COUNT;
const int PLAYER_FLOAT_FIELD_ARRAYSIZE = PLAYER_FLOAT_FIELD_MAX + 1;

const ::google::protobuf::EnumDescriptor* PLAYER_FLOAT_FIELD_descriptor();
inline const ::std::string& PLAYER_FLOAT_FIELD_Name(PLAYER_FLOAT_FIELD value) {
  return ::google::protobuf::internal::NameOfEnum(
    PLAYER_FLOAT_FIELD_descriptor(), value);
}
inline bool PLAYER_FLOAT_FIELD_Parse(
    const ::std::string& name, PLAYER_FLOAT_FIELD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PLAYER_FLOAT_FIELD>(
    PLAYER_FLOAT_FIELD_descriptor(), name, value);
}
enum PLAYER_STR_FIELD {
  PLAYER_FIELD_NAME = 0,
  PALYER_FIELD_GUILD_NAME = 1,
  PLAYER_FIELD_SDK_NAME = 2,
  PLAYER_FIELD_STR_COUNT = 3
};
bool PLAYER_STR_FIELD_IsValid(int value);
const PLAYER_STR_FIELD PLAYER_STR_FIELD_MIN = PLAYER_FIELD_NAME;
const PLAYER_STR_FIELD PLAYER_STR_FIELD_MAX = PLAYER_FIELD_STR_COUNT;
const int PLAYER_STR_FIELD_ARRAYSIZE = PLAYER_STR_FIELD_MAX + 1;

const ::google::protobuf::EnumDescriptor* PLAYER_STR_FIELD_descriptor();
inline const ::std::string& PLAYER_STR_FIELD_Name(PLAYER_STR_FIELD value) {
  return ::google::protobuf::internal::NameOfEnum(
    PLAYER_STR_FIELD_descriptor(), value);
}
inline bool PLAYER_STR_FIELD_Parse(
    const ::std::string& name, PLAYER_STR_FIELD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PLAYER_STR_FIELD>(
    PLAYER_STR_FIELD_descriptor(), name, value);
}
enum PLAYER_STR_DATA {
  PLAYER_FIELD_HEAD_ICON_IDS = 0,
  PLAYER_FIELD_BUFF_IDS = 1,
  PLAYER_FIELD_STR_DATA_COUNT = 2
};
bool PLAYER_STR_DATA_IsValid(int value);
const PLAYER_STR_DATA PLAYER_STR_DATA_MIN = PLAYER_FIELD_HEAD_ICON_IDS;
const PLAYER_STR_DATA PLAYER_STR_DATA_MAX = PLAYER_FIELD_STR_DATA_COUNT;
const int PLAYER_STR_DATA_ARRAYSIZE = PLAYER_STR_DATA_MAX + 1;

const ::google::protobuf::EnumDescriptor* PLAYER_STR_DATA_descriptor();
inline const ::std::string& PLAYER_STR_DATA_Name(PLAYER_STR_DATA value) {
  return ::google::protobuf::internal::NameOfEnum(
    PLAYER_STR_DATA_descriptor(), value);
}
inline bool PLAYER_STR_DATA_Parse(
    const ::std::string& name, PLAYER_STR_DATA* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PLAYER_STR_DATA>(
    PLAYER_STR_DATA_descriptor(), name, value);
}
enum CHARACTER_FIELD {
  CHAR_FIELD_LEVEL = 0,
  CHAR_FIELD_CUR_XP = 1,
  CHAR_FIELD_WEAPON = 2,
  CHAR_FIELD_HORSE = 3,
  CHAR_FIELD_CHEST = 4,
  CHAR_FIELD_BOOK = 5,
  CHAR_FIELD_JADE = 6,
  CHAR_FIELD_FLAG = 7,
  CHAR_FIELD_HOLY = 8,
  CHAR_FIELD_ARMY = 9,
  CHAR_FIELD_SUIT = 10,
  CHAR_FIELD_TROOPS = 11,
  CHAR_FIELD_ATTACK = 12,
  CHAR_FIELD_DEFENSE = 13,
  CHAR_FIELD_PUNCTURE = 14,
  CHAR_FIELD_PARRY = 15,
  CHAR_FIELD_BROKEN_ARRAY = 16,
  CHAR_FIELD_IMPECCABLE = 17,
  CHAR_FIELD_TONG = 18,
  CHAR_FIELD_YONG = 19,
  CHAR_FIELD_CUR_TROOPS = 20,
  CHAR_FIELD_MILITARY_POWER = 21,
  CHAR_FIELD_JX_LUCK_VALUE = 22,
  CHAR_FIELD_JX_TROOPS = 23,
  CHAR_FIELD_JX_ATTACK = 24,
  CHAR_FIELD_JX_DEFENSE = 25
};
bool CHARACTER_FIELD_IsValid(int value);
const CHARACTER_FIELD CHARACTER_FIELD_MIN = CHAR_FIELD_LEVEL;
const CHARACTER_FIELD CHARACTER_FIELD_MAX = CHAR_FIELD_JX_DEFENSE;
const int CHARACTER_FIELD_ARRAYSIZE = CHARACTER_FIELD_MAX + 1;

const ::google::protobuf::EnumDescriptor* CHARACTER_FIELD_descriptor();
inline const ::std::string& CHARACTER_FIELD_Name(CHARACTER_FIELD value) {
  return ::google::protobuf::internal::NameOfEnum(
    CHARACTER_FIELD_descriptor(), value);
}
inline bool CHARACTER_FIELD_Parse(
    const ::std::string& name, CHARACTER_FIELD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CHARACTER_FIELD>(
    CHARACTER_FIELD_descriptor(), name, value);
}
enum EQUIP_SLOT {
  EQUIP_SLOT_WEAPON = 0,
  EQUIP_SLOT_HORSE = 1,
  EQUIP_SLOT_CHEST = 2,
  EQUIP_SLOT_BOOK = 3,
  EQUIP_SLOT_JADE = 4,
  EQUIP_SLOT_FLAG = 5,
  EQUIP_SLOT_HOLY = 6,
  EQUIP_SLOT_ARMY = 7,
  EQUIP_SLOT_COUNT = 8
};
bool EQUIP_SLOT_IsValid(int value);
const EQUIP_SLOT EQUIP_SLOT_MIN = EQUIP_SLOT_WEAPON;
const EQUIP_SLOT EQUIP_SLOT_MAX = EQUIP_SLOT_COUNT;
const int EQUIP_SLOT_ARRAYSIZE = EQUIP_SLOT_MAX + 1;

const ::google::protobuf::EnumDescriptor* EQUIP_SLOT_descriptor();
inline const ::std::string& EQUIP_SLOT_Name(EQUIP_SLOT value) {
  return ::google::protobuf::internal::NameOfEnum(
    EQUIP_SLOT_descriptor(), value);
}
inline bool EQUIP_SLOT_Parse(
    const ::std::string& name, EQUIP_SLOT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EQUIP_SLOT>(
    EQUIP_SLOT_descriptor(), name, value);
}
enum PLAYER_COUNTRY {
  COUNTRY_NONE = 0,
  COUNTRY_WORM = 1,
  COUNTRY_MAN = 2,
  COUNTRY_GOD = 3,
  COUNTRY_BULLYING = 4
};
bool PLAYER_COUNTRY_IsValid(int value);
const PLAYER_COUNTRY PLAYER_COUNTRY_MIN = COUNTRY_NONE;
const PLAYER_COUNTRY PLAYER_COUNTRY_MAX = COUNTRY_BULLYING;
const int PLAYER_COUNTRY_ARRAYSIZE = PLAYER_COUNTRY_MAX + 1;

const ::google::protobuf::EnumDescriptor* PLAYER_COUNTRY_descriptor();
inline const ::std::string& PLAYER_COUNTRY_Name(PLAYER_COUNTRY value) {
  return ::google::protobuf::internal::NameOfEnum(
    PLAYER_COUNTRY_descriptor(), value);
}
inline bool PLAYER_COUNTRY_Parse(
    const ::std::string& name, PLAYER_COUNTRY* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PLAYER_COUNTRY>(
    PLAYER_COUNTRY_descriptor(), name, value);
}
enum CxGS_ERROR_CODE {
  ErrCommonSuccess = 0,
  ErrCommonFail = 1,
  ErrInvalidProto = 2,
  ErrInvalidParam = 3,
  ErrNotEnoughCoin = 4,
  ErrNotEnoughCurr = 5,
  ErrNotEnoughItem = 6,
  ErrNotEnoughSpace = 7,
  ErrInvalidItemId = 8,
  ErrItemCantBeUsed = 9,
  ErrItemCantBeEquip = 10,
  ErrItemLevelLimited = 11,
  ErrCantFindItemUpgradeData = 12,
  ErrCharCantUpgrade = 13,
  ErrInvalidCharacterId = 14,
  ErrCharCantUpgradeQuality = 15,
  ErrCharUpQualityMaterialNotMatch = 16,
  ErrCharCantInlay = 17,
  ErrGMInvalidParam = 18,
  ErrGMInvalidCommand = 19,
  ErrQuestNotExist = 20,
  ErrQuestNotActive = 21,
  ErrQuestNotFinish = 22,
  ErrHaveNotTraining = 23,
  ErrDidNotHaveFreeChanceToLottery = 24,
  ErrNameAlreadyExist = 25,
  ErrIsBeUseUp = 26,
  ErrStageLevelNotOpenNow = 27,
  ErrStageLock = 28,
  ErrStageLevelLock = 29,
  ErrStageLevelFightCountLimit = 30,
  ErrTimeNotMatch = 31,
  ErrNowBonusHasTake = 32,
  ErrSellProgramNotActive = 33,
  ErrIAPRewardExpire = 34,
  ErrPrebattleIdNotMatch = 35,
  ErrNotFreeTime = 36,
  ErrPlayerLevelNotEnough = 37,
  ErrNotYetActiveHidenSkill = 38,
  ErrAlreadyExist = 39,
  ErrNotUnlock = 40,
  ErrNotEnoughFood = 41,
  ErrNotEnoughGold = 42,
  ErrNotEnoughCashGold = 43,
  ErrNotEnoughIron = 44,
  ErrNotEnoughWood = 45,
  ErrNotEnoughToopsOder = 46,
  ErrNotEnoughLabour = 47,
  ErrRechMaxTimes = 48,
  ErrAlreadyBegin = 49,
  ErrAlreadyInvest = 50,
  ErrTodayAlreadyGet = 51,
  ErrFunctionMaking = 52,
  ErrRechBagCapacity = 53,
  ErrCharInBattle = 54,
  ErrNotBuyTimes = 55,
  ErrBeShutUp = 56,
  ErrAccountBeForbid = 57,
  ErrRechGemMaxLevel = 58,
  ErrChannel = 59,
  ErrGiftCodeNotExist = 60,
  ErrGiftCodeExpier = 61,
  ErrGiftCodeNoActive = 62,
  ErrGiftCodeInValid = 63,
  ErrAlreadyTake = 64,
  ErrHeroInDungeon = 65,
  ErrNeedVipToAutoBuild = 66,
  ErrTypeCount = 67,
  ErrLvNotMatch = 68,
  ErrVipLvNotMatch = 69,
  ErrQuestHasFinished = 70,
  ErrNoTechnology = 71,
  ErrCrossHeroBusy = 72,
  ErrNeedVipPrivilege = 73
};
bool CxGS_ERROR_CODE_IsValid(int value);
const CxGS_ERROR_CODE CxGS_ERROR_CODE_MIN = ErrCommonSuccess;
const CxGS_ERROR_CODE CxGS_ERROR_CODE_MAX = ErrNeedVipPrivilege;
const int CxGS_ERROR_CODE_ARRAYSIZE = CxGS_ERROR_CODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* CxGS_ERROR_CODE_descriptor();
inline const ::std::string& CxGS_ERROR_CODE_Name(CxGS_ERROR_CODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    CxGS_ERROR_CODE_descriptor(), value);
}
inline bool CxGS_ERROR_CODE_Parse(
    const ::std::string& name, CxGS_ERROR_CODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CxGS_ERROR_CODE>(
    CxGS_ERROR_CODE_descriptor(), name, value);
}
enum EVENT_LOGIN_FAILD_ENUM {
  EVENT_VERSION_CHECK_FAIL = 1,
  EVENT_SDK_ACCOUNT_CHECK_FAIL = 2,
  EVENT_SELF_ACCOUNT_CHECK_NOT_ACCOUNT_INFO = 3,
  EVENT_SELF_ACCOUNT_CHECK_PASSWORD_ERROR = 4,
  EVENT_SELF_ACCOUNT_REGISTER_ACCOUTN_IS_EMPTY = 5,
  EVENT_SELF_ACCOUNT_REGISTER_IS_HAD_REGISTER = 6,
  EVENT_SELF_ACCOUNT_REGISTER_PWD_IS_EMPTY = 7,
  EVENT_SELF_ACCOUNT_REGISTER_WRITE_DB_ERROR = 8,
  EVENT_GET_SERVER_LIST_NOT_ACCOUNT_INFO = 9,
  EVENT_GET_SELECT_SERVER_NOT_ACCOUNT_INFO = 10,
  EVENT_GET_SELECT_SERVER_NOT_FIND_SERVER_ID = 11
};
bool EVENT_LOGIN_FAILD_ENUM_IsValid(int value);
const EVENT_LOGIN_FAILD_ENUM EVENT_LOGIN_FAILD_ENUM_MIN = EVENT_VERSION_CHECK_FAIL;
const EVENT_LOGIN_FAILD_ENUM EVENT_LOGIN_FAILD_ENUM_MAX = EVENT_GET_SELECT_SERVER_NOT_FIND_SERVER_ID;
const int EVENT_LOGIN_FAILD_ENUM_ARRAYSIZE = EVENT_LOGIN_FAILD_ENUM_MAX + 1;

const ::google::protobuf::EnumDescriptor* EVENT_LOGIN_FAILD_ENUM_descriptor();
inline const ::std::string& EVENT_LOGIN_FAILD_ENUM_Name(EVENT_LOGIN_FAILD_ENUM value) {
  return ::google::protobuf::internal::NameOfEnum(
    EVENT_LOGIN_FAILD_ENUM_descriptor(), value);
}
inline bool EVENT_LOGIN_FAILD_ENUM_Parse(
    const ::std::string& name, EVENT_LOGIN_FAILD_ENUM* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EVENT_LOGIN_FAILD_ENUM>(
    EVENT_LOGIN_FAILD_ENUM_descriptor(), name, value);
}
enum EVENT_ID {
  EVENT_USER_ACCT_LOGIN_START = 1001,
  EVENT_USER_ACCT_LOGIN_OK = 1002,
  EVENT_USER_ACCT_LOGIN_FAILED = 1003,
  EVENT_USER_ACCT_LOGOUT = 1004,
  EVENT_USER_ACCT_KICKED_OUT = 1005,
  EVENT_PLAYER_CREATE = 1006,
  EVENT_PLAYER_LOGIN = 1007,
  EVENT_PLAYER_LOGIN_FAILED = 1010,
  EVENT_PLAYER_PAY_START = 2001,
  EVENT_PLAYER_PAY_OK = 2002,
  EVENT_PLAYER_PAY_FAILED = 2003,
  EVENT_PALYER_ITEM_SYS = 3001,
  EVENT_PLAYER_MONEY_SYS = 3002,
  EVENT_PLAYER_BEHAVIOR_STAGE = 4001,
  EVENT_PLAYER_BEHAVIOR_LEVELUP = 4002,
  EVENT_PLAYER_BEHAVIOR_VIPLEVELUP = 4003,
  EVENT_PLAYER_TAKE_GIFT_BAG = 4004,
  EVENT_PLAYER_ARMY_LV_UP = 4005,
  EVENT_PLAYER_EQUIP_PURIFY = 4006,
  EVENT_PLAYER_GODSTONE_PURIFY = 4007,
  EVENT_PLAYER_CALL_PHANTOM = 4008,
  EVENT_PLAYER_ACTIVITY = 4009,
  EVENT_PLAYER_COUNTRY_TASK = 4010
};
bool EVENT_ID_IsValid(int value);
const EVENT_ID EVENT_ID_MIN = EVENT_USER_ACCT_LOGIN_START;
const EVENT_ID EVENT_ID_MAX = EVENT_PLAYER_COUNTRY_TASK;
const int EVENT_ID_ARRAYSIZE = EVENT_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* EVENT_ID_descriptor();
inline const ::std::string& EVENT_ID_Name(EVENT_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    EVENT_ID_descriptor(), value);
}
inline bool EVENT_ID_Parse(
    const ::std::string& name, EVENT_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EVENT_ID>(
    EVENT_ID_descriptor(), name, value);
}
enum ITEM_REASON {
  IR_GM_GET = 100,
  IR_VENDOR_GET = 101,
  IR_QUEST_REWARDS_GET = 102,
  IR_ITEM_COMPOUND_GET = 103,
  IR_OPERATION_REWARD_GET = 104,
  IR_LOTTO_GET = 105,
  IR_IAP_REWARD_GET = 106,
  IR_IAP_GET = 107,
  IR_MAIL_GET = 108,
  IR_CYCLE_GET = 109,
  IR_OPEN_BOX_GET = 110,
  IR_STAGE_LEVEL_LOOT_GET = 111,
  IR_RUN_DECOMPOSE_GET = 112,
  IR_PVP_RANK_REWARD_GET = 113,
  IR_ITEM_USE_GET = 114,
  IR_MOUDLE_INCREASE_GET = 115,
  IR_ITEM_SELL_GET = 116,
  IR_PLAYER_REBUILD_EFFECT_GET = 117,
  IR_PLAYER_CREAT_INIT_GET = 118,
  IR_VIP_REWARD_GET = 119,
  IR_SIGN_UP_BASE_REWARD_GET = 120,
  IR_BAG_RECH_CAPACITY_GET = 121,
  IR_QUEST_REWARD_GET = 122,
  IR_LOTTO_COST = 300,
  IR_CHARACTER_UPGRADE_SKILL_COST = 301,
  IR_CHARACTER_UPGRADE_LV_COST = 302,
  IR_ITEM_USED_COST = 303,
  IR_CYCLE_COST = 304,
  IR_EQUIP_UPGRADE_LV_COST = 305,
  IR_ITEM_COMPOUND_COST = 306,
  IR_GM_COST = 307,
  IR_VENDOR_COST = 308,
  IR_VENDOR_REFRESH_COST = 309,
  IR_PLAYER_CHANGE_NAME_COST = 310,
  IR_PLAYER_BUY_HEAD_ICON_COST = 311,
  IR_CHARACTER_INCREASE_HP_COST = 312,
  IR_PLAYER_BUYBUFF_COST = 313,
  IR_PLAYER_BUY_ITEM_COST = 314,
  IR_PLAYER_BUY_BACK_ITEM_COST = 315,
  IR_PLAYER_REBUILD_COST = 316,
  IR_PLAYER_ZHAOMU_CHARACTER_COST = 317,
  IR_BUILDING_LV_UP_COST = 318,
  IR_EESET_TIME_COST = 319,
  IR_TRAIN_CHAR_COST = 320,
  IR_CLEAR_TONDENCD_COST = 321,
  IR_INSTANT_ESCAPE_COST = 322,
  IR_INVEST_CLEAR_CD_COST = 323,
  IR_ITEM_EXPIRY_COST = 324,
  IR_ACTIVITY_STAR_BOX_LEVEL_UP_COST = 325,
  IR_ACTIVITY_STAR_BOX_FINISH_COUNT_DOWN_COST = 326,
  IR_ACTIVITY_XILIAN_COST = 327,
  IR_QUICK_FIGHT_COST = 328,
  IR_CROSS_HAMMER_COST = 329,
  IR_CROSS_KILL_TROOP_COST = 330,
  IR_RUN_DECOMPOSE_COST = 331,
  IR_MINZHONG_COST = 332,
  IR_CELEBRITY_COST = 333,
  IR_LIMITED_TIME_SHOP_BUY_COST = 334,
  IR_GENERAL_REWRAD_OPEN_BOX_COST = 335,
  IR_GENERAL_COST = 336,
  IR_RECOMMEND_COUNTRY_GET = 337,
  IR_AUTO_COUNTRY_WAR_COST = 338,
  IR_SEIGE_ARMY_FORCE_COST = 339
};
bool ITEM_REASON_IsValid(int value);
const ITEM_REASON ITEM_REASON_MIN = IR_GM_GET;
const ITEM_REASON ITEM_REASON_MAX = IR_SEIGE_ARMY_FORCE_COST;
const int ITEM_REASON_ARRAYSIZE = ITEM_REASON_MAX + 1;

const ::google::protobuf::EnumDescriptor* ITEM_REASON_descriptor();
inline const ::std::string& ITEM_REASON_Name(ITEM_REASON value) {
  return ::google::protobuf::internal::NameOfEnum(
    ITEM_REASON_descriptor(), value);
}
inline bool ITEM_REASON_Parse(
    const ::std::string& name, ITEM_REASON* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ITEM_REASON>(
    ITEM_REASON_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::PLAYER_32_BIT_FLAGS_TYPE>() {
  return ::pb::PLAYER_32_BIT_FLAGS_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::PLAYER_VALUE_TYPE>() {
  return ::pb::PLAYER_VALUE_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::PLAYER_32_BIT_FIELD>() {
  return ::pb::PLAYER_32_BIT_FIELD_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::PLAYER_64_BIT_FIELD>() {
  return ::pb::PLAYER_64_BIT_FIELD_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::PLAYER_FLOAT_FIELD>() {
  return ::pb::PLAYER_FLOAT_FIELD_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::PLAYER_STR_FIELD>() {
  return ::pb::PLAYER_STR_FIELD_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::PLAYER_STR_DATA>() {
  return ::pb::PLAYER_STR_DATA_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::CHARACTER_FIELD>() {
  return ::pb::CHARACTER_FIELD_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EQUIP_SLOT>() {
  return ::pb::EQUIP_SLOT_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::PLAYER_COUNTRY>() {
  return ::pb::PLAYER_COUNTRY_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::CxGS_ERROR_CODE>() {
  return ::pb::CxGS_ERROR_CODE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EVENT_LOGIN_FAILD_ENUM>() {
  return ::pb::EVENT_LOGIN_FAILD_ENUM_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EVENT_ID>() {
  return ::pb::EVENT_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ITEM_REASON>() {
  return ::pb::ITEM_REASON_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Enum_2eproto__INCLUDED
