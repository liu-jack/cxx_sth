
#ifndef GAME_SERVER_SESSION_H__
#define GAME_SERVER_SESSION_H__

#include <map>
#include <boost/smart_ptr.hpp>
#include "PlayerDataCacheContainer.h"

#include "net_framework/Session.h"
#include "memory_buffer/MemoryPool.h"
#include "../player_data/CachePtrMap.h"

//////////////////////////////////////////////////////////////////////////
#define FIND_PLAYER_AND_DO_STH( MsgType, do_sth ) \
	MsgType upMsg; \
	uint64 playerId = 0; \
	packet >> playerId >> upMsg; \
	PlayerDataMapItr itr = m_playerMap.find( playerId) ; \
	if( itr != m_playerMap.end() ) \
            { \
	    itr->second->do_sth( upMsg); \
            }

using namespace pb;

namespace pb
{
	class MsgPlayerBaseData;
	class MsgPlayerBaseInfo;
	class Friend_list_Record;
	class SG2D_Forbiden_Player;
	class SD2G_Check_Mail_Recivers_Exist_Rspone;
}

struct GuidInfoTable ;
struct PlayerTable;
class GlobalData ;
struct PvPRankTable ;
struct ServerGobalValueTable ;

class GameServerSession : public Session
{
	DECLARE_OBJ_POOL(GameServerSession)

public:
	typedef void (GameServerSession::*NetPackHandler)(NetPack&);
	typedef std::vector<NetPackHandler> HandlerArray;

public:
	static HandlerArray RegisteServerHandlers( void );

	static uint32 GetMaxCachePlayerDays( void ) {   return s_maxCachePlayerDays ;   }
	static void SetMaxCachePlayerDays( uint32 maxDays ) {   s_maxCachePlayerDays =maxDays ;   }

	static uint32 GetMaxCachePlayerCount( void ) {   return s_maxCachePlayerCount ;   }
	static void SetMaxCachePlayerCount( uint32 maxCount ) {   s_maxCachePlayerCount =maxCount ;   }

	static time_t GetMaxCacheOfflinePlayerSeconds( void ) {   return s_maxCacheOfflinePlayerSeconds ;   }
	static void SetMaxCacheOfflinePlayerSeconds( time_t maxSeconds ) {   s_maxCacheOfflinePlayerSeconds =maxSeconds ;   }

	static time_t GetPlayerDataSaveDiffMS( void ) {   return s_playerDataSaveDiffMS ;   }
	static void SetPlayerDataSaveDiffMS( time_t ms ) {   s_playerDataSaveDiffMS =ms ;   }

private:
	static HandlerArray s_serverHandlers ;
	static uint32       s_maxCachePlayerDays ;
	static uint32       s_maxCachePlayerCount ;
	static time_t       s_maxCacheOfflinePlayerSeconds ;
	static time_t       s_playerDataSaveDiffMS ;

public:
	GameServerSession( void ) ;
	virtual ~GameServerSession( void ) ;

	virtual void Update( uint64 nowTimeMS, int64 diffMS ) ;


public:
	void OnPlayerOffLine( uint64 playerId ) ;
	void OnPlayerOnline( PlayerDataPtr &ptr ) ;

private:
	void AddToOfflineTable( PlayerDataPtr &ptr ) ;
	bool UpdateForbidenInfo(PlayerTable *pPlayerTable, const pb::SG2D_Forbiden_Player& info);

public:
	PlayerDataPtr GetPlayerData( uint64 playerId ) ;
	PlayerDataPtr GetPlayerData( const string &name ) ;
	PlayerDataPtr GetOrLoadPlayerData( uint64 playerId ) ;

	bool GetPlayerBaseData( const string &name, pb::MsgPlayerBaseData &data );
	bool GetPlayerBaseData( uint64 playerId, pb::MsgPlayerBaseData &data, int dataFlag =0 );
	bool GetPlayerBaseInfo( uint64 playerId, pb::MsgPlayerBaseInfo &data );

	bool WriteFriendInfo(const string &name, pb::Friend_list_Record& info);
	bool WriteFriendInfo(uint64 friendId, pb::Friend_list_Record& info);

	bool AddPlayerDataToMap( const PlayerDataPtr &ptr ) ;
	void RemovePlayerDataFromMap( uint64 playerId ) ;

private:
	PlayerDataMap          m_playerMap;
	MKPlayerOfflineTable   m_offlinePlayers ;

public:
	void InitGuidInfo( void ) ;
	void InitPlayerDataCache( void ) ;
	void CachePlayerData(PlayerTable *pPlayerTable);
private:
	std::map< int, GuidInfoTable > m_guidInfo ;
	boost::shared_ptr<GlobalData>  m_gloabalDataPtr;



	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// PvP
//public:
//	typedef CachePtrMap< uint32, PvPRankTable > PvPRankMap ;
//	typedef PvPRankMap::Iter                    PvPRankMapItr ;
//
//public:
//	void InitPvPRankList( void ) ;
//	int AddPvPRank( uint64 playerId, uint64 accountId, uint32 rank ) ;
//
//private:
//	PvPRankMap m_pvpRank ;


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Gobal value
public:
	typedef CachePtrMap< int, ServerGobalValueTable > ServerGobalValueMap ;
	typedef ServerGobalValueMap::Iter                 ServerGobalValueMapItr ;

public:
	void InitServerGobalValue( void ) ;
	ServerGobalValueMap& GetServerGobalValueMap( void ) {    return m_serverGobalValueMap ;    }

private:
	void BrodCastCacheReceveMail(const pb::SD2G_Check_Mail_Recivers_Exist_Rspone& responMsg,std::set< uint64>& recIds);
	void BrodCastReceveOfflineMail(const pb::SD2G_Check_Mail_Recivers_Exist_Rspone& responMsg,const std::set< uint64>& notIds);
	void BrodCastPlayersReceveMail(const pb::SD2G_Check_Mail_Recivers_Exist_Rspone& responMsg,std::set< uint64>& recIds,bool jsOnline);
	void ReceveMails(const pb::SD2G_Check_Mail_Recivers_Exist_Rspone& responMsg);

private:
	ServerGobalValueMap m_serverGobalValueMap ;
	std::list< PlayerTable* > m_playerTableList;
	bool m_syncPlayerEnd;
	bool m_isRegistOk;




	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Handler
public:
	virtual bool HandleNetPack( NetPack &pack );
	virtual void HandlePing( NetPack &packet ) ;

#undef Msg_Declare
#define Msg_Declare(e, MsgType) void Handle_##e(NetPack &packet);
    #include "../msg/GlobalDataMsg.h"
    #include "../msg/PlayerDataMsg.h"


	void HandleRegister( NetPack &packet ) ;
	void HandleGetPlayerList( NetPack &packet ) ;
	void HandleCreatePlayer( NetPack &packet ) ;
	void HandleSelectPlayer( NetPack &packet ) ;
	void HandlePlayerOffline( NetPack &packet ) ;
	void HandleUpdateStageLevel( NetPack &packet );
    void HandleUpdateStageLevelEndless( NetPack &packet );

    void HandleUpdateBag( NetPack &packet );
    
    void HandleCreatePlayerData( NetPack &packet );
    void HandleUpdatePlayerValue( NetPack &packet );

    void HandlePlayerChangeName( NetPack &packet );


    void HandleUpdateQuestCounter( NetPack &packet );
    void HandleUpdateQuestComplete( NetPack &packet );
    void HandleUpdateQuestLog( NetPack &packet );    
    
    // character 
    void HandleUpdateBattleChars( NetPack &packet );
    void HandleDestoryCharacters( NetPack &packet );
    void HandleCreateCharacter( NetPack &packet );
    void HandleUpdateCharacter( NetPack &packet );
    // sell
    void HandleUpdateSellRandomProgram( NetPack &packet );
    void HandleUpdateSellProgramInfo( NetPack &packet );

    void HandleUpdateLootRoundRecord( NetPack &packet );
    void HandleUpdateLotteryFreeRecord( NetPack &packet );

    void HandleUpdatePlayerString( NetPack& packet );


	void HandleCheckMailReciVersExist( NetPack &packet );
	void HandleOffLineMsg( NetPack &packet );
	void HandleReceveMail( NetPack &packet );
	void HandleUpdateMail( NetPack &packet );
	void HandleFriendOperate( NetPack &packet );
	void HandleFriendSearch( NetPack &packet );
	void HandleCreateGuildInfo( NetPack &packet );
	void HandleUpdateGuildMemberInfo( NetPack &packet );
	void HandleUpdateGuildInfo( NetPack &packet );
	void HandleGuildSearchPlayerInfo( NetPack &packet );
	void HandleFriendUpdateData( NetPack &packet );
	void HandleWebGetPlayerList( NetPack &packet );
	void HandlerGetPlayerInfo( NetPack &packet );

	void HandlePvPCreateVirtualPlayer( NetPack &packet );
	void HandlePvPEntryArena( NetPack &packet ) ;
	void HandlePvPGetPlayerInfo( NetPack &packet ) ;
	void HandlePvPFightResultInfo( NetPack &packet ) ;
	void HandlePvPFightRecordInfo( NetPack &packet ) ;
	void HandleServerGobalValue( NetPack &packet ) ;
	void HandleGetPvPRewardRankList( NetPack &packet ) ;
	void HandlePvPGetRankingList( NetPack &packet ) ;
	void HandlePvPMarkFight( NetPack &packet ) ;
	void HandleWebPay( NetPack &packet ) ;
	void HandleGetPlayerPayRecord( NetPack &packet ) ;
	void HandleUpdatePlayerModule( NetPack &packet ) ;
	void HandleUpdatePlayerBuilding( NetPack &packet ) ;
	void HandleGetPlayerAppendData( NetPack &packet );
	void HandleForbidenPlayer( NetPack &packet );
	void HandleSavePlayerCache( NetPack &packet );
	void HandleSaveAllPlayerCache(NetPack& packet);

	void HandleSetNameAndHeadId(NetPack& packet);
	void HandleUpdateActivityData(NetPack& packet);
	void HandleDeleteActivityStarBoxTable(NetPack& packet);
	void HandleDeleteGeneralRewardTable(NetPack& packet);
	void HandleSelectCountry(NetPack& packet);
	void HandleSaveDbproxy(NetPack& packet);
} ;



#endif


