// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Market.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Market.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* C2GS_Market_Collect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Market_Collect_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_Market_Collect_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_Market_Collect_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Iron_Collect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Iron_Collect_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Market_Collect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Market_Collect_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketBuyContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketBuyContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Market_Buy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Market_Buy_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Market_Buy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Market_Buy_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Market_Black_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Market_Black_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Market_Black_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Market_Black_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Market_Ticket_Change_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Market_Ticket_Change_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Market_Mystery_Shop_Invest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Market_Mystery_Shop_Invest_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Market_Mystery_Shop_Take_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Market_Mystery_Shop_Take_Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Market_Mystery_Shop_Take_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Market_Mystery_Shop_Take_Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Market_Mystery_Shop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Market_Mystery_Shop_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Market_All_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Market_All_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Activity_Iron_Collect_Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Activity_Iron_Collect_Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Activity_Iron_Collect_Reward_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Activity_Iron_Collect_Reward_Rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* IRON_COLLECT_RESULT_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Market_2eproto() {
  protobuf_AddDesc_Market_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Market.proto");
  GOOGLE_CHECK(file != NULL);
  C2GS_Market_Collect_descriptor_ = file->message_type(0);
  static const int C2GS_Market_Collect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Market_Collect, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Market_Collect, coll_times_),
  };
  C2GS_Market_Collect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Market_Collect_descriptor_,
      C2GS_Market_Collect::default_instance_,
      C2GS_Market_Collect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Market_Collect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Market_Collect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Market_Collect));
  GxDB_Market_Collect_Info_descriptor_ = file->message_type(1);
  static const int GxDB_Market_Collect_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Market_Collect_Info, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Market_Collect_Info, times_),
  };
  GxDB_Market_Collect_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_Market_Collect_Info_descriptor_,
      GxDB_Market_Collect_Info::default_instance_,
      GxDB_Market_Collect_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Market_Collect_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Market_Collect_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_Market_Collect_Info));
  GS2C_Iron_Collect_descriptor_ = file->message_type(2);
  static const int GS2C_Iron_Collect_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Iron_Collect, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Iron_Collect, use_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Iron_Collect, left_times_),
  };
  GS2C_Iron_Collect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Iron_Collect_descriptor_,
      GS2C_Iron_Collect::default_instance_,
      GS2C_Iron_Collect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Iron_Collect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Iron_Collect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Iron_Collect));
  GS2C_Market_Collect_descriptor_ = file->message_type(3);
  static const int GS2C_Market_Collect_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Market_Collect, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Market_Collect, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Market_Collect, iron_collect_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Market_Collect, ret_),
  };
  GS2C_Market_Collect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Market_Collect_descriptor_,
      GS2C_Market_Collect::default_instance_,
      GS2C_Market_Collect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Market_Collect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Market_Collect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Market_Collect));
  MarketBuyContent_descriptor_ = file->message_type(4);
  static const int MarketBuyContent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketBuyContent, cost_typ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketBuyContent, cost_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketBuyContent, give_typ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketBuyContent, give_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketBuyContent, quality_),
  };
  MarketBuyContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketBuyContent_descriptor_,
      MarketBuyContent::default_instance_,
      MarketBuyContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketBuyContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketBuyContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketBuyContent));
  C2GS_Market_Buy_descriptor_ = file->message_type(5);
  static const int C2GS_Market_Buy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Market_Buy, idx_),
  };
  C2GS_Market_Buy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Market_Buy_descriptor_,
      C2GS_Market_Buy::default_instance_,
      C2GS_Market_Buy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Market_Buy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Market_Buy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Market_Buy));
  GS2C_Market_Buy_descriptor_ = file->message_type(6);
  static const int GS2C_Market_Buy_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Market_Buy, left_num_add_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Market_Buy, content_refresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Market_Buy, content_),
  };
  GS2C_Market_Buy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Market_Buy_descriptor_,
      GS2C_Market_Buy::default_instance_,
      GS2C_Market_Buy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Market_Buy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Market_Buy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Market_Buy));
  C2GS_Market_Black_descriptor_ = file->message_type(7);
  static const int C2GS_Market_Black_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Market_Black, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Market_Black, idx_),
  };
  C2GS_Market_Black_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Market_Black_descriptor_,
      C2GS_Market_Black::default_instance_,
      C2GS_Market_Black_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Market_Black, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Market_Black, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Market_Black));
  GS2C_Market_Black_descriptor_ = file->message_type(8);
  static const int GS2C_Market_Black_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Market_Black, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Market_Black, reward_),
  };
  GS2C_Market_Black_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Market_Black_descriptor_,
      GS2C_Market_Black::default_instance_,
      GS2C_Market_Black_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Market_Black, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Market_Black, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Market_Black));
  C2GS_Market_Ticket_Change_descriptor_ = file->message_type(9);
  static const int C2GS_Market_Ticket_Change_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Market_Ticket_Change, table_id_),
  };
  C2GS_Market_Ticket_Change_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Market_Ticket_Change_descriptor_,
      C2GS_Market_Ticket_Change::default_instance_,
      C2GS_Market_Ticket_Change_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Market_Ticket_Change, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Market_Ticket_Change, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Market_Ticket_Change));
  C2GS_Market_Mystery_Shop_Invest_descriptor_ = file->message_type(10);
  static const int C2GS_Market_Mystery_Shop_Invest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Market_Mystery_Shop_Invest, table_id_),
  };
  C2GS_Market_Mystery_Shop_Invest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Market_Mystery_Shop_Invest_descriptor_,
      C2GS_Market_Mystery_Shop_Invest::default_instance_,
      C2GS_Market_Mystery_Shop_Invest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Market_Mystery_Shop_Invest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Market_Mystery_Shop_Invest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Market_Mystery_Shop_Invest));
  C2GS_Market_Mystery_Shop_Take_Item_descriptor_ = file->message_type(11);
  static const int C2GS_Market_Mystery_Shop_Take_Item_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Market_Mystery_Shop_Take_Item, table_id_),
  };
  C2GS_Market_Mystery_Shop_Take_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Market_Mystery_Shop_Take_Item_descriptor_,
      C2GS_Market_Mystery_Shop_Take_Item::default_instance_,
      C2GS_Market_Mystery_Shop_Take_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Market_Mystery_Shop_Take_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Market_Mystery_Shop_Take_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Market_Mystery_Shop_Take_Item));
  GS2C_Market_Mystery_Shop_Take_Item_descriptor_ = file->message_type(12);
  static const int GS2C_Market_Mystery_Shop_Take_Item_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Market_Mystery_Shop_Take_Item, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Market_Mystery_Shop_Take_Item, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Market_Mystery_Shop_Take_Item, reward_cnt_),
  };
  GS2C_Market_Mystery_Shop_Take_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Market_Mystery_Shop_Take_Item_descriptor_,
      GS2C_Market_Mystery_Shop_Take_Item::default_instance_,
      GS2C_Market_Mystery_Shop_Take_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Market_Mystery_Shop_Take_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Market_Mystery_Shop_Take_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Market_Mystery_Shop_Take_Item));
  GS2C_Market_Mystery_Shop_descriptor_ = file->message_type(13);
  static const int GS2C_Market_Mystery_Shop_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Market_Mystery_Shop, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Market_Mystery_Shop, take_item_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Market_Mystery_Shop, suits_part_),
  };
  GS2C_Market_Mystery_Shop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Market_Mystery_Shop_descriptor_,
      GS2C_Market_Mystery_Shop::default_instance_,
      GS2C_Market_Mystery_Shop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Market_Mystery_Shop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Market_Mystery_Shop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Market_Mystery_Shop));
  GS2C_Market_All_Info_descriptor_ = file->message_type(14);
  static const int GS2C_Market_All_Info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Market_All_Info, collect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Market_All_Info, buy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Market_All_Info, black_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Market_All_Info, mystery_),
  };
  GS2C_Market_All_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Market_All_Info_descriptor_,
      GS2C_Market_All_Info::default_instance_,
      GS2C_Market_All_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Market_All_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Market_All_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Market_All_Info));
  C2GS_Activity_Iron_Collect_Reward_descriptor_ = file->message_type(15);
  static const int C2GS_Activity_Iron_Collect_Reward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Activity_Iron_Collect_Reward, id_),
  };
  C2GS_Activity_Iron_Collect_Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Activity_Iron_Collect_Reward_descriptor_,
      C2GS_Activity_Iron_Collect_Reward::default_instance_,
      C2GS_Activity_Iron_Collect_Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Activity_Iron_Collect_Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Activity_Iron_Collect_Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Activity_Iron_Collect_Reward));
  GS2C_Activity_Iron_Collect_Reward_Rsp_descriptor_ = file->message_type(16);
  static const int GS2C_Activity_Iron_Collect_Reward_Rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Activity_Iron_Collect_Reward_Rsp, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Activity_Iron_Collect_Reward_Rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Activity_Iron_Collect_Reward_Rsp, info_),
  };
  GS2C_Activity_Iron_Collect_Reward_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Activity_Iron_Collect_Reward_Rsp_descriptor_,
      GS2C_Activity_Iron_Collect_Reward_Rsp::default_instance_,
      GS2C_Activity_Iron_Collect_Reward_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Activity_Iron_Collect_Reward_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Activity_Iron_Collect_Reward_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Activity_Iron_Collect_Reward_Rsp));
  IRON_COLLECT_RESULT_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Market_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Market_Collect_descriptor_, &C2GS_Market_Collect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_Market_Collect_Info_descriptor_, &GxDB_Market_Collect_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Iron_Collect_descriptor_, &GS2C_Iron_Collect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Market_Collect_descriptor_, &GS2C_Market_Collect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketBuyContent_descriptor_, &MarketBuyContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Market_Buy_descriptor_, &C2GS_Market_Buy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Market_Buy_descriptor_, &GS2C_Market_Buy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Market_Black_descriptor_, &C2GS_Market_Black::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Market_Black_descriptor_, &GS2C_Market_Black::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Market_Ticket_Change_descriptor_, &C2GS_Market_Ticket_Change::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Market_Mystery_Shop_Invest_descriptor_, &C2GS_Market_Mystery_Shop_Invest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Market_Mystery_Shop_Take_Item_descriptor_, &C2GS_Market_Mystery_Shop_Take_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Market_Mystery_Shop_Take_Item_descriptor_, &GS2C_Market_Mystery_Shop_Take_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Market_Mystery_Shop_descriptor_, &GS2C_Market_Mystery_Shop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Market_All_Info_descriptor_, &GS2C_Market_All_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Activity_Iron_Collect_Reward_descriptor_, &C2GS_Activity_Iron_Collect_Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Activity_Iron_Collect_Reward_Rsp_descriptor_, &GS2C_Activity_Iron_Collect_Reward_Rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Market_2eproto() {
  delete C2GS_Market_Collect::default_instance_;
  delete C2GS_Market_Collect_reflection_;
  delete GxDB_Market_Collect_Info::default_instance_;
  delete GxDB_Market_Collect_Info_reflection_;
  delete GS2C_Iron_Collect::default_instance_;
  delete GS2C_Iron_Collect_reflection_;
  delete GS2C_Market_Collect::default_instance_;
  delete GS2C_Market_Collect_reflection_;
  delete MarketBuyContent::default_instance_;
  delete MarketBuyContent_reflection_;
  delete C2GS_Market_Buy::default_instance_;
  delete C2GS_Market_Buy_reflection_;
  delete GS2C_Market_Buy::default_instance_;
  delete GS2C_Market_Buy_reflection_;
  delete C2GS_Market_Black::default_instance_;
  delete C2GS_Market_Black_reflection_;
  delete GS2C_Market_Black::default_instance_;
  delete GS2C_Market_Black_reflection_;
  delete C2GS_Market_Ticket_Change::default_instance_;
  delete C2GS_Market_Ticket_Change_reflection_;
  delete C2GS_Market_Mystery_Shop_Invest::default_instance_;
  delete C2GS_Market_Mystery_Shop_Invest_reflection_;
  delete C2GS_Market_Mystery_Shop_Take_Item::default_instance_;
  delete C2GS_Market_Mystery_Shop_Take_Item_reflection_;
  delete GS2C_Market_Mystery_Shop_Take_Item::default_instance_;
  delete GS2C_Market_Mystery_Shop_Take_Item_reflection_;
  delete GS2C_Market_Mystery_Shop::default_instance_;
  delete GS2C_Market_Mystery_Shop_reflection_;
  delete GS2C_Market_All_Info::default_instance_;
  delete GS2C_Market_All_Info_reflection_;
  delete C2GS_Activity_Iron_Collect_Reward::default_instance_;
  delete C2GS_Activity_Iron_Collect_Reward_reflection_;
  delete GS2C_Activity_Iron_Collect_Reward_Rsp::default_instance_;
  delete GS2C_Activity_Iron_Collect_Reward_Rsp_reflection_;
}

void protobuf_AddDesc_Market_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_CommomDef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Market.proto\022\002pb\032\017CommomDef.proto\";\n\023C"
    "2GS_Market_Collect\022\020\n\010table_id\030\001 \002(\r\022\022\n\n"
    "coll_times\030\002 \002(\r\";\n\030GxDB_Market_Collect_"
    "Info\022\020\n\010table_id\030\001 \001(\r\022\r\n\005times\030\002 \001(\r\"J\n"
    "\021GS2C_Iron_Collect\022\017\n\007item_id\030\001 \001(\r\022\020\n\010u"
    "se_time\030\002 \001(\004\022\022\n\nleft_times\030\003 \001(\r\"\236\001\n\023GS"
    "2C_Market_Collect\022\034\n\005value\030\001 \003(\0132\r.pb.Pa"
    "irValue\022*\n\004info\030\002 \003(\0132\034.pb.GxDB_Market_C"
    "ollect_Info\0220\n\021iron_collect_info\030\003 \003(\0132\025"
    ".pb.GS2C_Iron_Collect\022\013\n\003ret\030\004 \001(\r\"k\n\020Ma"
    "rketBuyContent\022\020\n\010cost_typ\030\001 \002(\r\022\020\n\010cost"
    "_val\030\002 \002(\r\022\020\n\010give_typ\030\003 \002(\r\022\020\n\010give_val"
    "\030\004 \002(\r\022\017\n\007quality\030\005 \002(\r\"\036\n\017C2GS_Market_B"
    "uy\022\013\n\003idx\030\001 \002(\r\"q\n\017GS2C_Market_Buy\022\031\n\021le"
    "ft_num_add_time\030\001 \002(\004\022\034\n\024content_refresh"
    "_time\030\002 \002(\004\022%\n\007content\030\003 \003(\0132\024.pb.Market"
    "BuyContent\"2\n\021C2GS_Market_Black\022\020\n\010table"
    "_id\030\001 \002(\r\022\013\n\003idx\030\002 \002(\r\"\?\n\021GS2C_Market_Bl"
    "ack\022\014\n\004time\030\001 \002(\004\022\034\n\006reward\030\002 \001(\0132\014.pb.S"
    "tReward\"-\n\031C2GS_Market_Ticket_Change\022\020\n\010"
    "table_id\030\001 \002(\r\"3\n\037C2GS_Market_Mystery_Sh"
    "op_Invest\022\020\n\010table_id\030\001 \002(\r\"6\n\"C2GS_Mark"
    "et_Mystery_Shop_Take_Item\022\020\n\010table_id\030\001 "
    "\002(\r\"]\n\"GS2C_Market_Mystery_Shop_Take_Ite"
    "m\022\020\n\010table_id\030\001 \002(\r\022\021\n\treward_id\030\002 \002(\r\022\022"
    "\n\nreward_cnt\030\003 \002(\r\"g\n\030GS2C_Market_Myster"
    "y_Shop\022\020\n\010progress\030\001 \003(\r\022\026\n\016take_item_ti"
    "me\030\002 \003(\004\022!\n\nsuits_part\030\003 \003(\0132\r.pb.PairVa"
    "lue\"\267\001\n\024GS2C_Market_All_Info\022(\n\007collect\030"
    "\001 \001(\0132\027.pb.GS2C_Market_Collect\022 \n\003buy\030\002 "
    "\001(\0132\023.pb.GS2C_Market_Buy\022$\n\005black\030\003 \001(\0132"
    "\025.pb.GS2C_Market_Black\022-\n\007mystery\030\004 \001(\0132"
    "\034.pb.GS2C_Market_Mystery_Shop\"/\n!C2GS_Ac"
    "tivity_Iron_Collect_Reward\022\n\n\002id\030\001 \002(\r\"\220"
    "\001\n%GS2C_Activity_Iron_Collect_Reward_Rsp"
    "\022\034\n\006reward\030\001 \003(\0132\014.pb.StReward\022$\n\003ret\030\002 "
    "\002(\0162\027.pb.IRON_COLLECT_RESULT\022#\n\004info\030\003 \003"
    "(\0132\025.pb.GS2C_Iron_Collect*o\n\023IRON_COLLEC"
    "T_RESULT\022\032\n\026COLLECT_REWARD_SUCCESS\020\001\022\033\n\027"
    "COLLECT_REWARD_HAS_TAKE\020\002\022\037\n\033COLLECT_REW"
    "ARD_OTHER_REASON\020\003", 1618);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Market.proto", &protobuf_RegisterTypes);
  C2GS_Market_Collect::default_instance_ = new C2GS_Market_Collect();
  GxDB_Market_Collect_Info::default_instance_ = new GxDB_Market_Collect_Info();
  GS2C_Iron_Collect::default_instance_ = new GS2C_Iron_Collect();
  GS2C_Market_Collect::default_instance_ = new GS2C_Market_Collect();
  MarketBuyContent::default_instance_ = new MarketBuyContent();
  C2GS_Market_Buy::default_instance_ = new C2GS_Market_Buy();
  GS2C_Market_Buy::default_instance_ = new GS2C_Market_Buy();
  C2GS_Market_Black::default_instance_ = new C2GS_Market_Black();
  GS2C_Market_Black::default_instance_ = new GS2C_Market_Black();
  C2GS_Market_Ticket_Change::default_instance_ = new C2GS_Market_Ticket_Change();
  C2GS_Market_Mystery_Shop_Invest::default_instance_ = new C2GS_Market_Mystery_Shop_Invest();
  C2GS_Market_Mystery_Shop_Take_Item::default_instance_ = new C2GS_Market_Mystery_Shop_Take_Item();
  GS2C_Market_Mystery_Shop_Take_Item::default_instance_ = new GS2C_Market_Mystery_Shop_Take_Item();
  GS2C_Market_Mystery_Shop::default_instance_ = new GS2C_Market_Mystery_Shop();
  GS2C_Market_All_Info::default_instance_ = new GS2C_Market_All_Info();
  C2GS_Activity_Iron_Collect_Reward::default_instance_ = new C2GS_Activity_Iron_Collect_Reward();
  GS2C_Activity_Iron_Collect_Reward_Rsp::default_instance_ = new GS2C_Activity_Iron_Collect_Reward_Rsp();
  C2GS_Market_Collect::default_instance_->InitAsDefaultInstance();
  GxDB_Market_Collect_Info::default_instance_->InitAsDefaultInstance();
  GS2C_Iron_Collect::default_instance_->InitAsDefaultInstance();
  GS2C_Market_Collect::default_instance_->InitAsDefaultInstance();
  MarketBuyContent::default_instance_->InitAsDefaultInstance();
  C2GS_Market_Buy::default_instance_->InitAsDefaultInstance();
  GS2C_Market_Buy::default_instance_->InitAsDefaultInstance();
  C2GS_Market_Black::default_instance_->InitAsDefaultInstance();
  GS2C_Market_Black::default_instance_->InitAsDefaultInstance();
  C2GS_Market_Ticket_Change::default_instance_->InitAsDefaultInstance();
  C2GS_Market_Mystery_Shop_Invest::default_instance_->InitAsDefaultInstance();
  C2GS_Market_Mystery_Shop_Take_Item::default_instance_->InitAsDefaultInstance();
  GS2C_Market_Mystery_Shop_Take_Item::default_instance_->InitAsDefaultInstance();
  GS2C_Market_Mystery_Shop::default_instance_->InitAsDefaultInstance();
  GS2C_Market_All_Info::default_instance_->InitAsDefaultInstance();
  C2GS_Activity_Iron_Collect_Reward::default_instance_->InitAsDefaultInstance();
  GS2C_Activity_Iron_Collect_Reward_Rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Market_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Market_2eproto {
  StaticDescriptorInitializer_Market_2eproto() {
    protobuf_AddDesc_Market_2eproto();
  }
} static_descriptor_initializer_Market_2eproto_;
const ::google::protobuf::EnumDescriptor* IRON_COLLECT_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IRON_COLLECT_RESULT_descriptor_;
}
bool IRON_COLLECT_RESULT_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Market_Collect::kTableIdFieldNumber;
const int C2GS_Market_Collect::kCollTimesFieldNumber;
#endif  // !_MSC_VER

C2GS_Market_Collect::C2GS_Market_Collect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Market_Collect::InitAsDefaultInstance() {
}

C2GS_Market_Collect::C2GS_Market_Collect(const C2GS_Market_Collect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Market_Collect::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = 0u;
  coll_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Market_Collect::~C2GS_Market_Collect() {
  SharedDtor();
}

void C2GS_Market_Collect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Market_Collect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Market_Collect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Market_Collect_descriptor_;
}

const C2GS_Market_Collect& C2GS_Market_Collect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

C2GS_Market_Collect* C2GS_Market_Collect::default_instance_ = NULL;

C2GS_Market_Collect* C2GS_Market_Collect::New() const {
  return new C2GS_Market_Collect;
}

void C2GS_Market_Collect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_id_ = 0u;
    coll_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Market_Collect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coll_times;
        break;
      }

      // required uint32 coll_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coll_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coll_times_)));
          set_has_coll_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Market_Collect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->table_id(), output);
  }

  // required uint32 coll_times = 2;
  if (has_coll_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->coll_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Market_Collect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->table_id(), target);
  }

  // required uint32 coll_times = 2;
  if (has_coll_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->coll_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Market_Collect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_id());
    }

    // required uint32 coll_times = 2;
    if (has_coll_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coll_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Market_Collect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Market_Collect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Market_Collect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Market_Collect::MergeFrom(const C2GS_Market_Collect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_coll_times()) {
      set_coll_times(from.coll_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Market_Collect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Market_Collect::CopyFrom(const C2GS_Market_Collect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Market_Collect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2GS_Market_Collect::Swap(C2GS_Market_Collect* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(coll_times_, other->coll_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Market_Collect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Market_Collect_descriptor_;
  metadata.reflection = C2GS_Market_Collect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_Market_Collect_Info::kTableIdFieldNumber;
const int GxDB_Market_Collect_Info::kTimesFieldNumber;
#endif  // !_MSC_VER

GxDB_Market_Collect_Info::GxDB_Market_Collect_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_Market_Collect_Info::InitAsDefaultInstance() {
}

GxDB_Market_Collect_Info::GxDB_Market_Collect_Info(const GxDB_Market_Collect_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_Market_Collect_Info::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = 0u;
  times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_Market_Collect_Info::~GxDB_Market_Collect_Info() {
  SharedDtor();
}

void GxDB_Market_Collect_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_Market_Collect_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_Market_Collect_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_Market_Collect_Info_descriptor_;
}

const GxDB_Market_Collect_Info& GxDB_Market_Collect_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

GxDB_Market_Collect_Info* GxDB_Market_Collect_Info::default_instance_ = NULL;

GxDB_Market_Collect_Info* GxDB_Market_Collect_Info::New() const {
  return new GxDB_Market_Collect_Info;
}

void GxDB_Market_Collect_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_id_ = 0u;
    times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_Market_Collect_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // optional uint32 times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_Market_Collect_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->table_id(), output);
  }

  // optional uint32 times = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_Market_Collect_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->table_id(), target);
  }

  // optional uint32 times = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_Market_Collect_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_id());
    }

    // optional uint32 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_Market_Collect_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_Market_Collect_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_Market_Collect_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_Market_Collect_Info::MergeFrom(const GxDB_Market_Collect_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_Market_Collect_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_Market_Collect_Info::CopyFrom(const GxDB_Market_Collect_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_Market_Collect_Info::IsInitialized() const {

  return true;
}

void GxDB_Market_Collect_Info::Swap(GxDB_Market_Collect_Info* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_Market_Collect_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_Market_Collect_Info_descriptor_;
  metadata.reflection = GxDB_Market_Collect_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Iron_Collect::kItemIdFieldNumber;
const int GS2C_Iron_Collect::kUseTimeFieldNumber;
const int GS2C_Iron_Collect::kLeftTimesFieldNumber;
#endif  // !_MSC_VER

GS2C_Iron_Collect::GS2C_Iron_Collect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Iron_Collect::InitAsDefaultInstance() {
}

GS2C_Iron_Collect::GS2C_Iron_Collect(const GS2C_Iron_Collect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Iron_Collect::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0u;
  use_time_ = GOOGLE_ULONGLONG(0);
  left_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Iron_Collect::~GS2C_Iron_Collect() {
  SharedDtor();
}

void GS2C_Iron_Collect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Iron_Collect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Iron_Collect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Iron_Collect_descriptor_;
}

const GS2C_Iron_Collect& GS2C_Iron_Collect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

GS2C_Iron_Collect* GS2C_Iron_Collect::default_instance_ = NULL;

GS2C_Iron_Collect* GS2C_Iron_Collect::New() const {
  return new GS2C_Iron_Collect;
}

void GS2C_Iron_Collect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0u;
    use_time_ = GOOGLE_ULONGLONG(0);
    left_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Iron_Collect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_use_time;
        break;
      }

      // optional uint64 use_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &use_time_)));
          set_has_use_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_left_times;
        break;
      }

      // optional uint32 left_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_times_)));
          set_has_left_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Iron_Collect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // optional uint64 use_time = 2;
  if (has_use_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->use_time(), output);
  }

  // optional uint32 left_times = 3;
  if (has_left_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->left_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Iron_Collect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // optional uint64 use_time = 2;
  if (has_use_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->use_time(), target);
  }

  // optional uint32 left_times = 3;
  if (has_left_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->left_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Iron_Collect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional uint64 use_time = 2;
    if (has_use_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->use_time());
    }

    // optional uint32 left_times = 3;
    if (has_left_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Iron_Collect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Iron_Collect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Iron_Collect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Iron_Collect::MergeFrom(const GS2C_Iron_Collect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_use_time()) {
      set_use_time(from.use_time());
    }
    if (from.has_left_times()) {
      set_left_times(from.left_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Iron_Collect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Iron_Collect::CopyFrom(const GS2C_Iron_Collect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Iron_Collect::IsInitialized() const {

  return true;
}

void GS2C_Iron_Collect::Swap(GS2C_Iron_Collect* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(use_time_, other->use_time_);
    std::swap(left_times_, other->left_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Iron_Collect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Iron_Collect_descriptor_;
  metadata.reflection = GS2C_Iron_Collect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Market_Collect::kValueFieldNumber;
const int GS2C_Market_Collect::kInfoFieldNumber;
const int GS2C_Market_Collect::kIronCollectInfoFieldNumber;
const int GS2C_Market_Collect::kRetFieldNumber;
#endif  // !_MSC_VER

GS2C_Market_Collect::GS2C_Market_Collect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Market_Collect::InitAsDefaultInstance() {
}

GS2C_Market_Collect::GS2C_Market_Collect(const GS2C_Market_Collect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Market_Collect::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Market_Collect::~GS2C_Market_Collect() {
  SharedDtor();
}

void GS2C_Market_Collect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Market_Collect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Market_Collect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Market_Collect_descriptor_;
}

const GS2C_Market_Collect& GS2C_Market_Collect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

GS2C_Market_Collect* GS2C_Market_Collect::default_instance_ = NULL;

GS2C_Market_Collect* GS2C_Market_Collect::New() const {
  return new GS2C_Market_Collect;
}

void GS2C_Market_Collect::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    ret_ = 0u;
  }
  value_.Clear();
  info_.Clear();
  iron_collect_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Market_Collect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.PairValue value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_value;
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .pb.GxDB_Market_Collect_Info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(26)) goto parse_iron_collect_info;
        break;
      }

      // repeated .pb.GS2C_Iron_Collect iron_collect_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iron_collect_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_iron_collect_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_iron_collect_info;
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Market_Collect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.PairValue value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->value(i), output);
  }

  // repeated .pb.GxDB_Market_Collect_Info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // repeated .pb.GS2C_Iron_Collect iron_collect_info = 3;
  for (int i = 0; i < this->iron_collect_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->iron_collect_info(i), output);
  }

  // optional uint32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Market_Collect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.PairValue value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->value(i), target);
  }

  // repeated .pb.GxDB_Market_Collect_Info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // repeated .pb.GS2C_Iron_Collect iron_collect_info = 3;
  for (int i = 0; i < this->iron_collect_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->iron_collect_info(i), target);
  }

  // optional uint32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Market_Collect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional uint32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated .pb.PairValue value = 1;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value(i));
  }

  // repeated .pb.GxDB_Market_Collect_Info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  // repeated .pb.GS2C_Iron_Collect iron_collect_info = 3;
  total_size += 1 * this->iron_collect_info_size();
  for (int i = 0; i < this->iron_collect_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->iron_collect_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Market_Collect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Market_Collect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Market_Collect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Market_Collect::MergeFrom(const GS2C_Market_Collect& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  info_.MergeFrom(from.info_);
  iron_collect_info_.MergeFrom(from.iron_collect_info_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Market_Collect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Market_Collect::CopyFrom(const GS2C_Market_Collect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Market_Collect::IsInitialized() const {

  return true;
}

void GS2C_Market_Collect::Swap(GS2C_Market_Collect* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    info_.Swap(&other->info_);
    iron_collect_info_.Swap(&other->iron_collect_info_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Market_Collect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Market_Collect_descriptor_;
  metadata.reflection = GS2C_Market_Collect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketBuyContent::kCostTypFieldNumber;
const int MarketBuyContent::kCostValFieldNumber;
const int MarketBuyContent::kGiveTypFieldNumber;
const int MarketBuyContent::kGiveValFieldNumber;
const int MarketBuyContent::kQualityFieldNumber;
#endif  // !_MSC_VER

MarketBuyContent::MarketBuyContent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketBuyContent::InitAsDefaultInstance() {
}

MarketBuyContent::MarketBuyContent(const MarketBuyContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketBuyContent::SharedCtor() {
  _cached_size_ = 0;
  cost_typ_ = 0u;
  cost_val_ = 0u;
  give_typ_ = 0u;
  give_val_ = 0u;
  quality_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketBuyContent::~MarketBuyContent() {
  SharedDtor();
}

void MarketBuyContent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketBuyContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketBuyContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketBuyContent_descriptor_;
}

const MarketBuyContent& MarketBuyContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

MarketBuyContent* MarketBuyContent::default_instance_ = NULL;

MarketBuyContent* MarketBuyContent::New() const {
  return new MarketBuyContent;
}

void MarketBuyContent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cost_typ_ = 0u;
    cost_val_ = 0u;
    give_typ_ = 0u;
    give_val_ = 0u;
    quality_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketBuyContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cost_typ = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_typ_)));
          set_has_cost_typ();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cost_val;
        break;
      }

      // required uint32 cost_val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_val_)));
          set_has_cost_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_give_typ;
        break;
      }

      // required uint32 give_typ = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_give_typ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &give_typ_)));
          set_has_give_typ();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_give_val;
        break;
      }

      // required uint32 give_val = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_give_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &give_val_)));
          set_has_give_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_quality;
        break;
      }

      // required uint32 quality = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketBuyContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cost_typ = 1;
  if (has_cost_typ()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cost_typ(), output);
  }

  // required uint32 cost_val = 2;
  if (has_cost_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cost_val(), output);
  }

  // required uint32 give_typ = 3;
  if (has_give_typ()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->give_typ(), output);
  }

  // required uint32 give_val = 4;
  if (has_give_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->give_val(), output);
  }

  // required uint32 quality = 5;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->quality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketBuyContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cost_typ = 1;
  if (has_cost_typ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cost_typ(), target);
  }

  // required uint32 cost_val = 2;
  if (has_cost_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cost_val(), target);
  }

  // required uint32 give_typ = 3;
  if (has_give_typ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->give_typ(), target);
  }

  // required uint32 give_val = 4;
  if (has_give_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->give_val(), target);
  }

  // required uint32 quality = 5;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->quality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketBuyContent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cost_typ = 1;
    if (has_cost_typ()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_typ());
    }

    // required uint32 cost_val = 2;
    if (has_cost_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_val());
    }

    // required uint32 give_typ = 3;
    if (has_give_typ()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->give_typ());
    }

    // required uint32 give_val = 4;
    if (has_give_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->give_val());
    }

    // required uint32 quality = 5;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketBuyContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketBuyContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketBuyContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketBuyContent::MergeFrom(const MarketBuyContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cost_typ()) {
      set_cost_typ(from.cost_typ());
    }
    if (from.has_cost_val()) {
      set_cost_val(from.cost_val());
    }
    if (from.has_give_typ()) {
      set_give_typ(from.give_typ());
    }
    if (from.has_give_val()) {
      set_give_val(from.give_val());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketBuyContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketBuyContent::CopyFrom(const MarketBuyContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketBuyContent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void MarketBuyContent::Swap(MarketBuyContent* other) {
  if (other != this) {
    std::swap(cost_typ_, other->cost_typ_);
    std::swap(cost_val_, other->cost_val_);
    std::swap(give_typ_, other->give_typ_);
    std::swap(give_val_, other->give_val_);
    std::swap(quality_, other->quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketBuyContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketBuyContent_descriptor_;
  metadata.reflection = MarketBuyContent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Market_Buy::kIdxFieldNumber;
#endif  // !_MSC_VER

C2GS_Market_Buy::C2GS_Market_Buy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Market_Buy::InitAsDefaultInstance() {
}

C2GS_Market_Buy::C2GS_Market_Buy(const C2GS_Market_Buy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Market_Buy::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Market_Buy::~C2GS_Market_Buy() {
  SharedDtor();
}

void C2GS_Market_Buy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Market_Buy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Market_Buy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Market_Buy_descriptor_;
}

const C2GS_Market_Buy& C2GS_Market_Buy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

C2GS_Market_Buy* C2GS_Market_Buy::default_instance_ = NULL;

C2GS_Market_Buy* C2GS_Market_Buy::New() const {
  return new C2GS_Market_Buy;
}

void C2GS_Market_Buy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Market_Buy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Market_Buy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Market_Buy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Market_Buy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Market_Buy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Market_Buy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Market_Buy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Market_Buy::MergeFrom(const C2GS_Market_Buy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Market_Buy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Market_Buy::CopyFrom(const C2GS_Market_Buy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Market_Buy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Market_Buy::Swap(C2GS_Market_Buy* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Market_Buy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Market_Buy_descriptor_;
  metadata.reflection = C2GS_Market_Buy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Market_Buy::kLeftNumAddTimeFieldNumber;
const int GS2C_Market_Buy::kContentRefreshTimeFieldNumber;
const int GS2C_Market_Buy::kContentFieldNumber;
#endif  // !_MSC_VER

GS2C_Market_Buy::GS2C_Market_Buy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Market_Buy::InitAsDefaultInstance() {
}

GS2C_Market_Buy::GS2C_Market_Buy(const GS2C_Market_Buy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Market_Buy::SharedCtor() {
  _cached_size_ = 0;
  left_num_add_time_ = GOOGLE_ULONGLONG(0);
  content_refresh_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Market_Buy::~GS2C_Market_Buy() {
  SharedDtor();
}

void GS2C_Market_Buy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Market_Buy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Market_Buy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Market_Buy_descriptor_;
}

const GS2C_Market_Buy& GS2C_Market_Buy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

GS2C_Market_Buy* GS2C_Market_Buy::default_instance_ = NULL;

GS2C_Market_Buy* GS2C_Market_Buy::New() const {
  return new GS2C_Market_Buy;
}

void GS2C_Market_Buy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    left_num_add_time_ = GOOGLE_ULONGLONG(0);
    content_refresh_time_ = GOOGLE_ULONGLONG(0);
  }
  content_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Market_Buy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 left_num_add_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &left_num_add_time_)));
          set_has_left_num_add_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_content_refresh_time;
        break;
      }

      // required uint64 content_refresh_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_content_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &content_refresh_time_)));
          set_has_content_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // repeated .pb.MarketBuyContent content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Market_Buy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 left_num_add_time = 1;
  if (has_left_num_add_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->left_num_add_time(), output);
  }

  // required uint64 content_refresh_time = 2;
  if (has_content_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->content_refresh_time(), output);
  }

  // repeated .pb.MarketBuyContent content = 3;
  for (int i = 0; i < this->content_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->content(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Market_Buy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 left_num_add_time = 1;
  if (has_left_num_add_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->left_num_add_time(), target);
  }

  // required uint64 content_refresh_time = 2;
  if (has_content_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->content_refresh_time(), target);
  }

  // repeated .pb.MarketBuyContent content = 3;
  for (int i = 0; i < this->content_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->content(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Market_Buy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 left_num_add_time = 1;
    if (has_left_num_add_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->left_num_add_time());
    }

    // required uint64 content_refresh_time = 2;
    if (has_content_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->content_refresh_time());
    }

  }
  // repeated .pb.MarketBuyContent content = 3;
  total_size += 1 * this->content_size();
  for (int i = 0; i < this->content_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->content(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Market_Buy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Market_Buy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Market_Buy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Market_Buy::MergeFrom(const GS2C_Market_Buy& from) {
  GOOGLE_CHECK_NE(&from, this);
  content_.MergeFrom(from.content_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left_num_add_time()) {
      set_left_num_add_time(from.left_num_add_time());
    }
    if (from.has_content_refresh_time()) {
      set_content_refresh_time(from.content_refresh_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Market_Buy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Market_Buy::CopyFrom(const GS2C_Market_Buy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Market_Buy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < content_size(); i++) {
    if (!this->content(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Market_Buy::Swap(GS2C_Market_Buy* other) {
  if (other != this) {
    std::swap(left_num_add_time_, other->left_num_add_time_);
    std::swap(content_refresh_time_, other->content_refresh_time_);
    content_.Swap(&other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Market_Buy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Market_Buy_descriptor_;
  metadata.reflection = GS2C_Market_Buy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Market_Black::kTableIdFieldNumber;
const int C2GS_Market_Black::kIdxFieldNumber;
#endif  // !_MSC_VER

C2GS_Market_Black::C2GS_Market_Black()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Market_Black::InitAsDefaultInstance() {
}

C2GS_Market_Black::C2GS_Market_Black(const C2GS_Market_Black& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Market_Black::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = 0u;
  idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Market_Black::~C2GS_Market_Black() {
  SharedDtor();
}

void C2GS_Market_Black::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Market_Black::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Market_Black::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Market_Black_descriptor_;
}

const C2GS_Market_Black& C2GS_Market_Black::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

C2GS_Market_Black* C2GS_Market_Black::default_instance_ = NULL;

C2GS_Market_Black* C2GS_Market_Black::New() const {
  return new C2GS_Market_Black;
}

void C2GS_Market_Black::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_id_ = 0u;
    idx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Market_Black::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_idx;
        break;
      }

      // required uint32 idx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Market_Black::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->table_id(), output);
  }

  // required uint32 idx = 2;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Market_Black::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->table_id(), target);
  }

  // required uint32 idx = 2;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Market_Black::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_id());
    }

    // required uint32 idx = 2;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Market_Black::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Market_Black* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Market_Black*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Market_Black::MergeFrom(const C2GS_Market_Black& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_idx()) {
      set_idx(from.idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Market_Black::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Market_Black::CopyFrom(const C2GS_Market_Black& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Market_Black::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2GS_Market_Black::Swap(C2GS_Market_Black* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(idx_, other->idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Market_Black::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Market_Black_descriptor_;
  metadata.reflection = C2GS_Market_Black_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Market_Black::kTimeFieldNumber;
const int GS2C_Market_Black::kRewardFieldNumber;
#endif  // !_MSC_VER

GS2C_Market_Black::GS2C_Market_Black()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Market_Black::InitAsDefaultInstance() {
  reward_ = const_cast< ::pb::StReward*>(&::pb::StReward::default_instance());
}

GS2C_Market_Black::GS2C_Market_Black(const GS2C_Market_Black& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Market_Black::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Market_Black::~GS2C_Market_Black() {
  SharedDtor();
}

void GS2C_Market_Black::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void GS2C_Market_Black::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Market_Black::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Market_Black_descriptor_;
}

const GS2C_Market_Black& GS2C_Market_Black::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

GS2C_Market_Black* GS2C_Market_Black::default_instance_ = NULL;

GS2C_Market_Black* GS2C_Market_Black::New() const {
  return new GS2C_Market_Black;
}

void GS2C_Market_Black::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_ULONGLONG(0);
    if (has_reward()) {
      if (reward_ != NULL) reward_->::pb::StReward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Market_Black::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // optional .pb.StReward reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Market_Black::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // optional .pb.StReward reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Market_Black::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // optional .pb.StReward reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Market_Black::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional .pb.StReward reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Market_Black::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Market_Black* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Market_Black*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Market_Black::MergeFrom(const GS2C_Market_Black& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_reward()) {
      mutable_reward()->::pb::StReward::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Market_Black::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Market_Black::CopyFrom(const GS2C_Market_Black& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Market_Black::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void GS2C_Market_Black::Swap(GS2C_Market_Black* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Market_Black::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Market_Black_descriptor_;
  metadata.reflection = GS2C_Market_Black_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Market_Ticket_Change::kTableIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Market_Ticket_Change::C2GS_Market_Ticket_Change()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Market_Ticket_Change::InitAsDefaultInstance() {
}

C2GS_Market_Ticket_Change::C2GS_Market_Ticket_Change(const C2GS_Market_Ticket_Change& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Market_Ticket_Change::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Market_Ticket_Change::~C2GS_Market_Ticket_Change() {
  SharedDtor();
}

void C2GS_Market_Ticket_Change::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Market_Ticket_Change::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Market_Ticket_Change::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Market_Ticket_Change_descriptor_;
}

const C2GS_Market_Ticket_Change& C2GS_Market_Ticket_Change::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

C2GS_Market_Ticket_Change* C2GS_Market_Ticket_Change::default_instance_ = NULL;

C2GS_Market_Ticket_Change* C2GS_Market_Ticket_Change::New() const {
  return new C2GS_Market_Ticket_Change;
}

void C2GS_Market_Ticket_Change::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Market_Ticket_Change::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Market_Ticket_Change::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->table_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Market_Ticket_Change::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->table_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Market_Ticket_Change::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Market_Ticket_Change::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Market_Ticket_Change* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Market_Ticket_Change*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Market_Ticket_Change::MergeFrom(const C2GS_Market_Ticket_Change& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Market_Ticket_Change::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Market_Ticket_Change::CopyFrom(const C2GS_Market_Ticket_Change& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Market_Ticket_Change::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Market_Ticket_Change::Swap(C2GS_Market_Ticket_Change* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Market_Ticket_Change::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Market_Ticket_Change_descriptor_;
  metadata.reflection = C2GS_Market_Ticket_Change_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Market_Mystery_Shop_Invest::kTableIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Market_Mystery_Shop_Invest::C2GS_Market_Mystery_Shop_Invest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Market_Mystery_Shop_Invest::InitAsDefaultInstance() {
}

C2GS_Market_Mystery_Shop_Invest::C2GS_Market_Mystery_Shop_Invest(const C2GS_Market_Mystery_Shop_Invest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Market_Mystery_Shop_Invest::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Market_Mystery_Shop_Invest::~C2GS_Market_Mystery_Shop_Invest() {
  SharedDtor();
}

void C2GS_Market_Mystery_Shop_Invest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Market_Mystery_Shop_Invest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Market_Mystery_Shop_Invest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Market_Mystery_Shop_Invest_descriptor_;
}

const C2GS_Market_Mystery_Shop_Invest& C2GS_Market_Mystery_Shop_Invest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

C2GS_Market_Mystery_Shop_Invest* C2GS_Market_Mystery_Shop_Invest::default_instance_ = NULL;

C2GS_Market_Mystery_Shop_Invest* C2GS_Market_Mystery_Shop_Invest::New() const {
  return new C2GS_Market_Mystery_Shop_Invest;
}

void C2GS_Market_Mystery_Shop_Invest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Market_Mystery_Shop_Invest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Market_Mystery_Shop_Invest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->table_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Market_Mystery_Shop_Invest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->table_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Market_Mystery_Shop_Invest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Market_Mystery_Shop_Invest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Market_Mystery_Shop_Invest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Market_Mystery_Shop_Invest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Market_Mystery_Shop_Invest::MergeFrom(const C2GS_Market_Mystery_Shop_Invest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Market_Mystery_Shop_Invest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Market_Mystery_Shop_Invest::CopyFrom(const C2GS_Market_Mystery_Shop_Invest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Market_Mystery_Shop_Invest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Market_Mystery_Shop_Invest::Swap(C2GS_Market_Mystery_Shop_Invest* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Market_Mystery_Shop_Invest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Market_Mystery_Shop_Invest_descriptor_;
  metadata.reflection = C2GS_Market_Mystery_Shop_Invest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Market_Mystery_Shop_Take_Item::kTableIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Market_Mystery_Shop_Take_Item::C2GS_Market_Mystery_Shop_Take_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Market_Mystery_Shop_Take_Item::InitAsDefaultInstance() {
}

C2GS_Market_Mystery_Shop_Take_Item::C2GS_Market_Mystery_Shop_Take_Item(const C2GS_Market_Mystery_Shop_Take_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Market_Mystery_Shop_Take_Item::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Market_Mystery_Shop_Take_Item::~C2GS_Market_Mystery_Shop_Take_Item() {
  SharedDtor();
}

void C2GS_Market_Mystery_Shop_Take_Item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Market_Mystery_Shop_Take_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Market_Mystery_Shop_Take_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Market_Mystery_Shop_Take_Item_descriptor_;
}

const C2GS_Market_Mystery_Shop_Take_Item& C2GS_Market_Mystery_Shop_Take_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

C2GS_Market_Mystery_Shop_Take_Item* C2GS_Market_Mystery_Shop_Take_Item::default_instance_ = NULL;

C2GS_Market_Mystery_Shop_Take_Item* C2GS_Market_Mystery_Shop_Take_Item::New() const {
  return new C2GS_Market_Mystery_Shop_Take_Item;
}

void C2GS_Market_Mystery_Shop_Take_Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Market_Mystery_Shop_Take_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Market_Mystery_Shop_Take_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->table_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Market_Mystery_Shop_Take_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->table_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Market_Mystery_Shop_Take_Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Market_Mystery_Shop_Take_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Market_Mystery_Shop_Take_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Market_Mystery_Shop_Take_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Market_Mystery_Shop_Take_Item::MergeFrom(const C2GS_Market_Mystery_Shop_Take_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Market_Mystery_Shop_Take_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Market_Mystery_Shop_Take_Item::CopyFrom(const C2GS_Market_Mystery_Shop_Take_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Market_Mystery_Shop_Take_Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Market_Mystery_Shop_Take_Item::Swap(C2GS_Market_Mystery_Shop_Take_Item* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Market_Mystery_Shop_Take_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Market_Mystery_Shop_Take_Item_descriptor_;
  metadata.reflection = C2GS_Market_Mystery_Shop_Take_Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Market_Mystery_Shop_Take_Item::kTableIdFieldNumber;
const int GS2C_Market_Mystery_Shop_Take_Item::kRewardIdFieldNumber;
const int GS2C_Market_Mystery_Shop_Take_Item::kRewardCntFieldNumber;
#endif  // !_MSC_VER

GS2C_Market_Mystery_Shop_Take_Item::GS2C_Market_Mystery_Shop_Take_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Market_Mystery_Shop_Take_Item::InitAsDefaultInstance() {
}

GS2C_Market_Mystery_Shop_Take_Item::GS2C_Market_Mystery_Shop_Take_Item(const GS2C_Market_Mystery_Shop_Take_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Market_Mystery_Shop_Take_Item::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = 0u;
  reward_id_ = 0u;
  reward_cnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Market_Mystery_Shop_Take_Item::~GS2C_Market_Mystery_Shop_Take_Item() {
  SharedDtor();
}

void GS2C_Market_Mystery_Shop_Take_Item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Market_Mystery_Shop_Take_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Market_Mystery_Shop_Take_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Market_Mystery_Shop_Take_Item_descriptor_;
}

const GS2C_Market_Mystery_Shop_Take_Item& GS2C_Market_Mystery_Shop_Take_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

GS2C_Market_Mystery_Shop_Take_Item* GS2C_Market_Mystery_Shop_Take_Item::default_instance_ = NULL;

GS2C_Market_Mystery_Shop_Take_Item* GS2C_Market_Mystery_Shop_Take_Item::New() const {
  return new GS2C_Market_Mystery_Shop_Take_Item;
}

void GS2C_Market_Mystery_Shop_Take_Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_id_ = 0u;
    reward_id_ = 0u;
    reward_cnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Market_Mystery_Shop_Take_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward_id;
        break;
      }

      // required uint32 reward_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reward_cnt;
        break;
      }

      // required uint32 reward_cnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_cnt_)));
          set_has_reward_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Market_Mystery_Shop_Take_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->table_id(), output);
  }

  // required uint32 reward_id = 2;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reward_id(), output);
  }

  // required uint32 reward_cnt = 3;
  if (has_reward_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reward_cnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Market_Mystery_Shop_Take_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->table_id(), target);
  }

  // required uint32 reward_id = 2;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reward_id(), target);
  }

  // required uint32 reward_cnt = 3;
  if (has_reward_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reward_cnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Market_Mystery_Shop_Take_Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_id());
    }

    // required uint32 reward_id = 2;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_id());
    }

    // required uint32 reward_cnt = 3;
    if (has_reward_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_cnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Market_Mystery_Shop_Take_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Market_Mystery_Shop_Take_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Market_Mystery_Shop_Take_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Market_Mystery_Shop_Take_Item::MergeFrom(const GS2C_Market_Mystery_Shop_Take_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_reward_cnt()) {
      set_reward_cnt(from.reward_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Market_Mystery_Shop_Take_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Market_Mystery_Shop_Take_Item::CopyFrom(const GS2C_Market_Mystery_Shop_Take_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Market_Mystery_Shop_Take_Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GS2C_Market_Mystery_Shop_Take_Item::Swap(GS2C_Market_Mystery_Shop_Take_Item* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(reward_id_, other->reward_id_);
    std::swap(reward_cnt_, other->reward_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Market_Mystery_Shop_Take_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Market_Mystery_Shop_Take_Item_descriptor_;
  metadata.reflection = GS2C_Market_Mystery_Shop_Take_Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Market_Mystery_Shop::kProgressFieldNumber;
const int GS2C_Market_Mystery_Shop::kTakeItemTimeFieldNumber;
const int GS2C_Market_Mystery_Shop::kSuitsPartFieldNumber;
#endif  // !_MSC_VER

GS2C_Market_Mystery_Shop::GS2C_Market_Mystery_Shop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Market_Mystery_Shop::InitAsDefaultInstance() {
}

GS2C_Market_Mystery_Shop::GS2C_Market_Mystery_Shop(const GS2C_Market_Mystery_Shop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Market_Mystery_Shop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Market_Mystery_Shop::~GS2C_Market_Mystery_Shop() {
  SharedDtor();
}

void GS2C_Market_Mystery_Shop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Market_Mystery_Shop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Market_Mystery_Shop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Market_Mystery_Shop_descriptor_;
}

const GS2C_Market_Mystery_Shop& GS2C_Market_Mystery_Shop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

GS2C_Market_Mystery_Shop* GS2C_Market_Mystery_Shop::default_instance_ = NULL;

GS2C_Market_Mystery_Shop* GS2C_Market_Mystery_Shop::New() const {
  return new GS2C_Market_Mystery_Shop;
}

void GS2C_Market_Mystery_Shop::Clear() {
  progress_.Clear();
  take_item_time_.Clear();
  suits_part_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Market_Mystery_Shop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 progress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_progress())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_progress())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_progress;
        if (input->ExpectTag(16)) goto parse_take_item_time;
        break;
      }

      // repeated uint64 take_item_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_take_item_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_take_item_time())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_take_item_time())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_take_item_time;
        if (input->ExpectTag(26)) goto parse_suits_part;
        break;
      }

      // repeated .pb.PairValue suits_part = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suits_part:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_suits_part()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_suits_part;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Market_Mystery_Shop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 progress = 1;
  for (int i = 0; i < this->progress_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->progress(i), output);
  }

  // repeated uint64 take_item_time = 2;
  for (int i = 0; i < this->take_item_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->take_item_time(i), output);
  }

  // repeated .pb.PairValue suits_part = 3;
  for (int i = 0; i < this->suits_part_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->suits_part(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Market_Mystery_Shop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 progress = 1;
  for (int i = 0; i < this->progress_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->progress(i), target);
  }

  // repeated uint64 take_item_time = 2;
  for (int i = 0; i < this->take_item_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->take_item_time(i), target);
  }

  // repeated .pb.PairValue suits_part = 3;
  for (int i = 0; i < this->suits_part_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->suits_part(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Market_Mystery_Shop::ByteSize() const {
  int total_size = 0;

  // repeated uint32 progress = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->progress_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->progress(i));
    }
    total_size += 1 * this->progress_size() + data_size;
  }

  // repeated uint64 take_item_time = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->take_item_time_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->take_item_time(i));
    }
    total_size += 1 * this->take_item_time_size() + data_size;
  }

  // repeated .pb.PairValue suits_part = 3;
  total_size += 1 * this->suits_part_size();
  for (int i = 0; i < this->suits_part_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->suits_part(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Market_Mystery_Shop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Market_Mystery_Shop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Market_Mystery_Shop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Market_Mystery_Shop::MergeFrom(const GS2C_Market_Mystery_Shop& from) {
  GOOGLE_CHECK_NE(&from, this);
  progress_.MergeFrom(from.progress_);
  take_item_time_.MergeFrom(from.take_item_time_);
  suits_part_.MergeFrom(from.suits_part_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Market_Mystery_Shop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Market_Mystery_Shop::CopyFrom(const GS2C_Market_Mystery_Shop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Market_Mystery_Shop::IsInitialized() const {

  return true;
}

void GS2C_Market_Mystery_Shop::Swap(GS2C_Market_Mystery_Shop* other) {
  if (other != this) {
    progress_.Swap(&other->progress_);
    take_item_time_.Swap(&other->take_item_time_);
    suits_part_.Swap(&other->suits_part_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Market_Mystery_Shop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Market_Mystery_Shop_descriptor_;
  metadata.reflection = GS2C_Market_Mystery_Shop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Market_All_Info::kCollectFieldNumber;
const int GS2C_Market_All_Info::kBuyFieldNumber;
const int GS2C_Market_All_Info::kBlackFieldNumber;
const int GS2C_Market_All_Info::kMysteryFieldNumber;
#endif  // !_MSC_VER

GS2C_Market_All_Info::GS2C_Market_All_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Market_All_Info::InitAsDefaultInstance() {
  collect_ = const_cast< ::pb::GS2C_Market_Collect*>(&::pb::GS2C_Market_Collect::default_instance());
  buy_ = const_cast< ::pb::GS2C_Market_Buy*>(&::pb::GS2C_Market_Buy::default_instance());
  black_ = const_cast< ::pb::GS2C_Market_Black*>(&::pb::GS2C_Market_Black::default_instance());
  mystery_ = const_cast< ::pb::GS2C_Market_Mystery_Shop*>(&::pb::GS2C_Market_Mystery_Shop::default_instance());
}

GS2C_Market_All_Info::GS2C_Market_All_Info(const GS2C_Market_All_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Market_All_Info::SharedCtor() {
  _cached_size_ = 0;
  collect_ = NULL;
  buy_ = NULL;
  black_ = NULL;
  mystery_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Market_All_Info::~GS2C_Market_All_Info() {
  SharedDtor();
}

void GS2C_Market_All_Info::SharedDtor() {
  if (this != default_instance_) {
    delete collect_;
    delete buy_;
    delete black_;
    delete mystery_;
  }
}

void GS2C_Market_All_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Market_All_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Market_All_Info_descriptor_;
}

const GS2C_Market_All_Info& GS2C_Market_All_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

GS2C_Market_All_Info* GS2C_Market_All_Info::default_instance_ = NULL;

GS2C_Market_All_Info* GS2C_Market_All_Info::New() const {
  return new GS2C_Market_All_Info;
}

void GS2C_Market_All_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_collect()) {
      if (collect_ != NULL) collect_->::pb::GS2C_Market_Collect::Clear();
    }
    if (has_buy()) {
      if (buy_ != NULL) buy_->::pb::GS2C_Market_Buy::Clear();
    }
    if (has_black()) {
      if (black_ != NULL) black_->::pb::GS2C_Market_Black::Clear();
    }
    if (has_mystery()) {
      if (mystery_ != NULL) mystery_->::pb::GS2C_Market_Mystery_Shop::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Market_All_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.GS2C_Market_Collect collect = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_collect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_buy;
        break;
      }

      // optional .pb.GS2C_Market_Buy buy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_black;
        break;
      }

      // optional .pb.GS2C_Market_Black black = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_black:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_black()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mystery;
        break;
      }

      // optional .pb.GS2C_Market_Mystery_Shop mystery = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mystery:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mystery()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Market_All_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.GS2C_Market_Collect collect = 1;
  if (has_collect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->collect(), output);
  }

  // optional .pb.GS2C_Market_Buy buy = 2;
  if (has_buy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->buy(), output);
  }

  // optional .pb.GS2C_Market_Black black = 3;
  if (has_black()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->black(), output);
  }

  // optional .pb.GS2C_Market_Mystery_Shop mystery = 4;
  if (has_mystery()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mystery(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Market_All_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.GS2C_Market_Collect collect = 1;
  if (has_collect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->collect(), target);
  }

  // optional .pb.GS2C_Market_Buy buy = 2;
  if (has_buy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->buy(), target);
  }

  // optional .pb.GS2C_Market_Black black = 3;
  if (has_black()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->black(), target);
  }

  // optional .pb.GS2C_Market_Mystery_Shop mystery = 4;
  if (has_mystery()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mystery(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Market_All_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.GS2C_Market_Collect collect = 1;
    if (has_collect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->collect());
    }

    // optional .pb.GS2C_Market_Buy buy = 2;
    if (has_buy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buy());
    }

    // optional .pb.GS2C_Market_Black black = 3;
    if (has_black()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->black());
    }

    // optional .pb.GS2C_Market_Mystery_Shop mystery = 4;
    if (has_mystery()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mystery());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Market_All_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Market_All_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Market_All_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Market_All_Info::MergeFrom(const GS2C_Market_All_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_collect()) {
      mutable_collect()->::pb::GS2C_Market_Collect::MergeFrom(from.collect());
    }
    if (from.has_buy()) {
      mutable_buy()->::pb::GS2C_Market_Buy::MergeFrom(from.buy());
    }
    if (from.has_black()) {
      mutable_black()->::pb::GS2C_Market_Black::MergeFrom(from.black());
    }
    if (from.has_mystery()) {
      mutable_mystery()->::pb::GS2C_Market_Mystery_Shop::MergeFrom(from.mystery());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Market_All_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Market_All_Info::CopyFrom(const GS2C_Market_All_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Market_All_Info::IsInitialized() const {

  if (has_buy()) {
    if (!this->buy().IsInitialized()) return false;
  }
  if (has_black()) {
    if (!this->black().IsInitialized()) return false;
  }
  return true;
}

void GS2C_Market_All_Info::Swap(GS2C_Market_All_Info* other) {
  if (other != this) {
    std::swap(collect_, other->collect_);
    std::swap(buy_, other->buy_);
    std::swap(black_, other->black_);
    std::swap(mystery_, other->mystery_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Market_All_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Market_All_Info_descriptor_;
  metadata.reflection = GS2C_Market_All_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Activity_Iron_Collect_Reward::kIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Activity_Iron_Collect_Reward::C2GS_Activity_Iron_Collect_Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Activity_Iron_Collect_Reward::InitAsDefaultInstance() {
}

C2GS_Activity_Iron_Collect_Reward::C2GS_Activity_Iron_Collect_Reward(const C2GS_Activity_Iron_Collect_Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Activity_Iron_Collect_Reward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Activity_Iron_Collect_Reward::~C2GS_Activity_Iron_Collect_Reward() {
  SharedDtor();
}

void C2GS_Activity_Iron_Collect_Reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Activity_Iron_Collect_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Activity_Iron_Collect_Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Activity_Iron_Collect_Reward_descriptor_;
}

const C2GS_Activity_Iron_Collect_Reward& C2GS_Activity_Iron_Collect_Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

C2GS_Activity_Iron_Collect_Reward* C2GS_Activity_Iron_Collect_Reward::default_instance_ = NULL;

C2GS_Activity_Iron_Collect_Reward* C2GS_Activity_Iron_Collect_Reward::New() const {
  return new C2GS_Activity_Iron_Collect_Reward;
}

void C2GS_Activity_Iron_Collect_Reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Activity_Iron_Collect_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Activity_Iron_Collect_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Activity_Iron_Collect_Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Activity_Iron_Collect_Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Activity_Iron_Collect_Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Activity_Iron_Collect_Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Activity_Iron_Collect_Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Activity_Iron_Collect_Reward::MergeFrom(const C2GS_Activity_Iron_Collect_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Activity_Iron_Collect_Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Activity_Iron_Collect_Reward::CopyFrom(const C2GS_Activity_Iron_Collect_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Activity_Iron_Collect_Reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Activity_Iron_Collect_Reward::Swap(C2GS_Activity_Iron_Collect_Reward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Activity_Iron_Collect_Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Activity_Iron_Collect_Reward_descriptor_;
  metadata.reflection = C2GS_Activity_Iron_Collect_Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Activity_Iron_Collect_Reward_Rsp::kRewardFieldNumber;
const int GS2C_Activity_Iron_Collect_Reward_Rsp::kRetFieldNumber;
const int GS2C_Activity_Iron_Collect_Reward_Rsp::kInfoFieldNumber;
#endif  // !_MSC_VER

GS2C_Activity_Iron_Collect_Reward_Rsp::GS2C_Activity_Iron_Collect_Reward_Rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Activity_Iron_Collect_Reward_Rsp::InitAsDefaultInstance() {
}

GS2C_Activity_Iron_Collect_Reward_Rsp::GS2C_Activity_Iron_Collect_Reward_Rsp(const GS2C_Activity_Iron_Collect_Reward_Rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Activity_Iron_Collect_Reward_Rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Activity_Iron_Collect_Reward_Rsp::~GS2C_Activity_Iron_Collect_Reward_Rsp() {
  SharedDtor();
}

void GS2C_Activity_Iron_Collect_Reward_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Activity_Iron_Collect_Reward_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Activity_Iron_Collect_Reward_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Activity_Iron_Collect_Reward_Rsp_descriptor_;
}

const GS2C_Activity_Iron_Collect_Reward_Rsp& GS2C_Activity_Iron_Collect_Reward_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Market_2eproto();
  return *default_instance_;
}

GS2C_Activity_Iron_Collect_Reward_Rsp* GS2C_Activity_Iron_Collect_Reward_Rsp::default_instance_ = NULL;

GS2C_Activity_Iron_Collect_Reward_Rsp* GS2C_Activity_Iron_Collect_Reward_Rsp::New() const {
  return new GS2C_Activity_Iron_Collect_Reward_Rsp;
}

void GS2C_Activity_Iron_Collect_Reward_Rsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    ret_ = 1;
  }
  reward_.Clear();
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Activity_Iron_Collect_Reward_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.StReward reward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_reward;
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required .pb.IRON_COLLECT_RESULT ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::IRON_COLLECT_RESULT_IsValid(value)) {
            set_ret(static_cast< ::pb::IRON_COLLECT_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .pb.GS2C_Iron_Collect info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Activity_Iron_Collect_Reward_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.StReward reward = 1;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward(i), output);
  }

  // required .pb.IRON_COLLECT_RESULT ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  // repeated .pb.GS2C_Iron_Collect info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Activity_Iron_Collect_Reward_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.StReward reward = 1;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward(i), target);
  }

  // required .pb.IRON_COLLECT_RESULT ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  // repeated .pb.GS2C_Iron_Collect info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Activity_Iron_Collect_Reward_Rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .pb.IRON_COLLECT_RESULT ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  // repeated .pb.StReward reward = 1;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  // repeated .pb.GS2C_Iron_Collect info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Activity_Iron_Collect_Reward_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Activity_Iron_Collect_Reward_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Activity_Iron_Collect_Reward_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Activity_Iron_Collect_Reward_Rsp::MergeFrom(const GS2C_Activity_Iron_Collect_Reward_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Activity_Iron_Collect_Reward_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Activity_Iron_Collect_Reward_Rsp::CopyFrom(const GS2C_Activity_Iron_Collect_Reward_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Activity_Iron_Collect_Reward_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < reward_size(); i++) {
    if (!this->reward(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Activity_Iron_Collect_Reward_Rsp::Swap(GS2C_Activity_Iron_Collect_Reward_Rsp* other) {
  if (other != this) {
    reward_.Swap(&other->reward_);
    std::swap(ret_, other->ret_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Activity_Iron_Collect_Reward_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Activity_Iron_Collect_Reward_Rsp_descriptor_;
  metadata.reflection = GS2C_Activity_Iron_Collect_Reward_Rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
