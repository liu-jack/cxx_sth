// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Stage.proto

#ifndef PROTOBUF_Stage_2eproto__INCLUDED
#define PROTOBUF_Stage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommomDef.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Stage_2eproto();
void protobuf_AssignDesc_Stage_2eproto();
void protobuf_ShutdownFile_Stage_2eproto();

class GS2C_StageLevel;
class GS2C_AllStageInfo;
class C2GS_BattleData;
class GS2C_Reward;
class GS2C_BattleResult;

// ===================================================================

class GS2C_StageLevel : public ::google::protobuf::Message {
 public:
  GS2C_StageLevel();
  virtual ~GS2C_StageLevel();

  GS2C_StageLevel(const GS2C_StageLevel& from);

  inline GS2C_StageLevel& operator=(const GS2C_StageLevel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_StageLevel& default_instance();

  void Swap(GS2C_StageLevel* other);

  // implements Message ----------------------------------------------

  GS2C_StageLevel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_StageLevel& from);
  void MergeFrom(const GS2C_StageLevel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 level_id = 1;
  inline bool has_level_id() const;
  inline void clear_level_id();
  static const int kLevelIdFieldNumber = 1;
  inline ::google::protobuf::uint32 level_id() const;
  inline void set_level_id(::google::protobuf::uint32 value);

  // optional uint32 fight_count = 2;
  inline bool has_fight_count() const;
  inline void clear_fight_count();
  static const int kFightCountFieldNumber = 2;
  inline ::google::protobuf::uint32 fight_count() const;
  inline void set_fight_count(::google::protobuf::uint32 value);

  // optional bool is_clearance = 3;
  inline bool has_is_clearance() const;
  inline void clear_is_clearance();
  static const int kIsClearanceFieldNumber = 3;
  inline bool is_clearance() const;
  inline void set_is_clearance(bool value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_StageLevel)
 private:
  inline void set_has_level_id();
  inline void clear_has_level_id();
  inline void set_has_fight_count();
  inline void clear_has_fight_count();
  inline void set_has_is_clearance();
  inline void clear_has_is_clearance();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 level_id_;
  ::google::protobuf::uint32 fight_count_;
  bool is_clearance_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Stage_2eproto();
  friend void protobuf_AssignDesc_Stage_2eproto();
  friend void protobuf_ShutdownFile_Stage_2eproto();

  void InitAsDefaultInstance();
  static GS2C_StageLevel* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_AllStageInfo : public ::google::protobuf::Message {
 public:
  GS2C_AllStageInfo();
  virtual ~GS2C_AllStageInfo();

  GS2C_AllStageInfo(const GS2C_AllStageInfo& from);

  inline GS2C_AllStageInfo& operator=(const GS2C_AllStageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_AllStageInfo& default_instance();

  void Swap(GS2C_AllStageInfo* other);

  // implements Message ----------------------------------------------

  GS2C_AllStageInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_AllStageInfo& from);
  void MergeFrom(const GS2C_AllStageInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.GS2C_StageLevel stage_level_infos = 1;
  inline int stage_level_infos_size() const;
  inline void clear_stage_level_infos();
  static const int kStageLevelInfosFieldNumber = 1;
  inline const ::pb::GS2C_StageLevel& stage_level_infos(int index) const;
  inline ::pb::GS2C_StageLevel* mutable_stage_level_infos(int index);
  inline ::pb::GS2C_StageLevel* add_stage_level_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_StageLevel >&
      stage_level_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_StageLevel >*
      mutable_stage_level_infos();

  // @@protoc_insertion_point(class_scope:pb.GS2C_AllStageInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::GS2C_StageLevel > stage_level_infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Stage_2eproto();
  friend void protobuf_AssignDesc_Stage_2eproto();
  friend void protobuf_ShutdownFile_Stage_2eproto();

  void InitAsDefaultInstance();
  static GS2C_AllStageInfo* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_BattleData : public ::google::protobuf::Message {
 public:
  C2GS_BattleData();
  virtual ~C2GS_BattleData();

  C2GS_BattleData(const C2GS_BattleData& from);

  inline C2GS_BattleData& operator=(const C2GS_BattleData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_BattleData& default_instance();

  void Swap(C2GS_BattleData* other);

  // implements Message ----------------------------------------------

  C2GS_BattleData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_BattleData& from);
  void MergeFrom(const C2GS_BattleData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 stage_level_id = 1;
  inline bool has_stage_level_id() const;
  inline void clear_stage_level_id();
  static const int kStageLevelIdFieldNumber = 1;
  inline ::google::protobuf::uint32 stage_level_id() const;
  inline void set_stage_level_id(::google::protobuf::uint32 value);

  // optional int32 pre_battle_id = 2;
  inline bool has_pre_battle_id() const;
  inline void clear_pre_battle_id();
  static const int kPreBattleIdFieldNumber = 2;
  inline ::google::protobuf::int32 pre_battle_id() const;
  inline void set_pre_battle_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_BattleData)
 private:
  inline void set_has_stage_level_id();
  inline void clear_has_stage_level_id();
  inline void set_has_pre_battle_id();
  inline void clear_has_pre_battle_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 stage_level_id_;
  ::google::protobuf::int32 pre_battle_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Stage_2eproto();
  friend void protobuf_AssignDesc_Stage_2eproto();
  friend void protobuf_ShutdownFile_Stage_2eproto();

  void InitAsDefaultInstance();
  static C2GS_BattleData* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Reward : public ::google::protobuf::Message {
 public:
  GS2C_Reward();
  virtual ~GS2C_Reward();

  GS2C_Reward(const GS2C_Reward& from);

  inline GS2C_Reward& operator=(const GS2C_Reward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Reward& default_instance();

  void Swap(GS2C_Reward* other);

  // implements Message ----------------------------------------------

  GS2C_Reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Reward& from);
  void MergeFrom(const GS2C_Reward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.PairValue curency_type_count = 1;
  inline int curency_type_count_size() const;
  inline void clear_curency_type_count();
  static const int kCurencyTypeCountFieldNumber = 1;
  inline const ::pb::PairValue& curency_type_count(int index) const;
  inline ::pb::PairValue* mutable_curency_type_count(int index);
  inline ::pb::PairValue* add_curency_type_count();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::PairValue >&
      curency_type_count() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::PairValue >*
      mutable_curency_type_count();

  // repeated .pb.PairValue item_id_count = 2;
  inline int item_id_count_size() const;
  inline void clear_item_id_count();
  static const int kItemIdCountFieldNumber = 2;
  inline const ::pb::PairValue& item_id_count(int index) const;
  inline ::pb::PairValue* mutable_item_id_count(int index);
  inline ::pb::PairValue* add_item_id_count();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::PairValue >&
      item_id_count() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::PairValue >*
      mutable_item_id_count();

  // optional uint32 exp = 3;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 3;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Reward)
 private:
  inline void set_has_exp();
  inline void clear_has_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::PairValue > curency_type_count_;
  ::google::protobuf::RepeatedPtrField< ::pb::PairValue > item_id_count_;
  ::google::protobuf::uint32 exp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Stage_2eproto();
  friend void protobuf_AssignDesc_Stage_2eproto();
  friend void protobuf_ShutdownFile_Stage_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Reward* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_BattleResult : public ::google::protobuf::Message {
 public:
  GS2C_BattleResult();
  virtual ~GS2C_BattleResult();

  GS2C_BattleResult(const GS2C_BattleResult& from);

  inline GS2C_BattleResult& operator=(const GS2C_BattleResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_BattleResult& default_instance();

  void Swap(GS2C_BattleResult* other);

  // implements Message ----------------------------------------------

  GS2C_BattleResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_BattleResult& from);
  void MergeFrom(const GS2C_BattleResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 err_code = 1;
  inline bool has_err_code() const;
  inline void clear_err_code();
  static const int kErrCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 err_code() const;
  inline void set_err_code(::google::protobuf::uint32 value);

  // optional bool is_battle_win = 2;
  inline bool has_is_battle_win() const;
  inline void clear_is_battle_win();
  static const int kIsBattleWinFieldNumber = 2;
  inline bool is_battle_win() const;
  inline void set_is_battle_win(bool value);

  // optional .pb.GS2C_StageLevel stage_level_info = 3;
  inline bool has_stage_level_info() const;
  inline void clear_stage_level_info();
  static const int kStageLevelInfoFieldNumber = 3;
  inline const ::pb::GS2C_StageLevel& stage_level_info() const;
  inline ::pb::GS2C_StageLevel* mutable_stage_level_info();
  inline ::pb::GS2C_StageLevel* release_stage_level_info();
  inline void set_allocated_stage_level_info(::pb::GS2C_StageLevel* stage_level_info);

  // optional .pb.GS2C_Reward battle_reward = 4;
  inline bool has_battle_reward() const;
  inline void clear_battle_reward();
  static const int kBattleRewardFieldNumber = 4;
  inline const ::pb::GS2C_Reward& battle_reward() const;
  inline ::pb::GS2C_Reward* mutable_battle_reward();
  inline ::pb::GS2C_Reward* release_battle_reward();
  inline void set_allocated_battle_reward(::pb::GS2C_Reward* battle_reward);

  // @@protoc_insertion_point(class_scope:pb.GS2C_BattleResult)
 private:
  inline void set_has_err_code();
  inline void clear_has_err_code();
  inline void set_has_is_battle_win();
  inline void clear_has_is_battle_win();
  inline void set_has_stage_level_info();
  inline void clear_has_stage_level_info();
  inline void set_has_battle_reward();
  inline void clear_has_battle_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 err_code_;
  bool is_battle_win_;
  ::pb::GS2C_StageLevel* stage_level_info_;
  ::pb::GS2C_Reward* battle_reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Stage_2eproto();
  friend void protobuf_AssignDesc_Stage_2eproto();
  friend void protobuf_ShutdownFile_Stage_2eproto();

  void InitAsDefaultInstance();
  static GS2C_BattleResult* default_instance_;
};
// ===================================================================


// ===================================================================

// GS2C_StageLevel

// optional uint32 level_id = 1;
inline bool GS2C_StageLevel::has_level_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_StageLevel::set_has_level_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_StageLevel::clear_has_level_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_StageLevel::clear_level_id() {
  level_id_ = 0u;
  clear_has_level_id();
}
inline ::google::protobuf::uint32 GS2C_StageLevel::level_id() const {
  return level_id_;
}
inline void GS2C_StageLevel::set_level_id(::google::protobuf::uint32 value) {
  set_has_level_id();
  level_id_ = value;
}

// optional uint32 fight_count = 2;
inline bool GS2C_StageLevel::has_fight_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_StageLevel::set_has_fight_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_StageLevel::clear_has_fight_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_StageLevel::clear_fight_count() {
  fight_count_ = 0u;
  clear_has_fight_count();
}
inline ::google::protobuf::uint32 GS2C_StageLevel::fight_count() const {
  return fight_count_;
}
inline void GS2C_StageLevel::set_fight_count(::google::protobuf::uint32 value) {
  set_has_fight_count();
  fight_count_ = value;
}

// optional bool is_clearance = 3;
inline bool GS2C_StageLevel::has_is_clearance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_StageLevel::set_has_is_clearance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_StageLevel::clear_has_is_clearance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_StageLevel::clear_is_clearance() {
  is_clearance_ = false;
  clear_has_is_clearance();
}
inline bool GS2C_StageLevel::is_clearance() const {
  return is_clearance_;
}
inline void GS2C_StageLevel::set_is_clearance(bool value) {
  set_has_is_clearance();
  is_clearance_ = value;
}

// -------------------------------------------------------------------

// GS2C_AllStageInfo

// repeated .pb.GS2C_StageLevel stage_level_infos = 1;
inline int GS2C_AllStageInfo::stage_level_infos_size() const {
  return stage_level_infos_.size();
}
inline void GS2C_AllStageInfo::clear_stage_level_infos() {
  stage_level_infos_.Clear();
}
inline const ::pb::GS2C_StageLevel& GS2C_AllStageInfo::stage_level_infos(int index) const {
  return stage_level_infos_.Get(index);
}
inline ::pb::GS2C_StageLevel* GS2C_AllStageInfo::mutable_stage_level_infos(int index) {
  return stage_level_infos_.Mutable(index);
}
inline ::pb::GS2C_StageLevel* GS2C_AllStageInfo::add_stage_level_infos() {
  return stage_level_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GS2C_StageLevel >&
GS2C_AllStageInfo::stage_level_infos() const {
  return stage_level_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GS2C_StageLevel >*
GS2C_AllStageInfo::mutable_stage_level_infos() {
  return &stage_level_infos_;
}

// -------------------------------------------------------------------

// C2GS_BattleData

// required uint32 stage_level_id = 1;
inline bool C2GS_BattleData::has_stage_level_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_BattleData::set_has_stage_level_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_BattleData::clear_has_stage_level_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_BattleData::clear_stage_level_id() {
  stage_level_id_ = 0u;
  clear_has_stage_level_id();
}
inline ::google::protobuf::uint32 C2GS_BattleData::stage_level_id() const {
  return stage_level_id_;
}
inline void C2GS_BattleData::set_stage_level_id(::google::protobuf::uint32 value) {
  set_has_stage_level_id();
  stage_level_id_ = value;
}

// optional int32 pre_battle_id = 2;
inline bool C2GS_BattleData::has_pre_battle_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_BattleData::set_has_pre_battle_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_BattleData::clear_has_pre_battle_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_BattleData::clear_pre_battle_id() {
  pre_battle_id_ = 0;
  clear_has_pre_battle_id();
}
inline ::google::protobuf::int32 C2GS_BattleData::pre_battle_id() const {
  return pre_battle_id_;
}
inline void C2GS_BattleData::set_pre_battle_id(::google::protobuf::int32 value) {
  set_has_pre_battle_id();
  pre_battle_id_ = value;
}

// -------------------------------------------------------------------

// GS2C_Reward

// repeated .pb.PairValue curency_type_count = 1;
inline int GS2C_Reward::curency_type_count_size() const {
  return curency_type_count_.size();
}
inline void GS2C_Reward::clear_curency_type_count() {
  curency_type_count_.Clear();
}
inline const ::pb::PairValue& GS2C_Reward::curency_type_count(int index) const {
  return curency_type_count_.Get(index);
}
inline ::pb::PairValue* GS2C_Reward::mutable_curency_type_count(int index) {
  return curency_type_count_.Mutable(index);
}
inline ::pb::PairValue* GS2C_Reward::add_curency_type_count() {
  return curency_type_count_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::PairValue >&
GS2C_Reward::curency_type_count() const {
  return curency_type_count_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::PairValue >*
GS2C_Reward::mutable_curency_type_count() {
  return &curency_type_count_;
}

// repeated .pb.PairValue item_id_count = 2;
inline int GS2C_Reward::item_id_count_size() const {
  return item_id_count_.size();
}
inline void GS2C_Reward::clear_item_id_count() {
  item_id_count_.Clear();
}
inline const ::pb::PairValue& GS2C_Reward::item_id_count(int index) const {
  return item_id_count_.Get(index);
}
inline ::pb::PairValue* GS2C_Reward::mutable_item_id_count(int index) {
  return item_id_count_.Mutable(index);
}
inline ::pb::PairValue* GS2C_Reward::add_item_id_count() {
  return item_id_count_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::PairValue >&
GS2C_Reward::item_id_count() const {
  return item_id_count_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::PairValue >*
GS2C_Reward::mutable_item_id_count() {
  return &item_id_count_;
}

// optional uint32 exp = 3;
inline bool GS2C_Reward::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Reward::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Reward::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Reward::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 GS2C_Reward::exp() const {
  return exp_;
}
inline void GS2C_Reward::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// -------------------------------------------------------------------

// GS2C_BattleResult

// optional uint32 err_code = 1;
inline bool GS2C_BattleResult::has_err_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_BattleResult::set_has_err_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_BattleResult::clear_has_err_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_BattleResult::clear_err_code() {
  err_code_ = 0u;
  clear_has_err_code();
}
inline ::google::protobuf::uint32 GS2C_BattleResult::err_code() const {
  return err_code_;
}
inline void GS2C_BattleResult::set_err_code(::google::protobuf::uint32 value) {
  set_has_err_code();
  err_code_ = value;
}

// optional bool is_battle_win = 2;
inline bool GS2C_BattleResult::has_is_battle_win() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_BattleResult::set_has_is_battle_win() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_BattleResult::clear_has_is_battle_win() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_BattleResult::clear_is_battle_win() {
  is_battle_win_ = false;
  clear_has_is_battle_win();
}
inline bool GS2C_BattleResult::is_battle_win() const {
  return is_battle_win_;
}
inline void GS2C_BattleResult::set_is_battle_win(bool value) {
  set_has_is_battle_win();
  is_battle_win_ = value;
}

// optional .pb.GS2C_StageLevel stage_level_info = 3;
inline bool GS2C_BattleResult::has_stage_level_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_BattleResult::set_has_stage_level_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_BattleResult::clear_has_stage_level_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_BattleResult::clear_stage_level_info() {
  if (stage_level_info_ != NULL) stage_level_info_->::pb::GS2C_StageLevel::Clear();
  clear_has_stage_level_info();
}
inline const ::pb::GS2C_StageLevel& GS2C_BattleResult::stage_level_info() const {
  return stage_level_info_ != NULL ? *stage_level_info_ : *default_instance_->stage_level_info_;
}
inline ::pb::GS2C_StageLevel* GS2C_BattleResult::mutable_stage_level_info() {
  set_has_stage_level_info();
  if (stage_level_info_ == NULL) stage_level_info_ = new ::pb::GS2C_StageLevel;
  return stage_level_info_;
}
inline ::pb::GS2C_StageLevel* GS2C_BattleResult::release_stage_level_info() {
  clear_has_stage_level_info();
  ::pb::GS2C_StageLevel* temp = stage_level_info_;
  stage_level_info_ = NULL;
  return temp;
}
inline void GS2C_BattleResult::set_allocated_stage_level_info(::pb::GS2C_StageLevel* stage_level_info) {
  delete stage_level_info_;
  stage_level_info_ = stage_level_info;
  if (stage_level_info) {
    set_has_stage_level_info();
  } else {
    clear_has_stage_level_info();
  }
}

// optional .pb.GS2C_Reward battle_reward = 4;
inline bool GS2C_BattleResult::has_battle_reward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_BattleResult::set_has_battle_reward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_BattleResult::clear_has_battle_reward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_BattleResult::clear_battle_reward() {
  if (battle_reward_ != NULL) battle_reward_->::pb::GS2C_Reward::Clear();
  clear_has_battle_reward();
}
inline const ::pb::GS2C_Reward& GS2C_BattleResult::battle_reward() const {
  return battle_reward_ != NULL ? *battle_reward_ : *default_instance_->battle_reward_;
}
inline ::pb::GS2C_Reward* GS2C_BattleResult::mutable_battle_reward() {
  set_has_battle_reward();
  if (battle_reward_ == NULL) battle_reward_ = new ::pb::GS2C_Reward;
  return battle_reward_;
}
inline ::pb::GS2C_Reward* GS2C_BattleResult::release_battle_reward() {
  clear_has_battle_reward();
  ::pb::GS2C_Reward* temp = battle_reward_;
  battle_reward_ = NULL;
  return temp;
}
inline void GS2C_BattleResult::set_allocated_battle_reward(::pb::GS2C_Reward* battle_reward) {
  delete battle_reward_;
  battle_reward_ = battle_reward;
  if (battle_reward) {
    set_has_battle_reward();
  } else {
    clear_has_battle_reward();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Stage_2eproto__INCLUDED
