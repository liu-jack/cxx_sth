


#include "Congratulate/CongratulateRewardLog.h"
#include "Congratulate/Table/CongratulateTableMgr.h"
#include "Rank.pb.h"
#include "session/PlayerPool.h"
CongratulateLog::CongratulateLog()
{
	const CongratulateConfigMap& congratulate_config_map = sCongratulateMgr.getCongratulateConfigMap();
	for(CongratulateConfigMap::const_iterator  iter = congratulate_config_map.begin();iter != congratulate_config_map.end();++iter)
	{
		congratulate_struct_map_[iter->first] = CongratulateStruct();
	}
}

bool CongratulateLog::isValidTableId(const uint32 table_id)
{
	CongratulateStructMap::iterator iter = congratulate_struct_map_.find(table_id);
	if(iter == congratulate_struct_map_.end())
	{
		return false;
	}
	return true;
}	

bool CongratulateLog::isInvalidTableIdInBeenStructMap(const uint32 table_id )
{
	CongratulateBeenStructMap::iterator iter = congratulate_been_struct_map_.find(table_id);
	if(iter == congratulate_been_struct_map_.end())
	{
		return true;
	}
	return false;
}

void CongratulateLog::SaveTo(const uint32 table_id,pb::GxDB_CongratulateInfo& msg)
{
	if(!isValidTableId(table_id)) return;
	CongratulateStruct& ref = congratulate_struct_map_[table_id];
	msg.set_table_id(table_id);
	msg.set_is_achieve(ref.is_achieve_);
	msg.set_is_reward(ref.is_reward_);
	msg.set_been_congratulated_count(ref.been_congratulated_count_);
}


void CongratulateLog::SaveTo(const uint32 table_id,pb::C2GS_Congratulate_Accept& msg)
{
	if(isInvalidTableIdInBeenStructMap(table_id)) return;
	CongratulateBeenStruct& ref = congratulate_been_struct_map_[table_id];
	msg.set_table_id(table_id);
	msg.set_rank(ref.rank_);
	msg.set_suit_id(ref.suit_id_);
	msg.set_to_player_id(ref.to_player_id_);
	msg.set_congratulate_type(ref.congratulate_type_);
	msg.set_active_time(ref.active_time_);
}

void CongratulateLog::SaveTo(pb::GS2C_ListOfCurrentCanCongratulate& msg)
{
	if(congratulate_been_struct_map_.empty()) return;
	CongratulateBeenStructMap::iterator iter = congratulate_been_struct_map_.begin();
	pb::GS2C_Achieve_Congratulate *info = msg.mutable_info();
	SaveTo(iter->first,*info->mutable_info());
	Player* to_player = sPlayerPool.GetByPlayerId(iter->second.to_player_id_);
	if(to_player)
	{
		info->set_to_player_name(to_player->CharName());
	}
}

void CongratulateLog::LoadFrom(const pb::GxDB_CongratulateRewardLog& msg)
{
	for(int i = 0;i < msg.info_size();++i)
	{
		const pb::GxDB_CongratulateInfo& info = msg.info(i);
		congratulate_struct_map_[info.table_id()] = CongratulateStruct(info.is_achieve(),info.is_reward(),info.been_congratulated_count());
	}
}


void CongratulateLog::LoadFrom(const pb::GxDB_CongratulateBeenCongratualted& msg)
{
	for(int i = 0;i < msg.info_size();++i)
	{
		const pb::C2GS_Congratulate_Accept& info = msg.info(i);
		congratulate_been_struct_map_[info.table_id()] = CongratulateBeenStruct(info.to_player_id(),info.rank(),info.suit_id(),info.congratulate_type(),info.active_time());
	}
}

void CongratulateLog::LoadFrom(const pb::C2GS_Congratulate_Accept& msg)
{
	congratulate_been_struct_map_[msg.table_id()] = CongratulateBeenStruct(msg.to_player_id(),msg.rank(),msg.suit_id(),msg.congratulate_type(),msg.active_time());
}

void CongratulateLog::EraseFromCongratulateBeenMap(const uint32 rank,const uint32 table_id)
{
	CongratulateBeenStructMap::iterator iter = congratulate_been_struct_map_.find(table_id);
	if(iter != congratulate_been_struct_map_.end())
	{
		congratulate_been_struct_map_.erase(iter);
	}
}

void CongratulateLog::SetAchieve(const uint32 table_id)
{
	if(!isValidTableId(table_id)) return;
	CongratulateStruct& ref = congratulate_struct_map_[table_id];
	ref.is_achieve_ =  1;
}

void CongratulateLog::SetTakeReward(const uint32 table_id)
{
	if(!isValidTableId(table_id)) return;
	CongratulateStruct& ref = congratulate_struct_map_[table_id];
	ref.is_reward_ =  1;
}

void CongratulateLog::AddBeenCongratulated(const uint32 table_id)
{
	if(!isValidTableId(table_id)) return;
	CongratulateStruct& ref = congratulate_struct_map_[table_id];
	ref.been_congratulated_count_++;
}

const CongratulateStructMap& CongratulateLog::getCongratulateStructMap() const
{
	return congratulate_struct_map_;
}

uint64 CongratulateLog::GetToPlayerId(const pb::C2GS_Congratulate_Accept& msg) const
{
	CongratulateBeenStructMap::const_iterator iter = congratulate_been_struct_map_.find(msg.table_id());
	if(iter != congratulate_been_struct_map_.end())
	{
		return iter->second.to_player_id_;
	}
	return 0;
}
