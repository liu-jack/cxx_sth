
#include <stdlib.h>
#include <algorithm>
#include "../LoginServer.h"
#include "LoginDataMgr.h"
#include "MySqlSingleton.h"
#include "InterServer.pb.h"
#include "OS.h"


LoginDataMgr::LoginDataMgr( void )
{

}


LoginDataMgr::~LoginDataMgr( void )
{

}



bool LoginDataMgr::InitData( uint32 regionId )
{
	m_accountInfos.reset(new AccountInfoCacheType());
	m_accountInfos->SetDB( &sDatabase ) ;
	m_accountInfos->InitMaxId(regionId) ;

	const ConfigMgr &config =sLoginSvr.Config() ;

	int y =0, m =0, d =0 ;
	uint32 limitDays =config.GetInt("Self.max_account_cache_days_limit", 7) ;
	if( limitDays < 1 )
	{
		limitDays =1 ;
	}

	time_t loadLimit =::time( NULL ) - limitDays * 24 * 60 * 60 ;
	if( TimeT2Date( loadLimit, y, m, d ) )
	{
		const size_t limitCount = config.GetInt("Self.max_account_cache_count_limit", 3000) ;

		std::string sql ;
		Utility::FormatString( sql, "SELECT * FROM %s WHERE lastLoginTime > STR_TO_DATE( '%u-%u-%u','%%Y-%%m-%%d') LIMIT %u ; "
			, AccountInfo::GetTableName(), y, m, d, limitCount ) ;

		std::vector<AccountInfo*> vecAccounts ;
		m_accountInfos->SqlLoadAndAddData( sql.c_str(), &vecAccounts ) ;

		for( std::vector<AccountInfo*>::iterator itr =vecAccounts.begin(); itr != vecAccounts.end(); ++itr )
		{
			NLOG( "account id: %llu, name: %s add to cache ~!", (uint64)(*itr)->id, (*itr)->account.c_str() ) ;
		}

		NLOG( "total %u account add to cache .", vecAccounts.size() ) ;
	}
	else
	{
		ELOG( " Login server add all account to cache~~~~!!!!!" ) ;
		m_accountInfos->SqlLoadAndAddData() ;
	}

	return true ;
}

void LoginDataMgr::ReleaseAccount( AccountInfo *pAccountInfo )
{
	if( pAccountInfo == NULL )
	{
		return ;
	}

	int remainCount =DeductAccountInfoUse( pAccountInfo->id ) ;
	ASSERT( remainCount >= 0 ) ;
	if( remainCount == 0 )
	{
		m_accountInfos->RemoveAndSaveData( pAccountInfo ) ;
	}
}

void LoginDataMgr::SaveModifyAccount( AccountInfo* pInfo )
{
	m_accountInfos->WriteEntry(pInfo);
}


AccountInfo* LoginDataMgr::AddNewAccount( AccountInfo &newAccount )
{
	newAccount.id =m_accountInfos->IncreaseMaxId() ;
	
	std::transform( newAccount.account.begin(), newAccount.account.end(), newAccount.account.begin(), ToUpper() );

	return m_accountInfos->SaveAndAddEntry( &newAccount ) ;
}

AccountInfo* LoginDataMgr::GetAccount(uint64 accoundId)
{
	AccountInfo *pInfo = NULL;
	if (accoundId > 0)
	{
		pInfo =m_accountInfos->GetEntryByKey( accoundId ) ;
		if( pInfo == NULL )
		{
			string sql ;
			std::vector<AccountInfo*> vec ;
			Utility::FormatString( sql, "SELECT * FROM %s WHERE id = %llu;", AccountInfo::GetTableName(), accoundId ) ;
			if( m_accountInfos->SqlLoadAndAddData( sql.c_str(), &vec, FlagReload ) )
			{
				pInfo =vec[0] ;
			}
		}

		if (pInfo && pInfo->IsForbiden())
		{
			if (pInfo->lockTime > 1 && pInfo->lockTime < sOS.GetRealTime())
			{
				pInfo->lockReason = (uint32)pb::ACCOUNT_LOCK_TYPE_NONE;;
				pInfo->lockTime = 0;
				m_accountInfos->WriteEntry(pInfo);
			}
		}
	}

	return pInfo ;
}

AccountInfo* LoginDataMgr::GetAccount( uint32 channelId, uint32 platformId, std::string account )
{
	std::transform( account.begin(), account.end(), account.begin(), ToUpper() );
	AccountInfo *pInfo = NULL;
	string sql ;
	std::vector<AccountInfo*> vec ;
	Utility::FormatString( sql, "SELECT * FROM %s WHERE channelId = %d AND platformId = %d AND account LIKE '%s' LIMIT 1;", AccountInfo::GetTableName(),channelId,platformId,account.c_str()) ;
	if( m_accountInfos->SqlLoadAndAddData( sql.c_str(), &vec, FlagReload ) )
	{
		pInfo =vec[0] ;
	}
	if (pInfo == NULL)
	{
		if ((channelId == 0) && (platformId == 0))
		{
			Utility::FormatString( sql, "SELECT * FROM %s WHERE  account LIKE '%s' LIMIT 1;", AccountInfo::GetTableName(),account.c_str()) ;
			if( m_accountInfos->SqlLoadAndAddData( sql.c_str(), &vec, FlagReload ) )
			{
				pInfo =vec[0] ;
			}
		}
	}
	if (pInfo && pInfo->IsForbiden())
	{
		if (pInfo->lockTime > 1 && pInfo->lockTime < sOS.GetRealTime())
		{
			pInfo->lockReason = (uint32)pb::ACCOUNT_LOCK_TYPE_NONE;;
			pInfo->lockTime = 0;
			m_accountInfos->WriteEntry(pInfo);
		}
	}
	return pInfo ;

}

void LoginDataMgr::LockAccount( uint64 AccountId, const string& strName, uint32 type, time_t locktime)
{
	time_t      toLockTime = 0;
	uint32 toLockType = (uint32)pb::ACCOUNT_LOCK_TYPE_NONE;
	if (type == (uint32)pb::ACCOUNT_OP_LOCK)
	{ 
		toLockType = (uint32)pb::ACCOUNT_LOCK_TYPE_LOCKED;
		if (locktime == 1)
		{
			toLockTime = 1;
		}
		else if (locktime > 1)
		{
			toLockTime = sOS.GetRealTime() + locktime;
		}
	}
	else if (type == (uint32)pb::ACCOUNT_OP_UNLOCK)
	{ 
		toLockType = (uint32)pb::ACCOUNT_LOCK_TYPE_NONE;
		toLockTime = 0;
	}
	else
	{
		return;
	}

	AccountInfo *curAcountInfo = GetAccount( AccountId ) ;
	if( curAcountInfo)
	{
		curAcountInfo->lockReason = toLockType;
		curAcountInfo->lockTime = toLockTime;
		if (GetAccountInfoUse(AccountId) == 0)
		{
			m_accountInfos->RemoveAndSaveData(curAcountInfo);
		}
		else
		{
			m_accountInfos->WriteEntry(curAcountInfo);
		}
	}
}
