// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: World.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "World.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* C2GS_Enter_Map_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Enter_Map_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Leave_Map_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Leave_Map_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Auto_Attack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Auto_Attack_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Hero_Move_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Hero_Move_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Hero_Move_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Hero_Move_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_HERO_STOP_MOVE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_HERO_STOP_MOVE_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Hero_Pos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Hero_Pos_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_NPC_Pos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_NPC_Pos_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_NPC_POS_LIST_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_NPC_POS_LIST_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Delete_Npc_World_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Delete_Npc_World_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Expedition_Army_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Expedition_Army_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Donate_City_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Donate_City_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Train_Soldier_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Train_Soldier_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_StartTunTian_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_StartTunTian_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_StartTunTian_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_StartTunTian_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_TunTianReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_TunTianReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_TunTian_Donate_Ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_TunTian_Donate_Ret_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Clear_Fresh_TunTian_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Clear_Fresh_TunTian_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Clear_Tuntian_CD_Ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Clear_Tuntian_CD_Ret_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_exp_get_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_exp_get_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Train_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Train_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* Wild_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Wild_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Wild_Data_Lst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Wild_Data_Lst_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Bribe_City_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Bribe_City_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Incite_City_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Incite_City_reflection_ = NULL;
const ::google::protobuf::Descriptor* Struct_Army_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Struct_Army_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_City_Fight_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_City_Fight_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Request_Fight_Lst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Request_Fight_Lst_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_Achievement_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_Achievement_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_World_Achievement_All_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_World_Achievement_All_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Take_World_Achievement_Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Take_World_Achievement_Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Take_World_Achievement_Reward_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Take_World_Achievement_Reward_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_World_Achievement_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_World_Achievement_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_World_Achievement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_World_Achievement_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_World_2eproto() {
  protobuf_AddDesc_World_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "World.proto");
  GOOGLE_CHECK(file != NULL);
  C2GS_Enter_Map_descriptor_ = file->message_type(0);
  static const int C2GS_Enter_Map_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Enter_Map, map_tid_),
  };
  C2GS_Enter_Map_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Enter_Map_descriptor_,
      C2GS_Enter_Map::default_instance_,
      C2GS_Enter_Map_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Enter_Map, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Enter_Map, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Enter_Map));
  C2GS_Leave_Map_descriptor_ = file->message_type(1);
  static const int C2GS_Leave_Map_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Leave_Map, map_tid_),
  };
  C2GS_Leave_Map_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Leave_Map_descriptor_,
      C2GS_Leave_Map::default_instance_,
      C2GS_Leave_Map_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Leave_Map, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Leave_Map, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Leave_Map));
  C2GS_Auto_Attack_descriptor_ = file->message_type(2);
  static const int C2GS_Auto_Attack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Auto_Attack, hero_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Auto_Attack, city_id_),
  };
  C2GS_Auto_Attack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Auto_Attack_descriptor_,
      C2GS_Auto_Attack::default_instance_,
      C2GS_Auto_Attack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Auto_Attack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Auto_Attack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Auto_Attack));
  C2GS_Hero_Move_descriptor_ = file->message_type(3);
  static const int C2GS_Hero_Move_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Hero_Move, char_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Hero_Move, city_id_),
  };
  C2GS_Hero_Move_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Hero_Move_descriptor_,
      C2GS_Hero_Move::default_instance_,
      C2GS_Hero_Move_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Hero_Move, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Hero_Move, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Hero_Move));
  GS2C_Hero_Move_descriptor_ = file->message_type(4);
  static const int GS2C_Hero_Move_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Hero_Move, char_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Hero_Move, city_id_),
  };
  GS2C_Hero_Move_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Hero_Move_descriptor_,
      GS2C_Hero_Move::default_instance_,
      GS2C_Hero_Move_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Hero_Move, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Hero_Move, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Hero_Move));
  C2GS_HERO_STOP_MOVE_descriptor_ = file->message_type(5);
  static const int C2GS_HERO_STOP_MOVE_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_HERO_STOP_MOVE, char_id_),
  };
  C2GS_HERO_STOP_MOVE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_HERO_STOP_MOVE_descriptor_,
      C2GS_HERO_STOP_MOVE::default_instance_,
      C2GS_HERO_STOP_MOVE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_HERO_STOP_MOVE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_HERO_STOP_MOVE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_HERO_STOP_MOVE));
  GS2C_Hero_Pos_descriptor_ = file->message_type(6);
  static const int GS2C_Hero_Pos_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Hero_Pos, char_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Hero_Pos, city_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Hero_Pos, is_jump_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Hero_Pos, is_move_shutdown_),
  };
  GS2C_Hero_Pos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Hero_Pos_descriptor_,
      GS2C_Hero_Pos::default_instance_,
      GS2C_Hero_Pos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Hero_Pos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Hero_Pos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Hero_Pos));
  GS2C_NPC_Pos_descriptor_ = file->message_type(7);
  static const int GS2C_NPC_Pos_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_NPC_Pos, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_NPC_Pos, city_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_NPC_Pos, unique_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_NPC_Pos, belongcountry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_NPC_Pos, org_city_id_),
  };
  GS2C_NPC_Pos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_NPC_Pos_descriptor_,
      GS2C_NPC_Pos::default_instance_,
      GS2C_NPC_Pos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_NPC_Pos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_NPC_Pos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_NPC_Pos));
  GS2C_NPC_POS_LIST_descriptor_ = file->message_type(8);
  static const int GS2C_NPC_POS_LIST_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_NPC_POS_LIST, pos_),
  };
  GS2C_NPC_POS_LIST_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_NPC_POS_LIST_descriptor_,
      GS2C_NPC_POS_LIST::default_instance_,
      GS2C_NPC_POS_LIST_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_NPC_POS_LIST, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_NPC_POS_LIST, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_NPC_POS_LIST));
  GS2C_Delete_Npc_World_descriptor_ = file->message_type(9);
  static const int GS2C_Delete_Npc_World_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Delete_Npc_World, expeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Delete_Npc_World, city_id_),
  };
  GS2C_Delete_Npc_World_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Delete_Npc_World_descriptor_,
      GS2C_Delete_Npc_World::default_instance_,
      GS2C_Delete_Npc_World_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Delete_Npc_World, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Delete_Npc_World, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Delete_Npc_World));
  GS2C_Expedition_Army_Info_descriptor_ = file->message_type(10);
  static const int GS2C_Expedition_Army_Info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Expedition_Army_Info, expedition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Expedition_Army_Info, city_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Expedition_Army_Info, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Expedition_Army_Info, org_city_id_),
  };
  GS2C_Expedition_Army_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Expedition_Army_Info_descriptor_,
      GS2C_Expedition_Army_Info::default_instance_,
      GS2C_Expedition_Army_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Expedition_Army_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Expedition_Army_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Expedition_Army_Info));
  C2GS_Donate_City_descriptor_ = file->message_type(11);
  static const int C2GS_Donate_City_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Donate_City, city_id_),
  };
  C2GS_Donate_City_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Donate_City_descriptor_,
      C2GS_Donate_City::default_instance_,
      C2GS_Donate_City_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Donate_City, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Donate_City, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Donate_City));
  C2GS_Train_Soldier_descriptor_ = file->message_type(12);
  static const int C2GS_Train_Soldier_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Train_Soldier, train_index_),
  };
  C2GS_Train_Soldier_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Train_Soldier_descriptor_,
      C2GS_Train_Soldier::default_instance_,
      C2GS_Train_Soldier_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Train_Soldier, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Train_Soldier, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Train_Soldier));
  C2GS_StartTunTian_descriptor_ = file->message_type(13);
  static const int C2GS_StartTunTian_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_StartTunTian, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_StartTunTian, cityid_),
  };
  C2GS_StartTunTian_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_StartTunTian_descriptor_,
      C2GS_StartTunTian::default_instance_,
      C2GS_StartTunTian_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_StartTunTian, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_StartTunTian, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_StartTunTian));
  GS2C_StartTunTian_descriptor_ = file->message_type(14);
  static const int GS2C_StartTunTian_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_StartTunTian, istuntiansuc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_StartTunTian, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_StartTunTian, heroid_),
  };
  GS2C_StartTunTian_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_StartTunTian_descriptor_,
      GS2C_StartTunTian::default_instance_,
      GS2C_StartTunTian_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_StartTunTian, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_StartTunTian, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_StartTunTian));
  GS2C_TunTianReward_descriptor_ = file->message_type(15);
  static const int GS2C_TunTianReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_TunTianReward, food_count_),
  };
  GS2C_TunTianReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_TunTianReward_descriptor_,
      GS2C_TunTianReward::default_instance_,
      GS2C_TunTianReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_TunTianReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_TunTianReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_TunTianReward));
  GS2C_TunTian_Donate_Ret_descriptor_ = file->message_type(16);
  static const int GS2C_TunTian_Donate_Ret_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_TunTian_Donate_Ret, donateret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_TunTian_Donate_Ret, cdendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_TunTian_Donate_Ret, tuntianlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_TunTian_Donate_Ret, tuntianexp_),
  };
  GS2C_TunTian_Donate_Ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_TunTian_Donate_Ret_descriptor_,
      GS2C_TunTian_Donate_Ret::default_instance_,
      GS2C_TunTian_Donate_Ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_TunTian_Donate_Ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_TunTian_Donate_Ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_TunTian_Donate_Ret));
  C2GS_Clear_Fresh_TunTian_descriptor_ = file->message_type(17);
  static const int C2GS_Clear_Fresh_TunTian_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Clear_Fresh_TunTian, isclear_),
  };
  C2GS_Clear_Fresh_TunTian_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Clear_Fresh_TunTian_descriptor_,
      C2GS_Clear_Fresh_TunTian::default_instance_,
      C2GS_Clear_Fresh_TunTian_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Clear_Fresh_TunTian, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Clear_Fresh_TunTian, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Clear_Fresh_TunTian));
  GS2C_Clear_Tuntian_CD_Ret_descriptor_ = file->message_type(18);
  static const int GS2C_Clear_Tuntian_CD_Ret_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Clear_Tuntian_CD_Ret, isclearsucc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Clear_Tuntian_CD_Ret, cdendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Clear_Tuntian_CD_Ret, tuntianlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Clear_Tuntian_CD_Ret, tuntianexp_),
  };
  GS2C_Clear_Tuntian_CD_Ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Clear_Tuntian_CD_Ret_descriptor_,
      GS2C_Clear_Tuntian_CD_Ret::default_instance_,
      GS2C_Clear_Tuntian_CD_Ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Clear_Tuntian_CD_Ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Clear_Tuntian_CD_Ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Clear_Tuntian_CD_Ret));
  hero_exp_get_descriptor_ = file->message_type(19);
  static const int hero_exp_get_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_exp_get, chatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_exp_get, exp_),
  };
  hero_exp_get_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_exp_get_descriptor_,
      hero_exp_get::default_instance_,
      hero_exp_get_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_exp_get, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_exp_get, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_exp_get));
  GS2C_Train_Info_descriptor_ = file->message_type(20);
  static const int GS2C_Train_Info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Train_Info, istraining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Train_Info, herosid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Train_Info, trainendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Train_Info, traintype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Train_Info, expget_),
  };
  GS2C_Train_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Train_Info_descriptor_,
      GS2C_Train_Info::default_instance_,
      GS2C_Train_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Train_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Train_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Train_Info));
  Wild_Data_descriptor_ = file->message_type(21);
  static const int Wild_Data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wild_Data, friendliness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wild_Data, inciteamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wild_Data, city_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wild_Data, curbribemoney_),
  };
  Wild_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Wild_Data_descriptor_,
      Wild_Data::default_instance_,
      Wild_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wild_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wild_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Wild_Data));
  GS2C_Wild_Data_Lst_descriptor_ = file->message_type(22);
  static const int GS2C_Wild_Data_Lst_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Wild_Data_Lst, wild_lst_),
  };
  GS2C_Wild_Data_Lst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Wild_Data_Lst_descriptor_,
      GS2C_Wild_Data_Lst::default_instance_,
      GS2C_Wild_Data_Lst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Wild_Data_Lst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Wild_Data_Lst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Wild_Data_Lst));
  C2GS_Bribe_City_descriptor_ = file->message_type(23);
  static const int C2GS_Bribe_City_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Bribe_City, city_id_),
  };
  C2GS_Bribe_City_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Bribe_City_descriptor_,
      C2GS_Bribe_City::default_instance_,
      C2GS_Bribe_City_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Bribe_City, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Bribe_City, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Bribe_City));
  C2GS_Incite_City_descriptor_ = file->message_type(24);
  static const int C2GS_Incite_City_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Incite_City, city_id_),
  };
  C2GS_Incite_City_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Incite_City_descriptor_,
      C2GS_Incite_City::default_instance_,
      C2GS_Incite_City_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Incite_City, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Incite_City, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Incite_City));
  Struct_Army_Info_descriptor_ = file->message_type(25);
  static const int Struct_Army_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Army_Info, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Army_Info, army_count_),
  };
  Struct_Army_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Struct_Army_Info_descriptor_,
      Struct_Army_Info::default_instance_,
      Struct_Army_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Army_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Struct_Army_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Struct_Army_Info));
  GS2C_City_Fight_Info_descriptor_ = file->message_type(26);
  static const int GS2C_City_Fight_Info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_City_Fight_Info, attacker_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_City_Fight_Info, defender_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_City_Fight_Info, city_id_),
  };
  GS2C_City_Fight_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_City_Fight_Info_descriptor_,
      GS2C_City_Fight_Info::default_instance_,
      GS2C_City_Fight_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_City_Fight_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_City_Fight_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_City_Fight_Info));
  C2GS_Request_Fight_Lst_descriptor_ = file->message_type(27);
  static const int C2GS_Request_Fight_Lst_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Request_Fight_Lst, city_id_),
  };
  C2GS_Request_Fight_Lst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Request_Fight_Lst_descriptor_,
      C2GS_Request_Fight_Lst::default_instance_,
      C2GS_Request_Fight_Lst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Request_Fight_Lst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Request_Fight_Lst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Request_Fight_Lst));
  World_Achievement_Info_descriptor_ = file->message_type(28);
  static const int World_Achievement_Info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_Achievement_Info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_Achievement_Info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_Achievement_Info, state_),
  };
  World_Achievement_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_Achievement_Info_descriptor_,
      World_Achievement_Info::default_instance_,
      World_Achievement_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_Achievement_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_Achievement_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_Achievement_Info));
  GS2C_World_Achievement_All_Info_descriptor_ = file->message_type(29);
  static const int GS2C_World_Achievement_All_Info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_World_Achievement_All_Info, info_),
  };
  GS2C_World_Achievement_All_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_World_Achievement_All_Info_descriptor_,
      GS2C_World_Achievement_All_Info::default_instance_,
      GS2C_World_Achievement_All_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_World_Achievement_All_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_World_Achievement_All_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_World_Achievement_All_Info));
  C2GS_Take_World_Achievement_Reward_descriptor_ = file->message_type(30);
  static const int C2GS_Take_World_Achievement_Reward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Take_World_Achievement_Reward, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Take_World_Achievement_Reward, attack_or_occupy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Take_World_Achievement_Reward, id_),
  };
  C2GS_Take_World_Achievement_Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Take_World_Achievement_Reward_descriptor_,
      C2GS_Take_World_Achievement_Reward::default_instance_,
      C2GS_Take_World_Achievement_Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Take_World_Achievement_Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Take_World_Achievement_Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Take_World_Achievement_Reward));
  GS2C_Take_World_Achievement_Reward_Rsp_descriptor_ = file->message_type(31);
  static const int GS2C_Take_World_Achievement_Reward_Rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_World_Achievement_Reward_Rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_World_Achievement_Reward_Rsp, reward_),
  };
  GS2C_Take_World_Achievement_Reward_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Take_World_Achievement_Reward_Rsp_descriptor_,
      GS2C_Take_World_Achievement_Reward_Rsp::default_instance_,
      GS2C_Take_World_Achievement_Reward_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_World_Achievement_Reward_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_World_Achievement_Reward_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Take_World_Achievement_Reward_Rsp));
  GxDB_World_Achievement_Info_descriptor_ = file->message_type(32);
  static const int GxDB_World_Achievement_Info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_World_Achievement_Info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_World_Achievement_Info, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_World_Achievement_Info, city_id_),
  };
  GxDB_World_Achievement_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_World_Achievement_Info_descriptor_,
      GxDB_World_Achievement_Info::default_instance_,
      GxDB_World_Achievement_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_World_Achievement_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_World_Achievement_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_World_Achievement_Info));
  GxDB_World_Achievement_descriptor_ = file->message_type(33);
  static const int GxDB_World_Achievement_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_World_Achievement, info_),
  };
  GxDB_World_Achievement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_World_Achievement_descriptor_,
      GxDB_World_Achievement::default_instance_,
      GxDB_World_Achievement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_World_Achievement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_World_Achievement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_World_Achievement));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_World_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Enter_Map_descriptor_, &C2GS_Enter_Map::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Leave_Map_descriptor_, &C2GS_Leave_Map::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Auto_Attack_descriptor_, &C2GS_Auto_Attack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Hero_Move_descriptor_, &C2GS_Hero_Move::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Hero_Move_descriptor_, &GS2C_Hero_Move::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_HERO_STOP_MOVE_descriptor_, &C2GS_HERO_STOP_MOVE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Hero_Pos_descriptor_, &GS2C_Hero_Pos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_NPC_Pos_descriptor_, &GS2C_NPC_Pos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_NPC_POS_LIST_descriptor_, &GS2C_NPC_POS_LIST::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Delete_Npc_World_descriptor_, &GS2C_Delete_Npc_World::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Expedition_Army_Info_descriptor_, &GS2C_Expedition_Army_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Donate_City_descriptor_, &C2GS_Donate_City::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Train_Soldier_descriptor_, &C2GS_Train_Soldier::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_StartTunTian_descriptor_, &C2GS_StartTunTian::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_StartTunTian_descriptor_, &GS2C_StartTunTian::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_TunTianReward_descriptor_, &GS2C_TunTianReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_TunTian_Donate_Ret_descriptor_, &GS2C_TunTian_Donate_Ret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Clear_Fresh_TunTian_descriptor_, &C2GS_Clear_Fresh_TunTian::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Clear_Tuntian_CD_Ret_descriptor_, &GS2C_Clear_Tuntian_CD_Ret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_exp_get_descriptor_, &hero_exp_get::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Train_Info_descriptor_, &GS2C_Train_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Wild_Data_descriptor_, &Wild_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Wild_Data_Lst_descriptor_, &GS2C_Wild_Data_Lst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Bribe_City_descriptor_, &C2GS_Bribe_City::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Incite_City_descriptor_, &C2GS_Incite_City::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Struct_Army_Info_descriptor_, &Struct_Army_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_City_Fight_Info_descriptor_, &GS2C_City_Fight_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Request_Fight_Lst_descriptor_, &C2GS_Request_Fight_Lst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_Achievement_Info_descriptor_, &World_Achievement_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_World_Achievement_All_Info_descriptor_, &GS2C_World_Achievement_All_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Take_World_Achievement_Reward_descriptor_, &C2GS_Take_World_Achievement_Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Take_World_Achievement_Reward_Rsp_descriptor_, &GS2C_Take_World_Achievement_Reward_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_World_Achievement_Info_descriptor_, &GxDB_World_Achievement_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_World_Achievement_descriptor_, &GxDB_World_Achievement::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_World_2eproto() {
  delete C2GS_Enter_Map::default_instance_;
  delete C2GS_Enter_Map_reflection_;
  delete C2GS_Leave_Map::default_instance_;
  delete C2GS_Leave_Map_reflection_;
  delete C2GS_Auto_Attack::default_instance_;
  delete C2GS_Auto_Attack_reflection_;
  delete C2GS_Hero_Move::default_instance_;
  delete C2GS_Hero_Move_reflection_;
  delete GS2C_Hero_Move::default_instance_;
  delete GS2C_Hero_Move_reflection_;
  delete C2GS_HERO_STOP_MOVE::default_instance_;
  delete C2GS_HERO_STOP_MOVE_reflection_;
  delete GS2C_Hero_Pos::default_instance_;
  delete GS2C_Hero_Pos_reflection_;
  delete GS2C_NPC_Pos::default_instance_;
  delete GS2C_NPC_Pos_reflection_;
  delete GS2C_NPC_POS_LIST::default_instance_;
  delete GS2C_NPC_POS_LIST_reflection_;
  delete GS2C_Delete_Npc_World::default_instance_;
  delete GS2C_Delete_Npc_World_reflection_;
  delete GS2C_Expedition_Army_Info::default_instance_;
  delete GS2C_Expedition_Army_Info_reflection_;
  delete C2GS_Donate_City::default_instance_;
  delete C2GS_Donate_City_reflection_;
  delete C2GS_Train_Soldier::default_instance_;
  delete C2GS_Train_Soldier_reflection_;
  delete C2GS_StartTunTian::default_instance_;
  delete C2GS_StartTunTian_reflection_;
  delete GS2C_StartTunTian::default_instance_;
  delete GS2C_StartTunTian_reflection_;
  delete GS2C_TunTianReward::default_instance_;
  delete GS2C_TunTianReward_reflection_;
  delete GS2C_TunTian_Donate_Ret::default_instance_;
  delete GS2C_TunTian_Donate_Ret_reflection_;
  delete C2GS_Clear_Fresh_TunTian::default_instance_;
  delete C2GS_Clear_Fresh_TunTian_reflection_;
  delete GS2C_Clear_Tuntian_CD_Ret::default_instance_;
  delete GS2C_Clear_Tuntian_CD_Ret_reflection_;
  delete hero_exp_get::default_instance_;
  delete hero_exp_get_reflection_;
  delete GS2C_Train_Info::default_instance_;
  delete GS2C_Train_Info_reflection_;
  delete Wild_Data::default_instance_;
  delete Wild_Data_reflection_;
  delete GS2C_Wild_Data_Lst::default_instance_;
  delete GS2C_Wild_Data_Lst_reflection_;
  delete C2GS_Bribe_City::default_instance_;
  delete C2GS_Bribe_City_reflection_;
  delete C2GS_Incite_City::default_instance_;
  delete C2GS_Incite_City_reflection_;
  delete Struct_Army_Info::default_instance_;
  delete Struct_Army_Info_reflection_;
  delete GS2C_City_Fight_Info::default_instance_;
  delete GS2C_City_Fight_Info_reflection_;
  delete C2GS_Request_Fight_Lst::default_instance_;
  delete C2GS_Request_Fight_Lst_reflection_;
  delete World_Achievement_Info::default_instance_;
  delete World_Achievement_Info_reflection_;
  delete GS2C_World_Achievement_All_Info::default_instance_;
  delete GS2C_World_Achievement_All_Info_reflection_;
  delete C2GS_Take_World_Achievement_Reward::default_instance_;
  delete C2GS_Take_World_Achievement_Reward_reflection_;
  delete GS2C_Take_World_Achievement_Reward_Rsp::default_instance_;
  delete GS2C_Take_World_Achievement_Reward_Rsp_reflection_;
  delete GxDB_World_Achievement_Info::default_instance_;
  delete GxDB_World_Achievement_Info_reflection_;
  delete GxDB_World_Achievement::default_instance_;
  delete GxDB_World_Achievement_reflection_;
}

void protobuf_AddDesc_World_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_CommomDef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013World.proto\022\002pb\032\017CommomDef.proto\"!\n\016C2"
    "GS_Enter_Map\022\017\n\007map_tid\030\001 \002(\r\"!\n\016C2GS_Le"
    "ave_Map\022\017\n\007map_tid\030\001 \002(\r\"5\n\020C2GS_Auto_At"
    "tack\022\020\n\010hero_ids\030\001 \003(\r\022\017\n\007city_id\030\002 \002(\r\""
    "2\n\016C2GS_Hero_Move\022\017\n\007char_id\030\001 \002(\r\022\017\n\007ci"
    "ty_id\030\002 \002(\r\"2\n\016GS2C_Hero_Move\022\017\n\007char_id"
    "\030\001 \001(\r\022\017\n\007city_id\030\002 \003(\r\"&\n\023C2GS_HERO_STO"
    "P_MOVE\022\017\n\007char_id\030\001 \002(\r\"\\\n\rGS2C_Hero_Pos"
    "\022\017\n\007char_id\030\001 \002(\r\022\017\n\007city_id\030\002 \002(\r\022\017\n\007is"
    "_jump\030\003 \001(\010\022\030\n\020is_move_shutdown\030\004 \001(\010\"o\n"
    "\014GS2C_NPC_Pos\022\017\n\007hero_id\030\001 \002(\r\022\017\n\007city_i"
    "d\030\002 \002(\r\022\021\n\tunique_id\030\003 \001(\r\022\025\n\rbelongCoun"
    "try\030\004 \001(\r\022\023\n\013org_city_id\030\005 \001(\r\"2\n\021GS2C_N"
    "PC_POS_LIST\022\035\n\003pos\030\001 \003(\0132\020.pb.GS2C_NPC_P"
    "os\"8\n\025GS2C_Delete_Npc_World\022\016\n\006expeid\030\001 "
    "\001(\r\022\017\n\007city_id\030\002 \001(\r\"i\n\031GS2C_Expedition_"
    "Army_Info\022\025\n\rexpedition_id\030\001 \002(\r\022\017\n\007city"
    "_id\030\002 \002(\r\022\017\n\007hero_id\030\003 \002(\r\022\023\n\013org_city_i"
    "d\030\004 \001(\r\"#\n\020C2GS_Donate_City\022\017\n\007city_id\030\001"
    " \002(\r\")\n\022C2GS_Train_Soldier\022\023\n\013train_inde"
    "x\030\001 \002(\r\"3\n\021C2GS_StartTunTian\022\016\n\006heroid\030\001"
    " \002(\r\022\016\n\006cityid\030\002 \002(\r\"L\n\021GS2C_StartTunTia"
    "n\022\024\n\014isTuntianSuc\030\001 \002(\010\022\021\n\tstartTime\030\002 \001"
    "(\004\022\016\n\006heroid\030\003 \001(\r\"(\n\022GS2C_TunTianReward"
    "\022\022\n\nfood_count\030\001 \002(\r\"i\n\027GS2C_TunTian_Don"
    "ate_Ret\022\021\n\tdonateret\030\001 \001(\r\022\021\n\tcdEndTime\030"
    "\002 \001(\004\022\024\n\014tuntianlevel\030\003 \001(\r\022\022\n\ntuntianex"
    "p\030\004 \001(\004\"+\n\030C2GS_Clear_Fresh_TunTian\022\017\n\007i"
    "sClear\030\001 \001(\010\"m\n\031GS2C_Clear_Tuntian_CD_Re"
    "t\022\023\n\013isClearSucc\030\001 \001(\010\022\021\n\tcdEndTime\030\002 \001("
    "\004\022\024\n\014tuntianlevel\030\003 \001(\r\022\022\n\ntuntianexp\030\004 "
    "\001(\004\"+\n\014hero_exp_get\022\016\n\006chatid\030\001 \001(\r\022\013\n\003e"
    "xp\030\002 \001(\r\"\201\001\n\017GS2C_Train_Info\022\022\n\nisTraini"
    "ng\030\001 \001(\010\022\017\n\007herosid\030\002 \003(\r\022\024\n\014trainEndTim"
    "e\030\003 \001(\004\022\021\n\ttrainType\030\004 \001(\r\022 \n\006expGet\030\005 \003"
    "(\0132\020.pb.hero_exp_get\"_\n\tWild_Data\022\024\n\014fri"
    "endliness\030\001 \002(\r\022\024\n\014inciteAmount\030\002 \001(\r\022\017\n"
    "\007city_id\030\003 \001(\r\022\025\n\rcurBribeMoney\030\004 \001(\r\"5\n"
    "\022GS2C_Wild_Data_Lst\022\037\n\010wild_lst\030\001 \003(\0132\r."
    "pb.Wild_Data\"\"\n\017C2GS_Bribe_City\022\017\n\007city_"
    "id\030\001 \002(\r\"#\n\020C2GS_Incite_City\022\017\n\007city_id\030"
    "\001 \002(\r\"7\n\020Struct_Army_Info\022\017\n\007country\030\001 \002"
    "(\r\022\022\n\narmy_count\030\002 \002(\r\"\177\n\024GS2C_City_Figh"
    "t_Info\022*\n\014attacker_lst\030\001 \003(\0132\024.pb.Struct"
    "_Army_Info\022*\n\014defender_lst\030\002 \003(\0132\024.pb.St"
    "ruct_Army_Info\022\017\n\007city_id\030\003 \002(\r\")\n\026C2GS_"
    "Request_Fight_Lst\022\017\n\007city_id\030\001 \002(\r\"A\n\026Wo"
    "rld_Achievement_Info\022\n\n\002id\030\001 \001(\r\022\014\n\004type"
    "\030\002 \001(\r\022\r\n\005state\030\003 \001(\r\"K\n\037GS2C_World_Achi"
    "evement_All_Info\022(\n\004info\030\001 \003(\0132\032.pb.Worl"
    "d_Achievement_Info\"X\n\"C2GS_Take_World_Ac"
    "hievement_Reward\022\014\n\004type\030\001 \001(\r\022\030\n\020attack"
    "_or_occupy\030\002 \001(\r\022\n\n\002id\030\003 \001(\r\"S\n&GS2C_Tak"
    "e_World_Achievement_Reward_Rsp\022\013\n\003ret\030\001 "
    "\001(\r\022\034\n\006reward\030\002 \003(\0132\014.pb.StReward\"K\n\033GxD"
    "B_World_Achievement_Info\022\014\n\004type\030\001 \001(\r\022\r"
    "\n\005state\030\002 \001(\r\022\017\n\007city_id\030\003 \001(\r\"G\n\026GxDB_W"
    "orld_Achievement\022-\n\004info\030\001 \003(\0132\037.pb.GxDB"
    "_World_Achievement_Info", 2343);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "World.proto", &protobuf_RegisterTypes);
  C2GS_Enter_Map::default_instance_ = new C2GS_Enter_Map();
  C2GS_Leave_Map::default_instance_ = new C2GS_Leave_Map();
  C2GS_Auto_Attack::default_instance_ = new C2GS_Auto_Attack();
  C2GS_Hero_Move::default_instance_ = new C2GS_Hero_Move();
  GS2C_Hero_Move::default_instance_ = new GS2C_Hero_Move();
  C2GS_HERO_STOP_MOVE::default_instance_ = new C2GS_HERO_STOP_MOVE();
  GS2C_Hero_Pos::default_instance_ = new GS2C_Hero_Pos();
  GS2C_NPC_Pos::default_instance_ = new GS2C_NPC_Pos();
  GS2C_NPC_POS_LIST::default_instance_ = new GS2C_NPC_POS_LIST();
  GS2C_Delete_Npc_World::default_instance_ = new GS2C_Delete_Npc_World();
  GS2C_Expedition_Army_Info::default_instance_ = new GS2C_Expedition_Army_Info();
  C2GS_Donate_City::default_instance_ = new C2GS_Donate_City();
  C2GS_Train_Soldier::default_instance_ = new C2GS_Train_Soldier();
  C2GS_StartTunTian::default_instance_ = new C2GS_StartTunTian();
  GS2C_StartTunTian::default_instance_ = new GS2C_StartTunTian();
  GS2C_TunTianReward::default_instance_ = new GS2C_TunTianReward();
  GS2C_TunTian_Donate_Ret::default_instance_ = new GS2C_TunTian_Donate_Ret();
  C2GS_Clear_Fresh_TunTian::default_instance_ = new C2GS_Clear_Fresh_TunTian();
  GS2C_Clear_Tuntian_CD_Ret::default_instance_ = new GS2C_Clear_Tuntian_CD_Ret();
  hero_exp_get::default_instance_ = new hero_exp_get();
  GS2C_Train_Info::default_instance_ = new GS2C_Train_Info();
  Wild_Data::default_instance_ = new Wild_Data();
  GS2C_Wild_Data_Lst::default_instance_ = new GS2C_Wild_Data_Lst();
  C2GS_Bribe_City::default_instance_ = new C2GS_Bribe_City();
  C2GS_Incite_City::default_instance_ = new C2GS_Incite_City();
  Struct_Army_Info::default_instance_ = new Struct_Army_Info();
  GS2C_City_Fight_Info::default_instance_ = new GS2C_City_Fight_Info();
  C2GS_Request_Fight_Lst::default_instance_ = new C2GS_Request_Fight_Lst();
  World_Achievement_Info::default_instance_ = new World_Achievement_Info();
  GS2C_World_Achievement_All_Info::default_instance_ = new GS2C_World_Achievement_All_Info();
  C2GS_Take_World_Achievement_Reward::default_instance_ = new C2GS_Take_World_Achievement_Reward();
  GS2C_Take_World_Achievement_Reward_Rsp::default_instance_ = new GS2C_Take_World_Achievement_Reward_Rsp();
  GxDB_World_Achievement_Info::default_instance_ = new GxDB_World_Achievement_Info();
  GxDB_World_Achievement::default_instance_ = new GxDB_World_Achievement();
  C2GS_Enter_Map::default_instance_->InitAsDefaultInstance();
  C2GS_Leave_Map::default_instance_->InitAsDefaultInstance();
  C2GS_Auto_Attack::default_instance_->InitAsDefaultInstance();
  C2GS_Hero_Move::default_instance_->InitAsDefaultInstance();
  GS2C_Hero_Move::default_instance_->InitAsDefaultInstance();
  C2GS_HERO_STOP_MOVE::default_instance_->InitAsDefaultInstance();
  GS2C_Hero_Pos::default_instance_->InitAsDefaultInstance();
  GS2C_NPC_Pos::default_instance_->InitAsDefaultInstance();
  GS2C_NPC_POS_LIST::default_instance_->InitAsDefaultInstance();
  GS2C_Delete_Npc_World::default_instance_->InitAsDefaultInstance();
  GS2C_Expedition_Army_Info::default_instance_->InitAsDefaultInstance();
  C2GS_Donate_City::default_instance_->InitAsDefaultInstance();
  C2GS_Train_Soldier::default_instance_->InitAsDefaultInstance();
  C2GS_StartTunTian::default_instance_->InitAsDefaultInstance();
  GS2C_StartTunTian::default_instance_->InitAsDefaultInstance();
  GS2C_TunTianReward::default_instance_->InitAsDefaultInstance();
  GS2C_TunTian_Donate_Ret::default_instance_->InitAsDefaultInstance();
  C2GS_Clear_Fresh_TunTian::default_instance_->InitAsDefaultInstance();
  GS2C_Clear_Tuntian_CD_Ret::default_instance_->InitAsDefaultInstance();
  hero_exp_get::default_instance_->InitAsDefaultInstance();
  GS2C_Train_Info::default_instance_->InitAsDefaultInstance();
  Wild_Data::default_instance_->InitAsDefaultInstance();
  GS2C_Wild_Data_Lst::default_instance_->InitAsDefaultInstance();
  C2GS_Bribe_City::default_instance_->InitAsDefaultInstance();
  C2GS_Incite_City::default_instance_->InitAsDefaultInstance();
  Struct_Army_Info::default_instance_->InitAsDefaultInstance();
  GS2C_City_Fight_Info::default_instance_->InitAsDefaultInstance();
  C2GS_Request_Fight_Lst::default_instance_->InitAsDefaultInstance();
  World_Achievement_Info::default_instance_->InitAsDefaultInstance();
  GS2C_World_Achievement_All_Info::default_instance_->InitAsDefaultInstance();
  C2GS_Take_World_Achievement_Reward::default_instance_->InitAsDefaultInstance();
  GS2C_Take_World_Achievement_Reward_Rsp::default_instance_->InitAsDefaultInstance();
  GxDB_World_Achievement_Info::default_instance_->InitAsDefaultInstance();
  GxDB_World_Achievement::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_World_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_World_2eproto {
  StaticDescriptorInitializer_World_2eproto() {
    protobuf_AddDesc_World_2eproto();
  }
} static_descriptor_initializer_World_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int C2GS_Enter_Map::kMapTidFieldNumber;
#endif  // !_MSC_VER

C2GS_Enter_Map::C2GS_Enter_Map()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Enter_Map::InitAsDefaultInstance() {
}

C2GS_Enter_Map::C2GS_Enter_Map(const C2GS_Enter_Map& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Enter_Map::SharedCtor() {
  _cached_size_ = 0;
  map_tid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Enter_Map::~C2GS_Enter_Map() {
  SharedDtor();
}

void C2GS_Enter_Map::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Enter_Map::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Enter_Map::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Enter_Map_descriptor_;
}

const C2GS_Enter_Map& C2GS_Enter_Map::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

C2GS_Enter_Map* C2GS_Enter_Map::default_instance_ = NULL;

C2GS_Enter_Map* C2GS_Enter_Map::New() const {
  return new C2GS_Enter_Map;
}

void C2GS_Enter_Map::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_tid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Enter_Map::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 map_tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_tid_)));
          set_has_map_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Enter_Map::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 map_tid = 1;
  if (has_map_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_tid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Enter_Map::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 map_tid = 1;
  if (has_map_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->map_tid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Enter_Map::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 map_tid = 1;
    if (has_map_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_tid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Enter_Map::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Enter_Map* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Enter_Map*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Enter_Map::MergeFrom(const C2GS_Enter_Map& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_tid()) {
      set_map_tid(from.map_tid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Enter_Map::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Enter_Map::CopyFrom(const C2GS_Enter_Map& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Enter_Map::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Enter_Map::Swap(C2GS_Enter_Map* other) {
  if (other != this) {
    std::swap(map_tid_, other->map_tid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Enter_Map::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Enter_Map_descriptor_;
  metadata.reflection = C2GS_Enter_Map_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Leave_Map::kMapTidFieldNumber;
#endif  // !_MSC_VER

C2GS_Leave_Map::C2GS_Leave_Map()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Leave_Map::InitAsDefaultInstance() {
}

C2GS_Leave_Map::C2GS_Leave_Map(const C2GS_Leave_Map& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Leave_Map::SharedCtor() {
  _cached_size_ = 0;
  map_tid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Leave_Map::~C2GS_Leave_Map() {
  SharedDtor();
}

void C2GS_Leave_Map::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Leave_Map::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Leave_Map::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Leave_Map_descriptor_;
}

const C2GS_Leave_Map& C2GS_Leave_Map::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

C2GS_Leave_Map* C2GS_Leave_Map::default_instance_ = NULL;

C2GS_Leave_Map* C2GS_Leave_Map::New() const {
  return new C2GS_Leave_Map;
}

void C2GS_Leave_Map::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_tid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Leave_Map::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 map_tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_tid_)));
          set_has_map_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Leave_Map::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 map_tid = 1;
  if (has_map_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_tid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Leave_Map::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 map_tid = 1;
  if (has_map_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->map_tid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Leave_Map::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 map_tid = 1;
    if (has_map_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_tid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Leave_Map::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Leave_Map* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Leave_Map*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Leave_Map::MergeFrom(const C2GS_Leave_Map& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_tid()) {
      set_map_tid(from.map_tid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Leave_Map::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Leave_Map::CopyFrom(const C2GS_Leave_Map& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Leave_Map::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Leave_Map::Swap(C2GS_Leave_Map* other) {
  if (other != this) {
    std::swap(map_tid_, other->map_tid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Leave_Map::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Leave_Map_descriptor_;
  metadata.reflection = C2GS_Leave_Map_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Auto_Attack::kHeroIdsFieldNumber;
const int C2GS_Auto_Attack::kCityIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Auto_Attack::C2GS_Auto_Attack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Auto_Attack::InitAsDefaultInstance() {
}

C2GS_Auto_Attack::C2GS_Auto_Attack(const C2GS_Auto_Attack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Auto_Attack::SharedCtor() {
  _cached_size_ = 0;
  city_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Auto_Attack::~C2GS_Auto_Attack() {
  SharedDtor();
}

void C2GS_Auto_Attack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Auto_Attack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Auto_Attack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Auto_Attack_descriptor_;
}

const C2GS_Auto_Attack& C2GS_Auto_Attack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

C2GS_Auto_Attack* C2GS_Auto_Attack::default_instance_ = NULL;

C2GS_Auto_Attack* C2GS_Auto_Attack::New() const {
  return new C2GS_Auto_Attack;
}

void C2GS_Auto_Attack::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    city_id_ = 0u;
  }
  hero_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Auto_Attack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 hero_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_hero_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hero_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_hero_ids;
        if (input->ExpectTag(16)) goto parse_city_id;
        break;
      }

      // required uint32 city_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Auto_Attack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 hero_ids = 1;
  for (int i = 0; i < this->hero_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->hero_ids(i), output);
  }

  // required uint32 city_id = 2;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->city_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Auto_Attack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 hero_ids = 1;
  for (int i = 0; i < this->hero_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->hero_ids(i), target);
  }

  // required uint32 city_id = 2;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->city_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Auto_Attack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 city_id = 2;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

  }
  // repeated uint32 hero_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->hero_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hero_ids(i));
    }
    total_size += 1 * this->hero_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Auto_Attack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Auto_Attack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Auto_Attack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Auto_Attack::MergeFrom(const C2GS_Auto_Attack& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_ids_.MergeFrom(from.hero_ids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Auto_Attack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Auto_Attack::CopyFrom(const C2GS_Auto_Attack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Auto_Attack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void C2GS_Auto_Attack::Swap(C2GS_Auto_Attack* other) {
  if (other != this) {
    hero_ids_.Swap(&other->hero_ids_);
    std::swap(city_id_, other->city_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Auto_Attack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Auto_Attack_descriptor_;
  metadata.reflection = C2GS_Auto_Attack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Hero_Move::kCharIdFieldNumber;
const int C2GS_Hero_Move::kCityIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Hero_Move::C2GS_Hero_Move()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Hero_Move::InitAsDefaultInstance() {
}

C2GS_Hero_Move::C2GS_Hero_Move(const C2GS_Hero_Move& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Hero_Move::SharedCtor() {
  _cached_size_ = 0;
  char_id_ = 0u;
  city_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Hero_Move::~C2GS_Hero_Move() {
  SharedDtor();
}

void C2GS_Hero_Move::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Hero_Move::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Hero_Move::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Hero_Move_descriptor_;
}

const C2GS_Hero_Move& C2GS_Hero_Move::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

C2GS_Hero_Move* C2GS_Hero_Move::default_instance_ = NULL;

C2GS_Hero_Move* C2GS_Hero_Move::New() const {
  return new C2GS_Hero_Move;
}

void C2GS_Hero_Move::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    char_id_ = 0u;
    city_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Hero_Move::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 char_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_city_id;
        break;
      }

      // required uint32 city_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Hero_Move::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 char_id = 1;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->char_id(), output);
  }

  // required uint32 city_id = 2;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->city_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Hero_Move::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 char_id = 1;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->char_id(), target);
  }

  // required uint32 city_id = 2;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->city_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Hero_Move::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 char_id = 1;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_id());
    }

    // required uint32 city_id = 2;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Hero_Move::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Hero_Move* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Hero_Move*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Hero_Move::MergeFrom(const C2GS_Hero_Move& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Hero_Move::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Hero_Move::CopyFrom(const C2GS_Hero_Move& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Hero_Move::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2GS_Hero_Move::Swap(C2GS_Hero_Move* other) {
  if (other != this) {
    std::swap(char_id_, other->char_id_);
    std::swap(city_id_, other->city_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Hero_Move::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Hero_Move_descriptor_;
  metadata.reflection = C2GS_Hero_Move_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Hero_Move::kCharIdFieldNumber;
const int GS2C_Hero_Move::kCityIdFieldNumber;
#endif  // !_MSC_VER

GS2C_Hero_Move::GS2C_Hero_Move()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Hero_Move::InitAsDefaultInstance() {
}

GS2C_Hero_Move::GS2C_Hero_Move(const GS2C_Hero_Move& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Hero_Move::SharedCtor() {
  _cached_size_ = 0;
  char_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Hero_Move::~GS2C_Hero_Move() {
  SharedDtor();
}

void GS2C_Hero_Move::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Hero_Move::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Hero_Move::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Hero_Move_descriptor_;
}

const GS2C_Hero_Move& GS2C_Hero_Move::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

GS2C_Hero_Move* GS2C_Hero_Move::default_instance_ = NULL;

GS2C_Hero_Move* GS2C_Hero_Move::New() const {
  return new GS2C_Hero_Move;
}

void GS2C_Hero_Move::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    char_id_ = 0u;
  }
  city_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Hero_Move::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 char_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_city_id;
        break;
      }

      // repeated uint32 city_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_city_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_city_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_city_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Hero_Move::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 char_id = 1;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->char_id(), output);
  }

  // repeated uint32 city_id = 2;
  for (int i = 0; i < this->city_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->city_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Hero_Move::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 char_id = 1;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->char_id(), target);
  }

  // repeated uint32 city_id = 2;
  for (int i = 0; i < this->city_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->city_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Hero_Move::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 char_id = 1;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_id());
    }

  }
  // repeated uint32 city_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->city_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->city_id(i));
    }
    total_size += 1 * this->city_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Hero_Move::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Hero_Move* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Hero_Move*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Hero_Move::MergeFrom(const GS2C_Hero_Move& from) {
  GOOGLE_CHECK_NE(&from, this);
  city_id_.MergeFrom(from.city_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Hero_Move::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Hero_Move::CopyFrom(const GS2C_Hero_Move& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Hero_Move::IsInitialized() const {

  return true;
}

void GS2C_Hero_Move::Swap(GS2C_Hero_Move* other) {
  if (other != this) {
    std::swap(char_id_, other->char_id_);
    city_id_.Swap(&other->city_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Hero_Move::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Hero_Move_descriptor_;
  metadata.reflection = GS2C_Hero_Move_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_HERO_STOP_MOVE::kCharIdFieldNumber;
#endif  // !_MSC_VER

C2GS_HERO_STOP_MOVE::C2GS_HERO_STOP_MOVE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_HERO_STOP_MOVE::InitAsDefaultInstance() {
}

C2GS_HERO_STOP_MOVE::C2GS_HERO_STOP_MOVE(const C2GS_HERO_STOP_MOVE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_HERO_STOP_MOVE::SharedCtor() {
  _cached_size_ = 0;
  char_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_HERO_STOP_MOVE::~C2GS_HERO_STOP_MOVE() {
  SharedDtor();
}

void C2GS_HERO_STOP_MOVE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_HERO_STOP_MOVE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_HERO_STOP_MOVE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_HERO_STOP_MOVE_descriptor_;
}

const C2GS_HERO_STOP_MOVE& C2GS_HERO_STOP_MOVE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

C2GS_HERO_STOP_MOVE* C2GS_HERO_STOP_MOVE::default_instance_ = NULL;

C2GS_HERO_STOP_MOVE* C2GS_HERO_STOP_MOVE::New() const {
  return new C2GS_HERO_STOP_MOVE;
}

void C2GS_HERO_STOP_MOVE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    char_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_HERO_STOP_MOVE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 char_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_HERO_STOP_MOVE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 char_id = 1;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->char_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_HERO_STOP_MOVE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 char_id = 1;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->char_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_HERO_STOP_MOVE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 char_id = 1;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_HERO_STOP_MOVE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_HERO_STOP_MOVE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_HERO_STOP_MOVE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_HERO_STOP_MOVE::MergeFrom(const C2GS_HERO_STOP_MOVE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_HERO_STOP_MOVE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_HERO_STOP_MOVE::CopyFrom(const C2GS_HERO_STOP_MOVE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_HERO_STOP_MOVE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_HERO_STOP_MOVE::Swap(C2GS_HERO_STOP_MOVE* other) {
  if (other != this) {
    std::swap(char_id_, other->char_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_HERO_STOP_MOVE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_HERO_STOP_MOVE_descriptor_;
  metadata.reflection = C2GS_HERO_STOP_MOVE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Hero_Pos::kCharIdFieldNumber;
const int GS2C_Hero_Pos::kCityIdFieldNumber;
const int GS2C_Hero_Pos::kIsJumpFieldNumber;
const int GS2C_Hero_Pos::kIsMoveShutdownFieldNumber;
#endif  // !_MSC_VER

GS2C_Hero_Pos::GS2C_Hero_Pos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Hero_Pos::InitAsDefaultInstance() {
}

GS2C_Hero_Pos::GS2C_Hero_Pos(const GS2C_Hero_Pos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Hero_Pos::SharedCtor() {
  _cached_size_ = 0;
  char_id_ = 0u;
  city_id_ = 0u;
  is_jump_ = false;
  is_move_shutdown_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Hero_Pos::~GS2C_Hero_Pos() {
  SharedDtor();
}

void GS2C_Hero_Pos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Hero_Pos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Hero_Pos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Hero_Pos_descriptor_;
}

const GS2C_Hero_Pos& GS2C_Hero_Pos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

GS2C_Hero_Pos* GS2C_Hero_Pos::default_instance_ = NULL;

GS2C_Hero_Pos* GS2C_Hero_Pos::New() const {
  return new GS2C_Hero_Pos;
}

void GS2C_Hero_Pos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    char_id_ = 0u;
    city_id_ = 0u;
    is_jump_ = false;
    is_move_shutdown_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Hero_Pos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 char_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_city_id;
        break;
      }

      // required uint32 city_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_jump;
        break;
      }

      // optional bool is_jump = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_jump:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_jump_)));
          set_has_is_jump();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_move_shutdown;
        break;
      }

      // optional bool is_move_shutdown = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_move_shutdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_move_shutdown_)));
          set_has_is_move_shutdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Hero_Pos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 char_id = 1;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->char_id(), output);
  }

  // required uint32 city_id = 2;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->city_id(), output);
  }

  // optional bool is_jump = 3;
  if (has_is_jump()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_jump(), output);
  }

  // optional bool is_move_shutdown = 4;
  if (has_is_move_shutdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_move_shutdown(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Hero_Pos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 char_id = 1;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->char_id(), target);
  }

  // required uint32 city_id = 2;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->city_id(), target);
  }

  // optional bool is_jump = 3;
  if (has_is_jump()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_jump(), target);
  }

  // optional bool is_move_shutdown = 4;
  if (has_is_move_shutdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_move_shutdown(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Hero_Pos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 char_id = 1;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_id());
    }

    // required uint32 city_id = 2;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

    // optional bool is_jump = 3;
    if (has_is_jump()) {
      total_size += 1 + 1;
    }

    // optional bool is_move_shutdown = 4;
    if (has_is_move_shutdown()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Hero_Pos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Hero_Pos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Hero_Pos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Hero_Pos::MergeFrom(const GS2C_Hero_Pos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
    if (from.has_is_jump()) {
      set_is_jump(from.is_jump());
    }
    if (from.has_is_move_shutdown()) {
      set_is_move_shutdown(from.is_move_shutdown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Hero_Pos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Hero_Pos::CopyFrom(const GS2C_Hero_Pos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Hero_Pos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GS2C_Hero_Pos::Swap(GS2C_Hero_Pos* other) {
  if (other != this) {
    std::swap(char_id_, other->char_id_);
    std::swap(city_id_, other->city_id_);
    std::swap(is_jump_, other->is_jump_);
    std::swap(is_move_shutdown_, other->is_move_shutdown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Hero_Pos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Hero_Pos_descriptor_;
  metadata.reflection = GS2C_Hero_Pos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_NPC_Pos::kHeroIdFieldNumber;
const int GS2C_NPC_Pos::kCityIdFieldNumber;
const int GS2C_NPC_Pos::kUniqueIdFieldNumber;
const int GS2C_NPC_Pos::kBelongCountryFieldNumber;
const int GS2C_NPC_Pos::kOrgCityIdFieldNumber;
#endif  // !_MSC_VER

GS2C_NPC_Pos::GS2C_NPC_Pos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_NPC_Pos::InitAsDefaultInstance() {
}

GS2C_NPC_Pos::GS2C_NPC_Pos(const GS2C_NPC_Pos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_NPC_Pos::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = 0u;
  city_id_ = 0u;
  unique_id_ = 0u;
  belongcountry_ = 0u;
  org_city_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_NPC_Pos::~GS2C_NPC_Pos() {
  SharedDtor();
}

void GS2C_NPC_Pos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_NPC_Pos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_NPC_Pos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_NPC_Pos_descriptor_;
}

const GS2C_NPC_Pos& GS2C_NPC_Pos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

GS2C_NPC_Pos* GS2C_NPC_Pos::default_instance_ = NULL;

GS2C_NPC_Pos* GS2C_NPC_Pos::New() const {
  return new GS2C_NPC_Pos;
}

void GS2C_NPC_Pos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = 0u;
    city_id_ = 0u;
    unique_id_ = 0u;
    belongcountry_ = 0u;
    org_city_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_NPC_Pos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_city_id;
        break;
      }

      // required uint32 city_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_unique_id;
        break;
      }

      // optional uint32 unique_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unique_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unique_id_)));
          set_has_unique_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_belongCountry;
        break;
      }

      // optional uint32 belongCountry = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_belongCountry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &belongcountry_)));
          set_has_belongcountry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_org_city_id;
        break;
      }

      // optional uint32 org_city_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_org_city_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &org_city_id_)));
          set_has_org_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_NPC_Pos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // required uint32 city_id = 2;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->city_id(), output);
  }

  // optional uint32 unique_id = 3;
  if (has_unique_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->unique_id(), output);
  }

  // optional uint32 belongCountry = 4;
  if (has_belongcountry()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->belongcountry(), output);
  }

  // optional uint32 org_city_id = 5;
  if (has_org_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->org_city_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_NPC_Pos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // required uint32 city_id = 2;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->city_id(), target);
  }

  // optional uint32 unique_id = 3;
  if (has_unique_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->unique_id(), target);
  }

  // optional uint32 belongCountry = 4;
  if (has_belongcountry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->belongcountry(), target);
  }

  // optional uint32 org_city_id = 5;
  if (has_org_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->org_city_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_NPC_Pos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // required uint32 city_id = 2;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

    // optional uint32 unique_id = 3;
    if (has_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unique_id());
    }

    // optional uint32 belongCountry = 4;
    if (has_belongcountry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->belongcountry());
    }

    // optional uint32 org_city_id = 5;
    if (has_org_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->org_city_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_NPC_Pos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_NPC_Pos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_NPC_Pos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_NPC_Pos::MergeFrom(const GS2C_NPC_Pos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
    if (from.has_unique_id()) {
      set_unique_id(from.unique_id());
    }
    if (from.has_belongcountry()) {
      set_belongcountry(from.belongcountry());
    }
    if (from.has_org_city_id()) {
      set_org_city_id(from.org_city_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_NPC_Pos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_NPC_Pos::CopyFrom(const GS2C_NPC_Pos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_NPC_Pos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GS2C_NPC_Pos::Swap(GS2C_NPC_Pos* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(city_id_, other->city_id_);
    std::swap(unique_id_, other->unique_id_);
    std::swap(belongcountry_, other->belongcountry_);
    std::swap(org_city_id_, other->org_city_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_NPC_Pos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_NPC_Pos_descriptor_;
  metadata.reflection = GS2C_NPC_Pos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_NPC_POS_LIST::kPosFieldNumber;
#endif  // !_MSC_VER

GS2C_NPC_POS_LIST::GS2C_NPC_POS_LIST()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_NPC_POS_LIST::InitAsDefaultInstance() {
}

GS2C_NPC_POS_LIST::GS2C_NPC_POS_LIST(const GS2C_NPC_POS_LIST& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_NPC_POS_LIST::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_NPC_POS_LIST::~GS2C_NPC_POS_LIST() {
  SharedDtor();
}

void GS2C_NPC_POS_LIST::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_NPC_POS_LIST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_NPC_POS_LIST::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_NPC_POS_LIST_descriptor_;
}

const GS2C_NPC_POS_LIST& GS2C_NPC_POS_LIST::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

GS2C_NPC_POS_LIST* GS2C_NPC_POS_LIST::default_instance_ = NULL;

GS2C_NPC_POS_LIST* GS2C_NPC_POS_LIST::New() const {
  return new GS2C_NPC_POS_LIST;
}

void GS2C_NPC_POS_LIST::Clear() {
  pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_NPC_POS_LIST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GS2C_NPC_Pos pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_NPC_POS_LIST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GS2C_NPC_Pos pos = 1;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_NPC_POS_LIST::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GS2C_NPC_Pos pos = 1;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_NPC_POS_LIST::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GS2C_NPC_Pos pos = 1;
  total_size += 1 * this->pos_size();
  for (int i = 0; i < this->pos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_NPC_POS_LIST::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_NPC_POS_LIST* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_NPC_POS_LIST*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_NPC_POS_LIST::MergeFrom(const GS2C_NPC_POS_LIST& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_.MergeFrom(from.pos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_NPC_POS_LIST::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_NPC_POS_LIST::CopyFrom(const GS2C_NPC_POS_LIST& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_NPC_POS_LIST::IsInitialized() const {

  for (int i = 0; i < pos_size(); i++) {
    if (!this->pos(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_NPC_POS_LIST::Swap(GS2C_NPC_POS_LIST* other) {
  if (other != this) {
    pos_.Swap(&other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_NPC_POS_LIST::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_NPC_POS_LIST_descriptor_;
  metadata.reflection = GS2C_NPC_POS_LIST_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Delete_Npc_World::kExpeidFieldNumber;
const int GS2C_Delete_Npc_World::kCityIdFieldNumber;
#endif  // !_MSC_VER

GS2C_Delete_Npc_World::GS2C_Delete_Npc_World()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Delete_Npc_World::InitAsDefaultInstance() {
}

GS2C_Delete_Npc_World::GS2C_Delete_Npc_World(const GS2C_Delete_Npc_World& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Delete_Npc_World::SharedCtor() {
  _cached_size_ = 0;
  expeid_ = 0u;
  city_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Delete_Npc_World::~GS2C_Delete_Npc_World() {
  SharedDtor();
}

void GS2C_Delete_Npc_World::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Delete_Npc_World::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Delete_Npc_World::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Delete_Npc_World_descriptor_;
}

const GS2C_Delete_Npc_World& GS2C_Delete_Npc_World::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

GS2C_Delete_Npc_World* GS2C_Delete_Npc_World::default_instance_ = NULL;

GS2C_Delete_Npc_World* GS2C_Delete_Npc_World::New() const {
  return new GS2C_Delete_Npc_World;
}

void GS2C_Delete_Npc_World::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    expeid_ = 0u;
    city_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Delete_Npc_World::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 expeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expeid_)));
          set_has_expeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_city_id;
        break;
      }

      // optional uint32 city_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Delete_Npc_World::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 expeid = 1;
  if (has_expeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->expeid(), output);
  }

  // optional uint32 city_id = 2;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->city_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Delete_Npc_World::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 expeid = 1;
  if (has_expeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->expeid(), target);
  }

  // optional uint32 city_id = 2;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->city_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Delete_Npc_World::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 expeid = 1;
    if (has_expeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expeid());
    }

    // optional uint32 city_id = 2;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Delete_Npc_World::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Delete_Npc_World* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Delete_Npc_World*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Delete_Npc_World::MergeFrom(const GS2C_Delete_Npc_World& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expeid()) {
      set_expeid(from.expeid());
    }
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Delete_Npc_World::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Delete_Npc_World::CopyFrom(const GS2C_Delete_Npc_World& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Delete_Npc_World::IsInitialized() const {

  return true;
}

void GS2C_Delete_Npc_World::Swap(GS2C_Delete_Npc_World* other) {
  if (other != this) {
    std::swap(expeid_, other->expeid_);
    std::swap(city_id_, other->city_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Delete_Npc_World::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Delete_Npc_World_descriptor_;
  metadata.reflection = GS2C_Delete_Npc_World_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Expedition_Army_Info::kExpeditionIdFieldNumber;
const int GS2C_Expedition_Army_Info::kCityIdFieldNumber;
const int GS2C_Expedition_Army_Info::kHeroIdFieldNumber;
const int GS2C_Expedition_Army_Info::kOrgCityIdFieldNumber;
#endif  // !_MSC_VER

GS2C_Expedition_Army_Info::GS2C_Expedition_Army_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Expedition_Army_Info::InitAsDefaultInstance() {
}

GS2C_Expedition_Army_Info::GS2C_Expedition_Army_Info(const GS2C_Expedition_Army_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Expedition_Army_Info::SharedCtor() {
  _cached_size_ = 0;
  expedition_id_ = 0u;
  city_id_ = 0u;
  hero_id_ = 0u;
  org_city_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Expedition_Army_Info::~GS2C_Expedition_Army_Info() {
  SharedDtor();
}

void GS2C_Expedition_Army_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Expedition_Army_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Expedition_Army_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Expedition_Army_Info_descriptor_;
}

const GS2C_Expedition_Army_Info& GS2C_Expedition_Army_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

GS2C_Expedition_Army_Info* GS2C_Expedition_Army_Info::default_instance_ = NULL;

GS2C_Expedition_Army_Info* GS2C_Expedition_Army_Info::New() const {
  return new GS2C_Expedition_Army_Info;
}

void GS2C_Expedition_Army_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    expedition_id_ = 0u;
    city_id_ = 0u;
    hero_id_ = 0u;
    org_city_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Expedition_Army_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 expedition_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expedition_id_)));
          set_has_expedition_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_city_id;
        break;
      }

      // required uint32 city_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_id;
        break;
      }

      // required uint32 hero_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_org_city_id;
        break;
      }

      // optional uint32 org_city_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_org_city_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &org_city_id_)));
          set_has_org_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Expedition_Army_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 expedition_id = 1;
  if (has_expedition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->expedition_id(), output);
  }

  // required uint32 city_id = 2;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->city_id(), output);
  }

  // required uint32 hero_id = 3;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  // optional uint32 org_city_id = 4;
  if (has_org_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->org_city_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Expedition_Army_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 expedition_id = 1;
  if (has_expedition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->expedition_id(), target);
  }

  // required uint32 city_id = 2;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->city_id(), target);
  }

  // required uint32 hero_id = 3;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  // optional uint32 org_city_id = 4;
  if (has_org_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->org_city_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Expedition_Army_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 expedition_id = 1;
    if (has_expedition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expedition_id());
    }

    // required uint32 city_id = 2;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

    // required uint32 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 org_city_id = 4;
    if (has_org_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->org_city_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Expedition_Army_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Expedition_Army_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Expedition_Army_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Expedition_Army_Info::MergeFrom(const GS2C_Expedition_Army_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expedition_id()) {
      set_expedition_id(from.expedition_id());
    }
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_org_city_id()) {
      set_org_city_id(from.org_city_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Expedition_Army_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Expedition_Army_Info::CopyFrom(const GS2C_Expedition_Army_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Expedition_Army_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GS2C_Expedition_Army_Info::Swap(GS2C_Expedition_Army_Info* other) {
  if (other != this) {
    std::swap(expedition_id_, other->expedition_id_);
    std::swap(city_id_, other->city_id_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(org_city_id_, other->org_city_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Expedition_Army_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Expedition_Army_Info_descriptor_;
  metadata.reflection = GS2C_Expedition_Army_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Donate_City::kCityIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Donate_City::C2GS_Donate_City()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Donate_City::InitAsDefaultInstance() {
}

C2GS_Donate_City::C2GS_Donate_City(const C2GS_Donate_City& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Donate_City::SharedCtor() {
  _cached_size_ = 0;
  city_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Donate_City::~C2GS_Donate_City() {
  SharedDtor();
}

void C2GS_Donate_City::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Donate_City::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Donate_City::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Donate_City_descriptor_;
}

const C2GS_Donate_City& C2GS_Donate_City::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

C2GS_Donate_City* C2GS_Donate_City::default_instance_ = NULL;

C2GS_Donate_City* C2GS_Donate_City::New() const {
  return new C2GS_Donate_City;
}

void C2GS_Donate_City::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    city_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Donate_City::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 city_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Donate_City::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->city_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Donate_City::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->city_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Donate_City::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 city_id = 1;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Donate_City::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Donate_City* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Donate_City*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Donate_City::MergeFrom(const C2GS_Donate_City& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Donate_City::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Donate_City::CopyFrom(const C2GS_Donate_City& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Donate_City::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Donate_City::Swap(C2GS_Donate_City* other) {
  if (other != this) {
    std::swap(city_id_, other->city_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Donate_City::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Donate_City_descriptor_;
  metadata.reflection = C2GS_Donate_City_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Train_Soldier::kTrainIndexFieldNumber;
#endif  // !_MSC_VER

C2GS_Train_Soldier::C2GS_Train_Soldier()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Train_Soldier::InitAsDefaultInstance() {
}

C2GS_Train_Soldier::C2GS_Train_Soldier(const C2GS_Train_Soldier& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Train_Soldier::SharedCtor() {
  _cached_size_ = 0;
  train_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Train_Soldier::~C2GS_Train_Soldier() {
  SharedDtor();
}

void C2GS_Train_Soldier::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Train_Soldier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Train_Soldier::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Train_Soldier_descriptor_;
}

const C2GS_Train_Soldier& C2GS_Train_Soldier::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

C2GS_Train_Soldier* C2GS_Train_Soldier::default_instance_ = NULL;

C2GS_Train_Soldier* C2GS_Train_Soldier::New() const {
  return new C2GS_Train_Soldier;
}

void C2GS_Train_Soldier::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    train_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Train_Soldier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 train_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &train_index_)));
          set_has_train_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Train_Soldier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 train_index = 1;
  if (has_train_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->train_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Train_Soldier::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 train_index = 1;
  if (has_train_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->train_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Train_Soldier::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 train_index = 1;
    if (has_train_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->train_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Train_Soldier::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Train_Soldier* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Train_Soldier*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Train_Soldier::MergeFrom(const C2GS_Train_Soldier& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_train_index()) {
      set_train_index(from.train_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Train_Soldier::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Train_Soldier::CopyFrom(const C2GS_Train_Soldier& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Train_Soldier::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Train_Soldier::Swap(C2GS_Train_Soldier* other) {
  if (other != this) {
    std::swap(train_index_, other->train_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Train_Soldier::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Train_Soldier_descriptor_;
  metadata.reflection = C2GS_Train_Soldier_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_StartTunTian::kHeroidFieldNumber;
const int C2GS_StartTunTian::kCityidFieldNumber;
#endif  // !_MSC_VER

C2GS_StartTunTian::C2GS_StartTunTian()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_StartTunTian::InitAsDefaultInstance() {
}

C2GS_StartTunTian::C2GS_StartTunTian(const C2GS_StartTunTian& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_StartTunTian::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  cityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_StartTunTian::~C2GS_StartTunTian() {
  SharedDtor();
}

void C2GS_StartTunTian::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_StartTunTian::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_StartTunTian::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_StartTunTian_descriptor_;
}

const C2GS_StartTunTian& C2GS_StartTunTian::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

C2GS_StartTunTian* C2GS_StartTunTian::default_instance_ = NULL;

C2GS_StartTunTian* C2GS_StartTunTian::New() const {
  return new C2GS_StartTunTian;
}

void C2GS_StartTunTian::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    cityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_StartTunTian::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 heroid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cityid;
        break;
      }

      // required uint32 cityid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cityid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_StartTunTian::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 heroid = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // required uint32 cityid = 2;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cityid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_StartTunTian::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 heroid = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // required uint32 cityid = 2;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cityid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_StartTunTian::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 heroid = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // required uint32 cityid = 2;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_StartTunTian::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_StartTunTian* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_StartTunTian*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_StartTunTian::MergeFrom(const C2GS_StartTunTian& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_StartTunTian::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_StartTunTian::CopyFrom(const C2GS_StartTunTian& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_StartTunTian::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2GS_StartTunTian::Swap(C2GS_StartTunTian* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(cityid_, other->cityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_StartTunTian::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_StartTunTian_descriptor_;
  metadata.reflection = C2GS_StartTunTian_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_StartTunTian::kIsTuntianSucFieldNumber;
const int GS2C_StartTunTian::kStartTimeFieldNumber;
const int GS2C_StartTunTian::kHeroidFieldNumber;
#endif  // !_MSC_VER

GS2C_StartTunTian::GS2C_StartTunTian()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_StartTunTian::InitAsDefaultInstance() {
}

GS2C_StartTunTian::GS2C_StartTunTian(const GS2C_StartTunTian& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_StartTunTian::SharedCtor() {
  _cached_size_ = 0;
  istuntiansuc_ = false;
  starttime_ = GOOGLE_ULONGLONG(0);
  heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_StartTunTian::~GS2C_StartTunTian() {
  SharedDtor();
}

void GS2C_StartTunTian::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_StartTunTian::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_StartTunTian::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_StartTunTian_descriptor_;
}

const GS2C_StartTunTian& GS2C_StartTunTian::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

GS2C_StartTunTian* GS2C_StartTunTian::default_instance_ = NULL;

GS2C_StartTunTian* GS2C_StartTunTian::New() const {
  return new GS2C_StartTunTian;
}

void GS2C_StartTunTian::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    istuntiansuc_ = false;
    starttime_ = GOOGLE_ULONGLONG(0);
    heroid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_StartTunTian::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isTuntianSuc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istuntiansuc_)));
          set_has_istuntiansuc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_startTime;
        break;
      }

      // optional uint64 startTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_heroid;
        break;
      }

      // optional uint32 heroid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_StartTunTian::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isTuntianSuc = 1;
  if (has_istuntiansuc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->istuntiansuc(), output);
  }

  // optional uint64 startTime = 2;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->starttime(), output);
  }

  // optional uint32 heroid = 3;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_StartTunTian::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isTuntianSuc = 1;
  if (has_istuntiansuc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->istuntiansuc(), target);
  }

  // optional uint64 startTime = 2;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->starttime(), target);
  }

  // optional uint32 heroid = 3;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_StartTunTian::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isTuntianSuc = 1;
    if (has_istuntiansuc()) {
      total_size += 1 + 1;
    }

    // optional uint64 startTime = 2;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional uint32 heroid = 3;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_StartTunTian::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_StartTunTian* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_StartTunTian*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_StartTunTian::MergeFrom(const GS2C_StartTunTian& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_istuntiansuc()) {
      set_istuntiansuc(from.istuntiansuc());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_StartTunTian::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_StartTunTian::CopyFrom(const GS2C_StartTunTian& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_StartTunTian::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_StartTunTian::Swap(GS2C_StartTunTian* other) {
  if (other != this) {
    std::swap(istuntiansuc_, other->istuntiansuc_);
    std::swap(starttime_, other->starttime_);
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_StartTunTian::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_StartTunTian_descriptor_;
  metadata.reflection = GS2C_StartTunTian_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_TunTianReward::kFoodCountFieldNumber;
#endif  // !_MSC_VER

GS2C_TunTianReward::GS2C_TunTianReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_TunTianReward::InitAsDefaultInstance() {
}

GS2C_TunTianReward::GS2C_TunTianReward(const GS2C_TunTianReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_TunTianReward::SharedCtor() {
  _cached_size_ = 0;
  food_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_TunTianReward::~GS2C_TunTianReward() {
  SharedDtor();
}

void GS2C_TunTianReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_TunTianReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_TunTianReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_TunTianReward_descriptor_;
}

const GS2C_TunTianReward& GS2C_TunTianReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

GS2C_TunTianReward* GS2C_TunTianReward::default_instance_ = NULL;

GS2C_TunTianReward* GS2C_TunTianReward::New() const {
  return new GS2C_TunTianReward;
}

void GS2C_TunTianReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    food_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_TunTianReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 food_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &food_count_)));
          set_has_food_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_TunTianReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 food_count = 1;
  if (has_food_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->food_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_TunTianReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 food_count = 1;
  if (has_food_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->food_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_TunTianReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 food_count = 1;
    if (has_food_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->food_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_TunTianReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_TunTianReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_TunTianReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_TunTianReward::MergeFrom(const GS2C_TunTianReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_food_count()) {
      set_food_count(from.food_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_TunTianReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_TunTianReward::CopyFrom(const GS2C_TunTianReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_TunTianReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_TunTianReward::Swap(GS2C_TunTianReward* other) {
  if (other != this) {
    std::swap(food_count_, other->food_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_TunTianReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_TunTianReward_descriptor_;
  metadata.reflection = GS2C_TunTianReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_TunTian_Donate_Ret::kDonateretFieldNumber;
const int GS2C_TunTian_Donate_Ret::kCdEndTimeFieldNumber;
const int GS2C_TunTian_Donate_Ret::kTuntianlevelFieldNumber;
const int GS2C_TunTian_Donate_Ret::kTuntianexpFieldNumber;
#endif  // !_MSC_VER

GS2C_TunTian_Donate_Ret::GS2C_TunTian_Donate_Ret()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_TunTian_Donate_Ret::InitAsDefaultInstance() {
}

GS2C_TunTian_Donate_Ret::GS2C_TunTian_Donate_Ret(const GS2C_TunTian_Donate_Ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_TunTian_Donate_Ret::SharedCtor() {
  _cached_size_ = 0;
  donateret_ = 0u;
  cdendtime_ = GOOGLE_ULONGLONG(0);
  tuntianlevel_ = 0u;
  tuntianexp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_TunTian_Donate_Ret::~GS2C_TunTian_Donate_Ret() {
  SharedDtor();
}

void GS2C_TunTian_Donate_Ret::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_TunTian_Donate_Ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_TunTian_Donate_Ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_TunTian_Donate_Ret_descriptor_;
}

const GS2C_TunTian_Donate_Ret& GS2C_TunTian_Donate_Ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

GS2C_TunTian_Donate_Ret* GS2C_TunTian_Donate_Ret::default_instance_ = NULL;

GS2C_TunTian_Donate_Ret* GS2C_TunTian_Donate_Ret::New() const {
  return new GS2C_TunTian_Donate_Ret;
}

void GS2C_TunTian_Donate_Ret::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    donateret_ = 0u;
    cdendtime_ = GOOGLE_ULONGLONG(0);
    tuntianlevel_ = 0u;
    tuntianexp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_TunTian_Donate_Ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 donateret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donateret_)));
          set_has_donateret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cdEndTime;
        break;
      }

      // optional uint64 cdEndTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cdEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cdendtime_)));
          set_has_cdendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tuntianlevel;
        break;
      }

      // optional uint32 tuntianlevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tuntianlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tuntianlevel_)));
          set_has_tuntianlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tuntianexp;
        break;
      }

      // optional uint64 tuntianexp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tuntianexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tuntianexp_)));
          set_has_tuntianexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_TunTian_Donate_Ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 donateret = 1;
  if (has_donateret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->donateret(), output);
  }

  // optional uint64 cdEndTime = 2;
  if (has_cdendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cdendtime(), output);
  }

  // optional uint32 tuntianlevel = 3;
  if (has_tuntianlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tuntianlevel(), output);
  }

  // optional uint64 tuntianexp = 4;
  if (has_tuntianexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->tuntianexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_TunTian_Donate_Ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 donateret = 1;
  if (has_donateret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->donateret(), target);
  }

  // optional uint64 cdEndTime = 2;
  if (has_cdendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cdendtime(), target);
  }

  // optional uint32 tuntianlevel = 3;
  if (has_tuntianlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tuntianlevel(), target);
  }

  // optional uint64 tuntianexp = 4;
  if (has_tuntianexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->tuntianexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_TunTian_Donate_Ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 donateret = 1;
    if (has_donateret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donateret());
    }

    // optional uint64 cdEndTime = 2;
    if (has_cdendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cdendtime());
    }

    // optional uint32 tuntianlevel = 3;
    if (has_tuntianlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tuntianlevel());
    }

    // optional uint64 tuntianexp = 4;
    if (has_tuntianexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tuntianexp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_TunTian_Donate_Ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_TunTian_Donate_Ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_TunTian_Donate_Ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_TunTian_Donate_Ret::MergeFrom(const GS2C_TunTian_Donate_Ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_donateret()) {
      set_donateret(from.donateret());
    }
    if (from.has_cdendtime()) {
      set_cdendtime(from.cdendtime());
    }
    if (from.has_tuntianlevel()) {
      set_tuntianlevel(from.tuntianlevel());
    }
    if (from.has_tuntianexp()) {
      set_tuntianexp(from.tuntianexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_TunTian_Donate_Ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_TunTian_Donate_Ret::CopyFrom(const GS2C_TunTian_Donate_Ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_TunTian_Donate_Ret::IsInitialized() const {

  return true;
}

void GS2C_TunTian_Donate_Ret::Swap(GS2C_TunTian_Donate_Ret* other) {
  if (other != this) {
    std::swap(donateret_, other->donateret_);
    std::swap(cdendtime_, other->cdendtime_);
    std::swap(tuntianlevel_, other->tuntianlevel_);
    std::swap(tuntianexp_, other->tuntianexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_TunTian_Donate_Ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_TunTian_Donate_Ret_descriptor_;
  metadata.reflection = GS2C_TunTian_Donate_Ret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Clear_Fresh_TunTian::kIsClearFieldNumber;
#endif  // !_MSC_VER

C2GS_Clear_Fresh_TunTian::C2GS_Clear_Fresh_TunTian()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Clear_Fresh_TunTian::InitAsDefaultInstance() {
}

C2GS_Clear_Fresh_TunTian::C2GS_Clear_Fresh_TunTian(const C2GS_Clear_Fresh_TunTian& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Clear_Fresh_TunTian::SharedCtor() {
  _cached_size_ = 0;
  isclear_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Clear_Fresh_TunTian::~C2GS_Clear_Fresh_TunTian() {
  SharedDtor();
}

void C2GS_Clear_Fresh_TunTian::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Clear_Fresh_TunTian::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Clear_Fresh_TunTian::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Clear_Fresh_TunTian_descriptor_;
}

const C2GS_Clear_Fresh_TunTian& C2GS_Clear_Fresh_TunTian::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

C2GS_Clear_Fresh_TunTian* C2GS_Clear_Fresh_TunTian::default_instance_ = NULL;

C2GS_Clear_Fresh_TunTian* C2GS_Clear_Fresh_TunTian::New() const {
  return new C2GS_Clear_Fresh_TunTian;
}

void C2GS_Clear_Fresh_TunTian::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isclear_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Clear_Fresh_TunTian::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isClear = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isclear_)));
          set_has_isclear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Clear_Fresh_TunTian::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool isClear = 1;
  if (has_isclear()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isclear(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Clear_Fresh_TunTian::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isClear = 1;
  if (has_isclear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isclear(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Clear_Fresh_TunTian::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isClear = 1;
    if (has_isclear()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Clear_Fresh_TunTian::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Clear_Fresh_TunTian* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Clear_Fresh_TunTian*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Clear_Fresh_TunTian::MergeFrom(const C2GS_Clear_Fresh_TunTian& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isclear()) {
      set_isclear(from.isclear());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Clear_Fresh_TunTian::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Clear_Fresh_TunTian::CopyFrom(const C2GS_Clear_Fresh_TunTian& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Clear_Fresh_TunTian::IsInitialized() const {

  return true;
}

void C2GS_Clear_Fresh_TunTian::Swap(C2GS_Clear_Fresh_TunTian* other) {
  if (other != this) {
    std::swap(isclear_, other->isclear_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Clear_Fresh_TunTian::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Clear_Fresh_TunTian_descriptor_;
  metadata.reflection = C2GS_Clear_Fresh_TunTian_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Clear_Tuntian_CD_Ret::kIsClearSuccFieldNumber;
const int GS2C_Clear_Tuntian_CD_Ret::kCdEndTimeFieldNumber;
const int GS2C_Clear_Tuntian_CD_Ret::kTuntianlevelFieldNumber;
const int GS2C_Clear_Tuntian_CD_Ret::kTuntianexpFieldNumber;
#endif  // !_MSC_VER

GS2C_Clear_Tuntian_CD_Ret::GS2C_Clear_Tuntian_CD_Ret()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Clear_Tuntian_CD_Ret::InitAsDefaultInstance() {
}

GS2C_Clear_Tuntian_CD_Ret::GS2C_Clear_Tuntian_CD_Ret(const GS2C_Clear_Tuntian_CD_Ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Clear_Tuntian_CD_Ret::SharedCtor() {
  _cached_size_ = 0;
  isclearsucc_ = false;
  cdendtime_ = GOOGLE_ULONGLONG(0);
  tuntianlevel_ = 0u;
  tuntianexp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Clear_Tuntian_CD_Ret::~GS2C_Clear_Tuntian_CD_Ret() {
  SharedDtor();
}

void GS2C_Clear_Tuntian_CD_Ret::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Clear_Tuntian_CD_Ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Clear_Tuntian_CD_Ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Clear_Tuntian_CD_Ret_descriptor_;
}

const GS2C_Clear_Tuntian_CD_Ret& GS2C_Clear_Tuntian_CD_Ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

GS2C_Clear_Tuntian_CD_Ret* GS2C_Clear_Tuntian_CD_Ret::default_instance_ = NULL;

GS2C_Clear_Tuntian_CD_Ret* GS2C_Clear_Tuntian_CD_Ret::New() const {
  return new GS2C_Clear_Tuntian_CD_Ret;
}

void GS2C_Clear_Tuntian_CD_Ret::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isclearsucc_ = false;
    cdendtime_ = GOOGLE_ULONGLONG(0);
    tuntianlevel_ = 0u;
    tuntianexp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Clear_Tuntian_CD_Ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isClearSucc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isclearsucc_)));
          set_has_isclearsucc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cdEndTime;
        break;
      }

      // optional uint64 cdEndTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cdEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cdendtime_)));
          set_has_cdendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tuntianlevel;
        break;
      }

      // optional uint32 tuntianlevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tuntianlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tuntianlevel_)));
          set_has_tuntianlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tuntianexp;
        break;
      }

      // optional uint64 tuntianexp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tuntianexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tuntianexp_)));
          set_has_tuntianexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Clear_Tuntian_CD_Ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool isClearSucc = 1;
  if (has_isclearsucc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isclearsucc(), output);
  }

  // optional uint64 cdEndTime = 2;
  if (has_cdendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cdendtime(), output);
  }

  // optional uint32 tuntianlevel = 3;
  if (has_tuntianlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tuntianlevel(), output);
  }

  // optional uint64 tuntianexp = 4;
  if (has_tuntianexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->tuntianexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Clear_Tuntian_CD_Ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isClearSucc = 1;
  if (has_isclearsucc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isclearsucc(), target);
  }

  // optional uint64 cdEndTime = 2;
  if (has_cdendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cdendtime(), target);
  }

  // optional uint32 tuntianlevel = 3;
  if (has_tuntianlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tuntianlevel(), target);
  }

  // optional uint64 tuntianexp = 4;
  if (has_tuntianexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->tuntianexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Clear_Tuntian_CD_Ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isClearSucc = 1;
    if (has_isclearsucc()) {
      total_size += 1 + 1;
    }

    // optional uint64 cdEndTime = 2;
    if (has_cdendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cdendtime());
    }

    // optional uint32 tuntianlevel = 3;
    if (has_tuntianlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tuntianlevel());
    }

    // optional uint64 tuntianexp = 4;
    if (has_tuntianexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tuntianexp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Clear_Tuntian_CD_Ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Clear_Tuntian_CD_Ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Clear_Tuntian_CD_Ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Clear_Tuntian_CD_Ret::MergeFrom(const GS2C_Clear_Tuntian_CD_Ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isclearsucc()) {
      set_isclearsucc(from.isclearsucc());
    }
    if (from.has_cdendtime()) {
      set_cdendtime(from.cdendtime());
    }
    if (from.has_tuntianlevel()) {
      set_tuntianlevel(from.tuntianlevel());
    }
    if (from.has_tuntianexp()) {
      set_tuntianexp(from.tuntianexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Clear_Tuntian_CD_Ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Clear_Tuntian_CD_Ret::CopyFrom(const GS2C_Clear_Tuntian_CD_Ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Clear_Tuntian_CD_Ret::IsInitialized() const {

  return true;
}

void GS2C_Clear_Tuntian_CD_Ret::Swap(GS2C_Clear_Tuntian_CD_Ret* other) {
  if (other != this) {
    std::swap(isclearsucc_, other->isclearsucc_);
    std::swap(cdendtime_, other->cdendtime_);
    std::swap(tuntianlevel_, other->tuntianlevel_);
    std::swap(tuntianexp_, other->tuntianexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Clear_Tuntian_CD_Ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Clear_Tuntian_CD_Ret_descriptor_;
  metadata.reflection = GS2C_Clear_Tuntian_CD_Ret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_exp_get::kChatidFieldNumber;
const int hero_exp_get::kExpFieldNumber;
#endif  // !_MSC_VER

hero_exp_get::hero_exp_get()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_exp_get::InitAsDefaultInstance() {
}

hero_exp_get::hero_exp_get(const hero_exp_get& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_exp_get::SharedCtor() {
  _cached_size_ = 0;
  chatid_ = 0u;
  exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_exp_get::~hero_exp_get() {
  SharedDtor();
}

void hero_exp_get::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_exp_get::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_exp_get::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_exp_get_descriptor_;
}

const hero_exp_get& hero_exp_get::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

hero_exp_get* hero_exp_get::default_instance_ = NULL;

hero_exp_get* hero_exp_get::New() const {
  return new hero_exp_get;
}

void hero_exp_get::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chatid_ = 0u;
    exp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_exp_get::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chatid_)));
          set_has_chatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_exp_get::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 chatid = 1;
  if (has_chatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chatid(), output);
  }

  // optional uint32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_exp_get::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 chatid = 1;
  if (has_chatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chatid(), target);
  }

  // optional uint32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_exp_get::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 chatid = 1;
    if (has_chatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chatid());
    }

    // optional uint32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_exp_get::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_exp_get* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_exp_get*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_exp_get::MergeFrom(const hero_exp_get& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chatid()) {
      set_chatid(from.chatid());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_exp_get::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_exp_get::CopyFrom(const hero_exp_get& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_exp_get::IsInitialized() const {

  return true;
}

void hero_exp_get::Swap(hero_exp_get* other) {
  if (other != this) {
    std::swap(chatid_, other->chatid_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_exp_get::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_exp_get_descriptor_;
  metadata.reflection = hero_exp_get_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Train_Info::kIsTrainingFieldNumber;
const int GS2C_Train_Info::kHerosidFieldNumber;
const int GS2C_Train_Info::kTrainEndTimeFieldNumber;
const int GS2C_Train_Info::kTrainTypeFieldNumber;
const int GS2C_Train_Info::kExpGetFieldNumber;
#endif  // !_MSC_VER

GS2C_Train_Info::GS2C_Train_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Train_Info::InitAsDefaultInstance() {
}

GS2C_Train_Info::GS2C_Train_Info(const GS2C_Train_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Train_Info::SharedCtor() {
  _cached_size_ = 0;
  istraining_ = false;
  trainendtime_ = GOOGLE_ULONGLONG(0);
  traintype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Train_Info::~GS2C_Train_Info() {
  SharedDtor();
}

void GS2C_Train_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Train_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Train_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Train_Info_descriptor_;
}

const GS2C_Train_Info& GS2C_Train_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

GS2C_Train_Info* GS2C_Train_Info::default_instance_ = NULL;

GS2C_Train_Info* GS2C_Train_Info::New() const {
  return new GS2C_Train_Info;
}

void GS2C_Train_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    istraining_ = false;
    trainendtime_ = GOOGLE_ULONGLONG(0);
    traintype_ = 0u;
  }
  herosid_.Clear();
  expget_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Train_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isTraining = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istraining_)));
          set_has_istraining();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_herosid;
        break;
      }

      // repeated uint32 herosid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_herosid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_herosid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_herosid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_herosid;
        if (input->ExpectTag(24)) goto parse_trainEndTime;
        break;
      }

      // optional uint64 trainEndTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trainEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trainendtime_)));
          set_has_trainendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_trainType;
        break;
      }

      // optional uint32 trainType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trainType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &traintype_)));
          set_has_traintype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_expGet;
        break;
      }

      // repeated .pb.hero_exp_get expGet = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_expGet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_expget()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_expGet;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Train_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool isTraining = 1;
  if (has_istraining()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->istraining(), output);
  }

  // repeated uint32 herosid = 2;
  for (int i = 0; i < this->herosid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->herosid(i), output);
  }

  // optional uint64 trainEndTime = 3;
  if (has_trainendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->trainendtime(), output);
  }

  // optional uint32 trainType = 4;
  if (has_traintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->traintype(), output);
  }

  // repeated .pb.hero_exp_get expGet = 5;
  for (int i = 0; i < this->expget_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->expget(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Train_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isTraining = 1;
  if (has_istraining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->istraining(), target);
  }

  // repeated uint32 herosid = 2;
  for (int i = 0; i < this->herosid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->herosid(i), target);
  }

  // optional uint64 trainEndTime = 3;
  if (has_trainendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->trainendtime(), target);
  }

  // optional uint32 trainType = 4;
  if (has_traintype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->traintype(), target);
  }

  // repeated .pb.hero_exp_get expGet = 5;
  for (int i = 0; i < this->expget_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->expget(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Train_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isTraining = 1;
    if (has_istraining()) {
      total_size += 1 + 1;
    }

    // optional uint64 trainEndTime = 3;
    if (has_trainendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->trainendtime());
    }

    // optional uint32 trainType = 4;
    if (has_traintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->traintype());
    }

  }
  // repeated uint32 herosid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->herosid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->herosid(i));
    }
    total_size += 1 * this->herosid_size() + data_size;
  }

  // repeated .pb.hero_exp_get expGet = 5;
  total_size += 1 * this->expget_size();
  for (int i = 0; i < this->expget_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->expget(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Train_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Train_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Train_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Train_Info::MergeFrom(const GS2C_Train_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  herosid_.MergeFrom(from.herosid_);
  expget_.MergeFrom(from.expget_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_istraining()) {
      set_istraining(from.istraining());
    }
    if (from.has_trainendtime()) {
      set_trainendtime(from.trainendtime());
    }
    if (from.has_traintype()) {
      set_traintype(from.traintype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Train_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Train_Info::CopyFrom(const GS2C_Train_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Train_Info::IsInitialized() const {

  return true;
}

void GS2C_Train_Info::Swap(GS2C_Train_Info* other) {
  if (other != this) {
    std::swap(istraining_, other->istraining_);
    herosid_.Swap(&other->herosid_);
    std::swap(trainendtime_, other->trainendtime_);
    std::swap(traintype_, other->traintype_);
    expget_.Swap(&other->expget_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Train_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Train_Info_descriptor_;
  metadata.reflection = GS2C_Train_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Wild_Data::kFriendlinessFieldNumber;
const int Wild_Data::kInciteAmountFieldNumber;
const int Wild_Data::kCityIdFieldNumber;
const int Wild_Data::kCurBribeMoneyFieldNumber;
#endif  // !_MSC_VER

Wild_Data::Wild_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Wild_Data::InitAsDefaultInstance() {
}

Wild_Data::Wild_Data(const Wild_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Wild_Data::SharedCtor() {
  _cached_size_ = 0;
  friendliness_ = 0u;
  inciteamount_ = 0u;
  city_id_ = 0u;
  curbribemoney_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Wild_Data::~Wild_Data() {
  SharedDtor();
}

void Wild_Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Wild_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Wild_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Wild_Data_descriptor_;
}

const Wild_Data& Wild_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

Wild_Data* Wild_Data::default_instance_ = NULL;

Wild_Data* Wild_Data::New() const {
  return new Wild_Data;
}

void Wild_Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friendliness_ = 0u;
    inciteamount_ = 0u;
    city_id_ = 0u;
    curbribemoney_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Wild_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 friendliness = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friendliness_)));
          set_has_friendliness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_inciteAmount;
        break;
      }

      // optional uint32 inciteAmount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inciteAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inciteamount_)));
          set_has_inciteamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_city_id;
        break;
      }

      // optional uint32 city_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_curBribeMoney;
        break;
      }

      // optional uint32 curBribeMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curBribeMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curbribemoney_)));
          set_has_curbribemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Wild_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 friendliness = 1;
  if (has_friendliness()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->friendliness(), output);
  }

  // optional uint32 inciteAmount = 2;
  if (has_inciteamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->inciteamount(), output);
  }

  // optional uint32 city_id = 3;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->city_id(), output);
  }

  // optional uint32 curBribeMoney = 4;
  if (has_curbribemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->curbribemoney(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Wild_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 friendliness = 1;
  if (has_friendliness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->friendliness(), target);
  }

  // optional uint32 inciteAmount = 2;
  if (has_inciteamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->inciteamount(), target);
  }

  // optional uint32 city_id = 3;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->city_id(), target);
  }

  // optional uint32 curBribeMoney = 4;
  if (has_curbribemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->curbribemoney(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Wild_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 friendliness = 1;
    if (has_friendliness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friendliness());
    }

    // optional uint32 inciteAmount = 2;
    if (has_inciteamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inciteamount());
    }

    // optional uint32 city_id = 3;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

    // optional uint32 curBribeMoney = 4;
    if (has_curbribemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curbribemoney());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Wild_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Wild_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Wild_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Wild_Data::MergeFrom(const Wild_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendliness()) {
      set_friendliness(from.friendliness());
    }
    if (from.has_inciteamount()) {
      set_inciteamount(from.inciteamount());
    }
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
    if (from.has_curbribemoney()) {
      set_curbribemoney(from.curbribemoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Wild_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wild_Data::CopyFrom(const Wild_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wild_Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Wild_Data::Swap(Wild_Data* other) {
  if (other != this) {
    std::swap(friendliness_, other->friendliness_);
    std::swap(inciteamount_, other->inciteamount_);
    std::swap(city_id_, other->city_id_);
    std::swap(curbribemoney_, other->curbribemoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Wild_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Wild_Data_descriptor_;
  metadata.reflection = Wild_Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Wild_Data_Lst::kWildLstFieldNumber;
#endif  // !_MSC_VER

GS2C_Wild_Data_Lst::GS2C_Wild_Data_Lst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Wild_Data_Lst::InitAsDefaultInstance() {
}

GS2C_Wild_Data_Lst::GS2C_Wild_Data_Lst(const GS2C_Wild_Data_Lst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Wild_Data_Lst::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Wild_Data_Lst::~GS2C_Wild_Data_Lst() {
  SharedDtor();
}

void GS2C_Wild_Data_Lst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Wild_Data_Lst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Wild_Data_Lst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Wild_Data_Lst_descriptor_;
}

const GS2C_Wild_Data_Lst& GS2C_Wild_Data_Lst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

GS2C_Wild_Data_Lst* GS2C_Wild_Data_Lst::default_instance_ = NULL;

GS2C_Wild_Data_Lst* GS2C_Wild_Data_Lst::New() const {
  return new GS2C_Wild_Data_Lst;
}

void GS2C_Wild_Data_Lst::Clear() {
  wild_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Wild_Data_Lst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Wild_Data wild_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wild_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wild_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_wild_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Wild_Data_Lst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.Wild_Data wild_lst = 1;
  for (int i = 0; i < this->wild_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->wild_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Wild_Data_Lst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.Wild_Data wild_lst = 1;
  for (int i = 0; i < this->wild_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->wild_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Wild_Data_Lst::ByteSize() const {
  int total_size = 0;

  // repeated .pb.Wild_Data wild_lst = 1;
  total_size += 1 * this->wild_lst_size();
  for (int i = 0; i < this->wild_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wild_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Wild_Data_Lst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Wild_Data_Lst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Wild_Data_Lst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Wild_Data_Lst::MergeFrom(const GS2C_Wild_Data_Lst& from) {
  GOOGLE_CHECK_NE(&from, this);
  wild_lst_.MergeFrom(from.wild_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Wild_Data_Lst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Wild_Data_Lst::CopyFrom(const GS2C_Wild_Data_Lst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Wild_Data_Lst::IsInitialized() const {

  for (int i = 0; i < wild_lst_size(); i++) {
    if (!this->wild_lst(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Wild_Data_Lst::Swap(GS2C_Wild_Data_Lst* other) {
  if (other != this) {
    wild_lst_.Swap(&other->wild_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Wild_Data_Lst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Wild_Data_Lst_descriptor_;
  metadata.reflection = GS2C_Wild_Data_Lst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Bribe_City::kCityIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Bribe_City::C2GS_Bribe_City()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Bribe_City::InitAsDefaultInstance() {
}

C2GS_Bribe_City::C2GS_Bribe_City(const C2GS_Bribe_City& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Bribe_City::SharedCtor() {
  _cached_size_ = 0;
  city_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Bribe_City::~C2GS_Bribe_City() {
  SharedDtor();
}

void C2GS_Bribe_City::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Bribe_City::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Bribe_City::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Bribe_City_descriptor_;
}

const C2GS_Bribe_City& C2GS_Bribe_City::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

C2GS_Bribe_City* C2GS_Bribe_City::default_instance_ = NULL;

C2GS_Bribe_City* C2GS_Bribe_City::New() const {
  return new C2GS_Bribe_City;
}

void C2GS_Bribe_City::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    city_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Bribe_City::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 city_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Bribe_City::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->city_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Bribe_City::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->city_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Bribe_City::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 city_id = 1;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Bribe_City::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Bribe_City* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Bribe_City*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Bribe_City::MergeFrom(const C2GS_Bribe_City& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Bribe_City::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Bribe_City::CopyFrom(const C2GS_Bribe_City& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Bribe_City::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Bribe_City::Swap(C2GS_Bribe_City* other) {
  if (other != this) {
    std::swap(city_id_, other->city_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Bribe_City::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Bribe_City_descriptor_;
  metadata.reflection = C2GS_Bribe_City_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Incite_City::kCityIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Incite_City::C2GS_Incite_City()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Incite_City::InitAsDefaultInstance() {
}

C2GS_Incite_City::C2GS_Incite_City(const C2GS_Incite_City& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Incite_City::SharedCtor() {
  _cached_size_ = 0;
  city_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Incite_City::~C2GS_Incite_City() {
  SharedDtor();
}

void C2GS_Incite_City::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Incite_City::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Incite_City::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Incite_City_descriptor_;
}

const C2GS_Incite_City& C2GS_Incite_City::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

C2GS_Incite_City* C2GS_Incite_City::default_instance_ = NULL;

C2GS_Incite_City* C2GS_Incite_City::New() const {
  return new C2GS_Incite_City;
}

void C2GS_Incite_City::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    city_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Incite_City::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 city_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Incite_City::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->city_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Incite_City::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->city_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Incite_City::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 city_id = 1;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Incite_City::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Incite_City* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Incite_City*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Incite_City::MergeFrom(const C2GS_Incite_City& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Incite_City::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Incite_City::CopyFrom(const C2GS_Incite_City& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Incite_City::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Incite_City::Swap(C2GS_Incite_City* other) {
  if (other != this) {
    std::swap(city_id_, other->city_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Incite_City::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Incite_City_descriptor_;
  metadata.reflection = C2GS_Incite_City_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Struct_Army_Info::kCountryFieldNumber;
const int Struct_Army_Info::kArmyCountFieldNumber;
#endif  // !_MSC_VER

Struct_Army_Info::Struct_Army_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Struct_Army_Info::InitAsDefaultInstance() {
}

Struct_Army_Info::Struct_Army_Info(const Struct_Army_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Struct_Army_Info::SharedCtor() {
  _cached_size_ = 0;
  country_ = 0u;
  army_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Struct_Army_Info::~Struct_Army_Info() {
  SharedDtor();
}

void Struct_Army_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Struct_Army_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Struct_Army_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Struct_Army_Info_descriptor_;
}

const Struct_Army_Info& Struct_Army_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

Struct_Army_Info* Struct_Army_Info::default_instance_ = NULL;

Struct_Army_Info* Struct_Army_Info::New() const {
  return new Struct_Army_Info;
}

void Struct_Army_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    country_ = 0u;
    army_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Struct_Army_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 country = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_army_count;
        break;
      }

      // required uint32 army_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_army_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &army_count_)));
          set_has_army_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Struct_Army_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 country = 1;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->country(), output);
  }

  // required uint32 army_count = 2;
  if (has_army_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->army_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Struct_Army_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 country = 1;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->country(), target);
  }

  // required uint32 army_count = 2;
  if (has_army_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->army_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Struct_Army_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 country = 1;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country());
    }

    // required uint32 army_count = 2;
    if (has_army_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->army_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Struct_Army_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Struct_Army_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Struct_Army_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Struct_Army_Info::MergeFrom(const Struct_Army_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_army_count()) {
      set_army_count(from.army_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Struct_Army_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Struct_Army_Info::CopyFrom(const Struct_Army_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Struct_Army_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Struct_Army_Info::Swap(Struct_Army_Info* other) {
  if (other != this) {
    std::swap(country_, other->country_);
    std::swap(army_count_, other->army_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Struct_Army_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Struct_Army_Info_descriptor_;
  metadata.reflection = Struct_Army_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_City_Fight_Info::kAttackerLstFieldNumber;
const int GS2C_City_Fight_Info::kDefenderLstFieldNumber;
const int GS2C_City_Fight_Info::kCityIdFieldNumber;
#endif  // !_MSC_VER

GS2C_City_Fight_Info::GS2C_City_Fight_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_City_Fight_Info::InitAsDefaultInstance() {
}

GS2C_City_Fight_Info::GS2C_City_Fight_Info(const GS2C_City_Fight_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_City_Fight_Info::SharedCtor() {
  _cached_size_ = 0;
  city_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_City_Fight_Info::~GS2C_City_Fight_Info() {
  SharedDtor();
}

void GS2C_City_Fight_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_City_Fight_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_City_Fight_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_City_Fight_Info_descriptor_;
}

const GS2C_City_Fight_Info& GS2C_City_Fight_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

GS2C_City_Fight_Info* GS2C_City_Fight_Info::default_instance_ = NULL;

GS2C_City_Fight_Info* GS2C_City_Fight_Info::New() const {
  return new GS2C_City_Fight_Info;
}

void GS2C_City_Fight_Info::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    city_id_ = 0u;
  }
  attacker_lst_.Clear();
  defender_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_City_Fight_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Struct_Army_Info attacker_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attacker_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attacker_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attacker_lst;
        if (input->ExpectTag(18)) goto parse_defender_lst;
        break;
      }

      // repeated .pb.Struct_Army_Info defender_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defender_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_defender_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_defender_lst;
        if (input->ExpectTag(24)) goto parse_city_id;
        break;
      }

      // required uint32 city_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_City_Fight_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.Struct_Army_Info attacker_lst = 1;
  for (int i = 0; i < this->attacker_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attacker_lst(i), output);
  }

  // repeated .pb.Struct_Army_Info defender_lst = 2;
  for (int i = 0; i < this->defender_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->defender_lst(i), output);
  }

  // required uint32 city_id = 3;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->city_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_City_Fight_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.Struct_Army_Info attacker_lst = 1;
  for (int i = 0; i < this->attacker_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attacker_lst(i), target);
  }

  // repeated .pb.Struct_Army_Info defender_lst = 2;
  for (int i = 0; i < this->defender_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->defender_lst(i), target);
  }

  // required uint32 city_id = 3;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->city_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_City_Fight_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required uint32 city_id = 3;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

  }
  // repeated .pb.Struct_Army_Info attacker_lst = 1;
  total_size += 1 * this->attacker_lst_size();
  for (int i = 0; i < this->attacker_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attacker_lst(i));
  }

  // repeated .pb.Struct_Army_Info defender_lst = 2;
  total_size += 1 * this->defender_lst_size();
  for (int i = 0; i < this->defender_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->defender_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_City_Fight_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_City_Fight_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_City_Fight_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_City_Fight_Info::MergeFrom(const GS2C_City_Fight_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  attacker_lst_.MergeFrom(from.attacker_lst_);
  defender_lst_.MergeFrom(from.defender_lst_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_City_Fight_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_City_Fight_Info::CopyFrom(const GS2C_City_Fight_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_City_Fight_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  for (int i = 0; i < attacker_lst_size(); i++) {
    if (!this->attacker_lst(i).IsInitialized()) return false;
  }
  for (int i = 0; i < defender_lst_size(); i++) {
    if (!this->defender_lst(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_City_Fight_Info::Swap(GS2C_City_Fight_Info* other) {
  if (other != this) {
    attacker_lst_.Swap(&other->attacker_lst_);
    defender_lst_.Swap(&other->defender_lst_);
    std::swap(city_id_, other->city_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_City_Fight_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_City_Fight_Info_descriptor_;
  metadata.reflection = GS2C_City_Fight_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Request_Fight_Lst::kCityIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Request_Fight_Lst::C2GS_Request_Fight_Lst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Request_Fight_Lst::InitAsDefaultInstance() {
}

C2GS_Request_Fight_Lst::C2GS_Request_Fight_Lst(const C2GS_Request_Fight_Lst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Request_Fight_Lst::SharedCtor() {
  _cached_size_ = 0;
  city_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Request_Fight_Lst::~C2GS_Request_Fight_Lst() {
  SharedDtor();
}

void C2GS_Request_Fight_Lst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Request_Fight_Lst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Request_Fight_Lst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Request_Fight_Lst_descriptor_;
}

const C2GS_Request_Fight_Lst& C2GS_Request_Fight_Lst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

C2GS_Request_Fight_Lst* C2GS_Request_Fight_Lst::default_instance_ = NULL;

C2GS_Request_Fight_Lst* C2GS_Request_Fight_Lst::New() const {
  return new C2GS_Request_Fight_Lst;
}

void C2GS_Request_Fight_Lst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    city_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Request_Fight_Lst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 city_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Request_Fight_Lst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->city_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Request_Fight_Lst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->city_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Request_Fight_Lst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 city_id = 1;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Request_Fight_Lst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Request_Fight_Lst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Request_Fight_Lst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Request_Fight_Lst::MergeFrom(const C2GS_Request_Fight_Lst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Request_Fight_Lst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Request_Fight_Lst::CopyFrom(const C2GS_Request_Fight_Lst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Request_Fight_Lst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Request_Fight_Lst::Swap(C2GS_Request_Fight_Lst* other) {
  if (other != this) {
    std::swap(city_id_, other->city_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Request_Fight_Lst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Request_Fight_Lst_descriptor_;
  metadata.reflection = C2GS_Request_Fight_Lst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_Achievement_Info::kIdFieldNumber;
const int World_Achievement_Info::kTypeFieldNumber;
const int World_Achievement_Info::kStateFieldNumber;
#endif  // !_MSC_VER

World_Achievement_Info::World_Achievement_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_Achievement_Info::InitAsDefaultInstance() {
}

World_Achievement_Info::World_Achievement_Info(const World_Achievement_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_Achievement_Info::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0u;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_Achievement_Info::~World_Achievement_Info() {
  SharedDtor();
}

void World_Achievement_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void World_Achievement_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_Achievement_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_Achievement_Info_descriptor_;
}

const World_Achievement_Info& World_Achievement_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

World_Achievement_Info* World_Achievement_Info::default_instance_ = NULL;

World_Achievement_Info* World_Achievement_Info::New() const {
  return new World_Achievement_Info;
}

void World_Achievement_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    type_ = 0u;
    state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_Achievement_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional uint32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_Achievement_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_Achievement_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_Achievement_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_Achievement_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_Achievement_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_Achievement_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_Achievement_Info::MergeFrom(const World_Achievement_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_Achievement_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_Achievement_Info::CopyFrom(const World_Achievement_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_Achievement_Info::IsInitialized() const {

  return true;
}

void World_Achievement_Info::Swap(World_Achievement_Info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_Achievement_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_Achievement_Info_descriptor_;
  metadata.reflection = World_Achievement_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_World_Achievement_All_Info::kInfoFieldNumber;
#endif  // !_MSC_VER

GS2C_World_Achievement_All_Info::GS2C_World_Achievement_All_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_World_Achievement_All_Info::InitAsDefaultInstance() {
}

GS2C_World_Achievement_All_Info::GS2C_World_Achievement_All_Info(const GS2C_World_Achievement_All_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_World_Achievement_All_Info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_World_Achievement_All_Info::~GS2C_World_Achievement_All_Info() {
  SharedDtor();
}

void GS2C_World_Achievement_All_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_World_Achievement_All_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_World_Achievement_All_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_World_Achievement_All_Info_descriptor_;
}

const GS2C_World_Achievement_All_Info& GS2C_World_Achievement_All_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

GS2C_World_Achievement_All_Info* GS2C_World_Achievement_All_Info::default_instance_ = NULL;

GS2C_World_Achievement_All_Info* GS2C_World_Achievement_All_Info::New() const {
  return new GS2C_World_Achievement_All_Info;
}

void GS2C_World_Achievement_All_Info::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_World_Achievement_All_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.World_Achievement_Info info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_World_Achievement_All_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.World_Achievement_Info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_World_Achievement_All_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.World_Achievement_Info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_World_Achievement_All_Info::ByteSize() const {
  int total_size = 0;

  // repeated .pb.World_Achievement_Info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_World_Achievement_All_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_World_Achievement_All_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_World_Achievement_All_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_World_Achievement_All_Info::MergeFrom(const GS2C_World_Achievement_All_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_World_Achievement_All_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_World_Achievement_All_Info::CopyFrom(const GS2C_World_Achievement_All_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_World_Achievement_All_Info::IsInitialized() const {

  return true;
}

void GS2C_World_Achievement_All_Info::Swap(GS2C_World_Achievement_All_Info* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_World_Achievement_All_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_World_Achievement_All_Info_descriptor_;
  metadata.reflection = GS2C_World_Achievement_All_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Take_World_Achievement_Reward::kTypeFieldNumber;
const int C2GS_Take_World_Achievement_Reward::kAttackOrOccupyFieldNumber;
const int C2GS_Take_World_Achievement_Reward::kIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Take_World_Achievement_Reward::C2GS_Take_World_Achievement_Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Take_World_Achievement_Reward::InitAsDefaultInstance() {
}

C2GS_Take_World_Achievement_Reward::C2GS_Take_World_Achievement_Reward(const C2GS_Take_World_Achievement_Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Take_World_Achievement_Reward::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  attack_or_occupy_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Take_World_Achievement_Reward::~C2GS_Take_World_Achievement_Reward() {
  SharedDtor();
}

void C2GS_Take_World_Achievement_Reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Take_World_Achievement_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Take_World_Achievement_Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Take_World_Achievement_Reward_descriptor_;
}

const C2GS_Take_World_Achievement_Reward& C2GS_Take_World_Achievement_Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

C2GS_Take_World_Achievement_Reward* C2GS_Take_World_Achievement_Reward::default_instance_ = NULL;

C2GS_Take_World_Achievement_Reward* C2GS_Take_World_Achievement_Reward::New() const {
  return new C2GS_Take_World_Achievement_Reward;
}

void C2GS_Take_World_Achievement_Reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    attack_or_occupy_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Take_World_Achievement_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attack_or_occupy;
        break;
      }

      // optional uint32 attack_or_occupy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_or_occupy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_or_occupy_)));
          set_has_attack_or_occupy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Take_World_Achievement_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 attack_or_occupy = 2;
  if (has_attack_or_occupy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attack_or_occupy(), output);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Take_World_Achievement_Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 attack_or_occupy = 2;
  if (has_attack_or_occupy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attack_or_occupy(), target);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Take_World_Achievement_Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 attack_or_occupy = 2;
    if (has_attack_or_occupy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_or_occupy());
    }

    // optional uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Take_World_Achievement_Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Take_World_Achievement_Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Take_World_Achievement_Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Take_World_Achievement_Reward::MergeFrom(const C2GS_Take_World_Achievement_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_attack_or_occupy()) {
      set_attack_or_occupy(from.attack_or_occupy());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Take_World_Achievement_Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Take_World_Achievement_Reward::CopyFrom(const C2GS_Take_World_Achievement_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Take_World_Achievement_Reward::IsInitialized() const {

  return true;
}

void C2GS_Take_World_Achievement_Reward::Swap(C2GS_Take_World_Achievement_Reward* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(attack_or_occupy_, other->attack_or_occupy_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Take_World_Achievement_Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Take_World_Achievement_Reward_descriptor_;
  metadata.reflection = C2GS_Take_World_Achievement_Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Take_World_Achievement_Reward_Rsp::kRetFieldNumber;
const int GS2C_Take_World_Achievement_Reward_Rsp::kRewardFieldNumber;
#endif  // !_MSC_VER

GS2C_Take_World_Achievement_Reward_Rsp::GS2C_Take_World_Achievement_Reward_Rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Take_World_Achievement_Reward_Rsp::InitAsDefaultInstance() {
}

GS2C_Take_World_Achievement_Reward_Rsp::GS2C_Take_World_Achievement_Reward_Rsp(const GS2C_Take_World_Achievement_Reward_Rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Take_World_Achievement_Reward_Rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Take_World_Achievement_Reward_Rsp::~GS2C_Take_World_Achievement_Reward_Rsp() {
  SharedDtor();
}

void GS2C_Take_World_Achievement_Reward_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Take_World_Achievement_Reward_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Take_World_Achievement_Reward_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Take_World_Achievement_Reward_Rsp_descriptor_;
}

const GS2C_Take_World_Achievement_Reward_Rsp& GS2C_Take_World_Achievement_Reward_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

GS2C_Take_World_Achievement_Reward_Rsp* GS2C_Take_World_Achievement_Reward_Rsp::default_instance_ = NULL;

GS2C_Take_World_Achievement_Reward_Rsp* GS2C_Take_World_Achievement_Reward_Rsp::New() const {
  return new GS2C_Take_World_Achievement_Reward_Rsp;
}

void GS2C_Take_World_Achievement_Reward_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Take_World_Achievement_Reward_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // repeated .pb.StReward reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Take_World_Achievement_Reward_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // repeated .pb.StReward reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Take_World_Achievement_Reward_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // repeated .pb.StReward reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Take_World_Achievement_Reward_Rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated .pb.StReward reward = 2;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Take_World_Achievement_Reward_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Take_World_Achievement_Reward_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Take_World_Achievement_Reward_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Take_World_Achievement_Reward_Rsp::MergeFrom(const GS2C_Take_World_Achievement_Reward_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Take_World_Achievement_Reward_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Take_World_Achievement_Reward_Rsp::CopyFrom(const GS2C_Take_World_Achievement_Reward_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Take_World_Achievement_Reward_Rsp::IsInitialized() const {

  for (int i = 0; i < reward_size(); i++) {
    if (!this->reward(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Take_World_Achievement_Reward_Rsp::Swap(GS2C_Take_World_Achievement_Reward_Rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Take_World_Achievement_Reward_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Take_World_Achievement_Reward_Rsp_descriptor_;
  metadata.reflection = GS2C_Take_World_Achievement_Reward_Rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_World_Achievement_Info::kTypeFieldNumber;
const int GxDB_World_Achievement_Info::kStateFieldNumber;
const int GxDB_World_Achievement_Info::kCityIdFieldNumber;
#endif  // !_MSC_VER

GxDB_World_Achievement_Info::GxDB_World_Achievement_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_World_Achievement_Info::InitAsDefaultInstance() {
}

GxDB_World_Achievement_Info::GxDB_World_Achievement_Info(const GxDB_World_Achievement_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_World_Achievement_Info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  state_ = 0u;
  city_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_World_Achievement_Info::~GxDB_World_Achievement_Info() {
  SharedDtor();
}

void GxDB_World_Achievement_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_World_Achievement_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_World_Achievement_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_World_Achievement_Info_descriptor_;
}

const GxDB_World_Achievement_Info& GxDB_World_Achievement_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

GxDB_World_Achievement_Info* GxDB_World_Achievement_Info::default_instance_ = NULL;

GxDB_World_Achievement_Info* GxDB_World_Achievement_Info::New() const {
  return new GxDB_World_Achievement_Info;
}

void GxDB_World_Achievement_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    state_ = 0u;
    city_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_World_Achievement_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_city_id;
        break;
      }

      // optional uint32 city_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_World_Achievement_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  // optional uint32 city_id = 3;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->city_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_World_Achievement_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  // optional uint32 city_id = 3;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->city_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_World_Achievement_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 city_id = 3;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_World_Achievement_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_World_Achievement_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_World_Achievement_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_World_Achievement_Info::MergeFrom(const GxDB_World_Achievement_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_World_Achievement_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_World_Achievement_Info::CopyFrom(const GxDB_World_Achievement_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_World_Achievement_Info::IsInitialized() const {

  return true;
}

void GxDB_World_Achievement_Info::Swap(GxDB_World_Achievement_Info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(state_, other->state_);
    std::swap(city_id_, other->city_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_World_Achievement_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_World_Achievement_Info_descriptor_;
  metadata.reflection = GxDB_World_Achievement_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_World_Achievement::kInfoFieldNumber;
#endif  // !_MSC_VER

GxDB_World_Achievement::GxDB_World_Achievement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_World_Achievement::InitAsDefaultInstance() {
}

GxDB_World_Achievement::GxDB_World_Achievement(const GxDB_World_Achievement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_World_Achievement::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_World_Achievement::~GxDB_World_Achievement() {
  SharedDtor();
}

void GxDB_World_Achievement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_World_Achievement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_World_Achievement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_World_Achievement_descriptor_;
}

const GxDB_World_Achievement& GxDB_World_Achievement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();
  return *default_instance_;
}

GxDB_World_Achievement* GxDB_World_Achievement::default_instance_ = NULL;

GxDB_World_Achievement* GxDB_World_Achievement::New() const {
  return new GxDB_World_Achievement;
}

void GxDB_World_Achievement::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_World_Achievement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GxDB_World_Achievement_Info info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_World_Achievement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GxDB_World_Achievement_Info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_World_Achievement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GxDB_World_Achievement_Info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_World_Achievement::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GxDB_World_Achievement_Info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_World_Achievement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_World_Achievement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_World_Achievement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_World_Achievement::MergeFrom(const GxDB_World_Achievement& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_World_Achievement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_World_Achievement::CopyFrom(const GxDB_World_Achievement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_World_Achievement::IsInitialized() const {

  return true;
}

void GxDB_World_Achievement::Swap(GxDB_World_Achievement* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_World_Achievement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_World_Achievement_descriptor_;
  metadata.reflection = GxDB_World_Achievement_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
