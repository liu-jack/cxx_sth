// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Dungeon.proto

#ifndef PROTOBUF_Dungeon_2eproto__INCLUDED
#define PROTOBUF_Dungeon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommomDef.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Dungeon_2eproto();
void protobuf_AssignDesc_Dungeon_2eproto();
void protobuf_ShutdownFile_Dungeon_2eproto();

class CatchHero;
class GS2C_Dungeon_Base;
class GS2C_Dungeon_All_Info;
class GS2C_Dungeon_Add_Hero;
class GS2C_Dungeon_Del_Hero;
class C2GS_Dungeon_Build_By_Silver;
class C2GS_Dungeon_Cane_Fase_LevelUp;
class C2GS_Dungeon_Try_Cane;
class C2GS_Dungeon_Escape;
class GS2C_Dungeon_Escape;
class GS2C_HERO_BE_CATCH;
class GS2C_Dungeon_Cane;

// ===================================================================

class CatchHero : public ::google::protobuf::Message {
 public:
  CatchHero();
  virtual ~CatchHero();

  CatchHero(const CatchHero& from);

  inline CatchHero& operator=(const CatchHero& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CatchHero& default_instance();

  void Swap(CatchHero* other);

  // implements Message ----------------------------------------------

  CatchHero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CatchHero& from);
  void MergeFrom(const CatchHero& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 player_id() const;
  inline void set_player_id(::google::protobuf::uint64 value);

  // required uint32 hero_tid = 2;
  inline bool has_hero_tid() const;
  inline void clear_hero_tid();
  static const int kHeroTidFieldNumber = 2;
  inline ::google::protobuf::uint32 hero_tid() const;
  inline void set_hero_tid(::google::protobuf::uint32 value);

  // optional bool is_caned = 3;
  inline bool has_is_caned() const;
  inline void clear_is_caned();
  static const int kIsCanedFieldNumber = 3;
  inline bool is_caned() const;
  inline void set_is_caned(bool value);

  // optional uint64 escape_end_time = 4;
  inline bool has_escape_end_time() const;
  inline void clear_escape_end_time();
  static const int kEscapeEndTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 escape_end_time() const;
  inline void set_escape_end_time(::google::protobuf::uint64 value);

  // optional string player_name = 5;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 5;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // optional uint32 hero_lv = 6;
  inline bool has_hero_lv() const;
  inline void clear_hero_lv();
  static const int kHeroLvFieldNumber = 6;
  inline ::google::protobuf::uint32 hero_lv() const;
  inline void set_hero_lv(::google::protobuf::uint32 value);

  // optional uint32 country = 7;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 7;
  inline ::google::protobuf::uint32 country() const;
  inline void set_country(::google::protobuf::uint32 value);

  // optional bool isShadow = 8;
  inline bool has_isshadow() const;
  inline void clear_isshadow();
  static const int kIsShadowFieldNumber = 8;
  inline bool isshadow() const;
  inline void set_isshadow(bool value);

  // @@protoc_insertion_point(class_scope:pb.CatchHero)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_hero_tid();
  inline void clear_has_hero_tid();
  inline void set_has_is_caned();
  inline void clear_has_is_caned();
  inline void set_has_escape_end_time();
  inline void clear_has_escape_end_time();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_hero_lv();
  inline void clear_has_hero_lv();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_isshadow();
  inline void clear_has_isshadow();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_id_;
  ::google::protobuf::uint64 escape_end_time_;
  ::google::protobuf::uint32 hero_tid_;
  bool is_caned_;
  bool isshadow_;
  ::std::string* player_name_;
  ::google::protobuf::uint32 hero_lv_;
  ::google::protobuf::uint32 country_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Dungeon_2eproto();
  friend void protobuf_AssignDesc_Dungeon_2eproto();
  friend void protobuf_ShutdownFile_Dungeon_2eproto();

  void InitAsDefaultInstance();
  static CatchHero* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Dungeon_Base : public ::google::protobuf::Message {
 public:
  GS2C_Dungeon_Base();
  virtual ~GS2C_Dungeon_Base();

  GS2C_Dungeon_Base(const GS2C_Dungeon_Base& from);

  inline GS2C_Dungeon_Base& operator=(const GS2C_Dungeon_Base& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Dungeon_Base& default_instance();

  void Swap(GS2C_Dungeon_Base* other);

  // implements Message ----------------------------------------------

  GS2C_Dungeon_Base* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Dungeon_Base& from);
  void MergeFrom(const GS2C_Dungeon_Base& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 dngeon_levle = 1;
  inline bool has_dngeon_levle() const;
  inline void clear_dngeon_levle();
  static const int kDngeonLevleFieldNumber = 1;
  inline ::google::protobuf::uint32 dngeon_levle() const;
  inline void set_dngeon_levle(::google::protobuf::uint32 value);

  // optional uint32 silver_for_build = 2;
  inline bool has_silver_for_build() const;
  inline void clear_silver_for_build();
  static const int kSilverForBuildFieldNumber = 2;
  inline ::google::protobuf::uint32 silver_for_build() const;
  inline void set_silver_for_build(::google::protobuf::uint32 value);

  // optional uint32 cane_levle = 3;
  inline bool has_cane_levle() const;
  inline void clear_cane_levle();
  static const int kCaneLevleFieldNumber = 3;
  inline ::google::protobuf::uint32 cane_levle() const;
  inline void set_cane_levle(::google::protobuf::uint32 value);

  // optional uint32 cane_exp = 4;
  inline bool has_cane_exp() const;
  inline void clear_cane_exp();
  static const int kCaneExpFieldNumber = 4;
  inline ::google::protobuf::uint32 cane_exp() const;
  inline void set_cane_exp(::google::protobuf::uint32 value);

  // optional bool free_try_cane = 5;
  inline bool has_free_try_cane() const;
  inline void clear_free_try_cane();
  static const int kFreeTryCaneFieldNumber = 5;
  inline bool free_try_cane() const;
  inline void set_free_try_cane(bool value);

  // optional uint32 cane_temp_levle = 6;
  inline bool has_cane_temp_levle() const;
  inline void clear_cane_temp_levle();
  static const int kCaneTempLevleFieldNumber = 6;
  inline ::google::protobuf::uint32 cane_temp_levle() const;
  inline void set_cane_temp_levle(::google::protobuf::uint32 value);

  // optional uint64 cane_temp_time = 7;
  inline bool has_cane_temp_time() const;
  inline void clear_cane_temp_time();
  static const int kCaneTempTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 cane_temp_time() const;
  inline void set_cane_temp_time(::google::protobuf::uint64 value);

  // optional uint32 today_catch_hero_cnt = 8;
  inline bool has_today_catch_hero_cnt() const;
  inline void clear_today_catch_hero_cnt();
  static const int kTodayCatchHeroCntFieldNumber = 8;
  inline ::google::protobuf::uint32 today_catch_hero_cnt() const;
  inline void set_today_catch_hero_cnt(::google::protobuf::uint32 value);

  // optional uint32 catch_hero_cnt_for_exp = 9;
  inline bool has_catch_hero_cnt_for_exp() const;
  inline void clear_catch_hero_cnt_for_exp();
  static const int kCatchHeroCntForExpFieldNumber = 9;
  inline ::google::protobuf::uint32 catch_hero_cnt_for_exp() const;
  inline void set_catch_hero_cnt_for_exp(::google::protobuf::uint32 value);

  // optional uint64 catch_hero_time = 10;
  inline bool has_catch_hero_time() const;
  inline void clear_catch_hero_time();
  static const int kCatchHeroTimeFieldNumber = 10;
  inline ::google::protobuf::uint64 catch_hero_time() const;
  inline void set_catch_hero_time(::google::protobuf::uint64 value);

  // optional uint32 today_cane_cnt = 11;
  inline bool has_today_cane_cnt() const;
  inline void clear_today_cane_cnt();
  static const int kTodayCaneCntFieldNumber = 11;
  inline ::google::protobuf::uint32 today_cane_cnt() const;
  inline void set_today_cane_cnt(::google::protobuf::uint32 value);

  // optional uint32 today_cane_get_exp = 12;
  inline bool has_today_cane_get_exp() const;
  inline void clear_today_cane_get_exp();
  static const int kTodayCaneGetExpFieldNumber = 12;
  inline ::google::protobuf::uint32 today_cane_get_exp() const;
  inline void set_today_cane_get_exp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Dungeon_Base)
 private:
  inline void set_has_dngeon_levle();
  inline void clear_has_dngeon_levle();
  inline void set_has_silver_for_build();
  inline void clear_has_silver_for_build();
  inline void set_has_cane_levle();
  inline void clear_has_cane_levle();
  inline void set_has_cane_exp();
  inline void clear_has_cane_exp();
  inline void set_has_free_try_cane();
  inline void clear_has_free_try_cane();
  inline void set_has_cane_temp_levle();
  inline void clear_has_cane_temp_levle();
  inline void set_has_cane_temp_time();
  inline void clear_has_cane_temp_time();
  inline void set_has_today_catch_hero_cnt();
  inline void clear_has_today_catch_hero_cnt();
  inline void set_has_catch_hero_cnt_for_exp();
  inline void clear_has_catch_hero_cnt_for_exp();
  inline void set_has_catch_hero_time();
  inline void clear_has_catch_hero_time();
  inline void set_has_today_cane_cnt();
  inline void clear_has_today_cane_cnt();
  inline void set_has_today_cane_get_exp();
  inline void clear_has_today_cane_get_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 dngeon_levle_;
  ::google::protobuf::uint32 silver_for_build_;
  ::google::protobuf::uint32 cane_levle_;
  ::google::protobuf::uint32 cane_exp_;
  bool free_try_cane_;
  ::google::protobuf::uint32 cane_temp_levle_;
  ::google::protobuf::uint64 cane_temp_time_;
  ::google::protobuf::uint32 today_catch_hero_cnt_;
  ::google::protobuf::uint32 catch_hero_cnt_for_exp_;
  ::google::protobuf::uint64 catch_hero_time_;
  ::google::protobuf::uint32 today_cane_cnt_;
  ::google::protobuf::uint32 today_cane_get_exp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_Dungeon_2eproto();
  friend void protobuf_AssignDesc_Dungeon_2eproto();
  friend void protobuf_ShutdownFile_Dungeon_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Dungeon_Base* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Dungeon_All_Info : public ::google::protobuf::Message {
 public:
  GS2C_Dungeon_All_Info();
  virtual ~GS2C_Dungeon_All_Info();

  GS2C_Dungeon_All_Info(const GS2C_Dungeon_All_Info& from);

  inline GS2C_Dungeon_All_Info& operator=(const GS2C_Dungeon_All_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Dungeon_All_Info& default_instance();

  void Swap(GS2C_Dungeon_All_Info* other);

  // implements Message ----------------------------------------------

  GS2C_Dungeon_All_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Dungeon_All_Info& from);
  void MergeFrom(const GS2C_Dungeon_All_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.GS2C_Dungeon_Base base_info = 1;
  inline bool has_base_info() const;
  inline void clear_base_info();
  static const int kBaseInfoFieldNumber = 1;
  inline const ::pb::GS2C_Dungeon_Base& base_info() const;
  inline ::pb::GS2C_Dungeon_Base* mutable_base_info();
  inline ::pb::GS2C_Dungeon_Base* release_base_info();
  inline void set_allocated_base_info(::pb::GS2C_Dungeon_Base* base_info);

  // repeated .pb.CatchHero catch_hero = 2;
  inline int catch_hero_size() const;
  inline void clear_catch_hero();
  static const int kCatchHeroFieldNumber = 2;
  inline const ::pb::CatchHero& catch_hero(int index) const;
  inline ::pb::CatchHero* mutable_catch_hero(int index);
  inline ::pb::CatchHero* add_catch_hero();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::CatchHero >&
      catch_hero() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::CatchHero >*
      mutable_catch_hero();

  // @@protoc_insertion_point(class_scope:pb.GS2C_Dungeon_All_Info)
 private:
  inline void set_has_base_info();
  inline void clear_has_base_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::GS2C_Dungeon_Base* base_info_;
  ::google::protobuf::RepeatedPtrField< ::pb::CatchHero > catch_hero_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Dungeon_2eproto();
  friend void protobuf_AssignDesc_Dungeon_2eproto();
  friend void protobuf_ShutdownFile_Dungeon_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Dungeon_All_Info* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Dungeon_Add_Hero : public ::google::protobuf::Message {
 public:
  GS2C_Dungeon_Add_Hero();
  virtual ~GS2C_Dungeon_Add_Hero();

  GS2C_Dungeon_Add_Hero(const GS2C_Dungeon_Add_Hero& from);

  inline GS2C_Dungeon_Add_Hero& operator=(const GS2C_Dungeon_Add_Hero& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Dungeon_Add_Hero& default_instance();

  void Swap(GS2C_Dungeon_Add_Hero* other);

  // implements Message ----------------------------------------------

  GS2C_Dungeon_Add_Hero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Dungeon_Add_Hero& from);
  void MergeFrom(const GS2C_Dungeon_Add_Hero& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.CatchHero hero = 1;
  inline bool has_hero() const;
  inline void clear_hero();
  static const int kHeroFieldNumber = 1;
  inline const ::pb::CatchHero& hero() const;
  inline ::pb::CatchHero* mutable_hero();
  inline ::pb::CatchHero* release_hero();
  inline void set_allocated_hero(::pb::CatchHero* hero);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Dungeon_Add_Hero)
 private:
  inline void set_has_hero();
  inline void clear_has_hero();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::CatchHero* hero_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Dungeon_2eproto();
  friend void protobuf_AssignDesc_Dungeon_2eproto();
  friend void protobuf_ShutdownFile_Dungeon_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Dungeon_Add_Hero* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Dungeon_Del_Hero : public ::google::protobuf::Message {
 public:
  GS2C_Dungeon_Del_Hero();
  virtual ~GS2C_Dungeon_Del_Hero();

  GS2C_Dungeon_Del_Hero(const GS2C_Dungeon_Del_Hero& from);

  inline GS2C_Dungeon_Del_Hero& operator=(const GS2C_Dungeon_Del_Hero& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Dungeon_Del_Hero& default_instance();

  void Swap(GS2C_Dungeon_Del_Hero* other);

  // implements Message ----------------------------------------------

  GS2C_Dungeon_Del_Hero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Dungeon_Del_Hero& from);
  void MergeFrom(const GS2C_Dungeon_Del_Hero& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.CatchHero hero = 1;
  inline bool has_hero() const;
  inline void clear_hero();
  static const int kHeroFieldNumber = 1;
  inline const ::pb::CatchHero& hero() const;
  inline ::pb::CatchHero* mutable_hero();
  inline ::pb::CatchHero* release_hero();
  inline void set_allocated_hero(::pb::CatchHero* hero);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Dungeon_Del_Hero)
 private:
  inline void set_has_hero();
  inline void clear_has_hero();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::CatchHero* hero_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Dungeon_2eproto();
  friend void protobuf_AssignDesc_Dungeon_2eproto();
  friend void protobuf_ShutdownFile_Dungeon_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Dungeon_Del_Hero* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Dungeon_Build_By_Silver : public ::google::protobuf::Message {
 public:
  C2GS_Dungeon_Build_By_Silver();
  virtual ~C2GS_Dungeon_Build_By_Silver();

  C2GS_Dungeon_Build_By_Silver(const C2GS_Dungeon_Build_By_Silver& from);

  inline C2GS_Dungeon_Build_By_Silver& operator=(const C2GS_Dungeon_Build_By_Silver& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Dungeon_Build_By_Silver& default_instance();

  void Swap(C2GS_Dungeon_Build_By_Silver* other);

  // implements Message ----------------------------------------------

  C2GS_Dungeon_Build_By_Silver* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Dungeon_Build_By_Silver& from);
  void MergeFrom(const C2GS_Dungeon_Build_By_Silver& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_fast = 1;
  inline bool has_is_fast() const;
  inline void clear_is_fast();
  static const int kIsFastFieldNumber = 1;
  inline bool is_fast() const;
  inline void set_is_fast(bool value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Dungeon_Build_By_Silver)
 private:
  inline void set_has_is_fast();
  inline void clear_has_is_fast();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool is_fast_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Dungeon_2eproto();
  friend void protobuf_AssignDesc_Dungeon_2eproto();
  friend void protobuf_ShutdownFile_Dungeon_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Dungeon_Build_By_Silver* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Dungeon_Cane_Fase_LevelUp : public ::google::protobuf::Message {
 public:
  C2GS_Dungeon_Cane_Fase_LevelUp();
  virtual ~C2GS_Dungeon_Cane_Fase_LevelUp();

  C2GS_Dungeon_Cane_Fase_LevelUp(const C2GS_Dungeon_Cane_Fase_LevelUp& from);

  inline C2GS_Dungeon_Cane_Fase_LevelUp& operator=(const C2GS_Dungeon_Cane_Fase_LevelUp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Dungeon_Cane_Fase_LevelUp& default_instance();

  void Swap(C2GS_Dungeon_Cane_Fase_LevelUp* other);

  // implements Message ----------------------------------------------

  C2GS_Dungeon_Cane_Fase_LevelUp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Dungeon_Cane_Fase_LevelUp& from);
  void MergeFrom(const C2GS_Dungeon_Cane_Fase_LevelUp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 dst_lv = 1;
  inline bool has_dst_lv() const;
  inline void clear_dst_lv();
  static const int kDstLvFieldNumber = 1;
  inline ::google::protobuf::uint32 dst_lv() const;
  inline void set_dst_lv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Dungeon_Cane_Fase_LevelUp)
 private:
  inline void set_has_dst_lv();
  inline void clear_has_dst_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 dst_lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Dungeon_2eproto();
  friend void protobuf_AssignDesc_Dungeon_2eproto();
  friend void protobuf_ShutdownFile_Dungeon_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Dungeon_Cane_Fase_LevelUp* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Dungeon_Try_Cane : public ::google::protobuf::Message {
 public:
  C2GS_Dungeon_Try_Cane();
  virtual ~C2GS_Dungeon_Try_Cane();

  C2GS_Dungeon_Try_Cane(const C2GS_Dungeon_Try_Cane& from);

  inline C2GS_Dungeon_Try_Cane& operator=(const C2GS_Dungeon_Try_Cane& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Dungeon_Try_Cane& default_instance();

  void Swap(C2GS_Dungeon_Try_Cane* other);

  // implements Message ----------------------------------------------

  C2GS_Dungeon_Try_Cane* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Dungeon_Try_Cane& from);
  void MergeFrom(const C2GS_Dungeon_Try_Cane& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 dst_lv = 1;
  inline bool has_dst_lv() const;
  inline void clear_dst_lv();
  static const int kDstLvFieldNumber = 1;
  inline ::google::protobuf::uint32 dst_lv() const;
  inline void set_dst_lv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Dungeon_Try_Cane)
 private:
  inline void set_has_dst_lv();
  inline void clear_has_dst_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 dst_lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Dungeon_2eproto();
  friend void protobuf_AssignDesc_Dungeon_2eproto();
  friend void protobuf_ShutdownFile_Dungeon_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Dungeon_Try_Cane* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Dungeon_Escape : public ::google::protobuf::Message {
 public:
  C2GS_Dungeon_Escape();
  virtual ~C2GS_Dungeon_Escape();

  C2GS_Dungeon_Escape(const C2GS_Dungeon_Escape& from);

  inline C2GS_Dungeon_Escape& operator=(const C2GS_Dungeon_Escape& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Dungeon_Escape& default_instance();

  void Swap(C2GS_Dungeon_Escape* other);

  // implements Message ----------------------------------------------

  C2GS_Dungeon_Escape* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Dungeon_Escape& from);
  void MergeFrom(const C2GS_Dungeon_Escape& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 hero_idx = 1;
  inline bool has_hero_idx() const;
  inline void clear_hero_idx();
  static const int kHeroIdxFieldNumber = 1;
  inline ::google::protobuf::uint32 hero_idx() const;
  inline void set_hero_idx(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Dungeon_Escape)
 private:
  inline void set_has_hero_idx();
  inline void clear_has_hero_idx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 hero_idx_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Dungeon_2eproto();
  friend void protobuf_AssignDesc_Dungeon_2eproto();
  friend void protobuf_ShutdownFile_Dungeon_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Dungeon_Escape* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Dungeon_Escape : public ::google::protobuf::Message {
 public:
  GS2C_Dungeon_Escape();
  virtual ~GS2C_Dungeon_Escape();

  GS2C_Dungeon_Escape(const GS2C_Dungeon_Escape& from);

  inline GS2C_Dungeon_Escape& operator=(const GS2C_Dungeon_Escape& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Dungeon_Escape& default_instance();

  void Swap(GS2C_Dungeon_Escape* other);

  // implements Message ----------------------------------------------

  GS2C_Dungeon_Escape* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Dungeon_Escape& from);
  void MergeFrom(const GS2C_Dungeon_Escape& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 hero_tid = 1;
  inline bool has_hero_tid() const;
  inline void clear_hero_tid();
  static const int kHeroTidFieldNumber = 1;
  inline ::google::protobuf::uint32 hero_tid() const;
  inline void set_hero_tid(::google::protobuf::uint32 value);

  // required uint32 need_second = 2;
  inline bool has_need_second() const;
  inline void clear_need_second();
  static const int kNeedSecondFieldNumber = 2;
  inline ::google::protobuf::uint32 need_second() const;
  inline void set_need_second(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Dungeon_Escape)
 private:
  inline void set_has_hero_tid();
  inline void clear_has_hero_tid();
  inline void set_has_need_second();
  inline void clear_has_need_second();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 hero_tid_;
  ::google::protobuf::uint32 need_second_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Dungeon_2eproto();
  friend void protobuf_AssignDesc_Dungeon_2eproto();
  friend void protobuf_ShutdownFile_Dungeon_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Dungeon_Escape* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_HERO_BE_CATCH : public ::google::protobuf::Message {
 public:
  GS2C_HERO_BE_CATCH();
  virtual ~GS2C_HERO_BE_CATCH();

  GS2C_HERO_BE_CATCH(const GS2C_HERO_BE_CATCH& from);

  inline GS2C_HERO_BE_CATCH& operator=(const GS2C_HERO_BE_CATCH& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_HERO_BE_CATCH& default_instance();

  void Swap(GS2C_HERO_BE_CATCH* other);

  // implements Message ----------------------------------------------

  GS2C_HERO_BE_CATCH* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_HERO_BE_CATCH& from);
  void MergeFrom(const GS2C_HERO_BE_CATCH& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 hero_tid = 1;
  inline bool has_hero_tid() const;
  inline void clear_hero_tid();
  static const int kHeroTidFieldNumber = 1;
  inline ::google::protobuf::uint32 hero_tid() const;
  inline void set_hero_tid(::google::protobuf::uint32 value);

  // required uint64 dungeon_owner_player_id = 2;
  inline bool has_dungeon_owner_player_id() const;
  inline void clear_dungeon_owner_player_id();
  static const int kDungeonOwnerPlayerIdFieldNumber = 2;
  inline ::google::protobuf::uint64 dungeon_owner_player_id() const;
  inline void set_dungeon_owner_player_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_HERO_BE_CATCH)
 private:
  inline void set_has_hero_tid();
  inline void clear_has_hero_tid();
  inline void set_has_dungeon_owner_player_id();
  inline void clear_has_dungeon_owner_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 dungeon_owner_player_id_;
  ::google::protobuf::uint32 hero_tid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Dungeon_2eproto();
  friend void protobuf_AssignDesc_Dungeon_2eproto();
  friend void protobuf_ShutdownFile_Dungeon_2eproto();

  void InitAsDefaultInstance();
  static GS2C_HERO_BE_CATCH* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Dungeon_Cane : public ::google::protobuf::Message {
 public:
  GS2C_Dungeon_Cane();
  virtual ~GS2C_Dungeon_Cane();

  GS2C_Dungeon_Cane(const GS2C_Dungeon_Cane& from);

  inline GS2C_Dungeon_Cane& operator=(const GS2C_Dungeon_Cane& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Dungeon_Cane& default_instance();

  void Swap(GS2C_Dungeon_Cane* other);

  // implements Message ----------------------------------------------

  GS2C_Dungeon_Cane* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Dungeon_Cane& from);
  void MergeFrom(const GS2C_Dungeon_Cane& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline bool success() const;
  inline void set_success(bool value);

  // required uint32 player_exp = 2;
  inline bool has_player_exp() const;
  inline void clear_player_exp();
  static const int kPlayerExpFieldNumber = 2;
  inline ::google::protobuf::uint32 player_exp() const;
  inline void set_player_exp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Dungeon_Cane)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_player_exp();
  inline void clear_has_player_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool success_;
  ::google::protobuf::uint32 player_exp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Dungeon_2eproto();
  friend void protobuf_AssignDesc_Dungeon_2eproto();
  friend void protobuf_ShutdownFile_Dungeon_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Dungeon_Cane* default_instance_;
};
// ===================================================================


// ===================================================================

// CatchHero

// required uint64 player_id = 1;
inline bool CatchHero::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CatchHero::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CatchHero::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CatchHero::clear_player_id() {
  player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::uint64 CatchHero::player_id() const {
  return player_id_;
}
inline void CatchHero::set_player_id(::google::protobuf::uint64 value) {
  set_has_player_id();
  player_id_ = value;
}

// required uint32 hero_tid = 2;
inline bool CatchHero::has_hero_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CatchHero::set_has_hero_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CatchHero::clear_has_hero_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CatchHero::clear_hero_tid() {
  hero_tid_ = 0u;
  clear_has_hero_tid();
}
inline ::google::protobuf::uint32 CatchHero::hero_tid() const {
  return hero_tid_;
}
inline void CatchHero::set_hero_tid(::google::protobuf::uint32 value) {
  set_has_hero_tid();
  hero_tid_ = value;
}

// optional bool is_caned = 3;
inline bool CatchHero::has_is_caned() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CatchHero::set_has_is_caned() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CatchHero::clear_has_is_caned() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CatchHero::clear_is_caned() {
  is_caned_ = false;
  clear_has_is_caned();
}
inline bool CatchHero::is_caned() const {
  return is_caned_;
}
inline void CatchHero::set_is_caned(bool value) {
  set_has_is_caned();
  is_caned_ = value;
}

// optional uint64 escape_end_time = 4;
inline bool CatchHero::has_escape_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CatchHero::set_has_escape_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CatchHero::clear_has_escape_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CatchHero::clear_escape_end_time() {
  escape_end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_escape_end_time();
}
inline ::google::protobuf::uint64 CatchHero::escape_end_time() const {
  return escape_end_time_;
}
inline void CatchHero::set_escape_end_time(::google::protobuf::uint64 value) {
  set_has_escape_end_time();
  escape_end_time_ = value;
}

// optional string player_name = 5;
inline bool CatchHero::has_player_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CatchHero::set_has_player_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CatchHero::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CatchHero::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& CatchHero::player_name() const {
  return *player_name_;
}
inline void CatchHero::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void CatchHero::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void CatchHero::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CatchHero::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* CatchHero::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CatchHero::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 hero_lv = 6;
inline bool CatchHero::has_hero_lv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CatchHero::set_has_hero_lv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CatchHero::clear_has_hero_lv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CatchHero::clear_hero_lv() {
  hero_lv_ = 0u;
  clear_has_hero_lv();
}
inline ::google::protobuf::uint32 CatchHero::hero_lv() const {
  return hero_lv_;
}
inline void CatchHero::set_hero_lv(::google::protobuf::uint32 value) {
  set_has_hero_lv();
  hero_lv_ = value;
}

// optional uint32 country = 7;
inline bool CatchHero::has_country() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CatchHero::set_has_country() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CatchHero::clear_has_country() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CatchHero::clear_country() {
  country_ = 0u;
  clear_has_country();
}
inline ::google::protobuf::uint32 CatchHero::country() const {
  return country_;
}
inline void CatchHero::set_country(::google::protobuf::uint32 value) {
  set_has_country();
  country_ = value;
}

// optional bool isShadow = 8;
inline bool CatchHero::has_isshadow() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CatchHero::set_has_isshadow() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CatchHero::clear_has_isshadow() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CatchHero::clear_isshadow() {
  isshadow_ = false;
  clear_has_isshadow();
}
inline bool CatchHero::isshadow() const {
  return isshadow_;
}
inline void CatchHero::set_isshadow(bool value) {
  set_has_isshadow();
  isshadow_ = value;
}

// -------------------------------------------------------------------

// GS2C_Dungeon_Base

// optional uint32 dngeon_levle = 1;
inline bool GS2C_Dungeon_Base::has_dngeon_levle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Dungeon_Base::set_has_dngeon_levle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Dungeon_Base::clear_has_dngeon_levle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Dungeon_Base::clear_dngeon_levle() {
  dngeon_levle_ = 0u;
  clear_has_dngeon_levle();
}
inline ::google::protobuf::uint32 GS2C_Dungeon_Base::dngeon_levle() const {
  return dngeon_levle_;
}
inline void GS2C_Dungeon_Base::set_dngeon_levle(::google::protobuf::uint32 value) {
  set_has_dngeon_levle();
  dngeon_levle_ = value;
}

// optional uint32 silver_for_build = 2;
inline bool GS2C_Dungeon_Base::has_silver_for_build() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Dungeon_Base::set_has_silver_for_build() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Dungeon_Base::clear_has_silver_for_build() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Dungeon_Base::clear_silver_for_build() {
  silver_for_build_ = 0u;
  clear_has_silver_for_build();
}
inline ::google::protobuf::uint32 GS2C_Dungeon_Base::silver_for_build() const {
  return silver_for_build_;
}
inline void GS2C_Dungeon_Base::set_silver_for_build(::google::protobuf::uint32 value) {
  set_has_silver_for_build();
  silver_for_build_ = value;
}

// optional uint32 cane_levle = 3;
inline bool GS2C_Dungeon_Base::has_cane_levle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Dungeon_Base::set_has_cane_levle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Dungeon_Base::clear_has_cane_levle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Dungeon_Base::clear_cane_levle() {
  cane_levle_ = 0u;
  clear_has_cane_levle();
}
inline ::google::protobuf::uint32 GS2C_Dungeon_Base::cane_levle() const {
  return cane_levle_;
}
inline void GS2C_Dungeon_Base::set_cane_levle(::google::protobuf::uint32 value) {
  set_has_cane_levle();
  cane_levle_ = value;
}

// optional uint32 cane_exp = 4;
inline bool GS2C_Dungeon_Base::has_cane_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Dungeon_Base::set_has_cane_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Dungeon_Base::clear_has_cane_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Dungeon_Base::clear_cane_exp() {
  cane_exp_ = 0u;
  clear_has_cane_exp();
}
inline ::google::protobuf::uint32 GS2C_Dungeon_Base::cane_exp() const {
  return cane_exp_;
}
inline void GS2C_Dungeon_Base::set_cane_exp(::google::protobuf::uint32 value) {
  set_has_cane_exp();
  cane_exp_ = value;
}

// optional bool free_try_cane = 5;
inline bool GS2C_Dungeon_Base::has_free_try_cane() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GS2C_Dungeon_Base::set_has_free_try_cane() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GS2C_Dungeon_Base::clear_has_free_try_cane() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GS2C_Dungeon_Base::clear_free_try_cane() {
  free_try_cane_ = false;
  clear_has_free_try_cane();
}
inline bool GS2C_Dungeon_Base::free_try_cane() const {
  return free_try_cane_;
}
inline void GS2C_Dungeon_Base::set_free_try_cane(bool value) {
  set_has_free_try_cane();
  free_try_cane_ = value;
}

// optional uint32 cane_temp_levle = 6;
inline bool GS2C_Dungeon_Base::has_cane_temp_levle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GS2C_Dungeon_Base::set_has_cane_temp_levle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GS2C_Dungeon_Base::clear_has_cane_temp_levle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GS2C_Dungeon_Base::clear_cane_temp_levle() {
  cane_temp_levle_ = 0u;
  clear_has_cane_temp_levle();
}
inline ::google::protobuf::uint32 GS2C_Dungeon_Base::cane_temp_levle() const {
  return cane_temp_levle_;
}
inline void GS2C_Dungeon_Base::set_cane_temp_levle(::google::protobuf::uint32 value) {
  set_has_cane_temp_levle();
  cane_temp_levle_ = value;
}

// optional uint64 cane_temp_time = 7;
inline bool GS2C_Dungeon_Base::has_cane_temp_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GS2C_Dungeon_Base::set_has_cane_temp_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GS2C_Dungeon_Base::clear_has_cane_temp_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GS2C_Dungeon_Base::clear_cane_temp_time() {
  cane_temp_time_ = GOOGLE_ULONGLONG(0);
  clear_has_cane_temp_time();
}
inline ::google::protobuf::uint64 GS2C_Dungeon_Base::cane_temp_time() const {
  return cane_temp_time_;
}
inline void GS2C_Dungeon_Base::set_cane_temp_time(::google::protobuf::uint64 value) {
  set_has_cane_temp_time();
  cane_temp_time_ = value;
}

// optional uint32 today_catch_hero_cnt = 8;
inline bool GS2C_Dungeon_Base::has_today_catch_hero_cnt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GS2C_Dungeon_Base::set_has_today_catch_hero_cnt() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GS2C_Dungeon_Base::clear_has_today_catch_hero_cnt() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GS2C_Dungeon_Base::clear_today_catch_hero_cnt() {
  today_catch_hero_cnt_ = 0u;
  clear_has_today_catch_hero_cnt();
}
inline ::google::protobuf::uint32 GS2C_Dungeon_Base::today_catch_hero_cnt() const {
  return today_catch_hero_cnt_;
}
inline void GS2C_Dungeon_Base::set_today_catch_hero_cnt(::google::protobuf::uint32 value) {
  set_has_today_catch_hero_cnt();
  today_catch_hero_cnt_ = value;
}

// optional uint32 catch_hero_cnt_for_exp = 9;
inline bool GS2C_Dungeon_Base::has_catch_hero_cnt_for_exp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GS2C_Dungeon_Base::set_has_catch_hero_cnt_for_exp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GS2C_Dungeon_Base::clear_has_catch_hero_cnt_for_exp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GS2C_Dungeon_Base::clear_catch_hero_cnt_for_exp() {
  catch_hero_cnt_for_exp_ = 0u;
  clear_has_catch_hero_cnt_for_exp();
}
inline ::google::protobuf::uint32 GS2C_Dungeon_Base::catch_hero_cnt_for_exp() const {
  return catch_hero_cnt_for_exp_;
}
inline void GS2C_Dungeon_Base::set_catch_hero_cnt_for_exp(::google::protobuf::uint32 value) {
  set_has_catch_hero_cnt_for_exp();
  catch_hero_cnt_for_exp_ = value;
}

// optional uint64 catch_hero_time = 10;
inline bool GS2C_Dungeon_Base::has_catch_hero_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GS2C_Dungeon_Base::set_has_catch_hero_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GS2C_Dungeon_Base::clear_has_catch_hero_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GS2C_Dungeon_Base::clear_catch_hero_time() {
  catch_hero_time_ = GOOGLE_ULONGLONG(0);
  clear_has_catch_hero_time();
}
inline ::google::protobuf::uint64 GS2C_Dungeon_Base::catch_hero_time() const {
  return catch_hero_time_;
}
inline void GS2C_Dungeon_Base::set_catch_hero_time(::google::protobuf::uint64 value) {
  set_has_catch_hero_time();
  catch_hero_time_ = value;
}

// optional uint32 today_cane_cnt = 11;
inline bool GS2C_Dungeon_Base::has_today_cane_cnt() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GS2C_Dungeon_Base::set_has_today_cane_cnt() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GS2C_Dungeon_Base::clear_has_today_cane_cnt() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GS2C_Dungeon_Base::clear_today_cane_cnt() {
  today_cane_cnt_ = 0u;
  clear_has_today_cane_cnt();
}
inline ::google::protobuf::uint32 GS2C_Dungeon_Base::today_cane_cnt() const {
  return today_cane_cnt_;
}
inline void GS2C_Dungeon_Base::set_today_cane_cnt(::google::protobuf::uint32 value) {
  set_has_today_cane_cnt();
  today_cane_cnt_ = value;
}

// optional uint32 today_cane_get_exp = 12;
inline bool GS2C_Dungeon_Base::has_today_cane_get_exp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GS2C_Dungeon_Base::set_has_today_cane_get_exp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GS2C_Dungeon_Base::clear_has_today_cane_get_exp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GS2C_Dungeon_Base::clear_today_cane_get_exp() {
  today_cane_get_exp_ = 0u;
  clear_has_today_cane_get_exp();
}
inline ::google::protobuf::uint32 GS2C_Dungeon_Base::today_cane_get_exp() const {
  return today_cane_get_exp_;
}
inline void GS2C_Dungeon_Base::set_today_cane_get_exp(::google::protobuf::uint32 value) {
  set_has_today_cane_get_exp();
  today_cane_get_exp_ = value;
}

// -------------------------------------------------------------------

// GS2C_Dungeon_All_Info

// optional .pb.GS2C_Dungeon_Base base_info = 1;
inline bool GS2C_Dungeon_All_Info::has_base_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Dungeon_All_Info::set_has_base_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Dungeon_All_Info::clear_has_base_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Dungeon_All_Info::clear_base_info() {
  if (base_info_ != NULL) base_info_->::pb::GS2C_Dungeon_Base::Clear();
  clear_has_base_info();
}
inline const ::pb::GS2C_Dungeon_Base& GS2C_Dungeon_All_Info::base_info() const {
  return base_info_ != NULL ? *base_info_ : *default_instance_->base_info_;
}
inline ::pb::GS2C_Dungeon_Base* GS2C_Dungeon_All_Info::mutable_base_info() {
  set_has_base_info();
  if (base_info_ == NULL) base_info_ = new ::pb::GS2C_Dungeon_Base;
  return base_info_;
}
inline ::pb::GS2C_Dungeon_Base* GS2C_Dungeon_All_Info::release_base_info() {
  clear_has_base_info();
  ::pb::GS2C_Dungeon_Base* temp = base_info_;
  base_info_ = NULL;
  return temp;
}
inline void GS2C_Dungeon_All_Info::set_allocated_base_info(::pb::GS2C_Dungeon_Base* base_info) {
  delete base_info_;
  base_info_ = base_info;
  if (base_info) {
    set_has_base_info();
  } else {
    clear_has_base_info();
  }
}

// repeated .pb.CatchHero catch_hero = 2;
inline int GS2C_Dungeon_All_Info::catch_hero_size() const {
  return catch_hero_.size();
}
inline void GS2C_Dungeon_All_Info::clear_catch_hero() {
  catch_hero_.Clear();
}
inline const ::pb::CatchHero& GS2C_Dungeon_All_Info::catch_hero(int index) const {
  return catch_hero_.Get(index);
}
inline ::pb::CatchHero* GS2C_Dungeon_All_Info::mutable_catch_hero(int index) {
  return catch_hero_.Mutable(index);
}
inline ::pb::CatchHero* GS2C_Dungeon_All_Info::add_catch_hero() {
  return catch_hero_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::CatchHero >&
GS2C_Dungeon_All_Info::catch_hero() const {
  return catch_hero_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::CatchHero >*
GS2C_Dungeon_All_Info::mutable_catch_hero() {
  return &catch_hero_;
}

// -------------------------------------------------------------------

// GS2C_Dungeon_Add_Hero

// required .pb.CatchHero hero = 1;
inline bool GS2C_Dungeon_Add_Hero::has_hero() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Dungeon_Add_Hero::set_has_hero() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Dungeon_Add_Hero::clear_has_hero() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Dungeon_Add_Hero::clear_hero() {
  if (hero_ != NULL) hero_->::pb::CatchHero::Clear();
  clear_has_hero();
}
inline const ::pb::CatchHero& GS2C_Dungeon_Add_Hero::hero() const {
  return hero_ != NULL ? *hero_ : *default_instance_->hero_;
}
inline ::pb::CatchHero* GS2C_Dungeon_Add_Hero::mutable_hero() {
  set_has_hero();
  if (hero_ == NULL) hero_ = new ::pb::CatchHero;
  return hero_;
}
inline ::pb::CatchHero* GS2C_Dungeon_Add_Hero::release_hero() {
  clear_has_hero();
  ::pb::CatchHero* temp = hero_;
  hero_ = NULL;
  return temp;
}
inline void GS2C_Dungeon_Add_Hero::set_allocated_hero(::pb::CatchHero* hero) {
  delete hero_;
  hero_ = hero;
  if (hero) {
    set_has_hero();
  } else {
    clear_has_hero();
  }
}

// -------------------------------------------------------------------

// GS2C_Dungeon_Del_Hero

// required .pb.CatchHero hero = 1;
inline bool GS2C_Dungeon_Del_Hero::has_hero() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Dungeon_Del_Hero::set_has_hero() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Dungeon_Del_Hero::clear_has_hero() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Dungeon_Del_Hero::clear_hero() {
  if (hero_ != NULL) hero_->::pb::CatchHero::Clear();
  clear_has_hero();
}
inline const ::pb::CatchHero& GS2C_Dungeon_Del_Hero::hero() const {
  return hero_ != NULL ? *hero_ : *default_instance_->hero_;
}
inline ::pb::CatchHero* GS2C_Dungeon_Del_Hero::mutable_hero() {
  set_has_hero();
  if (hero_ == NULL) hero_ = new ::pb::CatchHero;
  return hero_;
}
inline ::pb::CatchHero* GS2C_Dungeon_Del_Hero::release_hero() {
  clear_has_hero();
  ::pb::CatchHero* temp = hero_;
  hero_ = NULL;
  return temp;
}
inline void GS2C_Dungeon_Del_Hero::set_allocated_hero(::pb::CatchHero* hero) {
  delete hero_;
  hero_ = hero;
  if (hero) {
    set_has_hero();
  } else {
    clear_has_hero();
  }
}

// -------------------------------------------------------------------

// C2GS_Dungeon_Build_By_Silver

// required bool is_fast = 1;
inline bool C2GS_Dungeon_Build_By_Silver::has_is_fast() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Dungeon_Build_By_Silver::set_has_is_fast() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Dungeon_Build_By_Silver::clear_has_is_fast() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Dungeon_Build_By_Silver::clear_is_fast() {
  is_fast_ = false;
  clear_has_is_fast();
}
inline bool C2GS_Dungeon_Build_By_Silver::is_fast() const {
  return is_fast_;
}
inline void C2GS_Dungeon_Build_By_Silver::set_is_fast(bool value) {
  set_has_is_fast();
  is_fast_ = value;
}

// -------------------------------------------------------------------

// C2GS_Dungeon_Cane_Fase_LevelUp

// required uint32 dst_lv = 1;
inline bool C2GS_Dungeon_Cane_Fase_LevelUp::has_dst_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Dungeon_Cane_Fase_LevelUp::set_has_dst_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Dungeon_Cane_Fase_LevelUp::clear_has_dst_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Dungeon_Cane_Fase_LevelUp::clear_dst_lv() {
  dst_lv_ = 0u;
  clear_has_dst_lv();
}
inline ::google::protobuf::uint32 C2GS_Dungeon_Cane_Fase_LevelUp::dst_lv() const {
  return dst_lv_;
}
inline void C2GS_Dungeon_Cane_Fase_LevelUp::set_dst_lv(::google::protobuf::uint32 value) {
  set_has_dst_lv();
  dst_lv_ = value;
}

// -------------------------------------------------------------------

// C2GS_Dungeon_Try_Cane

// required uint32 dst_lv = 1;
inline bool C2GS_Dungeon_Try_Cane::has_dst_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Dungeon_Try_Cane::set_has_dst_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Dungeon_Try_Cane::clear_has_dst_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Dungeon_Try_Cane::clear_dst_lv() {
  dst_lv_ = 0u;
  clear_has_dst_lv();
}
inline ::google::protobuf::uint32 C2GS_Dungeon_Try_Cane::dst_lv() const {
  return dst_lv_;
}
inline void C2GS_Dungeon_Try_Cane::set_dst_lv(::google::protobuf::uint32 value) {
  set_has_dst_lv();
  dst_lv_ = value;
}

// -------------------------------------------------------------------

// C2GS_Dungeon_Escape

// required uint32 hero_idx = 1;
inline bool C2GS_Dungeon_Escape::has_hero_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Dungeon_Escape::set_has_hero_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Dungeon_Escape::clear_has_hero_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Dungeon_Escape::clear_hero_idx() {
  hero_idx_ = 0u;
  clear_has_hero_idx();
}
inline ::google::protobuf::uint32 C2GS_Dungeon_Escape::hero_idx() const {
  return hero_idx_;
}
inline void C2GS_Dungeon_Escape::set_hero_idx(::google::protobuf::uint32 value) {
  set_has_hero_idx();
  hero_idx_ = value;
}

// -------------------------------------------------------------------

// GS2C_Dungeon_Escape

// required uint32 hero_tid = 1;
inline bool GS2C_Dungeon_Escape::has_hero_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Dungeon_Escape::set_has_hero_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Dungeon_Escape::clear_has_hero_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Dungeon_Escape::clear_hero_tid() {
  hero_tid_ = 0u;
  clear_has_hero_tid();
}
inline ::google::protobuf::uint32 GS2C_Dungeon_Escape::hero_tid() const {
  return hero_tid_;
}
inline void GS2C_Dungeon_Escape::set_hero_tid(::google::protobuf::uint32 value) {
  set_has_hero_tid();
  hero_tid_ = value;
}

// required uint32 need_second = 2;
inline bool GS2C_Dungeon_Escape::has_need_second() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Dungeon_Escape::set_has_need_second() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Dungeon_Escape::clear_has_need_second() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Dungeon_Escape::clear_need_second() {
  need_second_ = 0u;
  clear_has_need_second();
}
inline ::google::protobuf::uint32 GS2C_Dungeon_Escape::need_second() const {
  return need_second_;
}
inline void GS2C_Dungeon_Escape::set_need_second(::google::protobuf::uint32 value) {
  set_has_need_second();
  need_second_ = value;
}

// -------------------------------------------------------------------

// GS2C_HERO_BE_CATCH

// required uint32 hero_tid = 1;
inline bool GS2C_HERO_BE_CATCH::has_hero_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_HERO_BE_CATCH::set_has_hero_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_HERO_BE_CATCH::clear_has_hero_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_HERO_BE_CATCH::clear_hero_tid() {
  hero_tid_ = 0u;
  clear_has_hero_tid();
}
inline ::google::protobuf::uint32 GS2C_HERO_BE_CATCH::hero_tid() const {
  return hero_tid_;
}
inline void GS2C_HERO_BE_CATCH::set_hero_tid(::google::protobuf::uint32 value) {
  set_has_hero_tid();
  hero_tid_ = value;
}

// required uint64 dungeon_owner_player_id = 2;
inline bool GS2C_HERO_BE_CATCH::has_dungeon_owner_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_HERO_BE_CATCH::set_has_dungeon_owner_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_HERO_BE_CATCH::clear_has_dungeon_owner_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_HERO_BE_CATCH::clear_dungeon_owner_player_id() {
  dungeon_owner_player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dungeon_owner_player_id();
}
inline ::google::protobuf::uint64 GS2C_HERO_BE_CATCH::dungeon_owner_player_id() const {
  return dungeon_owner_player_id_;
}
inline void GS2C_HERO_BE_CATCH::set_dungeon_owner_player_id(::google::protobuf::uint64 value) {
  set_has_dungeon_owner_player_id();
  dungeon_owner_player_id_ = value;
}

// -------------------------------------------------------------------

// GS2C_Dungeon_Cane

// required bool success = 1;
inline bool GS2C_Dungeon_Cane::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Dungeon_Cane::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Dungeon_Cane::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Dungeon_Cane::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool GS2C_Dungeon_Cane::success() const {
  return success_;
}
inline void GS2C_Dungeon_Cane::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// required uint32 player_exp = 2;
inline bool GS2C_Dungeon_Cane::has_player_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Dungeon_Cane::set_has_player_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Dungeon_Cane::clear_has_player_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Dungeon_Cane::clear_player_exp() {
  player_exp_ = 0u;
  clear_has_player_exp();
}
inline ::google::protobuf::uint32 GS2C_Dungeon_Cane::player_exp() const {
  return player_exp_;
}
inline void GS2C_Dungeon_Cane::set_player_exp(::google::protobuf::uint32 value) {
  set_has_player_exp();
  player_exp_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Dungeon_2eproto__INCLUDED
