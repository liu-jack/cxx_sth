// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DbProxy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DbProxy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* DB2G_Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2G_Error_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB2G_OperateResPon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2G_OperateResPon_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_AccountId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_AccountId_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_AccountData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_AccountData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_CharacterId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_CharacterId_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DbProxy_2eproto() {
  protobuf_AddDesc_DbProxy_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DbProxy.proto");
  GOOGLE_CHECK(file != NULL);
  DB2G_Error_descriptor_ = file->message_type(0);
  static const int DB2G_Error_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2G_Error, info_),
  };
  DB2G_Error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2G_Error_descriptor_,
      DB2G_Error::default_instance_,
      DB2G_Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2G_Error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2G_Error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2G_Error));
  DB2G_OperateResPon_descriptor_ = file->message_type(1);
  static const int DB2G_OperateResPon_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2G_OperateResPon, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2G_OperateResPon, to_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2G_OperateResPon, operate_result_),
  };
  DB2G_OperateResPon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2G_OperateResPon_descriptor_,
      DB2G_OperateResPon::default_instance_,
      DB2G_OperateResPon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2G_OperateResPon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2G_OperateResPon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2G_OperateResPon));
  GxDB_AccountId_descriptor_ = file->message_type(2);
  static const int GxDB_AccountId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_AccountId, account_name_),
  };
  GxDB_AccountId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_AccountId_descriptor_,
      GxDB_AccountId::default_instance_,
      GxDB_AccountId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_AccountId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_AccountId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_AccountId));
  GxDB_AccountData_descriptor_ = file->message_type(3);
  static const int GxDB_AccountData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_AccountData, account_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_AccountData, character_name_),
  };
  GxDB_AccountData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_AccountData_descriptor_,
      GxDB_AccountData::default_instance_,
      GxDB_AccountData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_AccountData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_AccountData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_AccountData));
  GxDB_CharacterId_descriptor_ = file->message_type(4);
  static const int GxDB_CharacterId_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_CharacterId, character_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_CharacterId, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_CharacterId, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_CharacterId, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_CharacterId, character_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_CharacterId, is_new_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_CharacterId, is_del_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_CharacterId, delete_time_),
  };
  GxDB_CharacterId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_CharacterId_descriptor_,
      GxDB_CharacterId::default_instance_,
      GxDB_CharacterId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_CharacterId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_CharacterId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_CharacterId));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DbProxy_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2G_Error_descriptor_, &DB2G_Error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2G_OperateResPon_descriptor_, &DB2G_OperateResPon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_AccountId_descriptor_, &GxDB_AccountId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_AccountData_descriptor_, &GxDB_AccountData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_CharacterId_descriptor_, &GxDB_CharacterId::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DbProxy_2eproto() {
  delete DB2G_Error::default_instance_;
  delete DB2G_Error_reflection_;
  delete DB2G_OperateResPon::default_instance_;
  delete DB2G_OperateResPon_reflection_;
  delete GxDB_AccountId::default_instance_;
  delete GxDB_AccountId_reflection_;
  delete GxDB_AccountData::default_instance_;
  delete GxDB_AccountData_reflection_;
  delete GxDB_CharacterId::default_instance_;
  delete GxDB_CharacterId_reflection_;
}

void protobuf_AddDesc_DbProxy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_GameServer_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rDbProxy.proto\022\002pb\032\020GameServer.proto\"\032\n"
    "\nDB2G_Error\022\014\n\004info\030\002 \001(\t\"R\n\022DB2G_Operat"
    "eResPon\022\023\n\013player_guid\030\001 \001(\004\022\017\n\007to_name\030"
    "\002 \001(\t\022\026\n\016operate_result\030\003 \002(\010\"&\n\016GxDB_Ac"
    "countId\022\024\n\014account_name\030\001 \002(\t\"@\n\020GxDB_Ac"
    "countData\022\024\n\014account_name\030\001 \002(\t\022\026\n\016chara"
    "cter_name\030\002 \003(\t\"\265\001\n\020GxDB_CharacterId\022\024\n\014"
    "character_id\030\001 \002(\004\022\021\n\tregion_id\030\002 \001(\r\022\021\n"
    "\tserver_id\030\003 \001(\r\022\022\n\naccount_id\030\004 \001(\r\022\026\n\016"
    "character_name\030\005 \001(\t\022\021\n\006is_new\030\006 \001(\r:\0010\022"
    "\021\n\006is_del\030\007 \001(\r:\0010\022\023\n\013delete_time\030\010 \001(\t", 439);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DbProxy.proto", &protobuf_RegisterTypes);
  DB2G_Error::default_instance_ = new DB2G_Error();
  DB2G_OperateResPon::default_instance_ = new DB2G_OperateResPon();
  GxDB_AccountId::default_instance_ = new GxDB_AccountId();
  GxDB_AccountData::default_instance_ = new GxDB_AccountData();
  GxDB_CharacterId::default_instance_ = new GxDB_CharacterId();
  DB2G_Error::default_instance_->InitAsDefaultInstance();
  DB2G_OperateResPon::default_instance_->InitAsDefaultInstance();
  GxDB_AccountId::default_instance_->InitAsDefaultInstance();
  GxDB_AccountData::default_instance_->InitAsDefaultInstance();
  GxDB_CharacterId::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DbProxy_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DbProxy_2eproto {
  StaticDescriptorInitializer_DbProxy_2eproto() {
    protobuf_AddDesc_DbProxy_2eproto();
  }
} static_descriptor_initializer_DbProxy_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DB2G_Error::kInfoFieldNumber;
#endif  // !_MSC_VER

DB2G_Error::DB2G_Error()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB2G_Error::InitAsDefaultInstance() {
}

DB2G_Error::DB2G_Error(const DB2G_Error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB2G_Error::SharedCtor() {
  _cached_size_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2G_Error::~DB2G_Error() {
  SharedDtor();
}

void DB2G_Error::SharedDtor() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void DB2G_Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2G_Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2G_Error_descriptor_;
}

const DB2G_Error& DB2G_Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DbProxy_2eproto();
  return *default_instance_;
}

DB2G_Error* DB2G_Error::default_instance_ = NULL;

DB2G_Error* DB2G_Error::New() const {
  return new DB2G_Error;
}

void DB2G_Error::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2G_Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB2G_Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB2G_Error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB2G_Error::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2G_Error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2G_Error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2G_Error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2G_Error::MergeFrom(const DB2G_Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2G_Error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2G_Error::CopyFrom(const DB2G_Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2G_Error::IsInitialized() const {

  return true;
}

void DB2G_Error::Swap(DB2G_Error* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2G_Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2G_Error_descriptor_;
  metadata.reflection = DB2G_Error_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB2G_OperateResPon::kPlayerGuidFieldNumber;
const int DB2G_OperateResPon::kToNameFieldNumber;
const int DB2G_OperateResPon::kOperateResultFieldNumber;
#endif  // !_MSC_VER

DB2G_OperateResPon::DB2G_OperateResPon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB2G_OperateResPon::InitAsDefaultInstance() {
}

DB2G_OperateResPon::DB2G_OperateResPon(const DB2G_OperateResPon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB2G_OperateResPon::SharedCtor() {
  _cached_size_ = 0;
  player_guid_ = GOOGLE_ULONGLONG(0);
  to_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  operate_result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2G_OperateResPon::~DB2G_OperateResPon() {
  SharedDtor();
}

void DB2G_OperateResPon::SharedDtor() {
  if (to_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_name_;
  }
  if (this != default_instance_) {
  }
}

void DB2G_OperateResPon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2G_OperateResPon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2G_OperateResPon_descriptor_;
}

const DB2G_OperateResPon& DB2G_OperateResPon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DbProxy_2eproto();
  return *default_instance_;
}

DB2G_OperateResPon* DB2G_OperateResPon::default_instance_ = NULL;

DB2G_OperateResPon* DB2G_OperateResPon::New() const {
  return new DB2G_OperateResPon;
}

void DB2G_OperateResPon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_guid_ = GOOGLE_ULONGLONG(0);
    if (has_to_name()) {
      if (to_name_ != &::google::protobuf::internal::kEmptyString) {
        to_name_->clear();
      }
    }
    operate_result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2G_OperateResPon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_to_name;
        break;
      }

      // optional string to_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to_name().data(), this->to_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_operate_result;
        break;
      }

      // required bool operate_result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &operate_result_)));
          set_has_operate_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB2G_OperateResPon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_guid = 1;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_guid(), output);
  }

  // optional string to_name = 2;
  if (has_to_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_name().data(), this->to_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->to_name(), output);
  }

  // required bool operate_result = 3;
  if (has_operate_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->operate_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB2G_OperateResPon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_guid = 1;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_guid(), target);
  }

  // optional string to_name = 2;
  if (has_to_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_name().data(), this->to_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->to_name(), target);
  }

  // required bool operate_result = 3;
  if (has_operate_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->operate_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB2G_OperateResPon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_guid = 1;
    if (has_player_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_guid());
    }

    // optional string to_name = 2;
    if (has_to_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_name());
    }

    // required bool operate_result = 3;
    if (has_operate_result()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2G_OperateResPon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2G_OperateResPon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2G_OperateResPon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2G_OperateResPon::MergeFrom(const DB2G_OperateResPon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
    if (from.has_to_name()) {
      set_to_name(from.to_name());
    }
    if (from.has_operate_result()) {
      set_operate_result(from.operate_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2G_OperateResPon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2G_OperateResPon::CopyFrom(const DB2G_OperateResPon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2G_OperateResPon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void DB2G_OperateResPon::Swap(DB2G_OperateResPon* other) {
  if (other != this) {
    std::swap(player_guid_, other->player_guid_);
    std::swap(to_name_, other->to_name_);
    std::swap(operate_result_, other->operate_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2G_OperateResPon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2G_OperateResPon_descriptor_;
  metadata.reflection = DB2G_OperateResPon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_AccountId::kAccountNameFieldNumber;
#endif  // !_MSC_VER

GxDB_AccountId::GxDB_AccountId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_AccountId::InitAsDefaultInstance() {
}

GxDB_AccountId::GxDB_AccountId(const GxDB_AccountId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_AccountId::SharedCtor() {
  _cached_size_ = 0;
  account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_AccountId::~GxDB_AccountId() {
  SharedDtor();
}

void GxDB_AccountId::SharedDtor() {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_;
  }
  if (this != default_instance_) {
  }
}

void GxDB_AccountId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_AccountId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_AccountId_descriptor_;
}

const GxDB_AccountId& GxDB_AccountId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DbProxy_2eproto();
  return *default_instance_;
}

GxDB_AccountId* GxDB_AccountId::default_instance_ = NULL;

GxDB_AccountId* GxDB_AccountId::New() const {
  return new GxDB_AccountId;
}

void GxDB_AccountId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account_name()) {
      if (account_name_ != &::google::protobuf::internal::kEmptyString) {
        account_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_AccountId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_name().data(), this->account_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_AccountId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string account_name = 1;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_AccountId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string account_name = 1;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_AccountId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string account_name = 1;
    if (has_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_AccountId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_AccountId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_AccountId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_AccountId::MergeFrom(const GxDB_AccountId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_name()) {
      set_account_name(from.account_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_AccountId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_AccountId::CopyFrom(const GxDB_AccountId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_AccountId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GxDB_AccountId::Swap(GxDB_AccountId* other) {
  if (other != this) {
    std::swap(account_name_, other->account_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_AccountId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_AccountId_descriptor_;
  metadata.reflection = GxDB_AccountId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_AccountData::kAccountNameFieldNumber;
const int GxDB_AccountData::kCharacterNameFieldNumber;
#endif  // !_MSC_VER

GxDB_AccountData::GxDB_AccountData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_AccountData::InitAsDefaultInstance() {
}

GxDB_AccountData::GxDB_AccountData(const GxDB_AccountData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_AccountData::SharedCtor() {
  _cached_size_ = 0;
  account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_AccountData::~GxDB_AccountData() {
  SharedDtor();
}

void GxDB_AccountData::SharedDtor() {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_;
  }
  if (this != default_instance_) {
  }
}

void GxDB_AccountData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_AccountData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_AccountData_descriptor_;
}

const GxDB_AccountData& GxDB_AccountData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DbProxy_2eproto();
  return *default_instance_;
}

GxDB_AccountData* GxDB_AccountData::default_instance_ = NULL;

GxDB_AccountData* GxDB_AccountData::New() const {
  return new GxDB_AccountData;
}

void GxDB_AccountData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account_name()) {
      if (account_name_ != &::google::protobuf::internal::kEmptyString) {
        account_name_->clear();
      }
    }
  }
  character_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_AccountData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_name().data(), this->account_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_character_name;
        break;
      }

      // repeated string character_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_character_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_character_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->character_name(this->character_name_size() - 1).data(),
            this->character_name(this->character_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_character_name;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_AccountData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string account_name = 1;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account_name(), output);
  }

  // repeated string character_name = 2;
  for (int i = 0; i < this->character_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->character_name(i).data(), this->character_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->character_name(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_AccountData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string account_name = 1;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account_name(), target);
  }

  // repeated string character_name = 2;
  for (int i = 0; i < this->character_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->character_name(i).data(), this->character_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->character_name(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_AccountData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string account_name = 1;
    if (has_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

  }
  // repeated string character_name = 2;
  total_size += 1 * this->character_name_size();
  for (int i = 0; i < this->character_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->character_name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_AccountData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_AccountData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_AccountData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_AccountData::MergeFrom(const GxDB_AccountData& from) {
  GOOGLE_CHECK_NE(&from, this);
  character_name_.MergeFrom(from.character_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_name()) {
      set_account_name(from.account_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_AccountData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_AccountData::CopyFrom(const GxDB_AccountData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_AccountData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GxDB_AccountData::Swap(GxDB_AccountData* other) {
  if (other != this) {
    std::swap(account_name_, other->account_name_);
    character_name_.Swap(&other->character_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_AccountData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_AccountData_descriptor_;
  metadata.reflection = GxDB_AccountData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_CharacterId::kCharacterIdFieldNumber;
const int GxDB_CharacterId::kRegionIdFieldNumber;
const int GxDB_CharacterId::kServerIdFieldNumber;
const int GxDB_CharacterId::kAccountIdFieldNumber;
const int GxDB_CharacterId::kCharacterNameFieldNumber;
const int GxDB_CharacterId::kIsNewFieldNumber;
const int GxDB_CharacterId::kIsDelFieldNumber;
const int GxDB_CharacterId::kDeleteTimeFieldNumber;
#endif  // !_MSC_VER

GxDB_CharacterId::GxDB_CharacterId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_CharacterId::InitAsDefaultInstance() {
}

GxDB_CharacterId::GxDB_CharacterId(const GxDB_CharacterId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_CharacterId::SharedCtor() {
  _cached_size_ = 0;
  character_id_ = GOOGLE_ULONGLONG(0);
  region_id_ = 0u;
  server_id_ = 0u;
  account_id_ = 0u;
  character_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_new_ = 0u;
  is_del_ = 0u;
  delete_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_CharacterId::~GxDB_CharacterId() {
  SharedDtor();
}

void GxDB_CharacterId::SharedDtor() {
  if (character_name_ != &::google::protobuf::internal::kEmptyString) {
    delete character_name_;
  }
  if (delete_time_ != &::google::protobuf::internal::kEmptyString) {
    delete delete_time_;
  }
  if (this != default_instance_) {
  }
}

void GxDB_CharacterId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_CharacterId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_CharacterId_descriptor_;
}

const GxDB_CharacterId& GxDB_CharacterId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DbProxy_2eproto();
  return *default_instance_;
}

GxDB_CharacterId* GxDB_CharacterId::default_instance_ = NULL;

GxDB_CharacterId* GxDB_CharacterId::New() const {
  return new GxDB_CharacterId;
}

void GxDB_CharacterId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    character_id_ = GOOGLE_ULONGLONG(0);
    region_id_ = 0u;
    server_id_ = 0u;
    account_id_ = 0u;
    if (has_character_name()) {
      if (character_name_ != &::google::protobuf::internal::kEmptyString) {
        character_name_->clear();
      }
    }
    is_new_ = 0u;
    is_del_ = 0u;
    if (has_delete_time()) {
      if (delete_time_ != &::google::protobuf::internal::kEmptyString) {
        delete_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_CharacterId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 character_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &character_id_)));
          set_has_character_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_region_id;
        break;
      }

      // optional uint32 region_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_region_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_id;
        break;
      }

      // optional uint32 server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_account_id;
        break;
      }

      // optional uint32 account_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_character_name;
        break;
      }

      // optional string character_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_character_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_character_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->character_name().data(), this->character_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_new;
        break;
      }

      // optional uint32 is_new = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_new:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_new_)));
          set_has_is_new();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_del;
        break;
      }

      // optional uint32 is_del = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_del:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_del_)));
          set_has_is_del();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_delete_time;
        break;
      }

      // optional string delete_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_delete_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_delete_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->delete_time().data(), this->delete_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_CharacterId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 character_id = 1;
  if (has_character_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->character_id(), output);
  }

  // optional uint32 region_id = 2;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->region_id(), output);
  }

  // optional uint32 server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_id(), output);
  }

  // optional uint32 account_id = 4;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->account_id(), output);
  }

  // optional string character_name = 5;
  if (has_character_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->character_name().data(), this->character_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->character_name(), output);
  }

  // optional uint32 is_new = 6 [default = 0];
  if (has_is_new()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->is_new(), output);
  }

  // optional uint32 is_del = 7 [default = 0];
  if (has_is_del()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->is_del(), output);
  }

  // optional string delete_time = 8;
  if (has_delete_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->delete_time().data(), this->delete_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->delete_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_CharacterId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 character_id = 1;
  if (has_character_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->character_id(), target);
  }

  // optional uint32 region_id = 2;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->region_id(), target);
  }

  // optional uint32 server_id = 3;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_id(), target);
  }

  // optional uint32 account_id = 4;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->account_id(), target);
  }

  // optional string character_name = 5;
  if (has_character_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->character_name().data(), this->character_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->character_name(), target);
  }

  // optional uint32 is_new = 6 [default = 0];
  if (has_is_new()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->is_new(), target);
  }

  // optional uint32 is_del = 7 [default = 0];
  if (has_is_del()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->is_del(), target);
  }

  // optional string delete_time = 8;
  if (has_delete_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->delete_time().data(), this->delete_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->delete_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_CharacterId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 character_id = 1;
    if (has_character_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->character_id());
    }

    // optional uint32 region_id = 2;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_id());
    }

    // optional uint32 server_id = 3;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // optional uint32 account_id = 4;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional string character_name = 5;
    if (has_character_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->character_name());
    }

    // optional uint32 is_new = 6 [default = 0];
    if (has_is_new()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_new());
    }

    // optional uint32 is_del = 7 [default = 0];
    if (has_is_del()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_del());
    }

    // optional string delete_time = 8;
    if (has_delete_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->delete_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_CharacterId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_CharacterId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_CharacterId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_CharacterId::MergeFrom(const GxDB_CharacterId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_id()) {
      set_character_id(from.character_id());
    }
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_character_name()) {
      set_character_name(from.character_name());
    }
    if (from.has_is_new()) {
      set_is_new(from.is_new());
    }
    if (from.has_is_del()) {
      set_is_del(from.is_del());
    }
    if (from.has_delete_time()) {
      set_delete_time(from.delete_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_CharacterId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_CharacterId::CopyFrom(const GxDB_CharacterId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_CharacterId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GxDB_CharacterId::Swap(GxDB_CharacterId* other) {
  if (other != this) {
    std::swap(character_id_, other->character_id_);
    std::swap(region_id_, other->region_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(character_name_, other->character_name_);
    std::swap(is_new_, other->is_new_);
    std::swap(is_del_, other->is_del_);
    std::swap(delete_time_, other->delete_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_CharacterId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_CharacterId_descriptor_;
  metadata.reflection = GxDB_CharacterId_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
