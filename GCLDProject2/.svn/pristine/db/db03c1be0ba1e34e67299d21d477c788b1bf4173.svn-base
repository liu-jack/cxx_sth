// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Altar.proto

#ifndef PROTOBUF_Altar_2eproto__INCLUDED
#define PROTOBUF_Altar_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommomDef.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Altar_2eproto();
void protobuf_AssignDesc_Altar_2eproto();
void protobuf_ShutdownFile_Altar_2eproto();

class SubAltar;
class GS2C_Altar_All_Info;
class C2GS_Altar_All_Info;
class C2GS_Altar_Study;
class GS2C_Altar_Study_Reward;
class C2GS_Altar_Take_Reward;
class C2GS_Altar_Sub_Altar_LevelUp;
class C2GS_Altar_Build_By_Token;
class C2GS_Altar_Build_By_Silver;
class C2GS_Altar_LevelUp_To_Open_SubAltar;
class C2GS_Altar_Study_OneKey;
class C2GS_Altar_Take_Reward_OneKey;

// ===================================================================

class SubAltar : public ::google::protobuf::Message {
 public:
  SubAltar();
  virtual ~SubAltar();

  SubAltar(const SubAltar& from);

  inline SubAltar& operator=(const SubAltar& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubAltar& default_instance();

  void Swap(SubAltar* other);

  // implements Message ----------------------------------------------

  SubAltar* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubAltar& from);
  void MergeFrom(const SubAltar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_level_up = 1;
  inline bool has_is_level_up() const;
  inline void clear_is_level_up();
  static const int kIsLevelUpFieldNumber = 1;
  inline bool is_level_up() const;
  inline void set_is_level_up(bool value);

  // required bool have_reward = 2;
  inline bool has_have_reward() const;
  inline void clear_have_reward();
  static const int kHaveRewardFieldNumber = 2;
  inline bool have_reward() const;
  inline void set_have_reward(bool value);

  // required uint32 study_times = 3;
  inline bool has_study_times() const;
  inline void clear_study_times();
  static const int kStudyTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 study_times() const;
  inline void set_study_times(::google::protobuf::uint32 value);

  // required uint64 last_study_time = 4;
  inline bool has_last_study_time() const;
  inline void clear_last_study_time();
  static const int kLastStudyTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 last_study_time() const;
  inline void set_last_study_time(::google::protobuf::uint64 value);

  // optional uint64 take_free_time = 5;
  inline bool has_take_free_time() const;
  inline void clear_take_free_time();
  static const int kTakeFreeTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 take_free_time() const;
  inline void set_take_free_time(::google::protobuf::uint64 value);

  // optional uint32 reward_count = 6;
  inline bool has_reward_count() const;
  inline void clear_reward_count();
  static const int kRewardCountFieldNumber = 6;
  inline ::google::protobuf::uint32 reward_count() const;
  inline void set_reward_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.SubAltar)
 private:
  inline void set_has_is_level_up();
  inline void clear_has_is_level_up();
  inline void set_has_have_reward();
  inline void clear_has_have_reward();
  inline void set_has_study_times();
  inline void clear_has_study_times();
  inline void set_has_last_study_time();
  inline void clear_has_last_study_time();
  inline void set_has_take_free_time();
  inline void clear_has_take_free_time();
  inline void set_has_reward_count();
  inline void clear_has_reward_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool is_level_up_;
  bool have_reward_;
  ::google::protobuf::uint32 study_times_;
  ::google::protobuf::uint64 last_study_time_;
  ::google::protobuf::uint64 take_free_time_;
  ::google::protobuf::uint32 reward_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Altar_2eproto();
  friend void protobuf_AssignDesc_Altar_2eproto();
  friend void protobuf_ShutdownFile_Altar_2eproto();

  void InitAsDefaultInstance();
  static SubAltar* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Altar_All_Info : public ::google::protobuf::Message {
 public:
  GS2C_Altar_All_Info();
  virtual ~GS2C_Altar_All_Info();

  GS2C_Altar_All_Info(const GS2C_Altar_All_Info& from);

  inline GS2C_Altar_All_Info& operator=(const GS2C_Altar_All_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Altar_All_Info& default_instance();

  void Swap(GS2C_Altar_All_Info* other);

  // implements Message ----------------------------------------------

  GS2C_Altar_All_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Altar_All_Info& from);
  void MergeFrom(const GS2C_Altar_All_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 levle = 1;
  inline bool has_levle() const;
  inline void clear_levle();
  static const int kLevleFieldNumber = 1;
  inline ::google::protobuf::uint32 levle() const;
  inline void set_levle(::google::protobuf::uint32 value);

  // optional uint32 silver_coin = 2;
  inline bool has_silver_coin() const;
  inline void clear_silver_coin();
  static const int kSilverCoinFieldNumber = 2;
  inline ::google::protobuf::uint32 silver_coin() const;
  inline void set_silver_coin(::google::protobuf::uint32 value);

  // repeated .pb.SubAltar sub_altar = 3;
  inline int sub_altar_size() const;
  inline void clear_sub_altar();
  static const int kSubAltarFieldNumber = 3;
  inline const ::pb::SubAltar& sub_altar(int index) const;
  inline ::pb::SubAltar* mutable_sub_altar(int index);
  inline ::pb::SubAltar* add_sub_altar();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::SubAltar >&
      sub_altar() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::SubAltar >*
      mutable_sub_altar();

  // @@protoc_insertion_point(class_scope:pb.GS2C_Altar_All_Info)
 private:
  inline void set_has_levle();
  inline void clear_has_levle();
  inline void set_has_silver_coin();
  inline void clear_has_silver_coin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 levle_;
  ::google::protobuf::uint32 silver_coin_;
  ::google::protobuf::RepeatedPtrField< ::pb::SubAltar > sub_altar_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Altar_2eproto();
  friend void protobuf_AssignDesc_Altar_2eproto();
  friend void protobuf_ShutdownFile_Altar_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Altar_All_Info* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Altar_All_Info : public ::google::protobuf::Message {
 public:
  C2GS_Altar_All_Info();
  virtual ~C2GS_Altar_All_Info();

  C2GS_Altar_All_Info(const C2GS_Altar_All_Info& from);

  inline C2GS_Altar_All_Info& operator=(const C2GS_Altar_All_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Altar_All_Info& default_instance();

  void Swap(C2GS_Altar_All_Info* other);

  // implements Message ----------------------------------------------

  C2GS_Altar_All_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Altar_All_Info& from);
  void MergeFrom(const C2GS_Altar_All_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.C2GS_Altar_All_Info)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Altar_2eproto();
  friend void protobuf_AssignDesc_Altar_2eproto();
  friend void protobuf_ShutdownFile_Altar_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Altar_All_Info* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Altar_Study : public ::google::protobuf::Message {
 public:
  C2GS_Altar_Study();
  virtual ~C2GS_Altar_Study();

  C2GS_Altar_Study(const C2GS_Altar_Study& from);

  inline C2GS_Altar_Study& operator=(const C2GS_Altar_Study& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Altar_Study& default_instance();

  void Swap(C2GS_Altar_Study* other);

  // implements Message ----------------------------------------------

  C2GS_Altar_Study* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Altar_Study& from);
  void MergeFrom(const C2GS_Altar_Study& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 altar_lv = 1;
  inline bool has_altar_lv() const;
  inline void clear_altar_lv();
  static const int kAltarLvFieldNumber = 1;
  inline ::google::protobuf::uint32 altar_lv() const;
  inline void set_altar_lv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Altar_Study)
 private:
  inline void set_has_altar_lv();
  inline void clear_has_altar_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 altar_lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Altar_2eproto();
  friend void protobuf_AssignDesc_Altar_2eproto();
  friend void protobuf_ShutdownFile_Altar_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Altar_Study* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Altar_Study_Reward : public ::google::protobuf::Message {
 public:
  GS2C_Altar_Study_Reward();
  virtual ~GS2C_Altar_Study_Reward();

  GS2C_Altar_Study_Reward(const GS2C_Altar_Study_Reward& from);

  inline GS2C_Altar_Study_Reward& operator=(const GS2C_Altar_Study_Reward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Altar_Study_Reward& default_instance();

  void Swap(GS2C_Altar_Study_Reward* other);

  // implements Message ----------------------------------------------

  GS2C_Altar_Study_Reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Altar_Study_Reward& from);
  void MergeFrom(const GS2C_Altar_Study_Reward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 altar_lv = 1;
  inline bool has_altar_lv() const;
  inline void clear_altar_lv();
  static const int kAltarLvFieldNumber = 1;
  inline ::google::protobuf::uint32 altar_lv() const;
  inline void set_altar_lv(::google::protobuf::uint32 value);

  // required uint32 reward_num = 2;
  inline bool has_reward_num() const;
  inline void clear_reward_num();
  static const int kRewardNumFieldNumber = 2;
  inline ::google::protobuf::uint32 reward_num() const;
  inline void set_reward_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Altar_Study_Reward)
 private:
  inline void set_has_altar_lv();
  inline void clear_has_altar_lv();
  inline void set_has_reward_num();
  inline void clear_has_reward_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 altar_lv_;
  ::google::protobuf::uint32 reward_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Altar_2eproto();
  friend void protobuf_AssignDesc_Altar_2eproto();
  friend void protobuf_ShutdownFile_Altar_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Altar_Study_Reward* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Altar_Take_Reward : public ::google::protobuf::Message {
 public:
  C2GS_Altar_Take_Reward();
  virtual ~C2GS_Altar_Take_Reward();

  C2GS_Altar_Take_Reward(const C2GS_Altar_Take_Reward& from);

  inline C2GS_Altar_Take_Reward& operator=(const C2GS_Altar_Take_Reward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Altar_Take_Reward& default_instance();

  void Swap(C2GS_Altar_Take_Reward* other);

  // implements Message ----------------------------------------------

  C2GS_Altar_Take_Reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Altar_Take_Reward& from);
  void MergeFrom(const C2GS_Altar_Take_Reward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 altar_lv = 1;
  inline bool has_altar_lv() const;
  inline void clear_altar_lv();
  static const int kAltarLvFieldNumber = 1;
  inline ::google::protobuf::uint32 altar_lv() const;
  inline void set_altar_lv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Altar_Take_Reward)
 private:
  inline void set_has_altar_lv();
  inline void clear_has_altar_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 altar_lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Altar_2eproto();
  friend void protobuf_AssignDesc_Altar_2eproto();
  friend void protobuf_ShutdownFile_Altar_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Altar_Take_Reward* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Altar_Sub_Altar_LevelUp : public ::google::protobuf::Message {
 public:
  C2GS_Altar_Sub_Altar_LevelUp();
  virtual ~C2GS_Altar_Sub_Altar_LevelUp();

  C2GS_Altar_Sub_Altar_LevelUp(const C2GS_Altar_Sub_Altar_LevelUp& from);

  inline C2GS_Altar_Sub_Altar_LevelUp& operator=(const C2GS_Altar_Sub_Altar_LevelUp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Altar_Sub_Altar_LevelUp& default_instance();

  void Swap(C2GS_Altar_Sub_Altar_LevelUp* other);

  // implements Message ----------------------------------------------

  C2GS_Altar_Sub_Altar_LevelUp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Altar_Sub_Altar_LevelUp& from);
  void MergeFrom(const C2GS_Altar_Sub_Altar_LevelUp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 altar_lv = 1;
  inline bool has_altar_lv() const;
  inline void clear_altar_lv();
  static const int kAltarLvFieldNumber = 1;
  inline ::google::protobuf::uint32 altar_lv() const;
  inline void set_altar_lv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Altar_Sub_Altar_LevelUp)
 private:
  inline void set_has_altar_lv();
  inline void clear_has_altar_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 altar_lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Altar_2eproto();
  friend void protobuf_AssignDesc_Altar_2eproto();
  friend void protobuf_ShutdownFile_Altar_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Altar_Sub_Altar_LevelUp* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Altar_Build_By_Token : public ::google::protobuf::Message {
 public:
  C2GS_Altar_Build_By_Token();
  virtual ~C2GS_Altar_Build_By_Token();

  C2GS_Altar_Build_By_Token(const C2GS_Altar_Build_By_Token& from);

  inline C2GS_Altar_Build_By_Token& operator=(const C2GS_Altar_Build_By_Token& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Altar_Build_By_Token& default_instance();

  void Swap(C2GS_Altar_Build_By_Token* other);

  // implements Message ----------------------------------------------

  C2GS_Altar_Build_By_Token* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Altar_Build_By_Token& from);
  void MergeFrom(const C2GS_Altar_Build_By_Token& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.C2GS_Altar_Build_By_Token)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Altar_2eproto();
  friend void protobuf_AssignDesc_Altar_2eproto();
  friend void protobuf_ShutdownFile_Altar_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Altar_Build_By_Token* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Altar_Build_By_Silver : public ::google::protobuf::Message {
 public:
  C2GS_Altar_Build_By_Silver();
  virtual ~C2GS_Altar_Build_By_Silver();

  C2GS_Altar_Build_By_Silver(const C2GS_Altar_Build_By_Silver& from);

  inline C2GS_Altar_Build_By_Silver& operator=(const C2GS_Altar_Build_By_Silver& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Altar_Build_By_Silver& default_instance();

  void Swap(C2GS_Altar_Build_By_Silver* other);

  // implements Message ----------------------------------------------

  C2GS_Altar_Build_By_Silver* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Altar_Build_By_Silver& from);
  void MergeFrom(const C2GS_Altar_Build_By_Silver& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_fast = 1;
  inline bool has_is_fast() const;
  inline void clear_is_fast();
  static const int kIsFastFieldNumber = 1;
  inline bool is_fast() const;
  inline void set_is_fast(bool value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Altar_Build_By_Silver)
 private:
  inline void set_has_is_fast();
  inline void clear_has_is_fast();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool is_fast_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Altar_2eproto();
  friend void protobuf_AssignDesc_Altar_2eproto();
  friend void protobuf_ShutdownFile_Altar_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Altar_Build_By_Silver* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Altar_LevelUp_To_Open_SubAltar : public ::google::protobuf::Message {
 public:
  C2GS_Altar_LevelUp_To_Open_SubAltar();
  virtual ~C2GS_Altar_LevelUp_To_Open_SubAltar();

  C2GS_Altar_LevelUp_To_Open_SubAltar(const C2GS_Altar_LevelUp_To_Open_SubAltar& from);

  inline C2GS_Altar_LevelUp_To_Open_SubAltar& operator=(const C2GS_Altar_LevelUp_To_Open_SubAltar& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Altar_LevelUp_To_Open_SubAltar& default_instance();

  void Swap(C2GS_Altar_LevelUp_To_Open_SubAltar* other);

  // implements Message ----------------------------------------------

  C2GS_Altar_LevelUp_To_Open_SubAltar* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Altar_LevelUp_To_Open_SubAltar& from);
  void MergeFrom(const C2GS_Altar_LevelUp_To_Open_SubAltar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.C2GS_Altar_LevelUp_To_Open_SubAltar)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Altar_2eproto();
  friend void protobuf_AssignDesc_Altar_2eproto();
  friend void protobuf_ShutdownFile_Altar_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Altar_LevelUp_To_Open_SubAltar* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Altar_Study_OneKey : public ::google::protobuf::Message {
 public:
  C2GS_Altar_Study_OneKey();
  virtual ~C2GS_Altar_Study_OneKey();

  C2GS_Altar_Study_OneKey(const C2GS_Altar_Study_OneKey& from);

  inline C2GS_Altar_Study_OneKey& operator=(const C2GS_Altar_Study_OneKey& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Altar_Study_OneKey& default_instance();

  void Swap(C2GS_Altar_Study_OneKey* other);

  // implements Message ----------------------------------------------

  C2GS_Altar_Study_OneKey* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Altar_Study_OneKey& from);
  void MergeFrom(const C2GS_Altar_Study_OneKey& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.C2GS_Altar_Study_OneKey)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Altar_2eproto();
  friend void protobuf_AssignDesc_Altar_2eproto();
  friend void protobuf_ShutdownFile_Altar_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Altar_Study_OneKey* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Altar_Take_Reward_OneKey : public ::google::protobuf::Message {
 public:
  C2GS_Altar_Take_Reward_OneKey();
  virtual ~C2GS_Altar_Take_Reward_OneKey();

  C2GS_Altar_Take_Reward_OneKey(const C2GS_Altar_Take_Reward_OneKey& from);

  inline C2GS_Altar_Take_Reward_OneKey& operator=(const C2GS_Altar_Take_Reward_OneKey& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Altar_Take_Reward_OneKey& default_instance();

  void Swap(C2GS_Altar_Take_Reward_OneKey* other);

  // implements Message ----------------------------------------------

  C2GS_Altar_Take_Reward_OneKey* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Altar_Take_Reward_OneKey& from);
  void MergeFrom(const C2GS_Altar_Take_Reward_OneKey& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.C2GS_Altar_Take_Reward_OneKey)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Altar_2eproto();
  friend void protobuf_AssignDesc_Altar_2eproto();
  friend void protobuf_ShutdownFile_Altar_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Altar_Take_Reward_OneKey* default_instance_;
};
// ===================================================================


// ===================================================================

// SubAltar

// required bool is_level_up = 1;
inline bool SubAltar::has_is_level_up() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubAltar::set_has_is_level_up() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubAltar::clear_has_is_level_up() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubAltar::clear_is_level_up() {
  is_level_up_ = false;
  clear_has_is_level_up();
}
inline bool SubAltar::is_level_up() const {
  return is_level_up_;
}
inline void SubAltar::set_is_level_up(bool value) {
  set_has_is_level_up();
  is_level_up_ = value;
}

// required bool have_reward = 2;
inline bool SubAltar::has_have_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubAltar::set_has_have_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubAltar::clear_has_have_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubAltar::clear_have_reward() {
  have_reward_ = false;
  clear_has_have_reward();
}
inline bool SubAltar::have_reward() const {
  return have_reward_;
}
inline void SubAltar::set_have_reward(bool value) {
  set_has_have_reward();
  have_reward_ = value;
}

// required uint32 study_times = 3;
inline bool SubAltar::has_study_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SubAltar::set_has_study_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SubAltar::clear_has_study_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SubAltar::clear_study_times() {
  study_times_ = 0u;
  clear_has_study_times();
}
inline ::google::protobuf::uint32 SubAltar::study_times() const {
  return study_times_;
}
inline void SubAltar::set_study_times(::google::protobuf::uint32 value) {
  set_has_study_times();
  study_times_ = value;
}

// required uint64 last_study_time = 4;
inline bool SubAltar::has_last_study_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SubAltar::set_has_last_study_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SubAltar::clear_has_last_study_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SubAltar::clear_last_study_time() {
  last_study_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_study_time();
}
inline ::google::protobuf::uint64 SubAltar::last_study_time() const {
  return last_study_time_;
}
inline void SubAltar::set_last_study_time(::google::protobuf::uint64 value) {
  set_has_last_study_time();
  last_study_time_ = value;
}

// optional uint64 take_free_time = 5;
inline bool SubAltar::has_take_free_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SubAltar::set_has_take_free_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SubAltar::clear_has_take_free_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SubAltar::clear_take_free_time() {
  take_free_time_ = GOOGLE_ULONGLONG(0);
  clear_has_take_free_time();
}
inline ::google::protobuf::uint64 SubAltar::take_free_time() const {
  return take_free_time_;
}
inline void SubAltar::set_take_free_time(::google::protobuf::uint64 value) {
  set_has_take_free_time();
  take_free_time_ = value;
}

// optional uint32 reward_count = 6;
inline bool SubAltar::has_reward_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SubAltar::set_has_reward_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SubAltar::clear_has_reward_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SubAltar::clear_reward_count() {
  reward_count_ = 0u;
  clear_has_reward_count();
}
inline ::google::protobuf::uint32 SubAltar::reward_count() const {
  return reward_count_;
}
inline void SubAltar::set_reward_count(::google::protobuf::uint32 value) {
  set_has_reward_count();
  reward_count_ = value;
}

// -------------------------------------------------------------------

// GS2C_Altar_All_Info

// optional uint32 levle = 1;
inline bool GS2C_Altar_All_Info::has_levle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Altar_All_Info::set_has_levle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Altar_All_Info::clear_has_levle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Altar_All_Info::clear_levle() {
  levle_ = 0u;
  clear_has_levle();
}
inline ::google::protobuf::uint32 GS2C_Altar_All_Info::levle() const {
  return levle_;
}
inline void GS2C_Altar_All_Info::set_levle(::google::protobuf::uint32 value) {
  set_has_levle();
  levle_ = value;
}

// optional uint32 silver_coin = 2;
inline bool GS2C_Altar_All_Info::has_silver_coin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Altar_All_Info::set_has_silver_coin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Altar_All_Info::clear_has_silver_coin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Altar_All_Info::clear_silver_coin() {
  silver_coin_ = 0u;
  clear_has_silver_coin();
}
inline ::google::protobuf::uint32 GS2C_Altar_All_Info::silver_coin() const {
  return silver_coin_;
}
inline void GS2C_Altar_All_Info::set_silver_coin(::google::protobuf::uint32 value) {
  set_has_silver_coin();
  silver_coin_ = value;
}

// repeated .pb.SubAltar sub_altar = 3;
inline int GS2C_Altar_All_Info::sub_altar_size() const {
  return sub_altar_.size();
}
inline void GS2C_Altar_All_Info::clear_sub_altar() {
  sub_altar_.Clear();
}
inline const ::pb::SubAltar& GS2C_Altar_All_Info::sub_altar(int index) const {
  return sub_altar_.Get(index);
}
inline ::pb::SubAltar* GS2C_Altar_All_Info::mutable_sub_altar(int index) {
  return sub_altar_.Mutable(index);
}
inline ::pb::SubAltar* GS2C_Altar_All_Info::add_sub_altar() {
  return sub_altar_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::SubAltar >&
GS2C_Altar_All_Info::sub_altar() const {
  return sub_altar_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::SubAltar >*
GS2C_Altar_All_Info::mutable_sub_altar() {
  return &sub_altar_;
}

// -------------------------------------------------------------------

// C2GS_Altar_All_Info

// -------------------------------------------------------------------

// C2GS_Altar_Study

// required uint32 altar_lv = 1;
inline bool C2GS_Altar_Study::has_altar_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Altar_Study::set_has_altar_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Altar_Study::clear_has_altar_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Altar_Study::clear_altar_lv() {
  altar_lv_ = 0u;
  clear_has_altar_lv();
}
inline ::google::protobuf::uint32 C2GS_Altar_Study::altar_lv() const {
  return altar_lv_;
}
inline void C2GS_Altar_Study::set_altar_lv(::google::protobuf::uint32 value) {
  set_has_altar_lv();
  altar_lv_ = value;
}

// -------------------------------------------------------------------

// GS2C_Altar_Study_Reward

// required uint32 altar_lv = 1;
inline bool GS2C_Altar_Study_Reward::has_altar_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Altar_Study_Reward::set_has_altar_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Altar_Study_Reward::clear_has_altar_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Altar_Study_Reward::clear_altar_lv() {
  altar_lv_ = 0u;
  clear_has_altar_lv();
}
inline ::google::protobuf::uint32 GS2C_Altar_Study_Reward::altar_lv() const {
  return altar_lv_;
}
inline void GS2C_Altar_Study_Reward::set_altar_lv(::google::protobuf::uint32 value) {
  set_has_altar_lv();
  altar_lv_ = value;
}

// required uint32 reward_num = 2;
inline bool GS2C_Altar_Study_Reward::has_reward_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Altar_Study_Reward::set_has_reward_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Altar_Study_Reward::clear_has_reward_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Altar_Study_Reward::clear_reward_num() {
  reward_num_ = 0u;
  clear_has_reward_num();
}
inline ::google::protobuf::uint32 GS2C_Altar_Study_Reward::reward_num() const {
  return reward_num_;
}
inline void GS2C_Altar_Study_Reward::set_reward_num(::google::protobuf::uint32 value) {
  set_has_reward_num();
  reward_num_ = value;
}

// -------------------------------------------------------------------

// C2GS_Altar_Take_Reward

// required uint32 altar_lv = 1;
inline bool C2GS_Altar_Take_Reward::has_altar_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Altar_Take_Reward::set_has_altar_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Altar_Take_Reward::clear_has_altar_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Altar_Take_Reward::clear_altar_lv() {
  altar_lv_ = 0u;
  clear_has_altar_lv();
}
inline ::google::protobuf::uint32 C2GS_Altar_Take_Reward::altar_lv() const {
  return altar_lv_;
}
inline void C2GS_Altar_Take_Reward::set_altar_lv(::google::protobuf::uint32 value) {
  set_has_altar_lv();
  altar_lv_ = value;
}

// -------------------------------------------------------------------

// C2GS_Altar_Sub_Altar_LevelUp

// required uint32 altar_lv = 1;
inline bool C2GS_Altar_Sub_Altar_LevelUp::has_altar_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Altar_Sub_Altar_LevelUp::set_has_altar_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Altar_Sub_Altar_LevelUp::clear_has_altar_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Altar_Sub_Altar_LevelUp::clear_altar_lv() {
  altar_lv_ = 0u;
  clear_has_altar_lv();
}
inline ::google::protobuf::uint32 C2GS_Altar_Sub_Altar_LevelUp::altar_lv() const {
  return altar_lv_;
}
inline void C2GS_Altar_Sub_Altar_LevelUp::set_altar_lv(::google::protobuf::uint32 value) {
  set_has_altar_lv();
  altar_lv_ = value;
}

// -------------------------------------------------------------------

// C2GS_Altar_Build_By_Token

// -------------------------------------------------------------------

// C2GS_Altar_Build_By_Silver

// required bool is_fast = 1;
inline bool C2GS_Altar_Build_By_Silver::has_is_fast() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Altar_Build_By_Silver::set_has_is_fast() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Altar_Build_By_Silver::clear_has_is_fast() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Altar_Build_By_Silver::clear_is_fast() {
  is_fast_ = false;
  clear_has_is_fast();
}
inline bool C2GS_Altar_Build_By_Silver::is_fast() const {
  return is_fast_;
}
inline void C2GS_Altar_Build_By_Silver::set_is_fast(bool value) {
  set_has_is_fast();
  is_fast_ = value;
}

// -------------------------------------------------------------------

// C2GS_Altar_LevelUp_To_Open_SubAltar

// -------------------------------------------------------------------

// C2GS_Altar_Study_OneKey

// -------------------------------------------------------------------

// C2GS_Altar_Take_Reward_OneKey


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Altar_2eproto__INCLUDED
