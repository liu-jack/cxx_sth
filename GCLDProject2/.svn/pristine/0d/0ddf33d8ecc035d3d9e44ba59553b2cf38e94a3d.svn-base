#include "Npc.h"
#include "OS.h"
#ifdef  _MMO_SERVER_
#include "../GameServer.h"
#include "Dungeon/PlayerDungeonLog.h"
#endif
#include "../Map/city/city.h"
#include "../Map/Table/MapTableMgr.h"
#include "Table/NpcTableMgr.h"
#include "datastruct/struct_npc.h"
#include "../Map/country/country.h"
#include "../Service/ServiceMgr.h"
#include "session/PlayerPool.h"
#include "object/Player.h"

#include "../Map/base/BaseMap.h"
#include "utility/Utility.h"
#include "../Combat/combat_define.h"
#include "Combat/SkillDataMgr.h"
#include "World.pb.h"
#include "../Map/WorldMap.h"
#include "Opcode.pb.h"

std::set<Npc*> Npc::m_deleteNpc;

Npc::Npc(const NpcProto& proto)
    : m_npcProto(proto)
    , m_countryId(0)
    , m_curCityId(0)
    , m_level(0)
	, m_unique_id(0)
	, m_canMove(false)
{
	_CreateUniqueId();
}
Npc::~Npc()
{
	//LLOG("[1003] fresh NPC class");
    ServiceMgr::UnRegister(SERVICE_NPC_MOVE, this);
}
uint32 _Service_NpcMove(void* p){
    Npc* pNpc = (Npc*)p;
    pNpc->_Move();
    return GET_BASE_DEF_INT( pb::BD_EXPEDITION_TROOPS_MOVE_INTERVAL_TIME) * 1000; // 1min loop
}
void Npc::_Move()
{
	if (isFighting || isInCombat) return; //上阵战斗中，不能移动
	
	if(soldiers.empty())
	{
		PLOG("[1000] IMPORTANT BUG!!! SOLDER IS DEAD TO MOVE!!!");
		//OnDead(NULL);
		//ServiceMgr::UnRegister(SERVICE_NPC_MOVE, this);
		return;
	}

    if (m_path.size() > 0)
    {
		//LLOG("Npc::_Move path>0,m_curCityId=%d,desciti=%d",m_curCityId,m_path.front());
        uint16 destCityId = m_path.front();

        City* pCurCity = m_pMap->GetCity(m_curCityId);
        City* pDestCity = m_pMap->GetCity(destCityId);

        if (isInCombat || !pCurCity || !pDestCity || !pCurCity->CanExit(*this) || !pDestCity->CanEnter(*this))
        {
			LLOG("move failed!!");
            return;
        }
#ifdef _MMO_SERVER_
		if(isExpedition)
		{
			if(!sWorldMap.isExpeditionMoveTo(expeid,destCityId))
			{
				sWorldMap.setExpeditionMoveTo(expeid,destCityId);
				pb::GS2C_Expedition_Army_Info sendmsg;
				sendmsg.set_expedition_id(expeid);
				sendmsg.set_city_id(destCityId);
				sendmsg.set_hero_id(GetTableId());
				sendmsg.set_org_city_id(m_curCityId);
				sWorldMap.BroadcastInCountry(pb::SMSG_NPC_POS_LIST,sendmsg,GetCountryId());
			}
		}
#endif
        _ExitCurCity(*pCurCity); //先退出当前城市
		if (!pCurCity->_Maze(*this))
		{
			_EnterCity(*pDestCity);
		}
        m_path.pop();
    }
}
void Npc::MoveTo(uint32 cityId)
{
    if (!m_pMap) return;

	if (!m_canMove) {
		m_canMove = true;
		ServiceMgr::Register(SERVICE_NPC_MOVE, this);	//一分钟执行一次move
	}
    m_pMap->m_cityGraph.GetCityPath(*m_pMap, m_curCityId, cityId, m_path);
}
bool Npc::_ExitCurCity(City& city)
{
    city.NpcExit(*this);
    return true;
}
bool Npc::_EnterCity(City& city)
{
    m_curCityId = city.id;

    city.NpcEnter(*this);

    return true;
}
void Npc::OnDead(CombatObj* killer)
{
    CombatObj::OnDead(killer);
#ifdef  _MMO_SERVER_
	if( killer != NULL && killer->IsPlayer() && !killer->IsShadow() )		//当杀手不是幻影也不是npc时，可以捕捉死亡武将
	{
		if (Player* player = sPlayerPool.GetByPlayerId(killer->GetPlayerId()))
		{
			player->m_DungeonLog->CatchObj(*player, *this);
		}
	}
#endif
    if (m_pMap)
    {
        if (City* city = m_pMap->GetCity(m_curCityId))
        {
            city->NpcExit(*this);

            //if (city->IsMonsterCity())
            //{
            //    RecoverFullSoldier();
            //    city->NpcEnter(*this);
            //    return;
            //}
        }
    }

	if(isExpedition)
	{
		Country* country = sWorldMap.GetCountry(m_countryId);
		if(country)
		{
			for(std::vector<uint32>::iterator it = (country->m_npc_expedirion[expeid]).begin(); it != (country->m_npc_expedirion[expeid]).end(); it++)
			{
				if( *it == m_unique_id )
				{
					(country->m_npc_expedirion[expeid]).erase(it);
					break;
				}
			}
			if((country->m_npc_expedirion[expeid]).empty())
			{
				pb::GS2C_Delete_Npc_World sendmsg;
				sendmsg.set_expeid(expeid);
				sendmsg.set_city_id(m_curCityId);
				sWorldMap.Broadcast(pb::SMSG_DELETE_NPC_WORLD,sendmsg);
			}
		}

	}

    //delete this; //Notice：直接delete，若外界持有pNpc就很危险了
    m_deleteNpc.insert(this);
}
float Npc::SkillRatio()
{
    return sSkillDataMgr.GetDamageFactor(SkillID());
}
uint8 Npc::SkillRange()
{
    return sSkillDataMgr.GetObjSkillRange(SkillID());
}

uint32 Npc::SkillID()
{
	return m_npcProto.skill_id;
}

int32 Npc::GetLevel() const
{
    if (m_pMap)
    {
        if (Country* pCountry = m_pMap->GetCountry(m_countryId))
        {
            return pCountry->m_countryNpcLv;
        }
    }
    return m_level;
}
const string& Npc::GetPlayerName()
{
    static string s_name;
    return s_name;
}
uint32 Npc::GetTableId()
{
	return m_npcProto.Id;
}
uint32 Npc::GetMaxRow()
{
	return m_npcProto.char_row;
}
void Npc::InitCombatData()
{
	Combat::CombatObj::InitCombatData();
    sNpcTableMgr.RecalculateAttr(m_npcProto.Id, GetLevel());
    stPro.tong = (int)sNpcTableMgr.GetAttr(UNIT_TONG);  //统
    stPro.yong = (int)sNpcTableMgr.GetAttr(UINT_YONG);         //勇
    stPro.attack = (int)sNpcTableMgr.GetAttr(UNIT_ATTACK);   //攻击
    stPro.defence = (int)sNpcTableMgr.GetAttr(UNIT_DEFENSE);     //防御
    stPro.skillAttack = (int)sNpcTableMgr.GetAttr(UNIT_BROKEN_ARRAY);//破阵，增加战法攻击力
    stPro.skillDefence = (int)sNpcTableMgr.GetAttr(UNIT_IMPECCABLE);//无懈，增加战法防御力
    stPro.attackEx = (int)sNpcTableMgr.GetAttr(UNIT_PUNCTURE);         //穿刺，攻击时附加伤害
    stPro.defenceEx = (int)sNpcTableMgr.GetAttr(UNIT_PARRY);//格挡，被攻击降低伤害
    stPro.rowSoldierMaxCnt = (int)sNpcTableMgr.GetAttr(UNIT_TROOPS) * 3;//(一排三个方阵)
}

void Npc::InitCombatDataSecond(uint32 geography)
{
	CombatObj::InitCombatDataSecond(geography);
}

void Npc::RecoverFullSoldier()
{
	if (isInCombat) return;

	soldiers.clear();

	for (uint32 i = 0; i < m_npcProto.char_row; ++i) {
		soldiers.push_back(stPro.rowSoldierMaxCnt);
	}
}
void Npc::_CreateUniqueId()
{
    static uint16 s_auto_id = 0;

    m_unique_id = ((++s_auto_id) << 16) + m_index;
}
Npc* Npc::FindNpc(uint32 uniqueId)
{
    int idx = uniqueId & 0xFFFF;

    if (Npc* ret = Npc::FindByIdx(idx))
        if (ret->m_unique_id == uniqueId)
            return ret;

    return NULL;
}
void Npc::_DeleteNpc()
{
    for (std::set<Npc*>::iterator it = m_deleteNpc.begin(); it != m_deleteNpc.end(); ++it)
    {
        delete *it;
    }
    m_deleteNpc.clear();
}
void Npc::DeleteNpc(Npc* p)
{
    m_deleteNpc.insert(p);
}

uint32 Npc::GetEnableTactics(uint32 geography /* = 0 */)
{
	int retnum = 7;
	LLOG("Npc::GetEnableTactics geography=%d",geography);
	//计算基础战术
	IntPairVec::iterator intTacs = m_enableTacs.begin();
	for(; intTacs != m_enableTacs.end(); intTacs++)
	{
		if(intTacs->first == geography)
		{
			if( intTacs->second>=1 && intTacs->second <= 3 )
				retnum |= (1<<(intTacs->second+2));
			retnum &= ~(1<<(intTacs->second-1));
		}
	}
	return retnum;
}

void Npc::SetEnableTactic(std::string& tacs)
{
	std::vector<std::string> tacticstrs;
	Utility::SplitStr(m_npcProto.teshuzhanshu, tacticstrs, ',');
	{
		for(std::vector<std::string>::iterator ite = tacticstrs.begin(); ite != tacticstrs.end(); ite++)
		{
			std::vector<int> tactics;
			Utility::SplitStr(*ite, tactics, '|');
			if(tactics.size() == 2)
			{
				IntPair	tacsint;
				tacsint.first = tactics[0];
				tacsint.second = tactics[1];
				m_enableTacs.push_back(tacsint);
			}

		}
	}
}

bool Npc::NewAutoTactic(Combat::CombatType cTyp/* = Combat::Country*/, Combat::TacticEnum tTyp/* = Combat::Attack*/)
{
	LLOG("Npc::NewAutoTactic cTyp=%d,tTyp=%d",(int)cTyp,(int)tTyp);
	bool ret = false;

	if( false == isSelectTactic)		//没有选择战术
	{
		LLOG("NPC not choose");
		if(leftSkillTimes <= 0)		//没有剩余技能次数，只能选择战术
		{
			LLOG("NPC 1");
			if(m_tmpAiLevel == 0)		//普通AI,随机选一个
			{
				SelectTactic(RandTactic());
			}
			else						//高级AI，选择克制的战术
			{
				LLOG("NPC 2");
				SelectTactic(GetKeZhiTactic(tTyp));
				LLOG("NPC 3");
			}
		}
		else		//有技能可放
		{
			if(cTyp == Combat::Country || Combat::Fuben)	//是国战或者副本，则直接释放
			{
				if(m_fightBuff.HaveBuff(Combat::confuse))
					SelectTactic(RandTactic());
				else
					SelectTactic(Combat::Skill_Tactic);
			}
			else
			{
				if(soldiers.size() == 1)	//只剩最后一排了
				{
					if(m_fightBuff.HaveBuff(Combat::confuse))
						SelectTactic(RandTactic());
					else
						SelectTactic(Combat::Skill_Tactic);
				}
				else
				{
					if(m_tmpAiLevel == 0)		//普通AI,随机选一个
					{
						SelectTactic(RandTactic());
					}
					else						//高级AI，选择克制的战术
					{
						SelectTactic(GetKeZhiTactic(tTyp));
					}
				}
			}
		}
		ret = true;
	}
	else			//选择了战术
	{
		LLOG("NPC has choose");
		if(tactic == Combat::Skill_Tactic && isUsedSkill)	//选择的是技能,并且已经用出去了，说明进入了第二轮，要随机一个战术
		{
			LLOG("NPC has choose");
			if(m_tmpAiLevel == 0)		//普通AI,随机选一个
			{
				SelectTactic(RandTactic());
			}
			else						//高级AI，选择克制的战术
			{
				SelectTactic(GetKeZhiTactic(tTyp));
			}
			ret = true;
		}

	}
	return ret;
}

void Npc::SetMovePath(std::vector<int>& path)
{
	std::queue<uint32> empty;
	std::swap( m_path, empty );

	for(std::vector<int>::iterator it = path.begin();
			it != path.end(); it++)
	{
		m_path.push(*it);
	}

	if (!m_pMap) return;

	if (!m_canMove) {
		m_canMove = true;
		ServiceMgr::Register(SERVICE_NPC_MOVE, this);	//一分钟执行一次move
	}
}

uint32 Npc::GetExtraAwardID()
{
	return m_npcProto.extra_resouce_id;
}

uint32 Npc::GetExtraAwardNum()
{
	return m_npcProto.extra_resouce_num;
}

void Npc::reCalcPower()
{
	return;
}

int Npc::GetTotalFightPercent()
{
	return 0;
}
 int Npc::GetTotalSkillPercent(const Combat::CombatType type,const uint32 obj_type/* = 0*/)
 {
	 return 0;
 }
 int Npc::GetTotalExpPercent(Combat::CombatType type )
 {
	 return 0;
 }
 int Npc::GetTotalReduceCostHP()
 {
	 return 0;
 }
 int Npc::GetTotalDoubleKill()
 {
	 return 0;
 }
 int Npc::GetTotalDeSkillPercent()
 {
	 return 0;
 }

 uint32 Npc::GetType() const
 {
	return m_npcProto.army_type;
 }

 void Npc::AddSkillPercentBySeigeArmySpecificId(int add_percent, int enemyType/* = 0*/)
 {
	(void)add_percent;
 }
