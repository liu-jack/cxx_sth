// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TeachMap.proto

#ifndef PROTOBUF_TeachMap_2eproto__INCLUDED
#define PROTOBUF_TeachMap_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommomDef.pb.h"
#include "Combat.pb.h"
#include "Item.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TeachMap_2eproto();
void protobuf_AssignDesc_TeachMap_2eproto();
void protobuf_ShutdownFile_TeachMap_2eproto();

class City_Combat_Info;
class GS2C_Get_Teach_Rec;
class C2GS_Request_Teach;
class GS2C_Answer_Teach;
class GS2C_Teach_Finish;
class C2GS_Rush_Teach;
class GS2C_Rush_Teach_Ret;

enum Teach_Ret {
  Teach_Common_success = 0,
  Teach_Common_Fail = 1,
  Teach_Already_Finished = 2,
  Teach_Rush_Force_Limit = 3
};
bool Teach_Ret_IsValid(int value);
const Teach_Ret Teach_Ret_MIN = Teach_Common_success;
const Teach_Ret Teach_Ret_MAX = Teach_Rush_Force_Limit;
const int Teach_Ret_ARRAYSIZE = Teach_Ret_MAX + 1;

const ::google::protobuf::EnumDescriptor* Teach_Ret_descriptor();
inline const ::std::string& Teach_Ret_Name(Teach_Ret value) {
  return ::google::protobuf::internal::NameOfEnum(
    Teach_Ret_descriptor(), value);
}
inline bool Teach_Ret_Parse(
    const ::std::string& name, Teach_Ret* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Teach_Ret>(
    Teach_Ret_descriptor(), name, value);
}
// ===================================================================

class City_Combat_Info : public ::google::protobuf::Message {
 public:
  City_Combat_Info();
  virtual ~City_Combat_Info();

  City_Combat_Info(const City_Combat_Info& from);

  inline City_Combat_Info& operator=(const City_Combat_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const City_Combat_Info& default_instance();

  void Swap(City_Combat_Info* other);

  // implements Message ----------------------------------------------

  City_Combat_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const City_Combat_Info& from);
  void MergeFrom(const City_Combat_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CityId = 1;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIdFieldNumber = 1;
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);

  // optional uint32 countryid = 2;
  inline bool has_countryid() const;
  inline void clear_countryid();
  static const int kCountryidFieldNumber = 2;
  inline ::google::protobuf::uint32 countryid() const;
  inline void set_countryid(::google::protobuf::uint32 value);

  // optional uint32 groupid = 3;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 3;
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.City_Combat_Info)
 private:
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_countryid();
  inline void clear_has_countryid();
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cityid_;
  ::google::protobuf::uint32 countryid_;
  ::google::protobuf::uint32 groupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_TeachMap_2eproto();
  friend void protobuf_AssignDesc_TeachMap_2eproto();
  friend void protobuf_ShutdownFile_TeachMap_2eproto();

  void InitAsDefaultInstance();
  static City_Combat_Info* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Get_Teach_Rec : public ::google::protobuf::Message {
 public:
  GS2C_Get_Teach_Rec();
  virtual ~GS2C_Get_Teach_Rec();

  GS2C_Get_Teach_Rec(const GS2C_Get_Teach_Rec& from);

  inline GS2C_Get_Teach_Rec& operator=(const GS2C_Get_Teach_Rec& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Get_Teach_Rec& default_instance();

  void Swap(GS2C_Get_Teach_Rec* other);

  // implements Message ----------------------------------------------

  GS2C_Get_Teach_Rec* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Get_Teach_Rec& from);
  void MergeFrom(const GS2C_Get_Teach_Rec& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 currentTeachid = 1;
  inline bool has_currentteachid() const;
  inline void clear_currentteachid();
  static const int kCurrentTeachidFieldNumber = 1;
  inline ::google::protobuf::uint32 currentteachid() const;
  inline void set_currentteachid(::google::protobuf::uint32 value);

  // repeated .pb.City_Combat_Info cityrec = 2;
  inline int cityrec_size() const;
  inline void clear_cityrec();
  static const int kCityrecFieldNumber = 2;
  inline const ::pb::City_Combat_Info& cityrec(int index) const;
  inline ::pb::City_Combat_Info* mutable_cityrec(int index);
  inline ::pb::City_Combat_Info* add_cityrec();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::City_Combat_Info >&
      cityrec() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::City_Combat_Info >*
      mutable_cityrec();

  // @@protoc_insertion_point(class_scope:pb.GS2C_Get_Teach_Rec)
 private:
  inline void set_has_currentteachid();
  inline void clear_has_currentteachid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::City_Combat_Info > cityrec_;
  ::google::protobuf::uint32 currentteachid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TeachMap_2eproto();
  friend void protobuf_AssignDesc_TeachMap_2eproto();
  friend void protobuf_ShutdownFile_TeachMap_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Get_Teach_Rec* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Request_Teach : public ::google::protobuf::Message {
 public:
  C2GS_Request_Teach();
  virtual ~C2GS_Request_Teach();

  C2GS_Request_Teach(const C2GS_Request_Teach& from);

  inline C2GS_Request_Teach& operator=(const C2GS_Request_Teach& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Request_Teach& default_instance();

  void Swap(C2GS_Request_Teach* other);

  // implements Message ----------------------------------------------

  C2GS_Request_Teach* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Request_Teach& from);
  void MergeFrom(const C2GS_Request_Teach& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 teachid = 1;
  inline bool has_teachid() const;
  inline void clear_teachid();
  static const int kTeachidFieldNumber = 1;
  inline ::google::protobuf::uint32 teachid() const;
  inline void set_teachid(::google::protobuf::uint32 value);

  // optional uint32 cityid = 2;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityidFieldNumber = 2;
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);

  // optional uint32 heroid = 3;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroidFieldNumber = 3;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Request_Teach)
 private:
  inline void set_has_teachid();
  inline void clear_has_teachid();
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_heroid();
  inline void clear_has_heroid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 teachid_;
  ::google::protobuf::uint32 cityid_;
  ::google::protobuf::uint32 heroid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_TeachMap_2eproto();
  friend void protobuf_AssignDesc_TeachMap_2eproto();
  friend void protobuf_ShutdownFile_TeachMap_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Request_Teach* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Answer_Teach : public ::google::protobuf::Message {
 public:
  GS2C_Answer_Teach();
  virtual ~GS2C_Answer_Teach();

  GS2C_Answer_Teach(const GS2C_Answer_Teach& from);

  inline GS2C_Answer_Teach& operator=(const GS2C_Answer_Teach& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Answer_Teach& default_instance();

  void Swap(GS2C_Answer_Teach* other);

  // implements Message ----------------------------------------------

  GS2C_Answer_Teach* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Answer_Teach& from);
  void MergeFrom(const GS2C_Answer_Teach& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool isSuccess = 1;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIsSuccessFieldNumber = 1;
  inline bool issuccess() const;
  inline void set_issuccess(bool value);

  // optional .pb.Teach_Ret ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::pb::Teach_Ret ret() const;
  inline void set_ret(::pb::Teach_Ret value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Answer_Teach)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool issuccess_;
  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TeachMap_2eproto();
  friend void protobuf_AssignDesc_TeachMap_2eproto();
  friend void protobuf_ShutdownFile_TeachMap_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Answer_Teach* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Teach_Finish : public ::google::protobuf::Message {
 public:
  GS2C_Teach_Finish();
  virtual ~GS2C_Teach_Finish();

  GS2C_Teach_Finish(const GS2C_Teach_Finish& from);

  inline GS2C_Teach_Finish& operator=(const GS2C_Teach_Finish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Teach_Finish& default_instance();

  void Swap(GS2C_Teach_Finish* other);

  // implements Message ----------------------------------------------

  GS2C_Teach_Finish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Teach_Finish& from);
  void MergeFrom(const GS2C_Teach_Finish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 teachid = 1;
  inline bool has_teachid() const;
  inline void clear_teachid();
  static const int kTeachidFieldNumber = 1;
  inline ::google::protobuf::uint32 teachid() const;
  inline void set_teachid(::google::protobuf::uint32 value);

  // optional bool isfinish = 2;
  inline bool has_isfinish() const;
  inline void clear_isfinish();
  static const int kIsfinishFieldNumber = 2;
  inline bool isfinish() const;
  inline void set_isfinish(bool value);

  // optional uint32 errcode = 3;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 3;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);

  // optional .pb.GS2C_LootResult rewards = 4;
  inline bool has_rewards() const;
  inline void clear_rewards();
  static const int kRewardsFieldNumber = 4;
  inline const ::pb::GS2C_LootResult& rewards() const;
  inline ::pb::GS2C_LootResult* mutable_rewards();
  inline ::pb::GS2C_LootResult* release_rewards();
  inline void set_allocated_rewards(::pb::GS2C_LootResult* rewards);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Teach_Finish)
 private:
  inline void set_has_teachid();
  inline void clear_has_teachid();
  inline void set_has_isfinish();
  inline void clear_has_isfinish();
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_rewards();
  inline void clear_has_rewards();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 teachid_;
  bool isfinish_;
  ::pb::GS2C_LootResult* rewards_;
  ::google::protobuf::uint32 errcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TeachMap_2eproto();
  friend void protobuf_AssignDesc_TeachMap_2eproto();
  friend void protobuf_ShutdownFile_TeachMap_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Teach_Finish* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Rush_Teach : public ::google::protobuf::Message {
 public:
  C2GS_Rush_Teach();
  virtual ~C2GS_Rush_Teach();

  C2GS_Rush_Teach(const C2GS_Rush_Teach& from);

  inline C2GS_Rush_Teach& operator=(const C2GS_Rush_Teach& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Rush_Teach& default_instance();

  void Swap(C2GS_Rush_Teach* other);

  // implements Message ----------------------------------------------

  C2GS_Rush_Teach* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Rush_Teach& from);
  void MergeFrom(const C2GS_Rush_Teach& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required bool is_attacker = 2;
  inline bool has_is_attacker() const;
  inline void clear_is_attacker();
  static const int kIsAttackerFieldNumber = 2;
  inline bool is_attacker() const;
  inline void set_is_attacker(bool value);

  // required uint32 des_city_id = 3;
  inline bool has_des_city_id() const;
  inline void clear_des_city_id();
  static const int kDesCityIdFieldNumber = 3;
  inline ::google::protobuf::uint32 des_city_id() const;
  inline void set_des_city_id(::google::protobuf::uint32 value);

  // required uint32 heroid = 4;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroidFieldNumber = 4;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Rush_Teach)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_is_attacker();
  inline void clear_has_is_attacker();
  inline void set_has_des_city_id();
  inline void clear_has_des_city_id();
  inline void set_has_heroid();
  inline void clear_has_heroid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 group_id_;
  bool is_attacker_;
  ::google::protobuf::uint32 des_city_id_;
  ::google::protobuf::uint32 heroid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TeachMap_2eproto();
  friend void protobuf_AssignDesc_TeachMap_2eproto();
  friend void protobuf_ShutdownFile_TeachMap_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Rush_Teach* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Rush_Teach_Ret : public ::google::protobuf::Message {
 public:
  GS2C_Rush_Teach_Ret();
  virtual ~GS2C_Rush_Teach_Ret();

  GS2C_Rush_Teach_Ret(const GS2C_Rush_Teach_Ret& from);

  inline GS2C_Rush_Teach_Ret& operator=(const GS2C_Rush_Teach_Ret& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Rush_Teach_Ret& default_instance();

  void Swap(GS2C_Rush_Teach_Ret* other);

  // implements Message ----------------------------------------------

  GS2C_Rush_Teach_Ret* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Rush_Teach_Ret& from);
  void MergeFrom(const GS2C_Rush_Teach_Ret& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool isSuccess = 1;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIsSuccessFieldNumber = 1;
  inline bool issuccess() const;
  inline void set_issuccess(bool value);

  // optional .pb.Teach_Ret ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::pb::Teach_Ret ret() const;
  inline void set_ret(::pb::Teach_Ret value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Rush_Teach_Ret)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool issuccess_;
  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TeachMap_2eproto();
  friend void protobuf_AssignDesc_TeachMap_2eproto();
  friend void protobuf_ShutdownFile_TeachMap_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Rush_Teach_Ret* default_instance_;
};
// ===================================================================


// ===================================================================

// City_Combat_Info

// optional uint32 CityId = 1;
inline bool City_Combat_Info::has_cityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void City_Combat_Info::set_has_cityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void City_Combat_Info::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void City_Combat_Info::clear_cityid() {
  cityid_ = 0u;
  clear_has_cityid();
}
inline ::google::protobuf::uint32 City_Combat_Info::cityid() const {
  return cityid_;
}
inline void City_Combat_Info::set_cityid(::google::protobuf::uint32 value) {
  set_has_cityid();
  cityid_ = value;
}

// optional uint32 countryid = 2;
inline bool City_Combat_Info::has_countryid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void City_Combat_Info::set_has_countryid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void City_Combat_Info::clear_has_countryid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void City_Combat_Info::clear_countryid() {
  countryid_ = 0u;
  clear_has_countryid();
}
inline ::google::protobuf::uint32 City_Combat_Info::countryid() const {
  return countryid_;
}
inline void City_Combat_Info::set_countryid(::google::protobuf::uint32 value) {
  set_has_countryid();
  countryid_ = value;
}

// optional uint32 groupid = 3;
inline bool City_Combat_Info::has_groupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void City_Combat_Info::set_has_groupid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void City_Combat_Info::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void City_Combat_Info::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 City_Combat_Info::groupid() const {
  return groupid_;
}
inline void City_Combat_Info::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
}

// -------------------------------------------------------------------

// GS2C_Get_Teach_Rec

// optional uint32 currentTeachid = 1;
inline bool GS2C_Get_Teach_Rec::has_currentteachid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Get_Teach_Rec::set_has_currentteachid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Get_Teach_Rec::clear_has_currentteachid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Get_Teach_Rec::clear_currentteachid() {
  currentteachid_ = 0u;
  clear_has_currentteachid();
}
inline ::google::protobuf::uint32 GS2C_Get_Teach_Rec::currentteachid() const {
  return currentteachid_;
}
inline void GS2C_Get_Teach_Rec::set_currentteachid(::google::protobuf::uint32 value) {
  set_has_currentteachid();
  currentteachid_ = value;
}

// repeated .pb.City_Combat_Info cityrec = 2;
inline int GS2C_Get_Teach_Rec::cityrec_size() const {
  return cityrec_.size();
}
inline void GS2C_Get_Teach_Rec::clear_cityrec() {
  cityrec_.Clear();
}
inline const ::pb::City_Combat_Info& GS2C_Get_Teach_Rec::cityrec(int index) const {
  return cityrec_.Get(index);
}
inline ::pb::City_Combat_Info* GS2C_Get_Teach_Rec::mutable_cityrec(int index) {
  return cityrec_.Mutable(index);
}
inline ::pb::City_Combat_Info* GS2C_Get_Teach_Rec::add_cityrec() {
  return cityrec_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::City_Combat_Info >&
GS2C_Get_Teach_Rec::cityrec() const {
  return cityrec_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::City_Combat_Info >*
GS2C_Get_Teach_Rec::mutable_cityrec() {
  return &cityrec_;
}

// -------------------------------------------------------------------

// C2GS_Request_Teach

// optional uint32 teachid = 1;
inline bool C2GS_Request_Teach::has_teachid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Request_Teach::set_has_teachid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Request_Teach::clear_has_teachid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Request_Teach::clear_teachid() {
  teachid_ = 0u;
  clear_has_teachid();
}
inline ::google::protobuf::uint32 C2GS_Request_Teach::teachid() const {
  return teachid_;
}
inline void C2GS_Request_Teach::set_teachid(::google::protobuf::uint32 value) {
  set_has_teachid();
  teachid_ = value;
}

// optional uint32 cityid = 2;
inline bool C2GS_Request_Teach::has_cityid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_Request_Teach::set_has_cityid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_Request_Teach::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_Request_Teach::clear_cityid() {
  cityid_ = 0u;
  clear_has_cityid();
}
inline ::google::protobuf::uint32 C2GS_Request_Teach::cityid() const {
  return cityid_;
}
inline void C2GS_Request_Teach::set_cityid(::google::protobuf::uint32 value) {
  set_has_cityid();
  cityid_ = value;
}

// optional uint32 heroid = 3;
inline bool C2GS_Request_Teach::has_heroid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2GS_Request_Teach::set_has_heroid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2GS_Request_Teach::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2GS_Request_Teach::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 C2GS_Request_Teach::heroid() const {
  return heroid_;
}
inline void C2GS_Request_Teach::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// -------------------------------------------------------------------

// GS2C_Answer_Teach

// optional bool isSuccess = 1;
inline bool GS2C_Answer_Teach::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Answer_Teach::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Answer_Teach::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Answer_Teach::clear_issuccess() {
  issuccess_ = false;
  clear_has_issuccess();
}
inline bool GS2C_Answer_Teach::issuccess() const {
  return issuccess_;
}
inline void GS2C_Answer_Teach::set_issuccess(bool value) {
  set_has_issuccess();
  issuccess_ = value;
}

// optional .pb.Teach_Ret ret = 2;
inline bool GS2C_Answer_Teach::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Answer_Teach::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Answer_Teach::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Answer_Teach::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::pb::Teach_Ret GS2C_Answer_Teach::ret() const {
  return static_cast< ::pb::Teach_Ret >(ret_);
}
inline void GS2C_Answer_Teach::set_ret(::pb::Teach_Ret value) {
  assert(::pb::Teach_Ret_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// GS2C_Teach_Finish

// optional uint32 teachid = 1;
inline bool GS2C_Teach_Finish::has_teachid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Teach_Finish::set_has_teachid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Teach_Finish::clear_has_teachid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Teach_Finish::clear_teachid() {
  teachid_ = 0u;
  clear_has_teachid();
}
inline ::google::protobuf::uint32 GS2C_Teach_Finish::teachid() const {
  return teachid_;
}
inline void GS2C_Teach_Finish::set_teachid(::google::protobuf::uint32 value) {
  set_has_teachid();
  teachid_ = value;
}

// optional bool isfinish = 2;
inline bool GS2C_Teach_Finish::has_isfinish() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Teach_Finish::set_has_isfinish() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Teach_Finish::clear_has_isfinish() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Teach_Finish::clear_isfinish() {
  isfinish_ = false;
  clear_has_isfinish();
}
inline bool GS2C_Teach_Finish::isfinish() const {
  return isfinish_;
}
inline void GS2C_Teach_Finish::set_isfinish(bool value) {
  set_has_isfinish();
  isfinish_ = value;
}

// optional uint32 errcode = 3;
inline bool GS2C_Teach_Finish::has_errcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2C_Teach_Finish::set_has_errcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2C_Teach_Finish::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2C_Teach_Finish::clear_errcode() {
  errcode_ = 0u;
  clear_has_errcode();
}
inline ::google::protobuf::uint32 GS2C_Teach_Finish::errcode() const {
  return errcode_;
}
inline void GS2C_Teach_Finish::set_errcode(::google::protobuf::uint32 value) {
  set_has_errcode();
  errcode_ = value;
}

// optional .pb.GS2C_LootResult rewards = 4;
inline bool GS2C_Teach_Finish::has_rewards() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2C_Teach_Finish::set_has_rewards() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2C_Teach_Finish::clear_has_rewards() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2C_Teach_Finish::clear_rewards() {
  if (rewards_ != NULL) rewards_->::pb::GS2C_LootResult::Clear();
  clear_has_rewards();
}
inline const ::pb::GS2C_LootResult& GS2C_Teach_Finish::rewards() const {
  return rewards_ != NULL ? *rewards_ : *default_instance_->rewards_;
}
inline ::pb::GS2C_LootResult* GS2C_Teach_Finish::mutable_rewards() {
  set_has_rewards();
  if (rewards_ == NULL) rewards_ = new ::pb::GS2C_LootResult;
  return rewards_;
}
inline ::pb::GS2C_LootResult* GS2C_Teach_Finish::release_rewards() {
  clear_has_rewards();
  ::pb::GS2C_LootResult* temp = rewards_;
  rewards_ = NULL;
  return temp;
}
inline void GS2C_Teach_Finish::set_allocated_rewards(::pb::GS2C_LootResult* rewards) {
  delete rewards_;
  rewards_ = rewards;
  if (rewards) {
    set_has_rewards();
  } else {
    clear_has_rewards();
  }
}

// -------------------------------------------------------------------

// C2GS_Rush_Teach

// required uint32 group_id = 1;
inline bool C2GS_Rush_Teach::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Rush_Teach::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Rush_Teach::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Rush_Teach::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 C2GS_Rush_Teach::group_id() const {
  return group_id_;
}
inline void C2GS_Rush_Teach::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// required bool is_attacker = 2;
inline bool C2GS_Rush_Teach::has_is_attacker() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_Rush_Teach::set_has_is_attacker() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_Rush_Teach::clear_has_is_attacker() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_Rush_Teach::clear_is_attacker() {
  is_attacker_ = false;
  clear_has_is_attacker();
}
inline bool C2GS_Rush_Teach::is_attacker() const {
  return is_attacker_;
}
inline void C2GS_Rush_Teach::set_is_attacker(bool value) {
  set_has_is_attacker();
  is_attacker_ = value;
}

// required uint32 des_city_id = 3;
inline bool C2GS_Rush_Teach::has_des_city_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2GS_Rush_Teach::set_has_des_city_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2GS_Rush_Teach::clear_has_des_city_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2GS_Rush_Teach::clear_des_city_id() {
  des_city_id_ = 0u;
  clear_has_des_city_id();
}
inline ::google::protobuf::uint32 C2GS_Rush_Teach::des_city_id() const {
  return des_city_id_;
}
inline void C2GS_Rush_Teach::set_des_city_id(::google::protobuf::uint32 value) {
  set_has_des_city_id();
  des_city_id_ = value;
}

// required uint32 heroid = 4;
inline bool C2GS_Rush_Teach::has_heroid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void C2GS_Rush_Teach::set_has_heroid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void C2GS_Rush_Teach::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void C2GS_Rush_Teach::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 C2GS_Rush_Teach::heroid() const {
  return heroid_;
}
inline void C2GS_Rush_Teach::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// -------------------------------------------------------------------

// GS2C_Rush_Teach_Ret

// optional bool isSuccess = 1;
inline bool GS2C_Rush_Teach_Ret::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Rush_Teach_Ret::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Rush_Teach_Ret::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Rush_Teach_Ret::clear_issuccess() {
  issuccess_ = false;
  clear_has_issuccess();
}
inline bool GS2C_Rush_Teach_Ret::issuccess() const {
  return issuccess_;
}
inline void GS2C_Rush_Teach_Ret::set_issuccess(bool value) {
  set_has_issuccess();
  issuccess_ = value;
}

// optional .pb.Teach_Ret ret = 2;
inline bool GS2C_Rush_Teach_Ret::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_Rush_Teach_Ret::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_Rush_Teach_Ret::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_Rush_Teach_Ret::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::pb::Teach_Ret GS2C_Rush_Teach_Ret::ret() const {
  return static_cast< ::pb::Teach_Ret >(ret_);
}
inline void GS2C_Rush_Teach_Ret::set_ret(::pb::Teach_Ret value) {
  assert(::pb::Teach_Ret_IsValid(value));
  set_has_ret();
  ret_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::Teach_Ret>() {
  return ::pb::Teach_Ret_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TeachMap_2eproto__INCLUDED
