// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MapLogic.proto

#ifndef PROTOBUF_MapLogic_2eproto__INCLUDED
#define PROTOBUF_MapLogic_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommomDef.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MapLogic_2eproto();
void protobuf_AssignDesc_MapLogic_2eproto();
void protobuf_ShutdownFile_MapLogic_2eproto();

class GS2C_MapLogic_Init;
class GS2C_MapLogic_ArmyResource;
class GS2C_Take_Army_Resource_Result;
class GS2C_All_CITY_EVENT;
class GS2C_CITY_EVENT;
class C2GS_TAKE_EVENT_AWARD;
class CityEvent;
class GS2C_Take_Award_Ret;
class C2GS_REQUEST_FOG_INFO;
class GS2C_FOG_INFO_Lst;
class Struct_FOG_INFO;
class C2GS_Enter_Fog;
class GS2C_UNLOCK_FOGS;

enum TakeResourceBack {
  Success = 0,
  LevelIllegal = 1,
  NoAwards = 2
};
bool TakeResourceBack_IsValid(int value);
const TakeResourceBack TakeResourceBack_MIN = Success;
const TakeResourceBack TakeResourceBack_MAX = NoAwards;
const int TakeResourceBack_ARRAYSIZE = TakeResourceBack_MAX + 1;

const ::google::protobuf::EnumDescriptor* TakeResourceBack_descriptor();
inline const ::std::string& TakeResourceBack_Name(TakeResourceBack value) {
  return ::google::protobuf::internal::NameOfEnum(
    TakeResourceBack_descriptor(), value);
}
inline bool TakeResourceBack_Parse(
    const ::std::string& name, TakeResourceBack* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TakeResourceBack>(
    TakeResourceBack_descriptor(), name, value);
}
enum take_award_ret {
  AwardSuccess = 1,
  CommonFail = 2,
  CityInFighting = 3,
  NoHeroHere = 4,
  NoCity = 5,
  CostFail = 6,
  SelectError = 7,
  NoEvent = 8,
  HasTaken = 9
};
bool take_award_ret_IsValid(int value);
const take_award_ret take_award_ret_MIN = AwardSuccess;
const take_award_ret take_award_ret_MAX = HasTaken;
const int take_award_ret_ARRAYSIZE = take_award_ret_MAX + 1;

const ::google::protobuf::EnumDescriptor* take_award_ret_descriptor();
inline const ::std::string& take_award_ret_Name(take_award_ret value) {
  return ::google::protobuf::internal::NameOfEnum(
    take_award_ret_descriptor(), value);
}
inline bool take_award_ret_Parse(
    const ::std::string& name, take_award_ret* value) {
  return ::google::protobuf::internal::ParseNamedEnum<take_award_ret>(
    take_award_ret_descriptor(), name, value);
}
// ===================================================================

class GS2C_MapLogic_Init : public ::google::protobuf::Message {
 public:
  GS2C_MapLogic_Init();
  virtual ~GS2C_MapLogic_Init();

  GS2C_MapLogic_Init(const GS2C_MapLogic_Init& from);

  inline GS2C_MapLogic_Init& operator=(const GS2C_MapLogic_Init& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_MapLogic_Init& default_instance();

  void Swap(GS2C_MapLogic_Init* other);

  // implements Message ----------------------------------------------

  GS2C_MapLogic_Init* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_MapLogic_Init& from);
  void MergeFrom(const GS2C_MapLogic_Init& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 country_id = 1;
  inline bool has_country_id() const;
  inline void clear_country_id();
  static const int kCountryIdFieldNumber = 1;
  inline ::google::protobuf::uint32 country_id() const;
  inline void set_country_id(::google::protobuf::uint32 value);

  // optional uint64 take_box = 2;
  inline bool has_take_box() const;
  inline void clear_take_box();
  static const int kTakeBoxFieldNumber = 2;
  inline ::google::protobuf::uint64 take_box() const;
  inline void set_take_box(::google::protobuf::uint64 value);

  // repeated uint64 unlock_fog_city = 3;
  inline int unlock_fog_city_size() const;
  inline void clear_unlock_fog_city();
  static const int kUnlockFogCityFieldNumber = 3;
  inline ::google::protobuf::uint64 unlock_fog_city(int index) const;
  inline void set_unlock_fog_city(int index, ::google::protobuf::uint64 value);
  inline void add_unlock_fog_city(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      unlock_fog_city() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_unlock_fog_city();

  // repeated .pb.PairTime tonden_hero_begin_time = 4;
  inline int tonden_hero_begin_time_size() const;
  inline void clear_tonden_hero_begin_time();
  static const int kTondenHeroBeginTimeFieldNumber = 4;
  inline const ::pb::PairTime& tonden_hero_begin_time(int index) const;
  inline ::pb::PairTime* mutable_tonden_hero_begin_time(int index);
  inline ::pb::PairTime* add_tonden_hero_begin_time();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::PairTime >&
      tonden_hero_begin_time() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::PairTime >*
      mutable_tonden_hero_begin_time();

  // optional uint64 country_donate_time = 5;
  inline bool has_country_donate_time() const;
  inline void clear_country_donate_time();
  static const int kCountryDonateTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 country_donate_time() const;
  inline void set_country_donate_time(::google::protobuf::uint64 value);

  // optional uint64 monster_donate_time = 6;
  inline bool has_monster_donate_time() const;
  inline void clear_monster_donate_time();
  static const int kMonsterDonateTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 monster_donate_time() const;
  inline void set_monster_donate_time(::google::protobuf::uint64 value);

  // repeated .pb.PairBool has_take_award = 7;
  inline int has_take_award_size() const;
  inline void clear_has_take_award();
  static const int kHasTakeAwardFieldNumber = 7;
  inline const ::pb::PairBool& has_take_award(int index) const;
  inline ::pb::PairBool* mutable_has_take_award(int index);
  inline ::pb::PairBool* add_has_take_award();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::PairBool >&
      has_take_award() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::PairBool >*
      mutable_has_take_award();

  // repeated .pb.PairTime lianbing_end_time = 8;
  inline int lianbing_end_time_size() const;
  inline void clear_lianbing_end_time();
  static const int kLianbingEndTimeFieldNumber = 8;
  inline const ::pb::PairTime& lianbing_end_time(int index) const;
  inline ::pb::PairTime* mutable_lianbing_end_time(int index);
  inline ::pb::PairTime* add_lianbing_end_time();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::PairTime >&
      lianbing_end_time() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::PairTime >*
      mutable_lianbing_end_time();

  // optional .pb.GS2C_MapLogic_ArmyResource army_resource = 9;
  inline bool has_army_resource() const;
  inline void clear_army_resource();
  static const int kArmyResourceFieldNumber = 9;
  inline const ::pb::GS2C_MapLogic_ArmyResource& army_resource() const;
  inline ::pb::GS2C_MapLogic_ArmyResource* mutable_army_resource();
  inline ::pb::GS2C_MapLogic_ArmyResource* release_army_resource();
  inline void set_allocated_army_resource(::pb::GS2C_MapLogic_ArmyResource* army_resource);

  // repeated .pb.CityEvent event_info = 10;
  inline int event_info_size() const;
  inline void clear_event_info();
  static const int kEventInfoFieldNumber = 10;
  inline const ::pb::CityEvent& event_info(int index) const;
  inline ::pb::CityEvent* mutable_event_info(int index);
  inline ::pb::CityEvent* add_event_info();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::CityEvent >&
      event_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::CityEvent >*
      mutable_event_info();

  // repeated .pb.CityEvent public_Lst = 11;
  inline int public_lst_size() const;
  inline void clear_public_lst();
  static const int kPublicLstFieldNumber = 11;
  inline const ::pb::CityEvent& public_lst(int index) const;
  inline ::pb::CityEvent* mutable_public_lst(int index);
  inline ::pb::CityEvent* add_public_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::CityEvent >&
      public_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::CityEvent >*
      mutable_public_lst();

  // repeated .pb.Struct_FOG_INFO fog_lst = 12;
  inline int fog_lst_size() const;
  inline void clear_fog_lst();
  static const int kFogLstFieldNumber = 12;
  inline const ::pb::Struct_FOG_INFO& fog_lst(int index) const;
  inline ::pb::Struct_FOG_INFO* mutable_fog_lst(int index);
  inline ::pb::Struct_FOG_INFO* add_fog_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Struct_FOG_INFO >&
      fog_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Struct_FOG_INFO >*
      mutable_fog_lst();

  // optional uint64 tonden_CDEnd_time = 13;
  inline bool has_tonden_cdend_time() const;
  inline void clear_tonden_cdend_time();
  static const int kTondenCDEndTimeFieldNumber = 13;
  inline ::google::protobuf::uint64 tonden_cdend_time() const;
  inline void set_tonden_cdend_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_MapLogic_Init)
 private:
  inline void set_has_country_id();
  inline void clear_has_country_id();
  inline void set_has_take_box();
  inline void clear_has_take_box();
  inline void set_has_country_donate_time();
  inline void clear_has_country_donate_time();
  inline void set_has_monster_donate_time();
  inline void clear_has_monster_donate_time();
  inline void set_has_army_resource();
  inline void clear_has_army_resource();
  inline void set_has_tonden_cdend_time();
  inline void clear_has_tonden_cdend_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 take_box_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > unlock_fog_city_;
  ::google::protobuf::RepeatedPtrField< ::pb::PairTime > tonden_hero_begin_time_;
  ::google::protobuf::uint64 country_donate_time_;
  ::google::protobuf::uint64 monster_donate_time_;
  ::google::protobuf::RepeatedPtrField< ::pb::PairBool > has_take_award_;
  ::google::protobuf::RepeatedPtrField< ::pb::PairTime > lianbing_end_time_;
  ::pb::GS2C_MapLogic_ArmyResource* army_resource_;
  ::google::protobuf::RepeatedPtrField< ::pb::CityEvent > event_info_;
  ::google::protobuf::RepeatedPtrField< ::pb::CityEvent > public_lst_;
  ::google::protobuf::RepeatedPtrField< ::pb::Struct_FOG_INFO > fog_lst_;
  ::google::protobuf::uint64 tonden_cdend_time_;
  ::google::protobuf::uint32 country_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_MapLogic_2eproto();
  friend void protobuf_AssignDesc_MapLogic_2eproto();
  friend void protobuf_ShutdownFile_MapLogic_2eproto();

  void InitAsDefaultInstance();
  static GS2C_MapLogic_Init* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_MapLogic_ArmyResource : public ::google::protobuf::Message {
 public:
  GS2C_MapLogic_ArmyResource();
  virtual ~GS2C_MapLogic_ArmyResource();

  GS2C_MapLogic_ArmyResource(const GS2C_MapLogic_ArmyResource& from);

  inline GS2C_MapLogic_ArmyResource& operator=(const GS2C_MapLogic_ArmyResource& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_MapLogic_ArmyResource& default_instance();

  void Swap(GS2C_MapLogic_ArmyResource* other);

  // implements Message ----------------------------------------------

  GS2C_MapLogic_ArmyResource* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_MapLogic_ArmyResource& from);
  void MergeFrom(const GS2C_MapLogic_ArmyResource& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 update_day = 1;
  inline bool has_update_day() const;
  inline void clear_update_day();
  static const int kUpdateDayFieldNumber = 1;
  inline ::google::protobuf::uint32 update_day() const;
  inline void set_update_day(::google::protobuf::uint32 value);

  // required uint32 update_hour = 2;
  inline bool has_update_hour() const;
  inline void clear_update_hour();
  static const int kUpdateHourFieldNumber = 2;
  inline ::google::protobuf::uint32 update_hour() const;
  inline void set_update_hour(::google::protobuf::uint32 value);

  // repeated .pb.PairValue resource_lst = 3;
  inline int resource_lst_size() const;
  inline void clear_resource_lst();
  static const int kResourceLstFieldNumber = 3;
  inline const ::pb::PairValue& resource_lst(int index) const;
  inline ::pb::PairValue* mutable_resource_lst(int index);
  inline ::pb::PairValue* add_resource_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::PairValue >&
      resource_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::PairValue >*
      mutable_resource_lst();

  // @@protoc_insertion_point(class_scope:pb.GS2C_MapLogic_ArmyResource)
 private:
  inline void set_has_update_day();
  inline void clear_has_update_day();
  inline void set_has_update_hour();
  inline void clear_has_update_hour();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 update_day_;
  ::google::protobuf::uint32 update_hour_;
  ::google::protobuf::RepeatedPtrField< ::pb::PairValue > resource_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MapLogic_2eproto();
  friend void protobuf_AssignDesc_MapLogic_2eproto();
  friend void protobuf_ShutdownFile_MapLogic_2eproto();

  void InitAsDefaultInstance();
  static GS2C_MapLogic_ArmyResource* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Take_Army_Resource_Result : public ::google::protobuf::Message {
 public:
  GS2C_Take_Army_Resource_Result();
  virtual ~GS2C_Take_Army_Resource_Result();

  GS2C_Take_Army_Resource_Result(const GS2C_Take_Army_Resource_Result& from);

  inline GS2C_Take_Army_Resource_Result& operator=(const GS2C_Take_Army_Resource_Result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Take_Army_Resource_Result& default_instance();

  void Swap(GS2C_Take_Army_Resource_Result* other);

  // implements Message ----------------------------------------------

  GS2C_Take_Army_Resource_Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Take_Army_Resource_Result& from);
  void MergeFrom(const GS2C_Take_Army_Resource_Result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TakeResourceBack backmsg = 1;
  inline bool has_backmsg() const;
  inline void clear_backmsg();
  static const int kBackmsgFieldNumber = 1;
  inline ::pb::TakeResourceBack backmsg() const;
  inline void set_backmsg(::pb::TakeResourceBack value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Take_Army_Resource_Result)
 private:
  inline void set_has_backmsg();
  inline void clear_has_backmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int backmsg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MapLogic_2eproto();
  friend void protobuf_AssignDesc_MapLogic_2eproto();
  friend void protobuf_ShutdownFile_MapLogic_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Take_Army_Resource_Result* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_All_CITY_EVENT : public ::google::protobuf::Message {
 public:
  GS2C_All_CITY_EVENT();
  virtual ~GS2C_All_CITY_EVENT();

  GS2C_All_CITY_EVENT(const GS2C_All_CITY_EVENT& from);

  inline GS2C_All_CITY_EVENT& operator=(const GS2C_All_CITY_EVENT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_All_CITY_EVENT& default_instance();

  void Swap(GS2C_All_CITY_EVENT* other);

  // implements Message ----------------------------------------------

  GS2C_All_CITY_EVENT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_All_CITY_EVENT& from);
  void MergeFrom(const GS2C_All_CITY_EVENT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.CityEvent event_Lst = 1;
  inline int event_lst_size() const;
  inline void clear_event_lst();
  static const int kEventLstFieldNumber = 1;
  inline const ::pb::CityEvent& event_lst(int index) const;
  inline ::pb::CityEvent* mutable_event_lst(int index);
  inline ::pb::CityEvent* add_event_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::CityEvent >&
      event_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::CityEvent >*
      mutable_event_lst();

  // repeated .pb.CityEvent public_Lst = 2;
  inline int public_lst_size() const;
  inline void clear_public_lst();
  static const int kPublicLstFieldNumber = 2;
  inline const ::pb::CityEvent& public_lst(int index) const;
  inline ::pb::CityEvent* mutable_public_lst(int index);
  inline ::pb::CityEvent* add_public_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::CityEvent >&
      public_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::CityEvent >*
      mutable_public_lst();

  // @@protoc_insertion_point(class_scope:pb.GS2C_All_CITY_EVENT)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::CityEvent > event_lst_;
  ::google::protobuf::RepeatedPtrField< ::pb::CityEvent > public_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MapLogic_2eproto();
  friend void protobuf_AssignDesc_MapLogic_2eproto();
  friend void protobuf_ShutdownFile_MapLogic_2eproto();

  void InitAsDefaultInstance();
  static GS2C_All_CITY_EVENT* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_CITY_EVENT : public ::google::protobuf::Message {
 public:
  GS2C_CITY_EVENT();
  virtual ~GS2C_CITY_EVENT();

  GS2C_CITY_EVENT(const GS2C_CITY_EVENT& from);

  inline GS2C_CITY_EVENT& operator=(const GS2C_CITY_EVENT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_CITY_EVENT& default_instance();

  void Swap(GS2C_CITY_EVENT* other);

  // implements Message ----------------------------------------------

  GS2C_CITY_EVENT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_CITY_EVENT& from);
  void MergeFrom(const GS2C_CITY_EVENT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.CityEvent city_event = 1;
  inline bool has_city_event() const;
  inline void clear_city_event();
  static const int kCityEventFieldNumber = 1;
  inline const ::pb::CityEvent& city_event() const;
  inline ::pb::CityEvent* mutable_city_event();
  inline ::pb::CityEvent* release_city_event();
  inline void set_allocated_city_event(::pb::CityEvent* city_event);

  // optional bool isPublicEvent = 2;
  inline bool has_ispublicevent() const;
  inline void clear_ispublicevent();
  static const int kIsPublicEventFieldNumber = 2;
  inline bool ispublicevent() const;
  inline void set_ispublicevent(bool value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_CITY_EVENT)
 private:
  inline void set_has_city_event();
  inline void clear_has_city_event();
  inline void set_has_ispublicevent();
  inline void clear_has_ispublicevent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::CityEvent* city_event_;
  bool ispublicevent_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MapLogic_2eproto();
  friend void protobuf_AssignDesc_MapLogic_2eproto();
  friend void protobuf_ShutdownFile_MapLogic_2eproto();

  void InitAsDefaultInstance();
  static GS2C_CITY_EVENT* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_TAKE_EVENT_AWARD : public ::google::protobuf::Message {
 public:
  C2GS_TAKE_EVENT_AWARD();
  virtual ~C2GS_TAKE_EVENT_AWARD();

  C2GS_TAKE_EVENT_AWARD(const C2GS_TAKE_EVENT_AWARD& from);

  inline C2GS_TAKE_EVENT_AWARD& operator=(const C2GS_TAKE_EVENT_AWARD& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_TAKE_EVENT_AWARD& default_instance();

  void Swap(C2GS_TAKE_EVENT_AWARD* other);

  // implements Message ----------------------------------------------

  C2GS_TAKE_EVENT_AWARD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_TAKE_EVENT_AWARD& from);
  void MergeFrom(const C2GS_TAKE_EVENT_AWARD& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 city_id = 1;
  inline bool has_city_id() const;
  inline void clear_city_id();
  static const int kCityIdFieldNumber = 1;
  inline ::google::protobuf::uint32 city_id() const;
  inline void set_city_id(::google::protobuf::uint32 value);

  // optional uint32 event_id = 2;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 2;
  inline ::google::protobuf::uint32 event_id() const;
  inline void set_event_id(::google::protobuf::uint32 value);

  // optional uint32 award_index = 3;
  inline bool has_award_index() const;
  inline void clear_award_index();
  static const int kAwardIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 award_index() const;
  inline void set_award_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_TAKE_EVENT_AWARD)
 private:
  inline void set_has_city_id();
  inline void clear_has_city_id();
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_award_index();
  inline void clear_has_award_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 city_id_;
  ::google::protobuf::uint32 event_id_;
  ::google::protobuf::uint32 award_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MapLogic_2eproto();
  friend void protobuf_AssignDesc_MapLogic_2eproto();
  friend void protobuf_ShutdownFile_MapLogic_2eproto();

  void InitAsDefaultInstance();
  static C2GS_TAKE_EVENT_AWARD* default_instance_;
};
// -------------------------------------------------------------------

class CityEvent : public ::google::protobuf::Message {
 public:
  CityEvent();
  virtual ~CityEvent();

  CityEvent(const CityEvent& from);

  inline CityEvent& operator=(const CityEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CityEvent& default_instance();

  void Swap(CityEvent* other);

  // implements Message ----------------------------------------------

  CityEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CityEvent& from);
  void MergeFrom(const CityEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 event_id = 1;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::uint32 event_id() const;
  inline void set_event_id(::google::protobuf::uint32 value);

  // optional uint64 happen_time = 2;
  inline bool has_happen_time() const;
  inline void clear_happen_time();
  static const int kHappenTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 happen_time() const;
  inline void set_happen_time(::google::protobuf::uint64 value);

  // optional uint32 daily_times = 3;
  inline bool has_daily_times() const;
  inline void clear_daily_times();
  static const int kDailyTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 daily_times() const;
  inline void set_daily_times(::google::protobuf::uint32 value);

  // optional uint32 city_id = 4;
  inline bool has_city_id() const;
  inline void clear_city_id();
  static const int kCityIdFieldNumber = 4;
  inline ::google::protobuf::uint32 city_id() const;
  inline void set_city_id(::google::protobuf::uint32 value);

  // optional bool is_begin = 5;
  inline bool has_is_begin() const;
  inline void clear_is_begin();
  static const int kIsBeginFieldNumber = 5;
  inline bool is_begin() const;
  inline void set_is_begin(bool value);

  // optional bool isCelebrity = 6;
  inline bool has_iscelebrity() const;
  inline void clear_iscelebrity();
  static const int kIsCelebrityFieldNumber = 6;
  inline bool iscelebrity() const;
  inline void set_iscelebrity(bool value);

  // optional uint32 left_num = 7;
  inline bool has_left_num() const;
  inline void clear_left_num();
  static const int kLeftNumFieldNumber = 7;
  inline ::google::protobuf::uint32 left_num() const;
  inline void set_left_num(::google::protobuf::uint32 value);

  // optional uint64 event_end_time = 8;
  inline bool has_event_end_time() const;
  inline void clear_event_end_time();
  static const int kEventEndTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 event_end_time() const;
  inline void set_event_end_time(::google::protobuf::uint64 value);

  // repeated uint64 take_players = 9;
  inline int take_players_size() const;
  inline void clear_take_players();
  static const int kTakePlayersFieldNumber = 9;
  inline ::google::protobuf::uint64 take_players(int index) const;
  inline void set_take_players(int index, ::google::protobuf::uint64 value);
  inline void add_take_players(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      take_players() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_take_players();

  // @@protoc_insertion_point(class_scope:pb.CityEvent)
 private:
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_happen_time();
  inline void clear_has_happen_time();
  inline void set_has_daily_times();
  inline void clear_has_daily_times();
  inline void set_has_city_id();
  inline void clear_has_city_id();
  inline void set_has_is_begin();
  inline void clear_has_is_begin();
  inline void set_has_iscelebrity();
  inline void clear_has_iscelebrity();
  inline void set_has_left_num();
  inline void clear_has_left_num();
  inline void set_has_event_end_time();
  inline void clear_has_event_end_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 happen_time_;
  ::google::protobuf::uint32 event_id_;
  ::google::protobuf::uint32 daily_times_;
  ::google::protobuf::uint32 city_id_;
  bool is_begin_;
  bool iscelebrity_;
  ::google::protobuf::uint64 event_end_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > take_players_;
  ::google::protobuf::uint32 left_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_MapLogic_2eproto();
  friend void protobuf_AssignDesc_MapLogic_2eproto();
  friend void protobuf_ShutdownFile_MapLogic_2eproto();

  void InitAsDefaultInstance();
  static CityEvent* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_Take_Award_Ret : public ::google::protobuf::Message {
 public:
  GS2C_Take_Award_Ret();
  virtual ~GS2C_Take_Award_Ret();

  GS2C_Take_Award_Ret(const GS2C_Take_Award_Ret& from);

  inline GS2C_Take_Award_Ret& operator=(const GS2C_Take_Award_Ret& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_Take_Award_Ret& default_instance();

  void Swap(GS2C_Take_Award_Ret* other);

  // implements Message ----------------------------------------------

  GS2C_Take_Award_Ret* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_Take_Award_Ret& from);
  void MergeFrom(const GS2C_Take_Award_Ret& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.take_award_ret ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::pb::take_award_ret ret() const;
  inline void set_ret(::pb::take_award_ret value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_Take_Award_Ret)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MapLogic_2eproto();
  friend void protobuf_AssignDesc_MapLogic_2eproto();
  friend void protobuf_ShutdownFile_MapLogic_2eproto();

  void InitAsDefaultInstance();
  static GS2C_Take_Award_Ret* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_REQUEST_FOG_INFO : public ::google::protobuf::Message {
 public:
  C2GS_REQUEST_FOG_INFO();
  virtual ~C2GS_REQUEST_FOG_INFO();

  C2GS_REQUEST_FOG_INFO(const C2GS_REQUEST_FOG_INFO& from);

  inline C2GS_REQUEST_FOG_INFO& operator=(const C2GS_REQUEST_FOG_INFO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_REQUEST_FOG_INFO& default_instance();

  void Swap(C2GS_REQUEST_FOG_INFO* other);

  // implements Message ----------------------------------------------

  C2GS_REQUEST_FOG_INFO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_REQUEST_FOG_INFO& from);
  void MergeFrom(const C2GS_REQUEST_FOG_INFO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 fog_id = 1;
  inline int fog_id_size() const;
  inline void clear_fog_id();
  static const int kFogIdFieldNumber = 1;
  inline ::google::protobuf::uint64 fog_id(int index) const;
  inline void set_fog_id(int index, ::google::protobuf::uint64 value);
  inline void add_fog_id(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      fog_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_fog_id();

  // @@protoc_insertion_point(class_scope:pb.C2GS_REQUEST_FOG_INFO)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > fog_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MapLogic_2eproto();
  friend void protobuf_AssignDesc_MapLogic_2eproto();
  friend void protobuf_ShutdownFile_MapLogic_2eproto();

  void InitAsDefaultInstance();
  static C2GS_REQUEST_FOG_INFO* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_FOG_INFO_Lst : public ::google::protobuf::Message {
 public:
  GS2C_FOG_INFO_Lst();
  virtual ~GS2C_FOG_INFO_Lst();

  GS2C_FOG_INFO_Lst(const GS2C_FOG_INFO_Lst& from);

  inline GS2C_FOG_INFO_Lst& operator=(const GS2C_FOG_INFO_Lst& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_FOG_INFO_Lst& default_instance();

  void Swap(GS2C_FOG_INFO_Lst* other);

  // implements Message ----------------------------------------------

  GS2C_FOG_INFO_Lst* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_FOG_INFO_Lst& from);
  void MergeFrom(const GS2C_FOG_INFO_Lst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Struct_FOG_INFO fog_lst = 1;
  inline int fog_lst_size() const;
  inline void clear_fog_lst();
  static const int kFogLstFieldNumber = 1;
  inline const ::pb::Struct_FOG_INFO& fog_lst(int index) const;
  inline ::pb::Struct_FOG_INFO* mutable_fog_lst(int index);
  inline ::pb::Struct_FOG_INFO* add_fog_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Struct_FOG_INFO >&
      fog_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Struct_FOG_INFO >*
      mutable_fog_lst();

  // @@protoc_insertion_point(class_scope:pb.GS2C_FOG_INFO_Lst)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::Struct_FOG_INFO > fog_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MapLogic_2eproto();
  friend void protobuf_AssignDesc_MapLogic_2eproto();
  friend void protobuf_ShutdownFile_MapLogic_2eproto();

  void InitAsDefaultInstance();
  static GS2C_FOG_INFO_Lst* default_instance_;
};
// -------------------------------------------------------------------

class Struct_FOG_INFO : public ::google::protobuf::Message {
 public:
  Struct_FOG_INFO();
  virtual ~Struct_FOG_INFO();

  Struct_FOG_INFO(const Struct_FOG_INFO& from);

  inline Struct_FOG_INFO& operator=(const Struct_FOG_INFO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Struct_FOG_INFO& default_instance();

  void Swap(Struct_FOG_INFO* other);

  // implements Message ----------------------------------------------

  Struct_FOG_INFO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Struct_FOG_INFO& from);
  void MergeFrom(const Struct_FOG_INFO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 fog_id = 1;
  inline bool has_fog_id() const;
  inline void clear_fog_id();
  static const int kFogIdFieldNumber = 1;
  inline ::google::protobuf::uint32 fog_id() const;
  inline void set_fog_id(::google::protobuf::uint32 value);

  // optional uint64 uniqueid = 2;
  inline bool has_uniqueid() const;
  inline void clear_uniqueid();
  static const int kUniqueidFieldNumber = 2;
  inline ::google::protobuf::uint64 uniqueid() const;
  inline void set_uniqueid(::google::protobuf::uint64 value);

  // repeated .pb.PairValue guard_hp = 3;
  inline int guard_hp_size() const;
  inline void clear_guard_hp();
  static const int kGuardHpFieldNumber = 3;
  inline const ::pb::PairValue& guard_hp(int index) const;
  inline ::pb::PairValue* mutable_guard_hp(int index);
  inline ::pb::PairValue* add_guard_hp();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::PairValue >&
      guard_hp() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::PairValue >*
      mutable_guard_hp();

  // repeated .pb.PairValue guard_max = 4;
  inline int guard_max_size() const;
  inline void clear_guard_max();
  static const int kGuardMaxFieldNumber = 4;
  inline const ::pb::PairValue& guard_max(int index) const;
  inline ::pb::PairValue* mutable_guard_max(int index);
  inline ::pb::PairValue* add_guard_max();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::PairValue >&
      guard_max() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::PairValue >*
      mutable_guard_max();

  // optional uint32 guard_up_hp = 5;
  inline bool has_guard_up_hp() const;
  inline void clear_guard_up_hp();
  static const int kGuardUpHpFieldNumber = 5;
  inline ::google::protobuf::uint32 guard_up_hp() const;
  inline void set_guard_up_hp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.Struct_FOG_INFO)
 private:
  inline void set_has_fog_id();
  inline void clear_has_fog_id();
  inline void set_has_uniqueid();
  inline void clear_has_uniqueid();
  inline void set_has_guard_up_hp();
  inline void clear_has_guard_up_hp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uniqueid_;
  ::google::protobuf::RepeatedPtrField< ::pb::PairValue > guard_hp_;
  ::google::protobuf::uint32 fog_id_;
  ::google::protobuf::uint32 guard_up_hp_;
  ::google::protobuf::RepeatedPtrField< ::pb::PairValue > guard_max_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_MapLogic_2eproto();
  friend void protobuf_AssignDesc_MapLogic_2eproto();
  friend void protobuf_ShutdownFile_MapLogic_2eproto();

  void InitAsDefaultInstance();
  static Struct_FOG_INFO* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Enter_Fog : public ::google::protobuf::Message {
 public:
  C2GS_Enter_Fog();
  virtual ~C2GS_Enter_Fog();

  C2GS_Enter_Fog(const C2GS_Enter_Fog& from);

  inline C2GS_Enter_Fog& operator=(const C2GS_Enter_Fog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Enter_Fog& default_instance();

  void Swap(C2GS_Enter_Fog* other);

  // implements Message ----------------------------------------------

  C2GS_Enter_Fog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Enter_Fog& from);
  void MergeFrom(const C2GS_Enter_Fog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 fog_id = 1;
  inline bool has_fog_id() const;
  inline void clear_fog_id();
  static const int kFogIdFieldNumber = 1;
  inline ::google::protobuf::uint32 fog_id() const;
  inline void set_fog_id(::google::protobuf::uint32 value);

  // repeated uint32 hero_id = 2;
  inline int hero_id_size() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint32 hero_id(int index) const;
  inline void set_hero_id(int index, ::google::protobuf::uint32 value);
  inline void add_hero_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      hero_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_hero_id();

  // @@protoc_insertion_point(class_scope:pb.C2GS_Enter_Fog)
 private:
  inline void set_has_fog_id();
  inline void clear_has_fog_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > hero_id_;
  ::google::protobuf::uint32 fog_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MapLogic_2eproto();
  friend void protobuf_AssignDesc_MapLogic_2eproto();
  friend void protobuf_ShutdownFile_MapLogic_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Enter_Fog* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_UNLOCK_FOGS : public ::google::protobuf::Message {
 public:
  GS2C_UNLOCK_FOGS();
  virtual ~GS2C_UNLOCK_FOGS();

  GS2C_UNLOCK_FOGS(const GS2C_UNLOCK_FOGS& from);

  inline GS2C_UNLOCK_FOGS& operator=(const GS2C_UNLOCK_FOGS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_UNLOCK_FOGS& default_instance();

  void Swap(GS2C_UNLOCK_FOGS* other);

  // implements Message ----------------------------------------------

  GS2C_UNLOCK_FOGS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_UNLOCK_FOGS& from);
  void MergeFrom(const GS2C_UNLOCK_FOGS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 unlock_fog_city = 1;
  inline int unlock_fog_city_size() const;
  inline void clear_unlock_fog_city();
  static const int kUnlockFogCityFieldNumber = 1;
  inline ::google::protobuf::uint64 unlock_fog_city(int index) const;
  inline void set_unlock_fog_city(int index, ::google::protobuf::uint64 value);
  inline void add_unlock_fog_city(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      unlock_fog_city() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_unlock_fog_city();

  // @@protoc_insertion_point(class_scope:pb.GS2C_UNLOCK_FOGS)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > unlock_fog_city_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MapLogic_2eproto();
  friend void protobuf_AssignDesc_MapLogic_2eproto();
  friend void protobuf_ShutdownFile_MapLogic_2eproto();

  void InitAsDefaultInstance();
  static GS2C_UNLOCK_FOGS* default_instance_;
};
// ===================================================================


// ===================================================================

// GS2C_MapLogic_Init

// optional uint32 country_id = 1;
inline bool GS2C_MapLogic_Init::has_country_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_MapLogic_Init::set_has_country_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_MapLogic_Init::clear_has_country_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_MapLogic_Init::clear_country_id() {
  country_id_ = 0u;
  clear_has_country_id();
}
inline ::google::protobuf::uint32 GS2C_MapLogic_Init::country_id() const {
  return country_id_;
}
inline void GS2C_MapLogic_Init::set_country_id(::google::protobuf::uint32 value) {
  set_has_country_id();
  country_id_ = value;
}

// optional uint64 take_box = 2;
inline bool GS2C_MapLogic_Init::has_take_box() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_MapLogic_Init::set_has_take_box() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_MapLogic_Init::clear_has_take_box() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_MapLogic_Init::clear_take_box() {
  take_box_ = GOOGLE_ULONGLONG(0);
  clear_has_take_box();
}
inline ::google::protobuf::uint64 GS2C_MapLogic_Init::take_box() const {
  return take_box_;
}
inline void GS2C_MapLogic_Init::set_take_box(::google::protobuf::uint64 value) {
  set_has_take_box();
  take_box_ = value;
}

// repeated uint64 unlock_fog_city = 3;
inline int GS2C_MapLogic_Init::unlock_fog_city_size() const {
  return unlock_fog_city_.size();
}
inline void GS2C_MapLogic_Init::clear_unlock_fog_city() {
  unlock_fog_city_.Clear();
}
inline ::google::protobuf::uint64 GS2C_MapLogic_Init::unlock_fog_city(int index) const {
  return unlock_fog_city_.Get(index);
}
inline void GS2C_MapLogic_Init::set_unlock_fog_city(int index, ::google::protobuf::uint64 value) {
  unlock_fog_city_.Set(index, value);
}
inline void GS2C_MapLogic_Init::add_unlock_fog_city(::google::protobuf::uint64 value) {
  unlock_fog_city_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
GS2C_MapLogic_Init::unlock_fog_city() const {
  return unlock_fog_city_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
GS2C_MapLogic_Init::mutable_unlock_fog_city() {
  return &unlock_fog_city_;
}

// repeated .pb.PairTime tonden_hero_begin_time = 4;
inline int GS2C_MapLogic_Init::tonden_hero_begin_time_size() const {
  return tonden_hero_begin_time_.size();
}
inline void GS2C_MapLogic_Init::clear_tonden_hero_begin_time() {
  tonden_hero_begin_time_.Clear();
}
inline const ::pb::PairTime& GS2C_MapLogic_Init::tonden_hero_begin_time(int index) const {
  return tonden_hero_begin_time_.Get(index);
}
inline ::pb::PairTime* GS2C_MapLogic_Init::mutable_tonden_hero_begin_time(int index) {
  return tonden_hero_begin_time_.Mutable(index);
}
inline ::pb::PairTime* GS2C_MapLogic_Init::add_tonden_hero_begin_time() {
  return tonden_hero_begin_time_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::PairTime >&
GS2C_MapLogic_Init::tonden_hero_begin_time() const {
  return tonden_hero_begin_time_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::PairTime >*
GS2C_MapLogic_Init::mutable_tonden_hero_begin_time() {
  return &tonden_hero_begin_time_;
}

// optional uint64 country_donate_time = 5;
inline bool GS2C_MapLogic_Init::has_country_donate_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GS2C_MapLogic_Init::set_has_country_donate_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GS2C_MapLogic_Init::clear_has_country_donate_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GS2C_MapLogic_Init::clear_country_donate_time() {
  country_donate_time_ = GOOGLE_ULONGLONG(0);
  clear_has_country_donate_time();
}
inline ::google::protobuf::uint64 GS2C_MapLogic_Init::country_donate_time() const {
  return country_donate_time_;
}
inline void GS2C_MapLogic_Init::set_country_donate_time(::google::protobuf::uint64 value) {
  set_has_country_donate_time();
  country_donate_time_ = value;
}

// optional uint64 monster_donate_time = 6;
inline bool GS2C_MapLogic_Init::has_monster_donate_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GS2C_MapLogic_Init::set_has_monster_donate_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GS2C_MapLogic_Init::clear_has_monster_donate_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GS2C_MapLogic_Init::clear_monster_donate_time() {
  monster_donate_time_ = GOOGLE_ULONGLONG(0);
  clear_has_monster_donate_time();
}
inline ::google::protobuf::uint64 GS2C_MapLogic_Init::monster_donate_time() const {
  return monster_donate_time_;
}
inline void GS2C_MapLogic_Init::set_monster_donate_time(::google::protobuf::uint64 value) {
  set_has_monster_donate_time();
  monster_donate_time_ = value;
}

// repeated .pb.PairBool has_take_award = 7;
inline int GS2C_MapLogic_Init::has_take_award_size() const {
  return has_take_award_.size();
}
inline void GS2C_MapLogic_Init::clear_has_take_award() {
  has_take_award_.Clear();
}
inline const ::pb::PairBool& GS2C_MapLogic_Init::has_take_award(int index) const {
  return has_take_award_.Get(index);
}
inline ::pb::PairBool* GS2C_MapLogic_Init::mutable_has_take_award(int index) {
  return has_take_award_.Mutable(index);
}
inline ::pb::PairBool* GS2C_MapLogic_Init::add_has_take_award() {
  return has_take_award_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::PairBool >&
GS2C_MapLogic_Init::has_take_award() const {
  return has_take_award_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::PairBool >*
GS2C_MapLogic_Init::mutable_has_take_award() {
  return &has_take_award_;
}

// repeated .pb.PairTime lianbing_end_time = 8;
inline int GS2C_MapLogic_Init::lianbing_end_time_size() const {
  return lianbing_end_time_.size();
}
inline void GS2C_MapLogic_Init::clear_lianbing_end_time() {
  lianbing_end_time_.Clear();
}
inline const ::pb::PairTime& GS2C_MapLogic_Init::lianbing_end_time(int index) const {
  return lianbing_end_time_.Get(index);
}
inline ::pb::PairTime* GS2C_MapLogic_Init::mutable_lianbing_end_time(int index) {
  return lianbing_end_time_.Mutable(index);
}
inline ::pb::PairTime* GS2C_MapLogic_Init::add_lianbing_end_time() {
  return lianbing_end_time_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::PairTime >&
GS2C_MapLogic_Init::lianbing_end_time() const {
  return lianbing_end_time_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::PairTime >*
GS2C_MapLogic_Init::mutable_lianbing_end_time() {
  return &lianbing_end_time_;
}

// optional .pb.GS2C_MapLogic_ArmyResource army_resource = 9;
inline bool GS2C_MapLogic_Init::has_army_resource() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GS2C_MapLogic_Init::set_has_army_resource() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GS2C_MapLogic_Init::clear_has_army_resource() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GS2C_MapLogic_Init::clear_army_resource() {
  if (army_resource_ != NULL) army_resource_->::pb::GS2C_MapLogic_ArmyResource::Clear();
  clear_has_army_resource();
}
inline const ::pb::GS2C_MapLogic_ArmyResource& GS2C_MapLogic_Init::army_resource() const {
  return army_resource_ != NULL ? *army_resource_ : *default_instance_->army_resource_;
}
inline ::pb::GS2C_MapLogic_ArmyResource* GS2C_MapLogic_Init::mutable_army_resource() {
  set_has_army_resource();
  if (army_resource_ == NULL) army_resource_ = new ::pb::GS2C_MapLogic_ArmyResource;
  return army_resource_;
}
inline ::pb::GS2C_MapLogic_ArmyResource* GS2C_MapLogic_Init::release_army_resource() {
  clear_has_army_resource();
  ::pb::GS2C_MapLogic_ArmyResource* temp = army_resource_;
  army_resource_ = NULL;
  return temp;
}
inline void GS2C_MapLogic_Init::set_allocated_army_resource(::pb::GS2C_MapLogic_ArmyResource* army_resource) {
  delete army_resource_;
  army_resource_ = army_resource;
  if (army_resource) {
    set_has_army_resource();
  } else {
    clear_has_army_resource();
  }
}

// repeated .pb.CityEvent event_info = 10;
inline int GS2C_MapLogic_Init::event_info_size() const {
  return event_info_.size();
}
inline void GS2C_MapLogic_Init::clear_event_info() {
  event_info_.Clear();
}
inline const ::pb::CityEvent& GS2C_MapLogic_Init::event_info(int index) const {
  return event_info_.Get(index);
}
inline ::pb::CityEvent* GS2C_MapLogic_Init::mutable_event_info(int index) {
  return event_info_.Mutable(index);
}
inline ::pb::CityEvent* GS2C_MapLogic_Init::add_event_info() {
  return event_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::CityEvent >&
GS2C_MapLogic_Init::event_info() const {
  return event_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::CityEvent >*
GS2C_MapLogic_Init::mutable_event_info() {
  return &event_info_;
}

// repeated .pb.CityEvent public_Lst = 11;
inline int GS2C_MapLogic_Init::public_lst_size() const {
  return public_lst_.size();
}
inline void GS2C_MapLogic_Init::clear_public_lst() {
  public_lst_.Clear();
}
inline const ::pb::CityEvent& GS2C_MapLogic_Init::public_lst(int index) const {
  return public_lst_.Get(index);
}
inline ::pb::CityEvent* GS2C_MapLogic_Init::mutable_public_lst(int index) {
  return public_lst_.Mutable(index);
}
inline ::pb::CityEvent* GS2C_MapLogic_Init::add_public_lst() {
  return public_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::CityEvent >&
GS2C_MapLogic_Init::public_lst() const {
  return public_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::CityEvent >*
GS2C_MapLogic_Init::mutable_public_lst() {
  return &public_lst_;
}

// repeated .pb.Struct_FOG_INFO fog_lst = 12;
inline int GS2C_MapLogic_Init::fog_lst_size() const {
  return fog_lst_.size();
}
inline void GS2C_MapLogic_Init::clear_fog_lst() {
  fog_lst_.Clear();
}
inline const ::pb::Struct_FOG_INFO& GS2C_MapLogic_Init::fog_lst(int index) const {
  return fog_lst_.Get(index);
}
inline ::pb::Struct_FOG_INFO* GS2C_MapLogic_Init::mutable_fog_lst(int index) {
  return fog_lst_.Mutable(index);
}
inline ::pb::Struct_FOG_INFO* GS2C_MapLogic_Init::add_fog_lst() {
  return fog_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Struct_FOG_INFO >&
GS2C_MapLogic_Init::fog_lst() const {
  return fog_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Struct_FOG_INFO >*
GS2C_MapLogic_Init::mutable_fog_lst() {
  return &fog_lst_;
}

// optional uint64 tonden_CDEnd_time = 13;
inline bool GS2C_MapLogic_Init::has_tonden_cdend_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GS2C_MapLogic_Init::set_has_tonden_cdend_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GS2C_MapLogic_Init::clear_has_tonden_cdend_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GS2C_MapLogic_Init::clear_tonden_cdend_time() {
  tonden_cdend_time_ = GOOGLE_ULONGLONG(0);
  clear_has_tonden_cdend_time();
}
inline ::google::protobuf::uint64 GS2C_MapLogic_Init::tonden_cdend_time() const {
  return tonden_cdend_time_;
}
inline void GS2C_MapLogic_Init::set_tonden_cdend_time(::google::protobuf::uint64 value) {
  set_has_tonden_cdend_time();
  tonden_cdend_time_ = value;
}

// -------------------------------------------------------------------

// GS2C_MapLogic_ArmyResource

// required uint32 update_day = 1;
inline bool GS2C_MapLogic_ArmyResource::has_update_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_MapLogic_ArmyResource::set_has_update_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_MapLogic_ArmyResource::clear_has_update_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_MapLogic_ArmyResource::clear_update_day() {
  update_day_ = 0u;
  clear_has_update_day();
}
inline ::google::protobuf::uint32 GS2C_MapLogic_ArmyResource::update_day() const {
  return update_day_;
}
inline void GS2C_MapLogic_ArmyResource::set_update_day(::google::protobuf::uint32 value) {
  set_has_update_day();
  update_day_ = value;
}

// required uint32 update_hour = 2;
inline bool GS2C_MapLogic_ArmyResource::has_update_hour() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_MapLogic_ArmyResource::set_has_update_hour() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_MapLogic_ArmyResource::clear_has_update_hour() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_MapLogic_ArmyResource::clear_update_hour() {
  update_hour_ = 0u;
  clear_has_update_hour();
}
inline ::google::protobuf::uint32 GS2C_MapLogic_ArmyResource::update_hour() const {
  return update_hour_;
}
inline void GS2C_MapLogic_ArmyResource::set_update_hour(::google::protobuf::uint32 value) {
  set_has_update_hour();
  update_hour_ = value;
}

// repeated .pb.PairValue resource_lst = 3;
inline int GS2C_MapLogic_ArmyResource::resource_lst_size() const {
  return resource_lst_.size();
}
inline void GS2C_MapLogic_ArmyResource::clear_resource_lst() {
  resource_lst_.Clear();
}
inline const ::pb::PairValue& GS2C_MapLogic_ArmyResource::resource_lst(int index) const {
  return resource_lst_.Get(index);
}
inline ::pb::PairValue* GS2C_MapLogic_ArmyResource::mutable_resource_lst(int index) {
  return resource_lst_.Mutable(index);
}
inline ::pb::PairValue* GS2C_MapLogic_ArmyResource::add_resource_lst() {
  return resource_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::PairValue >&
GS2C_MapLogic_ArmyResource::resource_lst() const {
  return resource_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::PairValue >*
GS2C_MapLogic_ArmyResource::mutable_resource_lst() {
  return &resource_lst_;
}

// -------------------------------------------------------------------

// GS2C_Take_Army_Resource_Result

// optional .pb.TakeResourceBack backmsg = 1;
inline bool GS2C_Take_Army_Resource_Result::has_backmsg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Take_Army_Resource_Result::set_has_backmsg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Take_Army_Resource_Result::clear_has_backmsg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Take_Army_Resource_Result::clear_backmsg() {
  backmsg_ = 0;
  clear_has_backmsg();
}
inline ::pb::TakeResourceBack GS2C_Take_Army_Resource_Result::backmsg() const {
  return static_cast< ::pb::TakeResourceBack >(backmsg_);
}
inline void GS2C_Take_Army_Resource_Result::set_backmsg(::pb::TakeResourceBack value) {
  assert(::pb::TakeResourceBack_IsValid(value));
  set_has_backmsg();
  backmsg_ = value;
}

// -------------------------------------------------------------------

// GS2C_All_CITY_EVENT

// repeated .pb.CityEvent event_Lst = 1;
inline int GS2C_All_CITY_EVENT::event_lst_size() const {
  return event_lst_.size();
}
inline void GS2C_All_CITY_EVENT::clear_event_lst() {
  event_lst_.Clear();
}
inline const ::pb::CityEvent& GS2C_All_CITY_EVENT::event_lst(int index) const {
  return event_lst_.Get(index);
}
inline ::pb::CityEvent* GS2C_All_CITY_EVENT::mutable_event_lst(int index) {
  return event_lst_.Mutable(index);
}
inline ::pb::CityEvent* GS2C_All_CITY_EVENT::add_event_lst() {
  return event_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::CityEvent >&
GS2C_All_CITY_EVENT::event_lst() const {
  return event_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::CityEvent >*
GS2C_All_CITY_EVENT::mutable_event_lst() {
  return &event_lst_;
}

// repeated .pb.CityEvent public_Lst = 2;
inline int GS2C_All_CITY_EVENT::public_lst_size() const {
  return public_lst_.size();
}
inline void GS2C_All_CITY_EVENT::clear_public_lst() {
  public_lst_.Clear();
}
inline const ::pb::CityEvent& GS2C_All_CITY_EVENT::public_lst(int index) const {
  return public_lst_.Get(index);
}
inline ::pb::CityEvent* GS2C_All_CITY_EVENT::mutable_public_lst(int index) {
  return public_lst_.Mutable(index);
}
inline ::pb::CityEvent* GS2C_All_CITY_EVENT::add_public_lst() {
  return public_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::CityEvent >&
GS2C_All_CITY_EVENT::public_lst() const {
  return public_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::CityEvent >*
GS2C_All_CITY_EVENT::mutable_public_lst() {
  return &public_lst_;
}

// -------------------------------------------------------------------

// GS2C_CITY_EVENT

// required .pb.CityEvent city_event = 1;
inline bool GS2C_CITY_EVENT::has_city_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_CITY_EVENT::set_has_city_event() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_CITY_EVENT::clear_has_city_event() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_CITY_EVENT::clear_city_event() {
  if (city_event_ != NULL) city_event_->::pb::CityEvent::Clear();
  clear_has_city_event();
}
inline const ::pb::CityEvent& GS2C_CITY_EVENT::city_event() const {
  return city_event_ != NULL ? *city_event_ : *default_instance_->city_event_;
}
inline ::pb::CityEvent* GS2C_CITY_EVENT::mutable_city_event() {
  set_has_city_event();
  if (city_event_ == NULL) city_event_ = new ::pb::CityEvent;
  return city_event_;
}
inline ::pb::CityEvent* GS2C_CITY_EVENT::release_city_event() {
  clear_has_city_event();
  ::pb::CityEvent* temp = city_event_;
  city_event_ = NULL;
  return temp;
}
inline void GS2C_CITY_EVENT::set_allocated_city_event(::pb::CityEvent* city_event) {
  delete city_event_;
  city_event_ = city_event;
  if (city_event) {
    set_has_city_event();
  } else {
    clear_has_city_event();
  }
}

// optional bool isPublicEvent = 2;
inline bool GS2C_CITY_EVENT::has_ispublicevent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_CITY_EVENT::set_has_ispublicevent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_CITY_EVENT::clear_has_ispublicevent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_CITY_EVENT::clear_ispublicevent() {
  ispublicevent_ = false;
  clear_has_ispublicevent();
}
inline bool GS2C_CITY_EVENT::ispublicevent() const {
  return ispublicevent_;
}
inline void GS2C_CITY_EVENT::set_ispublicevent(bool value) {
  set_has_ispublicevent();
  ispublicevent_ = value;
}

// -------------------------------------------------------------------

// C2GS_TAKE_EVENT_AWARD

// required uint32 city_id = 1;
inline bool C2GS_TAKE_EVENT_AWARD::has_city_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_TAKE_EVENT_AWARD::set_has_city_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_TAKE_EVENT_AWARD::clear_has_city_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_TAKE_EVENT_AWARD::clear_city_id() {
  city_id_ = 0u;
  clear_has_city_id();
}
inline ::google::protobuf::uint32 C2GS_TAKE_EVENT_AWARD::city_id() const {
  return city_id_;
}
inline void C2GS_TAKE_EVENT_AWARD::set_city_id(::google::protobuf::uint32 value) {
  set_has_city_id();
  city_id_ = value;
}

// optional uint32 event_id = 2;
inline bool C2GS_TAKE_EVENT_AWARD::has_event_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2GS_TAKE_EVENT_AWARD::set_has_event_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2GS_TAKE_EVENT_AWARD::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2GS_TAKE_EVENT_AWARD::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
inline ::google::protobuf::uint32 C2GS_TAKE_EVENT_AWARD::event_id() const {
  return event_id_;
}
inline void C2GS_TAKE_EVENT_AWARD::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
}

// optional uint32 award_index = 3;
inline bool C2GS_TAKE_EVENT_AWARD::has_award_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2GS_TAKE_EVENT_AWARD::set_has_award_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2GS_TAKE_EVENT_AWARD::clear_has_award_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2GS_TAKE_EVENT_AWARD::clear_award_index() {
  award_index_ = 0u;
  clear_has_award_index();
}
inline ::google::protobuf::uint32 C2GS_TAKE_EVENT_AWARD::award_index() const {
  return award_index_;
}
inline void C2GS_TAKE_EVENT_AWARD::set_award_index(::google::protobuf::uint32 value) {
  set_has_award_index();
  award_index_ = value;
}

// -------------------------------------------------------------------

// CityEvent

// optional uint32 event_id = 1;
inline bool CityEvent::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CityEvent::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CityEvent::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CityEvent::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
inline ::google::protobuf::uint32 CityEvent::event_id() const {
  return event_id_;
}
inline void CityEvent::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
}

// optional uint64 happen_time = 2;
inline bool CityEvent::has_happen_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CityEvent::set_has_happen_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CityEvent::clear_has_happen_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CityEvent::clear_happen_time() {
  happen_time_ = GOOGLE_ULONGLONG(0);
  clear_has_happen_time();
}
inline ::google::protobuf::uint64 CityEvent::happen_time() const {
  return happen_time_;
}
inline void CityEvent::set_happen_time(::google::protobuf::uint64 value) {
  set_has_happen_time();
  happen_time_ = value;
}

// optional uint32 daily_times = 3;
inline bool CityEvent::has_daily_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CityEvent::set_has_daily_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CityEvent::clear_has_daily_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CityEvent::clear_daily_times() {
  daily_times_ = 0u;
  clear_has_daily_times();
}
inline ::google::protobuf::uint32 CityEvent::daily_times() const {
  return daily_times_;
}
inline void CityEvent::set_daily_times(::google::protobuf::uint32 value) {
  set_has_daily_times();
  daily_times_ = value;
}

// optional uint32 city_id = 4;
inline bool CityEvent::has_city_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CityEvent::set_has_city_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CityEvent::clear_has_city_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CityEvent::clear_city_id() {
  city_id_ = 0u;
  clear_has_city_id();
}
inline ::google::protobuf::uint32 CityEvent::city_id() const {
  return city_id_;
}
inline void CityEvent::set_city_id(::google::protobuf::uint32 value) {
  set_has_city_id();
  city_id_ = value;
}

// optional bool is_begin = 5;
inline bool CityEvent::has_is_begin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CityEvent::set_has_is_begin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CityEvent::clear_has_is_begin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CityEvent::clear_is_begin() {
  is_begin_ = false;
  clear_has_is_begin();
}
inline bool CityEvent::is_begin() const {
  return is_begin_;
}
inline void CityEvent::set_is_begin(bool value) {
  set_has_is_begin();
  is_begin_ = value;
}

// optional bool isCelebrity = 6;
inline bool CityEvent::has_iscelebrity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CityEvent::set_has_iscelebrity() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CityEvent::clear_has_iscelebrity() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CityEvent::clear_iscelebrity() {
  iscelebrity_ = false;
  clear_has_iscelebrity();
}
inline bool CityEvent::iscelebrity() const {
  return iscelebrity_;
}
inline void CityEvent::set_iscelebrity(bool value) {
  set_has_iscelebrity();
  iscelebrity_ = value;
}

// optional uint32 left_num = 7;
inline bool CityEvent::has_left_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CityEvent::set_has_left_num() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CityEvent::clear_has_left_num() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CityEvent::clear_left_num() {
  left_num_ = 0u;
  clear_has_left_num();
}
inline ::google::protobuf::uint32 CityEvent::left_num() const {
  return left_num_;
}
inline void CityEvent::set_left_num(::google::protobuf::uint32 value) {
  set_has_left_num();
  left_num_ = value;
}

// optional uint64 event_end_time = 8;
inline bool CityEvent::has_event_end_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CityEvent::set_has_event_end_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CityEvent::clear_has_event_end_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CityEvent::clear_event_end_time() {
  event_end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_event_end_time();
}
inline ::google::protobuf::uint64 CityEvent::event_end_time() const {
  return event_end_time_;
}
inline void CityEvent::set_event_end_time(::google::protobuf::uint64 value) {
  set_has_event_end_time();
  event_end_time_ = value;
}

// repeated uint64 take_players = 9;
inline int CityEvent::take_players_size() const {
  return take_players_.size();
}
inline void CityEvent::clear_take_players() {
  take_players_.Clear();
}
inline ::google::protobuf::uint64 CityEvent::take_players(int index) const {
  return take_players_.Get(index);
}
inline void CityEvent::set_take_players(int index, ::google::protobuf::uint64 value) {
  take_players_.Set(index, value);
}
inline void CityEvent::add_take_players(::google::protobuf::uint64 value) {
  take_players_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CityEvent::take_players() const {
  return take_players_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CityEvent::mutable_take_players() {
  return &take_players_;
}

// -------------------------------------------------------------------

// GS2C_Take_Award_Ret

// required .pb.take_award_ret ret = 1;
inline bool GS2C_Take_Award_Ret::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_Take_Award_Ret::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_Take_Award_Ret::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_Take_Award_Ret::clear_ret() {
  ret_ = 1;
  clear_has_ret();
}
inline ::pb::take_award_ret GS2C_Take_Award_Ret::ret() const {
  return static_cast< ::pb::take_award_ret >(ret_);
}
inline void GS2C_Take_Award_Ret::set_ret(::pb::take_award_ret value) {
  assert(::pb::take_award_ret_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// C2GS_REQUEST_FOG_INFO

// repeated uint64 fog_id = 1;
inline int C2GS_REQUEST_FOG_INFO::fog_id_size() const {
  return fog_id_.size();
}
inline void C2GS_REQUEST_FOG_INFO::clear_fog_id() {
  fog_id_.Clear();
}
inline ::google::protobuf::uint64 C2GS_REQUEST_FOG_INFO::fog_id(int index) const {
  return fog_id_.Get(index);
}
inline void C2GS_REQUEST_FOG_INFO::set_fog_id(int index, ::google::protobuf::uint64 value) {
  fog_id_.Set(index, value);
}
inline void C2GS_REQUEST_FOG_INFO::add_fog_id(::google::protobuf::uint64 value) {
  fog_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
C2GS_REQUEST_FOG_INFO::fog_id() const {
  return fog_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
C2GS_REQUEST_FOG_INFO::mutable_fog_id() {
  return &fog_id_;
}

// -------------------------------------------------------------------

// GS2C_FOG_INFO_Lst

// repeated .pb.Struct_FOG_INFO fog_lst = 1;
inline int GS2C_FOG_INFO_Lst::fog_lst_size() const {
  return fog_lst_.size();
}
inline void GS2C_FOG_INFO_Lst::clear_fog_lst() {
  fog_lst_.Clear();
}
inline const ::pb::Struct_FOG_INFO& GS2C_FOG_INFO_Lst::fog_lst(int index) const {
  return fog_lst_.Get(index);
}
inline ::pb::Struct_FOG_INFO* GS2C_FOG_INFO_Lst::mutable_fog_lst(int index) {
  return fog_lst_.Mutable(index);
}
inline ::pb::Struct_FOG_INFO* GS2C_FOG_INFO_Lst::add_fog_lst() {
  return fog_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Struct_FOG_INFO >&
GS2C_FOG_INFO_Lst::fog_lst() const {
  return fog_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Struct_FOG_INFO >*
GS2C_FOG_INFO_Lst::mutable_fog_lst() {
  return &fog_lst_;
}

// -------------------------------------------------------------------

// Struct_FOG_INFO

// optional uint32 fog_id = 1;
inline bool Struct_FOG_INFO::has_fog_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Struct_FOG_INFO::set_has_fog_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Struct_FOG_INFO::clear_has_fog_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Struct_FOG_INFO::clear_fog_id() {
  fog_id_ = 0u;
  clear_has_fog_id();
}
inline ::google::protobuf::uint32 Struct_FOG_INFO::fog_id() const {
  return fog_id_;
}
inline void Struct_FOG_INFO::set_fog_id(::google::protobuf::uint32 value) {
  set_has_fog_id();
  fog_id_ = value;
}

// optional uint64 uniqueid = 2;
inline bool Struct_FOG_INFO::has_uniqueid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Struct_FOG_INFO::set_has_uniqueid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Struct_FOG_INFO::clear_has_uniqueid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Struct_FOG_INFO::clear_uniqueid() {
  uniqueid_ = GOOGLE_ULONGLONG(0);
  clear_has_uniqueid();
}
inline ::google::protobuf::uint64 Struct_FOG_INFO::uniqueid() const {
  return uniqueid_;
}
inline void Struct_FOG_INFO::set_uniqueid(::google::protobuf::uint64 value) {
  set_has_uniqueid();
  uniqueid_ = value;
}

// repeated .pb.PairValue guard_hp = 3;
inline int Struct_FOG_INFO::guard_hp_size() const {
  return guard_hp_.size();
}
inline void Struct_FOG_INFO::clear_guard_hp() {
  guard_hp_.Clear();
}
inline const ::pb::PairValue& Struct_FOG_INFO::guard_hp(int index) const {
  return guard_hp_.Get(index);
}
inline ::pb::PairValue* Struct_FOG_INFO::mutable_guard_hp(int index) {
  return guard_hp_.Mutable(index);
}
inline ::pb::PairValue* Struct_FOG_INFO::add_guard_hp() {
  return guard_hp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::PairValue >&
Struct_FOG_INFO::guard_hp() const {
  return guard_hp_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::PairValue >*
Struct_FOG_INFO::mutable_guard_hp() {
  return &guard_hp_;
}

// repeated .pb.PairValue guard_max = 4;
inline int Struct_FOG_INFO::guard_max_size() const {
  return guard_max_.size();
}
inline void Struct_FOG_INFO::clear_guard_max() {
  guard_max_.Clear();
}
inline const ::pb::PairValue& Struct_FOG_INFO::guard_max(int index) const {
  return guard_max_.Get(index);
}
inline ::pb::PairValue* Struct_FOG_INFO::mutable_guard_max(int index) {
  return guard_max_.Mutable(index);
}
inline ::pb::PairValue* Struct_FOG_INFO::add_guard_max() {
  return guard_max_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::PairValue >&
Struct_FOG_INFO::guard_max() const {
  return guard_max_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::PairValue >*
Struct_FOG_INFO::mutable_guard_max() {
  return &guard_max_;
}

// optional uint32 guard_up_hp = 5;
inline bool Struct_FOG_INFO::has_guard_up_hp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Struct_FOG_INFO::set_has_guard_up_hp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Struct_FOG_INFO::clear_has_guard_up_hp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Struct_FOG_INFO::clear_guard_up_hp() {
  guard_up_hp_ = 0u;
  clear_has_guard_up_hp();
}
inline ::google::protobuf::uint32 Struct_FOG_INFO::guard_up_hp() const {
  return guard_up_hp_;
}
inline void Struct_FOG_INFO::set_guard_up_hp(::google::protobuf::uint32 value) {
  set_has_guard_up_hp();
  guard_up_hp_ = value;
}

// -------------------------------------------------------------------

// C2GS_Enter_Fog

// required uint32 fog_id = 1;
inline bool C2GS_Enter_Fog::has_fog_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Enter_Fog::set_has_fog_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Enter_Fog::clear_has_fog_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Enter_Fog::clear_fog_id() {
  fog_id_ = 0u;
  clear_has_fog_id();
}
inline ::google::protobuf::uint32 C2GS_Enter_Fog::fog_id() const {
  return fog_id_;
}
inline void C2GS_Enter_Fog::set_fog_id(::google::protobuf::uint32 value) {
  set_has_fog_id();
  fog_id_ = value;
}

// repeated uint32 hero_id = 2;
inline int C2GS_Enter_Fog::hero_id_size() const {
  return hero_id_.size();
}
inline void C2GS_Enter_Fog::clear_hero_id() {
  hero_id_.Clear();
}
inline ::google::protobuf::uint32 C2GS_Enter_Fog::hero_id(int index) const {
  return hero_id_.Get(index);
}
inline void C2GS_Enter_Fog::set_hero_id(int index, ::google::protobuf::uint32 value) {
  hero_id_.Set(index, value);
}
inline void C2GS_Enter_Fog::add_hero_id(::google::protobuf::uint32 value) {
  hero_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
C2GS_Enter_Fog::hero_id() const {
  return hero_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
C2GS_Enter_Fog::mutable_hero_id() {
  return &hero_id_;
}

// -------------------------------------------------------------------

// GS2C_UNLOCK_FOGS

// repeated uint64 unlock_fog_city = 1;
inline int GS2C_UNLOCK_FOGS::unlock_fog_city_size() const {
  return unlock_fog_city_.size();
}
inline void GS2C_UNLOCK_FOGS::clear_unlock_fog_city() {
  unlock_fog_city_.Clear();
}
inline ::google::protobuf::uint64 GS2C_UNLOCK_FOGS::unlock_fog_city(int index) const {
  return unlock_fog_city_.Get(index);
}
inline void GS2C_UNLOCK_FOGS::set_unlock_fog_city(int index, ::google::protobuf::uint64 value) {
  unlock_fog_city_.Set(index, value);
}
inline void GS2C_UNLOCK_FOGS::add_unlock_fog_city(::google::protobuf::uint64 value) {
  unlock_fog_city_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
GS2C_UNLOCK_FOGS::unlock_fog_city() const {
  return unlock_fog_city_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
GS2C_UNLOCK_FOGS::mutable_unlock_fog_city() {
  return &unlock_fog_city_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::TakeResourceBack>() {
  return ::pb::TakeResourceBack_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::take_award_ret>() {
  return ::pb::take_award_ret_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MapLogic_2eproto__INCLUDED
