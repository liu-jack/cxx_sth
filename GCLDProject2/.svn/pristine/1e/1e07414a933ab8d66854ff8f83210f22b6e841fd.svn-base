// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Quest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Quest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* GxDB_Quest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_Quest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FinishMask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FinishMask_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_QuestList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_QuestList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_Behavior_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_Behavior_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_BehaviorList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_BehaviorList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Daily_Quest_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Daily_Quest_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Daily_Quest_All_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Daily_Quest_All_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Daily_Quest_Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Daily_Quest_Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Daily_Quest_Update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Daily_Quest_Update_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Daily_Quest_Reward_Res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Daily_Quest_Reward_Res_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_Daily_Quest_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_Daily_Quest_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_Daily_Quest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_Daily_Quest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Grow_Up_Quest_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Grow_Up_Quest_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* Group_Up_Group_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Group_Up_Group_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Grow_Up_Quest_All_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Grow_Up_Quest_All_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Grow_Up_Quest_Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Grow_Up_Quest_Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Grow_Up_Quest_Reward_Res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Grow_Up_Quest_Reward_Res_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Grow_Up_Quest_Update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Grow_Up_Quest_Update_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Grow_Up_Quest_Group_Update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Grow_Up_Quest_Group_Update_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_Grow_Up_Quest_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_Grow_Up_Quest_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_Grow_Up_Quest_Group_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_Grow_Up_Quest_Group_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_Grow_Up_Quest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_Grow_Up_Quest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_Grow_Up_Quest_Group_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_Grow_Up_Quest_Group_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_Grow_Up_Quest_Delete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_Grow_Up_Quest_Delete_reflection_ = NULL;
const ::google::protobuf::Descriptor* WannaBeStrongerBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WannaBeStrongerBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WannaBeStrongerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WannaBeStrongerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_WannaBeStrongerReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_WannaBeStrongerReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_WannaBeStrongerRewardRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_WannaBeStrongerRewardRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_WannaBeStrongerUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_WannaBeStrongerUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_WannaBeStrongerAllInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_WannaBeStrongerAllInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_WannaBeStrongerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_WannaBeStrongerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_WannaBeStrongerInfoAllInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_WannaBeStrongerInfoAllInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Sign_Res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Sign_Res_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Take_Extra_Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Take_Extra_Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Take_Extra_Reward_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Take_Extra_Reward_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Update_date_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Update_date_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_Sign_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_Sign_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_Sign_Up_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_Sign_Up_reflection_ = NULL;
const ::google::protobuf::Descriptor* pass_stage_reward_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pass_stage_reward_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Pass_Stage_Reward_All_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Pass_Stage_Reward_All_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Pass_Stage_Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Pass_Stage_Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Pass_Stage_Reward_Res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Pass_Stage_Reward_Res_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_Pass_Stage_Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_Pass_Stage_Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GxDB_Pass_Stage_Reward_Delete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GxDB_Pass_Stage_Reward_Delete_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GrowUpQuestType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GrowUpRewardType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PSignType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SignResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ExtraRewardResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PassStageEnum_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Quest_2eproto() {
  protobuf_AddDesc_Quest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Quest.proto");
  GOOGLE_CHECK(file != NULL);
  GxDB_Quest_descriptor_ = file->message_type(0);
  static const int GxDB_Quest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Quest, is_deleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Quest, quest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Quest, active_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Quest, value_),
  };
  GxDB_Quest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_Quest_descriptor_,
      GxDB_Quest::default_instance_,
      GxDB_Quest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Quest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Quest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_Quest));
  FinishMask_descriptor_ = file->message_type(1);
  static const int FinishMask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishMask, finish_masks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishMask, count_),
  };
  FinishMask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FinishMask_descriptor_,
      FinishMask::default_instance_,
      FinishMask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishMask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishMask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FinishMask));
  GS2C_QuestList_descriptor_ = file->message_type(2);
  static const int GS2C_QuestList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_QuestList, quests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_QuestList, finish_mask_),
  };
  GS2C_QuestList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_QuestList_descriptor_,
      GS2C_QuestList::default_instance_,
      GS2C_QuestList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_QuestList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_QuestList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_QuestList));
  GxDB_Behavior_descriptor_ = file->message_type(3);
  static const int GxDB_Behavior_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Behavior, behavior_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Behavior, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Behavior, last_trigger_time_),
  };
  GxDB_Behavior_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_Behavior_descriptor_,
      GxDB_Behavior::default_instance_,
      GxDB_Behavior_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Behavior, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Behavior, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_Behavior));
  GxDB_BehaviorList_descriptor_ = file->message_type(4);
  static const int GxDB_BehaviorList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_BehaviorList, behavior_list_),
  };
  GxDB_BehaviorList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_BehaviorList_descriptor_,
      GxDB_BehaviorList::default_instance_,
      GxDB_BehaviorList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_BehaviorList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_BehaviorList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_BehaviorList));
  Daily_Quest_Info_descriptor_ = file->message_type(5);
  static const int Daily_Quest_Info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Daily_Quest_Info, quest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Daily_Quest_Info, finish_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Daily_Quest_Info, need_finish_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Daily_Quest_Info, score_),
  };
  Daily_Quest_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Daily_Quest_Info_descriptor_,
      Daily_Quest_Info::default_instance_,
      Daily_Quest_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Daily_Quest_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Daily_Quest_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Daily_Quest_Info));
  GS2C_Daily_Quest_All_Info_descriptor_ = file->message_type(6);
  static const int GS2C_Daily_Quest_All_Info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Daily_Quest_All_Info, quest_info_),
  };
  GS2C_Daily_Quest_All_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Daily_Quest_All_Info_descriptor_,
      GS2C_Daily_Quest_All_Info::default_instance_,
      GS2C_Daily_Quest_All_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Daily_Quest_All_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Daily_Quest_All_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Daily_Quest_All_Info));
  C2GS_Daily_Quest_Reward_descriptor_ = file->message_type(7);
  static const int C2GS_Daily_Quest_Reward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Daily_Quest_Reward, reward_id_),
  };
  C2GS_Daily_Quest_Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Daily_Quest_Reward_descriptor_,
      C2GS_Daily_Quest_Reward::default_instance_,
      C2GS_Daily_Quest_Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Daily_Quest_Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Daily_Quest_Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Daily_Quest_Reward));
  GS2C_Daily_Quest_Update_descriptor_ = file->message_type(8);
  static const int GS2C_Daily_Quest_Update_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Daily_Quest_Update, quest_info_),
  };
  GS2C_Daily_Quest_Update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Daily_Quest_Update_descriptor_,
      GS2C_Daily_Quest_Update::default_instance_,
      GS2C_Daily_Quest_Update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Daily_Quest_Update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Daily_Quest_Update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Daily_Quest_Update));
  GS2C_Daily_Quest_Reward_Res_descriptor_ = file->message_type(9);
  static const int GS2C_Daily_Quest_Reward_Res_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Daily_Quest_Reward_Res, rewards_),
  };
  GS2C_Daily_Quest_Reward_Res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Daily_Quest_Reward_Res_descriptor_,
      GS2C_Daily_Quest_Reward_Res::default_instance_,
      GS2C_Daily_Quest_Reward_Res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Daily_Quest_Reward_Res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Daily_Quest_Reward_Res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Daily_Quest_Reward_Res));
  GxDB_Daily_Quest_Info_descriptor_ = file->message_type(10);
  static const int GxDB_Daily_Quest_Info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Daily_Quest_Info, quest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Daily_Quest_Info, finished_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Daily_Quest_Info, is_finished_),
  };
  GxDB_Daily_Quest_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_Daily_Quest_Info_descriptor_,
      GxDB_Daily_Quest_Info::default_instance_,
      GxDB_Daily_Quest_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Daily_Quest_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Daily_Quest_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_Daily_Quest_Info));
  GxDB_Daily_Quest_descriptor_ = file->message_type(11);
  static const int GxDB_Daily_Quest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Daily_Quest, quest_info_),
  };
  GxDB_Daily_Quest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_Daily_Quest_descriptor_,
      GxDB_Daily_Quest::default_instance_,
      GxDB_Daily_Quest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Daily_Quest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Daily_Quest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_Daily_Quest));
  Grow_Up_Quest_Info_descriptor_ = file->message_type(12);
  static const int Grow_Up_Quest_Info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grow_Up_Quest_Info, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grow_Up_Quest_Info, quest_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grow_Up_Quest_Info, quest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grow_Up_Quest_Info, cur_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grow_Up_Quest_Info, need_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grow_Up_Quest_Info, is_finished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grow_Up_Quest_Info, is_take_reward_),
  };
  Grow_Up_Quest_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Grow_Up_Quest_Info_descriptor_,
      Grow_Up_Quest_Info::default_instance_,
      Grow_Up_Quest_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grow_Up_Quest_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grow_Up_Quest_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Grow_Up_Quest_Info));
  Group_Up_Group_Info_descriptor_ = file->message_type(13);
  static const int Group_Up_Group_Info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group_Up_Group_Info, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group_Up_Group_Info, is_finished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group_Up_Group_Info, is_take_group_reward_),
  };
  Group_Up_Group_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Group_Up_Group_Info_descriptor_,
      Group_Up_Group_Info::default_instance_,
      Group_Up_Group_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group_Up_Group_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group_Up_Group_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Group_Up_Group_Info));
  GS2C_Grow_Up_Quest_All_Info_descriptor_ = file->message_type(14);
  static const int GS2C_Grow_Up_Quest_All_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Grow_Up_Quest_All_Info, grow_up_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Grow_Up_Quest_All_Info, group_info_),
  };
  GS2C_Grow_Up_Quest_All_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Grow_Up_Quest_All_Info_descriptor_,
      GS2C_Grow_Up_Quest_All_Info::default_instance_,
      GS2C_Grow_Up_Quest_All_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Grow_Up_Quest_All_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Grow_Up_Quest_All_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Grow_Up_Quest_All_Info));
  C2GS_Grow_Up_Quest_Reward_descriptor_ = file->message_type(15);
  static const int C2GS_Grow_Up_Quest_Reward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Grow_Up_Quest_Reward, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Grow_Up_Quest_Reward, quest_id_),
  };
  C2GS_Grow_Up_Quest_Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Grow_Up_Quest_Reward_descriptor_,
      C2GS_Grow_Up_Quest_Reward::default_instance_,
      C2GS_Grow_Up_Quest_Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Grow_Up_Quest_Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Grow_Up_Quest_Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Grow_Up_Quest_Reward));
  GS2C_Grow_Up_Quest_Reward_Res_descriptor_ = file->message_type(16);
  static const int GS2C_Grow_Up_Quest_Reward_Res_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Grow_Up_Quest_Reward_Res, rewards_),
  };
  GS2C_Grow_Up_Quest_Reward_Res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Grow_Up_Quest_Reward_Res_descriptor_,
      GS2C_Grow_Up_Quest_Reward_Res::default_instance_,
      GS2C_Grow_Up_Quest_Reward_Res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Grow_Up_Quest_Reward_Res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Grow_Up_Quest_Reward_Res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Grow_Up_Quest_Reward_Res));
  GS2C_Grow_Up_Quest_Update_descriptor_ = file->message_type(17);
  static const int GS2C_Grow_Up_Quest_Update_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Grow_Up_Quest_Update, grow_up_info_),
  };
  GS2C_Grow_Up_Quest_Update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Grow_Up_Quest_Update_descriptor_,
      GS2C_Grow_Up_Quest_Update::default_instance_,
      GS2C_Grow_Up_Quest_Update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Grow_Up_Quest_Update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Grow_Up_Quest_Update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Grow_Up_Quest_Update));
  GS2C_Grow_Up_Quest_Group_Update_descriptor_ = file->message_type(18);
  static const int GS2C_Grow_Up_Quest_Group_Update_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Grow_Up_Quest_Group_Update, group_info_),
  };
  GS2C_Grow_Up_Quest_Group_Update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Grow_Up_Quest_Group_Update_descriptor_,
      GS2C_Grow_Up_Quest_Group_Update::default_instance_,
      GS2C_Grow_Up_Quest_Group_Update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Grow_Up_Quest_Group_Update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Grow_Up_Quest_Group_Update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Grow_Up_Quest_Group_Update));
  GxDB_Grow_Up_Quest_Info_descriptor_ = file->message_type(19);
  static const int GxDB_Grow_Up_Quest_Info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Grow_Up_Quest_Info, quest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Grow_Up_Quest_Info, quest_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Grow_Up_Quest_Info, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Grow_Up_Quest_Info, cur_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Grow_Up_Quest_Info, is_finished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Grow_Up_Quest_Info, is_take_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Grow_Up_Quest_Info, operate_type_),
  };
  GxDB_Grow_Up_Quest_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_Grow_Up_Quest_Info_descriptor_,
      GxDB_Grow_Up_Quest_Info::default_instance_,
      GxDB_Grow_Up_Quest_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Grow_Up_Quest_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Grow_Up_Quest_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_Grow_Up_Quest_Info));
  GxDB_Grow_Up_Quest_Group_Info_descriptor_ = file->message_type(20);
  static const int GxDB_Grow_Up_Quest_Group_Info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Grow_Up_Quest_Group_Info, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Grow_Up_Quest_Group_Info, group_is_finished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Grow_Up_Quest_Group_Info, is_take_group_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Grow_Up_Quest_Group_Info, operate_type_),
  };
  GxDB_Grow_Up_Quest_Group_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_Grow_Up_Quest_Group_Info_descriptor_,
      GxDB_Grow_Up_Quest_Group_Info::default_instance_,
      GxDB_Grow_Up_Quest_Group_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Grow_Up_Quest_Group_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Grow_Up_Quest_Group_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_Grow_Up_Quest_Group_Info));
  GxDB_Grow_Up_Quest_descriptor_ = file->message_type(21);
  static const int GxDB_Grow_Up_Quest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Grow_Up_Quest, quest_info_),
  };
  GxDB_Grow_Up_Quest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_Grow_Up_Quest_descriptor_,
      GxDB_Grow_Up_Quest::default_instance_,
      GxDB_Grow_Up_Quest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Grow_Up_Quest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Grow_Up_Quest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_Grow_Up_Quest));
  GxDB_Grow_Up_Quest_Group_descriptor_ = file->message_type(22);
  static const int GxDB_Grow_Up_Quest_Group_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Grow_Up_Quest_Group, group_info_),
  };
  GxDB_Grow_Up_Quest_Group_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_Grow_Up_Quest_Group_descriptor_,
      GxDB_Grow_Up_Quest_Group::default_instance_,
      GxDB_Grow_Up_Quest_Group_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Grow_Up_Quest_Group, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Grow_Up_Quest_Group, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_Grow_Up_Quest_Group));
  GxDB_Grow_Up_Quest_Delete_descriptor_ = file->message_type(23);
  static const int GxDB_Grow_Up_Quest_Delete_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Grow_Up_Quest_Delete, operate_type_),
  };
  GxDB_Grow_Up_Quest_Delete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_Grow_Up_Quest_Delete_descriptor_,
      GxDB_Grow_Up_Quest_Delete::default_instance_,
      GxDB_Grow_Up_Quest_Delete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Grow_Up_Quest_Delete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Grow_Up_Quest_Delete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_Grow_Up_Quest_Delete));
  WannaBeStrongerBaseInfo_descriptor_ = file->message_type(24);
  static const int WannaBeStrongerBaseInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WannaBeStrongerBaseInfo, goal_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WannaBeStrongerBaseInfo, cur_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WannaBeStrongerBaseInfo, need_value_),
  };
  WannaBeStrongerBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WannaBeStrongerBaseInfo_descriptor_,
      WannaBeStrongerBaseInfo::default_instance_,
      WannaBeStrongerBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WannaBeStrongerBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WannaBeStrongerBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WannaBeStrongerBaseInfo));
  WannaBeStrongerInfo_descriptor_ = file->message_type(25);
  static const int WannaBeStrongerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WannaBeStrongerInfo, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WannaBeStrongerInfo, base_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WannaBeStrongerInfo, is_achieve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WannaBeStrongerInfo, is_take_reward_),
  };
  WannaBeStrongerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WannaBeStrongerInfo_descriptor_,
      WannaBeStrongerInfo::default_instance_,
      WannaBeStrongerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WannaBeStrongerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WannaBeStrongerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WannaBeStrongerInfo));
  C2GS_WannaBeStrongerReward_descriptor_ = file->message_type(26);
  static const int C2GS_WannaBeStrongerReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_WannaBeStrongerReward, group_id_),
  };
  C2GS_WannaBeStrongerReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_WannaBeStrongerReward_descriptor_,
      C2GS_WannaBeStrongerReward::default_instance_,
      C2GS_WannaBeStrongerReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_WannaBeStrongerReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_WannaBeStrongerReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_WannaBeStrongerReward));
  GS2C_WannaBeStrongerRewardRes_descriptor_ = file->message_type(27);
  static const int GS2C_WannaBeStrongerRewardRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_WannaBeStrongerRewardRes, rewards_),
  };
  GS2C_WannaBeStrongerRewardRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_WannaBeStrongerRewardRes_descriptor_,
      GS2C_WannaBeStrongerRewardRes::default_instance_,
      GS2C_WannaBeStrongerRewardRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_WannaBeStrongerRewardRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_WannaBeStrongerRewardRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_WannaBeStrongerRewardRes));
  GS2C_WannaBeStrongerUpdate_descriptor_ = file->message_type(28);
  static const int GS2C_WannaBeStrongerUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_WannaBeStrongerUpdate, info_),
  };
  GS2C_WannaBeStrongerUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_WannaBeStrongerUpdate_descriptor_,
      GS2C_WannaBeStrongerUpdate::default_instance_,
      GS2C_WannaBeStrongerUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_WannaBeStrongerUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_WannaBeStrongerUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_WannaBeStrongerUpdate));
  GS2C_WannaBeStrongerAllInfo_descriptor_ = file->message_type(29);
  static const int GS2C_WannaBeStrongerAllInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_WannaBeStrongerAllInfo, info_),
  };
  GS2C_WannaBeStrongerAllInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_WannaBeStrongerAllInfo_descriptor_,
      GS2C_WannaBeStrongerAllInfo::default_instance_,
      GS2C_WannaBeStrongerAllInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_WannaBeStrongerAllInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_WannaBeStrongerAllInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_WannaBeStrongerAllInfo));
  GxDB_WannaBeStrongerInfo_descriptor_ = file->message_type(30);
  static const int GxDB_WannaBeStrongerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_WannaBeStrongerInfo, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_WannaBeStrongerInfo, base_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_WannaBeStrongerInfo, is_achieve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_WannaBeStrongerInfo, is_take_reward_),
  };
  GxDB_WannaBeStrongerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_WannaBeStrongerInfo_descriptor_,
      GxDB_WannaBeStrongerInfo::default_instance_,
      GxDB_WannaBeStrongerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_WannaBeStrongerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_WannaBeStrongerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_WannaBeStrongerInfo));
  GxDB_WannaBeStrongerInfoAllInfo_descriptor_ = file->message_type(31);
  static const int GxDB_WannaBeStrongerInfoAllInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_WannaBeStrongerInfoAllInfo, info_),
  };
  GxDB_WannaBeStrongerInfoAllInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_WannaBeStrongerInfoAllInfo_descriptor_,
      GxDB_WannaBeStrongerInfoAllInfo::default_instance_,
      GxDB_WannaBeStrongerInfoAllInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_WannaBeStrongerInfoAllInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_WannaBeStrongerInfoAllInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_WannaBeStrongerInfoAllInfo));
  GS2C_Sign_Res_descriptor_ = file->message_type(32);
  static const int GS2C_Sign_Res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Sign_Res, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Sign_Res, rewards_),
  };
  GS2C_Sign_Res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Sign_Res_descriptor_,
      GS2C_Sign_Res::default_instance_,
      GS2C_Sign_Res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Sign_Res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Sign_Res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Sign_Res));
  C2GS_Take_Extra_Reward_descriptor_ = file->message_type(33);
  static const int C2GS_Take_Extra_Reward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Take_Extra_Reward, day_),
  };
  C2GS_Take_Extra_Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Take_Extra_Reward_descriptor_,
      C2GS_Take_Extra_Reward::default_instance_,
      C2GS_Take_Extra_Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Take_Extra_Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Take_Extra_Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Take_Extra_Reward));
  GS2C_Take_Extra_Reward_res_descriptor_ = file->message_type(34);
  static const int GS2C_Take_Extra_Reward_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_Extra_Reward_res, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_Extra_Reward_res, rewards_),
  };
  GS2C_Take_Extra_Reward_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Take_Extra_Reward_res_descriptor_,
      GS2C_Take_Extra_Reward_res::default_instance_,
      GS2C_Take_Extra_Reward_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_Extra_Reward_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Take_Extra_Reward_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Take_Extra_Reward_res));
  GS2C_Update_date_descriptor_ = file->message_type(35);
  static const int GS2C_Update_date_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Update_date, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Update_date, is_signed_),
  };
  GS2C_Update_date_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Update_date_descriptor_,
      GS2C_Update_date::default_instance_,
      GS2C_Update_date_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Update_date, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Update_date, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Update_date));
  GxDB_Sign_info_descriptor_ = file->message_type(36);
  static const int GxDB_Sign_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Sign_info, dayth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Sign_info, issigned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Sign_info, type_),
  };
  GxDB_Sign_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_Sign_info_descriptor_,
      GxDB_Sign_info::default_instance_,
      GxDB_Sign_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Sign_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Sign_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_Sign_info));
  GxDB_Sign_Up_descriptor_ = file->message_type(37);
  static const int GxDB_Sign_Up_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Sign_Up, info_),
  };
  GxDB_Sign_Up_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_Sign_Up_descriptor_,
      GxDB_Sign_Up::default_instance_,
      GxDB_Sign_Up_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Sign_Up, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Sign_Up, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_Sign_Up));
  pass_stage_reward_info_descriptor_ = file->message_type(38);
  static const int pass_stage_reward_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pass_stage_reward_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pass_stage_reward_info, is_take_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pass_stage_reward_info, stage_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pass_stage_reward_info, stage_is_passed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pass_stage_reward_info, operate_type_),
  };
  pass_stage_reward_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pass_stage_reward_info_descriptor_,
      pass_stage_reward_info::default_instance_,
      pass_stage_reward_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pass_stage_reward_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pass_stage_reward_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pass_stage_reward_info));
  GS2C_Pass_Stage_Reward_All_Info_descriptor_ = file->message_type(39);
  static const int GS2C_Pass_Stage_Reward_All_Info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Pass_Stage_Reward_All_Info, pass_stage_info_),
  };
  GS2C_Pass_Stage_Reward_All_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Pass_Stage_Reward_All_Info_descriptor_,
      GS2C_Pass_Stage_Reward_All_Info::default_instance_,
      GS2C_Pass_Stage_Reward_All_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Pass_Stage_Reward_All_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Pass_Stage_Reward_All_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Pass_Stage_Reward_All_Info));
  C2GS_Pass_Stage_Reward_descriptor_ = file->message_type(40);
  static const int C2GS_Pass_Stage_Reward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Pass_Stage_Reward, id_),
  };
  C2GS_Pass_Stage_Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Pass_Stage_Reward_descriptor_,
      C2GS_Pass_Stage_Reward::default_instance_,
      C2GS_Pass_Stage_Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Pass_Stage_Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Pass_Stage_Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Pass_Stage_Reward));
  GS2C_Pass_Stage_Reward_Res_descriptor_ = file->message_type(41);
  static const int GS2C_Pass_Stage_Reward_Res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Pass_Stage_Reward_Res, rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Pass_Stage_Reward_Res, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Pass_Stage_Reward_Res, id_),
  };
  GS2C_Pass_Stage_Reward_Res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Pass_Stage_Reward_Res_descriptor_,
      GS2C_Pass_Stage_Reward_Res::default_instance_,
      GS2C_Pass_Stage_Reward_Res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Pass_Stage_Reward_Res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Pass_Stage_Reward_Res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Pass_Stage_Reward_Res));
  GxDB_Pass_Stage_Reward_descriptor_ = file->message_type(42);
  static const int GxDB_Pass_Stage_Reward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Pass_Stage_Reward, pass_stage_info_),
  };
  GxDB_Pass_Stage_Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_Pass_Stage_Reward_descriptor_,
      GxDB_Pass_Stage_Reward::default_instance_,
      GxDB_Pass_Stage_Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Pass_Stage_Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Pass_Stage_Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_Pass_Stage_Reward));
  GxDB_Pass_Stage_Reward_Delete_descriptor_ = file->message_type(43);
  static const int GxDB_Pass_Stage_Reward_Delete_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Pass_Stage_Reward_Delete, operate_type_),
  };
  GxDB_Pass_Stage_Reward_Delete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GxDB_Pass_Stage_Reward_Delete_descriptor_,
      GxDB_Pass_Stage_Reward_Delete::default_instance_,
      GxDB_Pass_Stage_Reward_Delete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Pass_Stage_Reward_Delete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GxDB_Pass_Stage_Reward_Delete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GxDB_Pass_Stage_Reward_Delete));
  GrowUpQuestType_descriptor_ = file->enum_type(0);
  GrowUpRewardType_descriptor_ = file->enum_type(1);
  PSignType_descriptor_ = file->enum_type(2);
  SignResult_descriptor_ = file->enum_type(3);
  ExtraRewardResult_descriptor_ = file->enum_type(4);
  PassStageEnum_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Quest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_Quest_descriptor_, &GxDB_Quest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FinishMask_descriptor_, &FinishMask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_QuestList_descriptor_, &GS2C_QuestList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_Behavior_descriptor_, &GxDB_Behavior::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_BehaviorList_descriptor_, &GxDB_BehaviorList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Daily_Quest_Info_descriptor_, &Daily_Quest_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Daily_Quest_All_Info_descriptor_, &GS2C_Daily_Quest_All_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Daily_Quest_Reward_descriptor_, &C2GS_Daily_Quest_Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Daily_Quest_Update_descriptor_, &GS2C_Daily_Quest_Update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Daily_Quest_Reward_Res_descriptor_, &GS2C_Daily_Quest_Reward_Res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_Daily_Quest_Info_descriptor_, &GxDB_Daily_Quest_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_Daily_Quest_descriptor_, &GxDB_Daily_Quest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Grow_Up_Quest_Info_descriptor_, &Grow_Up_Quest_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Group_Up_Group_Info_descriptor_, &Group_Up_Group_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Grow_Up_Quest_All_Info_descriptor_, &GS2C_Grow_Up_Quest_All_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Grow_Up_Quest_Reward_descriptor_, &C2GS_Grow_Up_Quest_Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Grow_Up_Quest_Reward_Res_descriptor_, &GS2C_Grow_Up_Quest_Reward_Res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Grow_Up_Quest_Update_descriptor_, &GS2C_Grow_Up_Quest_Update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Grow_Up_Quest_Group_Update_descriptor_, &GS2C_Grow_Up_Quest_Group_Update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_Grow_Up_Quest_Info_descriptor_, &GxDB_Grow_Up_Quest_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_Grow_Up_Quest_Group_Info_descriptor_, &GxDB_Grow_Up_Quest_Group_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_Grow_Up_Quest_descriptor_, &GxDB_Grow_Up_Quest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_Grow_Up_Quest_Group_descriptor_, &GxDB_Grow_Up_Quest_Group::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_Grow_Up_Quest_Delete_descriptor_, &GxDB_Grow_Up_Quest_Delete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WannaBeStrongerBaseInfo_descriptor_, &WannaBeStrongerBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WannaBeStrongerInfo_descriptor_, &WannaBeStrongerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_WannaBeStrongerReward_descriptor_, &C2GS_WannaBeStrongerReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_WannaBeStrongerRewardRes_descriptor_, &GS2C_WannaBeStrongerRewardRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_WannaBeStrongerUpdate_descriptor_, &GS2C_WannaBeStrongerUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_WannaBeStrongerAllInfo_descriptor_, &GS2C_WannaBeStrongerAllInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_WannaBeStrongerInfo_descriptor_, &GxDB_WannaBeStrongerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_WannaBeStrongerInfoAllInfo_descriptor_, &GxDB_WannaBeStrongerInfoAllInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Sign_Res_descriptor_, &GS2C_Sign_Res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Take_Extra_Reward_descriptor_, &C2GS_Take_Extra_Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Take_Extra_Reward_res_descriptor_, &GS2C_Take_Extra_Reward_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Update_date_descriptor_, &GS2C_Update_date::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_Sign_info_descriptor_, &GxDB_Sign_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_Sign_Up_descriptor_, &GxDB_Sign_Up::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pass_stage_reward_info_descriptor_, &pass_stage_reward_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Pass_Stage_Reward_All_Info_descriptor_, &GS2C_Pass_Stage_Reward_All_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Pass_Stage_Reward_descriptor_, &C2GS_Pass_Stage_Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Pass_Stage_Reward_Res_descriptor_, &GS2C_Pass_Stage_Reward_Res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_Pass_Stage_Reward_descriptor_, &GxDB_Pass_Stage_Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GxDB_Pass_Stage_Reward_Delete_descriptor_, &GxDB_Pass_Stage_Reward_Delete::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Quest_2eproto() {
  delete GxDB_Quest::default_instance_;
  delete GxDB_Quest_reflection_;
  delete FinishMask::default_instance_;
  delete FinishMask_reflection_;
  delete GS2C_QuestList::default_instance_;
  delete GS2C_QuestList_reflection_;
  delete GxDB_Behavior::default_instance_;
  delete GxDB_Behavior_reflection_;
  delete GxDB_BehaviorList::default_instance_;
  delete GxDB_BehaviorList_reflection_;
  delete Daily_Quest_Info::default_instance_;
  delete Daily_Quest_Info_reflection_;
  delete GS2C_Daily_Quest_All_Info::default_instance_;
  delete GS2C_Daily_Quest_All_Info_reflection_;
  delete C2GS_Daily_Quest_Reward::default_instance_;
  delete C2GS_Daily_Quest_Reward_reflection_;
  delete GS2C_Daily_Quest_Update::default_instance_;
  delete GS2C_Daily_Quest_Update_reflection_;
  delete GS2C_Daily_Quest_Reward_Res::default_instance_;
  delete GS2C_Daily_Quest_Reward_Res_reflection_;
  delete GxDB_Daily_Quest_Info::default_instance_;
  delete GxDB_Daily_Quest_Info_reflection_;
  delete GxDB_Daily_Quest::default_instance_;
  delete GxDB_Daily_Quest_reflection_;
  delete Grow_Up_Quest_Info::default_instance_;
  delete Grow_Up_Quest_Info_reflection_;
  delete Group_Up_Group_Info::default_instance_;
  delete Group_Up_Group_Info_reflection_;
  delete GS2C_Grow_Up_Quest_All_Info::default_instance_;
  delete GS2C_Grow_Up_Quest_All_Info_reflection_;
  delete C2GS_Grow_Up_Quest_Reward::default_instance_;
  delete C2GS_Grow_Up_Quest_Reward_reflection_;
  delete GS2C_Grow_Up_Quest_Reward_Res::default_instance_;
  delete GS2C_Grow_Up_Quest_Reward_Res_reflection_;
  delete GS2C_Grow_Up_Quest_Update::default_instance_;
  delete GS2C_Grow_Up_Quest_Update_reflection_;
  delete GS2C_Grow_Up_Quest_Group_Update::default_instance_;
  delete GS2C_Grow_Up_Quest_Group_Update_reflection_;
  delete GxDB_Grow_Up_Quest_Info::default_instance_;
  delete GxDB_Grow_Up_Quest_Info_reflection_;
  delete GxDB_Grow_Up_Quest_Group_Info::default_instance_;
  delete GxDB_Grow_Up_Quest_Group_Info_reflection_;
  delete GxDB_Grow_Up_Quest::default_instance_;
  delete GxDB_Grow_Up_Quest_reflection_;
  delete GxDB_Grow_Up_Quest_Group::default_instance_;
  delete GxDB_Grow_Up_Quest_Group_reflection_;
  delete GxDB_Grow_Up_Quest_Delete::default_instance_;
  delete GxDB_Grow_Up_Quest_Delete_reflection_;
  delete WannaBeStrongerBaseInfo::default_instance_;
  delete WannaBeStrongerBaseInfo_reflection_;
  delete WannaBeStrongerInfo::default_instance_;
  delete WannaBeStrongerInfo_reflection_;
  delete C2GS_WannaBeStrongerReward::default_instance_;
  delete C2GS_WannaBeStrongerReward_reflection_;
  delete GS2C_WannaBeStrongerRewardRes::default_instance_;
  delete GS2C_WannaBeStrongerRewardRes_reflection_;
  delete GS2C_WannaBeStrongerUpdate::default_instance_;
  delete GS2C_WannaBeStrongerUpdate_reflection_;
  delete GS2C_WannaBeStrongerAllInfo::default_instance_;
  delete GS2C_WannaBeStrongerAllInfo_reflection_;
  delete GxDB_WannaBeStrongerInfo::default_instance_;
  delete GxDB_WannaBeStrongerInfo_reflection_;
  delete GxDB_WannaBeStrongerInfoAllInfo::default_instance_;
  delete GxDB_WannaBeStrongerInfoAllInfo_reflection_;
  delete GS2C_Sign_Res::default_instance_;
  delete GS2C_Sign_Res_reflection_;
  delete C2GS_Take_Extra_Reward::default_instance_;
  delete C2GS_Take_Extra_Reward_reflection_;
  delete GS2C_Take_Extra_Reward_res::default_instance_;
  delete GS2C_Take_Extra_Reward_res_reflection_;
  delete GS2C_Update_date::default_instance_;
  delete GS2C_Update_date_reflection_;
  delete GxDB_Sign_info::default_instance_;
  delete GxDB_Sign_info_reflection_;
  delete GxDB_Sign_Up::default_instance_;
  delete GxDB_Sign_Up_reflection_;
  delete pass_stage_reward_info::default_instance_;
  delete pass_stage_reward_info_reflection_;
  delete GS2C_Pass_Stage_Reward_All_Info::default_instance_;
  delete GS2C_Pass_Stage_Reward_All_Info_reflection_;
  delete C2GS_Pass_Stage_Reward::default_instance_;
  delete C2GS_Pass_Stage_Reward_reflection_;
  delete GS2C_Pass_Stage_Reward_Res::default_instance_;
  delete GS2C_Pass_Stage_Reward_Res_reflection_;
  delete GxDB_Pass_Stage_Reward::default_instance_;
  delete GxDB_Pass_Stage_Reward_reflection_;
  delete GxDB_Pass_Stage_Reward_Delete::default_instance_;
  delete GxDB_Pass_Stage_Reward_Delete_reflection_;
}

void protobuf_AddDesc_Quest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_CommomDef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Quest.proto\022\002pb\032\017CommomDef.proto\"V\n\nGx"
    "DB_Quest\022\022\n\nis_deleted\030\001 \001(\010\022\020\n\010quest_id"
    "\030\002 \002(\r\022\023\n\013active_time\030\004 \001(\003\022\r\n\005value\030\003 \001"
    "(\r\"A\n\nFinishMask\022$\n\014finish_masks\030\001 \001(\0132\016"
    ".pb.Uint32List\022\r\n\005count\030\002 \001(\r\"U\n\016GS2C_Qu"
    "estList\022\036\n\006quests\030\001 \003(\0132\016.pb.GxDB_Quest\022"
    "#\n\013finish_mask\030\002 \001(\0132\016.pb.FinishMask\"K\n\r"
    "GxDB_Behavior\022\020\n\010behavior\030\001 \002(\004\022\r\n\005count"
    "\030\002 \002(\r\022\031\n\021last_trigger_time\030\003 \002(\003\"=\n\021GxD"
    "B_BehaviorList\022(\n\rbehavior_list\030\001 \003(\0132\021."
    "pb.GxDB_Behavior\"d\n\020Daily_Quest_Info\022\020\n\010"
    "quest_id\030\001 \002(\r\022\024\n\014finish_times\030\002 \002(\r\022\031\n\021"
    "need_finish_times\030\003 \002(\r\022\r\n\005score\030\004 \002(\r\"E"
    "\n\031GS2C_Daily_Quest_All_Info\022(\n\nquest_inf"
    "o\030\001 \003(\0132\024.pb.Daily_Quest_Info\",\n\027C2GS_Da"
    "ily_Quest_Reward\022\021\n\treward_id\030\001 \002(\r\"C\n\027G"
    "S2C_Daily_Quest_Update\022(\n\nquest_info\030\001 \002"
    "(\0132\024.pb.Daily_Quest_Info\"<\n\033GS2C_Daily_Q"
    "uest_Reward_Res\022\035\n\007rewards\030\001 \003(\0132\014.pb.St"
    "Reward\"V\n\025GxDB_Daily_Quest_Info\022\020\n\010quest"
    "_id\030\001 \002(\r\022\026\n\016finished_times\030\002 \002(\r\022\023\n\013is_"
    "finished\030\003 \002(\r\"A\n\020GxDB_Daily_Quest\022-\n\nqu"
    "est_info\030\001 \003(\0132\031.pb.GxDB_Daily_Quest_Inf"
    "o\"\240\001\n\022Grow_Up_Quest_Info\022\020\n\010group_id\030\001 \002"
    "(\r\022\022\n\nquest_type\030\002 \002(\r\022\020\n\010quest_id\030\003 \002(\r"
    "\022\021\n\tcur_value\030\004 \002(\r\022\022\n\nneed_value\030\005 \002(\r\022"
    "\023\n\013is_finished\030\006 \002(\r\022\026\n\016is_take_reward\030\007"
    " \001(\r\"Z\n\023Group_Up_Group_Info\022\020\n\010group_id\030"
    "\001 \002(\r\022\023\n\013is_finished\030\002 \002(\r\022\034\n\024is_take_gr"
    "oup_reward\030\003 \001(\r\"x\n\033GS2C_Grow_Up_Quest_A"
    "ll_Info\022,\n\014grow_up_info\030\001 \003(\0132\026.pb.Grow_"
    "Up_Quest_Info\022+\n\ngroup_info\030\002 \003(\0132\027.pb.G"
    "roup_Up_Group_Info\"Q\n\031C2GS_Grow_Up_Quest"
    "_Reward\022\"\n\004type\030\001 \002(\0162\024.pb.GrowUpRewardT"
    "ype\022\020\n\010quest_id\030\002 \002(\r\">\n\035GS2C_Grow_Up_Qu"
    "est_Reward_Res\022\035\n\007rewards\030\001 \003(\0132\014.pb.StR"
    "eward\"I\n\031GS2C_Grow_Up_Quest_Update\022,\n\014gr"
    "ow_up_info\030\001 \002(\0132\026.pb.Grow_Up_Quest_Info"
    "\"N\n\037GS2C_Grow_Up_Quest_Group_Update\022+\n\ng"
    "roup_info\030\001 \002(\0132\027.pb.Group_Up_Group_Info"
    "\"\247\001\n\027GxDB_Grow_Up_Quest_Info\022\020\n\010quest_id"
    "\030\001 \002(\r\022\022\n\nquest_type\030\002 \002(\r\022\020\n\010group_id\030\003"
    " \002(\r\022\021\n\tcur_value\030\004 \002(\r\022\023\n\013is_finished\030\005"
    " \002(\r\022\026\n\016is_take_reward\030\006 \001(\r\022\024\n\014operate_"
    "type\030\007 \001(\r\"\200\001\n\035GxDB_Grow_Up_Quest_Group_"
    "Info\022\020\n\010group_id\030\001 \002(\r\022\031\n\021group_is_finis"
    "hed\030\002 \002(\r\022\034\n\024is_take_group_reward\030\003 \001(\r\022"
    "\024\n\014operate_type\030\004 \001(\r\"E\n\022GxDB_Grow_Up_Qu"
    "est\022/\n\nquest_info\030\001 \003(\0132\033.pb.GxDB_Grow_U"
    "p_Quest_Info\"Q\n\030GxDB_Grow_Up_Quest_Group"
    "\0225\n\ngroup_info\030\001 \003(\0132!.pb.GxDB_Grow_Up_Q"
    "uest_Group_Info\"1\n\031GxDB_Grow_Up_Quest_De"
    "lete\022\024\n\014operate_type\030\001 \002(\r\"Q\n\027WannaBeStr"
    "ongerBaseInfo\022\017\n\007goal_id\030\001 \001(\r\022\021\n\tcur_va"
    "lue\030\002 \001(\r\022\022\n\nneed_value\030\003 \001(\r\"\203\001\n\023WannaB"
    "eStrongerInfo\022\020\n\010group_id\030\001 \001(\r\022.\n\tbase_"
    "info\030\002 \003(\0132\033.pb.WannaBeStrongerBaseInfo\022"
    "\022\n\nis_achieve\030\003 \001(\010\022\026\n\016is_take_reward\030\004 "
    "\001(\010\".\n\032C2GS_WannaBeStrongerReward\022\020\n\010gro"
    "up_id\030\001 \002(\r\">\n\035GS2C_WannaBeStrongerRewar"
    "dRes\022\035\n\007rewards\030\001 \003(\0132\014.pb.StReward\"C\n\032G"
    "S2C_WannaBeStrongerUpdate\022%\n\004info\030\001 \001(\0132"
    "\027.pb.WannaBeStrongerInfo\"D\n\033GS2C_WannaBe"
    "StrongerAllInfo\022%\n\004info\030\001 \003(\0132\027.pb.Wanna"
    "BeStrongerInfo\"\210\001\n\030GxDB_WannaBeStrongerI"
    "nfo\022\020\n\010group_id\030\001 \001(\r\022.\n\tbase_info\030\002 \003(\013"
    "2\033.pb.WannaBeStrongerBaseInfo\022\022\n\nis_achi"
    "eve\030\003 \001(\010\022\026\n\016is_take_reward\030\004 \001(\010\"M\n\037GxD"
    "B_WannaBeStrongerInfoAllInfo\022*\n\004info\030\001 \003"
    "(\0132\034.pb.GxDB_WannaBeStrongerInfo\"K\n\rGS2C"
    "_Sign_Res\022\033\n\003ret\030\001 \002(\0162\016.pb.SignResult\022\035"
    "\n\007rewards\030\002 \003(\0132\014.pb.StReward\"%\n\026C2GS_Ta"
    "ke_Extra_Reward\022\013\n\003day\030\001 \002(\r\"_\n\032GS2C_Tak"
    "e_Extra_Reward_res\022\"\n\003ret\030\001 \002(\0162\025.pb.Ext"
    "raRewardResult\022\035\n\007rewards\030\002 \003(\0132\014.pb.StR"
    "eward\"2\n\020GS2C_Update_date\022\013\n\003day\030\001 \002(\r\022\021"
    "\n\tis_signed\030\002 \002(\r\"\?\n\016GxDB_Sign_info\022\r\n\005d"
    "ayth\030\001 \002(\r\022\020\n\010IsSigned\030\002 \002(\r\022\014\n\004type\030\003 \002"
    "(\r\"0\n\014GxDB_Sign_Up\022 \n\004info\030\001 \003(\0132\022.pb.Gx"
    "DB_Sign_info\"\200\001\n\026pass_stage_reward_info\022"
    "\n\n\002id\030\001 \002(\r\022\026\n\016is_take_reward\030\002 \002(\r\022\023\n\013s"
    "tage_level\030\003 \002(\r\022\027\n\017stage_is_passed\030\004 \002("
    "\r\022\024\n\014operate_type\030\005 \001(\r\"V\n\037GS2C_Pass_Sta"
    "ge_Reward_All_Info\0223\n\017pass_stage_info\030\001 "
    "\003(\0132\032.pb.pass_stage_reward_info\"$\n\026C2GS_"
    "Pass_Stage_Reward\022\n\n\002id\030\001 \002(\r\"T\n\032GS2C_Pa"
    "ss_Stage_Reward_Res\022\035\n\007rewards\030\001 \001(\0132\014.p"
    "b.StReward\022\013\n\003ret\030\002 \002(\r\022\n\n\002id\030\003 \001(\r\"M\n\026G"
    "xDB_Pass_Stage_Reward\0223\n\017pass_stage_info"
    "\030\001 \003(\0132\032.pb.pass_stage_reward_info\"5\n\035Gx"
    "DB_Pass_Stage_Reward_Delete\022\024\n\014operate_t"
    "ype\030\001 \002(\r*\224\002\n\017GrowUpQuestType\022\014\n\010LEVLE_U"
    "P\020\001\022\017\n\013GET_EXPLOIT\020\002\022\017\n\013ATTACK_CITY\020\003\022\020\n"
    "\014XILIAN_EQUIP\020\004\022\022\n\016BAOQI_LEVEL_UP\020\005\022\023\n\017C"
    "HARACTER_LEVEL\020\006\022\r\n\tALL_QUEST\020\007\022\023\n\017SOLIV"
    "ER_QUAILTY\020\010\022\023\n\017QIKUANG_QUAILTY\020\t\022\025\n\021JIN"
    "GKUANG_QUAILTY\020\n\022\023\n\017BINYING_QUAILTY\020\013\022\r\n"
    "\tRED_EQUIP\020\014\022\020\n\014PURPLE_EQUIP\020\r\022\020\n\014ORANGE"
    "_EQUIP\020\016*M\n\020GrowUpRewardType\022\021\n\rREWARD_N"
    "ORMAL\020\001\022\020\n\014REWARD_GROUP\020\002\022\024\n\020REWARD_ALL_"
    "GROUP\020\003*-\n\tPSignType\022\017\n\013MORMAL_SIGN\020\001\022\017\n"
    "\013RETROACTIVE\020\002*\203\001\n\nSignResult\022\020\n\014SIGN_SU"
    "CCESS\020\001\022\034\n\030SIGN_DIAMONDS_NOT_ENOUGH\020\002\022\023\n"
    "\017SIGN_HAD_SIGNED\020\003\022\031\n\025SIGN_CANT_RETROACT"
    "IVE\020\004\022\025\n\021SIGN_OTHER_REASON\020\005*>\n\021ExtraRew"
    "ardResult\022\025\n\021EX_HAS_GET_REWARD\020\001\022\022\n\016EX_G"
    "ET_SUCCESS\020\002*w\n\rPassStageEnum\022\032\n\026PS_TAKE"
    "_REWARD_SUCCESS\020\000\022\027\n\023PS_STAGE_NOT_PASSED"
    "\020\001\022\034\n\030PS_STAGE_HAS_TAKE_REWARD\020\002\022\023\n\017PS_O"
    "THER_REASON\020\003", 4373);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Quest.proto", &protobuf_RegisterTypes);
  GxDB_Quest::default_instance_ = new GxDB_Quest();
  FinishMask::default_instance_ = new FinishMask();
  GS2C_QuestList::default_instance_ = new GS2C_QuestList();
  GxDB_Behavior::default_instance_ = new GxDB_Behavior();
  GxDB_BehaviorList::default_instance_ = new GxDB_BehaviorList();
  Daily_Quest_Info::default_instance_ = new Daily_Quest_Info();
  GS2C_Daily_Quest_All_Info::default_instance_ = new GS2C_Daily_Quest_All_Info();
  C2GS_Daily_Quest_Reward::default_instance_ = new C2GS_Daily_Quest_Reward();
  GS2C_Daily_Quest_Update::default_instance_ = new GS2C_Daily_Quest_Update();
  GS2C_Daily_Quest_Reward_Res::default_instance_ = new GS2C_Daily_Quest_Reward_Res();
  GxDB_Daily_Quest_Info::default_instance_ = new GxDB_Daily_Quest_Info();
  GxDB_Daily_Quest::default_instance_ = new GxDB_Daily_Quest();
  Grow_Up_Quest_Info::default_instance_ = new Grow_Up_Quest_Info();
  Group_Up_Group_Info::default_instance_ = new Group_Up_Group_Info();
  GS2C_Grow_Up_Quest_All_Info::default_instance_ = new GS2C_Grow_Up_Quest_All_Info();
  C2GS_Grow_Up_Quest_Reward::default_instance_ = new C2GS_Grow_Up_Quest_Reward();
  GS2C_Grow_Up_Quest_Reward_Res::default_instance_ = new GS2C_Grow_Up_Quest_Reward_Res();
  GS2C_Grow_Up_Quest_Update::default_instance_ = new GS2C_Grow_Up_Quest_Update();
  GS2C_Grow_Up_Quest_Group_Update::default_instance_ = new GS2C_Grow_Up_Quest_Group_Update();
  GxDB_Grow_Up_Quest_Info::default_instance_ = new GxDB_Grow_Up_Quest_Info();
  GxDB_Grow_Up_Quest_Group_Info::default_instance_ = new GxDB_Grow_Up_Quest_Group_Info();
  GxDB_Grow_Up_Quest::default_instance_ = new GxDB_Grow_Up_Quest();
  GxDB_Grow_Up_Quest_Group::default_instance_ = new GxDB_Grow_Up_Quest_Group();
  GxDB_Grow_Up_Quest_Delete::default_instance_ = new GxDB_Grow_Up_Quest_Delete();
  WannaBeStrongerBaseInfo::default_instance_ = new WannaBeStrongerBaseInfo();
  WannaBeStrongerInfo::default_instance_ = new WannaBeStrongerInfo();
  C2GS_WannaBeStrongerReward::default_instance_ = new C2GS_WannaBeStrongerReward();
  GS2C_WannaBeStrongerRewardRes::default_instance_ = new GS2C_WannaBeStrongerRewardRes();
  GS2C_WannaBeStrongerUpdate::default_instance_ = new GS2C_WannaBeStrongerUpdate();
  GS2C_WannaBeStrongerAllInfo::default_instance_ = new GS2C_WannaBeStrongerAllInfo();
  GxDB_WannaBeStrongerInfo::default_instance_ = new GxDB_WannaBeStrongerInfo();
  GxDB_WannaBeStrongerInfoAllInfo::default_instance_ = new GxDB_WannaBeStrongerInfoAllInfo();
  GS2C_Sign_Res::default_instance_ = new GS2C_Sign_Res();
  C2GS_Take_Extra_Reward::default_instance_ = new C2GS_Take_Extra_Reward();
  GS2C_Take_Extra_Reward_res::default_instance_ = new GS2C_Take_Extra_Reward_res();
  GS2C_Update_date::default_instance_ = new GS2C_Update_date();
  GxDB_Sign_info::default_instance_ = new GxDB_Sign_info();
  GxDB_Sign_Up::default_instance_ = new GxDB_Sign_Up();
  pass_stage_reward_info::default_instance_ = new pass_stage_reward_info();
  GS2C_Pass_Stage_Reward_All_Info::default_instance_ = new GS2C_Pass_Stage_Reward_All_Info();
  C2GS_Pass_Stage_Reward::default_instance_ = new C2GS_Pass_Stage_Reward();
  GS2C_Pass_Stage_Reward_Res::default_instance_ = new GS2C_Pass_Stage_Reward_Res();
  GxDB_Pass_Stage_Reward::default_instance_ = new GxDB_Pass_Stage_Reward();
  GxDB_Pass_Stage_Reward_Delete::default_instance_ = new GxDB_Pass_Stage_Reward_Delete();
  GxDB_Quest::default_instance_->InitAsDefaultInstance();
  FinishMask::default_instance_->InitAsDefaultInstance();
  GS2C_QuestList::default_instance_->InitAsDefaultInstance();
  GxDB_Behavior::default_instance_->InitAsDefaultInstance();
  GxDB_BehaviorList::default_instance_->InitAsDefaultInstance();
  Daily_Quest_Info::default_instance_->InitAsDefaultInstance();
  GS2C_Daily_Quest_All_Info::default_instance_->InitAsDefaultInstance();
  C2GS_Daily_Quest_Reward::default_instance_->InitAsDefaultInstance();
  GS2C_Daily_Quest_Update::default_instance_->InitAsDefaultInstance();
  GS2C_Daily_Quest_Reward_Res::default_instance_->InitAsDefaultInstance();
  GxDB_Daily_Quest_Info::default_instance_->InitAsDefaultInstance();
  GxDB_Daily_Quest::default_instance_->InitAsDefaultInstance();
  Grow_Up_Quest_Info::default_instance_->InitAsDefaultInstance();
  Group_Up_Group_Info::default_instance_->InitAsDefaultInstance();
  GS2C_Grow_Up_Quest_All_Info::default_instance_->InitAsDefaultInstance();
  C2GS_Grow_Up_Quest_Reward::default_instance_->InitAsDefaultInstance();
  GS2C_Grow_Up_Quest_Reward_Res::default_instance_->InitAsDefaultInstance();
  GS2C_Grow_Up_Quest_Update::default_instance_->InitAsDefaultInstance();
  GS2C_Grow_Up_Quest_Group_Update::default_instance_->InitAsDefaultInstance();
  GxDB_Grow_Up_Quest_Info::default_instance_->InitAsDefaultInstance();
  GxDB_Grow_Up_Quest_Group_Info::default_instance_->InitAsDefaultInstance();
  GxDB_Grow_Up_Quest::default_instance_->InitAsDefaultInstance();
  GxDB_Grow_Up_Quest_Group::default_instance_->InitAsDefaultInstance();
  GxDB_Grow_Up_Quest_Delete::default_instance_->InitAsDefaultInstance();
  WannaBeStrongerBaseInfo::default_instance_->InitAsDefaultInstance();
  WannaBeStrongerInfo::default_instance_->InitAsDefaultInstance();
  C2GS_WannaBeStrongerReward::default_instance_->InitAsDefaultInstance();
  GS2C_WannaBeStrongerRewardRes::default_instance_->InitAsDefaultInstance();
  GS2C_WannaBeStrongerUpdate::default_instance_->InitAsDefaultInstance();
  GS2C_WannaBeStrongerAllInfo::default_instance_->InitAsDefaultInstance();
  GxDB_WannaBeStrongerInfo::default_instance_->InitAsDefaultInstance();
  GxDB_WannaBeStrongerInfoAllInfo::default_instance_->InitAsDefaultInstance();
  GS2C_Sign_Res::default_instance_->InitAsDefaultInstance();
  C2GS_Take_Extra_Reward::default_instance_->InitAsDefaultInstance();
  GS2C_Take_Extra_Reward_res::default_instance_->InitAsDefaultInstance();
  GS2C_Update_date::default_instance_->InitAsDefaultInstance();
  GxDB_Sign_info::default_instance_->InitAsDefaultInstance();
  GxDB_Sign_Up::default_instance_->InitAsDefaultInstance();
  pass_stage_reward_info::default_instance_->InitAsDefaultInstance();
  GS2C_Pass_Stage_Reward_All_Info::default_instance_->InitAsDefaultInstance();
  C2GS_Pass_Stage_Reward::default_instance_->InitAsDefaultInstance();
  GS2C_Pass_Stage_Reward_Res::default_instance_->InitAsDefaultInstance();
  GxDB_Pass_Stage_Reward::default_instance_->InitAsDefaultInstance();
  GxDB_Pass_Stage_Reward_Delete::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Quest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Quest_2eproto {
  StaticDescriptorInitializer_Quest_2eproto() {
    protobuf_AddDesc_Quest_2eproto();
  }
} static_descriptor_initializer_Quest_2eproto_;
const ::google::protobuf::EnumDescriptor* GrowUpQuestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowUpQuestType_descriptor_;
}
bool GrowUpQuestType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GrowUpRewardType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowUpRewardType_descriptor_;
}
bool GrowUpRewardType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PSignType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PSignType_descriptor_;
}
bool PSignType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SignResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignResult_descriptor_;
}
bool SignResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ExtraRewardResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtraRewardResult_descriptor_;
}
bool ExtraRewardResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PassStageEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassStageEnum_descriptor_;
}
bool PassStageEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_Quest::kIsDeletedFieldNumber;
const int GxDB_Quest::kQuestIdFieldNumber;
const int GxDB_Quest::kActiveTimeFieldNumber;
const int GxDB_Quest::kValueFieldNumber;
#endif  // !_MSC_VER

GxDB_Quest::GxDB_Quest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_Quest::InitAsDefaultInstance() {
}

GxDB_Quest::GxDB_Quest(const GxDB_Quest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_Quest::SharedCtor() {
  _cached_size_ = 0;
  is_deleted_ = false;
  quest_id_ = 0u;
  active_time_ = GOOGLE_LONGLONG(0);
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_Quest::~GxDB_Quest() {
  SharedDtor();
}

void GxDB_Quest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_Quest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_Quest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_Quest_descriptor_;
}

const GxDB_Quest& GxDB_Quest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GxDB_Quest* GxDB_Quest::default_instance_ = NULL;

GxDB_Quest* GxDB_Quest::New() const {
  return new GxDB_Quest;
}

void GxDB_Quest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_deleted_ = false;
    quest_id_ = 0u;
    active_time_ = GOOGLE_LONGLONG(0);
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_Quest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_deleted = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_deleted_)));
          set_has_is_deleted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quest_id;
        break;
      }

      // required uint32 quest_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quest_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quest_id_)));
          set_has_quest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional uint32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_active_time;
        break;
      }

      // optional int64 active_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_time_)));
          set_has_active_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_Quest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_deleted = 1;
  if (has_is_deleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_deleted(), output);
  }

  // required uint32 quest_id = 2;
  if (has_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->quest_id(), output);
  }

  // optional uint32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value(), output);
  }

  // optional int64 active_time = 4;
  if (has_active_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->active_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_Quest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_deleted = 1;
  if (has_is_deleted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_deleted(), target);
  }

  // required uint32 quest_id = 2;
  if (has_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->quest_id(), target);
  }

  // optional uint32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value(), target);
  }

  // optional int64 active_time = 4;
  if (has_active_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->active_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_Quest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_deleted = 1;
    if (has_is_deleted()) {
      total_size += 1 + 1;
    }

    // required uint32 quest_id = 2;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quest_id());
    }

    // optional int64 active_time = 4;
    if (has_active_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->active_time());
    }

    // optional uint32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_Quest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_Quest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_Quest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_Quest::MergeFrom(const GxDB_Quest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_deleted()) {
      set_is_deleted(from.is_deleted());
    }
    if (from.has_quest_id()) {
      set_quest_id(from.quest_id());
    }
    if (from.has_active_time()) {
      set_active_time(from.active_time());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_Quest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_Quest::CopyFrom(const GxDB_Quest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_Quest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void GxDB_Quest::Swap(GxDB_Quest* other) {
  if (other != this) {
    std::swap(is_deleted_, other->is_deleted_);
    std::swap(quest_id_, other->quest_id_);
    std::swap(active_time_, other->active_time_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_Quest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_Quest_descriptor_;
  metadata.reflection = GxDB_Quest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FinishMask::kFinishMasksFieldNumber;
const int FinishMask::kCountFieldNumber;
#endif  // !_MSC_VER

FinishMask::FinishMask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FinishMask::InitAsDefaultInstance() {
  finish_masks_ = const_cast< ::pb::Uint32List*>(&::pb::Uint32List::default_instance());
}

FinishMask::FinishMask(const FinishMask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FinishMask::SharedCtor() {
  _cached_size_ = 0;
  finish_masks_ = NULL;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FinishMask::~FinishMask() {
  SharedDtor();
}

void FinishMask::SharedDtor() {
  if (this != default_instance_) {
    delete finish_masks_;
  }
}

void FinishMask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FinishMask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FinishMask_descriptor_;
}

const FinishMask& FinishMask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

FinishMask* FinishMask::default_instance_ = NULL;

FinishMask* FinishMask::New() const {
  return new FinishMask;
}

void FinishMask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_finish_masks()) {
      if (finish_masks_ != NULL) finish_masks_->::pb::Uint32List::Clear();
    }
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FinishMask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.Uint32List finish_masks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_finish_masks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FinishMask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.Uint32List finish_masks = 1;
  if (has_finish_masks()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->finish_masks(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FinishMask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.Uint32List finish_masks = 1;
  if (has_finish_masks()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->finish_masks(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FinishMask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.Uint32List finish_masks = 1;
    if (has_finish_masks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->finish_masks());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FinishMask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FinishMask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FinishMask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FinishMask::MergeFrom(const FinishMask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_finish_masks()) {
      mutable_finish_masks()->::pb::Uint32List::MergeFrom(from.finish_masks());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FinishMask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinishMask::CopyFrom(const FinishMask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinishMask::IsInitialized() const {

  return true;
}

void FinishMask::Swap(FinishMask* other) {
  if (other != this) {
    std::swap(finish_masks_, other->finish_masks_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FinishMask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FinishMask_descriptor_;
  metadata.reflection = FinishMask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_QuestList::kQuestsFieldNumber;
const int GS2C_QuestList::kFinishMaskFieldNumber;
#endif  // !_MSC_VER

GS2C_QuestList::GS2C_QuestList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_QuestList::InitAsDefaultInstance() {
  finish_mask_ = const_cast< ::pb::FinishMask*>(&::pb::FinishMask::default_instance());
}

GS2C_QuestList::GS2C_QuestList(const GS2C_QuestList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_QuestList::SharedCtor() {
  _cached_size_ = 0;
  finish_mask_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_QuestList::~GS2C_QuestList() {
  SharedDtor();
}

void GS2C_QuestList::SharedDtor() {
  if (this != default_instance_) {
    delete finish_mask_;
  }
}

void GS2C_QuestList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_QuestList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_QuestList_descriptor_;
}

const GS2C_QuestList& GS2C_QuestList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GS2C_QuestList* GS2C_QuestList::default_instance_ = NULL;

GS2C_QuestList* GS2C_QuestList::New() const {
  return new GS2C_QuestList;
}

void GS2C_QuestList::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_finish_mask()) {
      if (finish_mask_ != NULL) finish_mask_->::pb::FinishMask::Clear();
    }
  }
  quests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_QuestList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GxDB_Quest quests = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_quests;
        if (input->ExpectTag(18)) goto parse_finish_mask;
        break;
      }

      // optional .pb.FinishMask finish_mask = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_finish_mask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_finish_mask()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_QuestList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GxDB_Quest quests = 1;
  for (int i = 0; i < this->quests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->quests(i), output);
  }

  // optional .pb.FinishMask finish_mask = 2;
  if (has_finish_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->finish_mask(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_QuestList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GxDB_Quest quests = 1;
  for (int i = 0; i < this->quests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->quests(i), target);
  }

  // optional .pb.FinishMask finish_mask = 2;
  if (has_finish_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->finish_mask(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_QuestList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .pb.FinishMask finish_mask = 2;
    if (has_finish_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->finish_mask());
    }

  }
  // repeated .pb.GxDB_Quest quests = 1;
  total_size += 1 * this->quests_size();
  for (int i = 0; i < this->quests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quests(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_QuestList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_QuestList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_QuestList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_QuestList::MergeFrom(const GS2C_QuestList& from) {
  GOOGLE_CHECK_NE(&from, this);
  quests_.MergeFrom(from.quests_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_finish_mask()) {
      mutable_finish_mask()->::pb::FinishMask::MergeFrom(from.finish_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_QuestList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_QuestList::CopyFrom(const GS2C_QuestList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_QuestList::IsInitialized() const {

  for (int i = 0; i < quests_size(); i++) {
    if (!this->quests(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_QuestList::Swap(GS2C_QuestList* other) {
  if (other != this) {
    quests_.Swap(&other->quests_);
    std::swap(finish_mask_, other->finish_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_QuestList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_QuestList_descriptor_;
  metadata.reflection = GS2C_QuestList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_Behavior::kBehaviorFieldNumber;
const int GxDB_Behavior::kCountFieldNumber;
const int GxDB_Behavior::kLastTriggerTimeFieldNumber;
#endif  // !_MSC_VER

GxDB_Behavior::GxDB_Behavior()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_Behavior::InitAsDefaultInstance() {
}

GxDB_Behavior::GxDB_Behavior(const GxDB_Behavior& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_Behavior::SharedCtor() {
  _cached_size_ = 0;
  behavior_ = GOOGLE_ULONGLONG(0);
  count_ = 0u;
  last_trigger_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_Behavior::~GxDB_Behavior() {
  SharedDtor();
}

void GxDB_Behavior::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_Behavior::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_Behavior::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_Behavior_descriptor_;
}

const GxDB_Behavior& GxDB_Behavior::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GxDB_Behavior* GxDB_Behavior::default_instance_ = NULL;

GxDB_Behavior* GxDB_Behavior::New() const {
  return new GxDB_Behavior;
}

void GxDB_Behavior::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    behavior_ = GOOGLE_ULONGLONG(0);
    count_ = 0u;
    last_trigger_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_Behavior::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 behavior = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &behavior_)));
          set_has_behavior();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_trigger_time;
        break;
      }

      // required int64 last_trigger_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_trigger_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_trigger_time_)));
          set_has_last_trigger_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_Behavior::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 behavior = 1;
  if (has_behavior()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->behavior(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // required int64 last_trigger_time = 3;
  if (has_last_trigger_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->last_trigger_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_Behavior::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 behavior = 1;
  if (has_behavior()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->behavior(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // required int64 last_trigger_time = 3;
  if (has_last_trigger_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->last_trigger_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_Behavior::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 behavior = 1;
    if (has_behavior()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->behavior());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required int64 last_trigger_time = 3;
    if (has_last_trigger_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_trigger_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_Behavior::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_Behavior* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_Behavior*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_Behavior::MergeFrom(const GxDB_Behavior& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_behavior()) {
      set_behavior(from.behavior());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_last_trigger_time()) {
      set_last_trigger_time(from.last_trigger_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_Behavior::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_Behavior::CopyFrom(const GxDB_Behavior& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_Behavior::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GxDB_Behavior::Swap(GxDB_Behavior* other) {
  if (other != this) {
    std::swap(behavior_, other->behavior_);
    std::swap(count_, other->count_);
    std::swap(last_trigger_time_, other->last_trigger_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_Behavior::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_Behavior_descriptor_;
  metadata.reflection = GxDB_Behavior_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_BehaviorList::kBehaviorListFieldNumber;
#endif  // !_MSC_VER

GxDB_BehaviorList::GxDB_BehaviorList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_BehaviorList::InitAsDefaultInstance() {
}

GxDB_BehaviorList::GxDB_BehaviorList(const GxDB_BehaviorList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_BehaviorList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_BehaviorList::~GxDB_BehaviorList() {
  SharedDtor();
}

void GxDB_BehaviorList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_BehaviorList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_BehaviorList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_BehaviorList_descriptor_;
}

const GxDB_BehaviorList& GxDB_BehaviorList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GxDB_BehaviorList* GxDB_BehaviorList::default_instance_ = NULL;

GxDB_BehaviorList* GxDB_BehaviorList::New() const {
  return new GxDB_BehaviorList;
}

void GxDB_BehaviorList::Clear() {
  behavior_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_BehaviorList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GxDB_Behavior behavior_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_behavior_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_behavior_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_behavior_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_BehaviorList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GxDB_Behavior behavior_list = 1;
  for (int i = 0; i < this->behavior_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->behavior_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_BehaviorList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GxDB_Behavior behavior_list = 1;
  for (int i = 0; i < this->behavior_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->behavior_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_BehaviorList::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GxDB_Behavior behavior_list = 1;
  total_size += 1 * this->behavior_list_size();
  for (int i = 0; i < this->behavior_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->behavior_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_BehaviorList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_BehaviorList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_BehaviorList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_BehaviorList::MergeFrom(const GxDB_BehaviorList& from) {
  GOOGLE_CHECK_NE(&from, this);
  behavior_list_.MergeFrom(from.behavior_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_BehaviorList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_BehaviorList::CopyFrom(const GxDB_BehaviorList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_BehaviorList::IsInitialized() const {

  for (int i = 0; i < behavior_list_size(); i++) {
    if (!this->behavior_list(i).IsInitialized()) return false;
  }
  return true;
}

void GxDB_BehaviorList::Swap(GxDB_BehaviorList* other) {
  if (other != this) {
    behavior_list_.Swap(&other->behavior_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_BehaviorList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_BehaviorList_descriptor_;
  metadata.reflection = GxDB_BehaviorList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Daily_Quest_Info::kQuestIdFieldNumber;
const int Daily_Quest_Info::kFinishTimesFieldNumber;
const int Daily_Quest_Info::kNeedFinishTimesFieldNumber;
const int Daily_Quest_Info::kScoreFieldNumber;
#endif  // !_MSC_VER

Daily_Quest_Info::Daily_Quest_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Daily_Quest_Info::InitAsDefaultInstance() {
}

Daily_Quest_Info::Daily_Quest_Info(const Daily_Quest_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Daily_Quest_Info::SharedCtor() {
  _cached_size_ = 0;
  quest_id_ = 0u;
  finish_times_ = 0u;
  need_finish_times_ = 0u;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Daily_Quest_Info::~Daily_Quest_Info() {
  SharedDtor();
}

void Daily_Quest_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Daily_Quest_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Daily_Quest_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Daily_Quest_Info_descriptor_;
}

const Daily_Quest_Info& Daily_Quest_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

Daily_Quest_Info* Daily_Quest_Info::default_instance_ = NULL;

Daily_Quest_Info* Daily_Quest_Info::New() const {
  return new Daily_Quest_Info;
}

void Daily_Quest_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quest_id_ = 0u;
    finish_times_ = 0u;
    need_finish_times_ = 0u;
    score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Daily_Quest_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 quest_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quest_id_)));
          set_has_quest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_finish_times;
        break;
      }

      // required uint32 finish_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finish_times_)));
          set_has_finish_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_need_finish_times;
        break;
      }

      // required uint32 need_finish_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_finish_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &need_finish_times_)));
          set_has_need_finish_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // required uint32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Daily_Quest_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 quest_id = 1;
  if (has_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->quest_id(), output);
  }

  // required uint32 finish_times = 2;
  if (has_finish_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->finish_times(), output);
  }

  // required uint32 need_finish_times = 3;
  if (has_need_finish_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->need_finish_times(), output);
  }

  // required uint32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Daily_Quest_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 quest_id = 1;
  if (has_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->quest_id(), target);
  }

  // required uint32 finish_times = 2;
  if (has_finish_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->finish_times(), target);
  }

  // required uint32 need_finish_times = 3;
  if (has_need_finish_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->need_finish_times(), target);
  }

  // required uint32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Daily_Quest_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 quest_id = 1;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quest_id());
    }

    // required uint32 finish_times = 2;
    if (has_finish_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finish_times());
    }

    // required uint32 need_finish_times = 3;
    if (has_need_finish_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->need_finish_times());
    }

    // required uint32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Daily_Quest_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Daily_Quest_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Daily_Quest_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Daily_Quest_Info::MergeFrom(const Daily_Quest_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quest_id()) {
      set_quest_id(from.quest_id());
    }
    if (from.has_finish_times()) {
      set_finish_times(from.finish_times());
    }
    if (from.has_need_finish_times()) {
      set_need_finish_times(from.need_finish_times());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Daily_Quest_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Daily_Quest_Info::CopyFrom(const Daily_Quest_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Daily_Quest_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Daily_Quest_Info::Swap(Daily_Quest_Info* other) {
  if (other != this) {
    std::swap(quest_id_, other->quest_id_);
    std::swap(finish_times_, other->finish_times_);
    std::swap(need_finish_times_, other->need_finish_times_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Daily_Quest_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Daily_Quest_Info_descriptor_;
  metadata.reflection = Daily_Quest_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Daily_Quest_All_Info::kQuestInfoFieldNumber;
#endif  // !_MSC_VER

GS2C_Daily_Quest_All_Info::GS2C_Daily_Quest_All_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Daily_Quest_All_Info::InitAsDefaultInstance() {
}

GS2C_Daily_Quest_All_Info::GS2C_Daily_Quest_All_Info(const GS2C_Daily_Quest_All_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Daily_Quest_All_Info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Daily_Quest_All_Info::~GS2C_Daily_Quest_All_Info() {
  SharedDtor();
}

void GS2C_Daily_Quest_All_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Daily_Quest_All_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Daily_Quest_All_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Daily_Quest_All_Info_descriptor_;
}

const GS2C_Daily_Quest_All_Info& GS2C_Daily_Quest_All_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GS2C_Daily_Quest_All_Info* GS2C_Daily_Quest_All_Info::default_instance_ = NULL;

GS2C_Daily_Quest_All_Info* GS2C_Daily_Quest_All_Info::New() const {
  return new GS2C_Daily_Quest_All_Info;
}

void GS2C_Daily_Quest_All_Info::Clear() {
  quest_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Daily_Quest_All_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Daily_Quest_Info quest_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quest_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quest_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_quest_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Daily_Quest_All_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.Daily_Quest_Info quest_info = 1;
  for (int i = 0; i < this->quest_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->quest_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Daily_Quest_All_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.Daily_Quest_Info quest_info = 1;
  for (int i = 0; i < this->quest_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->quest_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Daily_Quest_All_Info::ByteSize() const {
  int total_size = 0;

  // repeated .pb.Daily_Quest_Info quest_info = 1;
  total_size += 1 * this->quest_info_size();
  for (int i = 0; i < this->quest_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quest_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Daily_Quest_All_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Daily_Quest_All_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Daily_Quest_All_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Daily_Quest_All_Info::MergeFrom(const GS2C_Daily_Quest_All_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  quest_info_.MergeFrom(from.quest_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Daily_Quest_All_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Daily_Quest_All_Info::CopyFrom(const GS2C_Daily_Quest_All_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Daily_Quest_All_Info::IsInitialized() const {

  for (int i = 0; i < quest_info_size(); i++) {
    if (!this->quest_info(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Daily_Quest_All_Info::Swap(GS2C_Daily_Quest_All_Info* other) {
  if (other != this) {
    quest_info_.Swap(&other->quest_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Daily_Quest_All_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Daily_Quest_All_Info_descriptor_;
  metadata.reflection = GS2C_Daily_Quest_All_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Daily_Quest_Reward::kRewardIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Daily_Quest_Reward::C2GS_Daily_Quest_Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Daily_Quest_Reward::InitAsDefaultInstance() {
}

C2GS_Daily_Quest_Reward::C2GS_Daily_Quest_Reward(const C2GS_Daily_Quest_Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Daily_Quest_Reward::SharedCtor() {
  _cached_size_ = 0;
  reward_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Daily_Quest_Reward::~C2GS_Daily_Quest_Reward() {
  SharedDtor();
}

void C2GS_Daily_Quest_Reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Daily_Quest_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Daily_Quest_Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Daily_Quest_Reward_descriptor_;
}

const C2GS_Daily_Quest_Reward& C2GS_Daily_Quest_Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

C2GS_Daily_Quest_Reward* C2GS_Daily_Quest_Reward::default_instance_ = NULL;

C2GS_Daily_Quest_Reward* C2GS_Daily_Quest_Reward::New() const {
  return new C2GS_Daily_Quest_Reward;
}

void C2GS_Daily_Quest_Reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reward_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Daily_Quest_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 reward_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Daily_Quest_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 reward_id = 1;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reward_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Daily_Quest_Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 reward_id = 1;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reward_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Daily_Quest_Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 reward_id = 1;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Daily_Quest_Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Daily_Quest_Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Daily_Quest_Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Daily_Quest_Reward::MergeFrom(const C2GS_Daily_Quest_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Daily_Quest_Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Daily_Quest_Reward::CopyFrom(const C2GS_Daily_Quest_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Daily_Quest_Reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Daily_Quest_Reward::Swap(C2GS_Daily_Quest_Reward* other) {
  if (other != this) {
    std::swap(reward_id_, other->reward_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Daily_Quest_Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Daily_Quest_Reward_descriptor_;
  metadata.reflection = C2GS_Daily_Quest_Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Daily_Quest_Update::kQuestInfoFieldNumber;
#endif  // !_MSC_VER

GS2C_Daily_Quest_Update::GS2C_Daily_Quest_Update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Daily_Quest_Update::InitAsDefaultInstance() {
  quest_info_ = const_cast< ::pb::Daily_Quest_Info*>(&::pb::Daily_Quest_Info::default_instance());
}

GS2C_Daily_Quest_Update::GS2C_Daily_Quest_Update(const GS2C_Daily_Quest_Update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Daily_Quest_Update::SharedCtor() {
  _cached_size_ = 0;
  quest_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Daily_Quest_Update::~GS2C_Daily_Quest_Update() {
  SharedDtor();
}

void GS2C_Daily_Quest_Update::SharedDtor() {
  if (this != default_instance_) {
    delete quest_info_;
  }
}

void GS2C_Daily_Quest_Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Daily_Quest_Update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Daily_Quest_Update_descriptor_;
}

const GS2C_Daily_Quest_Update& GS2C_Daily_Quest_Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GS2C_Daily_Quest_Update* GS2C_Daily_Quest_Update::default_instance_ = NULL;

GS2C_Daily_Quest_Update* GS2C_Daily_Quest_Update::New() const {
  return new GS2C_Daily_Quest_Update;
}

void GS2C_Daily_Quest_Update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_quest_info()) {
      if (quest_info_ != NULL) quest_info_->::pb::Daily_Quest_Info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Daily_Quest_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.Daily_Quest_Info quest_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quest_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Daily_Quest_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.Daily_Quest_Info quest_info = 1;
  if (has_quest_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->quest_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Daily_Quest_Update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.Daily_Quest_Info quest_info = 1;
  if (has_quest_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->quest_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Daily_Quest_Update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.Daily_Quest_Info quest_info = 1;
    if (has_quest_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quest_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Daily_Quest_Update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Daily_Quest_Update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Daily_Quest_Update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Daily_Quest_Update::MergeFrom(const GS2C_Daily_Quest_Update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quest_info()) {
      mutable_quest_info()->::pb::Daily_Quest_Info::MergeFrom(from.quest_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Daily_Quest_Update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Daily_Quest_Update::CopyFrom(const GS2C_Daily_Quest_Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Daily_Quest_Update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_quest_info()) {
    if (!this->quest_info().IsInitialized()) return false;
  }
  return true;
}

void GS2C_Daily_Quest_Update::Swap(GS2C_Daily_Quest_Update* other) {
  if (other != this) {
    std::swap(quest_info_, other->quest_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Daily_Quest_Update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Daily_Quest_Update_descriptor_;
  metadata.reflection = GS2C_Daily_Quest_Update_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Daily_Quest_Reward_Res::kRewardsFieldNumber;
#endif  // !_MSC_VER

GS2C_Daily_Quest_Reward_Res::GS2C_Daily_Quest_Reward_Res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Daily_Quest_Reward_Res::InitAsDefaultInstance() {
}

GS2C_Daily_Quest_Reward_Res::GS2C_Daily_Quest_Reward_Res(const GS2C_Daily_Quest_Reward_Res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Daily_Quest_Reward_Res::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Daily_Quest_Reward_Res::~GS2C_Daily_Quest_Reward_Res() {
  SharedDtor();
}

void GS2C_Daily_Quest_Reward_Res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Daily_Quest_Reward_Res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Daily_Quest_Reward_Res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Daily_Quest_Reward_Res_descriptor_;
}

const GS2C_Daily_Quest_Reward_Res& GS2C_Daily_Quest_Reward_Res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GS2C_Daily_Quest_Reward_Res* GS2C_Daily_Quest_Reward_Res::default_instance_ = NULL;

GS2C_Daily_Quest_Reward_Res* GS2C_Daily_Quest_Reward_Res::New() const {
  return new GS2C_Daily_Quest_Reward_Res;
}

void GS2C_Daily_Quest_Reward_Res::Clear() {
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Daily_Quest_Reward_Res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.StReward rewards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rewards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Daily_Quest_Reward_Res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.StReward rewards = 1;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Daily_Quest_Reward_Res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.StReward rewards = 1;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Daily_Quest_Reward_Res::ByteSize() const {
  int total_size = 0;

  // repeated .pb.StReward rewards = 1;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Daily_Quest_Reward_Res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Daily_Quest_Reward_Res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Daily_Quest_Reward_Res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Daily_Quest_Reward_Res::MergeFrom(const GS2C_Daily_Quest_Reward_Res& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Daily_Quest_Reward_Res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Daily_Quest_Reward_Res::CopyFrom(const GS2C_Daily_Quest_Reward_Res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Daily_Quest_Reward_Res::IsInitialized() const {

  for (int i = 0; i < rewards_size(); i++) {
    if (!this->rewards(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Daily_Quest_Reward_Res::Swap(GS2C_Daily_Quest_Reward_Res* other) {
  if (other != this) {
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Daily_Quest_Reward_Res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Daily_Quest_Reward_Res_descriptor_;
  metadata.reflection = GS2C_Daily_Quest_Reward_Res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_Daily_Quest_Info::kQuestIdFieldNumber;
const int GxDB_Daily_Quest_Info::kFinishedTimesFieldNumber;
const int GxDB_Daily_Quest_Info::kIsFinishedFieldNumber;
#endif  // !_MSC_VER

GxDB_Daily_Quest_Info::GxDB_Daily_Quest_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_Daily_Quest_Info::InitAsDefaultInstance() {
}

GxDB_Daily_Quest_Info::GxDB_Daily_Quest_Info(const GxDB_Daily_Quest_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_Daily_Quest_Info::SharedCtor() {
  _cached_size_ = 0;
  quest_id_ = 0u;
  finished_times_ = 0u;
  is_finished_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_Daily_Quest_Info::~GxDB_Daily_Quest_Info() {
  SharedDtor();
}

void GxDB_Daily_Quest_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_Daily_Quest_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_Daily_Quest_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_Daily_Quest_Info_descriptor_;
}

const GxDB_Daily_Quest_Info& GxDB_Daily_Quest_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GxDB_Daily_Quest_Info* GxDB_Daily_Quest_Info::default_instance_ = NULL;

GxDB_Daily_Quest_Info* GxDB_Daily_Quest_Info::New() const {
  return new GxDB_Daily_Quest_Info;
}

void GxDB_Daily_Quest_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quest_id_ = 0u;
    finished_times_ = 0u;
    is_finished_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_Daily_Quest_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 quest_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quest_id_)));
          set_has_quest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_finished_times;
        break;
      }

      // required uint32 finished_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finished_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finished_times_)));
          set_has_finished_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_finished;
        break;
      }

      // required uint32 is_finished = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_finished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_finished_)));
          set_has_is_finished();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_Daily_Quest_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 quest_id = 1;
  if (has_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->quest_id(), output);
  }

  // required uint32 finished_times = 2;
  if (has_finished_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->finished_times(), output);
  }

  // required uint32 is_finished = 3;
  if (has_is_finished()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_finished(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_Daily_Quest_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 quest_id = 1;
  if (has_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->quest_id(), target);
  }

  // required uint32 finished_times = 2;
  if (has_finished_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->finished_times(), target);
  }

  // required uint32 is_finished = 3;
  if (has_is_finished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_finished(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_Daily_Quest_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 quest_id = 1;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quest_id());
    }

    // required uint32 finished_times = 2;
    if (has_finished_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finished_times());
    }

    // required uint32 is_finished = 3;
    if (has_is_finished()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_finished());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_Daily_Quest_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_Daily_Quest_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_Daily_Quest_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_Daily_Quest_Info::MergeFrom(const GxDB_Daily_Quest_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quest_id()) {
      set_quest_id(from.quest_id());
    }
    if (from.has_finished_times()) {
      set_finished_times(from.finished_times());
    }
    if (from.has_is_finished()) {
      set_is_finished(from.is_finished());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_Daily_Quest_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_Daily_Quest_Info::CopyFrom(const GxDB_Daily_Quest_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_Daily_Quest_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GxDB_Daily_Quest_Info::Swap(GxDB_Daily_Quest_Info* other) {
  if (other != this) {
    std::swap(quest_id_, other->quest_id_);
    std::swap(finished_times_, other->finished_times_);
    std::swap(is_finished_, other->is_finished_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_Daily_Quest_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_Daily_Quest_Info_descriptor_;
  metadata.reflection = GxDB_Daily_Quest_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_Daily_Quest::kQuestInfoFieldNumber;
#endif  // !_MSC_VER

GxDB_Daily_Quest::GxDB_Daily_Quest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_Daily_Quest::InitAsDefaultInstance() {
}

GxDB_Daily_Quest::GxDB_Daily_Quest(const GxDB_Daily_Quest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_Daily_Quest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_Daily_Quest::~GxDB_Daily_Quest() {
  SharedDtor();
}

void GxDB_Daily_Quest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_Daily_Quest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_Daily_Quest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_Daily_Quest_descriptor_;
}

const GxDB_Daily_Quest& GxDB_Daily_Quest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GxDB_Daily_Quest* GxDB_Daily_Quest::default_instance_ = NULL;

GxDB_Daily_Quest* GxDB_Daily_Quest::New() const {
  return new GxDB_Daily_Quest;
}

void GxDB_Daily_Quest::Clear() {
  quest_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_Daily_Quest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GxDB_Daily_Quest_Info quest_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quest_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quest_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_quest_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_Daily_Quest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GxDB_Daily_Quest_Info quest_info = 1;
  for (int i = 0; i < this->quest_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->quest_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_Daily_Quest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GxDB_Daily_Quest_Info quest_info = 1;
  for (int i = 0; i < this->quest_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->quest_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_Daily_Quest::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GxDB_Daily_Quest_Info quest_info = 1;
  total_size += 1 * this->quest_info_size();
  for (int i = 0; i < this->quest_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quest_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_Daily_Quest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_Daily_Quest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_Daily_Quest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_Daily_Quest::MergeFrom(const GxDB_Daily_Quest& from) {
  GOOGLE_CHECK_NE(&from, this);
  quest_info_.MergeFrom(from.quest_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_Daily_Quest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_Daily_Quest::CopyFrom(const GxDB_Daily_Quest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_Daily_Quest::IsInitialized() const {

  for (int i = 0; i < quest_info_size(); i++) {
    if (!this->quest_info(i).IsInitialized()) return false;
  }
  return true;
}

void GxDB_Daily_Quest::Swap(GxDB_Daily_Quest* other) {
  if (other != this) {
    quest_info_.Swap(&other->quest_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_Daily_Quest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_Daily_Quest_descriptor_;
  metadata.reflection = GxDB_Daily_Quest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Grow_Up_Quest_Info::kGroupIdFieldNumber;
const int Grow_Up_Quest_Info::kQuestTypeFieldNumber;
const int Grow_Up_Quest_Info::kQuestIdFieldNumber;
const int Grow_Up_Quest_Info::kCurValueFieldNumber;
const int Grow_Up_Quest_Info::kNeedValueFieldNumber;
const int Grow_Up_Quest_Info::kIsFinishedFieldNumber;
const int Grow_Up_Quest_Info::kIsTakeRewardFieldNumber;
#endif  // !_MSC_VER

Grow_Up_Quest_Info::Grow_Up_Quest_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Grow_Up_Quest_Info::InitAsDefaultInstance() {
}

Grow_Up_Quest_Info::Grow_Up_Quest_Info(const Grow_Up_Quest_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Grow_Up_Quest_Info::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  quest_type_ = 0u;
  quest_id_ = 0u;
  cur_value_ = 0u;
  need_value_ = 0u;
  is_finished_ = 0u;
  is_take_reward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Grow_Up_Quest_Info::~Grow_Up_Quest_Info() {
  SharedDtor();
}

void Grow_Up_Quest_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Grow_Up_Quest_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Grow_Up_Quest_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Grow_Up_Quest_Info_descriptor_;
}

const Grow_Up_Quest_Info& Grow_Up_Quest_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

Grow_Up_Quest_Info* Grow_Up_Quest_Info::default_instance_ = NULL;

Grow_Up_Quest_Info* Grow_Up_Quest_Info::New() const {
  return new Grow_Up_Quest_Info;
}

void Grow_Up_Quest_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
    quest_type_ = 0u;
    quest_id_ = 0u;
    cur_value_ = 0u;
    need_value_ = 0u;
    is_finished_ = 0u;
    is_take_reward_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Grow_Up_Quest_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quest_type;
        break;
      }

      // required uint32 quest_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quest_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quest_type_)));
          set_has_quest_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quest_id;
        break;
      }

      // required uint32 quest_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quest_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quest_id_)));
          set_has_quest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_value;
        break;
      }

      // required uint32 cur_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_value_)));
          set_has_cur_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_need_value;
        break;
      }

      // required uint32 need_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &need_value_)));
          set_has_need_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_finished;
        break;
      }

      // required uint32 is_finished = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_finished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_finished_)));
          set_has_is_finished();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_take_reward;
        break;
      }

      // optional uint32 is_take_reward = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_take_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_take_reward_)));
          set_has_is_take_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Grow_Up_Quest_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // required uint32 quest_type = 2;
  if (has_quest_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->quest_type(), output);
  }

  // required uint32 quest_id = 3;
  if (has_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->quest_id(), output);
  }

  // required uint32 cur_value = 4;
  if (has_cur_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cur_value(), output);
  }

  // required uint32 need_value = 5;
  if (has_need_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->need_value(), output);
  }

  // required uint32 is_finished = 6;
  if (has_is_finished()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->is_finished(), output);
  }

  // optional uint32 is_take_reward = 7;
  if (has_is_take_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->is_take_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Grow_Up_Quest_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // required uint32 quest_type = 2;
  if (has_quest_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->quest_type(), target);
  }

  // required uint32 quest_id = 3;
  if (has_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->quest_id(), target);
  }

  // required uint32 cur_value = 4;
  if (has_cur_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cur_value(), target);
  }

  // required uint32 need_value = 5;
  if (has_need_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->need_value(), target);
  }

  // required uint32 is_finished = 6;
  if (has_is_finished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->is_finished(), target);
  }

  // optional uint32 is_take_reward = 7;
  if (has_is_take_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->is_take_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Grow_Up_Quest_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 quest_type = 2;
    if (has_quest_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quest_type());
    }

    // required uint32 quest_id = 3;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quest_id());
    }

    // required uint32 cur_value = 4;
    if (has_cur_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_value());
    }

    // required uint32 need_value = 5;
    if (has_need_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->need_value());
    }

    // required uint32 is_finished = 6;
    if (has_is_finished()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_finished());
    }

    // optional uint32 is_take_reward = 7;
    if (has_is_take_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_take_reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grow_Up_Quest_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Grow_Up_Quest_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Grow_Up_Quest_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Grow_Up_Quest_Info::MergeFrom(const Grow_Up_Quest_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_quest_type()) {
      set_quest_type(from.quest_type());
    }
    if (from.has_quest_id()) {
      set_quest_id(from.quest_id());
    }
    if (from.has_cur_value()) {
      set_cur_value(from.cur_value());
    }
    if (from.has_need_value()) {
      set_need_value(from.need_value());
    }
    if (from.has_is_finished()) {
      set_is_finished(from.is_finished());
    }
    if (from.has_is_take_reward()) {
      set_is_take_reward(from.is_take_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Grow_Up_Quest_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grow_Up_Quest_Info::CopyFrom(const Grow_Up_Quest_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grow_Up_Quest_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Grow_Up_Quest_Info::Swap(Grow_Up_Quest_Info* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(quest_type_, other->quest_type_);
    std::swap(quest_id_, other->quest_id_);
    std::swap(cur_value_, other->cur_value_);
    std::swap(need_value_, other->need_value_);
    std::swap(is_finished_, other->is_finished_);
    std::swap(is_take_reward_, other->is_take_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Grow_Up_Quest_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Grow_Up_Quest_Info_descriptor_;
  metadata.reflection = Grow_Up_Quest_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Group_Up_Group_Info::kGroupIdFieldNumber;
const int Group_Up_Group_Info::kIsFinishedFieldNumber;
const int Group_Up_Group_Info::kIsTakeGroupRewardFieldNumber;
#endif  // !_MSC_VER

Group_Up_Group_Info::Group_Up_Group_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Group_Up_Group_Info::InitAsDefaultInstance() {
}

Group_Up_Group_Info::Group_Up_Group_Info(const Group_Up_Group_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Group_Up_Group_Info::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  is_finished_ = 0u;
  is_take_group_reward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Group_Up_Group_Info::~Group_Up_Group_Info() {
  SharedDtor();
}

void Group_Up_Group_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Group_Up_Group_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Group_Up_Group_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Group_Up_Group_Info_descriptor_;
}

const Group_Up_Group_Info& Group_Up_Group_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

Group_Up_Group_Info* Group_Up_Group_Info::default_instance_ = NULL;

Group_Up_Group_Info* Group_Up_Group_Info::New() const {
  return new Group_Up_Group_Info;
}

void Group_Up_Group_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
    is_finished_ = 0u;
    is_take_group_reward_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Group_Up_Group_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_finished;
        break;
      }

      // required uint32 is_finished = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_finished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_finished_)));
          set_has_is_finished();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_take_group_reward;
        break;
      }

      // optional uint32 is_take_group_reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_take_group_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_take_group_reward_)));
          set_has_is_take_group_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Group_Up_Group_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // required uint32 is_finished = 2;
  if (has_is_finished()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->is_finished(), output);
  }

  // optional uint32 is_take_group_reward = 3;
  if (has_is_take_group_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_take_group_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Group_Up_Group_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // required uint32 is_finished = 2;
  if (has_is_finished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->is_finished(), target);
  }

  // optional uint32 is_take_group_reward = 3;
  if (has_is_take_group_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_take_group_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Group_Up_Group_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 is_finished = 2;
    if (has_is_finished()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_finished());
    }

    // optional uint32 is_take_group_reward = 3;
    if (has_is_take_group_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_take_group_reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Group_Up_Group_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Group_Up_Group_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Group_Up_Group_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Group_Up_Group_Info::MergeFrom(const Group_Up_Group_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_is_finished()) {
      set_is_finished(from.is_finished());
    }
    if (from.has_is_take_group_reward()) {
      set_is_take_group_reward(from.is_take_group_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Group_Up_Group_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Group_Up_Group_Info::CopyFrom(const Group_Up_Group_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Group_Up_Group_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Group_Up_Group_Info::Swap(Group_Up_Group_Info* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(is_finished_, other->is_finished_);
    std::swap(is_take_group_reward_, other->is_take_group_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Group_Up_Group_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Group_Up_Group_Info_descriptor_;
  metadata.reflection = Group_Up_Group_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Grow_Up_Quest_All_Info::kGrowUpInfoFieldNumber;
const int GS2C_Grow_Up_Quest_All_Info::kGroupInfoFieldNumber;
#endif  // !_MSC_VER

GS2C_Grow_Up_Quest_All_Info::GS2C_Grow_Up_Quest_All_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Grow_Up_Quest_All_Info::InitAsDefaultInstance() {
}

GS2C_Grow_Up_Quest_All_Info::GS2C_Grow_Up_Quest_All_Info(const GS2C_Grow_Up_Quest_All_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Grow_Up_Quest_All_Info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Grow_Up_Quest_All_Info::~GS2C_Grow_Up_Quest_All_Info() {
  SharedDtor();
}

void GS2C_Grow_Up_Quest_All_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Grow_Up_Quest_All_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Grow_Up_Quest_All_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Grow_Up_Quest_All_Info_descriptor_;
}

const GS2C_Grow_Up_Quest_All_Info& GS2C_Grow_Up_Quest_All_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GS2C_Grow_Up_Quest_All_Info* GS2C_Grow_Up_Quest_All_Info::default_instance_ = NULL;

GS2C_Grow_Up_Quest_All_Info* GS2C_Grow_Up_Quest_All_Info::New() const {
  return new GS2C_Grow_Up_Quest_All_Info;
}

void GS2C_Grow_Up_Quest_All_Info::Clear() {
  grow_up_info_.Clear();
  group_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Grow_Up_Quest_All_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Grow_Up_Quest_Info grow_up_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grow_up_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grow_up_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_grow_up_info;
        if (input->ExpectTag(18)) goto parse_group_info;
        break;
      }

      // repeated .pb.Group_Up_Group_Info group_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Grow_Up_Quest_All_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.Grow_Up_Quest_Info grow_up_info = 1;
  for (int i = 0; i < this->grow_up_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->grow_up_info(i), output);
  }

  // repeated .pb.Group_Up_Group_Info group_info = 2;
  for (int i = 0; i < this->group_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->group_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Grow_Up_Quest_All_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.Grow_Up_Quest_Info grow_up_info = 1;
  for (int i = 0; i < this->grow_up_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->grow_up_info(i), target);
  }

  // repeated .pb.Group_Up_Group_Info group_info = 2;
  for (int i = 0; i < this->group_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->group_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Grow_Up_Quest_All_Info::ByteSize() const {
  int total_size = 0;

  // repeated .pb.Grow_Up_Quest_Info grow_up_info = 1;
  total_size += 1 * this->grow_up_info_size();
  for (int i = 0; i < this->grow_up_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grow_up_info(i));
  }

  // repeated .pb.Group_Up_Group_Info group_info = 2;
  total_size += 1 * this->group_info_size();
  for (int i = 0; i < this->group_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Grow_Up_Quest_All_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Grow_Up_Quest_All_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Grow_Up_Quest_All_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Grow_Up_Quest_All_Info::MergeFrom(const GS2C_Grow_Up_Quest_All_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  grow_up_info_.MergeFrom(from.grow_up_info_);
  group_info_.MergeFrom(from.group_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Grow_Up_Quest_All_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Grow_Up_Quest_All_Info::CopyFrom(const GS2C_Grow_Up_Quest_All_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Grow_Up_Quest_All_Info::IsInitialized() const {

  for (int i = 0; i < grow_up_info_size(); i++) {
    if (!this->grow_up_info(i).IsInitialized()) return false;
  }
  for (int i = 0; i < group_info_size(); i++) {
    if (!this->group_info(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Grow_Up_Quest_All_Info::Swap(GS2C_Grow_Up_Quest_All_Info* other) {
  if (other != this) {
    grow_up_info_.Swap(&other->grow_up_info_);
    group_info_.Swap(&other->group_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Grow_Up_Quest_All_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Grow_Up_Quest_All_Info_descriptor_;
  metadata.reflection = GS2C_Grow_Up_Quest_All_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Grow_Up_Quest_Reward::kTypeFieldNumber;
const int C2GS_Grow_Up_Quest_Reward::kQuestIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Grow_Up_Quest_Reward::C2GS_Grow_Up_Quest_Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Grow_Up_Quest_Reward::InitAsDefaultInstance() {
}

C2GS_Grow_Up_Quest_Reward::C2GS_Grow_Up_Quest_Reward(const C2GS_Grow_Up_Quest_Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Grow_Up_Quest_Reward::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  quest_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Grow_Up_Quest_Reward::~C2GS_Grow_Up_Quest_Reward() {
  SharedDtor();
}

void C2GS_Grow_Up_Quest_Reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Grow_Up_Quest_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Grow_Up_Quest_Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Grow_Up_Quest_Reward_descriptor_;
}

const C2GS_Grow_Up_Quest_Reward& C2GS_Grow_Up_Quest_Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

C2GS_Grow_Up_Quest_Reward* C2GS_Grow_Up_Quest_Reward::default_instance_ = NULL;

C2GS_Grow_Up_Quest_Reward* C2GS_Grow_Up_Quest_Reward::New() const {
  return new C2GS_Grow_Up_Quest_Reward;
}

void C2GS_Grow_Up_Quest_Reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    quest_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Grow_Up_Quest_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.GrowUpRewardType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::GrowUpRewardType_IsValid(value)) {
            set_type(static_cast< ::pb::GrowUpRewardType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quest_id;
        break;
      }

      // required uint32 quest_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quest_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quest_id_)));
          set_has_quest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Grow_Up_Quest_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.GrowUpRewardType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 quest_id = 2;
  if (has_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->quest_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Grow_Up_Quest_Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.GrowUpRewardType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 quest_id = 2;
  if (has_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->quest_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Grow_Up_Quest_Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.GrowUpRewardType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 quest_id = 2;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quest_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Grow_Up_Quest_Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Grow_Up_Quest_Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Grow_Up_Quest_Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Grow_Up_Quest_Reward::MergeFrom(const C2GS_Grow_Up_Quest_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_quest_id()) {
      set_quest_id(from.quest_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Grow_Up_Quest_Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Grow_Up_Quest_Reward::CopyFrom(const C2GS_Grow_Up_Quest_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Grow_Up_Quest_Reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2GS_Grow_Up_Quest_Reward::Swap(C2GS_Grow_Up_Quest_Reward* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(quest_id_, other->quest_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Grow_Up_Quest_Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Grow_Up_Quest_Reward_descriptor_;
  metadata.reflection = C2GS_Grow_Up_Quest_Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Grow_Up_Quest_Reward_Res::kRewardsFieldNumber;
#endif  // !_MSC_VER

GS2C_Grow_Up_Quest_Reward_Res::GS2C_Grow_Up_Quest_Reward_Res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Grow_Up_Quest_Reward_Res::InitAsDefaultInstance() {
}

GS2C_Grow_Up_Quest_Reward_Res::GS2C_Grow_Up_Quest_Reward_Res(const GS2C_Grow_Up_Quest_Reward_Res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Grow_Up_Quest_Reward_Res::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Grow_Up_Quest_Reward_Res::~GS2C_Grow_Up_Quest_Reward_Res() {
  SharedDtor();
}

void GS2C_Grow_Up_Quest_Reward_Res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Grow_Up_Quest_Reward_Res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Grow_Up_Quest_Reward_Res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Grow_Up_Quest_Reward_Res_descriptor_;
}

const GS2C_Grow_Up_Quest_Reward_Res& GS2C_Grow_Up_Quest_Reward_Res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GS2C_Grow_Up_Quest_Reward_Res* GS2C_Grow_Up_Quest_Reward_Res::default_instance_ = NULL;

GS2C_Grow_Up_Quest_Reward_Res* GS2C_Grow_Up_Quest_Reward_Res::New() const {
  return new GS2C_Grow_Up_Quest_Reward_Res;
}

void GS2C_Grow_Up_Quest_Reward_Res::Clear() {
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Grow_Up_Quest_Reward_Res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.StReward rewards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rewards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Grow_Up_Quest_Reward_Res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.StReward rewards = 1;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Grow_Up_Quest_Reward_Res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.StReward rewards = 1;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Grow_Up_Quest_Reward_Res::ByteSize() const {
  int total_size = 0;

  // repeated .pb.StReward rewards = 1;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Grow_Up_Quest_Reward_Res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Grow_Up_Quest_Reward_Res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Grow_Up_Quest_Reward_Res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Grow_Up_Quest_Reward_Res::MergeFrom(const GS2C_Grow_Up_Quest_Reward_Res& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Grow_Up_Quest_Reward_Res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Grow_Up_Quest_Reward_Res::CopyFrom(const GS2C_Grow_Up_Quest_Reward_Res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Grow_Up_Quest_Reward_Res::IsInitialized() const {

  for (int i = 0; i < rewards_size(); i++) {
    if (!this->rewards(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Grow_Up_Quest_Reward_Res::Swap(GS2C_Grow_Up_Quest_Reward_Res* other) {
  if (other != this) {
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Grow_Up_Quest_Reward_Res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Grow_Up_Quest_Reward_Res_descriptor_;
  metadata.reflection = GS2C_Grow_Up_Quest_Reward_Res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Grow_Up_Quest_Update::kGrowUpInfoFieldNumber;
#endif  // !_MSC_VER

GS2C_Grow_Up_Quest_Update::GS2C_Grow_Up_Quest_Update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Grow_Up_Quest_Update::InitAsDefaultInstance() {
  grow_up_info_ = const_cast< ::pb::Grow_Up_Quest_Info*>(&::pb::Grow_Up_Quest_Info::default_instance());
}

GS2C_Grow_Up_Quest_Update::GS2C_Grow_Up_Quest_Update(const GS2C_Grow_Up_Quest_Update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Grow_Up_Quest_Update::SharedCtor() {
  _cached_size_ = 0;
  grow_up_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Grow_Up_Quest_Update::~GS2C_Grow_Up_Quest_Update() {
  SharedDtor();
}

void GS2C_Grow_Up_Quest_Update::SharedDtor() {
  if (this != default_instance_) {
    delete grow_up_info_;
  }
}

void GS2C_Grow_Up_Quest_Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Grow_Up_Quest_Update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Grow_Up_Quest_Update_descriptor_;
}

const GS2C_Grow_Up_Quest_Update& GS2C_Grow_Up_Quest_Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GS2C_Grow_Up_Quest_Update* GS2C_Grow_Up_Quest_Update::default_instance_ = NULL;

GS2C_Grow_Up_Quest_Update* GS2C_Grow_Up_Quest_Update::New() const {
  return new GS2C_Grow_Up_Quest_Update;
}

void GS2C_Grow_Up_Quest_Update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_grow_up_info()) {
      if (grow_up_info_ != NULL) grow_up_info_->::pb::Grow_Up_Quest_Info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Grow_Up_Quest_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.Grow_Up_Quest_Info grow_up_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grow_up_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Grow_Up_Quest_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.Grow_Up_Quest_Info grow_up_info = 1;
  if (has_grow_up_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->grow_up_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Grow_Up_Quest_Update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.Grow_Up_Quest_Info grow_up_info = 1;
  if (has_grow_up_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->grow_up_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Grow_Up_Quest_Update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.Grow_Up_Quest_Info grow_up_info = 1;
    if (has_grow_up_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grow_up_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Grow_Up_Quest_Update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Grow_Up_Quest_Update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Grow_Up_Quest_Update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Grow_Up_Quest_Update::MergeFrom(const GS2C_Grow_Up_Quest_Update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grow_up_info()) {
      mutable_grow_up_info()->::pb::Grow_Up_Quest_Info::MergeFrom(from.grow_up_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Grow_Up_Quest_Update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Grow_Up_Quest_Update::CopyFrom(const GS2C_Grow_Up_Quest_Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Grow_Up_Quest_Update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_grow_up_info()) {
    if (!this->grow_up_info().IsInitialized()) return false;
  }
  return true;
}

void GS2C_Grow_Up_Quest_Update::Swap(GS2C_Grow_Up_Quest_Update* other) {
  if (other != this) {
    std::swap(grow_up_info_, other->grow_up_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Grow_Up_Quest_Update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Grow_Up_Quest_Update_descriptor_;
  metadata.reflection = GS2C_Grow_Up_Quest_Update_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Grow_Up_Quest_Group_Update::kGroupInfoFieldNumber;
#endif  // !_MSC_VER

GS2C_Grow_Up_Quest_Group_Update::GS2C_Grow_Up_Quest_Group_Update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Grow_Up_Quest_Group_Update::InitAsDefaultInstance() {
  group_info_ = const_cast< ::pb::Group_Up_Group_Info*>(&::pb::Group_Up_Group_Info::default_instance());
}

GS2C_Grow_Up_Quest_Group_Update::GS2C_Grow_Up_Quest_Group_Update(const GS2C_Grow_Up_Quest_Group_Update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Grow_Up_Quest_Group_Update::SharedCtor() {
  _cached_size_ = 0;
  group_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Grow_Up_Quest_Group_Update::~GS2C_Grow_Up_Quest_Group_Update() {
  SharedDtor();
}

void GS2C_Grow_Up_Quest_Group_Update::SharedDtor() {
  if (this != default_instance_) {
    delete group_info_;
  }
}

void GS2C_Grow_Up_Quest_Group_Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Grow_Up_Quest_Group_Update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Grow_Up_Quest_Group_Update_descriptor_;
}

const GS2C_Grow_Up_Quest_Group_Update& GS2C_Grow_Up_Quest_Group_Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GS2C_Grow_Up_Quest_Group_Update* GS2C_Grow_Up_Quest_Group_Update::default_instance_ = NULL;

GS2C_Grow_Up_Quest_Group_Update* GS2C_Grow_Up_Quest_Group_Update::New() const {
  return new GS2C_Grow_Up_Quest_Group_Update;
}

void GS2C_Grow_Up_Quest_Group_Update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_info()) {
      if (group_info_ != NULL) group_info_->::pb::Group_Up_Group_Info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Grow_Up_Quest_Group_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.Group_Up_Group_Info group_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Grow_Up_Quest_Group_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.Group_Up_Group_Info group_info = 1;
  if (has_group_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Grow_Up_Quest_Group_Update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.Group_Up_Group_Info group_info = 1;
  if (has_group_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Grow_Up_Quest_Group_Update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.Group_Up_Group_Info group_info = 1;
    if (has_group_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Grow_Up_Quest_Group_Update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Grow_Up_Quest_Group_Update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Grow_Up_Quest_Group_Update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Grow_Up_Quest_Group_Update::MergeFrom(const GS2C_Grow_Up_Quest_Group_Update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_info()) {
      mutable_group_info()->::pb::Group_Up_Group_Info::MergeFrom(from.group_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Grow_Up_Quest_Group_Update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Grow_Up_Quest_Group_Update::CopyFrom(const GS2C_Grow_Up_Quest_Group_Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Grow_Up_Quest_Group_Update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_group_info()) {
    if (!this->group_info().IsInitialized()) return false;
  }
  return true;
}

void GS2C_Grow_Up_Quest_Group_Update::Swap(GS2C_Grow_Up_Quest_Group_Update* other) {
  if (other != this) {
    std::swap(group_info_, other->group_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Grow_Up_Quest_Group_Update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Grow_Up_Quest_Group_Update_descriptor_;
  metadata.reflection = GS2C_Grow_Up_Quest_Group_Update_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_Grow_Up_Quest_Info::kQuestIdFieldNumber;
const int GxDB_Grow_Up_Quest_Info::kQuestTypeFieldNumber;
const int GxDB_Grow_Up_Quest_Info::kGroupIdFieldNumber;
const int GxDB_Grow_Up_Quest_Info::kCurValueFieldNumber;
const int GxDB_Grow_Up_Quest_Info::kIsFinishedFieldNumber;
const int GxDB_Grow_Up_Quest_Info::kIsTakeRewardFieldNumber;
const int GxDB_Grow_Up_Quest_Info::kOperateTypeFieldNumber;
#endif  // !_MSC_VER

GxDB_Grow_Up_Quest_Info::GxDB_Grow_Up_Quest_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_Grow_Up_Quest_Info::InitAsDefaultInstance() {
}

GxDB_Grow_Up_Quest_Info::GxDB_Grow_Up_Quest_Info(const GxDB_Grow_Up_Quest_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_Grow_Up_Quest_Info::SharedCtor() {
  _cached_size_ = 0;
  quest_id_ = 0u;
  quest_type_ = 0u;
  group_id_ = 0u;
  cur_value_ = 0u;
  is_finished_ = 0u;
  is_take_reward_ = 0u;
  operate_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_Grow_Up_Quest_Info::~GxDB_Grow_Up_Quest_Info() {
  SharedDtor();
}

void GxDB_Grow_Up_Quest_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_Grow_Up_Quest_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_Grow_Up_Quest_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_Grow_Up_Quest_Info_descriptor_;
}

const GxDB_Grow_Up_Quest_Info& GxDB_Grow_Up_Quest_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GxDB_Grow_Up_Quest_Info* GxDB_Grow_Up_Quest_Info::default_instance_ = NULL;

GxDB_Grow_Up_Quest_Info* GxDB_Grow_Up_Quest_Info::New() const {
  return new GxDB_Grow_Up_Quest_Info;
}

void GxDB_Grow_Up_Quest_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quest_id_ = 0u;
    quest_type_ = 0u;
    group_id_ = 0u;
    cur_value_ = 0u;
    is_finished_ = 0u;
    is_take_reward_ = 0u;
    operate_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_Grow_Up_Quest_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 quest_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quest_id_)));
          set_has_quest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quest_type;
        break;
      }

      // required uint32 quest_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quest_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quest_type_)));
          set_has_quest_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_value;
        break;
      }

      // required uint32 cur_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_value_)));
          set_has_cur_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_finished;
        break;
      }

      // required uint32 is_finished = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_finished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_finished_)));
          set_has_is_finished();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_take_reward;
        break;
      }

      // optional uint32 is_take_reward = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_take_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_take_reward_)));
          set_has_is_take_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_operate_type;
        break;
      }

      // optional uint32 operate_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_type_)));
          set_has_operate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_Grow_Up_Quest_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 quest_id = 1;
  if (has_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->quest_id(), output);
  }

  // required uint32 quest_type = 2;
  if (has_quest_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->quest_type(), output);
  }

  // required uint32 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_id(), output);
  }

  // required uint32 cur_value = 4;
  if (has_cur_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cur_value(), output);
  }

  // required uint32 is_finished = 5;
  if (has_is_finished()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->is_finished(), output);
  }

  // optional uint32 is_take_reward = 6;
  if (has_is_take_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->is_take_reward(), output);
  }

  // optional uint32 operate_type = 7;
  if (has_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->operate_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_Grow_Up_Quest_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 quest_id = 1;
  if (has_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->quest_id(), target);
  }

  // required uint32 quest_type = 2;
  if (has_quest_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->quest_type(), target);
  }

  // required uint32 group_id = 3;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->group_id(), target);
  }

  // required uint32 cur_value = 4;
  if (has_cur_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cur_value(), target);
  }

  // required uint32 is_finished = 5;
  if (has_is_finished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->is_finished(), target);
  }

  // optional uint32 is_take_reward = 6;
  if (has_is_take_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->is_take_reward(), target);
  }

  // optional uint32 operate_type = 7;
  if (has_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->operate_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_Grow_Up_Quest_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 quest_id = 1;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quest_id());
    }

    // required uint32 quest_type = 2;
    if (has_quest_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quest_type());
    }

    // required uint32 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 cur_value = 4;
    if (has_cur_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_value());
    }

    // required uint32 is_finished = 5;
    if (has_is_finished()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_finished());
    }

    // optional uint32 is_take_reward = 6;
    if (has_is_take_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_take_reward());
    }

    // optional uint32 operate_type = 7;
    if (has_operate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_Grow_Up_Quest_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_Grow_Up_Quest_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_Grow_Up_Quest_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_Grow_Up_Quest_Info::MergeFrom(const GxDB_Grow_Up_Quest_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quest_id()) {
      set_quest_id(from.quest_id());
    }
    if (from.has_quest_type()) {
      set_quest_type(from.quest_type());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_cur_value()) {
      set_cur_value(from.cur_value());
    }
    if (from.has_is_finished()) {
      set_is_finished(from.is_finished());
    }
    if (from.has_is_take_reward()) {
      set_is_take_reward(from.is_take_reward());
    }
    if (from.has_operate_type()) {
      set_operate_type(from.operate_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_Grow_Up_Quest_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_Grow_Up_Quest_Info::CopyFrom(const GxDB_Grow_Up_Quest_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_Grow_Up_Quest_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GxDB_Grow_Up_Quest_Info::Swap(GxDB_Grow_Up_Quest_Info* other) {
  if (other != this) {
    std::swap(quest_id_, other->quest_id_);
    std::swap(quest_type_, other->quest_type_);
    std::swap(group_id_, other->group_id_);
    std::swap(cur_value_, other->cur_value_);
    std::swap(is_finished_, other->is_finished_);
    std::swap(is_take_reward_, other->is_take_reward_);
    std::swap(operate_type_, other->operate_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_Grow_Up_Quest_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_Grow_Up_Quest_Info_descriptor_;
  metadata.reflection = GxDB_Grow_Up_Quest_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_Grow_Up_Quest_Group_Info::kGroupIdFieldNumber;
const int GxDB_Grow_Up_Quest_Group_Info::kGroupIsFinishedFieldNumber;
const int GxDB_Grow_Up_Quest_Group_Info::kIsTakeGroupRewardFieldNumber;
const int GxDB_Grow_Up_Quest_Group_Info::kOperateTypeFieldNumber;
#endif  // !_MSC_VER

GxDB_Grow_Up_Quest_Group_Info::GxDB_Grow_Up_Quest_Group_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_Grow_Up_Quest_Group_Info::InitAsDefaultInstance() {
}

GxDB_Grow_Up_Quest_Group_Info::GxDB_Grow_Up_Quest_Group_Info(const GxDB_Grow_Up_Quest_Group_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_Grow_Up_Quest_Group_Info::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  group_is_finished_ = 0u;
  is_take_group_reward_ = 0u;
  operate_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_Grow_Up_Quest_Group_Info::~GxDB_Grow_Up_Quest_Group_Info() {
  SharedDtor();
}

void GxDB_Grow_Up_Quest_Group_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_Grow_Up_Quest_Group_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_Grow_Up_Quest_Group_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_Grow_Up_Quest_Group_Info_descriptor_;
}

const GxDB_Grow_Up_Quest_Group_Info& GxDB_Grow_Up_Quest_Group_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GxDB_Grow_Up_Quest_Group_Info* GxDB_Grow_Up_Quest_Group_Info::default_instance_ = NULL;

GxDB_Grow_Up_Quest_Group_Info* GxDB_Grow_Up_Quest_Group_Info::New() const {
  return new GxDB_Grow_Up_Quest_Group_Info;
}

void GxDB_Grow_Up_Quest_Group_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
    group_is_finished_ = 0u;
    is_take_group_reward_ = 0u;
    operate_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_Grow_Up_Quest_Group_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group_is_finished;
        break;
      }

      // required uint32 group_is_finished = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_is_finished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_is_finished_)));
          set_has_group_is_finished();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_take_group_reward;
        break;
      }

      // optional uint32 is_take_group_reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_take_group_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_take_group_reward_)));
          set_has_is_take_group_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_operate_type;
        break;
      }

      // optional uint32 operate_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_type_)));
          set_has_operate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_Grow_Up_Quest_Group_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // required uint32 group_is_finished = 2;
  if (has_group_is_finished()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_is_finished(), output);
  }

  // optional uint32 is_take_group_reward = 3;
  if (has_is_take_group_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_take_group_reward(), output);
  }

  // optional uint32 operate_type = 4;
  if (has_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->operate_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_Grow_Up_Quest_Group_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // required uint32 group_is_finished = 2;
  if (has_group_is_finished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->group_is_finished(), target);
  }

  // optional uint32 is_take_group_reward = 3;
  if (has_is_take_group_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_take_group_reward(), target);
  }

  // optional uint32 operate_type = 4;
  if (has_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->operate_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_Grow_Up_Quest_Group_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 group_is_finished = 2;
    if (has_group_is_finished()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_is_finished());
    }

    // optional uint32 is_take_group_reward = 3;
    if (has_is_take_group_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_take_group_reward());
    }

    // optional uint32 operate_type = 4;
    if (has_operate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_Grow_Up_Quest_Group_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_Grow_Up_Quest_Group_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_Grow_Up_Quest_Group_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_Grow_Up_Quest_Group_Info::MergeFrom(const GxDB_Grow_Up_Quest_Group_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_is_finished()) {
      set_group_is_finished(from.group_is_finished());
    }
    if (from.has_is_take_group_reward()) {
      set_is_take_group_reward(from.is_take_group_reward());
    }
    if (from.has_operate_type()) {
      set_operate_type(from.operate_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_Grow_Up_Quest_Group_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_Grow_Up_Quest_Group_Info::CopyFrom(const GxDB_Grow_Up_Quest_Group_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_Grow_Up_Quest_Group_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GxDB_Grow_Up_Quest_Group_Info::Swap(GxDB_Grow_Up_Quest_Group_Info* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(group_is_finished_, other->group_is_finished_);
    std::swap(is_take_group_reward_, other->is_take_group_reward_);
    std::swap(operate_type_, other->operate_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_Grow_Up_Quest_Group_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_Grow_Up_Quest_Group_Info_descriptor_;
  metadata.reflection = GxDB_Grow_Up_Quest_Group_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_Grow_Up_Quest::kQuestInfoFieldNumber;
#endif  // !_MSC_VER

GxDB_Grow_Up_Quest::GxDB_Grow_Up_Quest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_Grow_Up_Quest::InitAsDefaultInstance() {
}

GxDB_Grow_Up_Quest::GxDB_Grow_Up_Quest(const GxDB_Grow_Up_Quest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_Grow_Up_Quest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_Grow_Up_Quest::~GxDB_Grow_Up_Quest() {
  SharedDtor();
}

void GxDB_Grow_Up_Quest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_Grow_Up_Quest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_Grow_Up_Quest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_Grow_Up_Quest_descriptor_;
}

const GxDB_Grow_Up_Quest& GxDB_Grow_Up_Quest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GxDB_Grow_Up_Quest* GxDB_Grow_Up_Quest::default_instance_ = NULL;

GxDB_Grow_Up_Quest* GxDB_Grow_Up_Quest::New() const {
  return new GxDB_Grow_Up_Quest;
}

void GxDB_Grow_Up_Quest::Clear() {
  quest_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_Grow_Up_Quest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GxDB_Grow_Up_Quest_Info quest_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quest_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quest_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_quest_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_Grow_Up_Quest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GxDB_Grow_Up_Quest_Info quest_info = 1;
  for (int i = 0; i < this->quest_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->quest_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_Grow_Up_Quest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GxDB_Grow_Up_Quest_Info quest_info = 1;
  for (int i = 0; i < this->quest_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->quest_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_Grow_Up_Quest::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GxDB_Grow_Up_Quest_Info quest_info = 1;
  total_size += 1 * this->quest_info_size();
  for (int i = 0; i < this->quest_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quest_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_Grow_Up_Quest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_Grow_Up_Quest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_Grow_Up_Quest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_Grow_Up_Quest::MergeFrom(const GxDB_Grow_Up_Quest& from) {
  GOOGLE_CHECK_NE(&from, this);
  quest_info_.MergeFrom(from.quest_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_Grow_Up_Quest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_Grow_Up_Quest::CopyFrom(const GxDB_Grow_Up_Quest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_Grow_Up_Quest::IsInitialized() const {

  for (int i = 0; i < quest_info_size(); i++) {
    if (!this->quest_info(i).IsInitialized()) return false;
  }
  return true;
}

void GxDB_Grow_Up_Quest::Swap(GxDB_Grow_Up_Quest* other) {
  if (other != this) {
    quest_info_.Swap(&other->quest_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_Grow_Up_Quest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_Grow_Up_Quest_descriptor_;
  metadata.reflection = GxDB_Grow_Up_Quest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_Grow_Up_Quest_Group::kGroupInfoFieldNumber;
#endif  // !_MSC_VER

GxDB_Grow_Up_Quest_Group::GxDB_Grow_Up_Quest_Group()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_Grow_Up_Quest_Group::InitAsDefaultInstance() {
}

GxDB_Grow_Up_Quest_Group::GxDB_Grow_Up_Quest_Group(const GxDB_Grow_Up_Quest_Group& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_Grow_Up_Quest_Group::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_Grow_Up_Quest_Group::~GxDB_Grow_Up_Quest_Group() {
  SharedDtor();
}

void GxDB_Grow_Up_Quest_Group::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_Grow_Up_Quest_Group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_Grow_Up_Quest_Group::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_Grow_Up_Quest_Group_descriptor_;
}

const GxDB_Grow_Up_Quest_Group& GxDB_Grow_Up_Quest_Group::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GxDB_Grow_Up_Quest_Group* GxDB_Grow_Up_Quest_Group::default_instance_ = NULL;

GxDB_Grow_Up_Quest_Group* GxDB_Grow_Up_Quest_Group::New() const {
  return new GxDB_Grow_Up_Quest_Group;
}

void GxDB_Grow_Up_Quest_Group::Clear() {
  group_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_Grow_Up_Quest_Group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GxDB_Grow_Up_Quest_Group_Info group_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_group_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_Grow_Up_Quest_Group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GxDB_Grow_Up_Quest_Group_Info group_info = 1;
  for (int i = 0; i < this->group_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_Grow_Up_Quest_Group::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GxDB_Grow_Up_Quest_Group_Info group_info = 1;
  for (int i = 0; i < this->group_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_Grow_Up_Quest_Group::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GxDB_Grow_Up_Quest_Group_Info group_info = 1;
  total_size += 1 * this->group_info_size();
  for (int i = 0; i < this->group_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_Grow_Up_Quest_Group::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_Grow_Up_Quest_Group* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_Grow_Up_Quest_Group*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_Grow_Up_Quest_Group::MergeFrom(const GxDB_Grow_Up_Quest_Group& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_info_.MergeFrom(from.group_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_Grow_Up_Quest_Group::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_Grow_Up_Quest_Group::CopyFrom(const GxDB_Grow_Up_Quest_Group& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_Grow_Up_Quest_Group::IsInitialized() const {

  for (int i = 0; i < group_info_size(); i++) {
    if (!this->group_info(i).IsInitialized()) return false;
  }
  return true;
}

void GxDB_Grow_Up_Quest_Group::Swap(GxDB_Grow_Up_Quest_Group* other) {
  if (other != this) {
    group_info_.Swap(&other->group_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_Grow_Up_Quest_Group::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_Grow_Up_Quest_Group_descriptor_;
  metadata.reflection = GxDB_Grow_Up_Quest_Group_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_Grow_Up_Quest_Delete::kOperateTypeFieldNumber;
#endif  // !_MSC_VER

GxDB_Grow_Up_Quest_Delete::GxDB_Grow_Up_Quest_Delete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_Grow_Up_Quest_Delete::InitAsDefaultInstance() {
}

GxDB_Grow_Up_Quest_Delete::GxDB_Grow_Up_Quest_Delete(const GxDB_Grow_Up_Quest_Delete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_Grow_Up_Quest_Delete::SharedCtor() {
  _cached_size_ = 0;
  operate_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_Grow_Up_Quest_Delete::~GxDB_Grow_Up_Quest_Delete() {
  SharedDtor();
}

void GxDB_Grow_Up_Quest_Delete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_Grow_Up_Quest_Delete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_Grow_Up_Quest_Delete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_Grow_Up_Quest_Delete_descriptor_;
}

const GxDB_Grow_Up_Quest_Delete& GxDB_Grow_Up_Quest_Delete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GxDB_Grow_Up_Quest_Delete* GxDB_Grow_Up_Quest_Delete::default_instance_ = NULL;

GxDB_Grow_Up_Quest_Delete* GxDB_Grow_Up_Quest_Delete::New() const {
  return new GxDB_Grow_Up_Quest_Delete;
}

void GxDB_Grow_Up_Quest_Delete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    operate_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_Grow_Up_Quest_Delete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 operate_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_type_)));
          set_has_operate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_Grow_Up_Quest_Delete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 operate_type = 1;
  if (has_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->operate_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_Grow_Up_Quest_Delete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 operate_type = 1;
  if (has_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->operate_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_Grow_Up_Quest_Delete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 operate_type = 1;
    if (has_operate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_Grow_Up_Quest_Delete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_Grow_Up_Quest_Delete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_Grow_Up_Quest_Delete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_Grow_Up_Quest_Delete::MergeFrom(const GxDB_Grow_Up_Quest_Delete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate_type()) {
      set_operate_type(from.operate_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_Grow_Up_Quest_Delete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_Grow_Up_Quest_Delete::CopyFrom(const GxDB_Grow_Up_Quest_Delete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_Grow_Up_Quest_Delete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GxDB_Grow_Up_Quest_Delete::Swap(GxDB_Grow_Up_Quest_Delete* other) {
  if (other != this) {
    std::swap(operate_type_, other->operate_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_Grow_Up_Quest_Delete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_Grow_Up_Quest_Delete_descriptor_;
  metadata.reflection = GxDB_Grow_Up_Quest_Delete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WannaBeStrongerBaseInfo::kGoalIdFieldNumber;
const int WannaBeStrongerBaseInfo::kCurValueFieldNumber;
const int WannaBeStrongerBaseInfo::kNeedValueFieldNumber;
#endif  // !_MSC_VER

WannaBeStrongerBaseInfo::WannaBeStrongerBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WannaBeStrongerBaseInfo::InitAsDefaultInstance() {
}

WannaBeStrongerBaseInfo::WannaBeStrongerBaseInfo(const WannaBeStrongerBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WannaBeStrongerBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  goal_id_ = 0u;
  cur_value_ = 0u;
  need_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WannaBeStrongerBaseInfo::~WannaBeStrongerBaseInfo() {
  SharedDtor();
}

void WannaBeStrongerBaseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WannaBeStrongerBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WannaBeStrongerBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WannaBeStrongerBaseInfo_descriptor_;
}

const WannaBeStrongerBaseInfo& WannaBeStrongerBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

WannaBeStrongerBaseInfo* WannaBeStrongerBaseInfo::default_instance_ = NULL;

WannaBeStrongerBaseInfo* WannaBeStrongerBaseInfo::New() const {
  return new WannaBeStrongerBaseInfo;
}

void WannaBeStrongerBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    goal_id_ = 0u;
    cur_value_ = 0u;
    need_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WannaBeStrongerBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 goal_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goal_id_)));
          set_has_goal_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_value;
        break;
      }

      // optional uint32 cur_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_value_)));
          set_has_cur_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_need_value;
        break;
      }

      // optional uint32 need_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &need_value_)));
          set_has_need_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WannaBeStrongerBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 goal_id = 1;
  if (has_goal_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->goal_id(), output);
  }

  // optional uint32 cur_value = 2;
  if (has_cur_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_value(), output);
  }

  // optional uint32 need_value = 3;
  if (has_need_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->need_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WannaBeStrongerBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 goal_id = 1;
  if (has_goal_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->goal_id(), target);
  }

  // optional uint32 cur_value = 2;
  if (has_cur_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_value(), target);
  }

  // optional uint32 need_value = 3;
  if (has_need_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->need_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WannaBeStrongerBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 goal_id = 1;
    if (has_goal_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goal_id());
    }

    // optional uint32 cur_value = 2;
    if (has_cur_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_value());
    }

    // optional uint32 need_value = 3;
    if (has_need_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->need_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WannaBeStrongerBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WannaBeStrongerBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WannaBeStrongerBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WannaBeStrongerBaseInfo::MergeFrom(const WannaBeStrongerBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goal_id()) {
      set_goal_id(from.goal_id());
    }
    if (from.has_cur_value()) {
      set_cur_value(from.cur_value());
    }
    if (from.has_need_value()) {
      set_need_value(from.need_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WannaBeStrongerBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WannaBeStrongerBaseInfo::CopyFrom(const WannaBeStrongerBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WannaBeStrongerBaseInfo::IsInitialized() const {

  return true;
}

void WannaBeStrongerBaseInfo::Swap(WannaBeStrongerBaseInfo* other) {
  if (other != this) {
    std::swap(goal_id_, other->goal_id_);
    std::swap(cur_value_, other->cur_value_);
    std::swap(need_value_, other->need_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WannaBeStrongerBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WannaBeStrongerBaseInfo_descriptor_;
  metadata.reflection = WannaBeStrongerBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WannaBeStrongerInfo::kGroupIdFieldNumber;
const int WannaBeStrongerInfo::kBaseInfoFieldNumber;
const int WannaBeStrongerInfo::kIsAchieveFieldNumber;
const int WannaBeStrongerInfo::kIsTakeRewardFieldNumber;
#endif  // !_MSC_VER

WannaBeStrongerInfo::WannaBeStrongerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WannaBeStrongerInfo::InitAsDefaultInstance() {
}

WannaBeStrongerInfo::WannaBeStrongerInfo(const WannaBeStrongerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WannaBeStrongerInfo::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  is_achieve_ = false;
  is_take_reward_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WannaBeStrongerInfo::~WannaBeStrongerInfo() {
  SharedDtor();
}

void WannaBeStrongerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WannaBeStrongerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WannaBeStrongerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WannaBeStrongerInfo_descriptor_;
}

const WannaBeStrongerInfo& WannaBeStrongerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

WannaBeStrongerInfo* WannaBeStrongerInfo::default_instance_ = NULL;

WannaBeStrongerInfo* WannaBeStrongerInfo::New() const {
  return new WannaBeStrongerInfo;
}

void WannaBeStrongerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
    is_achieve_ = false;
    is_take_reward_ = false;
  }
  base_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WannaBeStrongerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_base_info;
        break;
      }

      // repeated .pb.WannaBeStrongerBaseInfo base_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_base_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_base_info;
        if (input->ExpectTag(24)) goto parse_is_achieve;
        break;
      }

      // optional bool is_achieve = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_achieve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_achieve_)));
          set_has_is_achieve();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_take_reward;
        break;
      }

      // optional bool is_take_reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_take_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_take_reward_)));
          set_has_is_take_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WannaBeStrongerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // repeated .pb.WannaBeStrongerBaseInfo base_info = 2;
  for (int i = 0; i < this->base_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->base_info(i), output);
  }

  // optional bool is_achieve = 3;
  if (has_is_achieve()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_achieve(), output);
  }

  // optional bool is_take_reward = 4;
  if (has_is_take_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_take_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WannaBeStrongerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // repeated .pb.WannaBeStrongerBaseInfo base_info = 2;
  for (int i = 0; i < this->base_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->base_info(i), target);
  }

  // optional bool is_achieve = 3;
  if (has_is_achieve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_achieve(), target);
  }

  // optional bool is_take_reward = 4;
  if (has_is_take_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_take_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WannaBeStrongerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional bool is_achieve = 3;
    if (has_is_achieve()) {
      total_size += 1 + 1;
    }

    // optional bool is_take_reward = 4;
    if (has_is_take_reward()) {
      total_size += 1 + 1;
    }

  }
  // repeated .pb.WannaBeStrongerBaseInfo base_info = 2;
  total_size += 1 * this->base_info_size();
  for (int i = 0; i < this->base_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->base_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WannaBeStrongerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WannaBeStrongerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WannaBeStrongerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WannaBeStrongerInfo::MergeFrom(const WannaBeStrongerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  base_info_.MergeFrom(from.base_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_is_achieve()) {
      set_is_achieve(from.is_achieve());
    }
    if (from.has_is_take_reward()) {
      set_is_take_reward(from.is_take_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WannaBeStrongerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WannaBeStrongerInfo::CopyFrom(const WannaBeStrongerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WannaBeStrongerInfo::IsInitialized() const {

  return true;
}

void WannaBeStrongerInfo::Swap(WannaBeStrongerInfo* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    base_info_.Swap(&other->base_info_);
    std::swap(is_achieve_, other->is_achieve_);
    std::swap(is_take_reward_, other->is_take_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WannaBeStrongerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WannaBeStrongerInfo_descriptor_;
  metadata.reflection = WannaBeStrongerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_WannaBeStrongerReward::kGroupIdFieldNumber;
#endif  // !_MSC_VER

C2GS_WannaBeStrongerReward::C2GS_WannaBeStrongerReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_WannaBeStrongerReward::InitAsDefaultInstance() {
}

C2GS_WannaBeStrongerReward::C2GS_WannaBeStrongerReward(const C2GS_WannaBeStrongerReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_WannaBeStrongerReward::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_WannaBeStrongerReward::~C2GS_WannaBeStrongerReward() {
  SharedDtor();
}

void C2GS_WannaBeStrongerReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_WannaBeStrongerReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_WannaBeStrongerReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_WannaBeStrongerReward_descriptor_;
}

const C2GS_WannaBeStrongerReward& C2GS_WannaBeStrongerReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

C2GS_WannaBeStrongerReward* C2GS_WannaBeStrongerReward::default_instance_ = NULL;

C2GS_WannaBeStrongerReward* C2GS_WannaBeStrongerReward::New() const {
  return new C2GS_WannaBeStrongerReward;
}

void C2GS_WannaBeStrongerReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_WannaBeStrongerReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_WannaBeStrongerReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_WannaBeStrongerReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_WannaBeStrongerReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_WannaBeStrongerReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_WannaBeStrongerReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_WannaBeStrongerReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_WannaBeStrongerReward::MergeFrom(const C2GS_WannaBeStrongerReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_WannaBeStrongerReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_WannaBeStrongerReward::CopyFrom(const C2GS_WannaBeStrongerReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_WannaBeStrongerReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_WannaBeStrongerReward::Swap(C2GS_WannaBeStrongerReward* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_WannaBeStrongerReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_WannaBeStrongerReward_descriptor_;
  metadata.reflection = C2GS_WannaBeStrongerReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_WannaBeStrongerRewardRes::kRewardsFieldNumber;
#endif  // !_MSC_VER

GS2C_WannaBeStrongerRewardRes::GS2C_WannaBeStrongerRewardRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_WannaBeStrongerRewardRes::InitAsDefaultInstance() {
}

GS2C_WannaBeStrongerRewardRes::GS2C_WannaBeStrongerRewardRes(const GS2C_WannaBeStrongerRewardRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_WannaBeStrongerRewardRes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_WannaBeStrongerRewardRes::~GS2C_WannaBeStrongerRewardRes() {
  SharedDtor();
}

void GS2C_WannaBeStrongerRewardRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_WannaBeStrongerRewardRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_WannaBeStrongerRewardRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_WannaBeStrongerRewardRes_descriptor_;
}

const GS2C_WannaBeStrongerRewardRes& GS2C_WannaBeStrongerRewardRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GS2C_WannaBeStrongerRewardRes* GS2C_WannaBeStrongerRewardRes::default_instance_ = NULL;

GS2C_WannaBeStrongerRewardRes* GS2C_WannaBeStrongerRewardRes::New() const {
  return new GS2C_WannaBeStrongerRewardRes;
}

void GS2C_WannaBeStrongerRewardRes::Clear() {
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_WannaBeStrongerRewardRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.StReward rewards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rewards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_WannaBeStrongerRewardRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.StReward rewards = 1;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_WannaBeStrongerRewardRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.StReward rewards = 1;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_WannaBeStrongerRewardRes::ByteSize() const {
  int total_size = 0;

  // repeated .pb.StReward rewards = 1;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_WannaBeStrongerRewardRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_WannaBeStrongerRewardRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_WannaBeStrongerRewardRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_WannaBeStrongerRewardRes::MergeFrom(const GS2C_WannaBeStrongerRewardRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_WannaBeStrongerRewardRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_WannaBeStrongerRewardRes::CopyFrom(const GS2C_WannaBeStrongerRewardRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_WannaBeStrongerRewardRes::IsInitialized() const {

  for (int i = 0; i < rewards_size(); i++) {
    if (!this->rewards(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_WannaBeStrongerRewardRes::Swap(GS2C_WannaBeStrongerRewardRes* other) {
  if (other != this) {
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_WannaBeStrongerRewardRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_WannaBeStrongerRewardRes_descriptor_;
  metadata.reflection = GS2C_WannaBeStrongerRewardRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_WannaBeStrongerUpdate::kInfoFieldNumber;
#endif  // !_MSC_VER

GS2C_WannaBeStrongerUpdate::GS2C_WannaBeStrongerUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_WannaBeStrongerUpdate::InitAsDefaultInstance() {
  info_ = const_cast< ::pb::WannaBeStrongerInfo*>(&::pb::WannaBeStrongerInfo::default_instance());
}

GS2C_WannaBeStrongerUpdate::GS2C_WannaBeStrongerUpdate(const GS2C_WannaBeStrongerUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_WannaBeStrongerUpdate::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_WannaBeStrongerUpdate::~GS2C_WannaBeStrongerUpdate() {
  SharedDtor();
}

void GS2C_WannaBeStrongerUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void GS2C_WannaBeStrongerUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_WannaBeStrongerUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_WannaBeStrongerUpdate_descriptor_;
}

const GS2C_WannaBeStrongerUpdate& GS2C_WannaBeStrongerUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GS2C_WannaBeStrongerUpdate* GS2C_WannaBeStrongerUpdate::default_instance_ = NULL;

GS2C_WannaBeStrongerUpdate* GS2C_WannaBeStrongerUpdate::New() const {
  return new GS2C_WannaBeStrongerUpdate;
}

void GS2C_WannaBeStrongerUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::pb::WannaBeStrongerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_WannaBeStrongerUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.WannaBeStrongerInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_WannaBeStrongerUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.WannaBeStrongerInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_WannaBeStrongerUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.WannaBeStrongerInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_WannaBeStrongerUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.WannaBeStrongerInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_WannaBeStrongerUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_WannaBeStrongerUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_WannaBeStrongerUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_WannaBeStrongerUpdate::MergeFrom(const GS2C_WannaBeStrongerUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::pb::WannaBeStrongerInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_WannaBeStrongerUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_WannaBeStrongerUpdate::CopyFrom(const GS2C_WannaBeStrongerUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_WannaBeStrongerUpdate::IsInitialized() const {

  return true;
}

void GS2C_WannaBeStrongerUpdate::Swap(GS2C_WannaBeStrongerUpdate* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_WannaBeStrongerUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_WannaBeStrongerUpdate_descriptor_;
  metadata.reflection = GS2C_WannaBeStrongerUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_WannaBeStrongerAllInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

GS2C_WannaBeStrongerAllInfo::GS2C_WannaBeStrongerAllInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_WannaBeStrongerAllInfo::InitAsDefaultInstance() {
}

GS2C_WannaBeStrongerAllInfo::GS2C_WannaBeStrongerAllInfo(const GS2C_WannaBeStrongerAllInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_WannaBeStrongerAllInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_WannaBeStrongerAllInfo::~GS2C_WannaBeStrongerAllInfo() {
  SharedDtor();
}

void GS2C_WannaBeStrongerAllInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_WannaBeStrongerAllInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_WannaBeStrongerAllInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_WannaBeStrongerAllInfo_descriptor_;
}

const GS2C_WannaBeStrongerAllInfo& GS2C_WannaBeStrongerAllInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GS2C_WannaBeStrongerAllInfo* GS2C_WannaBeStrongerAllInfo::default_instance_ = NULL;

GS2C_WannaBeStrongerAllInfo* GS2C_WannaBeStrongerAllInfo::New() const {
  return new GS2C_WannaBeStrongerAllInfo;
}

void GS2C_WannaBeStrongerAllInfo::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_WannaBeStrongerAllInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.WannaBeStrongerInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_WannaBeStrongerAllInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.WannaBeStrongerInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_WannaBeStrongerAllInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.WannaBeStrongerInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_WannaBeStrongerAllInfo::ByteSize() const {
  int total_size = 0;

  // repeated .pb.WannaBeStrongerInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_WannaBeStrongerAllInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_WannaBeStrongerAllInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_WannaBeStrongerAllInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_WannaBeStrongerAllInfo::MergeFrom(const GS2C_WannaBeStrongerAllInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_WannaBeStrongerAllInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_WannaBeStrongerAllInfo::CopyFrom(const GS2C_WannaBeStrongerAllInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_WannaBeStrongerAllInfo::IsInitialized() const {

  return true;
}

void GS2C_WannaBeStrongerAllInfo::Swap(GS2C_WannaBeStrongerAllInfo* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_WannaBeStrongerAllInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_WannaBeStrongerAllInfo_descriptor_;
  metadata.reflection = GS2C_WannaBeStrongerAllInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_WannaBeStrongerInfo::kGroupIdFieldNumber;
const int GxDB_WannaBeStrongerInfo::kBaseInfoFieldNumber;
const int GxDB_WannaBeStrongerInfo::kIsAchieveFieldNumber;
const int GxDB_WannaBeStrongerInfo::kIsTakeRewardFieldNumber;
#endif  // !_MSC_VER

GxDB_WannaBeStrongerInfo::GxDB_WannaBeStrongerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_WannaBeStrongerInfo::InitAsDefaultInstance() {
}

GxDB_WannaBeStrongerInfo::GxDB_WannaBeStrongerInfo(const GxDB_WannaBeStrongerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_WannaBeStrongerInfo::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  is_achieve_ = false;
  is_take_reward_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_WannaBeStrongerInfo::~GxDB_WannaBeStrongerInfo() {
  SharedDtor();
}

void GxDB_WannaBeStrongerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_WannaBeStrongerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_WannaBeStrongerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_WannaBeStrongerInfo_descriptor_;
}

const GxDB_WannaBeStrongerInfo& GxDB_WannaBeStrongerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GxDB_WannaBeStrongerInfo* GxDB_WannaBeStrongerInfo::default_instance_ = NULL;

GxDB_WannaBeStrongerInfo* GxDB_WannaBeStrongerInfo::New() const {
  return new GxDB_WannaBeStrongerInfo;
}

void GxDB_WannaBeStrongerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
    is_achieve_ = false;
    is_take_reward_ = false;
  }
  base_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_WannaBeStrongerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_base_info;
        break;
      }

      // repeated .pb.WannaBeStrongerBaseInfo base_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_base_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_base_info;
        if (input->ExpectTag(24)) goto parse_is_achieve;
        break;
      }

      // optional bool is_achieve = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_achieve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_achieve_)));
          set_has_is_achieve();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_take_reward;
        break;
      }

      // optional bool is_take_reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_take_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_take_reward_)));
          set_has_is_take_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_WannaBeStrongerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // repeated .pb.WannaBeStrongerBaseInfo base_info = 2;
  for (int i = 0; i < this->base_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->base_info(i), output);
  }

  // optional bool is_achieve = 3;
  if (has_is_achieve()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_achieve(), output);
  }

  // optional bool is_take_reward = 4;
  if (has_is_take_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_take_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_WannaBeStrongerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // repeated .pb.WannaBeStrongerBaseInfo base_info = 2;
  for (int i = 0; i < this->base_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->base_info(i), target);
  }

  // optional bool is_achieve = 3;
  if (has_is_achieve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_achieve(), target);
  }

  // optional bool is_take_reward = 4;
  if (has_is_take_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_take_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_WannaBeStrongerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional bool is_achieve = 3;
    if (has_is_achieve()) {
      total_size += 1 + 1;
    }

    // optional bool is_take_reward = 4;
    if (has_is_take_reward()) {
      total_size += 1 + 1;
    }

  }
  // repeated .pb.WannaBeStrongerBaseInfo base_info = 2;
  total_size += 1 * this->base_info_size();
  for (int i = 0; i < this->base_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->base_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_WannaBeStrongerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_WannaBeStrongerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_WannaBeStrongerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_WannaBeStrongerInfo::MergeFrom(const GxDB_WannaBeStrongerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  base_info_.MergeFrom(from.base_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_is_achieve()) {
      set_is_achieve(from.is_achieve());
    }
    if (from.has_is_take_reward()) {
      set_is_take_reward(from.is_take_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_WannaBeStrongerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_WannaBeStrongerInfo::CopyFrom(const GxDB_WannaBeStrongerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_WannaBeStrongerInfo::IsInitialized() const {

  return true;
}

void GxDB_WannaBeStrongerInfo::Swap(GxDB_WannaBeStrongerInfo* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    base_info_.Swap(&other->base_info_);
    std::swap(is_achieve_, other->is_achieve_);
    std::swap(is_take_reward_, other->is_take_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_WannaBeStrongerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_WannaBeStrongerInfo_descriptor_;
  metadata.reflection = GxDB_WannaBeStrongerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_WannaBeStrongerInfoAllInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

GxDB_WannaBeStrongerInfoAllInfo::GxDB_WannaBeStrongerInfoAllInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_WannaBeStrongerInfoAllInfo::InitAsDefaultInstance() {
}

GxDB_WannaBeStrongerInfoAllInfo::GxDB_WannaBeStrongerInfoAllInfo(const GxDB_WannaBeStrongerInfoAllInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_WannaBeStrongerInfoAllInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_WannaBeStrongerInfoAllInfo::~GxDB_WannaBeStrongerInfoAllInfo() {
  SharedDtor();
}

void GxDB_WannaBeStrongerInfoAllInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_WannaBeStrongerInfoAllInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_WannaBeStrongerInfoAllInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_WannaBeStrongerInfoAllInfo_descriptor_;
}

const GxDB_WannaBeStrongerInfoAllInfo& GxDB_WannaBeStrongerInfoAllInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GxDB_WannaBeStrongerInfoAllInfo* GxDB_WannaBeStrongerInfoAllInfo::default_instance_ = NULL;

GxDB_WannaBeStrongerInfoAllInfo* GxDB_WannaBeStrongerInfoAllInfo::New() const {
  return new GxDB_WannaBeStrongerInfoAllInfo;
}

void GxDB_WannaBeStrongerInfoAllInfo::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_WannaBeStrongerInfoAllInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GxDB_WannaBeStrongerInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_WannaBeStrongerInfoAllInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GxDB_WannaBeStrongerInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_WannaBeStrongerInfoAllInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GxDB_WannaBeStrongerInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_WannaBeStrongerInfoAllInfo::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GxDB_WannaBeStrongerInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_WannaBeStrongerInfoAllInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_WannaBeStrongerInfoAllInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_WannaBeStrongerInfoAllInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_WannaBeStrongerInfoAllInfo::MergeFrom(const GxDB_WannaBeStrongerInfoAllInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_WannaBeStrongerInfoAllInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_WannaBeStrongerInfoAllInfo::CopyFrom(const GxDB_WannaBeStrongerInfoAllInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_WannaBeStrongerInfoAllInfo::IsInitialized() const {

  return true;
}

void GxDB_WannaBeStrongerInfoAllInfo::Swap(GxDB_WannaBeStrongerInfoAllInfo* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_WannaBeStrongerInfoAllInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_WannaBeStrongerInfoAllInfo_descriptor_;
  metadata.reflection = GxDB_WannaBeStrongerInfoAllInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Sign_Res::kRetFieldNumber;
const int GS2C_Sign_Res::kRewardsFieldNumber;
#endif  // !_MSC_VER

GS2C_Sign_Res::GS2C_Sign_Res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Sign_Res::InitAsDefaultInstance() {
}

GS2C_Sign_Res::GS2C_Sign_Res(const GS2C_Sign_Res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Sign_Res::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Sign_Res::~GS2C_Sign_Res() {
  SharedDtor();
}

void GS2C_Sign_Res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Sign_Res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Sign_Res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Sign_Res_descriptor_;
}

const GS2C_Sign_Res& GS2C_Sign_Res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GS2C_Sign_Res* GS2C_Sign_Res::default_instance_ = NULL;

GS2C_Sign_Res* GS2C_Sign_Res::New() const {
  return new GS2C_Sign_Res;
}

void GS2C_Sign_Res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 1;
  }
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Sign_Res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.SignResult ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::SignResult_IsValid(value)) {
            set_ret(static_cast< ::pb::SignResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rewards;
        break;
      }

      // repeated .pb.StReward rewards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rewards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Sign_Res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.SignResult ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // repeated .pb.StReward rewards = 2;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Sign_Res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.SignResult ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // repeated .pb.StReward rewards = 2;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Sign_Res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.SignResult ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  // repeated .pb.StReward rewards = 2;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Sign_Res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Sign_Res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Sign_Res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Sign_Res::MergeFrom(const GS2C_Sign_Res& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Sign_Res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Sign_Res::CopyFrom(const GS2C_Sign_Res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Sign_Res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < rewards_size(); i++) {
    if (!this->rewards(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Sign_Res::Swap(GS2C_Sign_Res* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Sign_Res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Sign_Res_descriptor_;
  metadata.reflection = GS2C_Sign_Res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Take_Extra_Reward::kDayFieldNumber;
#endif  // !_MSC_VER

C2GS_Take_Extra_Reward::C2GS_Take_Extra_Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Take_Extra_Reward::InitAsDefaultInstance() {
}

C2GS_Take_Extra_Reward::C2GS_Take_Extra_Reward(const C2GS_Take_Extra_Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Take_Extra_Reward::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Take_Extra_Reward::~C2GS_Take_Extra_Reward() {
  SharedDtor();
}

void C2GS_Take_Extra_Reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Take_Extra_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Take_Extra_Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Take_Extra_Reward_descriptor_;
}

const C2GS_Take_Extra_Reward& C2GS_Take_Extra_Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

C2GS_Take_Extra_Reward* C2GS_Take_Extra_Reward::default_instance_ = NULL;

C2GS_Take_Extra_Reward* C2GS_Take_Extra_Reward::New() const {
  return new C2GS_Take_Extra_Reward;
}

void C2GS_Take_Extra_Reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    day_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Take_Extra_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Take_Extra_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Take_Extra_Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->day(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Take_Extra_Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Take_Extra_Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Take_Extra_Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Take_Extra_Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Take_Extra_Reward::MergeFrom(const C2GS_Take_Extra_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Take_Extra_Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Take_Extra_Reward::CopyFrom(const C2GS_Take_Extra_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Take_Extra_Reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Take_Extra_Reward::Swap(C2GS_Take_Extra_Reward* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Take_Extra_Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Take_Extra_Reward_descriptor_;
  metadata.reflection = C2GS_Take_Extra_Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Take_Extra_Reward_res::kRetFieldNumber;
const int GS2C_Take_Extra_Reward_res::kRewardsFieldNumber;
#endif  // !_MSC_VER

GS2C_Take_Extra_Reward_res::GS2C_Take_Extra_Reward_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Take_Extra_Reward_res::InitAsDefaultInstance() {
}

GS2C_Take_Extra_Reward_res::GS2C_Take_Extra_Reward_res(const GS2C_Take_Extra_Reward_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Take_Extra_Reward_res::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Take_Extra_Reward_res::~GS2C_Take_Extra_Reward_res() {
  SharedDtor();
}

void GS2C_Take_Extra_Reward_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Take_Extra_Reward_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Take_Extra_Reward_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Take_Extra_Reward_res_descriptor_;
}

const GS2C_Take_Extra_Reward_res& GS2C_Take_Extra_Reward_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GS2C_Take_Extra_Reward_res* GS2C_Take_Extra_Reward_res::default_instance_ = NULL;

GS2C_Take_Extra_Reward_res* GS2C_Take_Extra_Reward_res::New() const {
  return new GS2C_Take_Extra_Reward_res;
}

void GS2C_Take_Extra_Reward_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 1;
  }
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Take_Extra_Reward_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.ExtraRewardResult ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ExtraRewardResult_IsValid(value)) {
            set_ret(static_cast< ::pb::ExtraRewardResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rewards;
        break;
      }

      // repeated .pb.StReward rewards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rewards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Take_Extra_Reward_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.ExtraRewardResult ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // repeated .pb.StReward rewards = 2;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Take_Extra_Reward_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.ExtraRewardResult ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // repeated .pb.StReward rewards = 2;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Take_Extra_Reward_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.ExtraRewardResult ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  // repeated .pb.StReward rewards = 2;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Take_Extra_Reward_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Take_Extra_Reward_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Take_Extra_Reward_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Take_Extra_Reward_res::MergeFrom(const GS2C_Take_Extra_Reward_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Take_Extra_Reward_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Take_Extra_Reward_res::CopyFrom(const GS2C_Take_Extra_Reward_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Take_Extra_Reward_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < rewards_size(); i++) {
    if (!this->rewards(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Take_Extra_Reward_res::Swap(GS2C_Take_Extra_Reward_res* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Take_Extra_Reward_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Take_Extra_Reward_res_descriptor_;
  metadata.reflection = GS2C_Take_Extra_Reward_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Update_date::kDayFieldNumber;
const int GS2C_Update_date::kIsSignedFieldNumber;
#endif  // !_MSC_VER

GS2C_Update_date::GS2C_Update_date()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Update_date::InitAsDefaultInstance() {
}

GS2C_Update_date::GS2C_Update_date(const GS2C_Update_date& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Update_date::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  is_signed_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Update_date::~GS2C_Update_date() {
  SharedDtor();
}

void GS2C_Update_date::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Update_date::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Update_date::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Update_date_descriptor_;
}

const GS2C_Update_date& GS2C_Update_date::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GS2C_Update_date* GS2C_Update_date::default_instance_ = NULL;

GS2C_Update_date* GS2C_Update_date::New() const {
  return new GS2C_Update_date;
}

void GS2C_Update_date::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    day_ = 0u;
    is_signed_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Update_date::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_signed;
        break;
      }

      // required uint32 is_signed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_signed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_signed_)));
          set_has_is_signed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Update_date::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day(), output);
  }

  // required uint32 is_signed = 2;
  if (has_is_signed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->is_signed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Update_date::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->day(), target);
  }

  // required uint32 is_signed = 2;
  if (has_is_signed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->is_signed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Update_date::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

    // required uint32 is_signed = 2;
    if (has_is_signed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_signed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Update_date::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Update_date* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Update_date*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Update_date::MergeFrom(const GS2C_Update_date& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_is_signed()) {
      set_is_signed(from.is_signed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Update_date::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Update_date::CopyFrom(const GS2C_Update_date& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Update_date::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GS2C_Update_date::Swap(GS2C_Update_date* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(is_signed_, other->is_signed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Update_date::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Update_date_descriptor_;
  metadata.reflection = GS2C_Update_date_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_Sign_info::kDaythFieldNumber;
const int GxDB_Sign_info::kIsSignedFieldNumber;
const int GxDB_Sign_info::kTypeFieldNumber;
#endif  // !_MSC_VER

GxDB_Sign_info::GxDB_Sign_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_Sign_info::InitAsDefaultInstance() {
}

GxDB_Sign_info::GxDB_Sign_info(const GxDB_Sign_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_Sign_info::SharedCtor() {
  _cached_size_ = 0;
  dayth_ = 0u;
  issigned_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_Sign_info::~GxDB_Sign_info() {
  SharedDtor();
}

void GxDB_Sign_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_Sign_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_Sign_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_Sign_info_descriptor_;
}

const GxDB_Sign_info& GxDB_Sign_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GxDB_Sign_info* GxDB_Sign_info::default_instance_ = NULL;

GxDB_Sign_info* GxDB_Sign_info::New() const {
  return new GxDB_Sign_info;
}

void GxDB_Sign_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dayth_ = 0u;
    issigned_ = 0u;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_Sign_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dayth = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dayth_)));
          set_has_dayth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IsSigned;
        break;
      }

      // required uint32 IsSigned = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsSigned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &issigned_)));
          set_has_issigned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_Sign_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 dayth = 1;
  if (has_dayth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dayth(), output);
  }

  // required uint32 IsSigned = 2;
  if (has_issigned()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->issigned(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_Sign_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 dayth = 1;
  if (has_dayth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dayth(), target);
  }

  // required uint32 IsSigned = 2;
  if (has_issigned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->issigned(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_Sign_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dayth = 1;
    if (has_dayth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dayth());
    }

    // required uint32 IsSigned = 2;
    if (has_issigned()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->issigned());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_Sign_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_Sign_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_Sign_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_Sign_info::MergeFrom(const GxDB_Sign_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dayth()) {
      set_dayth(from.dayth());
    }
    if (from.has_issigned()) {
      set_issigned(from.issigned());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_Sign_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_Sign_info::CopyFrom(const GxDB_Sign_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_Sign_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GxDB_Sign_info::Swap(GxDB_Sign_info* other) {
  if (other != this) {
    std::swap(dayth_, other->dayth_);
    std::swap(issigned_, other->issigned_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_Sign_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_Sign_info_descriptor_;
  metadata.reflection = GxDB_Sign_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_Sign_Up::kInfoFieldNumber;
#endif  // !_MSC_VER

GxDB_Sign_Up::GxDB_Sign_Up()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_Sign_Up::InitAsDefaultInstance() {
}

GxDB_Sign_Up::GxDB_Sign_Up(const GxDB_Sign_Up& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_Sign_Up::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_Sign_Up::~GxDB_Sign_Up() {
  SharedDtor();
}

void GxDB_Sign_Up::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_Sign_Up::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_Sign_Up::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_Sign_Up_descriptor_;
}

const GxDB_Sign_Up& GxDB_Sign_Up::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GxDB_Sign_Up* GxDB_Sign_Up::default_instance_ = NULL;

GxDB_Sign_Up* GxDB_Sign_Up::New() const {
  return new GxDB_Sign_Up;
}

void GxDB_Sign_Up::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_Sign_Up::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GxDB_Sign_info info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_Sign_Up::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GxDB_Sign_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_Sign_Up::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GxDB_Sign_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_Sign_Up::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GxDB_Sign_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_Sign_Up::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_Sign_Up* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_Sign_Up*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_Sign_Up::MergeFrom(const GxDB_Sign_Up& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_Sign_Up::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_Sign_Up::CopyFrom(const GxDB_Sign_Up& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_Sign_Up::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void GxDB_Sign_Up::Swap(GxDB_Sign_Up* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_Sign_Up::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_Sign_Up_descriptor_;
  metadata.reflection = GxDB_Sign_Up_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pass_stage_reward_info::kIdFieldNumber;
const int pass_stage_reward_info::kIsTakeRewardFieldNumber;
const int pass_stage_reward_info::kStageLevelFieldNumber;
const int pass_stage_reward_info::kStageIsPassedFieldNumber;
const int pass_stage_reward_info::kOperateTypeFieldNumber;
#endif  // !_MSC_VER

pass_stage_reward_info::pass_stage_reward_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pass_stage_reward_info::InitAsDefaultInstance() {
}

pass_stage_reward_info::pass_stage_reward_info(const pass_stage_reward_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pass_stage_reward_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  is_take_reward_ = 0u;
  stage_level_ = 0u;
  stage_is_passed_ = 0u;
  operate_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pass_stage_reward_info::~pass_stage_reward_info() {
  SharedDtor();
}

void pass_stage_reward_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pass_stage_reward_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pass_stage_reward_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pass_stage_reward_info_descriptor_;
}

const pass_stage_reward_info& pass_stage_reward_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

pass_stage_reward_info* pass_stage_reward_info::default_instance_ = NULL;

pass_stage_reward_info* pass_stage_reward_info::New() const {
  return new pass_stage_reward_info;
}

void pass_stage_reward_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    is_take_reward_ = 0u;
    stage_level_ = 0u;
    stage_is_passed_ = 0u;
    operate_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pass_stage_reward_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_take_reward;
        break;
      }

      // required uint32 is_take_reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_take_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_take_reward_)));
          set_has_is_take_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stage_level;
        break;
      }

      // required uint32 stage_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_level_)));
          set_has_stage_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stage_is_passed;
        break;
      }

      // required uint32 stage_is_passed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_is_passed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_is_passed_)));
          set_has_stage_is_passed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_operate_type;
        break;
      }

      // optional uint32 operate_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_type_)));
          set_has_operate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pass_stage_reward_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 is_take_reward = 2;
  if (has_is_take_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->is_take_reward(), output);
  }

  // required uint32 stage_level = 3;
  if (has_stage_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stage_level(), output);
  }

  // required uint32 stage_is_passed = 4;
  if (has_stage_is_passed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->stage_is_passed(), output);
  }

  // optional uint32 operate_type = 5;
  if (has_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->operate_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pass_stage_reward_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 is_take_reward = 2;
  if (has_is_take_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->is_take_reward(), target);
  }

  // required uint32 stage_level = 3;
  if (has_stage_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stage_level(), target);
  }

  // required uint32 stage_is_passed = 4;
  if (has_stage_is_passed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->stage_is_passed(), target);
  }

  // optional uint32 operate_type = 5;
  if (has_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->operate_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pass_stage_reward_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 is_take_reward = 2;
    if (has_is_take_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_take_reward());
    }

    // required uint32 stage_level = 3;
    if (has_stage_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage_level());
    }

    // required uint32 stage_is_passed = 4;
    if (has_stage_is_passed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage_is_passed());
    }

    // optional uint32 operate_type = 5;
    if (has_operate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pass_stage_reward_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pass_stage_reward_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pass_stage_reward_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pass_stage_reward_info::MergeFrom(const pass_stage_reward_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_is_take_reward()) {
      set_is_take_reward(from.is_take_reward());
    }
    if (from.has_stage_level()) {
      set_stage_level(from.stage_level());
    }
    if (from.has_stage_is_passed()) {
      set_stage_is_passed(from.stage_is_passed());
    }
    if (from.has_operate_type()) {
      set_operate_type(from.operate_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pass_stage_reward_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pass_stage_reward_info::CopyFrom(const pass_stage_reward_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pass_stage_reward_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void pass_stage_reward_info::Swap(pass_stage_reward_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(is_take_reward_, other->is_take_reward_);
    std::swap(stage_level_, other->stage_level_);
    std::swap(stage_is_passed_, other->stage_is_passed_);
    std::swap(operate_type_, other->operate_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pass_stage_reward_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pass_stage_reward_info_descriptor_;
  metadata.reflection = pass_stage_reward_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Pass_Stage_Reward_All_Info::kPassStageInfoFieldNumber;
#endif  // !_MSC_VER

GS2C_Pass_Stage_Reward_All_Info::GS2C_Pass_Stage_Reward_All_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Pass_Stage_Reward_All_Info::InitAsDefaultInstance() {
}

GS2C_Pass_Stage_Reward_All_Info::GS2C_Pass_Stage_Reward_All_Info(const GS2C_Pass_Stage_Reward_All_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Pass_Stage_Reward_All_Info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Pass_Stage_Reward_All_Info::~GS2C_Pass_Stage_Reward_All_Info() {
  SharedDtor();
}

void GS2C_Pass_Stage_Reward_All_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Pass_Stage_Reward_All_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Pass_Stage_Reward_All_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Pass_Stage_Reward_All_Info_descriptor_;
}

const GS2C_Pass_Stage_Reward_All_Info& GS2C_Pass_Stage_Reward_All_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GS2C_Pass_Stage_Reward_All_Info* GS2C_Pass_Stage_Reward_All_Info::default_instance_ = NULL;

GS2C_Pass_Stage_Reward_All_Info* GS2C_Pass_Stage_Reward_All_Info::New() const {
  return new GS2C_Pass_Stage_Reward_All_Info;
}

void GS2C_Pass_Stage_Reward_All_Info::Clear() {
  pass_stage_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Pass_Stage_Reward_All_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.pass_stage_reward_info pass_stage_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pass_stage_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pass_stage_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pass_stage_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Pass_Stage_Reward_All_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.pass_stage_reward_info pass_stage_info = 1;
  for (int i = 0; i < this->pass_stage_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pass_stage_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Pass_Stage_Reward_All_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.pass_stage_reward_info pass_stage_info = 1;
  for (int i = 0; i < this->pass_stage_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pass_stage_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Pass_Stage_Reward_All_Info::ByteSize() const {
  int total_size = 0;

  // repeated .pb.pass_stage_reward_info pass_stage_info = 1;
  total_size += 1 * this->pass_stage_info_size();
  for (int i = 0; i < this->pass_stage_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pass_stage_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Pass_Stage_Reward_All_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Pass_Stage_Reward_All_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Pass_Stage_Reward_All_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Pass_Stage_Reward_All_Info::MergeFrom(const GS2C_Pass_Stage_Reward_All_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  pass_stage_info_.MergeFrom(from.pass_stage_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Pass_Stage_Reward_All_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Pass_Stage_Reward_All_Info::CopyFrom(const GS2C_Pass_Stage_Reward_All_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Pass_Stage_Reward_All_Info::IsInitialized() const {

  for (int i = 0; i < pass_stage_info_size(); i++) {
    if (!this->pass_stage_info(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Pass_Stage_Reward_All_Info::Swap(GS2C_Pass_Stage_Reward_All_Info* other) {
  if (other != this) {
    pass_stage_info_.Swap(&other->pass_stage_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Pass_Stage_Reward_All_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Pass_Stage_Reward_All_Info_descriptor_;
  metadata.reflection = GS2C_Pass_Stage_Reward_All_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Pass_Stage_Reward::kIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Pass_Stage_Reward::C2GS_Pass_Stage_Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Pass_Stage_Reward::InitAsDefaultInstance() {
}

C2GS_Pass_Stage_Reward::C2GS_Pass_Stage_Reward(const C2GS_Pass_Stage_Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Pass_Stage_Reward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Pass_Stage_Reward::~C2GS_Pass_Stage_Reward() {
  SharedDtor();
}

void C2GS_Pass_Stage_Reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Pass_Stage_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Pass_Stage_Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Pass_Stage_Reward_descriptor_;
}

const C2GS_Pass_Stage_Reward& C2GS_Pass_Stage_Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

C2GS_Pass_Stage_Reward* C2GS_Pass_Stage_Reward::default_instance_ = NULL;

C2GS_Pass_Stage_Reward* C2GS_Pass_Stage_Reward::New() const {
  return new C2GS_Pass_Stage_Reward;
}

void C2GS_Pass_Stage_Reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Pass_Stage_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Pass_Stage_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Pass_Stage_Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Pass_Stage_Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Pass_Stage_Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Pass_Stage_Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Pass_Stage_Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Pass_Stage_Reward::MergeFrom(const C2GS_Pass_Stage_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Pass_Stage_Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Pass_Stage_Reward::CopyFrom(const C2GS_Pass_Stage_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Pass_Stage_Reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Pass_Stage_Reward::Swap(C2GS_Pass_Stage_Reward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Pass_Stage_Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Pass_Stage_Reward_descriptor_;
  metadata.reflection = C2GS_Pass_Stage_Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Pass_Stage_Reward_Res::kRewardsFieldNumber;
const int GS2C_Pass_Stage_Reward_Res::kRetFieldNumber;
const int GS2C_Pass_Stage_Reward_Res::kIdFieldNumber;
#endif  // !_MSC_VER

GS2C_Pass_Stage_Reward_Res::GS2C_Pass_Stage_Reward_Res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Pass_Stage_Reward_Res::InitAsDefaultInstance() {
  rewards_ = const_cast< ::pb::StReward*>(&::pb::StReward::default_instance());
}

GS2C_Pass_Stage_Reward_Res::GS2C_Pass_Stage_Reward_Res(const GS2C_Pass_Stage_Reward_Res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Pass_Stage_Reward_Res::SharedCtor() {
  _cached_size_ = 0;
  rewards_ = NULL;
  ret_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Pass_Stage_Reward_Res::~GS2C_Pass_Stage_Reward_Res() {
  SharedDtor();
}

void GS2C_Pass_Stage_Reward_Res::SharedDtor() {
  if (this != default_instance_) {
    delete rewards_;
  }
}

void GS2C_Pass_Stage_Reward_Res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Pass_Stage_Reward_Res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Pass_Stage_Reward_Res_descriptor_;
}

const GS2C_Pass_Stage_Reward_Res& GS2C_Pass_Stage_Reward_Res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GS2C_Pass_Stage_Reward_Res* GS2C_Pass_Stage_Reward_Res::default_instance_ = NULL;

GS2C_Pass_Stage_Reward_Res* GS2C_Pass_Stage_Reward_Res::New() const {
  return new GS2C_Pass_Stage_Reward_Res;
}

void GS2C_Pass_Stage_Reward_Res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rewards()) {
      if (rewards_ != NULL) rewards_->::pb::StReward::Clear();
    }
    ret_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Pass_Stage_Reward_Res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.StReward rewards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Pass_Stage_Reward_Res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.StReward rewards = 1;
  if (has_rewards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewards(), output);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Pass_Stage_Reward_Res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.StReward rewards = 1;
  if (has_rewards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewards(), target);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Pass_Stage_Reward_Res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.StReward rewards = 1;
    if (has_rewards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewards());
    }

    // required uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Pass_Stage_Reward_Res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Pass_Stage_Reward_Res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Pass_Stage_Reward_Res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Pass_Stage_Reward_Res::MergeFrom(const GS2C_Pass_Stage_Reward_Res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewards()) {
      mutable_rewards()->::pb::StReward::MergeFrom(from.rewards());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Pass_Stage_Reward_Res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Pass_Stage_Reward_Res::CopyFrom(const GS2C_Pass_Stage_Reward_Res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Pass_Stage_Reward_Res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_rewards()) {
    if (!this->rewards().IsInitialized()) return false;
  }
  return true;
}

void GS2C_Pass_Stage_Reward_Res::Swap(GS2C_Pass_Stage_Reward_Res* other) {
  if (other != this) {
    std::swap(rewards_, other->rewards_);
    std::swap(ret_, other->ret_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Pass_Stage_Reward_Res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Pass_Stage_Reward_Res_descriptor_;
  metadata.reflection = GS2C_Pass_Stage_Reward_Res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_Pass_Stage_Reward::kPassStageInfoFieldNumber;
#endif  // !_MSC_VER

GxDB_Pass_Stage_Reward::GxDB_Pass_Stage_Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_Pass_Stage_Reward::InitAsDefaultInstance() {
}

GxDB_Pass_Stage_Reward::GxDB_Pass_Stage_Reward(const GxDB_Pass_Stage_Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_Pass_Stage_Reward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_Pass_Stage_Reward::~GxDB_Pass_Stage_Reward() {
  SharedDtor();
}

void GxDB_Pass_Stage_Reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_Pass_Stage_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_Pass_Stage_Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_Pass_Stage_Reward_descriptor_;
}

const GxDB_Pass_Stage_Reward& GxDB_Pass_Stage_Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GxDB_Pass_Stage_Reward* GxDB_Pass_Stage_Reward::default_instance_ = NULL;

GxDB_Pass_Stage_Reward* GxDB_Pass_Stage_Reward::New() const {
  return new GxDB_Pass_Stage_Reward;
}

void GxDB_Pass_Stage_Reward::Clear() {
  pass_stage_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_Pass_Stage_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.pass_stage_reward_info pass_stage_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pass_stage_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pass_stage_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pass_stage_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_Pass_Stage_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.pass_stage_reward_info pass_stage_info = 1;
  for (int i = 0; i < this->pass_stage_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pass_stage_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_Pass_Stage_Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.pass_stage_reward_info pass_stage_info = 1;
  for (int i = 0; i < this->pass_stage_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pass_stage_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_Pass_Stage_Reward::ByteSize() const {
  int total_size = 0;

  // repeated .pb.pass_stage_reward_info pass_stage_info = 1;
  total_size += 1 * this->pass_stage_info_size();
  for (int i = 0; i < this->pass_stage_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pass_stage_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_Pass_Stage_Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_Pass_Stage_Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_Pass_Stage_Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_Pass_Stage_Reward::MergeFrom(const GxDB_Pass_Stage_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  pass_stage_info_.MergeFrom(from.pass_stage_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_Pass_Stage_Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_Pass_Stage_Reward::CopyFrom(const GxDB_Pass_Stage_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_Pass_Stage_Reward::IsInitialized() const {

  for (int i = 0; i < pass_stage_info_size(); i++) {
    if (!this->pass_stage_info(i).IsInitialized()) return false;
  }
  return true;
}

void GxDB_Pass_Stage_Reward::Swap(GxDB_Pass_Stage_Reward* other) {
  if (other != this) {
    pass_stage_info_.Swap(&other->pass_stage_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_Pass_Stage_Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_Pass_Stage_Reward_descriptor_;
  metadata.reflection = GxDB_Pass_Stage_Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GxDB_Pass_Stage_Reward_Delete::kOperateTypeFieldNumber;
#endif  // !_MSC_VER

GxDB_Pass_Stage_Reward_Delete::GxDB_Pass_Stage_Reward_Delete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GxDB_Pass_Stage_Reward_Delete::InitAsDefaultInstance() {
}

GxDB_Pass_Stage_Reward_Delete::GxDB_Pass_Stage_Reward_Delete(const GxDB_Pass_Stage_Reward_Delete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GxDB_Pass_Stage_Reward_Delete::SharedCtor() {
  _cached_size_ = 0;
  operate_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GxDB_Pass_Stage_Reward_Delete::~GxDB_Pass_Stage_Reward_Delete() {
  SharedDtor();
}

void GxDB_Pass_Stage_Reward_Delete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GxDB_Pass_Stage_Reward_Delete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GxDB_Pass_Stage_Reward_Delete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GxDB_Pass_Stage_Reward_Delete_descriptor_;
}

const GxDB_Pass_Stage_Reward_Delete& GxDB_Pass_Stage_Reward_Delete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();
  return *default_instance_;
}

GxDB_Pass_Stage_Reward_Delete* GxDB_Pass_Stage_Reward_Delete::default_instance_ = NULL;

GxDB_Pass_Stage_Reward_Delete* GxDB_Pass_Stage_Reward_Delete::New() const {
  return new GxDB_Pass_Stage_Reward_Delete;
}

void GxDB_Pass_Stage_Reward_Delete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    operate_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GxDB_Pass_Stage_Reward_Delete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 operate_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_type_)));
          set_has_operate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GxDB_Pass_Stage_Reward_Delete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 operate_type = 1;
  if (has_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->operate_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GxDB_Pass_Stage_Reward_Delete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 operate_type = 1;
  if (has_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->operate_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GxDB_Pass_Stage_Reward_Delete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 operate_type = 1;
    if (has_operate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GxDB_Pass_Stage_Reward_Delete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GxDB_Pass_Stage_Reward_Delete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GxDB_Pass_Stage_Reward_Delete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GxDB_Pass_Stage_Reward_Delete::MergeFrom(const GxDB_Pass_Stage_Reward_Delete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate_type()) {
      set_operate_type(from.operate_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GxDB_Pass_Stage_Reward_Delete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GxDB_Pass_Stage_Reward_Delete::CopyFrom(const GxDB_Pass_Stage_Reward_Delete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GxDB_Pass_Stage_Reward_Delete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GxDB_Pass_Stage_Reward_Delete::Swap(GxDB_Pass_Stage_Reward_Delete* other) {
  if (other != this) {
    std::swap(operate_type_, other->operate_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GxDB_Pass_Stage_Reward_Delete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GxDB_Pass_Stage_Reward_Delete_descriptor_;
  metadata.reflection = GxDB_Pass_Stage_Reward_Delete_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
