// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WorldMineCamp.proto

#ifndef PROTOBUF_WorldMineCamp_2eproto__INCLUDED
#define PROTOBUF_WorldMineCamp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_WorldMineCamp_2eproto();
void protobuf_AssignDesc_WorldMineCamp_2eproto();
void protobuf_ShutdownFile_WorldMineCamp_2eproto();

class C2GS_MineCampList;
class C2GS_Player_DealMine;
class Struct_CountryMine_Info;
class Struct_NormalMine_Info;
class GS2C_MineCampList;
class GS2C_DealMine;

// ===================================================================

class C2GS_MineCampList : public ::google::protobuf::Message {
 public:
  C2GS_MineCampList();
  virtual ~C2GS_MineCampList();

  C2GS_MineCampList(const C2GS_MineCampList& from);

  inline C2GS_MineCampList& operator=(const C2GS_MineCampList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_MineCampList& default_instance();

  void Swap(C2GS_MineCampList* other);

  // implements Message ----------------------------------------------

  C2GS_MineCampList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_MineCampList& from);
  void MergeFrom(const C2GS_MineCampList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 mine_field_id = 1;
  inline bool has_mine_field_id() const;
  inline void clear_mine_field_id();
  static const int kMineFieldIdFieldNumber = 1;
  inline ::google::protobuf::uint32 mine_field_id() const;
  inline void set_mine_field_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_MineCampList)
 private:
  inline void set_has_mine_field_id();
  inline void clear_has_mine_field_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 mine_field_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_WorldMineCamp_2eproto();
  friend void protobuf_AssignDesc_WorldMineCamp_2eproto();
  friend void protobuf_ShutdownFile_WorldMineCamp_2eproto();

  void InitAsDefaultInstance();
  static C2GS_MineCampList* default_instance_;
};
// -------------------------------------------------------------------

class C2GS_Player_DealMine : public ::google::protobuf::Message {
 public:
  C2GS_Player_DealMine();
  virtual ~C2GS_Player_DealMine();

  C2GS_Player_DealMine(const C2GS_Player_DealMine& from);

  inline C2GS_Player_DealMine& operator=(const C2GS_Player_DealMine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2GS_Player_DealMine& default_instance();

  void Swap(C2GS_Player_DealMine* other);

  // implements Message ----------------------------------------------

  C2GS_Player_DealMine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2GS_Player_DealMine& from);
  void MergeFrom(const C2GS_Player_DealMine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 player_id() const;
  inline void set_player_id(::google::protobuf::uint32 value);

  // repeated uint32 mine_field_id = 2;
  inline int mine_field_id_size() const;
  inline void clear_mine_field_id();
  static const int kMineFieldIdFieldNumber = 2;
  inline ::google::protobuf::uint32 mine_field_id(int index) const;
  inline void set_mine_field_id(int index, ::google::protobuf::uint32 value);
  inline void add_mine_field_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mine_field_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mine_field_id();

  // required uint32 mine_placeid = 3;
  inline bool has_mine_placeid() const;
  inline void clear_mine_placeid();
  static const int kMinePlaceidFieldNumber = 3;
  inline ::google::protobuf::uint32 mine_placeid() const;
  inline void set_mine_placeid(::google::protobuf::uint32 value);

  // required uint32 deal_id = 4;
  inline bool has_deal_id() const;
  inline void clear_deal_id();
  static const int kDealIdFieldNumber = 4;
  inline ::google::protobuf::uint32 deal_id() const;
  inline void set_deal_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.C2GS_Player_DealMine)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_mine_placeid();
  inline void clear_has_mine_placeid();
  inline void set_has_deal_id();
  inline void clear_has_deal_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mine_field_id_;
  ::google::protobuf::uint32 player_id_;
  ::google::protobuf::uint32 mine_placeid_;
  ::google::protobuf::uint32 deal_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_WorldMineCamp_2eproto();
  friend void protobuf_AssignDesc_WorldMineCamp_2eproto();
  friend void protobuf_ShutdownFile_WorldMineCamp_2eproto();

  void InitAsDefaultInstance();
  static C2GS_Player_DealMine* default_instance_;
};
// -------------------------------------------------------------------

class Struct_CountryMine_Info : public ::google::protobuf::Message {
 public:
  Struct_CountryMine_Info();
  virtual ~Struct_CountryMine_Info();

  Struct_CountryMine_Info(const Struct_CountryMine_Info& from);

  inline Struct_CountryMine_Info& operator=(const Struct_CountryMine_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Struct_CountryMine_Info& default_instance();

  void Swap(Struct_CountryMine_Info* other);

  // implements Message ----------------------------------------------

  Struct_CountryMine_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Struct_CountryMine_Info& from);
  void MergeFrom(const Struct_CountryMine_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 country = 1;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 1;
  inline ::google::protobuf::uint32 country() const;
  inline void set_country(::google::protobuf::uint32 value);

  // required uint32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.Struct_CountryMine_Info)
 private:
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 country_;
  ::google::protobuf::uint32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_WorldMineCamp_2eproto();
  friend void protobuf_AssignDesc_WorldMineCamp_2eproto();
  friend void protobuf_ShutdownFile_WorldMineCamp_2eproto();

  void InitAsDefaultInstance();
  static Struct_CountryMine_Info* default_instance_;
};
// -------------------------------------------------------------------

class Struct_NormalMine_Info : public ::google::protobuf::Message {
 public:
  Struct_NormalMine_Info();
  virtual ~Struct_NormalMine_Info();

  Struct_NormalMine_Info(const Struct_NormalMine_Info& from);

  inline Struct_NormalMine_Info& operator=(const Struct_NormalMine_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Struct_NormalMine_Info& default_instance();

  void Swap(Struct_NormalMine_Info* other);

  // implements Message ----------------------------------------------

  Struct_NormalMine_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Struct_NormalMine_Info& from);
  void MergeFrom(const Struct_NormalMine_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 player_id() const;
  inline void set_player_id(::google::protobuf::uint32 value);

  // required uint32 player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline ::google::protobuf::uint32 player_name() const;
  inline void set_player_name(::google::protobuf::uint32 value);

  // required uint32 country = 3;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 3;
  inline ::google::protobuf::uint32 country() const;
  inline void set_country(::google::protobuf::uint32 value);

  // required uint32 state = 4;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // required uint32 lefttime = 5;
  inline bool has_lefttime() const;
  inline void clear_lefttime();
  static const int kLefttimeFieldNumber = 5;
  inline ::google::protobuf::uint32 lefttime() const;
  inline void set_lefttime(::google::protobuf::uint32 value);

  // required uint32 res1_num = 6;
  inline bool has_res1_num() const;
  inline void clear_res1_num();
  static const int kRes1NumFieldNumber = 6;
  inline ::google::protobuf::uint32 res1_num() const;
  inline void set_res1_num(::google::protobuf::uint32 value);

  // required uint32 res2_num = 7;
  inline bool has_res2_num() const;
  inline void clear_res2_num();
  static const int kRes2NumFieldNumber = 7;
  inline ::google::protobuf::uint32 res2_num() const;
  inline void set_res2_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.Struct_NormalMine_Info)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_lefttime();
  inline void clear_has_lefttime();
  inline void set_has_res1_num();
  inline void clear_has_res1_num();
  inline void set_has_res2_num();
  inline void clear_has_res2_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 player_id_;
  ::google::protobuf::uint32 player_name_;
  ::google::protobuf::uint32 country_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::uint32 lefttime_;
  ::google::protobuf::uint32 res1_num_;
  ::google::protobuf::uint32 res2_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_WorldMineCamp_2eproto();
  friend void protobuf_AssignDesc_WorldMineCamp_2eproto();
  friend void protobuf_ShutdownFile_WorldMineCamp_2eproto();

  void InitAsDefaultInstance();
  static Struct_NormalMine_Info* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_MineCampList : public ::google::protobuf::Message {
 public:
  GS2C_MineCampList();
  virtual ~GS2C_MineCampList();

  GS2C_MineCampList(const GS2C_MineCampList& from);

  inline GS2C_MineCampList& operator=(const GS2C_MineCampList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_MineCampList& default_instance();

  void Swap(GS2C_MineCampList* other);

  // implements Message ----------------------------------------------

  GS2C_MineCampList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_MineCampList& from);
  void MergeFrom(const GS2C_MineCampList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.Struct_CountryMine_Info country_info = 1;
  inline bool has_country_info() const;
  inline void clear_country_info();
  static const int kCountryInfoFieldNumber = 1;
  inline const ::pb::Struct_CountryMine_Info& country_info() const;
  inline ::pb::Struct_CountryMine_Info* mutable_country_info();
  inline ::pb::Struct_CountryMine_Info* release_country_info();
  inline void set_allocated_country_info(::pb::Struct_CountryMine_Info* country_info);

  // repeated .pb.Struct_NormalMine_Info normal_info = 2;
  inline int normal_info_size() const;
  inline void clear_normal_info();
  static const int kNormalInfoFieldNumber = 2;
  inline const ::pb::Struct_NormalMine_Info& normal_info(int index) const;
  inline ::pb::Struct_NormalMine_Info* mutable_normal_info(int index);
  inline ::pb::Struct_NormalMine_Info* add_normal_info();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Struct_NormalMine_Info >&
      normal_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Struct_NormalMine_Info >*
      mutable_normal_info();

  // @@protoc_insertion_point(class_scope:pb.GS2C_MineCampList)
 private:
  inline void set_has_country_info();
  inline void clear_has_country_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pb::Struct_CountryMine_Info* country_info_;
  ::google::protobuf::RepeatedPtrField< ::pb::Struct_NormalMine_Info > normal_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_WorldMineCamp_2eproto();
  friend void protobuf_AssignDesc_WorldMineCamp_2eproto();
  friend void protobuf_ShutdownFile_WorldMineCamp_2eproto();

  void InitAsDefaultInstance();
  static GS2C_MineCampList* default_instance_;
};
// -------------------------------------------------------------------

class GS2C_DealMine : public ::google::protobuf::Message {
 public:
  GS2C_DealMine();
  virtual ~GS2C_DealMine();

  GS2C_DealMine(const GS2C_DealMine& from);

  inline GS2C_DealMine& operator=(const GS2C_DealMine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2C_DealMine& default_instance();

  void Swap(GS2C_DealMine* other);

  // implements Message ----------------------------------------------

  GS2C_DealMine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2C_DealMine& from);
  void MergeFrom(const GS2C_DealMine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 res1_gain = 1;
  inline bool has_res1_gain() const;
  inline void clear_res1_gain();
  static const int kRes1GainFieldNumber = 1;
  inline ::google::protobuf::uint32 res1_gain() const;
  inline void set_res1_gain(::google::protobuf::uint32 value);

  // required uint32 res2_gain = 2;
  inline bool has_res2_gain() const;
  inline void clear_res2_gain();
  static const int kRes2GainFieldNumber = 2;
  inline ::google::protobuf::uint32 res2_gain() const;
  inline void set_res2_gain(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GS2C_DealMine)
 private:
  inline void set_has_res1_gain();
  inline void clear_has_res1_gain();
  inline void set_has_res2_gain();
  inline void clear_has_res2_gain();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 res1_gain_;
  ::google::protobuf::uint32 res2_gain_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_WorldMineCamp_2eproto();
  friend void protobuf_AssignDesc_WorldMineCamp_2eproto();
  friend void protobuf_ShutdownFile_WorldMineCamp_2eproto();

  void InitAsDefaultInstance();
  static GS2C_DealMine* default_instance_;
};
// ===================================================================


// ===================================================================

// C2GS_MineCampList

// required uint32 mine_field_id = 1;
inline bool C2GS_MineCampList::has_mine_field_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_MineCampList::set_has_mine_field_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_MineCampList::clear_has_mine_field_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_MineCampList::clear_mine_field_id() {
  mine_field_id_ = 0u;
  clear_has_mine_field_id();
}
inline ::google::protobuf::uint32 C2GS_MineCampList::mine_field_id() const {
  return mine_field_id_;
}
inline void C2GS_MineCampList::set_mine_field_id(::google::protobuf::uint32 value) {
  set_has_mine_field_id();
  mine_field_id_ = value;
}

// -------------------------------------------------------------------

// C2GS_Player_DealMine

// required uint32 player_id = 1;
inline bool C2GS_Player_DealMine::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2GS_Player_DealMine::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2GS_Player_DealMine::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2GS_Player_DealMine::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
inline ::google::protobuf::uint32 C2GS_Player_DealMine::player_id() const {
  return player_id_;
}
inline void C2GS_Player_DealMine::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
}

// repeated uint32 mine_field_id = 2;
inline int C2GS_Player_DealMine::mine_field_id_size() const {
  return mine_field_id_.size();
}
inline void C2GS_Player_DealMine::clear_mine_field_id() {
  mine_field_id_.Clear();
}
inline ::google::protobuf::uint32 C2GS_Player_DealMine::mine_field_id(int index) const {
  return mine_field_id_.Get(index);
}
inline void C2GS_Player_DealMine::set_mine_field_id(int index, ::google::protobuf::uint32 value) {
  mine_field_id_.Set(index, value);
}
inline void C2GS_Player_DealMine::add_mine_field_id(::google::protobuf::uint32 value) {
  mine_field_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
C2GS_Player_DealMine::mine_field_id() const {
  return mine_field_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
C2GS_Player_DealMine::mutable_mine_field_id() {
  return &mine_field_id_;
}

// required uint32 mine_placeid = 3;
inline bool C2GS_Player_DealMine::has_mine_placeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2GS_Player_DealMine::set_has_mine_placeid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2GS_Player_DealMine::clear_has_mine_placeid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2GS_Player_DealMine::clear_mine_placeid() {
  mine_placeid_ = 0u;
  clear_has_mine_placeid();
}
inline ::google::protobuf::uint32 C2GS_Player_DealMine::mine_placeid() const {
  return mine_placeid_;
}
inline void C2GS_Player_DealMine::set_mine_placeid(::google::protobuf::uint32 value) {
  set_has_mine_placeid();
  mine_placeid_ = value;
}

// required uint32 deal_id = 4;
inline bool C2GS_Player_DealMine::has_deal_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void C2GS_Player_DealMine::set_has_deal_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void C2GS_Player_DealMine::clear_has_deal_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void C2GS_Player_DealMine::clear_deal_id() {
  deal_id_ = 0u;
  clear_has_deal_id();
}
inline ::google::protobuf::uint32 C2GS_Player_DealMine::deal_id() const {
  return deal_id_;
}
inline void C2GS_Player_DealMine::set_deal_id(::google::protobuf::uint32 value) {
  set_has_deal_id();
  deal_id_ = value;
}

// -------------------------------------------------------------------

// Struct_CountryMine_Info

// required uint32 country = 1;
inline bool Struct_CountryMine_Info::has_country() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Struct_CountryMine_Info::set_has_country() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Struct_CountryMine_Info::clear_has_country() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Struct_CountryMine_Info::clear_country() {
  country_ = 0u;
  clear_has_country();
}
inline ::google::protobuf::uint32 Struct_CountryMine_Info::country() const {
  return country_;
}
inline void Struct_CountryMine_Info::set_country(::google::protobuf::uint32 value) {
  set_has_country();
  country_ = value;
}

// required uint32 state = 2;
inline bool Struct_CountryMine_Info::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Struct_CountryMine_Info::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Struct_CountryMine_Info::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Struct_CountryMine_Info::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 Struct_CountryMine_Info::state() const {
  return state_;
}
inline void Struct_CountryMine_Info::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// Struct_NormalMine_Info

// required uint32 player_id = 1;
inline bool Struct_NormalMine_Info::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Struct_NormalMine_Info::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Struct_NormalMine_Info::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Struct_NormalMine_Info::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
inline ::google::protobuf::uint32 Struct_NormalMine_Info::player_id() const {
  return player_id_;
}
inline void Struct_NormalMine_Info::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
}

// required uint32 player_name = 2;
inline bool Struct_NormalMine_Info::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Struct_NormalMine_Info::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Struct_NormalMine_Info::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Struct_NormalMine_Info::clear_player_name() {
  player_name_ = 0u;
  clear_has_player_name();
}
inline ::google::protobuf::uint32 Struct_NormalMine_Info::player_name() const {
  return player_name_;
}
inline void Struct_NormalMine_Info::set_player_name(::google::protobuf::uint32 value) {
  set_has_player_name();
  player_name_ = value;
}

// required uint32 country = 3;
inline bool Struct_NormalMine_Info::has_country() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Struct_NormalMine_Info::set_has_country() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Struct_NormalMine_Info::clear_has_country() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Struct_NormalMine_Info::clear_country() {
  country_ = 0u;
  clear_has_country();
}
inline ::google::protobuf::uint32 Struct_NormalMine_Info::country() const {
  return country_;
}
inline void Struct_NormalMine_Info::set_country(::google::protobuf::uint32 value) {
  set_has_country();
  country_ = value;
}

// required uint32 state = 4;
inline bool Struct_NormalMine_Info::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Struct_NormalMine_Info::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Struct_NormalMine_Info::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Struct_NormalMine_Info::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 Struct_NormalMine_Info::state() const {
  return state_;
}
inline void Struct_NormalMine_Info::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// required uint32 lefttime = 5;
inline bool Struct_NormalMine_Info::has_lefttime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Struct_NormalMine_Info::set_has_lefttime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Struct_NormalMine_Info::clear_has_lefttime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Struct_NormalMine_Info::clear_lefttime() {
  lefttime_ = 0u;
  clear_has_lefttime();
}
inline ::google::protobuf::uint32 Struct_NormalMine_Info::lefttime() const {
  return lefttime_;
}
inline void Struct_NormalMine_Info::set_lefttime(::google::protobuf::uint32 value) {
  set_has_lefttime();
  lefttime_ = value;
}

// required uint32 res1_num = 6;
inline bool Struct_NormalMine_Info::has_res1_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Struct_NormalMine_Info::set_has_res1_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Struct_NormalMine_Info::clear_has_res1_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Struct_NormalMine_Info::clear_res1_num() {
  res1_num_ = 0u;
  clear_has_res1_num();
}
inline ::google::protobuf::uint32 Struct_NormalMine_Info::res1_num() const {
  return res1_num_;
}
inline void Struct_NormalMine_Info::set_res1_num(::google::protobuf::uint32 value) {
  set_has_res1_num();
  res1_num_ = value;
}

// required uint32 res2_num = 7;
inline bool Struct_NormalMine_Info::has_res2_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Struct_NormalMine_Info::set_has_res2_num() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Struct_NormalMine_Info::clear_has_res2_num() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Struct_NormalMine_Info::clear_res2_num() {
  res2_num_ = 0u;
  clear_has_res2_num();
}
inline ::google::protobuf::uint32 Struct_NormalMine_Info::res2_num() const {
  return res2_num_;
}
inline void Struct_NormalMine_Info::set_res2_num(::google::protobuf::uint32 value) {
  set_has_res2_num();
  res2_num_ = value;
}

// -------------------------------------------------------------------

// GS2C_MineCampList

// required .pb.Struct_CountryMine_Info country_info = 1;
inline bool GS2C_MineCampList::has_country_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_MineCampList::set_has_country_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_MineCampList::clear_has_country_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_MineCampList::clear_country_info() {
  if (country_info_ != NULL) country_info_->::pb::Struct_CountryMine_Info::Clear();
  clear_has_country_info();
}
inline const ::pb::Struct_CountryMine_Info& GS2C_MineCampList::country_info() const {
  return country_info_ != NULL ? *country_info_ : *default_instance_->country_info_;
}
inline ::pb::Struct_CountryMine_Info* GS2C_MineCampList::mutable_country_info() {
  set_has_country_info();
  if (country_info_ == NULL) country_info_ = new ::pb::Struct_CountryMine_Info;
  return country_info_;
}
inline ::pb::Struct_CountryMine_Info* GS2C_MineCampList::release_country_info() {
  clear_has_country_info();
  ::pb::Struct_CountryMine_Info* temp = country_info_;
  country_info_ = NULL;
  return temp;
}
inline void GS2C_MineCampList::set_allocated_country_info(::pb::Struct_CountryMine_Info* country_info) {
  delete country_info_;
  country_info_ = country_info;
  if (country_info) {
    set_has_country_info();
  } else {
    clear_has_country_info();
  }
}

// repeated .pb.Struct_NormalMine_Info normal_info = 2;
inline int GS2C_MineCampList::normal_info_size() const {
  return normal_info_.size();
}
inline void GS2C_MineCampList::clear_normal_info() {
  normal_info_.Clear();
}
inline const ::pb::Struct_NormalMine_Info& GS2C_MineCampList::normal_info(int index) const {
  return normal_info_.Get(index);
}
inline ::pb::Struct_NormalMine_Info* GS2C_MineCampList::mutable_normal_info(int index) {
  return normal_info_.Mutable(index);
}
inline ::pb::Struct_NormalMine_Info* GS2C_MineCampList::add_normal_info() {
  return normal_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Struct_NormalMine_Info >&
GS2C_MineCampList::normal_info() const {
  return normal_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Struct_NormalMine_Info >*
GS2C_MineCampList::mutable_normal_info() {
  return &normal_info_;
}

// -------------------------------------------------------------------

// GS2C_DealMine

// required uint32 res1_gain = 1;
inline bool GS2C_DealMine::has_res1_gain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2C_DealMine::set_has_res1_gain() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2C_DealMine::clear_has_res1_gain() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2C_DealMine::clear_res1_gain() {
  res1_gain_ = 0u;
  clear_has_res1_gain();
}
inline ::google::protobuf::uint32 GS2C_DealMine::res1_gain() const {
  return res1_gain_;
}
inline void GS2C_DealMine::set_res1_gain(::google::protobuf::uint32 value) {
  set_has_res1_gain();
  res1_gain_ = value;
}

// required uint32 res2_gain = 2;
inline bool GS2C_DealMine::has_res2_gain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2C_DealMine::set_has_res2_gain() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2C_DealMine::clear_has_res2_gain() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2C_DealMine::clear_res2_gain() {
  res2_gain_ = 0u;
  clear_has_res2_gain();
}
inline ::google::protobuf::uint32 GS2C_DealMine::res2_gain() const {
  return res2_gain_;
}
inline void GS2C_DealMine::set_res2_gain(::google::protobuf::uint32 value) {
  set_has_res2_gain();
  res2_gain_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WorldMineCamp_2eproto__INCLUDED
