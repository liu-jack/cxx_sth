// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Mail.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Mail.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* Mail_UserMailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mail_UserMailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Mail_NewMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Mail_NewMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Mail_MailList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Mail_MailList_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Mail_ReadMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Mail_ReadMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Mail_DelMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Mail_DelMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Mail_Option_respon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Mail_Option_respon_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Mail_Option_respon_opt_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Mail_Option_respon_opt_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Exchange_Gift_Code_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Exchange_Gift_Code_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Mail_RecvMailAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Mail_RecvMailAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Mail_RecvMailAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Mail_RecvMailAward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MailStateType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MailType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MailSendType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Mail_2eproto() {
  protobuf_AddDesc_Mail_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Mail.proto");
  GOOGLE_CHECK(file != NULL);
  Mail_UserMailInfo_descriptor_ = file->message_type(0);
  static const int Mail_UserMailInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_UserMailInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_UserMailInfo, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_UserMailInfo, mail_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_UserMailInfo, mail_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_UserMailInfo, mail_operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_UserMailInfo, send_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_UserMailInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_UserMailInfo, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_UserMailInfo, title_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_UserMailInfo, content_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_UserMailInfo, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_UserMailInfo, is_take_),
  };
  Mail_UserMailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mail_UserMailInfo_descriptor_,
      Mail_UserMailInfo::default_instance_,
      Mail_UserMailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_UserMailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_UserMailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mail_UserMailInfo));
  GS2C_Mail_NewMail_descriptor_ = file->message_type(1);
  static const int GS2C_Mail_NewMail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Mail_NewMail, new_mail_),
  };
  GS2C_Mail_NewMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Mail_NewMail_descriptor_,
      GS2C_Mail_NewMail::default_instance_,
      GS2C_Mail_NewMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Mail_NewMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Mail_NewMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Mail_NewMail));
  GS2C_Mail_MailList_descriptor_ = file->message_type(2);
  static const int GS2C_Mail_MailList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Mail_MailList, mail_list_),
  };
  GS2C_Mail_MailList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Mail_MailList_descriptor_,
      GS2C_Mail_MailList::default_instance_,
      GS2C_Mail_MailList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Mail_MailList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Mail_MailList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Mail_MailList));
  C2GS_Mail_ReadMail_descriptor_ = file->message_type(3);
  static const int C2GS_Mail_ReadMail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Mail_ReadMail, mail_ids_),
  };
  C2GS_Mail_ReadMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Mail_ReadMail_descriptor_,
      C2GS_Mail_ReadMail::default_instance_,
      C2GS_Mail_ReadMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Mail_ReadMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Mail_ReadMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Mail_ReadMail));
  C2GS_Mail_DelMail_descriptor_ = file->message_type(4);
  static const int C2GS_Mail_DelMail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Mail_DelMail, mail_ids_),
  };
  C2GS_Mail_DelMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Mail_DelMail_descriptor_,
      C2GS_Mail_DelMail::default_instance_,
      C2GS_Mail_DelMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Mail_DelMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Mail_DelMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Mail_DelMail));
  GS2C_Mail_Option_respon_descriptor_ = file->message_type(5);
  static const int GS2C_Mail_Option_respon_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Mail_Option_respon, opts_res_),
  };
  GS2C_Mail_Option_respon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Mail_Option_respon_descriptor_,
      GS2C_Mail_Option_respon::default_instance_,
      GS2C_Mail_Option_respon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Mail_Option_respon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Mail_Option_respon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Mail_Option_respon));
  GS2C_Mail_Option_respon_opt_result_descriptor_ = GS2C_Mail_Option_respon_descriptor_->nested_type(0);
  static const int GS2C_Mail_Option_respon_opt_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Mail_Option_respon_opt_result, opt_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Mail_Option_respon_opt_result, opt_res_),
  };
  GS2C_Mail_Option_respon_opt_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Mail_Option_respon_opt_result_descriptor_,
      GS2C_Mail_Option_respon_opt_result::default_instance_,
      GS2C_Mail_Option_respon_opt_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Mail_Option_respon_opt_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Mail_Option_respon_opt_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Mail_Option_respon_opt_result));
  C2GS_Exchange_Gift_Code_descriptor_ = file->message_type(6);
  static const int C2GS_Exchange_Gift_Code_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Exchange_Gift_Code, giftcode_),
  };
  C2GS_Exchange_Gift_Code_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Exchange_Gift_Code_descriptor_,
      C2GS_Exchange_Gift_Code::default_instance_,
      C2GS_Exchange_Gift_Code_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Exchange_Gift_Code, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Exchange_Gift_Code, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Exchange_Gift_Code));
  C2GS_Mail_RecvMailAward_descriptor_ = file->message_type(7);
  static const int C2GS_Mail_RecvMailAward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Mail_RecvMailAward, mail_id_),
  };
  C2GS_Mail_RecvMailAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Mail_RecvMailAward_descriptor_,
      C2GS_Mail_RecvMailAward::default_instance_,
      C2GS_Mail_RecvMailAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Mail_RecvMailAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Mail_RecvMailAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Mail_RecvMailAward));
  GS2C_Mail_RecvMailAward_descriptor_ = file->message_type(8);
  static const int GS2C_Mail_RecvMailAward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Mail_RecvMailAward, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Mail_RecvMailAward, opt_res_),
  };
  GS2C_Mail_RecvMailAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Mail_RecvMailAward_descriptor_,
      GS2C_Mail_RecvMailAward::default_instance_,
      GS2C_Mail_RecvMailAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Mail_RecvMailAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Mail_RecvMailAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Mail_RecvMailAward));
  MailStateType_descriptor_ = file->enum_type(0);
  MailType_descriptor_ = file->enum_type(1);
  MailSendType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Mail_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mail_UserMailInfo_descriptor_, &Mail_UserMailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Mail_NewMail_descriptor_, &GS2C_Mail_NewMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Mail_MailList_descriptor_, &GS2C_Mail_MailList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Mail_ReadMail_descriptor_, &C2GS_Mail_ReadMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Mail_DelMail_descriptor_, &C2GS_Mail_DelMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Mail_Option_respon_descriptor_, &GS2C_Mail_Option_respon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Mail_Option_respon_opt_result_descriptor_, &GS2C_Mail_Option_respon_opt_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Exchange_Gift_Code_descriptor_, &C2GS_Exchange_Gift_Code::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Mail_RecvMailAward_descriptor_, &C2GS_Mail_RecvMailAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Mail_RecvMailAward_descriptor_, &GS2C_Mail_RecvMailAward::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Mail_2eproto() {
  delete Mail_UserMailInfo::default_instance_;
  delete Mail_UserMailInfo_reflection_;
  delete GS2C_Mail_NewMail::default_instance_;
  delete GS2C_Mail_NewMail_reflection_;
  delete GS2C_Mail_MailList::default_instance_;
  delete GS2C_Mail_MailList_reflection_;
  delete C2GS_Mail_ReadMail::default_instance_;
  delete C2GS_Mail_ReadMail_reflection_;
  delete C2GS_Mail_DelMail::default_instance_;
  delete C2GS_Mail_DelMail_reflection_;
  delete GS2C_Mail_Option_respon::default_instance_;
  delete GS2C_Mail_Option_respon_reflection_;
  delete GS2C_Mail_Option_respon_opt_result::default_instance_;
  delete GS2C_Mail_Option_respon_opt_result_reflection_;
  delete C2GS_Exchange_Gift_Code::default_instance_;
  delete C2GS_Exchange_Gift_Code_reflection_;
  delete C2GS_Mail_RecvMailAward::default_instance_;
  delete C2GS_Mail_RecvMailAward_reflection_;
  delete GS2C_Mail_RecvMailAward::default_instance_;
  delete GS2C_Mail_RecvMailAward_reflection_;
}

void protobuf_AddDesc_Mail_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_CommomDef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nMail.proto\022\002pb\032\017CommomDef.proto\"\346\001\n\021Ma"
    "il_UserMailInfo\022\n\n\002id\030\001 \002(\004\022\017\n\007mail_id\030\002"
    " \001(\004\022\021\n\tmail_type\030\003 \001(\005\022\022\n\nmail_state\030\004 "
    "\001(\005\022\024\n\014mail_operate\030\005 \001(\005\022\021\n\tsend_time\030\006"
    " \001(\004\022\r\n\005title\030\007 \001(\t\022\017\n\007content\030\010 \001(\t\022\020\n\010"
    "title_id\030\t \001(\005\022\022\n\ncontent_id\030\n \001(\005\022\r\n\005it"
    "ems\030\013 \001(\t\022\017\n\007is_take\030\014 \001(\010\"<\n\021GS2C_Mail_"
    "NewMail\022\'\n\010new_mail\030\001 \003(\0132\025.pb.Mail_User"
    "MailInfo\">\n\022GS2C_Mail_MailList\022(\n\tmail_l"
    "ist\030\001 \003(\0132\025.pb.Mail_UserMailInfo\"&\n\022C2GS"
    "_Mail_ReadMail\022\020\n\010mail_ids\030\001 \003(\004\"%\n\021C2GS"
    "_Mail_DelMail\022\020\n\010mail_ids\030\001 \003(\004\"\202\001\n\027GS2C"
    "_Mail_Option_respon\0228\n\010opts_res\030\001 \003(\0132&."
    "pb.GS2C_Mail_Option_respon.opt_result\032-\n"
    "\nopt_result\022\016\n\006opt_id\030\001 \002(\004\022\017\n\007opt_res\030\002"
    " \002(\005\"+\n\027C2GS_Exchange_Gift_Code\022\020\n\010giftC"
    "ode\030\001 \002(\t\"*\n\027C2GS_Mail_RecvMailAward\022\017\n\007"
    "mail_id\030\001 \002(\004\";\n\027GS2C_Mail_RecvMailAward"
    "\022\017\n\007mail_id\030\001 \002(\004\022\017\n\007opt_res\030\002 \002(\005*k\n\rMa"
    "ilStateType\022\022\n\016MAIL_STATE_NEW\020\000\022\027\n\023MAIL_"
    "STATE_RECV_NEW\020\001\022\027\n\023MAIL_STATE_HAD_READ\020"
    "\002\022\024\n\020MAIL_STATE_COUNT\020\003*l\n\010MailType\022\021\n\rM"
    "AIL_PLATFROM\020\001\022\020\n\014MAIL_SYSMAIL\020\002\022\024\n\020MAIL"
    "_PLATFROMFIX\020\003\022\021\n\rMAIL_PLATGIFT\020\004\022\022\n\016MAI"
    "L_JUST_TIPS\020\005*7\n\014MailSendType\022\024\n\020MAIL_SE"
    "ND_ONLINE\020\001\022\021\n\rMAIL_SEND_ALL\020\002", 1030);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Mail.proto", &protobuf_RegisterTypes);
  Mail_UserMailInfo::default_instance_ = new Mail_UserMailInfo();
  GS2C_Mail_NewMail::default_instance_ = new GS2C_Mail_NewMail();
  GS2C_Mail_MailList::default_instance_ = new GS2C_Mail_MailList();
  C2GS_Mail_ReadMail::default_instance_ = new C2GS_Mail_ReadMail();
  C2GS_Mail_DelMail::default_instance_ = new C2GS_Mail_DelMail();
  GS2C_Mail_Option_respon::default_instance_ = new GS2C_Mail_Option_respon();
  GS2C_Mail_Option_respon_opt_result::default_instance_ = new GS2C_Mail_Option_respon_opt_result();
  C2GS_Exchange_Gift_Code::default_instance_ = new C2GS_Exchange_Gift_Code();
  C2GS_Mail_RecvMailAward::default_instance_ = new C2GS_Mail_RecvMailAward();
  GS2C_Mail_RecvMailAward::default_instance_ = new GS2C_Mail_RecvMailAward();
  Mail_UserMailInfo::default_instance_->InitAsDefaultInstance();
  GS2C_Mail_NewMail::default_instance_->InitAsDefaultInstance();
  GS2C_Mail_MailList::default_instance_->InitAsDefaultInstance();
  C2GS_Mail_ReadMail::default_instance_->InitAsDefaultInstance();
  C2GS_Mail_DelMail::default_instance_->InitAsDefaultInstance();
  GS2C_Mail_Option_respon::default_instance_->InitAsDefaultInstance();
  GS2C_Mail_Option_respon_opt_result::default_instance_->InitAsDefaultInstance();
  C2GS_Exchange_Gift_Code::default_instance_->InitAsDefaultInstance();
  C2GS_Mail_RecvMailAward::default_instance_->InitAsDefaultInstance();
  GS2C_Mail_RecvMailAward::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Mail_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Mail_2eproto {
  StaticDescriptorInitializer_Mail_2eproto() {
    protobuf_AddDesc_Mail_2eproto();
  }
} static_descriptor_initializer_Mail_2eproto_;
const ::google::protobuf::EnumDescriptor* MailStateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailStateType_descriptor_;
}
bool MailStateType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MailType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailType_descriptor_;
}
bool MailType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MailSendType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailSendType_descriptor_;
}
bool MailSendType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Mail_UserMailInfo::kIdFieldNumber;
const int Mail_UserMailInfo::kMailIdFieldNumber;
const int Mail_UserMailInfo::kMailTypeFieldNumber;
const int Mail_UserMailInfo::kMailStateFieldNumber;
const int Mail_UserMailInfo::kMailOperateFieldNumber;
const int Mail_UserMailInfo::kSendTimeFieldNumber;
const int Mail_UserMailInfo::kTitleFieldNumber;
const int Mail_UserMailInfo::kContentFieldNumber;
const int Mail_UserMailInfo::kTitleIdFieldNumber;
const int Mail_UserMailInfo::kContentIdFieldNumber;
const int Mail_UserMailInfo::kItemsFieldNumber;
const int Mail_UserMailInfo::kIsTakeFieldNumber;
#endif  // !_MSC_VER

Mail_UserMailInfo::Mail_UserMailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mail_UserMailInfo::InitAsDefaultInstance() {
}

Mail_UserMailInfo::Mail_UserMailInfo(const Mail_UserMailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mail_UserMailInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  mail_id_ = GOOGLE_ULONGLONG(0);
  mail_type_ = 0;
  mail_state_ = 0;
  mail_operate_ = 0;
  send_time_ = GOOGLE_ULONGLONG(0);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_id_ = 0;
  content_id_ = 0;
  items_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_take_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mail_UserMailInfo::~Mail_UserMailInfo() {
  SharedDtor();
}

void Mail_UserMailInfo::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (items_ != &::google::protobuf::internal::kEmptyString) {
    delete items_;
  }
  if (this != default_instance_) {
  }
}

void Mail_UserMailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mail_UserMailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mail_UserMailInfo_descriptor_;
}

const Mail_UserMailInfo& Mail_UserMailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mail_2eproto();
  return *default_instance_;
}

Mail_UserMailInfo* Mail_UserMailInfo::default_instance_ = NULL;

Mail_UserMailInfo* Mail_UserMailInfo::New() const {
  return new Mail_UserMailInfo;
}

void Mail_UserMailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    mail_id_ = GOOGLE_ULONGLONG(0);
    mail_type_ = 0;
    mail_state_ = 0;
    mail_operate_ = 0;
    send_time_ = GOOGLE_ULONGLONG(0);
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    title_id_ = 0;
    content_id_ = 0;
    if (has_items()) {
      if (items_ != &::google::protobuf::internal::kEmptyString) {
        items_->clear();
      }
    }
    is_take_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mail_UserMailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_id;
        break;
      }

      // optional uint64 mail_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mail_type;
        break;
      }

      // optional int32 mail_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_type_)));
          set_has_mail_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mail_state;
        break;
      }

      // optional int32 mail_state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_state_)));
          set_has_mail_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mail_operate;
        break;
      }

      // optional int32 mail_operate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_operate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_operate_)));
          set_has_mail_operate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_send_time;
        break;
      }

      // optional uint64 send_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &send_time_)));
          set_has_send_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_title;
        break;
      }

      // optional string title = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_content;
        break;
      }

      // optional string content = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_title_id;
        break;
      }

      // optional int32 title_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_title_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &title_id_)));
          set_has_title_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_content_id;
        break;
      }

      // optional int32 content_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_content_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &content_id_)));
          set_has_content_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_items;
        break;
      }

      // optional string items = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_items()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->items().data(), this->items().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_is_take;
        break;
      }

      // optional bool is_take = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_take:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_take_)));
          set_has_is_take();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mail_UserMailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 mail_id = 2;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mail_id(), output);
  }

  // optional int32 mail_type = 3;
  if (has_mail_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mail_type(), output);
  }

  // optional int32 mail_state = 4;
  if (has_mail_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mail_state(), output);
  }

  // optional int32 mail_operate = 5;
  if (has_mail_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mail_operate(), output);
  }

  // optional uint64 send_time = 6;
  if (has_send_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->send_time(), output);
  }

  // optional string title = 7;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->title(), output);
  }

  // optional string content = 8;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->content(), output);
  }

  // optional int32 title_id = 9;
  if (has_title_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->title_id(), output);
  }

  // optional int32 content_id = 10;
  if (has_content_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->content_id(), output);
  }

  // optional string items = 11;
  if (has_items()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->items().data(), this->items().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->items(), output);
  }

  // optional bool is_take = 12;
  if (has_is_take()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_take(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mail_UserMailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 mail_id = 2;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mail_id(), target);
  }

  // optional int32 mail_type = 3;
  if (has_mail_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mail_type(), target);
  }

  // optional int32 mail_state = 4;
  if (has_mail_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mail_state(), target);
  }

  // optional int32 mail_operate = 5;
  if (has_mail_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mail_operate(), target);
  }

  // optional uint64 send_time = 6;
  if (has_send_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->send_time(), target);
  }

  // optional string title = 7;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->title(), target);
  }

  // optional string content = 8;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->content(), target);
  }

  // optional int32 title_id = 9;
  if (has_title_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->title_id(), target);
  }

  // optional int32 content_id = 10;
  if (has_content_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->content_id(), target);
  }

  // optional string items = 11;
  if (has_items()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->items().data(), this->items().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->items(), target);
  }

  // optional bool is_take = 12;
  if (has_is_take()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_take(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mail_UserMailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 mail_id = 2;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mail_id());
    }

    // optional int32 mail_type = 3;
    if (has_mail_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail_type());
    }

    // optional int32 mail_state = 4;
    if (has_mail_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail_state());
    }

    // optional int32 mail_operate = 5;
    if (has_mail_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail_operate());
    }

    // optional uint64 send_time = 6;
    if (has_send_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->send_time());
    }

    // optional string title = 7;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string content = 8;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 title_id = 9;
    if (has_title_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->title_id());
    }

    // optional int32 content_id = 10;
    if (has_content_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->content_id());
    }

    // optional string items = 11;
    if (has_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->items());
    }

    // optional bool is_take = 12;
    if (has_is_take()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mail_UserMailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mail_UserMailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mail_UserMailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mail_UserMailInfo::MergeFrom(const Mail_UserMailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_mail_type()) {
      set_mail_type(from.mail_type());
    }
    if (from.has_mail_state()) {
      set_mail_state(from.mail_state());
    }
    if (from.has_mail_operate()) {
      set_mail_operate(from.mail_operate());
    }
    if (from.has_send_time()) {
      set_send_time(from.send_time());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_title_id()) {
      set_title_id(from.title_id());
    }
    if (from.has_content_id()) {
      set_content_id(from.content_id());
    }
    if (from.has_items()) {
      set_items(from.items());
    }
    if (from.has_is_take()) {
      set_is_take(from.is_take());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mail_UserMailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mail_UserMailInfo::CopyFrom(const Mail_UserMailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mail_UserMailInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Mail_UserMailInfo::Swap(Mail_UserMailInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(mail_id_, other->mail_id_);
    std::swap(mail_type_, other->mail_type_);
    std::swap(mail_state_, other->mail_state_);
    std::swap(mail_operate_, other->mail_operate_);
    std::swap(send_time_, other->send_time_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(title_id_, other->title_id_);
    std::swap(content_id_, other->content_id_);
    std::swap(items_, other->items_);
    std::swap(is_take_, other->is_take_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mail_UserMailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mail_UserMailInfo_descriptor_;
  metadata.reflection = Mail_UserMailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Mail_NewMail::kNewMailFieldNumber;
#endif  // !_MSC_VER

GS2C_Mail_NewMail::GS2C_Mail_NewMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Mail_NewMail::InitAsDefaultInstance() {
}

GS2C_Mail_NewMail::GS2C_Mail_NewMail(const GS2C_Mail_NewMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Mail_NewMail::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Mail_NewMail::~GS2C_Mail_NewMail() {
  SharedDtor();
}

void GS2C_Mail_NewMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Mail_NewMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Mail_NewMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Mail_NewMail_descriptor_;
}

const GS2C_Mail_NewMail& GS2C_Mail_NewMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mail_2eproto();
  return *default_instance_;
}

GS2C_Mail_NewMail* GS2C_Mail_NewMail::default_instance_ = NULL;

GS2C_Mail_NewMail* GS2C_Mail_NewMail::New() const {
  return new GS2C_Mail_NewMail;
}

void GS2C_Mail_NewMail::Clear() {
  new_mail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Mail_NewMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Mail_UserMailInfo new_mail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_new_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_new_mail;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Mail_NewMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.Mail_UserMailInfo new_mail = 1;
  for (int i = 0; i < this->new_mail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->new_mail(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Mail_NewMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.Mail_UserMailInfo new_mail = 1;
  for (int i = 0; i < this->new_mail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->new_mail(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Mail_NewMail::ByteSize() const {
  int total_size = 0;

  // repeated .pb.Mail_UserMailInfo new_mail = 1;
  total_size += 1 * this->new_mail_size();
  for (int i = 0; i < this->new_mail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->new_mail(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Mail_NewMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Mail_NewMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Mail_NewMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Mail_NewMail::MergeFrom(const GS2C_Mail_NewMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  new_mail_.MergeFrom(from.new_mail_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Mail_NewMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Mail_NewMail::CopyFrom(const GS2C_Mail_NewMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Mail_NewMail::IsInitialized() const {

  for (int i = 0; i < new_mail_size(); i++) {
    if (!this->new_mail(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Mail_NewMail::Swap(GS2C_Mail_NewMail* other) {
  if (other != this) {
    new_mail_.Swap(&other->new_mail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Mail_NewMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Mail_NewMail_descriptor_;
  metadata.reflection = GS2C_Mail_NewMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Mail_MailList::kMailListFieldNumber;
#endif  // !_MSC_VER

GS2C_Mail_MailList::GS2C_Mail_MailList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Mail_MailList::InitAsDefaultInstance() {
}

GS2C_Mail_MailList::GS2C_Mail_MailList(const GS2C_Mail_MailList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Mail_MailList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Mail_MailList::~GS2C_Mail_MailList() {
  SharedDtor();
}

void GS2C_Mail_MailList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Mail_MailList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Mail_MailList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Mail_MailList_descriptor_;
}

const GS2C_Mail_MailList& GS2C_Mail_MailList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mail_2eproto();
  return *default_instance_;
}

GS2C_Mail_MailList* GS2C_Mail_MailList::default_instance_ = NULL;

GS2C_Mail_MailList* GS2C_Mail_MailList::New() const {
  return new GS2C_Mail_MailList;
}

void GS2C_Mail_MailList::Clear() {
  mail_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Mail_MailList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Mail_UserMailInfo mail_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mail_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mail_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Mail_MailList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.Mail_UserMailInfo mail_list = 1;
  for (int i = 0; i < this->mail_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mail_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Mail_MailList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.Mail_UserMailInfo mail_list = 1;
  for (int i = 0; i < this->mail_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mail_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Mail_MailList::ByteSize() const {
  int total_size = 0;

  // repeated .pb.Mail_UserMailInfo mail_list = 1;
  total_size += 1 * this->mail_list_size();
  for (int i = 0; i < this->mail_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mail_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Mail_MailList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Mail_MailList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Mail_MailList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Mail_MailList::MergeFrom(const GS2C_Mail_MailList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_list_.MergeFrom(from.mail_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Mail_MailList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Mail_MailList::CopyFrom(const GS2C_Mail_MailList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Mail_MailList::IsInitialized() const {

  for (int i = 0; i < mail_list_size(); i++) {
    if (!this->mail_list(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Mail_MailList::Swap(GS2C_Mail_MailList* other) {
  if (other != this) {
    mail_list_.Swap(&other->mail_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Mail_MailList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Mail_MailList_descriptor_;
  metadata.reflection = GS2C_Mail_MailList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Mail_ReadMail::kMailIdsFieldNumber;
#endif  // !_MSC_VER

C2GS_Mail_ReadMail::C2GS_Mail_ReadMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Mail_ReadMail::InitAsDefaultInstance() {
}

C2GS_Mail_ReadMail::C2GS_Mail_ReadMail(const C2GS_Mail_ReadMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Mail_ReadMail::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Mail_ReadMail::~C2GS_Mail_ReadMail() {
  SharedDtor();
}

void C2GS_Mail_ReadMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Mail_ReadMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Mail_ReadMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Mail_ReadMail_descriptor_;
}

const C2GS_Mail_ReadMail& C2GS_Mail_ReadMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mail_2eproto();
  return *default_instance_;
}

C2GS_Mail_ReadMail* C2GS_Mail_ReadMail::default_instance_ = NULL;

C2GS_Mail_ReadMail* C2GS_Mail_ReadMail::New() const {
  return new C2GS_Mail_ReadMail;
}

void C2GS_Mail_ReadMail::Clear() {
  mail_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Mail_ReadMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 mail_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_mail_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_mail_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_mail_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Mail_ReadMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 mail_ids = 1;
  for (int i = 0; i < this->mail_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->mail_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Mail_ReadMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 mail_ids = 1;
  for (int i = 0; i < this->mail_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->mail_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Mail_ReadMail::ByteSize() const {
  int total_size = 0;

  // repeated uint64 mail_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->mail_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->mail_ids(i));
    }
    total_size += 1 * this->mail_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Mail_ReadMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Mail_ReadMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Mail_ReadMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Mail_ReadMail::MergeFrom(const C2GS_Mail_ReadMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_ids_.MergeFrom(from.mail_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Mail_ReadMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Mail_ReadMail::CopyFrom(const C2GS_Mail_ReadMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Mail_ReadMail::IsInitialized() const {

  return true;
}

void C2GS_Mail_ReadMail::Swap(C2GS_Mail_ReadMail* other) {
  if (other != this) {
    mail_ids_.Swap(&other->mail_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Mail_ReadMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Mail_ReadMail_descriptor_;
  metadata.reflection = C2GS_Mail_ReadMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Mail_DelMail::kMailIdsFieldNumber;
#endif  // !_MSC_VER

C2GS_Mail_DelMail::C2GS_Mail_DelMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Mail_DelMail::InitAsDefaultInstance() {
}

C2GS_Mail_DelMail::C2GS_Mail_DelMail(const C2GS_Mail_DelMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Mail_DelMail::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Mail_DelMail::~C2GS_Mail_DelMail() {
  SharedDtor();
}

void C2GS_Mail_DelMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Mail_DelMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Mail_DelMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Mail_DelMail_descriptor_;
}

const C2GS_Mail_DelMail& C2GS_Mail_DelMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mail_2eproto();
  return *default_instance_;
}

C2GS_Mail_DelMail* C2GS_Mail_DelMail::default_instance_ = NULL;

C2GS_Mail_DelMail* C2GS_Mail_DelMail::New() const {
  return new C2GS_Mail_DelMail;
}

void C2GS_Mail_DelMail::Clear() {
  mail_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Mail_DelMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 mail_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_mail_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_mail_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_mail_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Mail_DelMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 mail_ids = 1;
  for (int i = 0; i < this->mail_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->mail_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Mail_DelMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 mail_ids = 1;
  for (int i = 0; i < this->mail_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->mail_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Mail_DelMail::ByteSize() const {
  int total_size = 0;

  // repeated uint64 mail_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->mail_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->mail_ids(i));
    }
    total_size += 1 * this->mail_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Mail_DelMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Mail_DelMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Mail_DelMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Mail_DelMail::MergeFrom(const C2GS_Mail_DelMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_ids_.MergeFrom(from.mail_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Mail_DelMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Mail_DelMail::CopyFrom(const C2GS_Mail_DelMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Mail_DelMail::IsInitialized() const {

  return true;
}

void C2GS_Mail_DelMail::Swap(C2GS_Mail_DelMail* other) {
  if (other != this) {
    mail_ids_.Swap(&other->mail_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Mail_DelMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Mail_DelMail_descriptor_;
  metadata.reflection = C2GS_Mail_DelMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Mail_Option_respon_opt_result::kOptIdFieldNumber;
const int GS2C_Mail_Option_respon_opt_result::kOptResFieldNumber;
#endif  // !_MSC_VER

GS2C_Mail_Option_respon_opt_result::GS2C_Mail_Option_respon_opt_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Mail_Option_respon_opt_result::InitAsDefaultInstance() {
}

GS2C_Mail_Option_respon_opt_result::GS2C_Mail_Option_respon_opt_result(const GS2C_Mail_Option_respon_opt_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Mail_Option_respon_opt_result::SharedCtor() {
  _cached_size_ = 0;
  opt_id_ = GOOGLE_ULONGLONG(0);
  opt_res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Mail_Option_respon_opt_result::~GS2C_Mail_Option_respon_opt_result() {
  SharedDtor();
}

void GS2C_Mail_Option_respon_opt_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Mail_Option_respon_opt_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Mail_Option_respon_opt_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Mail_Option_respon_opt_result_descriptor_;
}

const GS2C_Mail_Option_respon_opt_result& GS2C_Mail_Option_respon_opt_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mail_2eproto();
  return *default_instance_;
}

GS2C_Mail_Option_respon_opt_result* GS2C_Mail_Option_respon_opt_result::default_instance_ = NULL;

GS2C_Mail_Option_respon_opt_result* GS2C_Mail_Option_respon_opt_result::New() const {
  return new GS2C_Mail_Option_respon_opt_result;
}

void GS2C_Mail_Option_respon_opt_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opt_id_ = GOOGLE_ULONGLONG(0);
    opt_res_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Mail_Option_respon_opt_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 opt_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &opt_id_)));
          set_has_opt_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opt_res;
        break;
      }

      // required int32 opt_res = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_res_)));
          set_has_opt_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Mail_Option_respon_opt_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 opt_id = 1;
  if (has_opt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->opt_id(), output);
  }

  // required int32 opt_res = 2;
  if (has_opt_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->opt_res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Mail_Option_respon_opt_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 opt_id = 1;
  if (has_opt_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->opt_id(), target);
  }

  // required int32 opt_res = 2;
  if (has_opt_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->opt_res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Mail_Option_respon_opt_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 opt_id = 1;
    if (has_opt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->opt_id());
    }

    // required int32 opt_res = 2;
    if (has_opt_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt_res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Mail_Option_respon_opt_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Mail_Option_respon_opt_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Mail_Option_respon_opt_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Mail_Option_respon_opt_result::MergeFrom(const GS2C_Mail_Option_respon_opt_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt_id()) {
      set_opt_id(from.opt_id());
    }
    if (from.has_opt_res()) {
      set_opt_res(from.opt_res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Mail_Option_respon_opt_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Mail_Option_respon_opt_result::CopyFrom(const GS2C_Mail_Option_respon_opt_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Mail_Option_respon_opt_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GS2C_Mail_Option_respon_opt_result::Swap(GS2C_Mail_Option_respon_opt_result* other) {
  if (other != this) {
    std::swap(opt_id_, other->opt_id_);
    std::swap(opt_res_, other->opt_res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Mail_Option_respon_opt_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Mail_Option_respon_opt_result_descriptor_;
  metadata.reflection = GS2C_Mail_Option_respon_opt_result_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GS2C_Mail_Option_respon::kOptsResFieldNumber;
#endif  // !_MSC_VER

GS2C_Mail_Option_respon::GS2C_Mail_Option_respon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Mail_Option_respon::InitAsDefaultInstance() {
}

GS2C_Mail_Option_respon::GS2C_Mail_Option_respon(const GS2C_Mail_Option_respon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Mail_Option_respon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Mail_Option_respon::~GS2C_Mail_Option_respon() {
  SharedDtor();
}

void GS2C_Mail_Option_respon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Mail_Option_respon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Mail_Option_respon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Mail_Option_respon_descriptor_;
}

const GS2C_Mail_Option_respon& GS2C_Mail_Option_respon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mail_2eproto();
  return *default_instance_;
}

GS2C_Mail_Option_respon* GS2C_Mail_Option_respon::default_instance_ = NULL;

GS2C_Mail_Option_respon* GS2C_Mail_Option_respon::New() const {
  return new GS2C_Mail_Option_respon;
}

void GS2C_Mail_Option_respon::Clear() {
  opts_res_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Mail_Option_respon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GS2C_Mail_Option_respon.opt_result opts_res = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opts_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_opts_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_opts_res;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Mail_Option_respon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GS2C_Mail_Option_respon.opt_result opts_res = 1;
  for (int i = 0; i < this->opts_res_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->opts_res(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Mail_Option_respon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GS2C_Mail_Option_respon.opt_result opts_res = 1;
  for (int i = 0; i < this->opts_res_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->opts_res(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Mail_Option_respon::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GS2C_Mail_Option_respon.opt_result opts_res = 1;
  total_size += 1 * this->opts_res_size();
  for (int i = 0; i < this->opts_res_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->opts_res(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Mail_Option_respon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Mail_Option_respon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Mail_Option_respon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Mail_Option_respon::MergeFrom(const GS2C_Mail_Option_respon& from) {
  GOOGLE_CHECK_NE(&from, this);
  opts_res_.MergeFrom(from.opts_res_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Mail_Option_respon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Mail_Option_respon::CopyFrom(const GS2C_Mail_Option_respon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Mail_Option_respon::IsInitialized() const {

  for (int i = 0; i < opts_res_size(); i++) {
    if (!this->opts_res(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_Mail_Option_respon::Swap(GS2C_Mail_Option_respon* other) {
  if (other != this) {
    opts_res_.Swap(&other->opts_res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Mail_Option_respon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Mail_Option_respon_descriptor_;
  metadata.reflection = GS2C_Mail_Option_respon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Exchange_Gift_Code::kGiftCodeFieldNumber;
#endif  // !_MSC_VER

C2GS_Exchange_Gift_Code::C2GS_Exchange_Gift_Code()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Exchange_Gift_Code::InitAsDefaultInstance() {
}

C2GS_Exchange_Gift_Code::C2GS_Exchange_Gift_Code(const C2GS_Exchange_Gift_Code& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Exchange_Gift_Code::SharedCtor() {
  _cached_size_ = 0;
  giftcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Exchange_Gift_Code::~C2GS_Exchange_Gift_Code() {
  SharedDtor();
}

void C2GS_Exchange_Gift_Code::SharedDtor() {
  if (giftcode_ != &::google::protobuf::internal::kEmptyString) {
    delete giftcode_;
  }
  if (this != default_instance_) {
  }
}

void C2GS_Exchange_Gift_Code::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Exchange_Gift_Code::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Exchange_Gift_Code_descriptor_;
}

const C2GS_Exchange_Gift_Code& C2GS_Exchange_Gift_Code::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mail_2eproto();
  return *default_instance_;
}

C2GS_Exchange_Gift_Code* C2GS_Exchange_Gift_Code::default_instance_ = NULL;

C2GS_Exchange_Gift_Code* C2GS_Exchange_Gift_Code::New() const {
  return new C2GS_Exchange_Gift_Code;
}

void C2GS_Exchange_Gift_Code::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_giftcode()) {
      if (giftcode_ != &::google::protobuf::internal::kEmptyString) {
        giftcode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Exchange_Gift_Code::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string giftCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_giftcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->giftcode().data(), this->giftcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Exchange_Gift_Code::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string giftCode = 1;
  if (has_giftcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->giftcode().data(), this->giftcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->giftcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Exchange_Gift_Code::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string giftCode = 1;
  if (has_giftcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->giftcode().data(), this->giftcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->giftcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Exchange_Gift_Code::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string giftCode = 1;
    if (has_giftcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->giftcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Exchange_Gift_Code::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Exchange_Gift_Code* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Exchange_Gift_Code*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Exchange_Gift_Code::MergeFrom(const C2GS_Exchange_Gift_Code& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_giftcode()) {
      set_giftcode(from.giftcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Exchange_Gift_Code::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Exchange_Gift_Code::CopyFrom(const C2GS_Exchange_Gift_Code& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Exchange_Gift_Code::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Exchange_Gift_Code::Swap(C2GS_Exchange_Gift_Code* other) {
  if (other != this) {
    std::swap(giftcode_, other->giftcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Exchange_Gift_Code::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Exchange_Gift_Code_descriptor_;
  metadata.reflection = C2GS_Exchange_Gift_Code_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Mail_RecvMailAward::kMailIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Mail_RecvMailAward::C2GS_Mail_RecvMailAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Mail_RecvMailAward::InitAsDefaultInstance() {
}

C2GS_Mail_RecvMailAward::C2GS_Mail_RecvMailAward(const C2GS_Mail_RecvMailAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Mail_RecvMailAward::SharedCtor() {
  _cached_size_ = 0;
  mail_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Mail_RecvMailAward::~C2GS_Mail_RecvMailAward() {
  SharedDtor();
}

void C2GS_Mail_RecvMailAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Mail_RecvMailAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Mail_RecvMailAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Mail_RecvMailAward_descriptor_;
}

const C2GS_Mail_RecvMailAward& C2GS_Mail_RecvMailAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mail_2eproto();
  return *default_instance_;
}

C2GS_Mail_RecvMailAward* C2GS_Mail_RecvMailAward::default_instance_ = NULL;

C2GS_Mail_RecvMailAward* C2GS_Mail_RecvMailAward::New() const {
  return new C2GS_Mail_RecvMailAward;
}

void C2GS_Mail_RecvMailAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Mail_RecvMailAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 mail_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Mail_RecvMailAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 mail_id = 1;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mail_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Mail_RecvMailAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 mail_id = 1;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mail_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Mail_RecvMailAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 mail_id = 1;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mail_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Mail_RecvMailAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Mail_RecvMailAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Mail_RecvMailAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Mail_RecvMailAward::MergeFrom(const C2GS_Mail_RecvMailAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Mail_RecvMailAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Mail_RecvMailAward::CopyFrom(const C2GS_Mail_RecvMailAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Mail_RecvMailAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Mail_RecvMailAward::Swap(C2GS_Mail_RecvMailAward* other) {
  if (other != this) {
    std::swap(mail_id_, other->mail_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Mail_RecvMailAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Mail_RecvMailAward_descriptor_;
  metadata.reflection = C2GS_Mail_RecvMailAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Mail_RecvMailAward::kMailIdFieldNumber;
const int GS2C_Mail_RecvMailAward::kOptResFieldNumber;
#endif  // !_MSC_VER

GS2C_Mail_RecvMailAward::GS2C_Mail_RecvMailAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Mail_RecvMailAward::InitAsDefaultInstance() {
}

GS2C_Mail_RecvMailAward::GS2C_Mail_RecvMailAward(const GS2C_Mail_RecvMailAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Mail_RecvMailAward::SharedCtor() {
  _cached_size_ = 0;
  mail_id_ = GOOGLE_ULONGLONG(0);
  opt_res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Mail_RecvMailAward::~GS2C_Mail_RecvMailAward() {
  SharedDtor();
}

void GS2C_Mail_RecvMailAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Mail_RecvMailAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Mail_RecvMailAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Mail_RecvMailAward_descriptor_;
}

const GS2C_Mail_RecvMailAward& GS2C_Mail_RecvMailAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mail_2eproto();
  return *default_instance_;
}

GS2C_Mail_RecvMailAward* GS2C_Mail_RecvMailAward::default_instance_ = NULL;

GS2C_Mail_RecvMailAward* GS2C_Mail_RecvMailAward::New() const {
  return new GS2C_Mail_RecvMailAward;
}

void GS2C_Mail_RecvMailAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_id_ = GOOGLE_ULONGLONG(0);
    opt_res_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Mail_RecvMailAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 mail_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opt_res;
        break;
      }

      // required int32 opt_res = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_res_)));
          set_has_opt_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Mail_RecvMailAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 mail_id = 1;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mail_id(), output);
  }

  // required int32 opt_res = 2;
  if (has_opt_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->opt_res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Mail_RecvMailAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 mail_id = 1;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mail_id(), target);
  }

  // required int32 opt_res = 2;
  if (has_opt_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->opt_res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Mail_RecvMailAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 mail_id = 1;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mail_id());
    }

    // required int32 opt_res = 2;
    if (has_opt_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt_res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Mail_RecvMailAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Mail_RecvMailAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Mail_RecvMailAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Mail_RecvMailAward::MergeFrom(const GS2C_Mail_RecvMailAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_opt_res()) {
      set_opt_res(from.opt_res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Mail_RecvMailAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Mail_RecvMailAward::CopyFrom(const GS2C_Mail_RecvMailAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Mail_RecvMailAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GS2C_Mail_RecvMailAward::Swap(GS2C_Mail_RecvMailAward* other) {
  if (other != this) {
    std::swap(mail_id_, other->mail_id_);
    std::swap(opt_res_, other->opt_res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Mail_RecvMailAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Mail_RecvMailAward_descriptor_;
  metadata.reflection = GS2C_Mail_RecvMailAward_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
