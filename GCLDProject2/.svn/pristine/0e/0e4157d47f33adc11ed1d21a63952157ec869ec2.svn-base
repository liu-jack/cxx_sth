// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InterServer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "InterServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* Address_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Address_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetEventLogServersRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetEventLogServersRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PongInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PongInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2C_RegisterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2C_RegisterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2C_RegisterInfoRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2C_RegisterInfoRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2C_GetLoinServersRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2C_GetLoinServersRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2C_GetCrossServersRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2C_GetCrossServersRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2C_Exchange_Gift_Code_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2C_Exchange_Gift_Code_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2C_Exchange_Gift_Code_Ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2C_Exchange_Gift_Code_Ret_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2C_FeedBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2C_FeedBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2C_FeedBack_Ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2C_FeedBack_Ret_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC2G_activity_proto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC2G_activity_proto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC2G_activity_plan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC2G_activity_plan_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC2G_server_open_time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC2G_server_open_time_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC2G_activity_reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC2G_activity_reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC2G_activity_package_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC2G_activity_package_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC2G_activity_package_Update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC2G_activity_package_Update_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC2G_ReloadPayItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC2G_ReloadPayItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_activity_update_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_activity_update_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2E_RegisterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2E_RegisterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2E_RegisterInfoRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2E_RegisterInfoRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2B_RegisterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2B_RegisterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2B_RegisterInfoRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2B_RegisterInfoRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2R_RegisterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2R_RegisterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2R_RegisterInfoRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2R_RegisterInfoRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2R_RegisterPlayerInfoRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2R_RegisterPlayerInfoRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SR2C_RegisterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SR2C_RegisterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SR2C_RegisterInfoRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SR2C_RegisterInfoRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SR2C_GetLobbyServersRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SR2C_GetLobbyServersRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SR2B_RegisterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SR2B_RegisterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SR2B_RegisterInfoRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SR2B_RegisterInfoRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountryWithAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountryWithAddress_reflection_ = NULL;
const ::google::protobuf::Descriptor* SL2G_DevideCrossServers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SL2G_DevideCrossServers_reflection_ = NULL;
const ::google::protobuf::Descriptor* SR2E_RegisterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SR2E_RegisterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SR2E_RegisterInfoRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SR2E_RegisterInfoRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SB2C_RegisterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SB2C_RegisterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SB2C_RegisterInfoRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SB2C_RegisterInfoRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SB2E_RegisterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SB2E_RegisterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SB2E_RegisterInfoRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SB2E_RegisterInfoRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SL2C_RegisterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SL2C_RegisterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SL2C_RegisterInfoRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SL2C_RegisterInfoRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SL2E_RegisterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SL2E_RegisterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SL2E_RegisterInfoRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SL2E_RegisterInfoRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SE2C_RegisterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SE2C_RegisterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SE2C_RegisterInfoRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SE2C_RegisterInfoRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventParm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventParm_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EventParm_ParmType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Server_Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Server_Event_reflection_ = NULL;
const ::google::protobuf::Descriptor* Server_Events_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Server_Events_reflection_ = NULL;
const ::google::protobuf::Descriptor* Version_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Version_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneVersionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneVersionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2L_RegisterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2L_RegisterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2L_RegisterInfoRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2L_RegisterInfoRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2D_RegisterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2D_RegisterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2D_RegisterInfoRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2D_RegisterInfoRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2D_GetPlayerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2D_GetPlayerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2L_UpdatePlayerLockType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2L_UpdatePlayerLockType_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2D_CreatePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2D_CreatePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2D_SelectPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2D_SelectPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2D_Player_Id_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2D_Player_Id_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2D_UpdataStageLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2D_UpdataStageLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2D_Forbiden_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2D_Forbiden_Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* SD2G_Forbiden_Player_Ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SD2G_Forbiden_Player_Ret_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2D_UpdataFuBenBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2D_UpdataFuBenBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2D_UpdataFuBenResource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2D_UpdataFuBenResource_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2D_UpdataFuBenPassStage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2D_UpdataFuBenPassStage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Country_Info_Devide_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Country_Info_Devide_reflection_ = NULL;
const ::google::protobuf::Descriptor* SD2G_Country_AllInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SD2G_Country_AllInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2B_Country_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2B_Country_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* SB2G_Country_War_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SB2G_Country_War_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2R_Country_AllInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2R_Country_AllInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GobalValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GobalValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerGobalValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerGobalValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadcastHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadcastHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* SW2C2L_UpdateServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SW2C2L_UpdateServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2C2L_UpdatePerformanceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2C2L_UpdatePerformanceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2D_Broadcast_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2D_Broadcast_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2G_Mail_SendMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2G_Mail_SendMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2D_MailInfoData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2D_MailInfoData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2D_MailsOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2D_MailsOperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2D_Check_Mail_Recivers_Exist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2D_Check_Mail_Recivers_Exist_reflection_ = NULL;
const ::google::protobuf::Descriptor* SD2G_Check_Mail_Recivers_Exist_Rspone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SD2G_Check_Mail_Recivers_Exist_Rspone_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2D_Friend_Operate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2D_Friend_Operate_reflection_ = NULL;
const ::google::protobuf::Descriptor* SD2G_Friend_Operate_Res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SD2G_Friend_Operate_Res_reflection_ = NULL;
const ::google::protobuf::Descriptor* SG2D_Crusade_Stage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SG2D_Crusade_Stage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Select_Country_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Select_Country_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SD2G_All_player_has_sync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SD2G_All_player_has_sync_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_Occupy_City_Num_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_Occupy_City_Num_reflection_ = NULL;
const ::google::protobuf::Descriptor* SD2G_Activity_Occupy_City_Num_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SD2G_Activity_Occupy_City_Num_reflection_ = NULL;
const ::google::protobuf::Descriptor* SR2G_AwardTakePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SR2G_AwardTakePlayer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RegisterResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ACCOUNT_LOCK_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ACCOUNT_LOCK_OP_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ValueType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ValueIndex_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BROADCAST_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_InterServer_2eproto() {
  protobuf_AddDesc_InterServer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "InterServer.proto");
  GOOGLE_CHECK(file != NULL);
  Address_descriptor_ = file->message_type(0);
  static const int Address_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, port_),
  };
  Address_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Address_descriptor_,
      Address::default_instance_,
      Address_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Address));
  GetEventLogServersRet_descriptor_ = file->message_type(1);
  static const int GetEventLogServersRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEventLogServersRet, addresses_),
  };
  GetEventLogServersRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetEventLogServersRet_descriptor_,
      GetEventLogServersRet::default_instance_,
      GetEventLogServersRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEventLogServersRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEventLogServersRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetEventLogServersRet));
  PingInfo_descriptor_ = file->message_type(2);
  static const int PingInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingInfo, time_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingInfo, delay_time_ms_),
  };
  PingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PingInfo_descriptor_,
      PingInfo::default_instance_,
      PingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PingInfo));
  PongInfo_descriptor_ = file->message_type(3);
  static const int PongInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PongInfo, time_ms_),
  };
  PongInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PongInfo_descriptor_,
      PongInfo::default_instance_,
      PongInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PongInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PongInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PongInfo));
  SG2C_RegisterInfo_descriptor_ = file->message_type(4);
  static const int SG2C_RegisterInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_RegisterInfo, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_RegisterInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_RegisterInfo, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_RegisterInfo, names_),
  };
  SG2C_RegisterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2C_RegisterInfo_descriptor_,
      SG2C_RegisterInfo::default_instance_,
      SG2C_RegisterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_RegisterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_RegisterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2C_RegisterInfo));
  SG2C_RegisterInfoRet_descriptor_ = file->message_type(5);
  static const int SG2C_RegisterInfoRet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_RegisterInfoRet, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_RegisterInfoRet, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_RegisterInfoRet, web_url_),
  };
  SG2C_RegisterInfoRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2C_RegisterInfoRet_descriptor_,
      SG2C_RegisterInfoRet::default_instance_,
      SG2C_RegisterInfoRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_RegisterInfoRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_RegisterInfoRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2C_RegisterInfoRet));
  SG2C_GetLoinServersRet_descriptor_ = file->message_type(6);
  static const int SG2C_GetLoinServersRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_GetLoinServersRet, addresses_),
  };
  SG2C_GetLoinServersRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2C_GetLoinServersRet_descriptor_,
      SG2C_GetLoinServersRet::default_instance_,
      SG2C_GetLoinServersRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_GetLoinServersRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_GetLoinServersRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2C_GetLoinServersRet));
  SG2C_GetCrossServersRet_descriptor_ = file->message_type(7);
  static const int SG2C_GetCrossServersRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_GetCrossServersRet, addresses_),
  };
  SG2C_GetCrossServersRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2C_GetCrossServersRet_descriptor_,
      SG2C_GetCrossServersRet::default_instance_,
      SG2C_GetCrossServersRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_GetCrossServersRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_GetCrossServersRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2C_GetCrossServersRet));
  SG2C_Exchange_Gift_Code_descriptor_ = file->message_type(8);
  static const int SG2C_Exchange_Gift_Code_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_Exchange_Gift_Code, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_Exchange_Gift_Code, gift_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_Exchange_Gift_Code, channel_),
  };
  SG2C_Exchange_Gift_Code_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2C_Exchange_Gift_Code_descriptor_,
      SG2C_Exchange_Gift_Code::default_instance_,
      SG2C_Exchange_Gift_Code_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_Exchange_Gift_Code, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_Exchange_Gift_Code, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2C_Exchange_Gift_Code));
  SG2C_Exchange_Gift_Code_Ret_descriptor_ = file->message_type(9);
  static const int SG2C_Exchange_Gift_Code_Ret_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_Exchange_Gift_Code_Ret, is_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_Exchange_Gift_Code_Ret, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_Exchange_Gift_Code_Ret, giftname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_Exchange_Gift_Code_Ret, gifts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_Exchange_Gift_Code_Ret, error_code_),
  };
  SG2C_Exchange_Gift_Code_Ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2C_Exchange_Gift_Code_Ret_descriptor_,
      SG2C_Exchange_Gift_Code_Ret::default_instance_,
      SG2C_Exchange_Gift_Code_Ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_Exchange_Gift_Code_Ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_Exchange_Gift_Code_Ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2C_Exchange_Gift_Code_Ret));
  SG2C_FeedBack_descriptor_ = file->message_type(10);
  static const int SG2C_FeedBack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_FeedBack, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_FeedBack, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_FeedBack, feedback_),
  };
  SG2C_FeedBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2C_FeedBack_descriptor_,
      SG2C_FeedBack::default_instance_,
      SG2C_FeedBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_FeedBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_FeedBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2C_FeedBack));
  SG2C_FeedBack_Ret_descriptor_ = file->message_type(11);
  static const int SG2C_FeedBack_Ret_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_FeedBack_Ret, is_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_FeedBack_Ret, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_FeedBack_Ret, error_code_),
  };
  SG2C_FeedBack_Ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2C_FeedBack_Ret_descriptor_,
      SG2C_FeedBack_Ret::default_instance_,
      SG2C_FeedBack_Ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_FeedBack_Ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C_FeedBack_Ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2C_FeedBack_Ret));
  SC2G_activity_proto_descriptor_ = file->message_type(12);
  static const int SC2G_activity_proto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_proto, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_proto, act_type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_proto, reward_type_),
  };
  SC2G_activity_proto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC2G_activity_proto_descriptor_,
      SC2G_activity_proto::default_instance_,
      SC2G_activity_proto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_proto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_proto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC2G_activity_proto));
  SC2G_activity_plan_descriptor_ = file->message_type(13);
  static const int SC2G_activity_plan_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_plan, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_plan, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_plan, open_way_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_plan, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_plan, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_plan, show_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_plan, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_plan, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_plan, end_show_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_plan, stage_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_plan, need_greater_than_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_plan, need_less_than_open_),
  };
  SC2G_activity_plan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC2G_activity_plan_descriptor_,
      SC2G_activity_plan::default_instance_,
      SC2G_activity_plan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_plan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_plan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC2G_activity_plan));
  SC2G_server_open_time_descriptor_ = file->message_type(14);
  static const int SC2G_server_open_time_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_server_open_time, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_server_open_time, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_server_open_time, open_time_),
  };
  SC2G_server_open_time_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC2G_server_open_time_descriptor_,
      SC2G_server_open_time::default_instance_,
      SC2G_server_open_time_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_server_open_time, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_server_open_time, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC2G_server_open_time));
  SC2G_activity_reward_descriptor_ = file->message_type(15);
  static const int SC2G_activity_reward_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_reward, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_reward, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_reward, cost_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_reward, is_has_discount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_reward, cost_discount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_reward, conditon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_reward, reward_list_),
  };
  SC2G_activity_reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC2G_activity_reward_descriptor_,
      SC2G_activity_reward::default_instance_,
      SC2G_activity_reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC2G_activity_reward));
  SC2G_activity_package_descriptor_ = file->message_type(16);
  static const int SC2G_activity_package_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_package, activity_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_package, activity_plan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_package, server_open_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_package, activity_reward_),
  };
  SC2G_activity_package_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC2G_activity_package_descriptor_,
      SC2G_activity_package::default_instance_,
      SC2G_activity_package_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_package, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_package, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC2G_activity_package));
  SC2G_activity_package_Update_descriptor_ = file->message_type(17);
  static const int SC2G_activity_package_Update_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_package_Update, all_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_package_Update, update_),
  };
  SC2G_activity_package_Update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC2G_activity_package_Update_descriptor_,
      SC2G_activity_package_Update::default_instance_,
      SC2G_activity_package_Update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_package_Update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_activity_package_Update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC2G_activity_package_Update));
  SC2G_ReloadPayItem_descriptor_ = file->message_type(18);
  static const int SC2G_ReloadPayItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_ReloadPayItem, region_id_),
  };
  SC2G_ReloadPayItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC2G_ReloadPayItem_descriptor_,
      SC2G_ReloadPayItem::default_instance_,
      SC2G_ReloadPayItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_ReloadPayItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC2G_ReloadPayItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC2G_ReloadPayItem));
  MSG_activity_update_info_descriptor_ = file->message_type(19);
  static const int MSG_activity_update_info_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_activity_update_info, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_activity_update_info, open_way_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_activity_update_info, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_activity_update_info, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_activity_update_info, show_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_activity_update_info, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_activity_update_info, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_activity_update_info, end_show_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_activity_update_info, stage_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_activity_update_info, need_greater_than_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_activity_update_info, need_less_than_open_),
  };
  MSG_activity_update_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_activity_update_info_descriptor_,
      MSG_activity_update_info::default_instance_,
      MSG_activity_update_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_activity_update_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_activity_update_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_activity_update_info));
  SG2E_RegisterInfo_descriptor_ = file->message_type(20);
  static const int SG2E_RegisterInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2E_RegisterInfo, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2E_RegisterInfo, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2E_RegisterInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2E_RegisterInfo, port_),
  };
  SG2E_RegisterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2E_RegisterInfo_descriptor_,
      SG2E_RegisterInfo::default_instance_,
      SG2E_RegisterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2E_RegisterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2E_RegisterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2E_RegisterInfo));
  SG2E_RegisterInfoRet_descriptor_ = file->message_type(21);
  static const int SG2E_RegisterInfoRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2E_RegisterInfoRet, result_),
  };
  SG2E_RegisterInfoRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2E_RegisterInfoRet_descriptor_,
      SG2E_RegisterInfoRet::default_instance_,
      SG2E_RegisterInfoRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2E_RegisterInfoRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2E_RegisterInfoRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2E_RegisterInfoRet));
  SG2B_RegisterInfo_descriptor_ = file->message_type(22);
  static const int SG2B_RegisterInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2B_RegisterInfo, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2B_RegisterInfo, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2B_RegisterInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2B_RegisterInfo, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2B_RegisterInfo, names_),
  };
  SG2B_RegisterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2B_RegisterInfo_descriptor_,
      SG2B_RegisterInfo::default_instance_,
      SG2B_RegisterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2B_RegisterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2B_RegisterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2B_RegisterInfo));
  SG2B_RegisterInfoRet_descriptor_ = file->message_type(23);
  static const int SG2B_RegisterInfoRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2B_RegisterInfoRet, result_),
  };
  SG2B_RegisterInfoRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2B_RegisterInfoRet_descriptor_,
      SG2B_RegisterInfoRet::default_instance_,
      SG2B_RegisterInfoRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2B_RegisterInfoRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2B_RegisterInfoRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2B_RegisterInfoRet));
  SG2R_RegisterInfo_descriptor_ = file->message_type(24);
  static const int SG2R_RegisterInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2R_RegisterInfo, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2R_RegisterInfo, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2R_RegisterInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2R_RegisterInfo, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2R_RegisterInfo, names_),
  };
  SG2R_RegisterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2R_RegisterInfo_descriptor_,
      SG2R_RegisterInfo::default_instance_,
      SG2R_RegisterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2R_RegisterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2R_RegisterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2R_RegisterInfo));
  SG2R_RegisterInfoRet_descriptor_ = file->message_type(25);
  static const int SG2R_RegisterInfoRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2R_RegisterInfoRet, result_),
  };
  SG2R_RegisterInfoRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2R_RegisterInfoRet_descriptor_,
      SG2R_RegisterInfoRet::default_instance_,
      SG2R_RegisterInfoRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2R_RegisterInfoRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2R_RegisterInfoRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2R_RegisterInfoRet));
  SG2R_RegisterPlayerInfoRet_descriptor_ = file->message_type(26);
  static const int SG2R_RegisterPlayerInfoRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2R_RegisterPlayerInfoRet, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2R_RegisterPlayerInfoRet, is_success_),
  };
  SG2R_RegisterPlayerInfoRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2R_RegisterPlayerInfoRet_descriptor_,
      SG2R_RegisterPlayerInfoRet::default_instance_,
      SG2R_RegisterPlayerInfoRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2R_RegisterPlayerInfoRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2R_RegisterPlayerInfoRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2R_RegisterPlayerInfoRet));
  SR2C_RegisterInfo_descriptor_ = file->message_type(27);
  static const int SR2C_RegisterInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2C_RegisterInfo, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2C_RegisterInfo, names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2C_RegisterInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2C_RegisterInfo, port_),
  };
  SR2C_RegisterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SR2C_RegisterInfo_descriptor_,
      SR2C_RegisterInfo::default_instance_,
      SR2C_RegisterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2C_RegisterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2C_RegisterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SR2C_RegisterInfo));
  SR2C_RegisterInfoRet_descriptor_ = file->message_type(28);
  static const int SR2C_RegisterInfoRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2C_RegisterInfoRet, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2C_RegisterInfoRet, region_id_),
  };
  SR2C_RegisterInfoRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SR2C_RegisterInfoRet_descriptor_,
      SR2C_RegisterInfoRet::default_instance_,
      SR2C_RegisterInfoRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2C_RegisterInfoRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2C_RegisterInfoRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SR2C_RegisterInfoRet));
  SR2C_GetLobbyServersRet_descriptor_ = file->message_type(29);
  static const int SR2C_GetLobbyServersRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2C_GetLobbyServersRet, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2C_GetLobbyServersRet, port_),
  };
  SR2C_GetLobbyServersRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SR2C_GetLobbyServersRet_descriptor_,
      SR2C_GetLobbyServersRet::default_instance_,
      SR2C_GetLobbyServersRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2C_GetLobbyServersRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2C_GetLobbyServersRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SR2C_GetLobbyServersRet));
  SR2B_RegisterInfo_descriptor_ = file->message_type(30);
  static const int SR2B_RegisterInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2B_RegisterInfo, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2B_RegisterInfo, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2B_RegisterInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2B_RegisterInfo, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2B_RegisterInfo, names_),
  };
  SR2B_RegisterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SR2B_RegisterInfo_descriptor_,
      SR2B_RegisterInfo::default_instance_,
      SR2B_RegisterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2B_RegisterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2B_RegisterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SR2B_RegisterInfo));
  SR2B_RegisterInfoRet_descriptor_ = file->message_type(31);
  static const int SR2B_RegisterInfoRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2B_RegisterInfoRet, result_),
  };
  SR2B_RegisterInfoRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SR2B_RegisterInfoRet_descriptor_,
      SR2B_RegisterInfoRet::default_instance_,
      SR2B_RegisterInfoRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2B_RegisterInfoRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2B_RegisterInfoRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SR2B_RegisterInfoRet));
  CountryWithAddress_descriptor_ = file->message_type(32);
  static const int CountryWithAddress_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryWithAddress, addresses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryWithAddress, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryWithAddress, prepareendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryWithAddress, uniqueid_),
  };
  CountryWithAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountryWithAddress_descriptor_,
      CountryWithAddress::default_instance_,
      CountryWithAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryWithAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryWithAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountryWithAddress));
  SL2G_DevideCrossServers_descriptor_ = file->message_type(33);
  static const int SL2G_DevideCrossServers_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL2G_DevideCrossServers, country_addresses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL2G_DevideCrossServers, curstate_),
  };
  SL2G_DevideCrossServers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SL2G_DevideCrossServers_descriptor_,
      SL2G_DevideCrossServers::default_instance_,
      SL2G_DevideCrossServers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL2G_DevideCrossServers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL2G_DevideCrossServers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SL2G_DevideCrossServers));
  SR2E_RegisterInfo_descriptor_ = file->message_type(34);
  static const int SR2E_RegisterInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2E_RegisterInfo, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2E_RegisterInfo, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2E_RegisterInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2E_RegisterInfo, port_),
  };
  SR2E_RegisterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SR2E_RegisterInfo_descriptor_,
      SR2E_RegisterInfo::default_instance_,
      SR2E_RegisterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2E_RegisterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2E_RegisterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SR2E_RegisterInfo));
  SR2E_RegisterInfoRet_descriptor_ = file->message_type(35);
  static const int SR2E_RegisterInfoRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2E_RegisterInfoRet, result_),
  };
  SR2E_RegisterInfoRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SR2E_RegisterInfoRet_descriptor_,
      SR2E_RegisterInfoRet::default_instance_,
      SR2E_RegisterInfoRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2E_RegisterInfoRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2E_RegisterInfoRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SR2E_RegisterInfoRet));
  SB2C_RegisterInfo_descriptor_ = file->message_type(36);
  static const int SB2C_RegisterInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SB2C_RegisterInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SB2C_RegisterInfo, port_),
  };
  SB2C_RegisterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SB2C_RegisterInfo_descriptor_,
      SB2C_RegisterInfo::default_instance_,
      SB2C_RegisterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SB2C_RegisterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SB2C_RegisterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SB2C_RegisterInfo));
  SB2C_RegisterInfoRet_descriptor_ = file->message_type(37);
  static const int SB2C_RegisterInfoRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SB2C_RegisterInfoRet, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SB2C_RegisterInfoRet, region_id_),
  };
  SB2C_RegisterInfoRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SB2C_RegisterInfoRet_descriptor_,
      SB2C_RegisterInfoRet::default_instance_,
      SB2C_RegisterInfoRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SB2C_RegisterInfoRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SB2C_RegisterInfoRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SB2C_RegisterInfoRet));
  SB2E_RegisterInfo_descriptor_ = file->message_type(38);
  static const int SB2E_RegisterInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SB2E_RegisterInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SB2E_RegisterInfo, port_),
  };
  SB2E_RegisterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SB2E_RegisterInfo_descriptor_,
      SB2E_RegisterInfo::default_instance_,
      SB2E_RegisterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SB2E_RegisterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SB2E_RegisterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SB2E_RegisterInfo));
  SB2E_RegisterInfoRet_descriptor_ = file->message_type(39);
  static const int SB2E_RegisterInfoRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SB2E_RegisterInfoRet, result_),
  };
  SB2E_RegisterInfoRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SB2E_RegisterInfoRet_descriptor_,
      SB2E_RegisterInfoRet::default_instance_,
      SB2E_RegisterInfoRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SB2E_RegisterInfoRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SB2E_RegisterInfoRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SB2E_RegisterInfoRet));
  SL2C_RegisterInfo_descriptor_ = file->message_type(40);
  static const int SL2C_RegisterInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL2C_RegisterInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL2C_RegisterInfo, port_),
  };
  SL2C_RegisterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SL2C_RegisterInfo_descriptor_,
      SL2C_RegisterInfo::default_instance_,
      SL2C_RegisterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL2C_RegisterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL2C_RegisterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SL2C_RegisterInfo));
  SL2C_RegisterInfoRet_descriptor_ = file->message_type(41);
  static const int SL2C_RegisterInfoRet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL2C_RegisterInfoRet, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL2C_RegisterInfoRet, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL2C_RegisterInfoRet, web_url_),
  };
  SL2C_RegisterInfoRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SL2C_RegisterInfoRet_descriptor_,
      SL2C_RegisterInfoRet::default_instance_,
      SL2C_RegisterInfoRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL2C_RegisterInfoRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL2C_RegisterInfoRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SL2C_RegisterInfoRet));
  SL2E_RegisterInfo_descriptor_ = file->message_type(42);
  static const int SL2E_RegisterInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL2E_RegisterInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL2E_RegisterInfo, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL2E_RegisterInfo, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL2E_RegisterInfo, server_id_),
  };
  SL2E_RegisterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SL2E_RegisterInfo_descriptor_,
      SL2E_RegisterInfo::default_instance_,
      SL2E_RegisterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL2E_RegisterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL2E_RegisterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SL2E_RegisterInfo));
  SL2E_RegisterInfoRet_descriptor_ = file->message_type(43);
  static const int SL2E_RegisterInfoRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL2E_RegisterInfoRet, result_),
  };
  SL2E_RegisterInfoRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SL2E_RegisterInfoRet_descriptor_,
      SL2E_RegisterInfoRet::default_instance_,
      SL2E_RegisterInfoRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL2E_RegisterInfoRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SL2E_RegisterInfoRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SL2E_RegisterInfoRet));
  SE2C_RegisterInfo_descriptor_ = file->message_type(44);
  static const int SE2C_RegisterInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SE2C_RegisterInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SE2C_RegisterInfo, port_),
  };
  SE2C_RegisterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SE2C_RegisterInfo_descriptor_,
      SE2C_RegisterInfo::default_instance_,
      SE2C_RegisterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SE2C_RegisterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SE2C_RegisterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SE2C_RegisterInfo));
  SE2C_RegisterInfoRet_descriptor_ = file->message_type(45);
  static const int SE2C_RegisterInfoRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SE2C_RegisterInfoRet, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SE2C_RegisterInfoRet, region_id_),
  };
  SE2C_RegisterInfoRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SE2C_RegisterInfoRet_descriptor_,
      SE2C_RegisterInfoRet::default_instance_,
      SE2C_RegisterInfoRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SE2C_RegisterInfoRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SE2C_RegisterInfoRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SE2C_RegisterInfoRet));
  EventParm_descriptor_ = file->message_type(46);
  static const int EventParm_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventParm, parm_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventParm, value_int32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventParm, value_uint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventParm, value_int64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventParm, value_uint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventParm, value_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventParm, value_float_),
  };
  EventParm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventParm_descriptor_,
      EventParm::default_instance_,
      EventParm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventParm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventParm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventParm));
  EventParm_ParmType_descriptor_ = EventParm_descriptor_->enum_type(0);
  Server_Event_descriptor_ = file->message_type(47);
  static const int Server_Event_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server_Event, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server_Event, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server_Event, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server_Event, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server_Event, params_),
  };
  Server_Event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Server_Event_descriptor_,
      Server_Event::default_instance_,
      Server_Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server_Event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server_Event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Server_Event));
  Server_Events_descriptor_ = file->message_type(48);
  static const int Server_Events_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server_Events, logs_),
  };
  Server_Events_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Server_Events_descriptor_,
      Server_Events::default_instance_,
      Server_Events_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server_Events, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server_Events, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Server_Events));
  Version_descriptor_ = file->message_type(49);
  static const int Version_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, platform_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, min_version_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, max_version_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, is_hot_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, max_version_address_),
  };
  Version_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Version_descriptor_,
      Version::default_instance_,
      Version_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Version));
  OneVersionInfo_descriptor_ = file->message_type(50);
  static const int OneVersionInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVersionInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVersionInfo, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVersionInfo, platform_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVersionInfo, version_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVersionInfo, resource_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVersionInfo, notice_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVersionInfo, resource_address_),
  };
  OneVersionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneVersionInfo_descriptor_,
      OneVersionInfo::default_instance_,
      OneVersionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVersionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVersionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneVersionInfo));
  SG2L_RegisterInfo_descriptor_ = file->message_type(51);
  static const int SG2L_RegisterInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2L_RegisterInfo, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2L_RegisterInfo, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2L_RegisterInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2L_RegisterInfo, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2L_RegisterInfo, player_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2L_RegisterInfo, logical_update_ms_),
  };
  SG2L_RegisterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2L_RegisterInfo_descriptor_,
      SG2L_RegisterInfo::default_instance_,
      SG2L_RegisterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2L_RegisterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2L_RegisterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2L_RegisterInfo));
  SG2L_RegisterInfoRet_descriptor_ = file->message_type(52);
  static const int SG2L_RegisterInfoRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2L_RegisterInfoRet, result_),
  };
  SG2L_RegisterInfoRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2L_RegisterInfoRet_descriptor_,
      SG2L_RegisterInfoRet::default_instance_,
      SG2L_RegisterInfoRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2L_RegisterInfoRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2L_RegisterInfoRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2L_RegisterInfoRet));
  SG2D_RegisterInfo_descriptor_ = file->message_type(53);
  static const int SG2D_RegisterInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_RegisterInfo, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_RegisterInfo, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_RegisterInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_RegisterInfo, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_RegisterInfo, names_),
  };
  SG2D_RegisterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2D_RegisterInfo_descriptor_,
      SG2D_RegisterInfo::default_instance_,
      SG2D_RegisterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_RegisterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_RegisterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2D_RegisterInfo));
  SG2D_RegisterInfoRet_descriptor_ = file->message_type(54);
  static const int SG2D_RegisterInfoRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_RegisterInfoRet, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_RegisterInfoRet, pvp_table_size_),
  };
  SG2D_RegisterInfoRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2D_RegisterInfoRet_descriptor_,
      SG2D_RegisterInfoRet::default_instance_,
      SG2D_RegisterInfoRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_RegisterInfoRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_RegisterInfoRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2D_RegisterInfoRet));
  SG2D_GetPlayerList_descriptor_ = file->message_type(55);
  static const int SG2D_GetPlayerList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_GetPlayerList, account_id_),
  };
  SG2D_GetPlayerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2D_GetPlayerList_descriptor_,
      SG2D_GetPlayerList::default_instance_,
      SG2D_GetPlayerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_GetPlayerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_GetPlayerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2D_GetPlayerList));
  SG2L_UpdatePlayerLockType_descriptor_ = file->message_type(56);
  static const int SG2L_UpdatePlayerLockType_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2L_UpdatePlayerLockType, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2L_UpdatePlayerLockType, account_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2L_UpdatePlayerLockType, lock_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2L_UpdatePlayerLockType, locktype_),
  };
  SG2L_UpdatePlayerLockType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2L_UpdatePlayerLockType_descriptor_,
      SG2L_UpdatePlayerLockType::default_instance_,
      SG2L_UpdatePlayerLockType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2L_UpdatePlayerLockType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2L_UpdatePlayerLockType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2L_UpdatePlayerLockType));
  SG2D_CreatePlayer_descriptor_ = file->message_type(57);
  static const int SG2D_CreatePlayer_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_CreatePlayer, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_CreatePlayer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_CreatePlayer, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_CreatePlayer, card_solution_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_CreatePlayer, sdk_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_CreatePlayer, platform_id_),
  };
  SG2D_CreatePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2D_CreatePlayer_descriptor_,
      SG2D_CreatePlayer::default_instance_,
      SG2D_CreatePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_CreatePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_CreatePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2D_CreatePlayer));
  SG2D_SelectPlayer_descriptor_ = file->message_type(58);
  static const int SG2D_SelectPlayer_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_SelectPlayer, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_SelectPlayer, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_SelectPlayer, platform_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_SelectPlayer, is_quick_login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_SelectPlayer, country_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_SelectPlayer, headpic_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_SelectPlayer, expected_country_id_),
  };
  SG2D_SelectPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2D_SelectPlayer_descriptor_,
      SG2D_SelectPlayer::default_instance_,
      SG2D_SelectPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_SelectPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_SelectPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2D_SelectPlayer));
  SG2D_Player_Id_descriptor_ = file->message_type(59);
  static const int SG2D_Player_Id_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Player_Id, player_id_),
  };
  SG2D_Player_Id_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2D_Player_Id_descriptor_,
      SG2D_Player_Id::default_instance_,
      SG2D_Player_Id_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Player_Id, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Player_Id, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2D_Player_Id));
  SG2D_UpdataStageLevel_descriptor_ = file->message_type(60);
  static const int SG2D_UpdataStageLevel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_UpdataStageLevel, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_UpdataStageLevel, info_),
  };
  SG2D_UpdataStageLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2D_UpdataStageLevel_descriptor_,
      SG2D_UpdataStageLevel::default_instance_,
      SG2D_UpdataStageLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_UpdataStageLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_UpdataStageLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2D_UpdataStageLevel));
  SG2D_Forbiden_Player_descriptor_ = file->message_type(61);
  static const int SG2D_Forbiden_Player_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Forbiden_Player, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Forbiden_Player, forbidid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Forbiden_Player, time_),
  };
  SG2D_Forbiden_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2D_Forbiden_Player_descriptor_,
      SG2D_Forbiden_Player::default_instance_,
      SG2D_Forbiden_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Forbiden_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Forbiden_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2D_Forbiden_Player));
  SD2G_Forbiden_Player_Ret_descriptor_ = file->message_type(62);
  static const int SD2G_Forbiden_Player_Ret_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD2G_Forbiden_Player_Ret, acountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD2G_Forbiden_Player_Ret, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD2G_Forbiden_Player_Ret, forbidid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD2G_Forbiden_Player_Ret, time_),
  };
  SD2G_Forbiden_Player_Ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SD2G_Forbiden_Player_Ret_descriptor_,
      SD2G_Forbiden_Player_Ret::default_instance_,
      SD2G_Forbiden_Player_Ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD2G_Forbiden_Player_Ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD2G_Forbiden_Player_Ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SD2G_Forbiden_Player_Ret));
  SG2D_UpdataFuBenBase_descriptor_ = file->message_type(63);
  static const int SG2D_UpdataFuBenBase_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_UpdataFuBenBase, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_UpdataFuBenBase, cur_fuben_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_UpdataFuBenBase, cur_stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_UpdataFuBenBase, nr_stars_),
  };
  SG2D_UpdataFuBenBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2D_UpdataFuBenBase_descriptor_,
      SG2D_UpdataFuBenBase::default_instance_,
      SG2D_UpdataFuBenBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_UpdataFuBenBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_UpdataFuBenBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2D_UpdataFuBenBase));
  SG2D_UpdataFuBenResource_descriptor_ = file->message_type(64);
  static const int SG2D_UpdataFuBenResource_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_UpdataFuBenResource, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_UpdataFuBenResource, info_),
  };
  SG2D_UpdataFuBenResource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2D_UpdataFuBenResource_descriptor_,
      SG2D_UpdataFuBenResource::default_instance_,
      SG2D_UpdataFuBenResource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_UpdataFuBenResource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_UpdataFuBenResource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2D_UpdataFuBenResource));
  SG2D_UpdataFuBenPassStage_descriptor_ = file->message_type(65);
  static const int SG2D_UpdataFuBenPassStage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_UpdataFuBenPassStage, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_UpdataFuBenPassStage, stage_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_UpdataFuBenPassStage, pass_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_UpdataFuBenPassStage, is_take_reward_),
  };
  SG2D_UpdataFuBenPassStage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2D_UpdataFuBenPassStage_descriptor_,
      SG2D_UpdataFuBenPassStage::default_instance_,
      SG2D_UpdataFuBenPassStage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_UpdataFuBenPassStage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_UpdataFuBenPassStage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2D_UpdataFuBenPassStage));
  Country_Info_Devide_descriptor_ = file->message_type(66);
  static const int Country_Info_Devide_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country_Info_Devide, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country_Info_Devide, pros_degree_),
  };
  Country_Info_Devide_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Country_Info_Devide_descriptor_,
      Country_Info_Devide::default_instance_,
      Country_Info_Devide_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country_Info_Devide, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country_Info_Devide, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Country_Info_Devide));
  SD2G_Country_AllInfo_descriptor_ = file->message_type(67);
  static const int SD2G_Country_AllInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD2G_Country_AllInfo, base_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD2G_Country_AllInfo, city_lst_),
  };
  SD2G_Country_AllInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SD2G_Country_AllInfo_descriptor_,
      SD2G_Country_AllInfo::default_instance_,
      SD2G_Country_AllInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD2G_Country_AllInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD2G_Country_AllInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SD2G_Country_AllInfo));
  SG2B_Country_Info_descriptor_ = file->message_type(68);
  static const int SG2B_Country_Info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2B_Country_Info, is_can_cross_war_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2B_Country_Info, country_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2B_Country_Info, server_id_),
  };
  SG2B_Country_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2B_Country_Info_descriptor_,
      SG2B_Country_Info::default_instance_,
      SG2B_Country_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2B_Country_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2B_Country_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2B_Country_Info));
  SB2G_Country_War_Info_descriptor_ = file->message_type(69);
  static const int SB2G_Country_War_Info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SB2G_Country_War_Info, war_info_),
  };
  SB2G_Country_War_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SB2G_Country_War_Info_descriptor_,
      SB2G_Country_War_Info::default_instance_,
      SB2G_Country_War_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SB2G_Country_War_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SB2G_Country_War_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SB2G_Country_War_Info));
  SG2R_Country_AllInfo_descriptor_ = file->message_type(70);
  static const int SG2R_Country_AllInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2R_Country_AllInfo, base_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2R_Country_AllInfo, city_lst_),
  };
  SG2R_Country_AllInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2R_Country_AllInfo_descriptor_,
      SG2R_Country_AllInfo::default_instance_,
      SG2R_Country_AllInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2R_Country_AllInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2R_Country_AllInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2R_Country_AllInfo));
  GobalValue_descriptor_ = file->message_type(71);
  static const int GobalValue_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GobalValue, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GobalValue, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GobalValue, i64_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GobalValue, str_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GobalValue, int_value_),
  };
  GobalValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GobalValue_descriptor_,
      GobalValue::default_instance_,
      GobalValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GobalValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GobalValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GobalValue));
  ServerGobalValue_descriptor_ = file->message_type(72);
  static const int ServerGobalValue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGobalValue, values_),
  };
  ServerGobalValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerGobalValue_descriptor_,
      ServerGobalValue::default_instance_,
      ServerGobalValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGobalValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGobalValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerGobalValue));
  BroadcastHeader_descriptor_ = file->message_type(73);
  static const int BroadcastHeader_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastHeader, type_),
  };
  BroadcastHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadcastHeader_descriptor_,
      BroadcastHeader::default_instance_,
      BroadcastHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadcastHeader));
  SW2C2L_UpdateServerInfo_descriptor_ = file->message_type(74);
  static const int SW2C2L_UpdateServerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SW2C2L_UpdateServerInfo, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SW2C2L_UpdateServerInfo, server_id_),
  };
  SW2C2L_UpdateServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SW2C2L_UpdateServerInfo_descriptor_,
      SW2C2L_UpdateServerInfo::default_instance_,
      SW2C2L_UpdateServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SW2C2L_UpdateServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SW2C2L_UpdateServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SW2C2L_UpdateServerInfo));
  SG2C2L_UpdatePerformanceInfo_descriptor_ = file->message_type(75);
  static const int SG2C2L_UpdatePerformanceInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C2L_UpdatePerformanceInfo, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C2L_UpdatePerformanceInfo, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C2L_UpdatePerformanceInfo, player_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C2L_UpdatePerformanceInfo, logical_update_ms_),
  };
  SG2C2L_UpdatePerformanceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2C2L_UpdatePerformanceInfo_descriptor_,
      SG2C2L_UpdatePerformanceInfo::default_instance_,
      SG2C2L_UpdatePerformanceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C2L_UpdatePerformanceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2C2L_UpdatePerformanceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2C2L_UpdatePerformanceInfo));
  SG2D_Broadcast_Info_descriptor_ = file->message_type(76);
  static const int SG2D_Broadcast_Info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Broadcast_Info, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Broadcast_Info, is_include_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Broadcast_Info, player_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Broadcast_Info, player_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Broadcast_Info, result_),
  };
  SG2D_Broadcast_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2D_Broadcast_Info_descriptor_,
      SG2D_Broadcast_Info::default_instance_,
      SG2D_Broadcast_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Broadcast_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Broadcast_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2D_Broadcast_Info));
  SG2G_Mail_SendMail_descriptor_ = file->message_type(77);
  static const int SG2G_Mail_SendMail_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2G_Mail_SendMail, to_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2G_Mail_SendMail, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2G_Mail_SendMail, plat_form_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2G_Mail_SendMail, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2G_Mail_SendMail, mail_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2G_Mail_SendMail, send_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2G_Mail_SendMail, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2G_Mail_SendMail, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2G_Mail_SendMail, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2G_Mail_SendMail, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2G_Mail_SendMail, items_),
  };
  SG2G_Mail_SendMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2G_Mail_SendMail_descriptor_,
      SG2G_Mail_SendMail::default_instance_,
      SG2G_Mail_SendMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2G_Mail_SendMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2G_Mail_SendMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2G_Mail_SendMail));
  SG2D_MailInfoData_descriptor_ = file->message_type(78);
  static const int SG2D_MailInfoData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_MailInfoData, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_MailInfoData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_MailInfoData, mail_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_MailInfoData, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_MailInfoData, mail_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_MailInfoData, send_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_MailInfoData, is_take_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_MailInfoData, items_),
  };
  SG2D_MailInfoData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2D_MailInfoData_descriptor_,
      SG2D_MailInfoData::default_instance_,
      SG2D_MailInfoData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_MailInfoData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_MailInfoData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2D_MailInfoData));
  SG2D_MailsOperate_descriptor_ = file->message_type(79);
  static const int SG2D_MailsOperate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_MailsOperate, operate_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_MailsOperate, mail_info_data_),
  };
  SG2D_MailsOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2D_MailsOperate_descriptor_,
      SG2D_MailsOperate::default_instance_,
      SG2D_MailsOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_MailsOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_MailsOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2D_MailsOperate));
  SG2D_Check_Mail_Recivers_Exist_descriptor_ = file->message_type(80);
  static const int SG2D_Check_Mail_Recivers_Exist_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Check_Mail_Recivers_Exist, mail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Check_Mail_Recivers_Exist, alv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Check_Mail_Recivers_Exist, blv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Check_Mail_Recivers_Exist, avip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Check_Mail_Recivers_Exist, bvip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Check_Mail_Recivers_Exist, is_server_mail_),
  };
  SG2D_Check_Mail_Recivers_Exist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2D_Check_Mail_Recivers_Exist_descriptor_,
      SG2D_Check_Mail_Recivers_Exist::default_instance_,
      SG2D_Check_Mail_Recivers_Exist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Check_Mail_Recivers_Exist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Check_Mail_Recivers_Exist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2D_Check_Mail_Recivers_Exist));
  SD2G_Check_Mail_Recivers_Exist_Rspone_descriptor_ = file->message_type(81);
  static const int SD2G_Check_Mail_Recivers_Exist_Rspone_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD2G_Check_Mail_Recivers_Exist_Rspone, mail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD2G_Check_Mail_Recivers_Exist_Rspone, is_can_send_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD2G_Check_Mail_Recivers_Exist_Rspone, alv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD2G_Check_Mail_Recivers_Exist_Rspone, blv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD2G_Check_Mail_Recivers_Exist_Rspone, avip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD2G_Check_Mail_Recivers_Exist_Rspone, bvip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD2G_Check_Mail_Recivers_Exist_Rspone, is_server_mail_),
  };
  SD2G_Check_Mail_Recivers_Exist_Rspone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SD2G_Check_Mail_Recivers_Exist_Rspone_descriptor_,
      SD2G_Check_Mail_Recivers_Exist_Rspone::default_instance_,
      SD2G_Check_Mail_Recivers_Exist_Rspone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD2G_Check_Mail_Recivers_Exist_Rspone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD2G_Check_Mail_Recivers_Exist_Rspone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SD2G_Check_Mail_Recivers_Exist_Rspone));
  SG2D_Friend_Operate_descriptor_ = file->message_type(82);
  static const int SG2D_Friend_Operate_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Friend_Operate, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Friend_Operate, friendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Friend_Operate, listtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Friend_Operate, operate_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Friend_Operate, is_send_ap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Friend_Operate, ap_value_),
  };
  SG2D_Friend_Operate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2D_Friend_Operate_descriptor_,
      SG2D_Friend_Operate::default_instance_,
      SG2D_Friend_Operate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Friend_Operate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Friend_Operate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2D_Friend_Operate));
  SD2G_Friend_Operate_Res_descriptor_ = file->message_type(83);
  static const int SD2G_Friend_Operate_Res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD2G_Friend_Operate_Res, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD2G_Friend_Operate_Res, result_),
  };
  SD2G_Friend_Operate_Res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SD2G_Friend_Operate_Res_descriptor_,
      SD2G_Friend_Operate_Res::default_instance_,
      SD2G_Friend_Operate_Res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD2G_Friend_Operate_Res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD2G_Friend_Operate_Res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SD2G_Friend_Operate_Res));
  SG2D_Crusade_Stage_descriptor_ = file->message_type(84);
  static const int SG2D_Crusade_Stage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Crusade_Stage, restreset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Crusade_Stage, currfuben_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Crusade_Stage, currstage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Crusade_Stage, isdead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Crusade_Stage, addchartimes_),
  };
  SG2D_Crusade_Stage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SG2D_Crusade_Stage_descriptor_,
      SG2D_Crusade_Stage::default_instance_,
      SG2D_Crusade_Stage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Crusade_Stage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SG2D_Crusade_Stage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SG2D_Crusade_Stage));
  GS2C_Select_Country_Rsp_descriptor_ = file->message_type(85);
  static const int GS2C_Select_Country_Rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Select_Country_Rsp, country_id_),
  };
  GS2C_Select_Country_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Select_Country_Rsp_descriptor_,
      GS2C_Select_Country_Rsp::default_instance_,
      GS2C_Select_Country_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Select_Country_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Select_Country_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Select_Country_Rsp));
  SD2G_All_player_has_sync_descriptor_ = file->message_type(86);
  static const int SD2G_All_player_has_sync_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD2G_All_player_has_sync, result_),
  };
  SD2G_All_player_has_sync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SD2G_All_player_has_sync_descriptor_,
      SD2G_All_player_has_sync::default_instance_,
      SD2G_All_player_has_sync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD2G_All_player_has_sync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD2G_All_player_has_sync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SD2G_All_player_has_sync));
  Activity_Occupy_City_Num_descriptor_ = file->message_type(87);
  static const int Activity_Occupy_City_Num_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_Occupy_City_Num, country_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_Occupy_City_Num, city_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_Occupy_City_Num, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_Occupy_City_Num, region_id_),
  };
  Activity_Occupy_City_Num_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_Occupy_City_Num_descriptor_,
      Activity_Occupy_City_Num::default_instance_,
      Activity_Occupy_City_Num_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_Occupy_City_Num, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity_Occupy_City_Num, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity_Occupy_City_Num));
  SD2G_Activity_Occupy_City_Num_descriptor_ = file->message_type(88);
  static const int SD2G_Activity_Occupy_City_Num_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD2G_Activity_Occupy_City_Num, info_),
  };
  SD2G_Activity_Occupy_City_Num_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SD2G_Activity_Occupy_City_Num_descriptor_,
      SD2G_Activity_Occupy_City_Num::default_instance_,
      SD2G_Activity_Occupy_City_Num_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD2G_Activity_Occupy_City_Num, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD2G_Activity_Occupy_City_Num, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SD2G_Activity_Occupy_City_Num));
  SR2G_AwardTakePlayer_descriptor_ = file->message_type(89);
  static const int SR2G_AwardTakePlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2G_AwardTakePlayer, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2G_AwardTakePlayer, rewards_),
  };
  SR2G_AwardTakePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SR2G_AwardTakePlayer_descriptor_,
      SR2G_AwardTakePlayer::default_instance_,
      SR2G_AwardTakePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2G_AwardTakePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SR2G_AwardTakePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SR2G_AwardTakePlayer));
  RegisterResult_descriptor_ = file->enum_type(0);
  ACCOUNT_LOCK_TYPE_descriptor_ = file->enum_type(1);
  ACCOUNT_LOCK_OP_TYPE_descriptor_ = file->enum_type(2);
  ValueType_descriptor_ = file->enum_type(3);
  ValueIndex_descriptor_ = file->enum_type(4);
  BROADCAST_TYPE_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_InterServer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Address_descriptor_, &Address::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetEventLogServersRet_descriptor_, &GetEventLogServersRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PingInfo_descriptor_, &PingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PongInfo_descriptor_, &PongInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2C_RegisterInfo_descriptor_, &SG2C_RegisterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2C_RegisterInfoRet_descriptor_, &SG2C_RegisterInfoRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2C_GetLoinServersRet_descriptor_, &SG2C_GetLoinServersRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2C_GetCrossServersRet_descriptor_, &SG2C_GetCrossServersRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2C_Exchange_Gift_Code_descriptor_, &SG2C_Exchange_Gift_Code::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2C_Exchange_Gift_Code_Ret_descriptor_, &SG2C_Exchange_Gift_Code_Ret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2C_FeedBack_descriptor_, &SG2C_FeedBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2C_FeedBack_Ret_descriptor_, &SG2C_FeedBack_Ret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC2G_activity_proto_descriptor_, &SC2G_activity_proto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC2G_activity_plan_descriptor_, &SC2G_activity_plan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC2G_server_open_time_descriptor_, &SC2G_server_open_time::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC2G_activity_reward_descriptor_, &SC2G_activity_reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC2G_activity_package_descriptor_, &SC2G_activity_package::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC2G_activity_package_Update_descriptor_, &SC2G_activity_package_Update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC2G_ReloadPayItem_descriptor_, &SC2G_ReloadPayItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_activity_update_info_descriptor_, &MSG_activity_update_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2E_RegisterInfo_descriptor_, &SG2E_RegisterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2E_RegisterInfoRet_descriptor_, &SG2E_RegisterInfoRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2B_RegisterInfo_descriptor_, &SG2B_RegisterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2B_RegisterInfoRet_descriptor_, &SG2B_RegisterInfoRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2R_RegisterInfo_descriptor_, &SG2R_RegisterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2R_RegisterInfoRet_descriptor_, &SG2R_RegisterInfoRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2R_RegisterPlayerInfoRet_descriptor_, &SG2R_RegisterPlayerInfoRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SR2C_RegisterInfo_descriptor_, &SR2C_RegisterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SR2C_RegisterInfoRet_descriptor_, &SR2C_RegisterInfoRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SR2C_GetLobbyServersRet_descriptor_, &SR2C_GetLobbyServersRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SR2B_RegisterInfo_descriptor_, &SR2B_RegisterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SR2B_RegisterInfoRet_descriptor_, &SR2B_RegisterInfoRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountryWithAddress_descriptor_, &CountryWithAddress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SL2G_DevideCrossServers_descriptor_, &SL2G_DevideCrossServers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SR2E_RegisterInfo_descriptor_, &SR2E_RegisterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SR2E_RegisterInfoRet_descriptor_, &SR2E_RegisterInfoRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SB2C_RegisterInfo_descriptor_, &SB2C_RegisterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SB2C_RegisterInfoRet_descriptor_, &SB2C_RegisterInfoRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SB2E_RegisterInfo_descriptor_, &SB2E_RegisterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SB2E_RegisterInfoRet_descriptor_, &SB2E_RegisterInfoRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SL2C_RegisterInfo_descriptor_, &SL2C_RegisterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SL2C_RegisterInfoRet_descriptor_, &SL2C_RegisterInfoRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SL2E_RegisterInfo_descriptor_, &SL2E_RegisterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SL2E_RegisterInfoRet_descriptor_, &SL2E_RegisterInfoRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SE2C_RegisterInfo_descriptor_, &SE2C_RegisterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SE2C_RegisterInfoRet_descriptor_, &SE2C_RegisterInfoRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventParm_descriptor_, &EventParm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Server_Event_descriptor_, &Server_Event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Server_Events_descriptor_, &Server_Events::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Version_descriptor_, &Version::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneVersionInfo_descriptor_, &OneVersionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2L_RegisterInfo_descriptor_, &SG2L_RegisterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2L_RegisterInfoRet_descriptor_, &SG2L_RegisterInfoRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2D_RegisterInfo_descriptor_, &SG2D_RegisterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2D_RegisterInfoRet_descriptor_, &SG2D_RegisterInfoRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2D_GetPlayerList_descriptor_, &SG2D_GetPlayerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2L_UpdatePlayerLockType_descriptor_, &SG2L_UpdatePlayerLockType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2D_CreatePlayer_descriptor_, &SG2D_CreatePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2D_SelectPlayer_descriptor_, &SG2D_SelectPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2D_Player_Id_descriptor_, &SG2D_Player_Id::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2D_UpdataStageLevel_descriptor_, &SG2D_UpdataStageLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2D_Forbiden_Player_descriptor_, &SG2D_Forbiden_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SD2G_Forbiden_Player_Ret_descriptor_, &SD2G_Forbiden_Player_Ret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2D_UpdataFuBenBase_descriptor_, &SG2D_UpdataFuBenBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2D_UpdataFuBenResource_descriptor_, &SG2D_UpdataFuBenResource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2D_UpdataFuBenPassStage_descriptor_, &SG2D_UpdataFuBenPassStage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Country_Info_Devide_descriptor_, &Country_Info_Devide::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SD2G_Country_AllInfo_descriptor_, &SD2G_Country_AllInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2B_Country_Info_descriptor_, &SG2B_Country_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SB2G_Country_War_Info_descriptor_, &SB2G_Country_War_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2R_Country_AllInfo_descriptor_, &SG2R_Country_AllInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GobalValue_descriptor_, &GobalValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerGobalValue_descriptor_, &ServerGobalValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadcastHeader_descriptor_, &BroadcastHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SW2C2L_UpdateServerInfo_descriptor_, &SW2C2L_UpdateServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2C2L_UpdatePerformanceInfo_descriptor_, &SG2C2L_UpdatePerformanceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2D_Broadcast_Info_descriptor_, &SG2D_Broadcast_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2G_Mail_SendMail_descriptor_, &SG2G_Mail_SendMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2D_MailInfoData_descriptor_, &SG2D_MailInfoData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2D_MailsOperate_descriptor_, &SG2D_MailsOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2D_Check_Mail_Recivers_Exist_descriptor_, &SG2D_Check_Mail_Recivers_Exist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SD2G_Check_Mail_Recivers_Exist_Rspone_descriptor_, &SD2G_Check_Mail_Recivers_Exist_Rspone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2D_Friend_Operate_descriptor_, &SG2D_Friend_Operate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SD2G_Friend_Operate_Res_descriptor_, &SD2G_Friend_Operate_Res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SG2D_Crusade_Stage_descriptor_, &SG2D_Crusade_Stage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Select_Country_Rsp_descriptor_, &GS2C_Select_Country_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SD2G_All_player_has_sync_descriptor_, &SD2G_All_player_has_sync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_Occupy_City_Num_descriptor_, &Activity_Occupy_City_Num::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SD2G_Activity_Occupy_City_Num_descriptor_, &SD2G_Activity_Occupy_City_Num::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SR2G_AwardTakePlayer_descriptor_, &SR2G_AwardTakePlayer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_InterServer_2eproto() {
  delete Address::default_instance_;
  delete Address_reflection_;
  delete GetEventLogServersRet::default_instance_;
  delete GetEventLogServersRet_reflection_;
  delete PingInfo::default_instance_;
  delete PingInfo_reflection_;
  delete PongInfo::default_instance_;
  delete PongInfo_reflection_;
  delete SG2C_RegisterInfo::default_instance_;
  delete SG2C_RegisterInfo_reflection_;
  delete SG2C_RegisterInfoRet::default_instance_;
  delete SG2C_RegisterInfoRet_reflection_;
  delete SG2C_GetLoinServersRet::default_instance_;
  delete SG2C_GetLoinServersRet_reflection_;
  delete SG2C_GetCrossServersRet::default_instance_;
  delete SG2C_GetCrossServersRet_reflection_;
  delete SG2C_Exchange_Gift_Code::default_instance_;
  delete SG2C_Exchange_Gift_Code_reflection_;
  delete SG2C_Exchange_Gift_Code_Ret::default_instance_;
  delete SG2C_Exchange_Gift_Code_Ret_reflection_;
  delete SG2C_FeedBack::default_instance_;
  delete SG2C_FeedBack_reflection_;
  delete SG2C_FeedBack_Ret::default_instance_;
  delete SG2C_FeedBack_Ret_reflection_;
  delete SC2G_activity_proto::default_instance_;
  delete SC2G_activity_proto_reflection_;
  delete SC2G_activity_plan::default_instance_;
  delete SC2G_activity_plan_reflection_;
  delete SC2G_server_open_time::default_instance_;
  delete SC2G_server_open_time_reflection_;
  delete SC2G_activity_reward::default_instance_;
  delete SC2G_activity_reward_reflection_;
  delete SC2G_activity_package::default_instance_;
  delete SC2G_activity_package_reflection_;
  delete SC2G_activity_package_Update::default_instance_;
  delete SC2G_activity_package_Update_reflection_;
  delete SC2G_ReloadPayItem::default_instance_;
  delete SC2G_ReloadPayItem_reflection_;
  delete MSG_activity_update_info::default_instance_;
  delete MSG_activity_update_info_reflection_;
  delete SG2E_RegisterInfo::default_instance_;
  delete SG2E_RegisterInfo_reflection_;
  delete SG2E_RegisterInfoRet::default_instance_;
  delete SG2E_RegisterInfoRet_reflection_;
  delete SG2B_RegisterInfo::default_instance_;
  delete SG2B_RegisterInfo_reflection_;
  delete SG2B_RegisterInfoRet::default_instance_;
  delete SG2B_RegisterInfoRet_reflection_;
  delete SG2R_RegisterInfo::default_instance_;
  delete SG2R_RegisterInfo_reflection_;
  delete SG2R_RegisterInfoRet::default_instance_;
  delete SG2R_RegisterInfoRet_reflection_;
  delete SG2R_RegisterPlayerInfoRet::default_instance_;
  delete SG2R_RegisterPlayerInfoRet_reflection_;
  delete SR2C_RegisterInfo::default_instance_;
  delete SR2C_RegisterInfo_reflection_;
  delete SR2C_RegisterInfoRet::default_instance_;
  delete SR2C_RegisterInfoRet_reflection_;
  delete SR2C_GetLobbyServersRet::default_instance_;
  delete SR2C_GetLobbyServersRet_reflection_;
  delete SR2B_RegisterInfo::default_instance_;
  delete SR2B_RegisterInfo_reflection_;
  delete SR2B_RegisterInfoRet::default_instance_;
  delete SR2B_RegisterInfoRet_reflection_;
  delete CountryWithAddress::default_instance_;
  delete CountryWithAddress_reflection_;
  delete SL2G_DevideCrossServers::default_instance_;
  delete SL2G_DevideCrossServers_reflection_;
  delete SR2E_RegisterInfo::default_instance_;
  delete SR2E_RegisterInfo_reflection_;
  delete SR2E_RegisterInfoRet::default_instance_;
  delete SR2E_RegisterInfoRet_reflection_;
  delete SB2C_RegisterInfo::default_instance_;
  delete SB2C_RegisterInfo_reflection_;
  delete SB2C_RegisterInfoRet::default_instance_;
  delete SB2C_RegisterInfoRet_reflection_;
  delete SB2E_RegisterInfo::default_instance_;
  delete SB2E_RegisterInfo_reflection_;
  delete SB2E_RegisterInfoRet::default_instance_;
  delete SB2E_RegisterInfoRet_reflection_;
  delete SL2C_RegisterInfo::default_instance_;
  delete SL2C_RegisterInfo_reflection_;
  delete SL2C_RegisterInfoRet::default_instance_;
  delete SL2C_RegisterInfoRet_reflection_;
  delete SL2E_RegisterInfo::default_instance_;
  delete SL2E_RegisterInfo_reflection_;
  delete SL2E_RegisterInfoRet::default_instance_;
  delete SL2E_RegisterInfoRet_reflection_;
  delete SE2C_RegisterInfo::default_instance_;
  delete SE2C_RegisterInfo_reflection_;
  delete SE2C_RegisterInfoRet::default_instance_;
  delete SE2C_RegisterInfoRet_reflection_;
  delete EventParm::default_instance_;
  delete EventParm_reflection_;
  delete Server_Event::default_instance_;
  delete Server_Event_reflection_;
  delete Server_Events::default_instance_;
  delete Server_Events_reflection_;
  delete Version::default_instance_;
  delete Version_reflection_;
  delete OneVersionInfo::default_instance_;
  delete OneVersionInfo_reflection_;
  delete SG2L_RegisterInfo::default_instance_;
  delete SG2L_RegisterInfo_reflection_;
  delete SG2L_RegisterInfoRet::default_instance_;
  delete SG2L_RegisterInfoRet_reflection_;
  delete SG2D_RegisterInfo::default_instance_;
  delete SG2D_RegisterInfo_reflection_;
  delete SG2D_RegisterInfoRet::default_instance_;
  delete SG2D_RegisterInfoRet_reflection_;
  delete SG2D_GetPlayerList::default_instance_;
  delete SG2D_GetPlayerList_reflection_;
  delete SG2L_UpdatePlayerLockType::default_instance_;
  delete SG2L_UpdatePlayerLockType_reflection_;
  delete SG2D_CreatePlayer::default_instance_;
  delete SG2D_CreatePlayer_reflection_;
  delete SG2D_SelectPlayer::default_instance_;
  delete SG2D_SelectPlayer_reflection_;
  delete SG2D_Player_Id::default_instance_;
  delete SG2D_Player_Id_reflection_;
  delete SG2D_UpdataStageLevel::default_instance_;
  delete SG2D_UpdataStageLevel_reflection_;
  delete SG2D_Forbiden_Player::default_instance_;
  delete SG2D_Forbiden_Player_reflection_;
  delete SD2G_Forbiden_Player_Ret::default_instance_;
  delete SD2G_Forbiden_Player_Ret_reflection_;
  delete SG2D_UpdataFuBenBase::default_instance_;
  delete SG2D_UpdataFuBenBase_reflection_;
  delete SG2D_UpdataFuBenResource::default_instance_;
  delete SG2D_UpdataFuBenResource_reflection_;
  delete SG2D_UpdataFuBenPassStage::default_instance_;
  delete SG2D_UpdataFuBenPassStage_reflection_;
  delete Country_Info_Devide::default_instance_;
  delete Country_Info_Devide_reflection_;
  delete SD2G_Country_AllInfo::default_instance_;
  delete SD2G_Country_AllInfo_reflection_;
  delete SG2B_Country_Info::default_instance_;
  delete SG2B_Country_Info_reflection_;
  delete SB2G_Country_War_Info::default_instance_;
  delete SB2G_Country_War_Info_reflection_;
  delete SG2R_Country_AllInfo::default_instance_;
  delete SG2R_Country_AllInfo_reflection_;
  delete GobalValue::default_instance_;
  delete GobalValue_reflection_;
  delete ServerGobalValue::default_instance_;
  delete ServerGobalValue_reflection_;
  delete BroadcastHeader::default_instance_;
  delete BroadcastHeader_reflection_;
  delete SW2C2L_UpdateServerInfo::default_instance_;
  delete SW2C2L_UpdateServerInfo_reflection_;
  delete SG2C2L_UpdatePerformanceInfo::default_instance_;
  delete SG2C2L_UpdatePerformanceInfo_reflection_;
  delete SG2D_Broadcast_Info::default_instance_;
  delete SG2D_Broadcast_Info_reflection_;
  delete SG2G_Mail_SendMail::default_instance_;
  delete SG2G_Mail_SendMail_reflection_;
  delete SG2D_MailInfoData::default_instance_;
  delete SG2D_MailInfoData_reflection_;
  delete SG2D_MailsOperate::default_instance_;
  delete SG2D_MailsOperate_reflection_;
  delete SG2D_Check_Mail_Recivers_Exist::default_instance_;
  delete SG2D_Check_Mail_Recivers_Exist_reflection_;
  delete SD2G_Check_Mail_Recivers_Exist_Rspone::default_instance_;
  delete SD2G_Check_Mail_Recivers_Exist_Rspone_reflection_;
  delete SG2D_Friend_Operate::default_instance_;
  delete SG2D_Friend_Operate_reflection_;
  delete SD2G_Friend_Operate_Res::default_instance_;
  delete SD2G_Friend_Operate_Res_reflection_;
  delete SG2D_Crusade_Stage::default_instance_;
  delete SG2D_Crusade_Stage_reflection_;
  delete GS2C_Select_Country_Rsp::default_instance_;
  delete GS2C_Select_Country_Rsp_reflection_;
  delete SD2G_All_player_has_sync::default_instance_;
  delete SD2G_All_player_has_sync_reflection_;
  delete Activity_Occupy_City_Num::default_instance_;
  delete Activity_Occupy_City_Num_reflection_;
  delete SD2G_Activity_Occupy_City_Num::default_instance_;
  delete SD2G_Activity_Occupy_City_Num_reflection_;
  delete SR2G_AwardTakePlayer::default_instance_;
  delete SR2G_AwardTakePlayer_reflection_;
}

void protobuf_AddDesc_InterServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_Stage_2eproto();
  ::pb::protobuf_AddDesc_Fuben_2eproto();
  ::pb::protobuf_AddDesc_Item_2eproto();
  ::pb::protobuf_AddDesc_Mail_2eproto();
  ::pb::protobuf_AddDesc_CommomDef_2eproto();
  ::pb::protobuf_AddDesc_City_2eproto();
  ::pb::protobuf_AddDesc_Country_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021InterServer.proto\022\002pb\032\013Stage.proto\032\013Fu"
    "ben.proto\032\nItem.proto\032\nMail.proto\032\017Commo"
    "mDef.proto\032\nCity.proto\032\rCountry.proto\"#\n"
    "\007Address\022\n\n\002ip\030\001 \002(\t\022\014\n\004port\030\002 \002(\t\"7\n\025Ge"
    "tEventLogServersRet\022\036\n\taddresses\030\001 \002(\0132\013"
    ".pb.Address\"2\n\010PingInfo\022\017\n\007time_ms\030\001 \002(\004"
    "\022\025\n\rdelay_time_ms\030\002 \001(\004\"\033\n\010PongInfo\022\017\n\007t"
    "ime_ms\030\001 \002(\004\"O\n\021SG2C_RegisterInfo\022\021\n\tser"
    "ver_id\030\001 \002(\005\022\n\n\002ip\030\002 \002(\t\022\014\n\004port\030\003 \002(\t\022\r"
    "\n\005names\030\004 \003(\t\"^\n\024SG2C_RegisterInfoRet\022\"\n"
    "\006result\030\001 \002(\0162\022.pb.RegisterResult\022\021\n\treg"
    "ion_id\030\002 \001(\005\022\017\n\007web_url\030\003 \001(\t\"8\n\026SG2C_Ge"
    "tLoinServersRet\022\036\n\taddresses\030\001 \003(\0132\013.pb."
    "Address\"9\n\027SG2C_GetCrossServersRet\022\036\n\tad"
    "dresses\030\001 \003(\0132\013.pb.Address\"P\n\027SG2C_Excha"
    "nge_Gift_Code\022\021\n\tplayer_id\030\001 \002(\004\022\021\n\tgift"
    "_code\030\002 \002(\t\022\017\n\007channel\030\003 \001(\005\"y\n\033SG2C_Exc"
    "hange_Gift_Code_Ret\022\022\n\nis_success\030\001 \002(\010\022"
    "\021\n\tplayer_id\030\002 \002(\004\022\020\n\010giftName\030\003 \001(\t\022\r\n\005"
    "gifts\030\004 \001(\t\022\022\n\nerror_code\030\005 \001(\005\"H\n\rSG2C_"
    "FeedBack\022\020\n\010playerId\030\001 \002(\004\022\023\n\013player_nam"
    "e\030\002 \001(\t\022\020\n\010feedback\030\003 \001(\t\"N\n\021SG2C_FeedBa"
    "ck_Ret\022\022\n\nis_success\030\001 \002(\010\022\021\n\tplayer_id\030"
    "\002 \002(\004\022\022\n\nerror_code\030\003 \001(\005\"Q\n\023SC2G_activi"
    "ty_proto\022\020\n\010table_id\030\001 \001(\004\022\023\n\013act_type_i"
    "d\030\002 \001(\r\022\023\n\013reward_type\030\003 \001(\r\"\225\002\n\022SC2G_ac"
    "tivity_plan\022\020\n\010table_id\030\014 \001(\004\022\023\n\013activit"
    "y_id\030\001 \001(\r\022\020\n\010open_way\030\002 \001(\r\022\022\n\nstart_ti"
    "me\030\003 \001(\r\022\021\n\tlast_time\030\004 \001(\r\022\021\n\tshow_time"
    "\030\005 \001(\r\022\022\n\nstart_date\030\006 \001(\004\022\020\n\010end_date\030\007"
    " \001(\004\022\025\n\rend_show_date\030\010 \001(\004\022\022\n\nstage_are"
    "a\030\t \001(\t\022\036\n\026need_greater_than_open\030\n \001(\r\022"
    "\033\n\023need_less_than_open\030\013 \001(\r\"O\n\025SC2G_ser"
    "ver_open_time\022\020\n\010table_id\030\003 \001(\004\022\021\n\tserve"
    "r_id\030\001 \001(\r\022\021\n\topen_time\030\002 \001(\004\"\250\001\n\024SC2G_a"
    "ctivity_reward\022\020\n\010table_id\030\001 \001(\004\022\023\n\013acti"
    "vity_id\030\002 \001(\r\022\022\n\ncost_price\030\003 \001(\r\022\027\n\017is_"
    "has_discount\030\004 \001(\r\022\025\n\rcost_discount\030\005 \001("
    "\r\022\020\n\010conditon\030\006 \001(\r\022\023\n\013reward_list\030\007 \001(\t"
    "\"\337\001\n\025SC2G_activity_package\022/\n\016activity_p"
    "roto\030\001 \003(\0132\027.pb.SC2G_activity_proto\022-\n\ra"
    "ctivity_plan\030\002 \003(\0132\026.pb.SC2G_activity_pl"
    "an\0223\n\020server_open_time\030\003 \003(\0132\031.pb.SC2G_s"
    "erver_open_time\0221\n\017activity_reward\030\004 \003(\013"
    "2\030.pb.SC2G_activity_reward\"[\n\034SC2G_activ"
    "ity_package_Update\022+\n\010all_info\030\001 \002(\0132\031.p"
    "b.SC2G_activity_package\022\016\n\006update\030\002 \002(\r\""
    "\'\n\022SC2G_ReloadPayItem\022\021\n\tregion_id\030\001 \001(\005"
    "\"\211\002\n\030MSG_activity_update_info\022\023\n\013activit"
    "y_id\030\001 \002(\r\022\020\n\010open_way\030\002 \002(\r\022\022\n\nstart_ti"
    "me\030\003 \001(\r\022\021\n\tlast_time\030\004 \001(\r\022\021\n\tshow_time"
    "\030\005 \001(\r\022\022\n\nstart_date\030\006 \001(\004\022\020\n\010end_date\030\007"
    " \001(\004\022\025\n\rend_show_date\030\010 \001(\004\022\022\n\nstage_are"
    "a\030\t \001(\t\022\036\n\026need_greater_than_open\030\n \001(\r\022"
    "\033\n\023need_less_than_open\030\013 \001(\r\"S\n\021SG2E_Reg"
    "isterInfo\022\021\n\tregion_id\030\001 \002(\005\022\021\n\tserver_i"
    "d\030\002 \002(\005\022\n\n\002ip\030\003 \002(\t\022\014\n\004port\030\004 \002(\t\":\n\024SG2"
    "E_RegisterInfoRet\022\"\n\006result\030\001 \002(\0162\022.pb.R"
    "egisterResult\"b\n\021SG2B_RegisterInfo\022\021\n\tse"
    "rver_id\030\001 \002(\005\022\021\n\tregion_id\030\002 \002(\005\022\n\n\002ip\030\003"
    " \002(\t\022\014\n\004port\030\004 \002(\t\022\r\n\005names\030\005 \003(\t\":\n\024SG2"
    "B_RegisterInfoRet\022\"\n\006result\030\001 \002(\0162\022.pb.R"
    "egisterResult\"b\n\021SG2R_RegisterInfo\022\021\n\tse"
    "rver_id\030\001 \002(\005\022\021\n\tregion_id\030\002 \002(\005\022\n\n\002ip\030\003"
    " \002(\t\022\014\n\004port\030\004 \002(\t\022\r\n\005names\030\005 \003(\t\":\n\024SG2"
    "R_RegisterInfoRet\022\"\n\006result\030\001 \002(\0162\022.pb.R"
    "egisterResult\"C\n\032SG2R_RegisterPlayerInfo"
    "Ret\022\021\n\tplayer_id\030\001 \002(\004\022\022\n\nis_success\030\002 \002"
    "(\010\"O\n\021SR2C_RegisterInfo\022\021\n\tserver_id\030\001 \002"
    "(\005\022\r\n\005names\030\002 \003(\t\022\n\n\002ip\030\003 \002(\t\022\014\n\004port\030\004 "
    "\002(\t\"M\n\024SR2C_RegisterInfoRet\022\"\n\006result\030\001 "
    "\002(\0162\022.pb.RegisterResult\022\021\n\tregion_id\030\002 \001"
    "(\005\"3\n\027SR2C_GetLobbyServersRet\022\n\n\002ip\030\001 \002("
    "\t\022\014\n\004port\030\002 \002(\t\"b\n\021SR2B_RegisterInfo\022\021\n\t"
    "server_id\030\001 \002(\005\022\021\n\tregion_id\030\002 \002(\005\022\n\n\002ip"
    "\030\003 \002(\t\022\014\n\004port\030\004 \002(\t\022\r\n\005names\030\005 \003(\t\":\n\024S"
    "R2B_RegisterInfoRet\022\"\n\006result\030\001 \002(\0162\022.pb"
    ".RegisterResult\"q\n\022CountryWithAddress\022\036\n"
    "\taddresses\030\001 \001(\0132\013.pb.Address\022\021\n\tcountry"
    "id\030\002 \001(\r\022\026\n\016PrepareEndTime\030\003 \001(\004\022\020\n\010uniq"
    "ueid\030\004 \001(\r\"o\n\027SL2G_DevideCrossServers\0221\n"
    "\021Country_Addresses\030\001 \003(\0132\026.pb.CountryWit"
    "hAddress\022!\n\010CurState\030\002 \002(\0162\017.pb.CROSS_ST"
    "ATE\"S\n\021SR2E_RegisterInfo\022\021\n\tregion_id\030\001 "
    "\002(\005\022\021\n\tserver_id\030\002 \002(\005\022\n\n\002ip\030\003 \002(\t\022\014\n\004po"
    "rt\030\004 \002(\t\":\n\024SR2E_RegisterInfoRet\022\"\n\006resu"
    "lt\030\001 \002(\0162\022.pb.RegisterResult\"-\n\021SB2C_Reg"
    "isterInfo\022\n\n\002ip\030\001 \002(\t\022\014\n\004port\030\002 \002(\t\"M\n\024S"
    "B2C_RegisterInfoRet\022\"\n\006result\030\001 \002(\0162\022.pb"
    ".RegisterResult\022\021\n\tregion_id\030\002 \001(\005\"-\n\021SB"
    "2E_RegisterInfo\022\n\n\002ip\030\001 \002(\t\022\014\n\004port\030\002 \002("
    "\t\":\n\024SB2E_RegisterInfoRet\022\"\n\006result\030\001 \002("
    "\0162\022.pb.RegisterResult\"-\n\021SL2C_RegisterIn"
    "fo\022\n\n\002ip\030\001 \002(\t\022\014\n\004port\030\002 \002(\t\"^\n\024SL2C_Reg"
    "isterInfoRet\022\"\n\006result\030\001 \002(\0162\022.pb.Regist"
    "erResult\022\021\n\tregion_id\030\002 \001(\005\022\017\n\007web_url\030\003"
    " \001(\t\"S\n\021SL2E_RegisterInfo\022\n\n\002ip\030\001 \002(\t\022\014\n"
    "\004port\030\002 \002(\t\022\021\n\tregion_id\030\003 \001(\005\022\021\n\tserver"
    "_id\030\004 \001(\005\":\n\024SL2E_RegisterInfoRet\022\"\n\006res"
    "ult\030\001 \002(\0162\022.pb.RegisterResult\"-\n\021SE2C_Re"
    "gisterInfo\022\n\n\002ip\030\001 \002(\t\022\014\n\004port\030\002 \002(\t\"M\n\024"
    "SE2C_RegisterInfoRet\022\"\n\006result\030\001 \002(\0162\022.p"
    "b.RegisterResult\022\021\n\tregion_id\030\002 \001(\005\"\205\002\n\t"
    "EventParm\022)\n\tparm_type\030\001 \002(\0162\026.pb.EventP"
    "arm.ParmType\022\023\n\013value_int32\030\002 \001(\005\022\024\n\014val"
    "ue_uint32\030\003 \001(\r\022\023\n\013value_int64\030\004 \001(\003\022\024\n\014"
    "value_uint64\030\005 \001(\004\022\021\n\tvalue_str\030\006 \001(\t\022\023\n"
    "\013value_float\030\007 \001(\002\"O\n\010ParmType\022\t\n\005INT32\020"
    "\000\022\n\n\006UINT32\020\001\022\t\n\005INT64\020\002\022\n\n\006UINT64\020\003\022\n\n\006"
    "STRING\020\004\022\t\n\005FLOAT\020\005\"t\n\014Server_Event\022\020\n\010e"
    "vent_id\030\001 \001(\005\022\022\n\naccount_id\030\002 \001(\004\022\021\n\tpla"
    "yer_id\030\003 \001(\004\022\014\n\004time\030\004 \001(\003\022\035\n\006params\030\005 \003"
    "(\0132\r.pb.EventParm\"/\n\rServer_Events\022\036\n\004lo"
    "gs\030\001 \003(\0132\020.pb.Server_Event\"\242\001\n\007Version\022\n"
    "\n\002id\030\001 \001(\r\022\022\n\nchannel_id\030\002 \001(\r\022\023\n\013platfo"
    "rm_id\030\003 \001(\r\022\026\n\016min_version_id\030\004 \001(\r\022\026\n\016m"
    "ax_version_id\030\005 \001(\r\022\025\n\ris_hot_update\030\006 \001"
    "(\r\022\033\n\023max_version_address\030\007 \001(\t\"\240\001\n\016OneV"
    "ersionInfo\022\n\n\002id\030\001 \001(\r\022\022\n\nchannel_id\030\002 \001"
    "(\r\022\023\n\013platform_id\030\003 \001(\r\022\022\n\nversion_id\030\004 "
    "\001(\r\022\023\n\013resource_id\030\005 \001(\r\022\026\n\016notice_addre"
    "ss\030\006 \001(\t\022\030\n\020resource_address\030\007 \001(\t\"\204\001\n\021S"
    "G2L_RegisterInfo\022\021\n\tregion_id\030\001 \002(\005\022\021\n\ts"
    "erver_id\030\002 \002(\005\022\n\n\002ip\030\003 \002(\t\022\014\n\004port\030\004 \002(\t"
    "\022\024\n\014player_count\030\005 \002(\005\022\031\n\021logical_update"
    "_ms\030\006 \002(\004\":\n\024SG2L_RegisterInfoRet\022\"\n\006res"
    "ult\030\001 \002(\0162\022.pb.RegisterResult\"b\n\021SG2D_Re"
    "gisterInfo\022\021\n\tserver_id\030\001 \002(\005\022\021\n\tregion_"
    "id\030\002 \002(\005\022\n\n\002ip\030\003 \002(\t\022\014\n\004port\030\004 \002(\t\022\r\n\005na"
    "mes\030\005 \003(\t\"R\n\024SG2D_RegisterInfoRet\022\"\n\006res"
    "ult\030\001 \002(\0162\022.pb.RegisterResult\022\026\n\016pvp_tab"
    "le_size\030\002 \001(\r\"(\n\022SG2D_GetPlayerList\022\022\n\na"
    "ccount_id\030\001 \002(\004\"\204\001\n\031SG2L_UpdatePlayerLoc"
    "kType\022\022\n\naccount_id\030\001 \002(\004\022\024\n\014account_nam"
    "e\030\002 \002(\t\022\021\n\tlock_time\030\003 \001(\004\022*\n\010lockType\030\004"
    " \002(\0162\030.pb.ACCOUNT_LOCK_OP_TYPE\"\215\001\n\021SG2D_"
    "CreatePlayer\022\022\n\naccount_id\030\001 \002(\004\022\014\n\004name"
    "\030\002 \002(\t\022\022\n\nchannel_id\030\003 \001(\r\022\030\n\020card_solut"
    "ion_id\030\004 \001(\r\022\023\n\013sdk_user_id\030\005 \001(\t\022\023\n\013pla"
    "tform_id\030\006 \001(\r\"\263\001\n\021SG2D_SelectPlayer\022\022\n\n"
    "account_id\030\001 \002(\004\022\021\n\tplayer_id\030\002 \002(\004\022\023\n\013p"
    "latform_id\030\003 \001(\r\022\035\n\016is_quick_login\030\004 \001(\010"
    ":\005false\022\022\n\ncountry_id\030\005 \001(\r\022\022\n\nheadpic_i"
    "d\030\006 \001(\r\022\033\n\023expected_country_id\030\007 \001(\r\"#\n\016"
    "SG2D_Player_Id\022\021\n\tplayer_id\030\001 \002(\004\"]\n\025SG2"
    "D_UpdataStageLevel\022!\n\007op_type\030\001 \002(\0162\020.pb"
    ".Data_Operate\022!\n\004info\030\002 \001(\0132\023.pb.GS2C_St"
    "ageLevel\"I\n\024SG2D_Forbiden_Player\022\021\n\tplay"
    "er_id\030\001 \001(\004\022\020\n\010forbidId\030\002 \001(\005\022\014\n\004time\030\003 "
    "\001(\005\"a\n\030SD2G_Forbiden_Player_Ret\022\020\n\010acoun"
    "tId\030\001 \002(\004\022\023\n\013player_name\030\002 \001(\t\022\020\n\010forbid"
    "Id\030\003 \001(\005\022\014\n\004time\030\004 \001(\005\"w\n\024SG2D_UpdataFuB"
    "enBase\022!\n\007op_type\030\001 \002(\0162\020.pb.Data_Operat"
    "e\022\024\n\014cur_fuben_id\030\002 \002(\r\022\024\n\014cur_stage_id\030"
    "\003 \002(\r\022\020\n\010NR_stars\030\004 \003(\r\"d\n\030SG2D_UpdataFu"
    "BenResource\022!\n\007op_type\030\001 \002(\0162\020.pb.Data_O"
    "perate\022%\n\004info\030\002 \001(\0132\027.pb.GS2C_Resource_"
    "Stage\"~\n\031SG2D_UpdataFuBenPassStage\022!\n\007op"
    "_type\030\001 \002(\0162\020.pb.Data_Operate\022\022\n\nstage_t"
    "ype\030\002 \001(\r\022\022\n\npass_count\030\003 \001(\r\022\026\n\016is_take"
    "_reward\030\004 \001(\r\"=\n\023Country_Info_Devide\022\021\n\t"
    "countryid\030\001 \001(\r\022\023\n\013Pros_degree\030\002 \001(\r\"a\n\024"
    "SD2G_Country_AllInfo\022!\n\tbase_info\030\001 \003(\0132"
    "\016.pb.CountyInfo\022&\n\010city_lst\030\002 \003(\0132\024.pb.S"
    "truct_City_Info\"o\n\021SG2B_Country_Info\022\030\n\020"
    "is_can_cross_war\030\001 \002(\010\022-\n\014country_info\030\002"
    " \003(\0132\027.pb.Country_Info_Devide\022\021\n\tserver_"
    "id\030\003 \001(\r\"B\n\025SB2G_Country_War_Info\022)\n\010war"
    "_info\030\001 \003(\0132\027.pb.CountryCrossWarInfo\"a\n\024"
    "SG2R_Country_AllInfo\022!\n\tbase_info\030\001 \003(\0132"
    "\016.pb.CountyInfo\022&\n\010city_lst\030\002 \003(\0132\024.pb.S"
    "truct_City_Info\"q\n\nGobalValue\022\r\n\005index\030\001"
    " \001(\r\022\033\n\004type\030\002 \001(\0162\r.pb.ValueType\022\021\n\ti64"
    "_value\030\003 \001(\003\022\021\n\tstr_value\030\004 \001(\t\022\021\n\tint_v"
    "alue\030\005 \001(\005\"2\n\020ServerGobalValue\022\036\n\006values"
    "\030\001 \003(\0132\016.pb.GobalValue\"3\n\017BroadcastHeade"
    "r\022 \n\004type\030\001 \002(\0162\022.pb.BROADCAST_TYPE\"\?\n\027S"
    "W2C2L_UpdateServerInfo\022\021\n\tregion_id\030\001 \002("
    "\005\022\021\n\tserver_id\030\002 \003(\005\"u\n\034SG2C2L_UpdatePer"
    "formanceInfo\022\021\n\tregion_id\030\001 \002(\005\022\021\n\tserve"
    "r_id\030\002 \002(\005\022\024\n\014player_count\030\003 \002(\005\022\031\n\021logi"
    "cal_update_ms\030\004 \002(\004\"s\n\023SG2D_Broadcast_In"
    "fo\022\016\n\006opcode\030\001 \002(\005\022\022\n\nis_include\030\002 \002(\010\022\022"
    "\n\nplayer_ids\030\003 \003(\004\022\024\n\014player_names\030\004 \003(\t"
    "\022\016\n\006result\030\005 \001(\010\"\330\001\n\022SG2G_Mail_SendMail\022"
    "\022\n\nto_players\030\001 \003(\004\022\017\n\007mail_id\030\002 \001(\004\022\021\n\t"
    "plat_form\030\003 \001(\t\022\017\n\007channel\030\004 \001(\t\022\021\n\tmail"
    "_type\030\005 \001(\005\022\021\n\tsend_type\030\006 \001(\005\022\022\n\nbegin_"
    "time\030\007 \001(\004\022\020\n\010end_time\030\010 \001(\004\022\r\n\005title\030\t "
    "\001(\t\022\017\n\007content\030\n \001(\t\022\r\n\005items\030\013 \001(\t\"\235\001\n\021"
    "SG2D_MailInfoData\022\021\n\tplayer_id\030\001 \002(\004\022\n\n\002"
    "id\030\002 \002(\004\022\021\n\tmail_type\030\003 \002(\005\022\017\n\007mail_id\030\004"
    " \001(\004\022\022\n\nmail_state\030\005 \002(\005\022\021\n\tsend_time\030\006 "
    "\001(\004\022\017\n\007is_take\030\007 \001(\010\022\r\n\005items\030\010 \001(\t\"X\n\021S"
    "G2D_MailsOperate\022\024\n\014operate_type\030\001 \002(\005\022-"
    "\n\016mail_info_data\030\002 \003(\0132\025.pb.SG2D_MailInf"
    "oData\"\224\001\n\036SG2D_Check_Mail_Recivers_Exist"
    "\022$\n\004mail\030\001 \001(\0132\026.pb.SG2G_Mail_SendMail\022\013"
    "\n\003alv\030\002 \001(\005\022\013\n\003blv\030\003 \001(\005\022\014\n\004avip\030\004 \001(\005\022\014"
    "\n\004bvip\030\005 \001(\005\022\026\n\016is_server_mail\030\006 \001(\010\"\260\001\n"
    "%SD2G_Check_Mail_Recivers_Exist_Rspone\022$"
    "\n\004mail\030\001 \001(\0132\026.pb.SG2G_Mail_SendMail\022\023\n\013"
    "is_can_send\030\002 \001(\010\022\013\n\003alv\030\003 \001(\005\022\013\n\003blv\030\004 "
    "\001(\005\022\014\n\004avip\030\005 \001(\005\022\014\n\004bvip\030\006 \001(\005\022\026\n\016is_se"
    "rver_mail\030\007 \001(\010\"\207\001\n\023SG2D_Friend_Operate\022"
    "\020\n\010playerid\030\001 \002(\004\022\020\n\010friendid\030\002 \002(\004\022\020\n\010l"
    "isttype\030\003 \002(\005\022\024\n\014operate_type\030\004 \002(\005\022\022\n\ni"
    "s_send_ap\030\005 \001(\010\022\020\n\010ap_value\030\006 \001(\010\"S\n\027SD2"
    "G_Friend_Operate_Res\022(\n\007operate\030\001 \002(\0132\027."
    "pb.SG2D_Friend_Operate\022\016\n\006result\030\002 \002(\005\"s"
    "\n\022SG2D_Crusade_Stage\022\021\n\trestReset\030\001 \002(\r\022"
    "\021\n\tcurrFuben\030\002 \002(\004\022\021\n\tcurrStage\030\003 \002(\004\022\016\n"
    "\006isDead\030\004 \002(\r\022\024\n\014addCharTimes\030\005 \002(\r\"-\n\027G"
    "S2C_Select_Country_Rsp\022\022\n\ncountry_id\030\001 \001"
    "(\r\"*\n\030SD2G_All_player_has_sync\022\016\n\006result"
    "\030\001 \001(\010\"f\n\030Activity_Occupy_City_Num\022\022\n\nco"
    "untry_id\030\001 \001(\r\022\020\n\010city_num\030\002 \001(\r\022\021\n\tserv"
    "er_id\030\003 \001(\r\022\021\n\tregion_id\030\004 \001(\r\"K\n\035SD2G_A"
    "ctivity_Occupy_City_Num\022*\n\004info\030\001 \003(\0132\034."
    "pb.Activity_Occupy_City_Num\"H\n\024SR2G_Awar"
    "dTakePlayer\022\020\n\010playerid\030\001 \001(\004\022\036\n\007rewards"
    "\030\002 \003(\0132\r.pb.PairValue*\220\001\n\016RegisterResult"
    "\022\026\n\022SERVER_REGISTER_OK\020\000\022\033\n\027SERVER_REGIS"
    "TER_FAIL_ID\020\001\022 \n\034SERVER_REGISTER_FAIL_AD"
    "DRESS\020\002\022\'\n#SERVER_REGISTER_FAIL_DIFF_CEN"
    "TER_ID\020\003*e\n\021ACCOUNT_LOCK_TYPE\022\032\n\026ACCOUNT"
    "_LOCK_TYPE_NONE\020\000\022\026\n\022ACCOUNT_LOCK_SPEAK\020"
    "\001\022\034\n\030ACCOUNT_LOCK_TYPE_LOCKED\020\002*\230\001\n\024ACCO"
    "UNT_LOCK_OP_TYPE\022\031\n\025ACCOUNT_OP_LOCK_SPEA"
    "K\020\001\022\033\n\027ACCOUNT_OP_UNLOCK_SPEAK\020\002\022\023\n\017ACCO"
    "UNT_OP_LOCK\020\003\022\025\n\021ACCOUNT_OP_UNLOCK\020\004\022\034\n\030"
    "ACCOUNT_OP_KICK_OFF_LINE\020\005*I\n\tValueType\022"
    "\024\n\020VALUE_TYPE_INT64\020\000\022\022\n\016VALUE_TYPE_INT\020"
    "\001\022\022\n\016VALUE_TYPE_STR\020\002*\325\001\n\nValueIndex\022%\n!"
    "VALUE_INDEX_ARENA_DAY_REWARD_TIME\020\000\022\'\n#V"
    "ALUE_INDEX_ARENA_MONTH_REWARD_TIME\020\001\022+\n\'"
    "VALUE_INDEX_ARENA_QUARTERLY_REWARD_TIME\020"
    "\002\022\'\n#VALUE_INDEX_PLAYER_DAILY_RESET_TIME"
    "\020\003\022!\n\035VALUE_INDEX_IS_OPEN_CROSS_WAR\020\004*\327\001"
    "\n\016BROADCAST_TYPE\022\'\n#UPDATE_GAME_SERVER_P"
    "ERFORMANCE_INFO\020\001\022*\n&UPDATE_GAME_SERVER_"
    "LOCKED_ACCOUNT_INFO\020\002\022 \n\034UPDATE_GAME_SER"
    "VER_LIST_INFO\020\003\022#\n\037UPDATE_GAME_SERVER_VE"
    "RSION_INFO\020\004\022)\n%UPDATE_GAME_SERVER_TESTE"
    "R_ACCOUNT_IDS\020\005", 9775);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "InterServer.proto", &protobuf_RegisterTypes);
  Address::default_instance_ = new Address();
  GetEventLogServersRet::default_instance_ = new GetEventLogServersRet();
  PingInfo::default_instance_ = new PingInfo();
  PongInfo::default_instance_ = new PongInfo();
  SG2C_RegisterInfo::default_instance_ = new SG2C_RegisterInfo();
  SG2C_RegisterInfoRet::default_instance_ = new SG2C_RegisterInfoRet();
  SG2C_GetLoinServersRet::default_instance_ = new SG2C_GetLoinServersRet();
  SG2C_GetCrossServersRet::default_instance_ = new SG2C_GetCrossServersRet();
  SG2C_Exchange_Gift_Code::default_instance_ = new SG2C_Exchange_Gift_Code();
  SG2C_Exchange_Gift_Code_Ret::default_instance_ = new SG2C_Exchange_Gift_Code_Ret();
  SG2C_FeedBack::default_instance_ = new SG2C_FeedBack();
  SG2C_FeedBack_Ret::default_instance_ = new SG2C_FeedBack_Ret();
  SC2G_activity_proto::default_instance_ = new SC2G_activity_proto();
  SC2G_activity_plan::default_instance_ = new SC2G_activity_plan();
  SC2G_server_open_time::default_instance_ = new SC2G_server_open_time();
  SC2G_activity_reward::default_instance_ = new SC2G_activity_reward();
  SC2G_activity_package::default_instance_ = new SC2G_activity_package();
  SC2G_activity_package_Update::default_instance_ = new SC2G_activity_package_Update();
  SC2G_ReloadPayItem::default_instance_ = new SC2G_ReloadPayItem();
  MSG_activity_update_info::default_instance_ = new MSG_activity_update_info();
  SG2E_RegisterInfo::default_instance_ = new SG2E_RegisterInfo();
  SG2E_RegisterInfoRet::default_instance_ = new SG2E_RegisterInfoRet();
  SG2B_RegisterInfo::default_instance_ = new SG2B_RegisterInfo();
  SG2B_RegisterInfoRet::default_instance_ = new SG2B_RegisterInfoRet();
  SG2R_RegisterInfo::default_instance_ = new SG2R_RegisterInfo();
  SG2R_RegisterInfoRet::default_instance_ = new SG2R_RegisterInfoRet();
  SG2R_RegisterPlayerInfoRet::default_instance_ = new SG2R_RegisterPlayerInfoRet();
  SR2C_RegisterInfo::default_instance_ = new SR2C_RegisterInfo();
  SR2C_RegisterInfoRet::default_instance_ = new SR2C_RegisterInfoRet();
  SR2C_GetLobbyServersRet::default_instance_ = new SR2C_GetLobbyServersRet();
  SR2B_RegisterInfo::default_instance_ = new SR2B_RegisterInfo();
  SR2B_RegisterInfoRet::default_instance_ = new SR2B_RegisterInfoRet();
  CountryWithAddress::default_instance_ = new CountryWithAddress();
  SL2G_DevideCrossServers::default_instance_ = new SL2G_DevideCrossServers();
  SR2E_RegisterInfo::default_instance_ = new SR2E_RegisterInfo();
  SR2E_RegisterInfoRet::default_instance_ = new SR2E_RegisterInfoRet();
  SB2C_RegisterInfo::default_instance_ = new SB2C_RegisterInfo();
  SB2C_RegisterInfoRet::default_instance_ = new SB2C_RegisterInfoRet();
  SB2E_RegisterInfo::default_instance_ = new SB2E_RegisterInfo();
  SB2E_RegisterInfoRet::default_instance_ = new SB2E_RegisterInfoRet();
  SL2C_RegisterInfo::default_instance_ = new SL2C_RegisterInfo();
  SL2C_RegisterInfoRet::default_instance_ = new SL2C_RegisterInfoRet();
  SL2E_RegisterInfo::default_instance_ = new SL2E_RegisterInfo();
  SL2E_RegisterInfoRet::default_instance_ = new SL2E_RegisterInfoRet();
  SE2C_RegisterInfo::default_instance_ = new SE2C_RegisterInfo();
  SE2C_RegisterInfoRet::default_instance_ = new SE2C_RegisterInfoRet();
  EventParm::default_instance_ = new EventParm();
  Server_Event::default_instance_ = new Server_Event();
  Server_Events::default_instance_ = new Server_Events();
  Version::default_instance_ = new Version();
  OneVersionInfo::default_instance_ = new OneVersionInfo();
  SG2L_RegisterInfo::default_instance_ = new SG2L_RegisterInfo();
  SG2L_RegisterInfoRet::default_instance_ = new SG2L_RegisterInfoRet();
  SG2D_RegisterInfo::default_instance_ = new SG2D_RegisterInfo();
  SG2D_RegisterInfoRet::default_instance_ = new SG2D_RegisterInfoRet();
  SG2D_GetPlayerList::default_instance_ = new SG2D_GetPlayerList();
  SG2L_UpdatePlayerLockType::default_instance_ = new SG2L_UpdatePlayerLockType();
  SG2D_CreatePlayer::default_instance_ = new SG2D_CreatePlayer();
  SG2D_SelectPlayer::default_instance_ = new SG2D_SelectPlayer();
  SG2D_Player_Id::default_instance_ = new SG2D_Player_Id();
  SG2D_UpdataStageLevel::default_instance_ = new SG2D_UpdataStageLevel();
  SG2D_Forbiden_Player::default_instance_ = new SG2D_Forbiden_Player();
  SD2G_Forbiden_Player_Ret::default_instance_ = new SD2G_Forbiden_Player_Ret();
  SG2D_UpdataFuBenBase::default_instance_ = new SG2D_UpdataFuBenBase();
  SG2D_UpdataFuBenResource::default_instance_ = new SG2D_UpdataFuBenResource();
  SG2D_UpdataFuBenPassStage::default_instance_ = new SG2D_UpdataFuBenPassStage();
  Country_Info_Devide::default_instance_ = new Country_Info_Devide();
  SD2G_Country_AllInfo::default_instance_ = new SD2G_Country_AllInfo();
  SG2B_Country_Info::default_instance_ = new SG2B_Country_Info();
  SB2G_Country_War_Info::default_instance_ = new SB2G_Country_War_Info();
  SG2R_Country_AllInfo::default_instance_ = new SG2R_Country_AllInfo();
  GobalValue::default_instance_ = new GobalValue();
  ServerGobalValue::default_instance_ = new ServerGobalValue();
  BroadcastHeader::default_instance_ = new BroadcastHeader();
  SW2C2L_UpdateServerInfo::default_instance_ = new SW2C2L_UpdateServerInfo();
  SG2C2L_UpdatePerformanceInfo::default_instance_ = new SG2C2L_UpdatePerformanceInfo();
  SG2D_Broadcast_Info::default_instance_ = new SG2D_Broadcast_Info();
  SG2G_Mail_SendMail::default_instance_ = new SG2G_Mail_SendMail();
  SG2D_MailInfoData::default_instance_ = new SG2D_MailInfoData();
  SG2D_MailsOperate::default_instance_ = new SG2D_MailsOperate();
  SG2D_Check_Mail_Recivers_Exist::default_instance_ = new SG2D_Check_Mail_Recivers_Exist();
  SD2G_Check_Mail_Recivers_Exist_Rspone::default_instance_ = new SD2G_Check_Mail_Recivers_Exist_Rspone();
  SG2D_Friend_Operate::default_instance_ = new SG2D_Friend_Operate();
  SD2G_Friend_Operate_Res::default_instance_ = new SD2G_Friend_Operate_Res();
  SG2D_Crusade_Stage::default_instance_ = new SG2D_Crusade_Stage();
  GS2C_Select_Country_Rsp::default_instance_ = new GS2C_Select_Country_Rsp();
  SD2G_All_player_has_sync::default_instance_ = new SD2G_All_player_has_sync();
  Activity_Occupy_City_Num::default_instance_ = new Activity_Occupy_City_Num();
  SD2G_Activity_Occupy_City_Num::default_instance_ = new SD2G_Activity_Occupy_City_Num();
  SR2G_AwardTakePlayer::default_instance_ = new SR2G_AwardTakePlayer();
  Address::default_instance_->InitAsDefaultInstance();
  GetEventLogServersRet::default_instance_->InitAsDefaultInstance();
  PingInfo::default_instance_->InitAsDefaultInstance();
  PongInfo::default_instance_->InitAsDefaultInstance();
  SG2C_RegisterInfo::default_instance_->InitAsDefaultInstance();
  SG2C_RegisterInfoRet::default_instance_->InitAsDefaultInstance();
  SG2C_GetLoinServersRet::default_instance_->InitAsDefaultInstance();
  SG2C_GetCrossServersRet::default_instance_->InitAsDefaultInstance();
  SG2C_Exchange_Gift_Code::default_instance_->InitAsDefaultInstance();
  SG2C_Exchange_Gift_Code_Ret::default_instance_->InitAsDefaultInstance();
  SG2C_FeedBack::default_instance_->InitAsDefaultInstance();
  SG2C_FeedBack_Ret::default_instance_->InitAsDefaultInstance();
  SC2G_activity_proto::default_instance_->InitAsDefaultInstance();
  SC2G_activity_plan::default_instance_->InitAsDefaultInstance();
  SC2G_server_open_time::default_instance_->InitAsDefaultInstance();
  SC2G_activity_reward::default_instance_->InitAsDefaultInstance();
  SC2G_activity_package::default_instance_->InitAsDefaultInstance();
  SC2G_activity_package_Update::default_instance_->InitAsDefaultInstance();
  SC2G_ReloadPayItem::default_instance_->InitAsDefaultInstance();
  MSG_activity_update_info::default_instance_->InitAsDefaultInstance();
  SG2E_RegisterInfo::default_instance_->InitAsDefaultInstance();
  SG2E_RegisterInfoRet::default_instance_->InitAsDefaultInstance();
  SG2B_RegisterInfo::default_instance_->InitAsDefaultInstance();
  SG2B_RegisterInfoRet::default_instance_->InitAsDefaultInstance();
  SG2R_RegisterInfo::default_instance_->InitAsDefaultInstance();
  SG2R_RegisterInfoRet::default_instance_->InitAsDefaultInstance();
  SG2R_RegisterPlayerInfoRet::default_instance_->InitAsDefaultInstance();
  SR2C_RegisterInfo::default_instance_->InitAsDefaultInstance();
  SR2C_RegisterInfoRet::default_instance_->InitAsDefaultInstance();
  SR2C_GetLobbyServersRet::default_instance_->InitAsDefaultInstance();
  SR2B_RegisterInfo::default_instance_->InitAsDefaultInstance();
  SR2B_RegisterInfoRet::default_instance_->InitAsDefaultInstance();
  CountryWithAddress::default_instance_->InitAsDefaultInstance();
  SL2G_DevideCrossServers::default_instance_->InitAsDefaultInstance();
  SR2E_RegisterInfo::default_instance_->InitAsDefaultInstance();
  SR2E_RegisterInfoRet::default_instance_->InitAsDefaultInstance();
  SB2C_RegisterInfo::default_instance_->InitAsDefaultInstance();
  SB2C_RegisterInfoRet::default_instance_->InitAsDefaultInstance();
  SB2E_RegisterInfo::default_instance_->InitAsDefaultInstance();
  SB2E_RegisterInfoRet::default_instance_->InitAsDefaultInstance();
  SL2C_RegisterInfo::default_instance_->InitAsDefaultInstance();
  SL2C_RegisterInfoRet::default_instance_->InitAsDefaultInstance();
  SL2E_RegisterInfo::default_instance_->InitAsDefaultInstance();
  SL2E_RegisterInfoRet::default_instance_->InitAsDefaultInstance();
  SE2C_RegisterInfo::default_instance_->InitAsDefaultInstance();
  SE2C_RegisterInfoRet::default_instance_->InitAsDefaultInstance();
  EventParm::default_instance_->InitAsDefaultInstance();
  Server_Event::default_instance_->InitAsDefaultInstance();
  Server_Events::default_instance_->InitAsDefaultInstance();
  Version::default_instance_->InitAsDefaultInstance();
  OneVersionInfo::default_instance_->InitAsDefaultInstance();
  SG2L_RegisterInfo::default_instance_->InitAsDefaultInstance();
  SG2L_RegisterInfoRet::default_instance_->InitAsDefaultInstance();
  SG2D_RegisterInfo::default_instance_->InitAsDefaultInstance();
  SG2D_RegisterInfoRet::default_instance_->InitAsDefaultInstance();
  SG2D_GetPlayerList::default_instance_->InitAsDefaultInstance();
  SG2L_UpdatePlayerLockType::default_instance_->InitAsDefaultInstance();
  SG2D_CreatePlayer::default_instance_->InitAsDefaultInstance();
  SG2D_SelectPlayer::default_instance_->InitAsDefaultInstance();
  SG2D_Player_Id::default_instance_->InitAsDefaultInstance();
  SG2D_UpdataStageLevel::default_instance_->InitAsDefaultInstance();
  SG2D_Forbiden_Player::default_instance_->InitAsDefaultInstance();
  SD2G_Forbiden_Player_Ret::default_instance_->InitAsDefaultInstance();
  SG2D_UpdataFuBenBase::default_instance_->InitAsDefaultInstance();
  SG2D_UpdataFuBenResource::default_instance_->InitAsDefaultInstance();
  SG2D_UpdataFuBenPassStage::default_instance_->InitAsDefaultInstance();
  Country_Info_Devide::default_instance_->InitAsDefaultInstance();
  SD2G_Country_AllInfo::default_instance_->InitAsDefaultInstance();
  SG2B_Country_Info::default_instance_->InitAsDefaultInstance();
  SB2G_Country_War_Info::default_instance_->InitAsDefaultInstance();
  SG2R_Country_AllInfo::default_instance_->InitAsDefaultInstance();
  GobalValue::default_instance_->InitAsDefaultInstance();
  ServerGobalValue::default_instance_->InitAsDefaultInstance();
  BroadcastHeader::default_instance_->InitAsDefaultInstance();
  SW2C2L_UpdateServerInfo::default_instance_->InitAsDefaultInstance();
  SG2C2L_UpdatePerformanceInfo::default_instance_->InitAsDefaultInstance();
  SG2D_Broadcast_Info::default_instance_->InitAsDefaultInstance();
  SG2G_Mail_SendMail::default_instance_->InitAsDefaultInstance();
  SG2D_MailInfoData::default_instance_->InitAsDefaultInstance();
  SG2D_MailsOperate::default_instance_->InitAsDefaultInstance();
  SG2D_Check_Mail_Recivers_Exist::default_instance_->InitAsDefaultInstance();
  SD2G_Check_Mail_Recivers_Exist_Rspone::default_instance_->InitAsDefaultInstance();
  SG2D_Friend_Operate::default_instance_->InitAsDefaultInstance();
  SD2G_Friend_Operate_Res::default_instance_->InitAsDefaultInstance();
  SG2D_Crusade_Stage::default_instance_->InitAsDefaultInstance();
  GS2C_Select_Country_Rsp::default_instance_->InitAsDefaultInstance();
  SD2G_All_player_has_sync::default_instance_->InitAsDefaultInstance();
  Activity_Occupy_City_Num::default_instance_->InitAsDefaultInstance();
  SD2G_Activity_Occupy_City_Num::default_instance_->InitAsDefaultInstance();
  SR2G_AwardTakePlayer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_InterServer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_InterServer_2eproto {
  StaticDescriptorInitializer_InterServer_2eproto() {
    protobuf_AddDesc_InterServer_2eproto();
  }
} static_descriptor_initializer_InterServer_2eproto_;
const ::google::protobuf::EnumDescriptor* RegisterResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterResult_descriptor_;
}
bool RegisterResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ACCOUNT_LOCK_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACCOUNT_LOCK_TYPE_descriptor_;
}
bool ACCOUNT_LOCK_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ACCOUNT_LOCK_OP_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACCOUNT_LOCK_OP_TYPE_descriptor_;
}
bool ACCOUNT_LOCK_OP_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ValueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ValueType_descriptor_;
}
bool ValueType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ValueIndex_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ValueIndex_descriptor_;
}
bool ValueIndex_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BROADCAST_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BROADCAST_TYPE_descriptor_;
}
bool BROADCAST_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Address::kIpFieldNumber;
const int Address::kPortFieldNumber;
#endif  // !_MSC_VER

Address::Address()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Address::InitAsDefaultInstance() {
}

Address::Address(const Address& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Address::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Address::~Address() {
  SharedDtor();
}

void Address::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (this != default_instance_) {
  }
}

void Address::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Address::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Address_descriptor_;
}

const Address& Address::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

Address* Address::default_instance_ = NULL;

Address* Address::New() const {
  return new Address;
}

void Address::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_port()) {
      if (port_ != &::google::protobuf::internal::kEmptyString) {
        port_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_port;
        break;
      }

      // required string port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }

  // required string port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Address::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required string port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Address::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required string port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Address::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Address* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Address*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Address::MergeFrom(const Address& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Address::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address::CopyFrom(const Address& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Address::Swap(Address* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Address::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Address_descriptor_;
  metadata.reflection = Address_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetEventLogServersRet::kAddressesFieldNumber;
#endif  // !_MSC_VER

GetEventLogServersRet::GetEventLogServersRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetEventLogServersRet::InitAsDefaultInstance() {
  addresses_ = const_cast< ::pb::Address*>(&::pb::Address::default_instance());
}

GetEventLogServersRet::GetEventLogServersRet(const GetEventLogServersRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetEventLogServersRet::SharedCtor() {
  _cached_size_ = 0;
  addresses_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetEventLogServersRet::~GetEventLogServersRet() {
  SharedDtor();
}

void GetEventLogServersRet::SharedDtor() {
  if (this != default_instance_) {
    delete addresses_;
  }
}

void GetEventLogServersRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetEventLogServersRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetEventLogServersRet_descriptor_;
}

const GetEventLogServersRet& GetEventLogServersRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

GetEventLogServersRet* GetEventLogServersRet::default_instance_ = NULL;

GetEventLogServersRet* GetEventLogServersRet::New() const {
  return new GetEventLogServersRet;
}

void GetEventLogServersRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_addresses()) {
      if (addresses_ != NULL) addresses_->::pb::Address::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetEventLogServersRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.Address addresses = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addresses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetEventLogServersRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.Address addresses = 1;
  if (has_addresses()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->addresses(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetEventLogServersRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.Address addresses = 1;
  if (has_addresses()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->addresses(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetEventLogServersRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.Address addresses = 1;
    if (has_addresses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->addresses());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetEventLogServersRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetEventLogServersRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetEventLogServersRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetEventLogServersRet::MergeFrom(const GetEventLogServersRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addresses()) {
      mutable_addresses()->::pb::Address::MergeFrom(from.addresses());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetEventLogServersRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEventLogServersRet::CopyFrom(const GetEventLogServersRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEventLogServersRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_addresses()) {
    if (!this->addresses().IsInitialized()) return false;
  }
  return true;
}

void GetEventLogServersRet::Swap(GetEventLogServersRet* other) {
  if (other != this) {
    std::swap(addresses_, other->addresses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetEventLogServersRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetEventLogServersRet_descriptor_;
  metadata.reflection = GetEventLogServersRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PingInfo::kTimeMsFieldNumber;
const int PingInfo::kDelayTimeMsFieldNumber;
#endif  // !_MSC_VER

PingInfo::PingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PingInfo::InitAsDefaultInstance() {
}

PingInfo::PingInfo(const PingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PingInfo::SharedCtor() {
  _cached_size_ = 0;
  time_ms_ = GOOGLE_ULONGLONG(0);
  delay_time_ms_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PingInfo::~PingInfo() {
  SharedDtor();
}

void PingInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingInfo_descriptor_;
}

const PingInfo& PingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

PingInfo* PingInfo::default_instance_ = NULL;

PingInfo* PingInfo::New() const {
  return new PingInfo;
}

void PingInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ms_ = GOOGLE_ULONGLONG(0);
    delay_time_ms_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time_ms = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_ms_)));
          set_has_time_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_delay_time_ms;
        break;
      }

      // optional uint64 delay_time_ms = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delay_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &delay_time_ms_)));
          set_has_delay_time_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 time_ms = 1;
  if (has_time_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time_ms(), output);
  }

  // optional uint64 delay_time_ms = 2;
  if (has_delay_time_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->delay_time_ms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 time_ms = 1;
  if (has_time_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time_ms(), target);
  }

  // optional uint64 delay_time_ms = 2;
  if (has_delay_time_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->delay_time_ms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 time_ms = 1;
    if (has_time_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_ms());
    }

    // optional uint64 delay_time_ms = 2;
    if (has_delay_time_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->delay_time_ms());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PingInfo::MergeFrom(const PingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_ms()) {
      set_time_ms(from.time_ms());
    }
    if (from.has_delay_time_ms()) {
      set_delay_time_ms(from.delay_time_ms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingInfo::CopyFrom(const PingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PingInfo::Swap(PingInfo* other) {
  if (other != this) {
    std::swap(time_ms_, other->time_ms_);
    std::swap(delay_time_ms_, other->delay_time_ms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PingInfo_descriptor_;
  metadata.reflection = PingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PongInfo::kTimeMsFieldNumber;
#endif  // !_MSC_VER

PongInfo::PongInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PongInfo::InitAsDefaultInstance() {
}

PongInfo::PongInfo(const PongInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PongInfo::SharedCtor() {
  _cached_size_ = 0;
  time_ms_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PongInfo::~PongInfo() {
  SharedDtor();
}

void PongInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PongInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PongInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PongInfo_descriptor_;
}

const PongInfo& PongInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

PongInfo* PongInfo::default_instance_ = NULL;

PongInfo* PongInfo::New() const {
  return new PongInfo;
}

void PongInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ms_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PongInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time_ms = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_ms_)));
          set_has_time_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PongInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 time_ms = 1;
  if (has_time_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time_ms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PongInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 time_ms = 1;
  if (has_time_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time_ms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PongInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 time_ms = 1;
    if (has_time_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_ms());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PongInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PongInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PongInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PongInfo::MergeFrom(const PongInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_ms()) {
      set_time_ms(from.time_ms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PongInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PongInfo::CopyFrom(const PongInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PongInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PongInfo::Swap(PongInfo* other) {
  if (other != this) {
    std::swap(time_ms_, other->time_ms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PongInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PongInfo_descriptor_;
  metadata.reflection = PongInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2C_RegisterInfo::kServerIdFieldNumber;
const int SG2C_RegisterInfo::kIpFieldNumber;
const int SG2C_RegisterInfo::kPortFieldNumber;
const int SG2C_RegisterInfo::kNamesFieldNumber;
#endif  // !_MSC_VER

SG2C_RegisterInfo::SG2C_RegisterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2C_RegisterInfo::InitAsDefaultInstance() {
}

SG2C_RegisterInfo::SG2C_RegisterInfo(const SG2C_RegisterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2C_RegisterInfo::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2C_RegisterInfo::~SG2C_RegisterInfo() {
  SharedDtor();
}

void SG2C_RegisterInfo::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (this != default_instance_) {
  }
}

void SG2C_RegisterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2C_RegisterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2C_RegisterInfo_descriptor_;
}

const SG2C_RegisterInfo& SG2C_RegisterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2C_RegisterInfo* SG2C_RegisterInfo::default_instance_ = NULL;

SG2C_RegisterInfo* SG2C_RegisterInfo::New() const {
  return new SG2C_RegisterInfo;
}

void SG2C_RegisterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_port()) {
      if (port_ != &::google::protobuf::internal::kEmptyString) {
        port_->clear();
      }
    }
  }
  names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2C_RegisterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // required string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_port;
        break;
      }

      // required string port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_names;
        break;
      }

      // repeated string names = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_names;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2C_RegisterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // required string port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->port(), output);
  }

  // repeated string names = 4;
  for (int i = 0; i < this->names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->names(i).data(), this->names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->names(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2C_RegisterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // required string port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->port(), target);
  }

  // repeated string names = 4;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->names(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2C_RegisterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }

    // required string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required string port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port());
    }

  }
  // repeated string names = 4;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2C_RegisterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2C_RegisterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2C_RegisterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2C_RegisterInfo::MergeFrom(const SG2C_RegisterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2C_RegisterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2C_RegisterInfo::CopyFrom(const SG2C_RegisterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2C_RegisterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SG2C_RegisterInfo::Swap(SG2C_RegisterInfo* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    names_.Swap(&other->names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2C_RegisterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2C_RegisterInfo_descriptor_;
  metadata.reflection = SG2C_RegisterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2C_RegisterInfoRet::kResultFieldNumber;
const int SG2C_RegisterInfoRet::kRegionIdFieldNumber;
const int SG2C_RegisterInfoRet::kWebUrlFieldNumber;
#endif  // !_MSC_VER

SG2C_RegisterInfoRet::SG2C_RegisterInfoRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2C_RegisterInfoRet::InitAsDefaultInstance() {
}

SG2C_RegisterInfoRet::SG2C_RegisterInfoRet(const SG2C_RegisterInfoRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2C_RegisterInfoRet::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  region_id_ = 0;
  web_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2C_RegisterInfoRet::~SG2C_RegisterInfoRet() {
  SharedDtor();
}

void SG2C_RegisterInfoRet::SharedDtor() {
  if (web_url_ != &::google::protobuf::internal::kEmptyString) {
    delete web_url_;
  }
  if (this != default_instance_) {
  }
}

void SG2C_RegisterInfoRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2C_RegisterInfoRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2C_RegisterInfoRet_descriptor_;
}

const SG2C_RegisterInfoRet& SG2C_RegisterInfoRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2C_RegisterInfoRet* SG2C_RegisterInfoRet::default_instance_ = NULL;

SG2C_RegisterInfoRet* SG2C_RegisterInfoRet::New() const {
  return new SG2C_RegisterInfoRet;
}

void SG2C_RegisterInfoRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    region_id_ = 0;
    if (has_web_url()) {
      if (web_url_ != &::google::protobuf::internal::kEmptyString) {
        web_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2C_RegisterInfoRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.RegisterResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::RegisterResult_IsValid(value)) {
            set_result(static_cast< ::pb::RegisterResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_region_id;
        break;
      }

      // optional int32 region_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_region_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_web_url;
        break;
      }

      // optional string web_url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_web_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_web_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->web_url().data(), this->web_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2C_RegisterInfoRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.RegisterResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional int32 region_id = 2;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region_id(), output);
  }

  // optional string web_url = 3;
  if (has_web_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->web_url().data(), this->web_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->web_url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2C_RegisterInfoRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.RegisterResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional int32 region_id = 2;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region_id(), target);
  }

  // optional string web_url = 3;
  if (has_web_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->web_url().data(), this->web_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->web_url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2C_RegisterInfoRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.RegisterResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 region_id = 2;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region_id());
    }

    // optional string web_url = 3;
    if (has_web_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->web_url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2C_RegisterInfoRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2C_RegisterInfoRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2C_RegisterInfoRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2C_RegisterInfoRet::MergeFrom(const SG2C_RegisterInfoRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_web_url()) {
      set_web_url(from.web_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2C_RegisterInfoRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2C_RegisterInfoRet::CopyFrom(const SG2C_RegisterInfoRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2C_RegisterInfoRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SG2C_RegisterInfoRet::Swap(SG2C_RegisterInfoRet* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(region_id_, other->region_id_);
    std::swap(web_url_, other->web_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2C_RegisterInfoRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2C_RegisterInfoRet_descriptor_;
  metadata.reflection = SG2C_RegisterInfoRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2C_GetLoinServersRet::kAddressesFieldNumber;
#endif  // !_MSC_VER

SG2C_GetLoinServersRet::SG2C_GetLoinServersRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2C_GetLoinServersRet::InitAsDefaultInstance() {
}

SG2C_GetLoinServersRet::SG2C_GetLoinServersRet(const SG2C_GetLoinServersRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2C_GetLoinServersRet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2C_GetLoinServersRet::~SG2C_GetLoinServersRet() {
  SharedDtor();
}

void SG2C_GetLoinServersRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SG2C_GetLoinServersRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2C_GetLoinServersRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2C_GetLoinServersRet_descriptor_;
}

const SG2C_GetLoinServersRet& SG2C_GetLoinServersRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2C_GetLoinServersRet* SG2C_GetLoinServersRet::default_instance_ = NULL;

SG2C_GetLoinServersRet* SG2C_GetLoinServersRet::New() const {
  return new SG2C_GetLoinServersRet;
}

void SG2C_GetLoinServersRet::Clear() {
  addresses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2C_GetLoinServersRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Address addresses = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addresses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_addresses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_addresses;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2C_GetLoinServersRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.Address addresses = 1;
  for (int i = 0; i < this->addresses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->addresses(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2C_GetLoinServersRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.Address addresses = 1;
  for (int i = 0; i < this->addresses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->addresses(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2C_GetLoinServersRet::ByteSize() const {
  int total_size = 0;

  // repeated .pb.Address addresses = 1;
  total_size += 1 * this->addresses_size();
  for (int i = 0; i < this->addresses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->addresses(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2C_GetLoinServersRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2C_GetLoinServersRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2C_GetLoinServersRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2C_GetLoinServersRet::MergeFrom(const SG2C_GetLoinServersRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  addresses_.MergeFrom(from.addresses_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2C_GetLoinServersRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2C_GetLoinServersRet::CopyFrom(const SG2C_GetLoinServersRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2C_GetLoinServersRet::IsInitialized() const {

  for (int i = 0; i < addresses_size(); i++) {
    if (!this->addresses(i).IsInitialized()) return false;
  }
  return true;
}

void SG2C_GetLoinServersRet::Swap(SG2C_GetLoinServersRet* other) {
  if (other != this) {
    addresses_.Swap(&other->addresses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2C_GetLoinServersRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2C_GetLoinServersRet_descriptor_;
  metadata.reflection = SG2C_GetLoinServersRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2C_GetCrossServersRet::kAddressesFieldNumber;
#endif  // !_MSC_VER

SG2C_GetCrossServersRet::SG2C_GetCrossServersRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2C_GetCrossServersRet::InitAsDefaultInstance() {
}

SG2C_GetCrossServersRet::SG2C_GetCrossServersRet(const SG2C_GetCrossServersRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2C_GetCrossServersRet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2C_GetCrossServersRet::~SG2C_GetCrossServersRet() {
  SharedDtor();
}

void SG2C_GetCrossServersRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SG2C_GetCrossServersRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2C_GetCrossServersRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2C_GetCrossServersRet_descriptor_;
}

const SG2C_GetCrossServersRet& SG2C_GetCrossServersRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2C_GetCrossServersRet* SG2C_GetCrossServersRet::default_instance_ = NULL;

SG2C_GetCrossServersRet* SG2C_GetCrossServersRet::New() const {
  return new SG2C_GetCrossServersRet;
}

void SG2C_GetCrossServersRet::Clear() {
  addresses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2C_GetCrossServersRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Address addresses = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addresses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_addresses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_addresses;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2C_GetCrossServersRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.Address addresses = 1;
  for (int i = 0; i < this->addresses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->addresses(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2C_GetCrossServersRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.Address addresses = 1;
  for (int i = 0; i < this->addresses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->addresses(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2C_GetCrossServersRet::ByteSize() const {
  int total_size = 0;

  // repeated .pb.Address addresses = 1;
  total_size += 1 * this->addresses_size();
  for (int i = 0; i < this->addresses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->addresses(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2C_GetCrossServersRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2C_GetCrossServersRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2C_GetCrossServersRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2C_GetCrossServersRet::MergeFrom(const SG2C_GetCrossServersRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  addresses_.MergeFrom(from.addresses_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2C_GetCrossServersRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2C_GetCrossServersRet::CopyFrom(const SG2C_GetCrossServersRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2C_GetCrossServersRet::IsInitialized() const {

  for (int i = 0; i < addresses_size(); i++) {
    if (!this->addresses(i).IsInitialized()) return false;
  }
  return true;
}

void SG2C_GetCrossServersRet::Swap(SG2C_GetCrossServersRet* other) {
  if (other != this) {
    addresses_.Swap(&other->addresses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2C_GetCrossServersRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2C_GetCrossServersRet_descriptor_;
  metadata.reflection = SG2C_GetCrossServersRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2C_Exchange_Gift_Code::kPlayerIdFieldNumber;
const int SG2C_Exchange_Gift_Code::kGiftCodeFieldNumber;
const int SG2C_Exchange_Gift_Code::kChannelFieldNumber;
#endif  // !_MSC_VER

SG2C_Exchange_Gift_Code::SG2C_Exchange_Gift_Code()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2C_Exchange_Gift_Code::InitAsDefaultInstance() {
}

SG2C_Exchange_Gift_Code::SG2C_Exchange_Gift_Code(const SG2C_Exchange_Gift_Code& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2C_Exchange_Gift_Code::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  gift_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2C_Exchange_Gift_Code::~SG2C_Exchange_Gift_Code() {
  SharedDtor();
}

void SG2C_Exchange_Gift_Code::SharedDtor() {
  if (gift_code_ != &::google::protobuf::internal::kEmptyString) {
    delete gift_code_;
  }
  if (this != default_instance_) {
  }
}

void SG2C_Exchange_Gift_Code::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2C_Exchange_Gift_Code::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2C_Exchange_Gift_Code_descriptor_;
}

const SG2C_Exchange_Gift_Code& SG2C_Exchange_Gift_Code::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2C_Exchange_Gift_Code* SG2C_Exchange_Gift_Code::default_instance_ = NULL;

SG2C_Exchange_Gift_Code* SG2C_Exchange_Gift_Code::New() const {
  return new SG2C_Exchange_Gift_Code;
}

void SG2C_Exchange_Gift_Code::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    if (has_gift_code()) {
      if (gift_code_ != &::google::protobuf::internal::kEmptyString) {
        gift_code_->clear();
      }
    }
    channel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2C_Exchange_Gift_Code::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gift_code;
        break;
      }

      // required string gift_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gift_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gift_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gift_code().data(), this->gift_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel;
        break;
      }

      // optional int32 channel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2C_Exchange_Gift_Code::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // required string gift_code = 2;
  if (has_gift_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gift_code().data(), this->gift_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gift_code(), output);
  }

  // optional int32 channel = 3;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2C_Exchange_Gift_Code::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // required string gift_code = 2;
  if (has_gift_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gift_code().data(), this->gift_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gift_code(), target);
  }

  // optional int32 channel = 3;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2C_Exchange_Gift_Code::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // required string gift_code = 2;
    if (has_gift_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gift_code());
    }

    // optional int32 channel = 3;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2C_Exchange_Gift_Code::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2C_Exchange_Gift_Code* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2C_Exchange_Gift_Code*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2C_Exchange_Gift_Code::MergeFrom(const SG2C_Exchange_Gift_Code& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_gift_code()) {
      set_gift_code(from.gift_code());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2C_Exchange_Gift_Code::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2C_Exchange_Gift_Code::CopyFrom(const SG2C_Exchange_Gift_Code& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2C_Exchange_Gift_Code::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SG2C_Exchange_Gift_Code::Swap(SG2C_Exchange_Gift_Code* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(gift_code_, other->gift_code_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2C_Exchange_Gift_Code::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2C_Exchange_Gift_Code_descriptor_;
  metadata.reflection = SG2C_Exchange_Gift_Code_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2C_Exchange_Gift_Code_Ret::kIsSuccessFieldNumber;
const int SG2C_Exchange_Gift_Code_Ret::kPlayerIdFieldNumber;
const int SG2C_Exchange_Gift_Code_Ret::kGiftNameFieldNumber;
const int SG2C_Exchange_Gift_Code_Ret::kGiftsFieldNumber;
const int SG2C_Exchange_Gift_Code_Ret::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

SG2C_Exchange_Gift_Code_Ret::SG2C_Exchange_Gift_Code_Ret()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2C_Exchange_Gift_Code_Ret::InitAsDefaultInstance() {
}

SG2C_Exchange_Gift_Code_Ret::SG2C_Exchange_Gift_Code_Ret(const SG2C_Exchange_Gift_Code_Ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2C_Exchange_Gift_Code_Ret::SharedCtor() {
  _cached_size_ = 0;
  is_success_ = false;
  player_id_ = GOOGLE_ULONGLONG(0);
  giftname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gifts_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2C_Exchange_Gift_Code_Ret::~SG2C_Exchange_Gift_Code_Ret() {
  SharedDtor();
}

void SG2C_Exchange_Gift_Code_Ret::SharedDtor() {
  if (giftname_ != &::google::protobuf::internal::kEmptyString) {
    delete giftname_;
  }
  if (gifts_ != &::google::protobuf::internal::kEmptyString) {
    delete gifts_;
  }
  if (this != default_instance_) {
  }
}

void SG2C_Exchange_Gift_Code_Ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2C_Exchange_Gift_Code_Ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2C_Exchange_Gift_Code_Ret_descriptor_;
}

const SG2C_Exchange_Gift_Code_Ret& SG2C_Exchange_Gift_Code_Ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2C_Exchange_Gift_Code_Ret* SG2C_Exchange_Gift_Code_Ret::default_instance_ = NULL;

SG2C_Exchange_Gift_Code_Ret* SG2C_Exchange_Gift_Code_Ret::New() const {
  return new SG2C_Exchange_Gift_Code_Ret;
}

void SG2C_Exchange_Gift_Code_Ret::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_success_ = false;
    player_id_ = GOOGLE_ULONGLONG(0);
    if (has_giftname()) {
      if (giftname_ != &::google::protobuf::internal::kEmptyString) {
        giftname_->clear();
      }
    }
    if (has_gifts()) {
      if (gifts_ != &::google::protobuf::internal::kEmptyString) {
        gifts_->clear();
      }
    }
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2C_Exchange_Gift_Code_Ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_success_)));
          set_has_is_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // required uint64 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_giftName;
        break;
      }

      // optional string giftName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_giftName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_giftname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->giftname().data(), this->giftname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gifts;
        break;
      }

      // optional string gifts = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gifts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gifts()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gifts().data(), this->gifts().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_error_code;
        break;
      }

      // optional int32 error_code = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2C_Exchange_Gift_Code_Ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_success = 1;
  if (has_is_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_success(), output);
  }

  // required uint64 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->player_id(), output);
  }

  // optional string giftName = 3;
  if (has_giftname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->giftname().data(), this->giftname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->giftname(), output);
  }

  // optional string gifts = 4;
  if (has_gifts()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gifts().data(), this->gifts().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->gifts(), output);
  }

  // optional int32 error_code = 5;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2C_Exchange_Gift_Code_Ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_success = 1;
  if (has_is_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_success(), target);
  }

  // required uint64 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->player_id(), target);
  }

  // optional string giftName = 3;
  if (has_giftname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->giftname().data(), this->giftname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->giftname(), target);
  }

  // optional string gifts = 4;
  if (has_gifts()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gifts().data(), this->gifts().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gifts(), target);
  }

  // optional int32 error_code = 5;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2C_Exchange_Gift_Code_Ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_success = 1;
    if (has_is_success()) {
      total_size += 1 + 1;
    }

    // required uint64 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional string giftName = 3;
    if (has_giftname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->giftname());
    }

    // optional string gifts = 4;
    if (has_gifts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gifts());
    }

    // optional int32 error_code = 5;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2C_Exchange_Gift_Code_Ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2C_Exchange_Gift_Code_Ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2C_Exchange_Gift_Code_Ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2C_Exchange_Gift_Code_Ret::MergeFrom(const SG2C_Exchange_Gift_Code_Ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_success()) {
      set_is_success(from.is_success());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_giftname()) {
      set_giftname(from.giftname());
    }
    if (from.has_gifts()) {
      set_gifts(from.gifts());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2C_Exchange_Gift_Code_Ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2C_Exchange_Gift_Code_Ret::CopyFrom(const SG2C_Exchange_Gift_Code_Ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2C_Exchange_Gift_Code_Ret::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SG2C_Exchange_Gift_Code_Ret::Swap(SG2C_Exchange_Gift_Code_Ret* other) {
  if (other != this) {
    std::swap(is_success_, other->is_success_);
    std::swap(player_id_, other->player_id_);
    std::swap(giftname_, other->giftname_);
    std::swap(gifts_, other->gifts_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2C_Exchange_Gift_Code_Ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2C_Exchange_Gift_Code_Ret_descriptor_;
  metadata.reflection = SG2C_Exchange_Gift_Code_Ret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2C_FeedBack::kPlayerIdFieldNumber;
const int SG2C_FeedBack::kPlayerNameFieldNumber;
const int SG2C_FeedBack::kFeedbackFieldNumber;
#endif  // !_MSC_VER

SG2C_FeedBack::SG2C_FeedBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2C_FeedBack::InitAsDefaultInstance() {
}

SG2C_FeedBack::SG2C_FeedBack(const SG2C_FeedBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2C_FeedBack::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  feedback_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2C_FeedBack::~SG2C_FeedBack() {
  SharedDtor();
}

void SG2C_FeedBack::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (feedback_ != &::google::protobuf::internal::kEmptyString) {
    delete feedback_;
  }
  if (this != default_instance_) {
  }
}

void SG2C_FeedBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2C_FeedBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2C_FeedBack_descriptor_;
}

const SG2C_FeedBack& SG2C_FeedBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2C_FeedBack* SG2C_FeedBack::default_instance_ = NULL;

SG2C_FeedBack* SG2C_FeedBack::New() const {
  return new SG2C_FeedBack;
}

void SG2C_FeedBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    if (has_feedback()) {
      if (feedback_ != &::google::protobuf::internal::kEmptyString) {
        feedback_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2C_FeedBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_feedback;
        break;
      }

      // optional string feedback = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_feedback:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feedback()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->feedback().data(), this->feedback().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2C_FeedBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_name(), output);
  }

  // optional string feedback = 3;
  if (has_feedback()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->feedback().data(), this->feedback().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->feedback(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2C_FeedBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // optional string feedback = 3;
  if (has_feedback()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->feedback().data(), this->feedback().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->feedback(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2C_FeedBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional string feedback = 3;
    if (has_feedback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->feedback());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2C_FeedBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2C_FeedBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2C_FeedBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2C_FeedBack::MergeFrom(const SG2C_FeedBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_feedback()) {
      set_feedback(from.feedback());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2C_FeedBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2C_FeedBack::CopyFrom(const SG2C_FeedBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2C_FeedBack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SG2C_FeedBack::Swap(SG2C_FeedBack* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(player_name_, other->player_name_);
    std::swap(feedback_, other->feedback_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2C_FeedBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2C_FeedBack_descriptor_;
  metadata.reflection = SG2C_FeedBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2C_FeedBack_Ret::kIsSuccessFieldNumber;
const int SG2C_FeedBack_Ret::kPlayerIdFieldNumber;
const int SG2C_FeedBack_Ret::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

SG2C_FeedBack_Ret::SG2C_FeedBack_Ret()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2C_FeedBack_Ret::InitAsDefaultInstance() {
}

SG2C_FeedBack_Ret::SG2C_FeedBack_Ret(const SG2C_FeedBack_Ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2C_FeedBack_Ret::SharedCtor() {
  _cached_size_ = 0;
  is_success_ = false;
  player_id_ = GOOGLE_ULONGLONG(0);
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2C_FeedBack_Ret::~SG2C_FeedBack_Ret() {
  SharedDtor();
}

void SG2C_FeedBack_Ret::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SG2C_FeedBack_Ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2C_FeedBack_Ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2C_FeedBack_Ret_descriptor_;
}

const SG2C_FeedBack_Ret& SG2C_FeedBack_Ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2C_FeedBack_Ret* SG2C_FeedBack_Ret::default_instance_ = NULL;

SG2C_FeedBack_Ret* SG2C_FeedBack_Ret::New() const {
  return new SG2C_FeedBack_Ret;
}

void SG2C_FeedBack_Ret::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_success_ = false;
    player_id_ = GOOGLE_ULONGLONG(0);
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2C_FeedBack_Ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_success_)));
          set_has_is_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // required uint64 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_error_code;
        break;
      }

      // optional int32 error_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2C_FeedBack_Ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_success = 1;
  if (has_is_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_success(), output);
  }

  // required uint64 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->player_id(), output);
  }

  // optional int32 error_code = 3;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2C_FeedBack_Ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_success = 1;
  if (has_is_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_success(), target);
  }

  // required uint64 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->player_id(), target);
  }

  // optional int32 error_code = 3;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2C_FeedBack_Ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_success = 1;
    if (has_is_success()) {
      total_size += 1 + 1;
    }

    // required uint64 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional int32 error_code = 3;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2C_FeedBack_Ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2C_FeedBack_Ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2C_FeedBack_Ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2C_FeedBack_Ret::MergeFrom(const SG2C_FeedBack_Ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_success()) {
      set_is_success(from.is_success());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2C_FeedBack_Ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2C_FeedBack_Ret::CopyFrom(const SG2C_FeedBack_Ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2C_FeedBack_Ret::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SG2C_FeedBack_Ret::Swap(SG2C_FeedBack_Ret* other) {
  if (other != this) {
    std::swap(is_success_, other->is_success_);
    std::swap(player_id_, other->player_id_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2C_FeedBack_Ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2C_FeedBack_Ret_descriptor_;
  metadata.reflection = SG2C_FeedBack_Ret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC2G_activity_proto::kTableIdFieldNumber;
const int SC2G_activity_proto::kActTypeIdFieldNumber;
const int SC2G_activity_proto::kRewardTypeFieldNumber;
#endif  // !_MSC_VER

SC2G_activity_proto::SC2G_activity_proto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC2G_activity_proto::InitAsDefaultInstance() {
}

SC2G_activity_proto::SC2G_activity_proto(const SC2G_activity_proto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC2G_activity_proto::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = GOOGLE_ULONGLONG(0);
  act_type_id_ = 0u;
  reward_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC2G_activity_proto::~SC2G_activity_proto() {
  SharedDtor();
}

void SC2G_activity_proto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC2G_activity_proto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC2G_activity_proto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC2G_activity_proto_descriptor_;
}

const SC2G_activity_proto& SC2G_activity_proto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SC2G_activity_proto* SC2G_activity_proto::default_instance_ = NULL;

SC2G_activity_proto* SC2G_activity_proto::New() const {
  return new SC2G_activity_proto;
}

void SC2G_activity_proto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_id_ = GOOGLE_ULONGLONG(0);
    act_type_id_ = 0u;
    reward_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC2G_activity_proto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_act_type_id;
        break;
      }

      // optional uint32 act_type_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_act_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &act_type_id_)));
          set_has_act_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reward_type;
        break;
      }

      // optional uint32 reward_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_type_)));
          set_has_reward_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC2G_activity_proto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->table_id(), output);
  }

  // optional uint32 act_type_id = 2;
  if (has_act_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->act_type_id(), output);
  }

  // optional uint32 reward_type = 3;
  if (has_reward_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reward_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC2G_activity_proto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->table_id(), target);
  }

  // optional uint32 act_type_id = 2;
  if (has_act_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->act_type_id(), target);
  }

  // optional uint32 reward_type = 3;
  if (has_reward_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reward_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC2G_activity_proto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table_id());
    }

    // optional uint32 act_type_id = 2;
    if (has_act_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->act_type_id());
    }

    // optional uint32 reward_type = 3;
    if (has_reward_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC2G_activity_proto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC2G_activity_proto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC2G_activity_proto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC2G_activity_proto::MergeFrom(const SC2G_activity_proto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_act_type_id()) {
      set_act_type_id(from.act_type_id());
    }
    if (from.has_reward_type()) {
      set_reward_type(from.reward_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC2G_activity_proto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC2G_activity_proto::CopyFrom(const SC2G_activity_proto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC2G_activity_proto::IsInitialized() const {

  return true;
}

void SC2G_activity_proto::Swap(SC2G_activity_proto* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(act_type_id_, other->act_type_id_);
    std::swap(reward_type_, other->reward_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC2G_activity_proto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC2G_activity_proto_descriptor_;
  metadata.reflection = SC2G_activity_proto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC2G_activity_plan::kTableIdFieldNumber;
const int SC2G_activity_plan::kActivityIdFieldNumber;
const int SC2G_activity_plan::kOpenWayFieldNumber;
const int SC2G_activity_plan::kStartTimeFieldNumber;
const int SC2G_activity_plan::kLastTimeFieldNumber;
const int SC2G_activity_plan::kShowTimeFieldNumber;
const int SC2G_activity_plan::kStartDateFieldNumber;
const int SC2G_activity_plan::kEndDateFieldNumber;
const int SC2G_activity_plan::kEndShowDateFieldNumber;
const int SC2G_activity_plan::kStageAreaFieldNumber;
const int SC2G_activity_plan::kNeedGreaterThanOpenFieldNumber;
const int SC2G_activity_plan::kNeedLessThanOpenFieldNumber;
#endif  // !_MSC_VER

SC2G_activity_plan::SC2G_activity_plan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC2G_activity_plan::InitAsDefaultInstance() {
}

SC2G_activity_plan::SC2G_activity_plan(const SC2G_activity_plan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC2G_activity_plan::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = GOOGLE_ULONGLONG(0);
  activity_id_ = 0u;
  open_way_ = 0u;
  start_time_ = 0u;
  last_time_ = 0u;
  show_time_ = 0u;
  start_date_ = GOOGLE_ULONGLONG(0);
  end_date_ = GOOGLE_ULONGLONG(0);
  end_show_date_ = GOOGLE_ULONGLONG(0);
  stage_area_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  need_greater_than_open_ = 0u;
  need_less_than_open_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC2G_activity_plan::~SC2G_activity_plan() {
  SharedDtor();
}

void SC2G_activity_plan::SharedDtor() {
  if (stage_area_ != &::google::protobuf::internal::kEmptyString) {
    delete stage_area_;
  }
  if (this != default_instance_) {
  }
}

void SC2G_activity_plan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC2G_activity_plan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC2G_activity_plan_descriptor_;
}

const SC2G_activity_plan& SC2G_activity_plan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SC2G_activity_plan* SC2G_activity_plan::default_instance_ = NULL;

SC2G_activity_plan* SC2G_activity_plan::New() const {
  return new SC2G_activity_plan;
}

void SC2G_activity_plan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_id_ = GOOGLE_ULONGLONG(0);
    activity_id_ = 0u;
    open_way_ = 0u;
    start_time_ = 0u;
    last_time_ = 0u;
    show_time_ = 0u;
    start_date_ = GOOGLE_ULONGLONG(0);
    end_date_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    end_show_date_ = GOOGLE_ULONGLONG(0);
    if (has_stage_area()) {
      if (stage_area_ != &::google::protobuf::internal::kEmptyString) {
        stage_area_->clear();
      }
    }
    need_greater_than_open_ = 0u;
    need_less_than_open_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC2G_activity_plan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_open_way;
        break;
      }

      // optional uint32 open_way = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_way:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_way_)));
          set_has_open_way();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_time;
        break;
      }

      // optional uint32 start_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_time;
        break;
      }

      // optional uint32 last_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_show_time;
        break;
      }

      // optional uint32 show_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_time_)));
          set_has_show_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_start_date;
        break;
      }

      // optional uint64 start_date = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_date_)));
          set_has_start_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_end_date;
        break;
      }

      // optional uint64 end_date = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_date_)));
          set_has_end_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_end_show_date;
        break;
      }

      // optional uint64 end_show_date = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_show_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_show_date_)));
          set_has_end_show_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_stage_area;
        break;
      }

      // optional string stage_area = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stage_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stage_area()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stage_area().data(), this->stage_area().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_need_greater_than_open;
        break;
      }

      // optional uint32 need_greater_than_open = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_greater_than_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &need_greater_than_open_)));
          set_has_need_greater_than_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_need_less_than_open;
        break;
      }

      // optional uint32 need_less_than_open = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_less_than_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &need_less_than_open_)));
          set_has_need_less_than_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_table_id;
        break;
      }

      // optional uint64 table_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC2G_activity_plan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activity_id(), output);
  }

  // optional uint32 open_way = 2;
  if (has_open_way()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->open_way(), output);
  }

  // optional uint32 start_time = 3;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->start_time(), output);
  }

  // optional uint32 last_time = 4;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_time(), output);
  }

  // optional uint32 show_time = 5;
  if (has_show_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->show_time(), output);
  }

  // optional uint64 start_date = 6;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->start_date(), output);
  }

  // optional uint64 end_date = 7;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->end_date(), output);
  }

  // optional uint64 end_show_date = 8;
  if (has_end_show_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->end_show_date(), output);
  }

  // optional string stage_area = 9;
  if (has_stage_area()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stage_area().data(), this->stage_area().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->stage_area(), output);
  }

  // optional uint32 need_greater_than_open = 10;
  if (has_need_greater_than_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->need_greater_than_open(), output);
  }

  // optional uint32 need_less_than_open = 11;
  if (has_need_less_than_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->need_less_than_open(), output);
  }

  // optional uint64 table_id = 12;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->table_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC2G_activity_plan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activity_id(), target);
  }

  // optional uint32 open_way = 2;
  if (has_open_way()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->open_way(), target);
  }

  // optional uint32 start_time = 3;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->start_time(), target);
  }

  // optional uint32 last_time = 4;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_time(), target);
  }

  // optional uint32 show_time = 5;
  if (has_show_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->show_time(), target);
  }

  // optional uint64 start_date = 6;
  if (has_start_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->start_date(), target);
  }

  // optional uint64 end_date = 7;
  if (has_end_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->end_date(), target);
  }

  // optional uint64 end_show_date = 8;
  if (has_end_show_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->end_show_date(), target);
  }

  // optional string stage_area = 9;
  if (has_stage_area()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stage_area().data(), this->stage_area().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->stage_area(), target);
  }

  // optional uint32 need_greater_than_open = 10;
  if (has_need_greater_than_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->need_greater_than_open(), target);
  }

  // optional uint32 need_less_than_open = 11;
  if (has_need_less_than_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->need_less_than_open(), target);
  }

  // optional uint64 table_id = 12;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->table_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC2G_activity_plan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 table_id = 12;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table_id());
    }

    // optional uint32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_id());
    }

    // optional uint32 open_way = 2;
    if (has_open_way()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open_way());
    }

    // optional uint32 start_time = 3;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // optional uint32 last_time = 4;
    if (has_last_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_time());
    }

    // optional uint32 show_time = 5;
    if (has_show_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->show_time());
    }

    // optional uint64 start_date = 6;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_date());
    }

    // optional uint64 end_date = 7;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_date());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 end_show_date = 8;
    if (has_end_show_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_show_date());
    }

    // optional string stage_area = 9;
    if (has_stage_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stage_area());
    }

    // optional uint32 need_greater_than_open = 10;
    if (has_need_greater_than_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->need_greater_than_open());
    }

    // optional uint32 need_less_than_open = 11;
    if (has_need_less_than_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->need_less_than_open());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC2G_activity_plan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC2G_activity_plan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC2G_activity_plan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC2G_activity_plan::MergeFrom(const SC2G_activity_plan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_open_way()) {
      set_open_way(from.open_way());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_show_time()) {
      set_show_time(from.show_time());
    }
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_end_show_date()) {
      set_end_show_date(from.end_show_date());
    }
    if (from.has_stage_area()) {
      set_stage_area(from.stage_area());
    }
    if (from.has_need_greater_than_open()) {
      set_need_greater_than_open(from.need_greater_than_open());
    }
    if (from.has_need_less_than_open()) {
      set_need_less_than_open(from.need_less_than_open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC2G_activity_plan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC2G_activity_plan::CopyFrom(const SC2G_activity_plan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC2G_activity_plan::IsInitialized() const {

  return true;
}

void SC2G_activity_plan::Swap(SC2G_activity_plan* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(activity_id_, other->activity_id_);
    std::swap(open_way_, other->open_way_);
    std::swap(start_time_, other->start_time_);
    std::swap(last_time_, other->last_time_);
    std::swap(show_time_, other->show_time_);
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(end_show_date_, other->end_show_date_);
    std::swap(stage_area_, other->stage_area_);
    std::swap(need_greater_than_open_, other->need_greater_than_open_);
    std::swap(need_less_than_open_, other->need_less_than_open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC2G_activity_plan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC2G_activity_plan_descriptor_;
  metadata.reflection = SC2G_activity_plan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC2G_server_open_time::kTableIdFieldNumber;
const int SC2G_server_open_time::kServerIdFieldNumber;
const int SC2G_server_open_time::kOpenTimeFieldNumber;
#endif  // !_MSC_VER

SC2G_server_open_time::SC2G_server_open_time()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC2G_server_open_time::InitAsDefaultInstance() {
}

SC2G_server_open_time::SC2G_server_open_time(const SC2G_server_open_time& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC2G_server_open_time::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = GOOGLE_ULONGLONG(0);
  server_id_ = 0u;
  open_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC2G_server_open_time::~SC2G_server_open_time() {
  SharedDtor();
}

void SC2G_server_open_time::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC2G_server_open_time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC2G_server_open_time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC2G_server_open_time_descriptor_;
}

const SC2G_server_open_time& SC2G_server_open_time::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SC2G_server_open_time* SC2G_server_open_time::default_instance_ = NULL;

SC2G_server_open_time* SC2G_server_open_time::New() const {
  return new SC2G_server_open_time;
}

void SC2G_server_open_time::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_id_ = GOOGLE_ULONGLONG(0);
    server_id_ = 0u;
    open_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC2G_server_open_time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_open_time;
        break;
      }

      // optional uint64 open_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &open_time_)));
          set_has_open_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_table_id;
        break;
      }

      // optional uint64 table_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC2G_server_open_time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  // optional uint64 open_time = 2;
  if (has_open_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->open_time(), output);
  }

  // optional uint64 table_id = 3;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC2G_server_open_time::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  // optional uint64 open_time = 2;
  if (has_open_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->open_time(), target);
  }

  // optional uint64 table_id = 3;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC2G_server_open_time::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 table_id = 3;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table_id());
    }

    // optional uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // optional uint64 open_time = 2;
    if (has_open_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->open_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC2G_server_open_time::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC2G_server_open_time* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC2G_server_open_time*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC2G_server_open_time::MergeFrom(const SC2G_server_open_time& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_open_time()) {
      set_open_time(from.open_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC2G_server_open_time::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC2G_server_open_time::CopyFrom(const SC2G_server_open_time& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC2G_server_open_time::IsInitialized() const {

  return true;
}

void SC2G_server_open_time::Swap(SC2G_server_open_time* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(open_time_, other->open_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC2G_server_open_time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC2G_server_open_time_descriptor_;
  metadata.reflection = SC2G_server_open_time_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC2G_activity_reward::kTableIdFieldNumber;
const int SC2G_activity_reward::kActivityIdFieldNumber;
const int SC2G_activity_reward::kCostPriceFieldNumber;
const int SC2G_activity_reward::kIsHasDiscountFieldNumber;
const int SC2G_activity_reward::kCostDiscountFieldNumber;
const int SC2G_activity_reward::kConditonFieldNumber;
const int SC2G_activity_reward::kRewardListFieldNumber;
#endif  // !_MSC_VER

SC2G_activity_reward::SC2G_activity_reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC2G_activity_reward::InitAsDefaultInstance() {
}

SC2G_activity_reward::SC2G_activity_reward(const SC2G_activity_reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC2G_activity_reward::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = GOOGLE_ULONGLONG(0);
  activity_id_ = 0u;
  cost_price_ = 0u;
  is_has_discount_ = 0u;
  cost_discount_ = 0u;
  conditon_ = 0u;
  reward_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC2G_activity_reward::~SC2G_activity_reward() {
  SharedDtor();
}

void SC2G_activity_reward::SharedDtor() {
  if (reward_list_ != &::google::protobuf::internal::kEmptyString) {
    delete reward_list_;
  }
  if (this != default_instance_) {
  }
}

void SC2G_activity_reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC2G_activity_reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC2G_activity_reward_descriptor_;
}

const SC2G_activity_reward& SC2G_activity_reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SC2G_activity_reward* SC2G_activity_reward::default_instance_ = NULL;

SC2G_activity_reward* SC2G_activity_reward::New() const {
  return new SC2G_activity_reward;
}

void SC2G_activity_reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_id_ = GOOGLE_ULONGLONG(0);
    activity_id_ = 0u;
    cost_price_ = 0u;
    is_has_discount_ = 0u;
    cost_discount_ = 0u;
    conditon_ = 0u;
    if (has_reward_list()) {
      if (reward_list_ != &::google::protobuf::internal::kEmptyString) {
        reward_list_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC2G_activity_reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activity_id;
        break;
      }

      // optional uint32 activity_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cost_price;
        break;
      }

      // optional uint32 cost_price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_price_)));
          set_has_cost_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_has_discount;
        break;
      }

      // optional uint32 is_has_discount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_has_discount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_has_discount_)));
          set_has_is_has_discount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cost_discount;
        break;
      }

      // optional uint32 cost_discount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_discount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_discount_)));
          set_has_cost_discount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_conditon;
        break;
      }

      // optional uint32 conditon = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conditon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &conditon_)));
          set_has_conditon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_reward_list;
        break;
      }

      // optional string reward_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reward_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reward_list().data(), this->reward_list().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC2G_activity_reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->table_id(), output);
  }

  // optional uint32 activity_id = 2;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activity_id(), output);
  }

  // optional uint32 cost_price = 3;
  if (has_cost_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cost_price(), output);
  }

  // optional uint32 is_has_discount = 4;
  if (has_is_has_discount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->is_has_discount(), output);
  }

  // optional uint32 cost_discount = 5;
  if (has_cost_discount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cost_discount(), output);
  }

  // optional uint32 conditon = 6;
  if (has_conditon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->conditon(), output);
  }

  // optional string reward_list = 7;
  if (has_reward_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reward_list().data(), this->reward_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->reward_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC2G_activity_reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->table_id(), target);
  }

  // optional uint32 activity_id = 2;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->activity_id(), target);
  }

  // optional uint32 cost_price = 3;
  if (has_cost_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cost_price(), target);
  }

  // optional uint32 is_has_discount = 4;
  if (has_is_has_discount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->is_has_discount(), target);
  }

  // optional uint32 cost_discount = 5;
  if (has_cost_discount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cost_discount(), target);
  }

  // optional uint32 conditon = 6;
  if (has_conditon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->conditon(), target);
  }

  // optional string reward_list = 7;
  if (has_reward_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reward_list().data(), this->reward_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->reward_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC2G_activity_reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table_id());
    }

    // optional uint32 activity_id = 2;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_id());
    }

    // optional uint32 cost_price = 3;
    if (has_cost_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_price());
    }

    // optional uint32 is_has_discount = 4;
    if (has_is_has_discount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_has_discount());
    }

    // optional uint32 cost_discount = 5;
    if (has_cost_discount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_discount());
    }

    // optional uint32 conditon = 6;
    if (has_conditon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->conditon());
    }

    // optional string reward_list = 7;
    if (has_reward_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reward_list());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC2G_activity_reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC2G_activity_reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC2G_activity_reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC2G_activity_reward::MergeFrom(const SC2G_activity_reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_cost_price()) {
      set_cost_price(from.cost_price());
    }
    if (from.has_is_has_discount()) {
      set_is_has_discount(from.is_has_discount());
    }
    if (from.has_cost_discount()) {
      set_cost_discount(from.cost_discount());
    }
    if (from.has_conditon()) {
      set_conditon(from.conditon());
    }
    if (from.has_reward_list()) {
      set_reward_list(from.reward_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC2G_activity_reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC2G_activity_reward::CopyFrom(const SC2G_activity_reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC2G_activity_reward::IsInitialized() const {

  return true;
}

void SC2G_activity_reward::Swap(SC2G_activity_reward* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(activity_id_, other->activity_id_);
    std::swap(cost_price_, other->cost_price_);
    std::swap(is_has_discount_, other->is_has_discount_);
    std::swap(cost_discount_, other->cost_discount_);
    std::swap(conditon_, other->conditon_);
    std::swap(reward_list_, other->reward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC2G_activity_reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC2G_activity_reward_descriptor_;
  metadata.reflection = SC2G_activity_reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC2G_activity_package::kActivityProtoFieldNumber;
const int SC2G_activity_package::kActivityPlanFieldNumber;
const int SC2G_activity_package::kServerOpenTimeFieldNumber;
const int SC2G_activity_package::kActivityRewardFieldNumber;
#endif  // !_MSC_VER

SC2G_activity_package::SC2G_activity_package()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC2G_activity_package::InitAsDefaultInstance() {
}

SC2G_activity_package::SC2G_activity_package(const SC2G_activity_package& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC2G_activity_package::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC2G_activity_package::~SC2G_activity_package() {
  SharedDtor();
}

void SC2G_activity_package::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC2G_activity_package::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC2G_activity_package::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC2G_activity_package_descriptor_;
}

const SC2G_activity_package& SC2G_activity_package::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SC2G_activity_package* SC2G_activity_package::default_instance_ = NULL;

SC2G_activity_package* SC2G_activity_package::New() const {
  return new SC2G_activity_package;
}

void SC2G_activity_package::Clear() {
  activity_proto_.Clear();
  activity_plan_.Clear();
  server_open_time_.Clear();
  activity_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC2G_activity_package::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.SC2G_activity_proto activity_proto = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activity_proto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activity_proto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_activity_proto;
        if (input->ExpectTag(18)) goto parse_activity_plan;
        break;
      }

      // repeated .pb.SC2G_activity_plan activity_plan = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activity_plan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activity_plan()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_activity_plan;
        if (input->ExpectTag(26)) goto parse_server_open_time;
        break;
      }

      // repeated .pb.SC2G_server_open_time server_open_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_open_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_open_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_server_open_time;
        if (input->ExpectTag(34)) goto parse_activity_reward;
        break;
      }

      // repeated .pb.SC2G_activity_reward activity_reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activity_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activity_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_activity_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC2G_activity_package::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.SC2G_activity_proto activity_proto = 1;
  for (int i = 0; i < this->activity_proto_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activity_proto(i), output);
  }

  // repeated .pb.SC2G_activity_plan activity_plan = 2;
  for (int i = 0; i < this->activity_plan_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->activity_plan(i), output);
  }

  // repeated .pb.SC2G_server_open_time server_open_time = 3;
  for (int i = 0; i < this->server_open_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->server_open_time(i), output);
  }

  // repeated .pb.SC2G_activity_reward activity_reward = 4;
  for (int i = 0; i < this->activity_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->activity_reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC2G_activity_package::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.SC2G_activity_proto activity_proto = 1;
  for (int i = 0; i < this->activity_proto_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activity_proto(i), target);
  }

  // repeated .pb.SC2G_activity_plan activity_plan = 2;
  for (int i = 0; i < this->activity_plan_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->activity_plan(i), target);
  }

  // repeated .pb.SC2G_server_open_time server_open_time = 3;
  for (int i = 0; i < this->server_open_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->server_open_time(i), target);
  }

  // repeated .pb.SC2G_activity_reward activity_reward = 4;
  for (int i = 0; i < this->activity_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->activity_reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC2G_activity_package::ByteSize() const {
  int total_size = 0;

  // repeated .pb.SC2G_activity_proto activity_proto = 1;
  total_size += 1 * this->activity_proto_size();
  for (int i = 0; i < this->activity_proto_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activity_proto(i));
  }

  // repeated .pb.SC2G_activity_plan activity_plan = 2;
  total_size += 1 * this->activity_plan_size();
  for (int i = 0; i < this->activity_plan_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activity_plan(i));
  }

  // repeated .pb.SC2G_server_open_time server_open_time = 3;
  total_size += 1 * this->server_open_time_size();
  for (int i = 0; i < this->server_open_time_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server_open_time(i));
  }

  // repeated .pb.SC2G_activity_reward activity_reward = 4;
  total_size += 1 * this->activity_reward_size();
  for (int i = 0; i < this->activity_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activity_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC2G_activity_package::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC2G_activity_package* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC2G_activity_package*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC2G_activity_package::MergeFrom(const SC2G_activity_package& from) {
  GOOGLE_CHECK_NE(&from, this);
  activity_proto_.MergeFrom(from.activity_proto_);
  activity_plan_.MergeFrom(from.activity_plan_);
  server_open_time_.MergeFrom(from.server_open_time_);
  activity_reward_.MergeFrom(from.activity_reward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC2G_activity_package::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC2G_activity_package::CopyFrom(const SC2G_activity_package& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC2G_activity_package::IsInitialized() const {

  return true;
}

void SC2G_activity_package::Swap(SC2G_activity_package* other) {
  if (other != this) {
    activity_proto_.Swap(&other->activity_proto_);
    activity_plan_.Swap(&other->activity_plan_);
    server_open_time_.Swap(&other->server_open_time_);
    activity_reward_.Swap(&other->activity_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC2G_activity_package::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC2G_activity_package_descriptor_;
  metadata.reflection = SC2G_activity_package_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC2G_activity_package_Update::kAllInfoFieldNumber;
const int SC2G_activity_package_Update::kUpdateFieldNumber;
#endif  // !_MSC_VER

SC2G_activity_package_Update::SC2G_activity_package_Update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC2G_activity_package_Update::InitAsDefaultInstance() {
  all_info_ = const_cast< ::pb::SC2G_activity_package*>(&::pb::SC2G_activity_package::default_instance());
}

SC2G_activity_package_Update::SC2G_activity_package_Update(const SC2G_activity_package_Update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC2G_activity_package_Update::SharedCtor() {
  _cached_size_ = 0;
  all_info_ = NULL;
  update_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC2G_activity_package_Update::~SC2G_activity_package_Update() {
  SharedDtor();
}

void SC2G_activity_package_Update::SharedDtor() {
  if (this != default_instance_) {
    delete all_info_;
  }
}

void SC2G_activity_package_Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC2G_activity_package_Update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC2G_activity_package_Update_descriptor_;
}

const SC2G_activity_package_Update& SC2G_activity_package_Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SC2G_activity_package_Update* SC2G_activity_package_Update::default_instance_ = NULL;

SC2G_activity_package_Update* SC2G_activity_package_Update::New() const {
  return new SC2G_activity_package_Update;
}

void SC2G_activity_package_Update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_all_info()) {
      if (all_info_ != NULL) all_info_->::pb::SC2G_activity_package::Clear();
    }
    update_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC2G_activity_package_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.SC2G_activity_package all_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_all_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_update;
        break;
      }

      // required uint32 update = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_)));
          set_has_update();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC2G_activity_package_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.SC2G_activity_package all_info = 1;
  if (has_all_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->all_info(), output);
  }

  // required uint32 update = 2;
  if (has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->update(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC2G_activity_package_Update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.SC2G_activity_package all_info = 1;
  if (has_all_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->all_info(), target);
  }

  // required uint32 update = 2;
  if (has_update()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->update(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC2G_activity_package_Update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.SC2G_activity_package all_info = 1;
    if (has_all_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->all_info());
    }

    // required uint32 update = 2;
    if (has_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC2G_activity_package_Update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC2G_activity_package_Update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC2G_activity_package_Update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC2G_activity_package_Update::MergeFrom(const SC2G_activity_package_Update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_all_info()) {
      mutable_all_info()->::pb::SC2G_activity_package::MergeFrom(from.all_info());
    }
    if (from.has_update()) {
      set_update(from.update());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC2G_activity_package_Update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC2G_activity_package_Update::CopyFrom(const SC2G_activity_package_Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC2G_activity_package_Update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SC2G_activity_package_Update::Swap(SC2G_activity_package_Update* other) {
  if (other != this) {
    std::swap(all_info_, other->all_info_);
    std::swap(update_, other->update_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC2G_activity_package_Update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC2G_activity_package_Update_descriptor_;
  metadata.reflection = SC2G_activity_package_Update_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC2G_ReloadPayItem::kRegionIdFieldNumber;
#endif  // !_MSC_VER

SC2G_ReloadPayItem::SC2G_ReloadPayItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC2G_ReloadPayItem::InitAsDefaultInstance() {
}

SC2G_ReloadPayItem::SC2G_ReloadPayItem(const SC2G_ReloadPayItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC2G_ReloadPayItem::SharedCtor() {
  _cached_size_ = 0;
  region_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC2G_ReloadPayItem::~SC2G_ReloadPayItem() {
  SharedDtor();
}

void SC2G_ReloadPayItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC2G_ReloadPayItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC2G_ReloadPayItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC2G_ReloadPayItem_descriptor_;
}

const SC2G_ReloadPayItem& SC2G_ReloadPayItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SC2G_ReloadPayItem* SC2G_ReloadPayItem::default_instance_ = NULL;

SC2G_ReloadPayItem* SC2G_ReloadPayItem::New() const {
  return new SC2G_ReloadPayItem;
}

void SC2G_ReloadPayItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    region_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC2G_ReloadPayItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 region_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC2G_ReloadPayItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 region_id = 1;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->region_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC2G_ReloadPayItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 region_id = 1;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->region_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC2G_ReloadPayItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 region_id = 1;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC2G_ReloadPayItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC2G_ReloadPayItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC2G_ReloadPayItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC2G_ReloadPayItem::MergeFrom(const SC2G_ReloadPayItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC2G_ReloadPayItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC2G_ReloadPayItem::CopyFrom(const SC2G_ReloadPayItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC2G_ReloadPayItem::IsInitialized() const {

  return true;
}

void SC2G_ReloadPayItem::Swap(SC2G_ReloadPayItem* other) {
  if (other != this) {
    std::swap(region_id_, other->region_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC2G_ReloadPayItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC2G_ReloadPayItem_descriptor_;
  metadata.reflection = SC2G_ReloadPayItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_activity_update_info::kActivityIdFieldNumber;
const int MSG_activity_update_info::kOpenWayFieldNumber;
const int MSG_activity_update_info::kStartTimeFieldNumber;
const int MSG_activity_update_info::kLastTimeFieldNumber;
const int MSG_activity_update_info::kShowTimeFieldNumber;
const int MSG_activity_update_info::kStartDateFieldNumber;
const int MSG_activity_update_info::kEndDateFieldNumber;
const int MSG_activity_update_info::kEndShowDateFieldNumber;
const int MSG_activity_update_info::kStageAreaFieldNumber;
const int MSG_activity_update_info::kNeedGreaterThanOpenFieldNumber;
const int MSG_activity_update_info::kNeedLessThanOpenFieldNumber;
#endif  // !_MSC_VER

MSG_activity_update_info::MSG_activity_update_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_activity_update_info::InitAsDefaultInstance() {
}

MSG_activity_update_info::MSG_activity_update_info(const MSG_activity_update_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_activity_update_info::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0u;
  open_way_ = 0u;
  start_time_ = 0u;
  last_time_ = 0u;
  show_time_ = 0u;
  start_date_ = GOOGLE_ULONGLONG(0);
  end_date_ = GOOGLE_ULONGLONG(0);
  end_show_date_ = GOOGLE_ULONGLONG(0);
  stage_area_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  need_greater_than_open_ = 0u;
  need_less_than_open_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_activity_update_info::~MSG_activity_update_info() {
  SharedDtor();
}

void MSG_activity_update_info::SharedDtor() {
  if (stage_area_ != &::google::protobuf::internal::kEmptyString) {
    delete stage_area_;
  }
  if (this != default_instance_) {
  }
}

void MSG_activity_update_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_activity_update_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_activity_update_info_descriptor_;
}

const MSG_activity_update_info& MSG_activity_update_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

MSG_activity_update_info* MSG_activity_update_info::default_instance_ = NULL;

MSG_activity_update_info* MSG_activity_update_info::New() const {
  return new MSG_activity_update_info;
}

void MSG_activity_update_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0u;
    open_way_ = 0u;
    start_time_ = 0u;
    last_time_ = 0u;
    show_time_ = 0u;
    start_date_ = GOOGLE_ULONGLONG(0);
    end_date_ = GOOGLE_ULONGLONG(0);
    end_show_date_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_stage_area()) {
      if (stage_area_ != &::google::protobuf::internal::kEmptyString) {
        stage_area_->clear();
      }
    }
    need_greater_than_open_ = 0u;
    need_less_than_open_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_activity_update_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_open_way;
        break;
      }

      // required uint32 open_way = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_way:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_way_)));
          set_has_open_way();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_time;
        break;
      }

      // optional uint32 start_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_time;
        break;
      }

      // optional uint32 last_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_show_time;
        break;
      }

      // optional uint32 show_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_time_)));
          set_has_show_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_start_date;
        break;
      }

      // optional uint64 start_date = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_date_)));
          set_has_start_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_end_date;
        break;
      }

      // optional uint64 end_date = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_date_)));
          set_has_end_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_end_show_date;
        break;
      }

      // optional uint64 end_show_date = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_show_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_show_date_)));
          set_has_end_show_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_stage_area;
        break;
      }

      // optional string stage_area = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stage_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stage_area()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stage_area().data(), this->stage_area().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_need_greater_than_open;
        break;
      }

      // optional uint32 need_greater_than_open = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_greater_than_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &need_greater_than_open_)));
          set_has_need_greater_than_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_need_less_than_open;
        break;
      }

      // optional uint32 need_less_than_open = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_less_than_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &need_less_than_open_)));
          set_has_need_less_than_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_activity_update_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activity_id(), output);
  }

  // required uint32 open_way = 2;
  if (has_open_way()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->open_way(), output);
  }

  // optional uint32 start_time = 3;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->start_time(), output);
  }

  // optional uint32 last_time = 4;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_time(), output);
  }

  // optional uint32 show_time = 5;
  if (has_show_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->show_time(), output);
  }

  // optional uint64 start_date = 6;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->start_date(), output);
  }

  // optional uint64 end_date = 7;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->end_date(), output);
  }

  // optional uint64 end_show_date = 8;
  if (has_end_show_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->end_show_date(), output);
  }

  // optional string stage_area = 9;
  if (has_stage_area()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stage_area().data(), this->stage_area().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->stage_area(), output);
  }

  // optional uint32 need_greater_than_open = 10;
  if (has_need_greater_than_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->need_greater_than_open(), output);
  }

  // optional uint32 need_less_than_open = 11;
  if (has_need_less_than_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->need_less_than_open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_activity_update_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activity_id(), target);
  }

  // required uint32 open_way = 2;
  if (has_open_way()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->open_way(), target);
  }

  // optional uint32 start_time = 3;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->start_time(), target);
  }

  // optional uint32 last_time = 4;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_time(), target);
  }

  // optional uint32 show_time = 5;
  if (has_show_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->show_time(), target);
  }

  // optional uint64 start_date = 6;
  if (has_start_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->start_date(), target);
  }

  // optional uint64 end_date = 7;
  if (has_end_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->end_date(), target);
  }

  // optional uint64 end_show_date = 8;
  if (has_end_show_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->end_show_date(), target);
  }

  // optional string stage_area = 9;
  if (has_stage_area()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stage_area().data(), this->stage_area().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->stage_area(), target);
  }

  // optional uint32 need_greater_than_open = 10;
  if (has_need_greater_than_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->need_greater_than_open(), target);
  }

  // optional uint32 need_less_than_open = 11;
  if (has_need_less_than_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->need_less_than_open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_activity_update_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_id());
    }

    // required uint32 open_way = 2;
    if (has_open_way()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open_way());
    }

    // optional uint32 start_time = 3;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // optional uint32 last_time = 4;
    if (has_last_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_time());
    }

    // optional uint32 show_time = 5;
    if (has_show_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->show_time());
    }

    // optional uint64 start_date = 6;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_date());
    }

    // optional uint64 end_date = 7;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_date());
    }

    // optional uint64 end_show_date = 8;
    if (has_end_show_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_show_date());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string stage_area = 9;
    if (has_stage_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stage_area());
    }

    // optional uint32 need_greater_than_open = 10;
    if (has_need_greater_than_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->need_greater_than_open());
    }

    // optional uint32 need_less_than_open = 11;
    if (has_need_less_than_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->need_less_than_open());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_activity_update_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_activity_update_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_activity_update_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_activity_update_info::MergeFrom(const MSG_activity_update_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_open_way()) {
      set_open_way(from.open_way());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_show_time()) {
      set_show_time(from.show_time());
    }
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_end_show_date()) {
      set_end_show_date(from.end_show_date());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_stage_area()) {
      set_stage_area(from.stage_area());
    }
    if (from.has_need_greater_than_open()) {
      set_need_greater_than_open(from.need_greater_than_open());
    }
    if (from.has_need_less_than_open()) {
      set_need_less_than_open(from.need_less_than_open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_activity_update_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_activity_update_info::CopyFrom(const MSG_activity_update_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_activity_update_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MSG_activity_update_info::Swap(MSG_activity_update_info* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(open_way_, other->open_way_);
    std::swap(start_time_, other->start_time_);
    std::swap(last_time_, other->last_time_);
    std::swap(show_time_, other->show_time_);
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(end_show_date_, other->end_show_date_);
    std::swap(stage_area_, other->stage_area_);
    std::swap(need_greater_than_open_, other->need_greater_than_open_);
    std::swap(need_less_than_open_, other->need_less_than_open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_activity_update_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_activity_update_info_descriptor_;
  metadata.reflection = MSG_activity_update_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2E_RegisterInfo::kRegionIdFieldNumber;
const int SG2E_RegisterInfo::kServerIdFieldNumber;
const int SG2E_RegisterInfo::kIpFieldNumber;
const int SG2E_RegisterInfo::kPortFieldNumber;
#endif  // !_MSC_VER

SG2E_RegisterInfo::SG2E_RegisterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2E_RegisterInfo::InitAsDefaultInstance() {
}

SG2E_RegisterInfo::SG2E_RegisterInfo(const SG2E_RegisterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2E_RegisterInfo::SharedCtor() {
  _cached_size_ = 0;
  region_id_ = 0;
  server_id_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2E_RegisterInfo::~SG2E_RegisterInfo() {
  SharedDtor();
}

void SG2E_RegisterInfo::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (this != default_instance_) {
  }
}

void SG2E_RegisterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2E_RegisterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2E_RegisterInfo_descriptor_;
}

const SG2E_RegisterInfo& SG2E_RegisterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2E_RegisterInfo* SG2E_RegisterInfo::default_instance_ = NULL;

SG2E_RegisterInfo* SG2E_RegisterInfo::New() const {
  return new SG2E_RegisterInfo;
}

void SG2E_RegisterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    region_id_ = 0;
    server_id_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_port()) {
      if (port_ != &::google::protobuf::internal::kEmptyString) {
        port_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2E_RegisterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 region_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }

      // required int32 server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // required string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_port;
        break;
      }

      // required string port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2E_RegisterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 region_id = 1;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->region_id(), output);
  }

  // required int32 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->server_id(), output);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // required string port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2E_RegisterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 region_id = 1;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->region_id(), target);
  }

  // required int32 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->server_id(), target);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // required string port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2E_RegisterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 region_id = 1;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region_id());
    }

    // required int32 server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }

    // required string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required string port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2E_RegisterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2E_RegisterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2E_RegisterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2E_RegisterInfo::MergeFrom(const SG2E_RegisterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2E_RegisterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2E_RegisterInfo::CopyFrom(const SG2E_RegisterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2E_RegisterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SG2E_RegisterInfo::Swap(SG2E_RegisterInfo* other) {
  if (other != this) {
    std::swap(region_id_, other->region_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2E_RegisterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2E_RegisterInfo_descriptor_;
  metadata.reflection = SG2E_RegisterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2E_RegisterInfoRet::kResultFieldNumber;
#endif  // !_MSC_VER

SG2E_RegisterInfoRet::SG2E_RegisterInfoRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2E_RegisterInfoRet::InitAsDefaultInstance() {
}

SG2E_RegisterInfoRet::SG2E_RegisterInfoRet(const SG2E_RegisterInfoRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2E_RegisterInfoRet::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2E_RegisterInfoRet::~SG2E_RegisterInfoRet() {
  SharedDtor();
}

void SG2E_RegisterInfoRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SG2E_RegisterInfoRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2E_RegisterInfoRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2E_RegisterInfoRet_descriptor_;
}

const SG2E_RegisterInfoRet& SG2E_RegisterInfoRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2E_RegisterInfoRet* SG2E_RegisterInfoRet::default_instance_ = NULL;

SG2E_RegisterInfoRet* SG2E_RegisterInfoRet::New() const {
  return new SG2E_RegisterInfoRet;
}

void SG2E_RegisterInfoRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2E_RegisterInfoRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.RegisterResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::RegisterResult_IsValid(value)) {
            set_result(static_cast< ::pb::RegisterResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2E_RegisterInfoRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.RegisterResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2E_RegisterInfoRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.RegisterResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2E_RegisterInfoRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.RegisterResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2E_RegisterInfoRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2E_RegisterInfoRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2E_RegisterInfoRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2E_RegisterInfoRet::MergeFrom(const SG2E_RegisterInfoRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2E_RegisterInfoRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2E_RegisterInfoRet::CopyFrom(const SG2E_RegisterInfoRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2E_RegisterInfoRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SG2E_RegisterInfoRet::Swap(SG2E_RegisterInfoRet* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2E_RegisterInfoRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2E_RegisterInfoRet_descriptor_;
  metadata.reflection = SG2E_RegisterInfoRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2B_RegisterInfo::kServerIdFieldNumber;
const int SG2B_RegisterInfo::kRegionIdFieldNumber;
const int SG2B_RegisterInfo::kIpFieldNumber;
const int SG2B_RegisterInfo::kPortFieldNumber;
const int SG2B_RegisterInfo::kNamesFieldNumber;
#endif  // !_MSC_VER

SG2B_RegisterInfo::SG2B_RegisterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2B_RegisterInfo::InitAsDefaultInstance() {
}

SG2B_RegisterInfo::SG2B_RegisterInfo(const SG2B_RegisterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2B_RegisterInfo::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0;
  region_id_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2B_RegisterInfo::~SG2B_RegisterInfo() {
  SharedDtor();
}

void SG2B_RegisterInfo::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (this != default_instance_) {
  }
}

void SG2B_RegisterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2B_RegisterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2B_RegisterInfo_descriptor_;
}

const SG2B_RegisterInfo& SG2B_RegisterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2B_RegisterInfo* SG2B_RegisterInfo::default_instance_ = NULL;

SG2B_RegisterInfo* SG2B_RegisterInfo::New() const {
  return new SG2B_RegisterInfo;
}

void SG2B_RegisterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0;
    region_id_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_port()) {
      if (port_ != &::google::protobuf::internal::kEmptyString) {
        port_->clear();
      }
    }
  }
  names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2B_RegisterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_region_id;
        break;
      }

      // required int32 region_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_region_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // required string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_port;
        break;
      }

      // required string port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_names;
        break;
      }

      // repeated string names = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_names;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2B_RegisterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }

  // required int32 region_id = 2;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region_id(), output);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // required string port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->port(), output);
  }

  // repeated string names = 5;
  for (int i = 0; i < this->names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->names(i).data(), this->names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->names(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2B_RegisterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }

  // required int32 region_id = 2;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region_id(), target);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // required string port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->port(), target);
  }

  // repeated string names = 5;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->names(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2B_RegisterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }

    // required int32 region_id = 2;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region_id());
    }

    // required string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required string port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port());
    }

  }
  // repeated string names = 5;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2B_RegisterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2B_RegisterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2B_RegisterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2B_RegisterInfo::MergeFrom(const SG2B_RegisterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2B_RegisterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2B_RegisterInfo::CopyFrom(const SG2B_RegisterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2B_RegisterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SG2B_RegisterInfo::Swap(SG2B_RegisterInfo* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(region_id_, other->region_id_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    names_.Swap(&other->names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2B_RegisterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2B_RegisterInfo_descriptor_;
  metadata.reflection = SG2B_RegisterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2B_RegisterInfoRet::kResultFieldNumber;
#endif  // !_MSC_VER

SG2B_RegisterInfoRet::SG2B_RegisterInfoRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2B_RegisterInfoRet::InitAsDefaultInstance() {
}

SG2B_RegisterInfoRet::SG2B_RegisterInfoRet(const SG2B_RegisterInfoRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2B_RegisterInfoRet::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2B_RegisterInfoRet::~SG2B_RegisterInfoRet() {
  SharedDtor();
}

void SG2B_RegisterInfoRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SG2B_RegisterInfoRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2B_RegisterInfoRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2B_RegisterInfoRet_descriptor_;
}

const SG2B_RegisterInfoRet& SG2B_RegisterInfoRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2B_RegisterInfoRet* SG2B_RegisterInfoRet::default_instance_ = NULL;

SG2B_RegisterInfoRet* SG2B_RegisterInfoRet::New() const {
  return new SG2B_RegisterInfoRet;
}

void SG2B_RegisterInfoRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2B_RegisterInfoRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.RegisterResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::RegisterResult_IsValid(value)) {
            set_result(static_cast< ::pb::RegisterResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2B_RegisterInfoRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.RegisterResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2B_RegisterInfoRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.RegisterResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2B_RegisterInfoRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.RegisterResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2B_RegisterInfoRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2B_RegisterInfoRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2B_RegisterInfoRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2B_RegisterInfoRet::MergeFrom(const SG2B_RegisterInfoRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2B_RegisterInfoRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2B_RegisterInfoRet::CopyFrom(const SG2B_RegisterInfoRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2B_RegisterInfoRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SG2B_RegisterInfoRet::Swap(SG2B_RegisterInfoRet* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2B_RegisterInfoRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2B_RegisterInfoRet_descriptor_;
  metadata.reflection = SG2B_RegisterInfoRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2R_RegisterInfo::kServerIdFieldNumber;
const int SG2R_RegisterInfo::kRegionIdFieldNumber;
const int SG2R_RegisterInfo::kIpFieldNumber;
const int SG2R_RegisterInfo::kPortFieldNumber;
const int SG2R_RegisterInfo::kNamesFieldNumber;
#endif  // !_MSC_VER

SG2R_RegisterInfo::SG2R_RegisterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2R_RegisterInfo::InitAsDefaultInstance() {
}

SG2R_RegisterInfo::SG2R_RegisterInfo(const SG2R_RegisterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2R_RegisterInfo::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0;
  region_id_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2R_RegisterInfo::~SG2R_RegisterInfo() {
  SharedDtor();
}

void SG2R_RegisterInfo::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (this != default_instance_) {
  }
}

void SG2R_RegisterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2R_RegisterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2R_RegisterInfo_descriptor_;
}

const SG2R_RegisterInfo& SG2R_RegisterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2R_RegisterInfo* SG2R_RegisterInfo::default_instance_ = NULL;

SG2R_RegisterInfo* SG2R_RegisterInfo::New() const {
  return new SG2R_RegisterInfo;
}

void SG2R_RegisterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0;
    region_id_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_port()) {
      if (port_ != &::google::protobuf::internal::kEmptyString) {
        port_->clear();
      }
    }
  }
  names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2R_RegisterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_region_id;
        break;
      }

      // required int32 region_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_region_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // required string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_port;
        break;
      }

      // required string port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_names;
        break;
      }

      // repeated string names = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_names;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2R_RegisterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }

  // required int32 region_id = 2;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region_id(), output);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // required string port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->port(), output);
  }

  // repeated string names = 5;
  for (int i = 0; i < this->names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->names(i).data(), this->names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->names(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2R_RegisterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }

  // required int32 region_id = 2;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region_id(), target);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // required string port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->port(), target);
  }

  // repeated string names = 5;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->names(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2R_RegisterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }

    // required int32 region_id = 2;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region_id());
    }

    // required string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required string port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port());
    }

  }
  // repeated string names = 5;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2R_RegisterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2R_RegisterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2R_RegisterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2R_RegisterInfo::MergeFrom(const SG2R_RegisterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2R_RegisterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2R_RegisterInfo::CopyFrom(const SG2R_RegisterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2R_RegisterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SG2R_RegisterInfo::Swap(SG2R_RegisterInfo* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(region_id_, other->region_id_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    names_.Swap(&other->names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2R_RegisterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2R_RegisterInfo_descriptor_;
  metadata.reflection = SG2R_RegisterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2R_RegisterInfoRet::kResultFieldNumber;
#endif  // !_MSC_VER

SG2R_RegisterInfoRet::SG2R_RegisterInfoRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2R_RegisterInfoRet::InitAsDefaultInstance() {
}

SG2R_RegisterInfoRet::SG2R_RegisterInfoRet(const SG2R_RegisterInfoRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2R_RegisterInfoRet::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2R_RegisterInfoRet::~SG2R_RegisterInfoRet() {
  SharedDtor();
}

void SG2R_RegisterInfoRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SG2R_RegisterInfoRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2R_RegisterInfoRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2R_RegisterInfoRet_descriptor_;
}

const SG2R_RegisterInfoRet& SG2R_RegisterInfoRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2R_RegisterInfoRet* SG2R_RegisterInfoRet::default_instance_ = NULL;

SG2R_RegisterInfoRet* SG2R_RegisterInfoRet::New() const {
  return new SG2R_RegisterInfoRet;
}

void SG2R_RegisterInfoRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2R_RegisterInfoRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.RegisterResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::RegisterResult_IsValid(value)) {
            set_result(static_cast< ::pb::RegisterResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2R_RegisterInfoRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.RegisterResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2R_RegisterInfoRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.RegisterResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2R_RegisterInfoRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.RegisterResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2R_RegisterInfoRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2R_RegisterInfoRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2R_RegisterInfoRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2R_RegisterInfoRet::MergeFrom(const SG2R_RegisterInfoRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2R_RegisterInfoRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2R_RegisterInfoRet::CopyFrom(const SG2R_RegisterInfoRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2R_RegisterInfoRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SG2R_RegisterInfoRet::Swap(SG2R_RegisterInfoRet* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2R_RegisterInfoRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2R_RegisterInfoRet_descriptor_;
  metadata.reflection = SG2R_RegisterInfoRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2R_RegisterPlayerInfoRet::kPlayerIdFieldNumber;
const int SG2R_RegisterPlayerInfoRet::kIsSuccessFieldNumber;
#endif  // !_MSC_VER

SG2R_RegisterPlayerInfoRet::SG2R_RegisterPlayerInfoRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2R_RegisterPlayerInfoRet::InitAsDefaultInstance() {
}

SG2R_RegisterPlayerInfoRet::SG2R_RegisterPlayerInfoRet(const SG2R_RegisterPlayerInfoRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2R_RegisterPlayerInfoRet::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  is_success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2R_RegisterPlayerInfoRet::~SG2R_RegisterPlayerInfoRet() {
  SharedDtor();
}

void SG2R_RegisterPlayerInfoRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SG2R_RegisterPlayerInfoRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2R_RegisterPlayerInfoRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2R_RegisterPlayerInfoRet_descriptor_;
}

const SG2R_RegisterPlayerInfoRet& SG2R_RegisterPlayerInfoRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2R_RegisterPlayerInfoRet* SG2R_RegisterPlayerInfoRet::default_instance_ = NULL;

SG2R_RegisterPlayerInfoRet* SG2R_RegisterPlayerInfoRet::New() const {
  return new SG2R_RegisterPlayerInfoRet;
}

void SG2R_RegisterPlayerInfoRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    is_success_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2R_RegisterPlayerInfoRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_success;
        break;
      }

      // required bool is_success = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_success_)));
          set_has_is_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2R_RegisterPlayerInfoRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // required bool is_success = 2;
  if (has_is_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2R_RegisterPlayerInfoRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // required bool is_success = 2;
  if (has_is_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2R_RegisterPlayerInfoRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // required bool is_success = 2;
    if (has_is_success()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2R_RegisterPlayerInfoRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2R_RegisterPlayerInfoRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2R_RegisterPlayerInfoRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2R_RegisterPlayerInfoRet::MergeFrom(const SG2R_RegisterPlayerInfoRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_is_success()) {
      set_is_success(from.is_success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2R_RegisterPlayerInfoRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2R_RegisterPlayerInfoRet::CopyFrom(const SG2R_RegisterPlayerInfoRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2R_RegisterPlayerInfoRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SG2R_RegisterPlayerInfoRet::Swap(SG2R_RegisterPlayerInfoRet* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(is_success_, other->is_success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2R_RegisterPlayerInfoRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2R_RegisterPlayerInfoRet_descriptor_;
  metadata.reflection = SG2R_RegisterPlayerInfoRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SR2C_RegisterInfo::kServerIdFieldNumber;
const int SR2C_RegisterInfo::kNamesFieldNumber;
const int SR2C_RegisterInfo::kIpFieldNumber;
const int SR2C_RegisterInfo::kPortFieldNumber;
#endif  // !_MSC_VER

SR2C_RegisterInfo::SR2C_RegisterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SR2C_RegisterInfo::InitAsDefaultInstance() {
}

SR2C_RegisterInfo::SR2C_RegisterInfo(const SR2C_RegisterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SR2C_RegisterInfo::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SR2C_RegisterInfo::~SR2C_RegisterInfo() {
  SharedDtor();
}

void SR2C_RegisterInfo::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (this != default_instance_) {
  }
}

void SR2C_RegisterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SR2C_RegisterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SR2C_RegisterInfo_descriptor_;
}

const SR2C_RegisterInfo& SR2C_RegisterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SR2C_RegisterInfo* SR2C_RegisterInfo::default_instance_ = NULL;

SR2C_RegisterInfo* SR2C_RegisterInfo::New() const {
  return new SR2C_RegisterInfo;
}

void SR2C_RegisterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_port()) {
      if (port_ != &::google::protobuf::internal::kEmptyString) {
        port_->clear();
      }
    }
  }
  names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SR2C_RegisterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_names;
        break;
      }

      // repeated string names = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_names;
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // required string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_port;
        break;
      }

      // required string port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SR2C_RegisterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }

  // repeated string names = 2;
  for (int i = 0; i < this->names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->names(i).data(), this->names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->names(i), output);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // required string port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SR2C_RegisterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }

  // repeated string names = 2;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->names(i), target);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // required string port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SR2C_RegisterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }

    // required string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required string port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port());
    }

  }
  // repeated string names = 2;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SR2C_RegisterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SR2C_RegisterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SR2C_RegisterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SR2C_RegisterInfo::MergeFrom(const SR2C_RegisterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SR2C_RegisterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SR2C_RegisterInfo::CopyFrom(const SR2C_RegisterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SR2C_RegisterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void SR2C_RegisterInfo::Swap(SR2C_RegisterInfo* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    names_.Swap(&other->names_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SR2C_RegisterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SR2C_RegisterInfo_descriptor_;
  metadata.reflection = SR2C_RegisterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SR2C_RegisterInfoRet::kResultFieldNumber;
const int SR2C_RegisterInfoRet::kRegionIdFieldNumber;
#endif  // !_MSC_VER

SR2C_RegisterInfoRet::SR2C_RegisterInfoRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SR2C_RegisterInfoRet::InitAsDefaultInstance() {
}

SR2C_RegisterInfoRet::SR2C_RegisterInfoRet(const SR2C_RegisterInfoRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SR2C_RegisterInfoRet::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  region_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SR2C_RegisterInfoRet::~SR2C_RegisterInfoRet() {
  SharedDtor();
}

void SR2C_RegisterInfoRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SR2C_RegisterInfoRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SR2C_RegisterInfoRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SR2C_RegisterInfoRet_descriptor_;
}

const SR2C_RegisterInfoRet& SR2C_RegisterInfoRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SR2C_RegisterInfoRet* SR2C_RegisterInfoRet::default_instance_ = NULL;

SR2C_RegisterInfoRet* SR2C_RegisterInfoRet::New() const {
  return new SR2C_RegisterInfoRet;
}

void SR2C_RegisterInfoRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    region_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SR2C_RegisterInfoRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.RegisterResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::RegisterResult_IsValid(value)) {
            set_result(static_cast< ::pb::RegisterResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_region_id;
        break;
      }

      // optional int32 region_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_region_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SR2C_RegisterInfoRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.RegisterResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional int32 region_id = 2;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SR2C_RegisterInfoRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.RegisterResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional int32 region_id = 2;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SR2C_RegisterInfoRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.RegisterResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 region_id = 2;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SR2C_RegisterInfoRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SR2C_RegisterInfoRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SR2C_RegisterInfoRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SR2C_RegisterInfoRet::MergeFrom(const SR2C_RegisterInfoRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SR2C_RegisterInfoRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SR2C_RegisterInfoRet::CopyFrom(const SR2C_RegisterInfoRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SR2C_RegisterInfoRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SR2C_RegisterInfoRet::Swap(SR2C_RegisterInfoRet* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(region_id_, other->region_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SR2C_RegisterInfoRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SR2C_RegisterInfoRet_descriptor_;
  metadata.reflection = SR2C_RegisterInfoRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SR2C_GetLobbyServersRet::kIpFieldNumber;
const int SR2C_GetLobbyServersRet::kPortFieldNumber;
#endif  // !_MSC_VER

SR2C_GetLobbyServersRet::SR2C_GetLobbyServersRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SR2C_GetLobbyServersRet::InitAsDefaultInstance() {
}

SR2C_GetLobbyServersRet::SR2C_GetLobbyServersRet(const SR2C_GetLobbyServersRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SR2C_GetLobbyServersRet::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SR2C_GetLobbyServersRet::~SR2C_GetLobbyServersRet() {
  SharedDtor();
}

void SR2C_GetLobbyServersRet::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (this != default_instance_) {
  }
}

void SR2C_GetLobbyServersRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SR2C_GetLobbyServersRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SR2C_GetLobbyServersRet_descriptor_;
}

const SR2C_GetLobbyServersRet& SR2C_GetLobbyServersRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SR2C_GetLobbyServersRet* SR2C_GetLobbyServersRet::default_instance_ = NULL;

SR2C_GetLobbyServersRet* SR2C_GetLobbyServersRet::New() const {
  return new SR2C_GetLobbyServersRet;
}

void SR2C_GetLobbyServersRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_port()) {
      if (port_ != &::google::protobuf::internal::kEmptyString) {
        port_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SR2C_GetLobbyServersRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_port;
        break;
      }

      // required string port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SR2C_GetLobbyServersRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }

  // required string port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SR2C_GetLobbyServersRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required string port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SR2C_GetLobbyServersRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required string port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SR2C_GetLobbyServersRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SR2C_GetLobbyServersRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SR2C_GetLobbyServersRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SR2C_GetLobbyServersRet::MergeFrom(const SR2C_GetLobbyServersRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SR2C_GetLobbyServersRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SR2C_GetLobbyServersRet::CopyFrom(const SR2C_GetLobbyServersRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SR2C_GetLobbyServersRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SR2C_GetLobbyServersRet::Swap(SR2C_GetLobbyServersRet* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SR2C_GetLobbyServersRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SR2C_GetLobbyServersRet_descriptor_;
  metadata.reflection = SR2C_GetLobbyServersRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SR2B_RegisterInfo::kServerIdFieldNumber;
const int SR2B_RegisterInfo::kRegionIdFieldNumber;
const int SR2B_RegisterInfo::kIpFieldNumber;
const int SR2B_RegisterInfo::kPortFieldNumber;
const int SR2B_RegisterInfo::kNamesFieldNumber;
#endif  // !_MSC_VER

SR2B_RegisterInfo::SR2B_RegisterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SR2B_RegisterInfo::InitAsDefaultInstance() {
}

SR2B_RegisterInfo::SR2B_RegisterInfo(const SR2B_RegisterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SR2B_RegisterInfo::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0;
  region_id_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SR2B_RegisterInfo::~SR2B_RegisterInfo() {
  SharedDtor();
}

void SR2B_RegisterInfo::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (this != default_instance_) {
  }
}

void SR2B_RegisterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SR2B_RegisterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SR2B_RegisterInfo_descriptor_;
}

const SR2B_RegisterInfo& SR2B_RegisterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SR2B_RegisterInfo* SR2B_RegisterInfo::default_instance_ = NULL;

SR2B_RegisterInfo* SR2B_RegisterInfo::New() const {
  return new SR2B_RegisterInfo;
}

void SR2B_RegisterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0;
    region_id_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_port()) {
      if (port_ != &::google::protobuf::internal::kEmptyString) {
        port_->clear();
      }
    }
  }
  names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SR2B_RegisterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_region_id;
        break;
      }

      // required int32 region_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_region_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // required string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_port;
        break;
      }

      // required string port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_names;
        break;
      }

      // repeated string names = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_names;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SR2B_RegisterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }

  // required int32 region_id = 2;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region_id(), output);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // required string port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->port(), output);
  }

  // repeated string names = 5;
  for (int i = 0; i < this->names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->names(i).data(), this->names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->names(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SR2B_RegisterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }

  // required int32 region_id = 2;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region_id(), target);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // required string port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->port(), target);
  }

  // repeated string names = 5;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->names(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SR2B_RegisterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }

    // required int32 region_id = 2;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region_id());
    }

    // required string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required string port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port());
    }

  }
  // repeated string names = 5;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SR2B_RegisterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SR2B_RegisterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SR2B_RegisterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SR2B_RegisterInfo::MergeFrom(const SR2B_RegisterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SR2B_RegisterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SR2B_RegisterInfo::CopyFrom(const SR2B_RegisterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SR2B_RegisterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SR2B_RegisterInfo::Swap(SR2B_RegisterInfo* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(region_id_, other->region_id_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    names_.Swap(&other->names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SR2B_RegisterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SR2B_RegisterInfo_descriptor_;
  metadata.reflection = SR2B_RegisterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SR2B_RegisterInfoRet::kResultFieldNumber;
#endif  // !_MSC_VER

SR2B_RegisterInfoRet::SR2B_RegisterInfoRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SR2B_RegisterInfoRet::InitAsDefaultInstance() {
}

SR2B_RegisterInfoRet::SR2B_RegisterInfoRet(const SR2B_RegisterInfoRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SR2B_RegisterInfoRet::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SR2B_RegisterInfoRet::~SR2B_RegisterInfoRet() {
  SharedDtor();
}

void SR2B_RegisterInfoRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SR2B_RegisterInfoRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SR2B_RegisterInfoRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SR2B_RegisterInfoRet_descriptor_;
}

const SR2B_RegisterInfoRet& SR2B_RegisterInfoRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SR2B_RegisterInfoRet* SR2B_RegisterInfoRet::default_instance_ = NULL;

SR2B_RegisterInfoRet* SR2B_RegisterInfoRet::New() const {
  return new SR2B_RegisterInfoRet;
}

void SR2B_RegisterInfoRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SR2B_RegisterInfoRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.RegisterResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::RegisterResult_IsValid(value)) {
            set_result(static_cast< ::pb::RegisterResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SR2B_RegisterInfoRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.RegisterResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SR2B_RegisterInfoRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.RegisterResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SR2B_RegisterInfoRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.RegisterResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SR2B_RegisterInfoRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SR2B_RegisterInfoRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SR2B_RegisterInfoRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SR2B_RegisterInfoRet::MergeFrom(const SR2B_RegisterInfoRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SR2B_RegisterInfoRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SR2B_RegisterInfoRet::CopyFrom(const SR2B_RegisterInfoRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SR2B_RegisterInfoRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SR2B_RegisterInfoRet::Swap(SR2B_RegisterInfoRet* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SR2B_RegisterInfoRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SR2B_RegisterInfoRet_descriptor_;
  metadata.reflection = SR2B_RegisterInfoRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountryWithAddress::kAddressesFieldNumber;
const int CountryWithAddress::kCountryidFieldNumber;
const int CountryWithAddress::kPrepareEndTimeFieldNumber;
const int CountryWithAddress::kUniqueidFieldNumber;
#endif  // !_MSC_VER

CountryWithAddress::CountryWithAddress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CountryWithAddress::InitAsDefaultInstance() {
  addresses_ = const_cast< ::pb::Address*>(&::pb::Address::default_instance());
}

CountryWithAddress::CountryWithAddress(const CountryWithAddress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CountryWithAddress::SharedCtor() {
  _cached_size_ = 0;
  addresses_ = NULL;
  countryid_ = 0u;
  prepareendtime_ = GOOGLE_ULONGLONG(0);
  uniqueid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountryWithAddress::~CountryWithAddress() {
  SharedDtor();
}

void CountryWithAddress::SharedDtor() {
  if (this != default_instance_) {
    delete addresses_;
  }
}

void CountryWithAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountryWithAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryWithAddress_descriptor_;
}

const CountryWithAddress& CountryWithAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

CountryWithAddress* CountryWithAddress::default_instance_ = NULL;

CountryWithAddress* CountryWithAddress::New() const {
  return new CountryWithAddress;
}

void CountryWithAddress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_addresses()) {
      if (addresses_ != NULL) addresses_->::pb::Address::Clear();
    }
    countryid_ = 0u;
    prepareendtime_ = GOOGLE_ULONGLONG(0);
    uniqueid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountryWithAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.Address addresses = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addresses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_countryid;
        break;
      }

      // optional uint32 countryid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_countryid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countryid_)));
          set_has_countryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_PrepareEndTime;
        break;
      }

      // optional uint64 PrepareEndTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PrepareEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prepareendtime_)));
          set_has_prepareendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uniqueid;
        break;
      }

      // optional uint32 uniqueid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uniqueid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uniqueid_)));
          set_has_uniqueid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CountryWithAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.Address addresses = 1;
  if (has_addresses()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->addresses(), output);
  }

  // optional uint32 countryid = 2;
  if (has_countryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->countryid(), output);
  }

  // optional uint64 PrepareEndTime = 3;
  if (has_prepareendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->prepareendtime(), output);
  }

  // optional uint32 uniqueid = 4;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uniqueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CountryWithAddress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.Address addresses = 1;
  if (has_addresses()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->addresses(), target);
  }

  // optional uint32 countryid = 2;
  if (has_countryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->countryid(), target);
  }

  // optional uint64 PrepareEndTime = 3;
  if (has_prepareendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->prepareendtime(), target);
  }

  // optional uint32 uniqueid = 4;
  if (has_uniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uniqueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CountryWithAddress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.Address addresses = 1;
    if (has_addresses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->addresses());
    }

    // optional uint32 countryid = 2;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countryid());
    }

    // optional uint64 PrepareEndTime = 3;
    if (has_prepareendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->prepareendtime());
    }

    // optional uint32 uniqueid = 4;
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uniqueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountryWithAddress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountryWithAddress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountryWithAddress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountryWithAddress::MergeFrom(const CountryWithAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addresses()) {
      mutable_addresses()->::pb::Address::MergeFrom(from.addresses());
    }
    if (from.has_countryid()) {
      set_countryid(from.countryid());
    }
    if (from.has_prepareendtime()) {
      set_prepareendtime(from.prepareendtime());
    }
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountryWithAddress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryWithAddress::CopyFrom(const CountryWithAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryWithAddress::IsInitialized() const {

  if (has_addresses()) {
    if (!this->addresses().IsInitialized()) return false;
  }
  return true;
}

void CountryWithAddress::Swap(CountryWithAddress* other) {
  if (other != this) {
    std::swap(addresses_, other->addresses_);
    std::swap(countryid_, other->countryid_);
    std::swap(prepareendtime_, other->prepareendtime_);
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountryWithAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountryWithAddress_descriptor_;
  metadata.reflection = CountryWithAddress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SL2G_DevideCrossServers::kCountryAddressesFieldNumber;
const int SL2G_DevideCrossServers::kCurStateFieldNumber;
#endif  // !_MSC_VER

SL2G_DevideCrossServers::SL2G_DevideCrossServers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SL2G_DevideCrossServers::InitAsDefaultInstance() {
}

SL2G_DevideCrossServers::SL2G_DevideCrossServers(const SL2G_DevideCrossServers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SL2G_DevideCrossServers::SharedCtor() {
  _cached_size_ = 0;
  curstate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SL2G_DevideCrossServers::~SL2G_DevideCrossServers() {
  SharedDtor();
}

void SL2G_DevideCrossServers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SL2G_DevideCrossServers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SL2G_DevideCrossServers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SL2G_DevideCrossServers_descriptor_;
}

const SL2G_DevideCrossServers& SL2G_DevideCrossServers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SL2G_DevideCrossServers* SL2G_DevideCrossServers::default_instance_ = NULL;

SL2G_DevideCrossServers* SL2G_DevideCrossServers::New() const {
  return new SL2G_DevideCrossServers;
}

void SL2G_DevideCrossServers::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    curstate_ = 0;
  }
  country_addresses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SL2G_DevideCrossServers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.CountryWithAddress Country_Addresses = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Country_Addresses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_country_addresses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Country_Addresses;
        if (input->ExpectTag(16)) goto parse_CurState;
        break;
      }

      // required .pb.CROSS_STATE CurState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::CROSS_STATE_IsValid(value)) {
            set_curstate(static_cast< ::pb::CROSS_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SL2G_DevideCrossServers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.CountryWithAddress Country_Addresses = 1;
  for (int i = 0; i < this->country_addresses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->country_addresses(i), output);
  }

  // required .pb.CROSS_STATE CurState = 2;
  if (has_curstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->curstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SL2G_DevideCrossServers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.CountryWithAddress Country_Addresses = 1;
  for (int i = 0; i < this->country_addresses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->country_addresses(i), target);
  }

  // required .pb.CROSS_STATE CurState = 2;
  if (has_curstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->curstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SL2G_DevideCrossServers::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .pb.CROSS_STATE CurState = 2;
    if (has_curstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->curstate());
    }

  }
  // repeated .pb.CountryWithAddress Country_Addresses = 1;
  total_size += 1 * this->country_addresses_size();
  for (int i = 0; i < this->country_addresses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->country_addresses(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SL2G_DevideCrossServers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SL2G_DevideCrossServers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SL2G_DevideCrossServers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SL2G_DevideCrossServers::MergeFrom(const SL2G_DevideCrossServers& from) {
  GOOGLE_CHECK_NE(&from, this);
  country_addresses_.MergeFrom(from.country_addresses_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_curstate()) {
      set_curstate(from.curstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SL2G_DevideCrossServers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SL2G_DevideCrossServers::CopyFrom(const SL2G_DevideCrossServers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SL2G_DevideCrossServers::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < country_addresses_size(); i++) {
    if (!this->country_addresses(i).IsInitialized()) return false;
  }
  return true;
}

void SL2G_DevideCrossServers::Swap(SL2G_DevideCrossServers* other) {
  if (other != this) {
    country_addresses_.Swap(&other->country_addresses_);
    std::swap(curstate_, other->curstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SL2G_DevideCrossServers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SL2G_DevideCrossServers_descriptor_;
  metadata.reflection = SL2G_DevideCrossServers_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SR2E_RegisterInfo::kRegionIdFieldNumber;
const int SR2E_RegisterInfo::kServerIdFieldNumber;
const int SR2E_RegisterInfo::kIpFieldNumber;
const int SR2E_RegisterInfo::kPortFieldNumber;
#endif  // !_MSC_VER

SR2E_RegisterInfo::SR2E_RegisterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SR2E_RegisterInfo::InitAsDefaultInstance() {
}

SR2E_RegisterInfo::SR2E_RegisterInfo(const SR2E_RegisterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SR2E_RegisterInfo::SharedCtor() {
  _cached_size_ = 0;
  region_id_ = 0;
  server_id_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SR2E_RegisterInfo::~SR2E_RegisterInfo() {
  SharedDtor();
}

void SR2E_RegisterInfo::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (this != default_instance_) {
  }
}

void SR2E_RegisterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SR2E_RegisterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SR2E_RegisterInfo_descriptor_;
}

const SR2E_RegisterInfo& SR2E_RegisterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SR2E_RegisterInfo* SR2E_RegisterInfo::default_instance_ = NULL;

SR2E_RegisterInfo* SR2E_RegisterInfo::New() const {
  return new SR2E_RegisterInfo;
}

void SR2E_RegisterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    region_id_ = 0;
    server_id_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_port()) {
      if (port_ != &::google::protobuf::internal::kEmptyString) {
        port_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SR2E_RegisterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 region_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }

      // required int32 server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // required string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_port;
        break;
      }

      // required string port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SR2E_RegisterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 region_id = 1;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->region_id(), output);
  }

  // required int32 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->server_id(), output);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // required string port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SR2E_RegisterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 region_id = 1;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->region_id(), target);
  }

  // required int32 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->server_id(), target);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // required string port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SR2E_RegisterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 region_id = 1;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region_id());
    }

    // required int32 server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }

    // required string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required string port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SR2E_RegisterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SR2E_RegisterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SR2E_RegisterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SR2E_RegisterInfo::MergeFrom(const SR2E_RegisterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SR2E_RegisterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SR2E_RegisterInfo::CopyFrom(const SR2E_RegisterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SR2E_RegisterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SR2E_RegisterInfo::Swap(SR2E_RegisterInfo* other) {
  if (other != this) {
    std::swap(region_id_, other->region_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SR2E_RegisterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SR2E_RegisterInfo_descriptor_;
  metadata.reflection = SR2E_RegisterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SR2E_RegisterInfoRet::kResultFieldNumber;
#endif  // !_MSC_VER

SR2E_RegisterInfoRet::SR2E_RegisterInfoRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SR2E_RegisterInfoRet::InitAsDefaultInstance() {
}

SR2E_RegisterInfoRet::SR2E_RegisterInfoRet(const SR2E_RegisterInfoRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SR2E_RegisterInfoRet::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SR2E_RegisterInfoRet::~SR2E_RegisterInfoRet() {
  SharedDtor();
}

void SR2E_RegisterInfoRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SR2E_RegisterInfoRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SR2E_RegisterInfoRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SR2E_RegisterInfoRet_descriptor_;
}

const SR2E_RegisterInfoRet& SR2E_RegisterInfoRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SR2E_RegisterInfoRet* SR2E_RegisterInfoRet::default_instance_ = NULL;

SR2E_RegisterInfoRet* SR2E_RegisterInfoRet::New() const {
  return new SR2E_RegisterInfoRet;
}

void SR2E_RegisterInfoRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SR2E_RegisterInfoRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.RegisterResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::RegisterResult_IsValid(value)) {
            set_result(static_cast< ::pb::RegisterResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SR2E_RegisterInfoRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.RegisterResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SR2E_RegisterInfoRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.RegisterResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SR2E_RegisterInfoRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.RegisterResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SR2E_RegisterInfoRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SR2E_RegisterInfoRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SR2E_RegisterInfoRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SR2E_RegisterInfoRet::MergeFrom(const SR2E_RegisterInfoRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SR2E_RegisterInfoRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SR2E_RegisterInfoRet::CopyFrom(const SR2E_RegisterInfoRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SR2E_RegisterInfoRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SR2E_RegisterInfoRet::Swap(SR2E_RegisterInfoRet* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SR2E_RegisterInfoRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SR2E_RegisterInfoRet_descriptor_;
  metadata.reflection = SR2E_RegisterInfoRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SB2C_RegisterInfo::kIpFieldNumber;
const int SB2C_RegisterInfo::kPortFieldNumber;
#endif  // !_MSC_VER

SB2C_RegisterInfo::SB2C_RegisterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SB2C_RegisterInfo::InitAsDefaultInstance() {
}

SB2C_RegisterInfo::SB2C_RegisterInfo(const SB2C_RegisterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SB2C_RegisterInfo::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SB2C_RegisterInfo::~SB2C_RegisterInfo() {
  SharedDtor();
}

void SB2C_RegisterInfo::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (this != default_instance_) {
  }
}

void SB2C_RegisterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SB2C_RegisterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SB2C_RegisterInfo_descriptor_;
}

const SB2C_RegisterInfo& SB2C_RegisterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SB2C_RegisterInfo* SB2C_RegisterInfo::default_instance_ = NULL;

SB2C_RegisterInfo* SB2C_RegisterInfo::New() const {
  return new SB2C_RegisterInfo;
}

void SB2C_RegisterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_port()) {
      if (port_ != &::google::protobuf::internal::kEmptyString) {
        port_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SB2C_RegisterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_port;
        break;
      }

      // required string port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SB2C_RegisterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }

  // required string port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SB2C_RegisterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required string port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SB2C_RegisterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required string port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SB2C_RegisterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SB2C_RegisterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SB2C_RegisterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SB2C_RegisterInfo::MergeFrom(const SB2C_RegisterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SB2C_RegisterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SB2C_RegisterInfo::CopyFrom(const SB2C_RegisterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SB2C_RegisterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SB2C_RegisterInfo::Swap(SB2C_RegisterInfo* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SB2C_RegisterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SB2C_RegisterInfo_descriptor_;
  metadata.reflection = SB2C_RegisterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SB2C_RegisterInfoRet::kResultFieldNumber;
const int SB2C_RegisterInfoRet::kRegionIdFieldNumber;
#endif  // !_MSC_VER

SB2C_RegisterInfoRet::SB2C_RegisterInfoRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SB2C_RegisterInfoRet::InitAsDefaultInstance() {
}

SB2C_RegisterInfoRet::SB2C_RegisterInfoRet(const SB2C_RegisterInfoRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SB2C_RegisterInfoRet::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  region_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SB2C_RegisterInfoRet::~SB2C_RegisterInfoRet() {
  SharedDtor();
}

void SB2C_RegisterInfoRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SB2C_RegisterInfoRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SB2C_RegisterInfoRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SB2C_RegisterInfoRet_descriptor_;
}

const SB2C_RegisterInfoRet& SB2C_RegisterInfoRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SB2C_RegisterInfoRet* SB2C_RegisterInfoRet::default_instance_ = NULL;

SB2C_RegisterInfoRet* SB2C_RegisterInfoRet::New() const {
  return new SB2C_RegisterInfoRet;
}

void SB2C_RegisterInfoRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    region_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SB2C_RegisterInfoRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.RegisterResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::RegisterResult_IsValid(value)) {
            set_result(static_cast< ::pb::RegisterResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_region_id;
        break;
      }

      // optional int32 region_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_region_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SB2C_RegisterInfoRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.RegisterResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional int32 region_id = 2;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SB2C_RegisterInfoRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.RegisterResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional int32 region_id = 2;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SB2C_RegisterInfoRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.RegisterResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 region_id = 2;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SB2C_RegisterInfoRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SB2C_RegisterInfoRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SB2C_RegisterInfoRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SB2C_RegisterInfoRet::MergeFrom(const SB2C_RegisterInfoRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SB2C_RegisterInfoRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SB2C_RegisterInfoRet::CopyFrom(const SB2C_RegisterInfoRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SB2C_RegisterInfoRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SB2C_RegisterInfoRet::Swap(SB2C_RegisterInfoRet* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(region_id_, other->region_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SB2C_RegisterInfoRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SB2C_RegisterInfoRet_descriptor_;
  metadata.reflection = SB2C_RegisterInfoRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SB2E_RegisterInfo::kIpFieldNumber;
const int SB2E_RegisterInfo::kPortFieldNumber;
#endif  // !_MSC_VER

SB2E_RegisterInfo::SB2E_RegisterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SB2E_RegisterInfo::InitAsDefaultInstance() {
}

SB2E_RegisterInfo::SB2E_RegisterInfo(const SB2E_RegisterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SB2E_RegisterInfo::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SB2E_RegisterInfo::~SB2E_RegisterInfo() {
  SharedDtor();
}

void SB2E_RegisterInfo::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (this != default_instance_) {
  }
}

void SB2E_RegisterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SB2E_RegisterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SB2E_RegisterInfo_descriptor_;
}

const SB2E_RegisterInfo& SB2E_RegisterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SB2E_RegisterInfo* SB2E_RegisterInfo::default_instance_ = NULL;

SB2E_RegisterInfo* SB2E_RegisterInfo::New() const {
  return new SB2E_RegisterInfo;
}

void SB2E_RegisterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_port()) {
      if (port_ != &::google::protobuf::internal::kEmptyString) {
        port_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SB2E_RegisterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_port;
        break;
      }

      // required string port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SB2E_RegisterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }

  // required string port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SB2E_RegisterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required string port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SB2E_RegisterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required string port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SB2E_RegisterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SB2E_RegisterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SB2E_RegisterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SB2E_RegisterInfo::MergeFrom(const SB2E_RegisterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SB2E_RegisterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SB2E_RegisterInfo::CopyFrom(const SB2E_RegisterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SB2E_RegisterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SB2E_RegisterInfo::Swap(SB2E_RegisterInfo* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SB2E_RegisterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SB2E_RegisterInfo_descriptor_;
  metadata.reflection = SB2E_RegisterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SB2E_RegisterInfoRet::kResultFieldNumber;
#endif  // !_MSC_VER

SB2E_RegisterInfoRet::SB2E_RegisterInfoRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SB2E_RegisterInfoRet::InitAsDefaultInstance() {
}

SB2E_RegisterInfoRet::SB2E_RegisterInfoRet(const SB2E_RegisterInfoRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SB2E_RegisterInfoRet::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SB2E_RegisterInfoRet::~SB2E_RegisterInfoRet() {
  SharedDtor();
}

void SB2E_RegisterInfoRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SB2E_RegisterInfoRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SB2E_RegisterInfoRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SB2E_RegisterInfoRet_descriptor_;
}

const SB2E_RegisterInfoRet& SB2E_RegisterInfoRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SB2E_RegisterInfoRet* SB2E_RegisterInfoRet::default_instance_ = NULL;

SB2E_RegisterInfoRet* SB2E_RegisterInfoRet::New() const {
  return new SB2E_RegisterInfoRet;
}

void SB2E_RegisterInfoRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SB2E_RegisterInfoRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.RegisterResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::RegisterResult_IsValid(value)) {
            set_result(static_cast< ::pb::RegisterResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SB2E_RegisterInfoRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.RegisterResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SB2E_RegisterInfoRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.RegisterResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SB2E_RegisterInfoRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.RegisterResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SB2E_RegisterInfoRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SB2E_RegisterInfoRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SB2E_RegisterInfoRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SB2E_RegisterInfoRet::MergeFrom(const SB2E_RegisterInfoRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SB2E_RegisterInfoRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SB2E_RegisterInfoRet::CopyFrom(const SB2E_RegisterInfoRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SB2E_RegisterInfoRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SB2E_RegisterInfoRet::Swap(SB2E_RegisterInfoRet* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SB2E_RegisterInfoRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SB2E_RegisterInfoRet_descriptor_;
  metadata.reflection = SB2E_RegisterInfoRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SL2C_RegisterInfo::kIpFieldNumber;
const int SL2C_RegisterInfo::kPortFieldNumber;
#endif  // !_MSC_VER

SL2C_RegisterInfo::SL2C_RegisterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SL2C_RegisterInfo::InitAsDefaultInstance() {
}

SL2C_RegisterInfo::SL2C_RegisterInfo(const SL2C_RegisterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SL2C_RegisterInfo::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SL2C_RegisterInfo::~SL2C_RegisterInfo() {
  SharedDtor();
}

void SL2C_RegisterInfo::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (this != default_instance_) {
  }
}

void SL2C_RegisterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SL2C_RegisterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SL2C_RegisterInfo_descriptor_;
}

const SL2C_RegisterInfo& SL2C_RegisterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SL2C_RegisterInfo* SL2C_RegisterInfo::default_instance_ = NULL;

SL2C_RegisterInfo* SL2C_RegisterInfo::New() const {
  return new SL2C_RegisterInfo;
}

void SL2C_RegisterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_port()) {
      if (port_ != &::google::protobuf::internal::kEmptyString) {
        port_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SL2C_RegisterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_port;
        break;
      }

      // required string port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SL2C_RegisterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }

  // required string port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SL2C_RegisterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required string port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SL2C_RegisterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required string port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SL2C_RegisterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SL2C_RegisterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SL2C_RegisterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SL2C_RegisterInfo::MergeFrom(const SL2C_RegisterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SL2C_RegisterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SL2C_RegisterInfo::CopyFrom(const SL2C_RegisterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SL2C_RegisterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SL2C_RegisterInfo::Swap(SL2C_RegisterInfo* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SL2C_RegisterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SL2C_RegisterInfo_descriptor_;
  metadata.reflection = SL2C_RegisterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SL2C_RegisterInfoRet::kResultFieldNumber;
const int SL2C_RegisterInfoRet::kRegionIdFieldNumber;
const int SL2C_RegisterInfoRet::kWebUrlFieldNumber;
#endif  // !_MSC_VER

SL2C_RegisterInfoRet::SL2C_RegisterInfoRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SL2C_RegisterInfoRet::InitAsDefaultInstance() {
}

SL2C_RegisterInfoRet::SL2C_RegisterInfoRet(const SL2C_RegisterInfoRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SL2C_RegisterInfoRet::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  region_id_ = 0;
  web_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SL2C_RegisterInfoRet::~SL2C_RegisterInfoRet() {
  SharedDtor();
}

void SL2C_RegisterInfoRet::SharedDtor() {
  if (web_url_ != &::google::protobuf::internal::kEmptyString) {
    delete web_url_;
  }
  if (this != default_instance_) {
  }
}

void SL2C_RegisterInfoRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SL2C_RegisterInfoRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SL2C_RegisterInfoRet_descriptor_;
}

const SL2C_RegisterInfoRet& SL2C_RegisterInfoRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SL2C_RegisterInfoRet* SL2C_RegisterInfoRet::default_instance_ = NULL;

SL2C_RegisterInfoRet* SL2C_RegisterInfoRet::New() const {
  return new SL2C_RegisterInfoRet;
}

void SL2C_RegisterInfoRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    region_id_ = 0;
    if (has_web_url()) {
      if (web_url_ != &::google::protobuf::internal::kEmptyString) {
        web_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SL2C_RegisterInfoRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.RegisterResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::RegisterResult_IsValid(value)) {
            set_result(static_cast< ::pb::RegisterResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_region_id;
        break;
      }

      // optional int32 region_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_region_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_web_url;
        break;
      }

      // optional string web_url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_web_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_web_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->web_url().data(), this->web_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SL2C_RegisterInfoRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.RegisterResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional int32 region_id = 2;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region_id(), output);
  }

  // optional string web_url = 3;
  if (has_web_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->web_url().data(), this->web_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->web_url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SL2C_RegisterInfoRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.RegisterResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional int32 region_id = 2;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region_id(), target);
  }

  // optional string web_url = 3;
  if (has_web_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->web_url().data(), this->web_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->web_url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SL2C_RegisterInfoRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.RegisterResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 region_id = 2;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region_id());
    }

    // optional string web_url = 3;
    if (has_web_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->web_url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SL2C_RegisterInfoRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SL2C_RegisterInfoRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SL2C_RegisterInfoRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SL2C_RegisterInfoRet::MergeFrom(const SL2C_RegisterInfoRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_web_url()) {
      set_web_url(from.web_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SL2C_RegisterInfoRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SL2C_RegisterInfoRet::CopyFrom(const SL2C_RegisterInfoRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SL2C_RegisterInfoRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SL2C_RegisterInfoRet::Swap(SL2C_RegisterInfoRet* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(region_id_, other->region_id_);
    std::swap(web_url_, other->web_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SL2C_RegisterInfoRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SL2C_RegisterInfoRet_descriptor_;
  metadata.reflection = SL2C_RegisterInfoRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SL2E_RegisterInfo::kIpFieldNumber;
const int SL2E_RegisterInfo::kPortFieldNumber;
const int SL2E_RegisterInfo::kRegionIdFieldNumber;
const int SL2E_RegisterInfo::kServerIdFieldNumber;
#endif  // !_MSC_VER

SL2E_RegisterInfo::SL2E_RegisterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SL2E_RegisterInfo::InitAsDefaultInstance() {
}

SL2E_RegisterInfo::SL2E_RegisterInfo(const SL2E_RegisterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SL2E_RegisterInfo::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  region_id_ = 0;
  server_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SL2E_RegisterInfo::~SL2E_RegisterInfo() {
  SharedDtor();
}

void SL2E_RegisterInfo::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (this != default_instance_) {
  }
}

void SL2E_RegisterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SL2E_RegisterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SL2E_RegisterInfo_descriptor_;
}

const SL2E_RegisterInfo& SL2E_RegisterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SL2E_RegisterInfo* SL2E_RegisterInfo::default_instance_ = NULL;

SL2E_RegisterInfo* SL2E_RegisterInfo::New() const {
  return new SL2E_RegisterInfo;
}

void SL2E_RegisterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_port()) {
      if (port_ != &::google::protobuf::internal::kEmptyString) {
        port_->clear();
      }
    }
    region_id_ = 0;
    server_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SL2E_RegisterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_port;
        break;
      }

      // required string port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_region_id;
        break;
      }

      // optional int32 region_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_region_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_server_id;
        break;
      }

      // optional int32 server_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SL2E_RegisterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }

  // required string port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->port(), output);
  }

  // optional int32 region_id = 3;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->region_id(), output);
  }

  // optional int32 server_id = 4;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SL2E_RegisterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required string port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->port(), target);
  }

  // optional int32 region_id = 3;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->region_id(), target);
  }

  // optional int32 server_id = 4;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SL2E_RegisterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required string port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port());
    }

    // optional int32 region_id = 3;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region_id());
    }

    // optional int32 server_id = 4;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SL2E_RegisterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SL2E_RegisterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SL2E_RegisterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SL2E_RegisterInfo::MergeFrom(const SL2E_RegisterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SL2E_RegisterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SL2E_RegisterInfo::CopyFrom(const SL2E_RegisterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SL2E_RegisterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SL2E_RegisterInfo::Swap(SL2E_RegisterInfo* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(region_id_, other->region_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SL2E_RegisterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SL2E_RegisterInfo_descriptor_;
  metadata.reflection = SL2E_RegisterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SL2E_RegisterInfoRet::kResultFieldNumber;
#endif  // !_MSC_VER

SL2E_RegisterInfoRet::SL2E_RegisterInfoRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SL2E_RegisterInfoRet::InitAsDefaultInstance() {
}

SL2E_RegisterInfoRet::SL2E_RegisterInfoRet(const SL2E_RegisterInfoRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SL2E_RegisterInfoRet::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SL2E_RegisterInfoRet::~SL2E_RegisterInfoRet() {
  SharedDtor();
}

void SL2E_RegisterInfoRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SL2E_RegisterInfoRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SL2E_RegisterInfoRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SL2E_RegisterInfoRet_descriptor_;
}

const SL2E_RegisterInfoRet& SL2E_RegisterInfoRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SL2E_RegisterInfoRet* SL2E_RegisterInfoRet::default_instance_ = NULL;

SL2E_RegisterInfoRet* SL2E_RegisterInfoRet::New() const {
  return new SL2E_RegisterInfoRet;
}

void SL2E_RegisterInfoRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SL2E_RegisterInfoRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.RegisterResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::RegisterResult_IsValid(value)) {
            set_result(static_cast< ::pb::RegisterResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SL2E_RegisterInfoRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.RegisterResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SL2E_RegisterInfoRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.RegisterResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SL2E_RegisterInfoRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.RegisterResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SL2E_RegisterInfoRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SL2E_RegisterInfoRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SL2E_RegisterInfoRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SL2E_RegisterInfoRet::MergeFrom(const SL2E_RegisterInfoRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SL2E_RegisterInfoRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SL2E_RegisterInfoRet::CopyFrom(const SL2E_RegisterInfoRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SL2E_RegisterInfoRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SL2E_RegisterInfoRet::Swap(SL2E_RegisterInfoRet* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SL2E_RegisterInfoRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SL2E_RegisterInfoRet_descriptor_;
  metadata.reflection = SL2E_RegisterInfoRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SE2C_RegisterInfo::kIpFieldNumber;
const int SE2C_RegisterInfo::kPortFieldNumber;
#endif  // !_MSC_VER

SE2C_RegisterInfo::SE2C_RegisterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SE2C_RegisterInfo::InitAsDefaultInstance() {
}

SE2C_RegisterInfo::SE2C_RegisterInfo(const SE2C_RegisterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SE2C_RegisterInfo::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SE2C_RegisterInfo::~SE2C_RegisterInfo() {
  SharedDtor();
}

void SE2C_RegisterInfo::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (this != default_instance_) {
  }
}

void SE2C_RegisterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SE2C_RegisterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SE2C_RegisterInfo_descriptor_;
}

const SE2C_RegisterInfo& SE2C_RegisterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SE2C_RegisterInfo* SE2C_RegisterInfo::default_instance_ = NULL;

SE2C_RegisterInfo* SE2C_RegisterInfo::New() const {
  return new SE2C_RegisterInfo;
}

void SE2C_RegisterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_port()) {
      if (port_ != &::google::protobuf::internal::kEmptyString) {
        port_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SE2C_RegisterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_port;
        break;
      }

      // required string port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SE2C_RegisterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }

  // required string port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SE2C_RegisterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required string port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SE2C_RegisterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required string port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SE2C_RegisterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SE2C_RegisterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SE2C_RegisterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SE2C_RegisterInfo::MergeFrom(const SE2C_RegisterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SE2C_RegisterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SE2C_RegisterInfo::CopyFrom(const SE2C_RegisterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SE2C_RegisterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SE2C_RegisterInfo::Swap(SE2C_RegisterInfo* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SE2C_RegisterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SE2C_RegisterInfo_descriptor_;
  metadata.reflection = SE2C_RegisterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SE2C_RegisterInfoRet::kResultFieldNumber;
const int SE2C_RegisterInfoRet::kRegionIdFieldNumber;
#endif  // !_MSC_VER

SE2C_RegisterInfoRet::SE2C_RegisterInfoRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SE2C_RegisterInfoRet::InitAsDefaultInstance() {
}

SE2C_RegisterInfoRet::SE2C_RegisterInfoRet(const SE2C_RegisterInfoRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SE2C_RegisterInfoRet::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  region_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SE2C_RegisterInfoRet::~SE2C_RegisterInfoRet() {
  SharedDtor();
}

void SE2C_RegisterInfoRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SE2C_RegisterInfoRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SE2C_RegisterInfoRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SE2C_RegisterInfoRet_descriptor_;
}

const SE2C_RegisterInfoRet& SE2C_RegisterInfoRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SE2C_RegisterInfoRet* SE2C_RegisterInfoRet::default_instance_ = NULL;

SE2C_RegisterInfoRet* SE2C_RegisterInfoRet::New() const {
  return new SE2C_RegisterInfoRet;
}

void SE2C_RegisterInfoRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    region_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SE2C_RegisterInfoRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.RegisterResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::RegisterResult_IsValid(value)) {
            set_result(static_cast< ::pb::RegisterResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_region_id;
        break;
      }

      // optional int32 region_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_region_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SE2C_RegisterInfoRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.RegisterResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional int32 region_id = 2;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SE2C_RegisterInfoRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.RegisterResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional int32 region_id = 2;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SE2C_RegisterInfoRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.RegisterResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 region_id = 2;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SE2C_RegisterInfoRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SE2C_RegisterInfoRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SE2C_RegisterInfoRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SE2C_RegisterInfoRet::MergeFrom(const SE2C_RegisterInfoRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SE2C_RegisterInfoRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SE2C_RegisterInfoRet::CopyFrom(const SE2C_RegisterInfoRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SE2C_RegisterInfoRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SE2C_RegisterInfoRet::Swap(SE2C_RegisterInfoRet* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(region_id_, other->region_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SE2C_RegisterInfoRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SE2C_RegisterInfoRet_descriptor_;
  metadata.reflection = SE2C_RegisterInfoRet_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* EventParm_ParmType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventParm_ParmType_descriptor_;
}
bool EventParm_ParmType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const EventParm_ParmType EventParm::INT32;
const EventParm_ParmType EventParm::UINT32;
const EventParm_ParmType EventParm::INT64;
const EventParm_ParmType EventParm::UINT64;
const EventParm_ParmType EventParm::STRING;
const EventParm_ParmType EventParm::FLOAT;
const EventParm_ParmType EventParm::ParmType_MIN;
const EventParm_ParmType EventParm::ParmType_MAX;
const int EventParm::ParmType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int EventParm::kParmTypeFieldNumber;
const int EventParm::kValueInt32FieldNumber;
const int EventParm::kValueUint32FieldNumber;
const int EventParm::kValueInt64FieldNumber;
const int EventParm::kValueUint64FieldNumber;
const int EventParm::kValueStrFieldNumber;
const int EventParm::kValueFloatFieldNumber;
#endif  // !_MSC_VER

EventParm::EventParm()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventParm::InitAsDefaultInstance() {
}

EventParm::EventParm(const EventParm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventParm::SharedCtor() {
  _cached_size_ = 0;
  parm_type_ = 0;
  value_int32_ = 0;
  value_uint32_ = 0u;
  value_int64_ = GOOGLE_LONGLONG(0);
  value_uint64_ = GOOGLE_ULONGLONG(0);
  value_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_float_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventParm::~EventParm() {
  SharedDtor();
}

void EventParm::SharedDtor() {
  if (value_str_ != &::google::protobuf::internal::kEmptyString) {
    delete value_str_;
  }
  if (this != default_instance_) {
  }
}

void EventParm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventParm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventParm_descriptor_;
}

const EventParm& EventParm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

EventParm* EventParm::default_instance_ = NULL;

EventParm* EventParm::New() const {
  return new EventParm;
}

void EventParm::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    parm_type_ = 0;
    value_int32_ = 0;
    value_uint32_ = 0u;
    value_int64_ = GOOGLE_LONGLONG(0);
    value_uint64_ = GOOGLE_ULONGLONG(0);
    if (has_value_str()) {
      if (value_str_ != &::google::protobuf::internal::kEmptyString) {
        value_str_->clear();
      }
    }
    value_float_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventParm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.EventParm.ParmType parm_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EventParm_ParmType_IsValid(value)) {
            set_parm_type(static_cast< ::pb::EventParm_ParmType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value_int32;
        break;
      }

      // optional int32 value_int32 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value_int32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_int32_)));
          set_has_value_int32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value_uint32;
        break;
      }

      // optional uint32 value_uint32 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value_uint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_uint32_)));
          set_has_value_uint32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_value_int64;
        break;
      }

      // optional int64 value_int64 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value_int64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_int64_)));
          set_has_value_int64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_value_uint64;
        break;
      }

      // optional uint64 value_uint64 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value_uint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_uint64_)));
          set_has_value_uint64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_value_str;
        break;
      }

      // optional string value_str = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value_str().data(), this->value_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_value_float;
        break;
      }

      // optional float value_float = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_float_)));
          set_has_value_float();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventParm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.EventParm.ParmType parm_type = 1;
  if (has_parm_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->parm_type(), output);
  }

  // optional int32 value_int32 = 2;
  if (has_value_int32()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value_int32(), output);
  }

  // optional uint32 value_uint32 = 3;
  if (has_value_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value_uint32(), output);
  }

  // optional int64 value_int64 = 4;
  if (has_value_int64()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->value_int64(), output);
  }

  // optional uint64 value_uint64 = 5;
  if (has_value_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->value_uint64(), output);
  }

  // optional string value_str = 6;
  if (has_value_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value_str().data(), this->value_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->value_str(), output);
  }

  // optional float value_float = 7;
  if (has_value_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->value_float(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventParm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.EventParm.ParmType parm_type = 1;
  if (has_parm_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->parm_type(), target);
  }

  // optional int32 value_int32 = 2;
  if (has_value_int32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value_int32(), target);
  }

  // optional uint32 value_uint32 = 3;
  if (has_value_uint32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value_uint32(), target);
  }

  // optional int64 value_int64 = 4;
  if (has_value_int64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->value_int64(), target);
  }

  // optional uint64 value_uint64 = 5;
  if (has_value_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->value_uint64(), target);
  }

  // optional string value_str = 6;
  if (has_value_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value_str().data(), this->value_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->value_str(), target);
  }

  // optional float value_float = 7;
  if (has_value_float()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->value_float(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventParm::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.EventParm.ParmType parm_type = 1;
    if (has_parm_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->parm_type());
    }

    // optional int32 value_int32 = 2;
    if (has_value_int32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value_int32());
    }

    // optional uint32 value_uint32 = 3;
    if (has_value_uint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value_uint32());
    }

    // optional int64 value_int64 = 4;
    if (has_value_int64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value_int64());
    }

    // optional uint64 value_uint64 = 5;
    if (has_value_uint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value_uint64());
    }

    // optional string value_str = 6;
    if (has_value_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value_str());
    }

    // optional float value_float = 7;
    if (has_value_float()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventParm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventParm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventParm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventParm::MergeFrom(const EventParm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parm_type()) {
      set_parm_type(from.parm_type());
    }
    if (from.has_value_int32()) {
      set_value_int32(from.value_int32());
    }
    if (from.has_value_uint32()) {
      set_value_uint32(from.value_uint32());
    }
    if (from.has_value_int64()) {
      set_value_int64(from.value_int64());
    }
    if (from.has_value_uint64()) {
      set_value_uint64(from.value_uint64());
    }
    if (from.has_value_str()) {
      set_value_str(from.value_str());
    }
    if (from.has_value_float()) {
      set_value_float(from.value_float());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventParm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventParm::CopyFrom(const EventParm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventParm::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EventParm::Swap(EventParm* other) {
  if (other != this) {
    std::swap(parm_type_, other->parm_type_);
    std::swap(value_int32_, other->value_int32_);
    std::swap(value_uint32_, other->value_uint32_);
    std::swap(value_int64_, other->value_int64_);
    std::swap(value_uint64_, other->value_uint64_);
    std::swap(value_str_, other->value_str_);
    std::swap(value_float_, other->value_float_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventParm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventParm_descriptor_;
  metadata.reflection = EventParm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Server_Event::kEventIdFieldNumber;
const int Server_Event::kAccountIdFieldNumber;
const int Server_Event::kPlayerIdFieldNumber;
const int Server_Event::kTimeFieldNumber;
const int Server_Event::kParamsFieldNumber;
#endif  // !_MSC_VER

Server_Event::Server_Event()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Server_Event::InitAsDefaultInstance() {
}

Server_Event::Server_Event(const Server_Event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Server_Event::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  account_id_ = GOOGLE_ULONGLONG(0);
  player_id_ = GOOGLE_ULONGLONG(0);
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Server_Event::~Server_Event() {
  SharedDtor();
}

void Server_Event::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Server_Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Server_Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Server_Event_descriptor_;
}

const Server_Event& Server_Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

Server_Event* Server_Event::default_instance_ = NULL;

Server_Event* Server_Event::New() const {
  return new Server_Event;
}

void Server_Event::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = 0;
    account_id_ = GOOGLE_ULONGLONG(0);
    player_id_ = GOOGLE_ULONGLONG(0);
    time_ = GOOGLE_LONGLONG(0);
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Server_Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 event_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }

      // optional uint64 account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_id;
        break;
      }

      // optional uint64 player_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int64 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_params;
        break;
      }

      // repeated .pb.EventParm params = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_params;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Server_Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // optional uint64 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->account_id(), output);
  }

  // optional uint64 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->player_id(), output);
  }

  // optional int64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time(), output);
  }

  // repeated .pb.EventParm params = 5;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Server_Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // optional uint64 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->account_id(), target);
  }

  // optional uint64 player_id = 3;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->player_id(), target);
  }

  // optional int64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time(), target);
  }

  // repeated .pb.EventParm params = 5;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Server_Event::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // optional uint64 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->account_id());
    }

    // optional uint64 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional int64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  // repeated .pb.EventParm params = 5;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Server_Event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Server_Event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Server_Event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Server_Event::MergeFrom(const Server_Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Server_Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Server_Event::CopyFrom(const Server_Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Server_Event::IsInitialized() const {

  for (int i = 0; i < params_size(); i++) {
    if (!this->params(i).IsInitialized()) return false;
  }
  return true;
}

void Server_Event::Swap(Server_Event* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(time_, other->time_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Server_Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Server_Event_descriptor_;
  metadata.reflection = Server_Event_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Server_Events::kLogsFieldNumber;
#endif  // !_MSC_VER

Server_Events::Server_Events()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Server_Events::InitAsDefaultInstance() {
}

Server_Events::Server_Events(const Server_Events& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Server_Events::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Server_Events::~Server_Events() {
  SharedDtor();
}

void Server_Events::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Server_Events::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Server_Events::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Server_Events_descriptor_;
}

const Server_Events& Server_Events::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

Server_Events* Server_Events::default_instance_ = NULL;

Server_Events* Server_Events::New() const {
  return new Server_Events;
}

void Server_Events::Clear() {
  logs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Server_Events::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Server_Event logs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_logs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Server_Events::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.Server_Event logs = 1;
  for (int i = 0; i < this->logs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->logs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Server_Events::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.Server_Event logs = 1;
  for (int i = 0; i < this->logs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->logs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Server_Events::ByteSize() const {
  int total_size = 0;

  // repeated .pb.Server_Event logs = 1;
  total_size += 1 * this->logs_size();
  for (int i = 0; i < this->logs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Server_Events::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Server_Events* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Server_Events*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Server_Events::MergeFrom(const Server_Events& from) {
  GOOGLE_CHECK_NE(&from, this);
  logs_.MergeFrom(from.logs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Server_Events::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Server_Events::CopyFrom(const Server_Events& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Server_Events::IsInitialized() const {

  for (int i = 0; i < logs_size(); i++) {
    if (!this->logs(i).IsInitialized()) return false;
  }
  return true;
}

void Server_Events::Swap(Server_Events* other) {
  if (other != this) {
    logs_.Swap(&other->logs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Server_Events::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Server_Events_descriptor_;
  metadata.reflection = Server_Events_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Version::kIdFieldNumber;
const int Version::kChannelIdFieldNumber;
const int Version::kPlatformIdFieldNumber;
const int Version::kMinVersionIdFieldNumber;
const int Version::kMaxVersionIdFieldNumber;
const int Version::kIsHotUpdateFieldNumber;
const int Version::kMaxVersionAddressFieldNumber;
#endif  // !_MSC_VER

Version::Version()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Version::InitAsDefaultInstance() {
}

Version::Version(const Version& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Version::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  channel_id_ = 0u;
  platform_id_ = 0u;
  min_version_id_ = 0u;
  max_version_id_ = 0u;
  is_hot_update_ = 0u;
  max_version_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Version::~Version() {
  SharedDtor();
}

void Version::SharedDtor() {
  if (max_version_address_ != &::google::protobuf::internal::kEmptyString) {
    delete max_version_address_;
  }
  if (this != default_instance_) {
  }
}

void Version::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Version::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Version_descriptor_;
}

const Version& Version::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

Version* Version::default_instance_ = NULL;

Version* Version::New() const {
  return new Version;
}

void Version::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    channel_id_ = 0u;
    platform_id_ = 0u;
    min_version_id_ = 0u;
    max_version_id_ = 0u;
    is_hot_update_ = 0u;
    if (has_max_version_address()) {
      if (max_version_address_ != &::google::protobuf::internal::kEmptyString) {
        max_version_address_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_platform_id;
        break;
      }

      // optional uint32 platform_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_id_)));
          set_has_platform_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_min_version_id;
        break;
      }

      // optional uint32 min_version_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_version_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_version_id_)));
          set_has_min_version_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_version_id;
        break;
      }

      // optional uint32 max_version_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_version_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_version_id_)));
          set_has_max_version_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_hot_update;
        break;
      }

      // optional uint32 is_hot_update = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_hot_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_hot_update_)));
          set_has_is_hot_update();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_max_version_address;
        break;
      }

      // optional string max_version_address = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_max_version_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_max_version_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->max_version_address().data(), this->max_version_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_id(), output);
  }

  // optional uint32 platform_id = 3;
  if (has_platform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->platform_id(), output);
  }

  // optional uint32 min_version_id = 4;
  if (has_min_version_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->min_version_id(), output);
  }

  // optional uint32 max_version_id = 5;
  if (has_max_version_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_version_id(), output);
  }

  // optional uint32 is_hot_update = 6;
  if (has_is_hot_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->is_hot_update(), output);
  }

  // optional string max_version_address = 7;
  if (has_max_version_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->max_version_address().data(), this->max_version_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->max_version_address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Version::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 channel_id = 2;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel_id(), target);
  }

  // optional uint32 platform_id = 3;
  if (has_platform_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->platform_id(), target);
  }

  // optional uint32 min_version_id = 4;
  if (has_min_version_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->min_version_id(), target);
  }

  // optional uint32 max_version_id = 5;
  if (has_max_version_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_version_id(), target);
  }

  // optional uint32 is_hot_update = 6;
  if (has_is_hot_update()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->is_hot_update(), target);
  }

  // optional string max_version_address = 7;
  if (has_max_version_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->max_version_address().data(), this->max_version_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->max_version_address(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Version::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional uint32 platform_id = 3;
    if (has_platform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platform_id());
    }

    // optional uint32 min_version_id = 4;
    if (has_min_version_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_version_id());
    }

    // optional uint32 max_version_id = 5;
    if (has_max_version_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_version_id());
    }

    // optional uint32 is_hot_update = 6;
    if (has_is_hot_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_hot_update());
    }

    // optional string max_version_address = 7;
    if (has_max_version_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->max_version_address());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Version::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Version* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Version*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Version::MergeFrom(const Version& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_platform_id()) {
      set_platform_id(from.platform_id());
    }
    if (from.has_min_version_id()) {
      set_min_version_id(from.min_version_id());
    }
    if (from.has_max_version_id()) {
      set_max_version_id(from.max_version_id());
    }
    if (from.has_is_hot_update()) {
      set_is_hot_update(from.is_hot_update());
    }
    if (from.has_max_version_address()) {
      set_max_version_address(from.max_version_address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Version::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Version::CopyFrom(const Version& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {

  return true;
}

void Version::Swap(Version* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(platform_id_, other->platform_id_);
    std::swap(min_version_id_, other->min_version_id_);
    std::swap(max_version_id_, other->max_version_id_);
    std::swap(is_hot_update_, other->is_hot_update_);
    std::swap(max_version_address_, other->max_version_address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Version::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Version_descriptor_;
  metadata.reflection = Version_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneVersionInfo::kIdFieldNumber;
const int OneVersionInfo::kChannelIdFieldNumber;
const int OneVersionInfo::kPlatformIdFieldNumber;
const int OneVersionInfo::kVersionIdFieldNumber;
const int OneVersionInfo::kResourceIdFieldNumber;
const int OneVersionInfo::kNoticeAddressFieldNumber;
const int OneVersionInfo::kResourceAddressFieldNumber;
#endif  // !_MSC_VER

OneVersionInfo::OneVersionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OneVersionInfo::InitAsDefaultInstance() {
}

OneVersionInfo::OneVersionInfo(const OneVersionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OneVersionInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  channel_id_ = 0u;
  platform_id_ = 0u;
  version_id_ = 0u;
  resource_id_ = 0u;
  notice_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resource_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneVersionInfo::~OneVersionInfo() {
  SharedDtor();
}

void OneVersionInfo::SharedDtor() {
  if (notice_address_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_address_;
  }
  if (resource_address_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_address_;
  }
  if (this != default_instance_) {
  }
}

void OneVersionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneVersionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneVersionInfo_descriptor_;
}

const OneVersionInfo& OneVersionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

OneVersionInfo* OneVersionInfo::default_instance_ = NULL;

OneVersionInfo* OneVersionInfo::New() const {
  return new OneVersionInfo;
}

void OneVersionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    channel_id_ = 0u;
    platform_id_ = 0u;
    version_id_ = 0u;
    resource_id_ = 0u;
    if (has_notice_address()) {
      if (notice_address_ != &::google::protobuf::internal::kEmptyString) {
        notice_address_->clear();
      }
    }
    if (has_resource_address()) {
      if (resource_address_ != &::google::protobuf::internal::kEmptyString) {
        resource_address_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneVersionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_platform_id;
        break;
      }

      // optional uint32 platform_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_id_)));
          set_has_platform_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_version_id;
        break;
      }

      // optional uint32 version_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_id_)));
          set_has_version_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_resource_id;
        break;
      }

      // optional uint32 resource_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resource_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resource_id_)));
          set_has_resource_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_notice_address;
        break;
      }

      // optional string notice_address = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice_address().data(), this->notice_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_resource_address;
        break;
      }

      // optional string resource_address = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resource_address().data(), this->resource_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OneVersionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_id(), output);
  }

  // optional uint32 platform_id = 3;
  if (has_platform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->platform_id(), output);
  }

  // optional uint32 version_id = 4;
  if (has_version_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->version_id(), output);
  }

  // optional uint32 resource_id = 5;
  if (has_resource_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->resource_id(), output);
  }

  // optional string notice_address = 6;
  if (has_notice_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice_address().data(), this->notice_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->notice_address(), output);
  }

  // optional string resource_address = 7;
  if (has_resource_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource_address().data(), this->resource_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->resource_address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OneVersionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 channel_id = 2;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel_id(), target);
  }

  // optional uint32 platform_id = 3;
  if (has_platform_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->platform_id(), target);
  }

  // optional uint32 version_id = 4;
  if (has_version_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->version_id(), target);
  }

  // optional uint32 resource_id = 5;
  if (has_resource_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->resource_id(), target);
  }

  // optional string notice_address = 6;
  if (has_notice_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice_address().data(), this->notice_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->notice_address(), target);
  }

  // optional string resource_address = 7;
  if (has_resource_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource_address().data(), this->resource_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->resource_address(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OneVersionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional uint32 platform_id = 3;
    if (has_platform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platform_id());
    }

    // optional uint32 version_id = 4;
    if (has_version_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_id());
    }

    // optional uint32 resource_id = 5;
    if (has_resource_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resource_id());
    }

    // optional string notice_address = 6;
    if (has_notice_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice_address());
    }

    // optional string resource_address = 7;
    if (has_resource_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource_address());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneVersionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneVersionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneVersionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneVersionInfo::MergeFrom(const OneVersionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_platform_id()) {
      set_platform_id(from.platform_id());
    }
    if (from.has_version_id()) {
      set_version_id(from.version_id());
    }
    if (from.has_resource_id()) {
      set_resource_id(from.resource_id());
    }
    if (from.has_notice_address()) {
      set_notice_address(from.notice_address());
    }
    if (from.has_resource_address()) {
      set_resource_address(from.resource_address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneVersionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneVersionInfo::CopyFrom(const OneVersionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneVersionInfo::IsInitialized() const {

  return true;
}

void OneVersionInfo::Swap(OneVersionInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(platform_id_, other->platform_id_);
    std::swap(version_id_, other->version_id_);
    std::swap(resource_id_, other->resource_id_);
    std::swap(notice_address_, other->notice_address_);
    std::swap(resource_address_, other->resource_address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneVersionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneVersionInfo_descriptor_;
  metadata.reflection = OneVersionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2L_RegisterInfo::kRegionIdFieldNumber;
const int SG2L_RegisterInfo::kServerIdFieldNumber;
const int SG2L_RegisterInfo::kIpFieldNumber;
const int SG2L_RegisterInfo::kPortFieldNumber;
const int SG2L_RegisterInfo::kPlayerCountFieldNumber;
const int SG2L_RegisterInfo::kLogicalUpdateMsFieldNumber;
#endif  // !_MSC_VER

SG2L_RegisterInfo::SG2L_RegisterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2L_RegisterInfo::InitAsDefaultInstance() {
}

SG2L_RegisterInfo::SG2L_RegisterInfo(const SG2L_RegisterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2L_RegisterInfo::SharedCtor() {
  _cached_size_ = 0;
  region_id_ = 0;
  server_id_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_count_ = 0;
  logical_update_ms_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2L_RegisterInfo::~SG2L_RegisterInfo() {
  SharedDtor();
}

void SG2L_RegisterInfo::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (this != default_instance_) {
  }
}

void SG2L_RegisterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2L_RegisterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2L_RegisterInfo_descriptor_;
}

const SG2L_RegisterInfo& SG2L_RegisterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2L_RegisterInfo* SG2L_RegisterInfo::default_instance_ = NULL;

SG2L_RegisterInfo* SG2L_RegisterInfo::New() const {
  return new SG2L_RegisterInfo;
}

void SG2L_RegisterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    region_id_ = 0;
    server_id_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_port()) {
      if (port_ != &::google::protobuf::internal::kEmptyString) {
        port_->clear();
      }
    }
    player_count_ = 0;
    logical_update_ms_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2L_RegisterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 region_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }

      // required int32 server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // required string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_port;
        break;
      }

      // required string port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_player_count;
        break;
      }

      // required int32 player_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_count_)));
          set_has_player_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_logical_update_ms;
        break;
      }

      // required uint64 logical_update_ms = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logical_update_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logical_update_ms_)));
          set_has_logical_update_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2L_RegisterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 region_id = 1;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->region_id(), output);
  }

  // required int32 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->server_id(), output);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // required string port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->port(), output);
  }

  // required int32 player_count = 5;
  if (has_player_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->player_count(), output);
  }

  // required uint64 logical_update_ms = 6;
  if (has_logical_update_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->logical_update_ms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2L_RegisterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 region_id = 1;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->region_id(), target);
  }

  // required int32 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->server_id(), target);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // required string port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->port(), target);
  }

  // required int32 player_count = 5;
  if (has_player_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->player_count(), target);
  }

  // required uint64 logical_update_ms = 6;
  if (has_logical_update_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->logical_update_ms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2L_RegisterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 region_id = 1;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region_id());
    }

    // required int32 server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }

    // required string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required string port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port());
    }

    // required int32 player_count = 5;
    if (has_player_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_count());
    }

    // required uint64 logical_update_ms = 6;
    if (has_logical_update_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logical_update_ms());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2L_RegisterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2L_RegisterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2L_RegisterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2L_RegisterInfo::MergeFrom(const SG2L_RegisterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_player_count()) {
      set_player_count(from.player_count());
    }
    if (from.has_logical_update_ms()) {
      set_logical_update_ms(from.logical_update_ms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2L_RegisterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2L_RegisterInfo::CopyFrom(const SG2L_RegisterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2L_RegisterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void SG2L_RegisterInfo::Swap(SG2L_RegisterInfo* other) {
  if (other != this) {
    std::swap(region_id_, other->region_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(player_count_, other->player_count_);
    std::swap(logical_update_ms_, other->logical_update_ms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2L_RegisterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2L_RegisterInfo_descriptor_;
  metadata.reflection = SG2L_RegisterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2L_RegisterInfoRet::kResultFieldNumber;
#endif  // !_MSC_VER

SG2L_RegisterInfoRet::SG2L_RegisterInfoRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2L_RegisterInfoRet::InitAsDefaultInstance() {
}

SG2L_RegisterInfoRet::SG2L_RegisterInfoRet(const SG2L_RegisterInfoRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2L_RegisterInfoRet::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2L_RegisterInfoRet::~SG2L_RegisterInfoRet() {
  SharedDtor();
}

void SG2L_RegisterInfoRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SG2L_RegisterInfoRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2L_RegisterInfoRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2L_RegisterInfoRet_descriptor_;
}

const SG2L_RegisterInfoRet& SG2L_RegisterInfoRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2L_RegisterInfoRet* SG2L_RegisterInfoRet::default_instance_ = NULL;

SG2L_RegisterInfoRet* SG2L_RegisterInfoRet::New() const {
  return new SG2L_RegisterInfoRet;
}

void SG2L_RegisterInfoRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2L_RegisterInfoRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.RegisterResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::RegisterResult_IsValid(value)) {
            set_result(static_cast< ::pb::RegisterResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2L_RegisterInfoRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.RegisterResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2L_RegisterInfoRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.RegisterResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2L_RegisterInfoRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.RegisterResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2L_RegisterInfoRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2L_RegisterInfoRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2L_RegisterInfoRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2L_RegisterInfoRet::MergeFrom(const SG2L_RegisterInfoRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2L_RegisterInfoRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2L_RegisterInfoRet::CopyFrom(const SG2L_RegisterInfoRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2L_RegisterInfoRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SG2L_RegisterInfoRet::Swap(SG2L_RegisterInfoRet* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2L_RegisterInfoRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2L_RegisterInfoRet_descriptor_;
  metadata.reflection = SG2L_RegisterInfoRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2D_RegisterInfo::kServerIdFieldNumber;
const int SG2D_RegisterInfo::kRegionIdFieldNumber;
const int SG2D_RegisterInfo::kIpFieldNumber;
const int SG2D_RegisterInfo::kPortFieldNumber;
const int SG2D_RegisterInfo::kNamesFieldNumber;
#endif  // !_MSC_VER

SG2D_RegisterInfo::SG2D_RegisterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2D_RegisterInfo::InitAsDefaultInstance() {
}

SG2D_RegisterInfo::SG2D_RegisterInfo(const SG2D_RegisterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2D_RegisterInfo::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0;
  region_id_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2D_RegisterInfo::~SG2D_RegisterInfo() {
  SharedDtor();
}

void SG2D_RegisterInfo::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (this != default_instance_) {
  }
}

void SG2D_RegisterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2D_RegisterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2D_RegisterInfo_descriptor_;
}

const SG2D_RegisterInfo& SG2D_RegisterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2D_RegisterInfo* SG2D_RegisterInfo::default_instance_ = NULL;

SG2D_RegisterInfo* SG2D_RegisterInfo::New() const {
  return new SG2D_RegisterInfo;
}

void SG2D_RegisterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0;
    region_id_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_port()) {
      if (port_ != &::google::protobuf::internal::kEmptyString) {
        port_->clear();
      }
    }
  }
  names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2D_RegisterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_region_id;
        break;
      }

      // required int32 region_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_region_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // required string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_port;
        break;
      }

      // required string port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_names;
        break;
      }

      // repeated string names = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_names;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2D_RegisterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }

  // required int32 region_id = 2;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region_id(), output);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // required string port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->port(), output);
  }

  // repeated string names = 5;
  for (int i = 0; i < this->names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->names(i).data(), this->names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->names(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2D_RegisterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }

  // required int32 region_id = 2;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region_id(), target);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // required string port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->port(), target);
  }

  // repeated string names = 5;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->names(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2D_RegisterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }

    // required int32 region_id = 2;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region_id());
    }

    // required string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required string port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port());
    }

  }
  // repeated string names = 5;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2D_RegisterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2D_RegisterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2D_RegisterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2D_RegisterInfo::MergeFrom(const SG2D_RegisterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2D_RegisterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2D_RegisterInfo::CopyFrom(const SG2D_RegisterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2D_RegisterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SG2D_RegisterInfo::Swap(SG2D_RegisterInfo* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(region_id_, other->region_id_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    names_.Swap(&other->names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2D_RegisterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2D_RegisterInfo_descriptor_;
  metadata.reflection = SG2D_RegisterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2D_RegisterInfoRet::kResultFieldNumber;
const int SG2D_RegisterInfoRet::kPvpTableSizeFieldNumber;
#endif  // !_MSC_VER

SG2D_RegisterInfoRet::SG2D_RegisterInfoRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2D_RegisterInfoRet::InitAsDefaultInstance() {
}

SG2D_RegisterInfoRet::SG2D_RegisterInfoRet(const SG2D_RegisterInfoRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2D_RegisterInfoRet::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  pvp_table_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2D_RegisterInfoRet::~SG2D_RegisterInfoRet() {
  SharedDtor();
}

void SG2D_RegisterInfoRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SG2D_RegisterInfoRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2D_RegisterInfoRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2D_RegisterInfoRet_descriptor_;
}

const SG2D_RegisterInfoRet& SG2D_RegisterInfoRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2D_RegisterInfoRet* SG2D_RegisterInfoRet::default_instance_ = NULL;

SG2D_RegisterInfoRet* SG2D_RegisterInfoRet::New() const {
  return new SG2D_RegisterInfoRet;
}

void SG2D_RegisterInfoRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    pvp_table_size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2D_RegisterInfoRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.RegisterResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::RegisterResult_IsValid(value)) {
            set_result(static_cast< ::pb::RegisterResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pvp_table_size;
        break;
      }

      // optional uint32 pvp_table_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvp_table_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pvp_table_size_)));
          set_has_pvp_table_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2D_RegisterInfoRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.RegisterResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 pvp_table_size = 2;
  if (has_pvp_table_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pvp_table_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2D_RegisterInfoRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.RegisterResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 pvp_table_size = 2;
  if (has_pvp_table_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pvp_table_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2D_RegisterInfoRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.RegisterResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 pvp_table_size = 2;
    if (has_pvp_table_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pvp_table_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2D_RegisterInfoRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2D_RegisterInfoRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2D_RegisterInfoRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2D_RegisterInfoRet::MergeFrom(const SG2D_RegisterInfoRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_pvp_table_size()) {
      set_pvp_table_size(from.pvp_table_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2D_RegisterInfoRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2D_RegisterInfoRet::CopyFrom(const SG2D_RegisterInfoRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2D_RegisterInfoRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SG2D_RegisterInfoRet::Swap(SG2D_RegisterInfoRet* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pvp_table_size_, other->pvp_table_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2D_RegisterInfoRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2D_RegisterInfoRet_descriptor_;
  metadata.reflection = SG2D_RegisterInfoRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2D_GetPlayerList::kAccountIdFieldNumber;
#endif  // !_MSC_VER

SG2D_GetPlayerList::SG2D_GetPlayerList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2D_GetPlayerList::InitAsDefaultInstance() {
}

SG2D_GetPlayerList::SG2D_GetPlayerList(const SG2D_GetPlayerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2D_GetPlayerList::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2D_GetPlayerList::~SG2D_GetPlayerList() {
  SharedDtor();
}

void SG2D_GetPlayerList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SG2D_GetPlayerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2D_GetPlayerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2D_GetPlayerList_descriptor_;
}

const SG2D_GetPlayerList& SG2D_GetPlayerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2D_GetPlayerList* SG2D_GetPlayerList::default_instance_ = NULL;

SG2D_GetPlayerList* SG2D_GetPlayerList::New() const {
  return new SG2D_GetPlayerList;
}

void SG2D_GetPlayerList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2D_GetPlayerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2D_GetPlayerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2D_GetPlayerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2D_GetPlayerList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2D_GetPlayerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2D_GetPlayerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2D_GetPlayerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2D_GetPlayerList::MergeFrom(const SG2D_GetPlayerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2D_GetPlayerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2D_GetPlayerList::CopyFrom(const SG2D_GetPlayerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2D_GetPlayerList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SG2D_GetPlayerList::Swap(SG2D_GetPlayerList* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2D_GetPlayerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2D_GetPlayerList_descriptor_;
  metadata.reflection = SG2D_GetPlayerList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2L_UpdatePlayerLockType::kAccountIdFieldNumber;
const int SG2L_UpdatePlayerLockType::kAccountNameFieldNumber;
const int SG2L_UpdatePlayerLockType::kLockTimeFieldNumber;
const int SG2L_UpdatePlayerLockType::kLockTypeFieldNumber;
#endif  // !_MSC_VER

SG2L_UpdatePlayerLockType::SG2L_UpdatePlayerLockType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2L_UpdatePlayerLockType::InitAsDefaultInstance() {
}

SG2L_UpdatePlayerLockType::SG2L_UpdatePlayerLockType(const SG2L_UpdatePlayerLockType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2L_UpdatePlayerLockType::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = GOOGLE_ULONGLONG(0);
  account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lock_time_ = GOOGLE_ULONGLONG(0);
  locktype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2L_UpdatePlayerLockType::~SG2L_UpdatePlayerLockType() {
  SharedDtor();
}

void SG2L_UpdatePlayerLockType::SharedDtor() {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_;
  }
  if (this != default_instance_) {
  }
}

void SG2L_UpdatePlayerLockType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2L_UpdatePlayerLockType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2L_UpdatePlayerLockType_descriptor_;
}

const SG2L_UpdatePlayerLockType& SG2L_UpdatePlayerLockType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2L_UpdatePlayerLockType* SG2L_UpdatePlayerLockType::default_instance_ = NULL;

SG2L_UpdatePlayerLockType* SG2L_UpdatePlayerLockType::New() const {
  return new SG2L_UpdatePlayerLockType;
}

void SG2L_UpdatePlayerLockType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = GOOGLE_ULONGLONG(0);
    if (has_account_name()) {
      if (account_name_ != &::google::protobuf::internal::kEmptyString) {
        account_name_->clear();
      }
    }
    lock_time_ = GOOGLE_ULONGLONG(0);
    locktype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2L_UpdatePlayerLockType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account_name;
        break;
      }

      // required string account_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_name().data(), this->account_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lock_time;
        break;
      }

      // optional uint64 lock_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lock_time_)));
          set_has_lock_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lockType;
        break;
      }

      // required .pb.ACCOUNT_LOCK_OP_TYPE lockType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lockType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ACCOUNT_LOCK_OP_TYPE_IsValid(value)) {
            set_locktype(static_cast< ::pb::ACCOUNT_LOCK_OP_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2L_UpdatePlayerLockType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->account_id(), output);
  }

  // required string account_name = 2;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account_name(), output);
  }

  // optional uint64 lock_time = 3;
  if (has_lock_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lock_time(), output);
  }

  // required .pb.ACCOUNT_LOCK_OP_TYPE lockType = 4;
  if (has_locktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->locktype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2L_UpdatePlayerLockType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->account_id(), target);
  }

  // required string account_name = 2;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account_name(), target);
  }

  // optional uint64 lock_time = 3;
  if (has_lock_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lock_time(), target);
  }

  // required .pb.ACCOUNT_LOCK_OP_TYPE lockType = 4;
  if (has_locktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->locktype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2L_UpdatePlayerLockType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->account_id());
    }

    // required string account_name = 2;
    if (has_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

    // optional uint64 lock_time = 3;
    if (has_lock_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lock_time());
    }

    // required .pb.ACCOUNT_LOCK_OP_TYPE lockType = 4;
    if (has_locktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->locktype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2L_UpdatePlayerLockType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2L_UpdatePlayerLockType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2L_UpdatePlayerLockType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2L_UpdatePlayerLockType::MergeFrom(const SG2L_UpdatePlayerLockType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_account_name()) {
      set_account_name(from.account_name());
    }
    if (from.has_lock_time()) {
      set_lock_time(from.lock_time());
    }
    if (from.has_locktype()) {
      set_locktype(from.locktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2L_UpdatePlayerLockType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2L_UpdatePlayerLockType::CopyFrom(const SG2L_UpdatePlayerLockType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2L_UpdatePlayerLockType::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void SG2L_UpdatePlayerLockType::Swap(SG2L_UpdatePlayerLockType* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(account_name_, other->account_name_);
    std::swap(lock_time_, other->lock_time_);
    std::swap(locktype_, other->locktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2L_UpdatePlayerLockType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2L_UpdatePlayerLockType_descriptor_;
  metadata.reflection = SG2L_UpdatePlayerLockType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2D_CreatePlayer::kAccountIdFieldNumber;
const int SG2D_CreatePlayer::kNameFieldNumber;
const int SG2D_CreatePlayer::kChannelIdFieldNumber;
const int SG2D_CreatePlayer::kCardSolutionIdFieldNumber;
const int SG2D_CreatePlayer::kSdkUserIdFieldNumber;
const int SG2D_CreatePlayer::kPlatformIdFieldNumber;
#endif  // !_MSC_VER

SG2D_CreatePlayer::SG2D_CreatePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2D_CreatePlayer::InitAsDefaultInstance() {
}

SG2D_CreatePlayer::SG2D_CreatePlayer(const SG2D_CreatePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2D_CreatePlayer::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_id_ = 0u;
  card_solution_id_ = 0u;
  sdk_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2D_CreatePlayer::~SG2D_CreatePlayer() {
  SharedDtor();
}

void SG2D_CreatePlayer::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (sdk_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete sdk_user_id_;
  }
  if (this != default_instance_) {
  }
}

void SG2D_CreatePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2D_CreatePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2D_CreatePlayer_descriptor_;
}

const SG2D_CreatePlayer& SG2D_CreatePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2D_CreatePlayer* SG2D_CreatePlayer::default_instance_ = NULL;

SG2D_CreatePlayer* SG2D_CreatePlayer::New() const {
  return new SG2D_CreatePlayer;
}

void SG2D_CreatePlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    channel_id_ = 0u;
    card_solution_id_ = 0u;
    if (has_sdk_user_id()) {
      if (sdk_user_id_ != &::google::protobuf::internal::kEmptyString) {
        sdk_user_id_->clear();
      }
    }
    platform_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2D_CreatePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_card_solution_id;
        break;
      }

      // optional uint32 card_solution_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_solution_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_solution_id_)));
          set_has_card_solution_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sdk_user_id;
        break;
      }

      // optional string sdk_user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sdk_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdk_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sdk_user_id().data(), this->sdk_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_platform_id;
        break;
      }

      // optional uint32 platform_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_id_)));
          set_has_platform_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2D_CreatePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->account_id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }

  // optional uint32 card_solution_id = 4;
  if (has_card_solution_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->card_solution_id(), output);
  }

  // optional string sdk_user_id = 5;
  if (has_sdk_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdk_user_id().data(), this->sdk_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->sdk_user_id(), output);
  }

  // optional uint32 platform_id = 6;
  if (has_platform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->platform_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2D_CreatePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->account_id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }

  // optional uint32 card_solution_id = 4;
  if (has_card_solution_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->card_solution_id(), target);
  }

  // optional string sdk_user_id = 5;
  if (has_sdk_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdk_user_id().data(), this->sdk_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sdk_user_id(), target);
  }

  // optional uint32 platform_id = 6;
  if (has_platform_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->platform_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2D_CreatePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->account_id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional uint32 card_solution_id = 4;
    if (has_card_solution_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_solution_id());
    }

    // optional string sdk_user_id = 5;
    if (has_sdk_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sdk_user_id());
    }

    // optional uint32 platform_id = 6;
    if (has_platform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platform_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2D_CreatePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2D_CreatePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2D_CreatePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2D_CreatePlayer::MergeFrom(const SG2D_CreatePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_card_solution_id()) {
      set_card_solution_id(from.card_solution_id());
    }
    if (from.has_sdk_user_id()) {
      set_sdk_user_id(from.sdk_user_id());
    }
    if (from.has_platform_id()) {
      set_platform_id(from.platform_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2D_CreatePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2D_CreatePlayer::CopyFrom(const SG2D_CreatePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2D_CreatePlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SG2D_CreatePlayer::Swap(SG2D_CreatePlayer* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(name_, other->name_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(card_solution_id_, other->card_solution_id_);
    std::swap(sdk_user_id_, other->sdk_user_id_);
    std::swap(platform_id_, other->platform_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2D_CreatePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2D_CreatePlayer_descriptor_;
  metadata.reflection = SG2D_CreatePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2D_SelectPlayer::kAccountIdFieldNumber;
const int SG2D_SelectPlayer::kPlayerIdFieldNumber;
const int SG2D_SelectPlayer::kPlatformIdFieldNumber;
const int SG2D_SelectPlayer::kIsQuickLoginFieldNumber;
const int SG2D_SelectPlayer::kCountryIdFieldNumber;
const int SG2D_SelectPlayer::kHeadpicIdFieldNumber;
const int SG2D_SelectPlayer::kExpectedCountryIdFieldNumber;
#endif  // !_MSC_VER

SG2D_SelectPlayer::SG2D_SelectPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2D_SelectPlayer::InitAsDefaultInstance() {
}

SG2D_SelectPlayer::SG2D_SelectPlayer(const SG2D_SelectPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2D_SelectPlayer::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = GOOGLE_ULONGLONG(0);
  player_id_ = GOOGLE_ULONGLONG(0);
  platform_id_ = 0u;
  is_quick_login_ = false;
  country_id_ = 0u;
  headpic_id_ = 0u;
  expected_country_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2D_SelectPlayer::~SG2D_SelectPlayer() {
  SharedDtor();
}

void SG2D_SelectPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SG2D_SelectPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2D_SelectPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2D_SelectPlayer_descriptor_;
}

const SG2D_SelectPlayer& SG2D_SelectPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2D_SelectPlayer* SG2D_SelectPlayer::default_instance_ = NULL;

SG2D_SelectPlayer* SG2D_SelectPlayer::New() const {
  return new SG2D_SelectPlayer;
}

void SG2D_SelectPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = GOOGLE_ULONGLONG(0);
    player_id_ = GOOGLE_ULONGLONG(0);
    platform_id_ = 0u;
    is_quick_login_ = false;
    country_id_ = 0u;
    headpic_id_ = 0u;
    expected_country_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2D_SelectPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // required uint64 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_platform_id;
        break;
      }

      // optional uint32 platform_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_id_)));
          set_has_platform_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_quick_login;
        break;
      }

      // optional bool is_quick_login = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_quick_login:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_quick_login_)));
          set_has_is_quick_login();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_country_id;
        break;
      }

      // optional uint32 country_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_id_)));
          set_has_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_headpic_id;
        break;
      }

      // optional uint32 headpic_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headpic_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headpic_id_)));
          set_has_headpic_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_expected_country_id;
        break;
      }

      // optional uint32 expected_country_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expected_country_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expected_country_id_)));
          set_has_expected_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2D_SelectPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->account_id(), output);
  }

  // required uint64 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->player_id(), output);
  }

  // optional uint32 platform_id = 3;
  if (has_platform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->platform_id(), output);
  }

  // optional bool is_quick_login = 4 [default = false];
  if (has_is_quick_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_quick_login(), output);
  }

  // optional uint32 country_id = 5;
  if (has_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->country_id(), output);
  }

  // optional uint32 headpic_id = 6;
  if (has_headpic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->headpic_id(), output);
  }

  // optional uint32 expected_country_id = 7;
  if (has_expected_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->expected_country_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2D_SelectPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->account_id(), target);
  }

  // required uint64 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->player_id(), target);
  }

  // optional uint32 platform_id = 3;
  if (has_platform_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->platform_id(), target);
  }

  // optional bool is_quick_login = 4 [default = false];
  if (has_is_quick_login()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_quick_login(), target);
  }

  // optional uint32 country_id = 5;
  if (has_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->country_id(), target);
  }

  // optional uint32 headpic_id = 6;
  if (has_headpic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->headpic_id(), target);
  }

  // optional uint32 expected_country_id = 7;
  if (has_expected_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->expected_country_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2D_SelectPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->account_id());
    }

    // required uint64 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint32 platform_id = 3;
    if (has_platform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platform_id());
    }

    // optional bool is_quick_login = 4 [default = false];
    if (has_is_quick_login()) {
      total_size += 1 + 1;
    }

    // optional uint32 country_id = 5;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_id());
    }

    // optional uint32 headpic_id = 6;
    if (has_headpic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headpic_id());
    }

    // optional uint32 expected_country_id = 7;
    if (has_expected_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expected_country_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2D_SelectPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2D_SelectPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2D_SelectPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2D_SelectPlayer::MergeFrom(const SG2D_SelectPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_platform_id()) {
      set_platform_id(from.platform_id());
    }
    if (from.has_is_quick_login()) {
      set_is_quick_login(from.is_quick_login());
    }
    if (from.has_country_id()) {
      set_country_id(from.country_id());
    }
    if (from.has_headpic_id()) {
      set_headpic_id(from.headpic_id());
    }
    if (from.has_expected_country_id()) {
      set_expected_country_id(from.expected_country_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2D_SelectPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2D_SelectPlayer::CopyFrom(const SG2D_SelectPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2D_SelectPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SG2D_SelectPlayer::Swap(SG2D_SelectPlayer* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(platform_id_, other->platform_id_);
    std::swap(is_quick_login_, other->is_quick_login_);
    std::swap(country_id_, other->country_id_);
    std::swap(headpic_id_, other->headpic_id_);
    std::swap(expected_country_id_, other->expected_country_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2D_SelectPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2D_SelectPlayer_descriptor_;
  metadata.reflection = SG2D_SelectPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2D_Player_Id::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

SG2D_Player_Id::SG2D_Player_Id()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2D_Player_Id::InitAsDefaultInstance() {
}

SG2D_Player_Id::SG2D_Player_Id(const SG2D_Player_Id& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2D_Player_Id::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2D_Player_Id::~SG2D_Player_Id() {
  SharedDtor();
}

void SG2D_Player_Id::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SG2D_Player_Id::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2D_Player_Id::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2D_Player_Id_descriptor_;
}

const SG2D_Player_Id& SG2D_Player_Id::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2D_Player_Id* SG2D_Player_Id::default_instance_ = NULL;

SG2D_Player_Id* SG2D_Player_Id::New() const {
  return new SG2D_Player_Id;
}

void SG2D_Player_Id::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2D_Player_Id::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2D_Player_Id::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2D_Player_Id::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2D_Player_Id::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2D_Player_Id::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2D_Player_Id* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2D_Player_Id*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2D_Player_Id::MergeFrom(const SG2D_Player_Id& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2D_Player_Id::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2D_Player_Id::CopyFrom(const SG2D_Player_Id& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2D_Player_Id::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SG2D_Player_Id::Swap(SG2D_Player_Id* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2D_Player_Id::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2D_Player_Id_descriptor_;
  metadata.reflection = SG2D_Player_Id_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2D_UpdataStageLevel::kOpTypeFieldNumber;
const int SG2D_UpdataStageLevel::kInfoFieldNumber;
#endif  // !_MSC_VER

SG2D_UpdataStageLevel::SG2D_UpdataStageLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2D_UpdataStageLevel::InitAsDefaultInstance() {
  info_ = const_cast< ::pb::GS2C_StageLevel*>(&::pb::GS2C_StageLevel::default_instance());
}

SG2D_UpdataStageLevel::SG2D_UpdataStageLevel(const SG2D_UpdataStageLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2D_UpdataStageLevel::SharedCtor() {
  _cached_size_ = 0;
  op_type_ = 1;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2D_UpdataStageLevel::~SG2D_UpdataStageLevel() {
  SharedDtor();
}

void SG2D_UpdataStageLevel::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void SG2D_UpdataStageLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2D_UpdataStageLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2D_UpdataStageLevel_descriptor_;
}

const SG2D_UpdataStageLevel& SG2D_UpdataStageLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2D_UpdataStageLevel* SG2D_UpdataStageLevel::default_instance_ = NULL;

SG2D_UpdataStageLevel* SG2D_UpdataStageLevel::New() const {
  return new SG2D_UpdataStageLevel;
}

void SG2D_UpdataStageLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_type_ = 1;
    if (has_info()) {
      if (info_ != NULL) info_->::pb::GS2C_StageLevel::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2D_UpdataStageLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.Data_Operate op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Data_Operate_IsValid(value)) {
            set_op_type(static_cast< ::pb::Data_Operate >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .pb.GS2C_StageLevel info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2D_UpdataStageLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.Data_Operate op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op_type(), output);
  }

  // optional .pb.GS2C_StageLevel info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2D_UpdataStageLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.Data_Operate op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op_type(), target);
  }

  // optional .pb.GS2C_StageLevel info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2D_UpdataStageLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.Data_Operate op_type = 1;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
    }

    // optional .pb.GS2C_StageLevel info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2D_UpdataStageLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2D_UpdataStageLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2D_UpdataStageLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2D_UpdataStageLevel::MergeFrom(const SG2D_UpdataStageLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_info()) {
      mutable_info()->::pb::GS2C_StageLevel::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2D_UpdataStageLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2D_UpdataStageLevel::CopyFrom(const SG2D_UpdataStageLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2D_UpdataStageLevel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SG2D_UpdataStageLevel::Swap(SG2D_UpdataStageLevel* other) {
  if (other != this) {
    std::swap(op_type_, other->op_type_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2D_UpdataStageLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2D_UpdataStageLevel_descriptor_;
  metadata.reflection = SG2D_UpdataStageLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2D_Forbiden_Player::kPlayerIdFieldNumber;
const int SG2D_Forbiden_Player::kForbidIdFieldNumber;
const int SG2D_Forbiden_Player::kTimeFieldNumber;
#endif  // !_MSC_VER

SG2D_Forbiden_Player::SG2D_Forbiden_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2D_Forbiden_Player::InitAsDefaultInstance() {
}

SG2D_Forbiden_Player::SG2D_Forbiden_Player(const SG2D_Forbiden_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2D_Forbiden_Player::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  forbidid_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2D_Forbiden_Player::~SG2D_Forbiden_Player() {
  SharedDtor();
}

void SG2D_Forbiden_Player::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SG2D_Forbiden_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2D_Forbiden_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2D_Forbiden_Player_descriptor_;
}

const SG2D_Forbiden_Player& SG2D_Forbiden_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2D_Forbiden_Player* SG2D_Forbiden_Player::default_instance_ = NULL;

SG2D_Forbiden_Player* SG2D_Forbiden_Player::New() const {
  return new SG2D_Forbiden_Player;
}

void SG2D_Forbiden_Player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    forbidid_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2D_Forbiden_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_forbidId;
        break;
      }

      // optional int32 forbidId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forbidId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &forbidid_)));
          set_has_forbidid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2D_Forbiden_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional int32 forbidId = 2;
  if (has_forbidid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->forbidid(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2D_Forbiden_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional int32 forbidId = 2;
  if (has_forbidid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->forbidid(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2D_Forbiden_Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional int32 forbidId = 2;
    if (has_forbidid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->forbidid());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2D_Forbiden_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2D_Forbiden_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2D_Forbiden_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2D_Forbiden_Player::MergeFrom(const SG2D_Forbiden_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_forbidid()) {
      set_forbidid(from.forbidid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2D_Forbiden_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2D_Forbiden_Player::CopyFrom(const SG2D_Forbiden_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2D_Forbiden_Player::IsInitialized() const {

  return true;
}

void SG2D_Forbiden_Player::Swap(SG2D_Forbiden_Player* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(forbidid_, other->forbidid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2D_Forbiden_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2D_Forbiden_Player_descriptor_;
  metadata.reflection = SG2D_Forbiden_Player_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SD2G_Forbiden_Player_Ret::kAcountIdFieldNumber;
const int SD2G_Forbiden_Player_Ret::kPlayerNameFieldNumber;
const int SD2G_Forbiden_Player_Ret::kForbidIdFieldNumber;
const int SD2G_Forbiden_Player_Ret::kTimeFieldNumber;
#endif  // !_MSC_VER

SD2G_Forbiden_Player_Ret::SD2G_Forbiden_Player_Ret()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SD2G_Forbiden_Player_Ret::InitAsDefaultInstance() {
}

SD2G_Forbiden_Player_Ret::SD2G_Forbiden_Player_Ret(const SD2G_Forbiden_Player_Ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SD2G_Forbiden_Player_Ret::SharedCtor() {
  _cached_size_ = 0;
  acountid_ = GOOGLE_ULONGLONG(0);
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  forbidid_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SD2G_Forbiden_Player_Ret::~SD2G_Forbiden_Player_Ret() {
  SharedDtor();
}

void SD2G_Forbiden_Player_Ret::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (this != default_instance_) {
  }
}

void SD2G_Forbiden_Player_Ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SD2G_Forbiden_Player_Ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SD2G_Forbiden_Player_Ret_descriptor_;
}

const SD2G_Forbiden_Player_Ret& SD2G_Forbiden_Player_Ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SD2G_Forbiden_Player_Ret* SD2G_Forbiden_Player_Ret::default_instance_ = NULL;

SD2G_Forbiden_Player_Ret* SD2G_Forbiden_Player_Ret::New() const {
  return new SD2G_Forbiden_Player_Ret;
}

void SD2G_Forbiden_Player_Ret::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    acountid_ = GOOGLE_ULONGLONG(0);
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    forbidid_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SD2G_Forbiden_Player_Ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 acountId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &acountid_)));
          set_has_acountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_forbidId;
        break;
      }

      // optional int32 forbidId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forbidId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &forbidid_)));
          set_has_forbidid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SD2G_Forbiden_Player_Ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 acountId = 1;
  if (has_acountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->acountid(), output);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_name(), output);
  }

  // optional int32 forbidId = 3;
  if (has_forbidid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->forbidid(), output);
  }

  // optional int32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SD2G_Forbiden_Player_Ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 acountId = 1;
  if (has_acountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->acountid(), target);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // optional int32 forbidId = 3;
  if (has_forbidid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->forbidid(), target);
  }

  // optional int32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SD2G_Forbiden_Player_Ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 acountId = 1;
    if (has_acountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->acountid());
    }

    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional int32 forbidId = 3;
    if (has_forbidid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->forbidid());
    }

    // optional int32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SD2G_Forbiden_Player_Ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SD2G_Forbiden_Player_Ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SD2G_Forbiden_Player_Ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SD2G_Forbiden_Player_Ret::MergeFrom(const SD2G_Forbiden_Player_Ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acountid()) {
      set_acountid(from.acountid());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_forbidid()) {
      set_forbidid(from.forbidid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SD2G_Forbiden_Player_Ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SD2G_Forbiden_Player_Ret::CopyFrom(const SD2G_Forbiden_Player_Ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SD2G_Forbiden_Player_Ret::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SD2G_Forbiden_Player_Ret::Swap(SD2G_Forbiden_Player_Ret* other) {
  if (other != this) {
    std::swap(acountid_, other->acountid_);
    std::swap(player_name_, other->player_name_);
    std::swap(forbidid_, other->forbidid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SD2G_Forbiden_Player_Ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SD2G_Forbiden_Player_Ret_descriptor_;
  metadata.reflection = SD2G_Forbiden_Player_Ret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2D_UpdataFuBenBase::kOpTypeFieldNumber;
const int SG2D_UpdataFuBenBase::kCurFubenIdFieldNumber;
const int SG2D_UpdataFuBenBase::kCurStageIdFieldNumber;
const int SG2D_UpdataFuBenBase::kNRStarsFieldNumber;
#endif  // !_MSC_VER

SG2D_UpdataFuBenBase::SG2D_UpdataFuBenBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2D_UpdataFuBenBase::InitAsDefaultInstance() {
}

SG2D_UpdataFuBenBase::SG2D_UpdataFuBenBase(const SG2D_UpdataFuBenBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2D_UpdataFuBenBase::SharedCtor() {
  _cached_size_ = 0;
  op_type_ = 1;
  cur_fuben_id_ = 0u;
  cur_stage_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2D_UpdataFuBenBase::~SG2D_UpdataFuBenBase() {
  SharedDtor();
}

void SG2D_UpdataFuBenBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SG2D_UpdataFuBenBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2D_UpdataFuBenBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2D_UpdataFuBenBase_descriptor_;
}

const SG2D_UpdataFuBenBase& SG2D_UpdataFuBenBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2D_UpdataFuBenBase* SG2D_UpdataFuBenBase::default_instance_ = NULL;

SG2D_UpdataFuBenBase* SG2D_UpdataFuBenBase::New() const {
  return new SG2D_UpdataFuBenBase;
}

void SG2D_UpdataFuBenBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_type_ = 1;
    cur_fuben_id_ = 0u;
    cur_stage_id_ = 0u;
  }
  nr_stars_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2D_UpdataFuBenBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.Data_Operate op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Data_Operate_IsValid(value)) {
            set_op_type(static_cast< ::pb::Data_Operate >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_fuben_id;
        break;
      }

      // required uint32 cur_fuben_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_fuben_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_fuben_id_)));
          set_has_cur_fuben_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_stage_id;
        break;
      }

      // required uint32 cur_stage_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_stage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_stage_id_)));
          set_has_cur_stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_NR_stars;
        break;
      }

      // repeated uint32 NR_stars = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NR_stars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_nr_stars())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_nr_stars())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_NR_stars;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2D_UpdataFuBenBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.Data_Operate op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op_type(), output);
  }

  // required uint32 cur_fuben_id = 2;
  if (has_cur_fuben_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_fuben_id(), output);
  }

  // required uint32 cur_stage_id = 3;
  if (has_cur_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_stage_id(), output);
  }

  // repeated uint32 NR_stars = 4;
  for (int i = 0; i < this->nr_stars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->nr_stars(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2D_UpdataFuBenBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.Data_Operate op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op_type(), target);
  }

  // required uint32 cur_fuben_id = 2;
  if (has_cur_fuben_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_fuben_id(), target);
  }

  // required uint32 cur_stage_id = 3;
  if (has_cur_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_stage_id(), target);
  }

  // repeated uint32 NR_stars = 4;
  for (int i = 0; i < this->nr_stars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->nr_stars(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2D_UpdataFuBenBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.Data_Operate op_type = 1;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
    }

    // required uint32 cur_fuben_id = 2;
    if (has_cur_fuben_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_fuben_id());
    }

    // required uint32 cur_stage_id = 3;
    if (has_cur_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_stage_id());
    }

  }
  // repeated uint32 NR_stars = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->nr_stars_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->nr_stars(i));
    }
    total_size += 1 * this->nr_stars_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2D_UpdataFuBenBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2D_UpdataFuBenBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2D_UpdataFuBenBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2D_UpdataFuBenBase::MergeFrom(const SG2D_UpdataFuBenBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  nr_stars_.MergeFrom(from.nr_stars_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_cur_fuben_id()) {
      set_cur_fuben_id(from.cur_fuben_id());
    }
    if (from.has_cur_stage_id()) {
      set_cur_stage_id(from.cur_stage_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2D_UpdataFuBenBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2D_UpdataFuBenBase::CopyFrom(const SG2D_UpdataFuBenBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2D_UpdataFuBenBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SG2D_UpdataFuBenBase::Swap(SG2D_UpdataFuBenBase* other) {
  if (other != this) {
    std::swap(op_type_, other->op_type_);
    std::swap(cur_fuben_id_, other->cur_fuben_id_);
    std::swap(cur_stage_id_, other->cur_stage_id_);
    nr_stars_.Swap(&other->nr_stars_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2D_UpdataFuBenBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2D_UpdataFuBenBase_descriptor_;
  metadata.reflection = SG2D_UpdataFuBenBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2D_UpdataFuBenResource::kOpTypeFieldNumber;
const int SG2D_UpdataFuBenResource::kInfoFieldNumber;
#endif  // !_MSC_VER

SG2D_UpdataFuBenResource::SG2D_UpdataFuBenResource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2D_UpdataFuBenResource::InitAsDefaultInstance() {
  info_ = const_cast< ::pb::GS2C_Resource_Stage*>(&::pb::GS2C_Resource_Stage::default_instance());
}

SG2D_UpdataFuBenResource::SG2D_UpdataFuBenResource(const SG2D_UpdataFuBenResource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2D_UpdataFuBenResource::SharedCtor() {
  _cached_size_ = 0;
  op_type_ = 1;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2D_UpdataFuBenResource::~SG2D_UpdataFuBenResource() {
  SharedDtor();
}

void SG2D_UpdataFuBenResource::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void SG2D_UpdataFuBenResource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2D_UpdataFuBenResource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2D_UpdataFuBenResource_descriptor_;
}

const SG2D_UpdataFuBenResource& SG2D_UpdataFuBenResource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2D_UpdataFuBenResource* SG2D_UpdataFuBenResource::default_instance_ = NULL;

SG2D_UpdataFuBenResource* SG2D_UpdataFuBenResource::New() const {
  return new SG2D_UpdataFuBenResource;
}

void SG2D_UpdataFuBenResource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_type_ = 1;
    if (has_info()) {
      if (info_ != NULL) info_->::pb::GS2C_Resource_Stage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2D_UpdataFuBenResource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.Data_Operate op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Data_Operate_IsValid(value)) {
            set_op_type(static_cast< ::pb::Data_Operate >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .pb.GS2C_Resource_Stage info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2D_UpdataFuBenResource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.Data_Operate op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op_type(), output);
  }

  // optional .pb.GS2C_Resource_Stage info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2D_UpdataFuBenResource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.Data_Operate op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op_type(), target);
  }

  // optional .pb.GS2C_Resource_Stage info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2D_UpdataFuBenResource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.Data_Operate op_type = 1;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
    }

    // optional .pb.GS2C_Resource_Stage info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2D_UpdataFuBenResource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2D_UpdataFuBenResource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2D_UpdataFuBenResource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2D_UpdataFuBenResource::MergeFrom(const SG2D_UpdataFuBenResource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_info()) {
      mutable_info()->::pb::GS2C_Resource_Stage::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2D_UpdataFuBenResource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2D_UpdataFuBenResource::CopyFrom(const SG2D_UpdataFuBenResource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2D_UpdataFuBenResource::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SG2D_UpdataFuBenResource::Swap(SG2D_UpdataFuBenResource* other) {
  if (other != this) {
    std::swap(op_type_, other->op_type_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2D_UpdataFuBenResource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2D_UpdataFuBenResource_descriptor_;
  metadata.reflection = SG2D_UpdataFuBenResource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2D_UpdataFuBenPassStage::kOpTypeFieldNumber;
const int SG2D_UpdataFuBenPassStage::kStageTypeFieldNumber;
const int SG2D_UpdataFuBenPassStage::kPassCountFieldNumber;
const int SG2D_UpdataFuBenPassStage::kIsTakeRewardFieldNumber;
#endif  // !_MSC_VER

SG2D_UpdataFuBenPassStage::SG2D_UpdataFuBenPassStage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2D_UpdataFuBenPassStage::InitAsDefaultInstance() {
}

SG2D_UpdataFuBenPassStage::SG2D_UpdataFuBenPassStage(const SG2D_UpdataFuBenPassStage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2D_UpdataFuBenPassStage::SharedCtor() {
  _cached_size_ = 0;
  op_type_ = 1;
  stage_type_ = 0u;
  pass_count_ = 0u;
  is_take_reward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2D_UpdataFuBenPassStage::~SG2D_UpdataFuBenPassStage() {
  SharedDtor();
}

void SG2D_UpdataFuBenPassStage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SG2D_UpdataFuBenPassStage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2D_UpdataFuBenPassStage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2D_UpdataFuBenPassStage_descriptor_;
}

const SG2D_UpdataFuBenPassStage& SG2D_UpdataFuBenPassStage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2D_UpdataFuBenPassStage* SG2D_UpdataFuBenPassStage::default_instance_ = NULL;

SG2D_UpdataFuBenPassStage* SG2D_UpdataFuBenPassStage::New() const {
  return new SG2D_UpdataFuBenPassStage;
}

void SG2D_UpdataFuBenPassStage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_type_ = 1;
    stage_type_ = 0u;
    pass_count_ = 0u;
    is_take_reward_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2D_UpdataFuBenPassStage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.Data_Operate op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Data_Operate_IsValid(value)) {
            set_op_type(static_cast< ::pb::Data_Operate >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stage_type;
        break;
      }

      // optional uint32 stage_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_type_)));
          set_has_stage_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pass_count;
        break;
      }

      // optional uint32 pass_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pass_count_)));
          set_has_pass_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_take_reward;
        break;
      }

      // optional uint32 is_take_reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_take_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_take_reward_)));
          set_has_is_take_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2D_UpdataFuBenPassStage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.Data_Operate op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op_type(), output);
  }

  // optional uint32 stage_type = 2;
  if (has_stage_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stage_type(), output);
  }

  // optional uint32 pass_count = 3;
  if (has_pass_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pass_count(), output);
  }

  // optional uint32 is_take_reward = 4;
  if (has_is_take_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->is_take_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2D_UpdataFuBenPassStage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.Data_Operate op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op_type(), target);
  }

  // optional uint32 stage_type = 2;
  if (has_stage_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stage_type(), target);
  }

  // optional uint32 pass_count = 3;
  if (has_pass_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pass_count(), target);
  }

  // optional uint32 is_take_reward = 4;
  if (has_is_take_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->is_take_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2D_UpdataFuBenPassStage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.Data_Operate op_type = 1;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
    }

    // optional uint32 stage_type = 2;
    if (has_stage_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage_type());
    }

    // optional uint32 pass_count = 3;
    if (has_pass_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pass_count());
    }

    // optional uint32 is_take_reward = 4;
    if (has_is_take_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_take_reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2D_UpdataFuBenPassStage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2D_UpdataFuBenPassStage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2D_UpdataFuBenPassStage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2D_UpdataFuBenPassStage::MergeFrom(const SG2D_UpdataFuBenPassStage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_stage_type()) {
      set_stage_type(from.stage_type());
    }
    if (from.has_pass_count()) {
      set_pass_count(from.pass_count());
    }
    if (from.has_is_take_reward()) {
      set_is_take_reward(from.is_take_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2D_UpdataFuBenPassStage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2D_UpdataFuBenPassStage::CopyFrom(const SG2D_UpdataFuBenPassStage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2D_UpdataFuBenPassStage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SG2D_UpdataFuBenPassStage::Swap(SG2D_UpdataFuBenPassStage* other) {
  if (other != this) {
    std::swap(op_type_, other->op_type_);
    std::swap(stage_type_, other->stage_type_);
    std::swap(pass_count_, other->pass_count_);
    std::swap(is_take_reward_, other->is_take_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2D_UpdataFuBenPassStage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2D_UpdataFuBenPassStage_descriptor_;
  metadata.reflection = SG2D_UpdataFuBenPassStage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Country_Info_Devide::kCountryidFieldNumber;
const int Country_Info_Devide::kProsDegreeFieldNumber;
#endif  // !_MSC_VER

Country_Info_Devide::Country_Info_Devide()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Country_Info_Devide::InitAsDefaultInstance() {
}

Country_Info_Devide::Country_Info_Devide(const Country_Info_Devide& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Country_Info_Devide::SharedCtor() {
  _cached_size_ = 0;
  countryid_ = 0u;
  pros_degree_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Country_Info_Devide::~Country_Info_Devide() {
  SharedDtor();
}

void Country_Info_Devide::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Country_Info_Devide::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Country_Info_Devide::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Country_Info_Devide_descriptor_;
}

const Country_Info_Devide& Country_Info_Devide::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

Country_Info_Devide* Country_Info_Devide::default_instance_ = NULL;

Country_Info_Devide* Country_Info_Devide::New() const {
  return new Country_Info_Devide;
}

void Country_Info_Devide::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    countryid_ = 0u;
    pros_degree_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Country_Info_Devide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 countryid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countryid_)));
          set_has_countryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Pros_degree;
        break;
      }

      // optional uint32 Pros_degree = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Pros_degree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pros_degree_)));
          set_has_pros_degree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Country_Info_Devide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 countryid = 1;
  if (has_countryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->countryid(), output);
  }

  // optional uint32 Pros_degree = 2;
  if (has_pros_degree()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pros_degree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Country_Info_Devide::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 countryid = 1;
  if (has_countryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->countryid(), target);
  }

  // optional uint32 Pros_degree = 2;
  if (has_pros_degree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pros_degree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Country_Info_Devide::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 countryid = 1;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countryid());
    }

    // optional uint32 Pros_degree = 2;
    if (has_pros_degree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pros_degree());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Country_Info_Devide::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Country_Info_Devide* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Country_Info_Devide*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Country_Info_Devide::MergeFrom(const Country_Info_Devide& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_countryid()) {
      set_countryid(from.countryid());
    }
    if (from.has_pros_degree()) {
      set_pros_degree(from.pros_degree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Country_Info_Devide::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Country_Info_Devide::CopyFrom(const Country_Info_Devide& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Country_Info_Devide::IsInitialized() const {

  return true;
}

void Country_Info_Devide::Swap(Country_Info_Devide* other) {
  if (other != this) {
    std::swap(countryid_, other->countryid_);
    std::swap(pros_degree_, other->pros_degree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Country_Info_Devide::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Country_Info_Devide_descriptor_;
  metadata.reflection = Country_Info_Devide_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SD2G_Country_AllInfo::kBaseInfoFieldNumber;
const int SD2G_Country_AllInfo::kCityLstFieldNumber;
#endif  // !_MSC_VER

SD2G_Country_AllInfo::SD2G_Country_AllInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SD2G_Country_AllInfo::InitAsDefaultInstance() {
}

SD2G_Country_AllInfo::SD2G_Country_AllInfo(const SD2G_Country_AllInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SD2G_Country_AllInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SD2G_Country_AllInfo::~SD2G_Country_AllInfo() {
  SharedDtor();
}

void SD2G_Country_AllInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SD2G_Country_AllInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SD2G_Country_AllInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SD2G_Country_AllInfo_descriptor_;
}

const SD2G_Country_AllInfo& SD2G_Country_AllInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SD2G_Country_AllInfo* SD2G_Country_AllInfo::default_instance_ = NULL;

SD2G_Country_AllInfo* SD2G_Country_AllInfo::New() const {
  return new SD2G_Country_AllInfo;
}

void SD2G_Country_AllInfo::Clear() {
  base_info_.Clear();
  city_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SD2G_Country_AllInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.CountyInfo base_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_base_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_base_info;
        if (input->ExpectTag(18)) goto parse_city_lst;
        break;
      }

      // repeated .pb.Struct_City_Info city_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_city_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_city_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SD2G_Country_AllInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.CountyInfo base_info = 1;
  for (int i = 0; i < this->base_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_info(i), output);
  }

  // repeated .pb.Struct_City_Info city_lst = 2;
  for (int i = 0; i < this->city_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->city_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SD2G_Country_AllInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.CountyInfo base_info = 1;
  for (int i = 0; i < this->base_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_info(i), target);
  }

  // repeated .pb.Struct_City_Info city_lst = 2;
  for (int i = 0; i < this->city_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->city_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SD2G_Country_AllInfo::ByteSize() const {
  int total_size = 0;

  // repeated .pb.CountyInfo base_info = 1;
  total_size += 1 * this->base_info_size();
  for (int i = 0; i < this->base_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->base_info(i));
  }

  // repeated .pb.Struct_City_Info city_lst = 2;
  total_size += 1 * this->city_lst_size();
  for (int i = 0; i < this->city_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->city_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SD2G_Country_AllInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SD2G_Country_AllInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SD2G_Country_AllInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SD2G_Country_AllInfo::MergeFrom(const SD2G_Country_AllInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  base_info_.MergeFrom(from.base_info_);
  city_lst_.MergeFrom(from.city_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SD2G_Country_AllInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SD2G_Country_AllInfo::CopyFrom(const SD2G_Country_AllInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SD2G_Country_AllInfo::IsInitialized() const {

  for (int i = 0; i < base_info_size(); i++) {
    if (!this->base_info(i).IsInitialized()) return false;
  }
  for (int i = 0; i < city_lst_size(); i++) {
    if (!this->city_lst(i).IsInitialized()) return false;
  }
  return true;
}

void SD2G_Country_AllInfo::Swap(SD2G_Country_AllInfo* other) {
  if (other != this) {
    base_info_.Swap(&other->base_info_);
    city_lst_.Swap(&other->city_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SD2G_Country_AllInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SD2G_Country_AllInfo_descriptor_;
  metadata.reflection = SD2G_Country_AllInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2B_Country_Info::kIsCanCrossWarFieldNumber;
const int SG2B_Country_Info::kCountryInfoFieldNumber;
const int SG2B_Country_Info::kServerIdFieldNumber;
#endif  // !_MSC_VER

SG2B_Country_Info::SG2B_Country_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2B_Country_Info::InitAsDefaultInstance() {
}

SG2B_Country_Info::SG2B_Country_Info(const SG2B_Country_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2B_Country_Info::SharedCtor() {
  _cached_size_ = 0;
  is_can_cross_war_ = false;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2B_Country_Info::~SG2B_Country_Info() {
  SharedDtor();
}

void SG2B_Country_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SG2B_Country_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2B_Country_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2B_Country_Info_descriptor_;
}

const SG2B_Country_Info& SG2B_Country_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2B_Country_Info* SG2B_Country_Info::default_instance_ = NULL;

SG2B_Country_Info* SG2B_Country_Info::New() const {
  return new SG2B_Country_Info;
}

void SG2B_Country_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_can_cross_war_ = false;
    server_id_ = 0u;
  }
  country_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2B_Country_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_can_cross_war = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_can_cross_war_)));
          set_has_is_can_cross_war();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_country_info;
        break;
      }

      // repeated .pb.Country_Info_Devide country_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_country_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_country_info;
        if (input->ExpectTag(24)) goto parse_server_id;
        break;
      }

      // optional uint32 server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2B_Country_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_can_cross_war = 1;
  if (has_is_can_cross_war()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_can_cross_war(), output);
  }

  // repeated .pb.Country_Info_Devide country_info = 2;
  for (int i = 0; i < this->country_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->country_info(i), output);
  }

  // optional uint32 server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2B_Country_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_can_cross_war = 1;
  if (has_is_can_cross_war()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_can_cross_war(), target);
  }

  // repeated .pb.Country_Info_Devide country_info = 2;
  for (int i = 0; i < this->country_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->country_info(i), target);
  }

  // optional uint32 server_id = 3;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2B_Country_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_can_cross_war = 1;
    if (has_is_can_cross_war()) {
      total_size += 1 + 1;
    }

    // optional uint32 server_id = 3;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  // repeated .pb.Country_Info_Devide country_info = 2;
  total_size += 1 * this->country_info_size();
  for (int i = 0; i < this->country_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->country_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2B_Country_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2B_Country_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2B_Country_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2B_Country_Info::MergeFrom(const SG2B_Country_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  country_info_.MergeFrom(from.country_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_can_cross_war()) {
      set_is_can_cross_war(from.is_can_cross_war());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2B_Country_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2B_Country_Info::CopyFrom(const SG2B_Country_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2B_Country_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SG2B_Country_Info::Swap(SG2B_Country_Info* other) {
  if (other != this) {
    std::swap(is_can_cross_war_, other->is_can_cross_war_);
    country_info_.Swap(&other->country_info_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2B_Country_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2B_Country_Info_descriptor_;
  metadata.reflection = SG2B_Country_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SB2G_Country_War_Info::kWarInfoFieldNumber;
#endif  // !_MSC_VER

SB2G_Country_War_Info::SB2G_Country_War_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SB2G_Country_War_Info::InitAsDefaultInstance() {
}

SB2G_Country_War_Info::SB2G_Country_War_Info(const SB2G_Country_War_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SB2G_Country_War_Info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SB2G_Country_War_Info::~SB2G_Country_War_Info() {
  SharedDtor();
}

void SB2G_Country_War_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SB2G_Country_War_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SB2G_Country_War_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SB2G_Country_War_Info_descriptor_;
}

const SB2G_Country_War_Info& SB2G_Country_War_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SB2G_Country_War_Info* SB2G_Country_War_Info::default_instance_ = NULL;

SB2G_Country_War_Info* SB2G_Country_War_Info::New() const {
  return new SB2G_Country_War_Info;
}

void SB2G_Country_War_Info::Clear() {
  war_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SB2G_Country_War_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.CountryCrossWarInfo war_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_war_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_war_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_war_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SB2G_Country_War_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.CountryCrossWarInfo war_info = 1;
  for (int i = 0; i < this->war_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->war_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SB2G_Country_War_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.CountryCrossWarInfo war_info = 1;
  for (int i = 0; i < this->war_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->war_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SB2G_Country_War_Info::ByteSize() const {
  int total_size = 0;

  // repeated .pb.CountryCrossWarInfo war_info = 1;
  total_size += 1 * this->war_info_size();
  for (int i = 0; i < this->war_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->war_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SB2G_Country_War_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SB2G_Country_War_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SB2G_Country_War_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SB2G_Country_War_Info::MergeFrom(const SB2G_Country_War_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  war_info_.MergeFrom(from.war_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SB2G_Country_War_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SB2G_Country_War_Info::CopyFrom(const SB2G_Country_War_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SB2G_Country_War_Info::IsInitialized() const {

  for (int i = 0; i < war_info_size(); i++) {
    if (!this->war_info(i).IsInitialized()) return false;
  }
  return true;
}

void SB2G_Country_War_Info::Swap(SB2G_Country_War_Info* other) {
  if (other != this) {
    war_info_.Swap(&other->war_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SB2G_Country_War_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SB2G_Country_War_Info_descriptor_;
  metadata.reflection = SB2G_Country_War_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2R_Country_AllInfo::kBaseInfoFieldNumber;
const int SG2R_Country_AllInfo::kCityLstFieldNumber;
#endif  // !_MSC_VER

SG2R_Country_AllInfo::SG2R_Country_AllInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2R_Country_AllInfo::InitAsDefaultInstance() {
}

SG2R_Country_AllInfo::SG2R_Country_AllInfo(const SG2R_Country_AllInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2R_Country_AllInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2R_Country_AllInfo::~SG2R_Country_AllInfo() {
  SharedDtor();
}

void SG2R_Country_AllInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SG2R_Country_AllInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2R_Country_AllInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2R_Country_AllInfo_descriptor_;
}

const SG2R_Country_AllInfo& SG2R_Country_AllInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2R_Country_AllInfo* SG2R_Country_AllInfo::default_instance_ = NULL;

SG2R_Country_AllInfo* SG2R_Country_AllInfo::New() const {
  return new SG2R_Country_AllInfo;
}

void SG2R_Country_AllInfo::Clear() {
  base_info_.Clear();
  city_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2R_Country_AllInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.CountyInfo base_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_base_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_base_info;
        if (input->ExpectTag(18)) goto parse_city_lst;
        break;
      }

      // repeated .pb.Struct_City_Info city_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_city_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_city_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2R_Country_AllInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.CountyInfo base_info = 1;
  for (int i = 0; i < this->base_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_info(i), output);
  }

  // repeated .pb.Struct_City_Info city_lst = 2;
  for (int i = 0; i < this->city_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->city_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2R_Country_AllInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.CountyInfo base_info = 1;
  for (int i = 0; i < this->base_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_info(i), target);
  }

  // repeated .pb.Struct_City_Info city_lst = 2;
  for (int i = 0; i < this->city_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->city_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2R_Country_AllInfo::ByteSize() const {
  int total_size = 0;

  // repeated .pb.CountyInfo base_info = 1;
  total_size += 1 * this->base_info_size();
  for (int i = 0; i < this->base_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->base_info(i));
  }

  // repeated .pb.Struct_City_Info city_lst = 2;
  total_size += 1 * this->city_lst_size();
  for (int i = 0; i < this->city_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->city_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2R_Country_AllInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2R_Country_AllInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2R_Country_AllInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2R_Country_AllInfo::MergeFrom(const SG2R_Country_AllInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  base_info_.MergeFrom(from.base_info_);
  city_lst_.MergeFrom(from.city_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2R_Country_AllInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2R_Country_AllInfo::CopyFrom(const SG2R_Country_AllInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2R_Country_AllInfo::IsInitialized() const {

  for (int i = 0; i < base_info_size(); i++) {
    if (!this->base_info(i).IsInitialized()) return false;
  }
  for (int i = 0; i < city_lst_size(); i++) {
    if (!this->city_lst(i).IsInitialized()) return false;
  }
  return true;
}

void SG2R_Country_AllInfo::Swap(SG2R_Country_AllInfo* other) {
  if (other != this) {
    base_info_.Swap(&other->base_info_);
    city_lst_.Swap(&other->city_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2R_Country_AllInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2R_Country_AllInfo_descriptor_;
  metadata.reflection = SG2R_Country_AllInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GobalValue::kIndexFieldNumber;
const int GobalValue::kTypeFieldNumber;
const int GobalValue::kI64ValueFieldNumber;
const int GobalValue::kStrValueFieldNumber;
const int GobalValue::kIntValueFieldNumber;
#endif  // !_MSC_VER

GobalValue::GobalValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GobalValue::InitAsDefaultInstance() {
}

GobalValue::GobalValue(const GobalValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GobalValue::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  type_ = 0;
  i64_value_ = GOOGLE_LONGLONG(0);
  str_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  int_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GobalValue::~GobalValue() {
  SharedDtor();
}

void GobalValue::SharedDtor() {
  if (str_value_ != &::google::protobuf::internal::kEmptyString) {
    delete str_value_;
  }
  if (this != default_instance_) {
  }
}

void GobalValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GobalValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GobalValue_descriptor_;
}

const GobalValue& GobalValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

GobalValue* GobalValue::default_instance_ = NULL;

GobalValue* GobalValue::New() const {
  return new GobalValue;
}

void GobalValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    type_ = 0;
    i64_value_ = GOOGLE_LONGLONG(0);
    if (has_str_value()) {
      if (str_value_ != &::google::protobuf::internal::kEmptyString) {
        str_value_->clear();
      }
    }
    int_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GobalValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .pb.ValueType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ValueType_IsValid(value)) {
            set_type(static_cast< ::pb::ValueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_i64_value;
        break;
      }

      // optional int64 i64_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_i64_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &i64_value_)));
          set_has_i64_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_str_value;
        break;
      }

      // optional string str_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_value().data(), this->str_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_int_value;
        break;
      }

      // optional int32 int_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_value_)));
          set_has_int_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GobalValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional .pb.ValueType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional int64 i64_value = 3;
  if (has_i64_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->i64_value(), output);
  }

  // optional string str_value = 4;
  if (has_str_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_value().data(), this->str_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->str_value(), output);
  }

  // optional int32 int_value = 5;
  if (has_int_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->int_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GobalValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional .pb.ValueType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional int64 i64_value = 3;
  if (has_i64_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->i64_value(), target);
  }

  // optional string str_value = 4;
  if (has_str_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_value().data(), this->str_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->str_value(), target);
  }

  // optional int32 int_value = 5;
  if (has_int_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->int_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GobalValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional .pb.ValueType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int64 i64_value = 3;
    if (has_i64_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->i64_value());
    }

    // optional string str_value = 4;
    if (has_str_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_value());
    }

    // optional int32 int_value = 5;
    if (has_int_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GobalValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GobalValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GobalValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GobalValue::MergeFrom(const GobalValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_i64_value()) {
      set_i64_value(from.i64_value());
    }
    if (from.has_str_value()) {
      set_str_value(from.str_value());
    }
    if (from.has_int_value()) {
      set_int_value(from.int_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GobalValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GobalValue::CopyFrom(const GobalValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GobalValue::IsInitialized() const {

  return true;
}

void GobalValue::Swap(GobalValue* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(type_, other->type_);
    std::swap(i64_value_, other->i64_value_);
    std::swap(str_value_, other->str_value_);
    std::swap(int_value_, other->int_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GobalValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GobalValue_descriptor_;
  metadata.reflection = GobalValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerGobalValue::kValuesFieldNumber;
#endif  // !_MSC_VER

ServerGobalValue::ServerGobalValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerGobalValue::InitAsDefaultInstance() {
}

ServerGobalValue::ServerGobalValue(const ServerGobalValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerGobalValue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerGobalValue::~ServerGobalValue() {
  SharedDtor();
}

void ServerGobalValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerGobalValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGobalValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerGobalValue_descriptor_;
}

const ServerGobalValue& ServerGobalValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

ServerGobalValue* ServerGobalValue::default_instance_ = NULL;

ServerGobalValue* ServerGobalValue::New() const {
  return new ServerGobalValue;
}

void ServerGobalValue::Clear() {
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerGobalValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GobalValue values = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerGobalValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GobalValue values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerGobalValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GobalValue values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerGobalValue::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GobalValue values = 1;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGobalValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerGobalValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerGobalValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerGobalValue::MergeFrom(const ServerGobalValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerGobalValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGobalValue::CopyFrom(const ServerGobalValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGobalValue::IsInitialized() const {

  return true;
}

void ServerGobalValue::Swap(ServerGobalValue* other) {
  if (other != this) {
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerGobalValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerGobalValue_descriptor_;
  metadata.reflection = ServerGobalValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadcastHeader::kTypeFieldNumber;
#endif  // !_MSC_VER

BroadcastHeader::BroadcastHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BroadcastHeader::InitAsDefaultInstance() {
}

BroadcastHeader::BroadcastHeader(const BroadcastHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BroadcastHeader::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadcastHeader::~BroadcastHeader() {
  SharedDtor();
}

void BroadcastHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BroadcastHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadcastHeader_descriptor_;
}

const BroadcastHeader& BroadcastHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

BroadcastHeader* BroadcastHeader::default_instance_ = NULL;

BroadcastHeader* BroadcastHeader::New() const {
  return new BroadcastHeader;
}

void BroadcastHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadcastHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.BROADCAST_TYPE type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::BROADCAST_TYPE_IsValid(value)) {
            set_type(static_cast< ::pb::BROADCAST_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BroadcastHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.BROADCAST_TYPE type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BroadcastHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.BROADCAST_TYPE type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BroadcastHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.BROADCAST_TYPE type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadcastHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadcastHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadcastHeader::MergeFrom(const BroadcastHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadcastHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastHeader::CopyFrom(const BroadcastHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BroadcastHeader::Swap(BroadcastHeader* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadcastHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadcastHeader_descriptor_;
  metadata.reflection = BroadcastHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SW2C2L_UpdateServerInfo::kRegionIdFieldNumber;
const int SW2C2L_UpdateServerInfo::kServerIdFieldNumber;
#endif  // !_MSC_VER

SW2C2L_UpdateServerInfo::SW2C2L_UpdateServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SW2C2L_UpdateServerInfo::InitAsDefaultInstance() {
}

SW2C2L_UpdateServerInfo::SW2C2L_UpdateServerInfo(const SW2C2L_UpdateServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SW2C2L_UpdateServerInfo::SharedCtor() {
  _cached_size_ = 0;
  region_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SW2C2L_UpdateServerInfo::~SW2C2L_UpdateServerInfo() {
  SharedDtor();
}

void SW2C2L_UpdateServerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SW2C2L_UpdateServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SW2C2L_UpdateServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SW2C2L_UpdateServerInfo_descriptor_;
}

const SW2C2L_UpdateServerInfo& SW2C2L_UpdateServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SW2C2L_UpdateServerInfo* SW2C2L_UpdateServerInfo::default_instance_ = NULL;

SW2C2L_UpdateServerInfo* SW2C2L_UpdateServerInfo::New() const {
  return new SW2C2L_UpdateServerInfo;
}

void SW2C2L_UpdateServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    region_id_ = 0;
  }
  server_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SW2C2L_UpdateServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 region_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }

      // repeated int32 server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_server_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_server_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SW2C2L_UpdateServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 region_id = 1;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->region_id(), output);
  }

  // repeated int32 server_id = 2;
  for (int i = 0; i < this->server_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->server_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SW2C2L_UpdateServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 region_id = 1;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->region_id(), target);
  }

  // repeated int32 server_id = 2;
  for (int i = 0; i < this->server_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->server_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SW2C2L_UpdateServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 region_id = 1;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region_id());
    }

  }
  // repeated int32 server_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->server_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->server_id(i));
    }
    total_size += 1 * this->server_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SW2C2L_UpdateServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SW2C2L_UpdateServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SW2C2L_UpdateServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SW2C2L_UpdateServerInfo::MergeFrom(const SW2C2L_UpdateServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  server_id_.MergeFrom(from.server_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SW2C2L_UpdateServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SW2C2L_UpdateServerInfo::CopyFrom(const SW2C2L_UpdateServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SW2C2L_UpdateServerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SW2C2L_UpdateServerInfo::Swap(SW2C2L_UpdateServerInfo* other) {
  if (other != this) {
    std::swap(region_id_, other->region_id_);
    server_id_.Swap(&other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SW2C2L_UpdateServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SW2C2L_UpdateServerInfo_descriptor_;
  metadata.reflection = SW2C2L_UpdateServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2C2L_UpdatePerformanceInfo::kRegionIdFieldNumber;
const int SG2C2L_UpdatePerformanceInfo::kServerIdFieldNumber;
const int SG2C2L_UpdatePerformanceInfo::kPlayerCountFieldNumber;
const int SG2C2L_UpdatePerformanceInfo::kLogicalUpdateMsFieldNumber;
#endif  // !_MSC_VER

SG2C2L_UpdatePerformanceInfo::SG2C2L_UpdatePerformanceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2C2L_UpdatePerformanceInfo::InitAsDefaultInstance() {
}

SG2C2L_UpdatePerformanceInfo::SG2C2L_UpdatePerformanceInfo(const SG2C2L_UpdatePerformanceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2C2L_UpdatePerformanceInfo::SharedCtor() {
  _cached_size_ = 0;
  region_id_ = 0;
  server_id_ = 0;
  player_count_ = 0;
  logical_update_ms_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2C2L_UpdatePerformanceInfo::~SG2C2L_UpdatePerformanceInfo() {
  SharedDtor();
}

void SG2C2L_UpdatePerformanceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SG2C2L_UpdatePerformanceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2C2L_UpdatePerformanceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2C2L_UpdatePerformanceInfo_descriptor_;
}

const SG2C2L_UpdatePerformanceInfo& SG2C2L_UpdatePerformanceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2C2L_UpdatePerformanceInfo* SG2C2L_UpdatePerformanceInfo::default_instance_ = NULL;

SG2C2L_UpdatePerformanceInfo* SG2C2L_UpdatePerformanceInfo::New() const {
  return new SG2C2L_UpdatePerformanceInfo;
}

void SG2C2L_UpdatePerformanceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    region_id_ = 0;
    server_id_ = 0;
    player_count_ = 0;
    logical_update_ms_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2C2L_UpdatePerformanceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 region_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }

      // required int32 server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_count;
        break;
      }

      // required int32 player_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_count_)));
          set_has_player_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_logical_update_ms;
        break;
      }

      // required uint64 logical_update_ms = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logical_update_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logical_update_ms_)));
          set_has_logical_update_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2C2L_UpdatePerformanceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 region_id = 1;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->region_id(), output);
  }

  // required int32 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->server_id(), output);
  }

  // required int32 player_count = 3;
  if (has_player_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_count(), output);
  }

  // required uint64 logical_update_ms = 4;
  if (has_logical_update_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->logical_update_ms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2C2L_UpdatePerformanceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 region_id = 1;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->region_id(), target);
  }

  // required int32 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->server_id(), target);
  }

  // required int32 player_count = 3;
  if (has_player_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_count(), target);
  }

  // required uint64 logical_update_ms = 4;
  if (has_logical_update_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->logical_update_ms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2C2L_UpdatePerformanceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 region_id = 1;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region_id());
    }

    // required int32 server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }

    // required int32 player_count = 3;
    if (has_player_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_count());
    }

    // required uint64 logical_update_ms = 4;
    if (has_logical_update_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logical_update_ms());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2C2L_UpdatePerformanceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2C2L_UpdatePerformanceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2C2L_UpdatePerformanceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2C2L_UpdatePerformanceInfo::MergeFrom(const SG2C2L_UpdatePerformanceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_player_count()) {
      set_player_count(from.player_count());
    }
    if (from.has_logical_update_ms()) {
      set_logical_update_ms(from.logical_update_ms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2C2L_UpdatePerformanceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2C2L_UpdatePerformanceInfo::CopyFrom(const SG2C2L_UpdatePerformanceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2C2L_UpdatePerformanceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SG2C2L_UpdatePerformanceInfo::Swap(SG2C2L_UpdatePerformanceInfo* other) {
  if (other != this) {
    std::swap(region_id_, other->region_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(player_count_, other->player_count_);
    std::swap(logical_update_ms_, other->logical_update_ms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2C2L_UpdatePerformanceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2C2L_UpdatePerformanceInfo_descriptor_;
  metadata.reflection = SG2C2L_UpdatePerformanceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2D_Broadcast_Info::kOpcodeFieldNumber;
const int SG2D_Broadcast_Info::kIsIncludeFieldNumber;
const int SG2D_Broadcast_Info::kPlayerIdsFieldNumber;
const int SG2D_Broadcast_Info::kPlayerNamesFieldNumber;
const int SG2D_Broadcast_Info::kResultFieldNumber;
#endif  // !_MSC_VER

SG2D_Broadcast_Info::SG2D_Broadcast_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2D_Broadcast_Info::InitAsDefaultInstance() {
}

SG2D_Broadcast_Info::SG2D_Broadcast_Info(const SG2D_Broadcast_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2D_Broadcast_Info::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  is_include_ = false;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2D_Broadcast_Info::~SG2D_Broadcast_Info() {
  SharedDtor();
}

void SG2D_Broadcast_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SG2D_Broadcast_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2D_Broadcast_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2D_Broadcast_Info_descriptor_;
}

const SG2D_Broadcast_Info& SG2D_Broadcast_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2D_Broadcast_Info* SG2D_Broadcast_Info::default_instance_ = NULL;

SG2D_Broadcast_Info* SG2D_Broadcast_Info::New() const {
  return new SG2D_Broadcast_Info;
}

void SG2D_Broadcast_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    is_include_ = false;
    result_ = false;
  }
  player_ids_.Clear();
  player_names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2D_Broadcast_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_include;
        break;
      }

      // required bool is_include = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_include:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_include_)));
          set_has_is_include();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_ids;
        break;
      }

      // repeated uint64 player_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_player_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_player_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_ids;
        if (input->ExpectTag(34)) goto parse_player_names;
        break;
      }

      // repeated string player_names = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_player_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_names(this->player_names_size() - 1).data(),
            this->player_names(this->player_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player_names;
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional bool result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2D_Broadcast_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bool is_include = 2;
  if (has_is_include()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_include(), output);
  }

  // repeated uint64 player_ids = 3;
  for (int i = 0; i < this->player_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->player_ids(i), output);
  }

  // repeated string player_names = 4;
  for (int i = 0; i < this->player_names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->player_names(i).data(), this->player_names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->player_names(i), output);
  }

  // optional bool result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2D_Broadcast_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bool is_include = 2;
  if (has_is_include()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_include(), target);
  }

  // repeated uint64 player_ids = 3;
  for (int i = 0; i < this->player_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->player_ids(i), target);
  }

  // repeated string player_names = 4;
  for (int i = 0; i < this->player_names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_names(i).data(), this->player_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->player_names(i), target);
  }

  // optional bool result = 5;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2D_Broadcast_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bool is_include = 2;
    if (has_is_include()) {
      total_size += 1 + 1;
    }

    // optional bool result = 5;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint64 player_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->player_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->player_ids(i));
    }
    total_size += 1 * this->player_ids_size() + data_size;
  }

  // repeated string player_names = 4;
  total_size += 1 * this->player_names_size();
  for (int i = 0; i < this->player_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->player_names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2D_Broadcast_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2D_Broadcast_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2D_Broadcast_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2D_Broadcast_Info::MergeFrom(const SG2D_Broadcast_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_ids_.MergeFrom(from.player_ids_);
  player_names_.MergeFrom(from.player_names_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_is_include()) {
      set_is_include(from.is_include());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2D_Broadcast_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2D_Broadcast_Info::CopyFrom(const SG2D_Broadcast_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2D_Broadcast_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SG2D_Broadcast_Info::Swap(SG2D_Broadcast_Info* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(is_include_, other->is_include_);
    player_ids_.Swap(&other->player_ids_);
    player_names_.Swap(&other->player_names_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2D_Broadcast_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2D_Broadcast_Info_descriptor_;
  metadata.reflection = SG2D_Broadcast_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2G_Mail_SendMail::kToPlayersFieldNumber;
const int SG2G_Mail_SendMail::kMailIdFieldNumber;
const int SG2G_Mail_SendMail::kPlatFormFieldNumber;
const int SG2G_Mail_SendMail::kChannelFieldNumber;
const int SG2G_Mail_SendMail::kMailTypeFieldNumber;
const int SG2G_Mail_SendMail::kSendTypeFieldNumber;
const int SG2G_Mail_SendMail::kBeginTimeFieldNumber;
const int SG2G_Mail_SendMail::kEndTimeFieldNumber;
const int SG2G_Mail_SendMail::kTitleFieldNumber;
const int SG2G_Mail_SendMail::kContentFieldNumber;
const int SG2G_Mail_SendMail::kItemsFieldNumber;
#endif  // !_MSC_VER

SG2G_Mail_SendMail::SG2G_Mail_SendMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2G_Mail_SendMail::InitAsDefaultInstance() {
}

SG2G_Mail_SendMail::SG2G_Mail_SendMail(const SG2G_Mail_SendMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2G_Mail_SendMail::SharedCtor() {
  _cached_size_ = 0;
  mail_id_ = GOOGLE_ULONGLONG(0);
  plat_form_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mail_type_ = 0;
  send_type_ = 0;
  begin_time_ = GOOGLE_ULONGLONG(0);
  end_time_ = GOOGLE_ULONGLONG(0);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  items_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2G_Mail_SendMail::~SG2G_Mail_SendMail() {
  SharedDtor();
}

void SG2G_Mail_SendMail::SharedDtor() {
  if (plat_form_ != &::google::protobuf::internal::kEmptyString) {
    delete plat_form_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (items_ != &::google::protobuf::internal::kEmptyString) {
    delete items_;
  }
  if (this != default_instance_) {
  }
}

void SG2G_Mail_SendMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2G_Mail_SendMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2G_Mail_SendMail_descriptor_;
}

const SG2G_Mail_SendMail& SG2G_Mail_SendMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2G_Mail_SendMail* SG2G_Mail_SendMail::default_instance_ = NULL;

SG2G_Mail_SendMail* SG2G_Mail_SendMail::New() const {
  return new SG2G_Mail_SendMail;
}

void SG2G_Mail_SendMail::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    mail_id_ = GOOGLE_ULONGLONG(0);
    if (has_plat_form()) {
      if (plat_form_ != &::google::protobuf::internal::kEmptyString) {
        plat_form_->clear();
      }
    }
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
    mail_type_ = 0;
    send_type_ = 0;
    begin_time_ = GOOGLE_ULONGLONG(0);
    end_time_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_items()) {
      if (items_ != &::google::protobuf::internal::kEmptyString) {
        items_->clear();
      }
    }
  }
  to_players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2G_Mail_SendMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 to_players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_to_players())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_to_players())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_to_players;
        if (input->ExpectTag(16)) goto parse_mail_id;
        break;
      }

      // optional uint64 mail_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_plat_form;
        break;
      }

      // optional string plat_form = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plat_form:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plat_form()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->plat_form().data(), this->plat_form().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_channel;
        break;
      }

      // optional string channel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mail_type;
        break;
      }

      // optional int32 mail_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_type_)));
          set_has_mail_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_send_type;
        break;
      }

      // optional int32 send_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_type_)));
          set_has_send_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_begin_time;
        break;
      }

      // optional uint64 begin_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_end_time;
        break;
      }

      // optional uint64 end_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_title;
        break;
      }

      // optional string title = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_content;
        break;
      }

      // optional string content = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_items;
        break;
      }

      // optional string items = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_items()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->items().data(), this->items().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2G_Mail_SendMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 to_players = 1;
  for (int i = 0; i < this->to_players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->to_players(i), output);
  }

  // optional uint64 mail_id = 2;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mail_id(), output);
  }

  // optional string plat_form = 3;
  if (has_plat_form()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->plat_form().data(), this->plat_form().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->plat_form(), output);
  }

  // optional string channel = 4;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->channel(), output);
  }

  // optional int32 mail_type = 5;
  if (has_mail_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mail_type(), output);
  }

  // optional int32 send_type = 6;
  if (has_send_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->send_type(), output);
  }

  // optional uint64 begin_time = 7;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->begin_time(), output);
  }

  // optional uint64 end_time = 8;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->end_time(), output);
  }

  // optional string title = 9;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->title(), output);
  }

  // optional string content = 10;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->content(), output);
  }

  // optional string items = 11;
  if (has_items()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->items().data(), this->items().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->items(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2G_Mail_SendMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 to_players = 1;
  for (int i = 0; i < this->to_players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->to_players(i), target);
  }

  // optional uint64 mail_id = 2;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mail_id(), target);
  }

  // optional string plat_form = 3;
  if (has_plat_form()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->plat_form().data(), this->plat_form().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->plat_form(), target);
  }

  // optional string channel = 4;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->channel(), target);
  }

  // optional int32 mail_type = 5;
  if (has_mail_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mail_type(), target);
  }

  // optional int32 send_type = 6;
  if (has_send_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->send_type(), target);
  }

  // optional uint64 begin_time = 7;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->begin_time(), target);
  }

  // optional uint64 end_time = 8;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->end_time(), target);
  }

  // optional string title = 9;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->title(), target);
  }

  // optional string content = 10;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->content(), target);
  }

  // optional string items = 11;
  if (has_items()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->items().data(), this->items().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->items(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2G_Mail_SendMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 mail_id = 2;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mail_id());
    }

    // optional string plat_form = 3;
    if (has_plat_form()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plat_form());
    }

    // optional string channel = 4;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

    // optional int32 mail_type = 5;
    if (has_mail_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail_type());
    }

    // optional int32 send_type = 6;
    if (has_send_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->send_type());
    }

    // optional uint64 begin_time = 7;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begin_time());
    }

    // optional uint64 end_time = 8;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string title = 9;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string content = 10;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string items = 11;
    if (has_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->items());
    }

  }
  // repeated uint64 to_players = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->to_players_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->to_players(i));
    }
    total_size += 1 * this->to_players_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2G_Mail_SendMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2G_Mail_SendMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2G_Mail_SendMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2G_Mail_SendMail::MergeFrom(const SG2G_Mail_SendMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  to_players_.MergeFrom(from.to_players_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_plat_form()) {
      set_plat_form(from.plat_form());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_mail_type()) {
      set_mail_type(from.mail_type());
    }
    if (from.has_send_type()) {
      set_send_type(from.send_type());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_items()) {
      set_items(from.items());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2G_Mail_SendMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2G_Mail_SendMail::CopyFrom(const SG2G_Mail_SendMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2G_Mail_SendMail::IsInitialized() const {

  return true;
}

void SG2G_Mail_SendMail::Swap(SG2G_Mail_SendMail* other) {
  if (other != this) {
    to_players_.Swap(&other->to_players_);
    std::swap(mail_id_, other->mail_id_);
    std::swap(plat_form_, other->plat_form_);
    std::swap(channel_, other->channel_);
    std::swap(mail_type_, other->mail_type_);
    std::swap(send_type_, other->send_type_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(items_, other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2G_Mail_SendMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2G_Mail_SendMail_descriptor_;
  metadata.reflection = SG2G_Mail_SendMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2D_MailInfoData::kPlayerIdFieldNumber;
const int SG2D_MailInfoData::kIdFieldNumber;
const int SG2D_MailInfoData::kMailTypeFieldNumber;
const int SG2D_MailInfoData::kMailIdFieldNumber;
const int SG2D_MailInfoData::kMailStateFieldNumber;
const int SG2D_MailInfoData::kSendTimeFieldNumber;
const int SG2D_MailInfoData::kIsTakeFieldNumber;
const int SG2D_MailInfoData::kItemsFieldNumber;
#endif  // !_MSC_VER

SG2D_MailInfoData::SG2D_MailInfoData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2D_MailInfoData::InitAsDefaultInstance() {
}

SG2D_MailInfoData::SG2D_MailInfoData(const SG2D_MailInfoData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2D_MailInfoData::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  id_ = GOOGLE_ULONGLONG(0);
  mail_type_ = 0;
  mail_id_ = GOOGLE_ULONGLONG(0);
  mail_state_ = 0;
  send_time_ = GOOGLE_ULONGLONG(0);
  is_take_ = false;
  items_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2D_MailInfoData::~SG2D_MailInfoData() {
  SharedDtor();
}

void SG2D_MailInfoData::SharedDtor() {
  if (items_ != &::google::protobuf::internal::kEmptyString) {
    delete items_;
  }
  if (this != default_instance_) {
  }
}

void SG2D_MailInfoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2D_MailInfoData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2D_MailInfoData_descriptor_;
}

const SG2D_MailInfoData& SG2D_MailInfoData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2D_MailInfoData* SG2D_MailInfoData::default_instance_ = NULL;

SG2D_MailInfoData* SG2D_MailInfoData::New() const {
  return new SG2D_MailInfoData;
}

void SG2D_MailInfoData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    id_ = GOOGLE_ULONGLONG(0);
    mail_type_ = 0;
    mail_id_ = GOOGLE_ULONGLONG(0);
    mail_state_ = 0;
    send_time_ = GOOGLE_ULONGLONG(0);
    is_take_ = false;
    if (has_items()) {
      if (items_ != &::google::protobuf::internal::kEmptyString) {
        items_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2D_MailInfoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mail_type;
        break;
      }

      // required int32 mail_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_type_)));
          set_has_mail_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mail_id;
        break;
      }

      // optional uint64 mail_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mail_state;
        break;
      }

      // required int32 mail_state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_state_)));
          set_has_mail_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_send_time;
        break;
      }

      // optional uint64 send_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &send_time_)));
          set_has_send_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_take;
        break;
      }

      // optional bool is_take = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_take:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_take_)));
          set_has_is_take();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_items;
        break;
      }

      // optional string items = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_items()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->items().data(), this->items().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2D_MailInfoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // required uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // required int32 mail_type = 3;
  if (has_mail_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mail_type(), output);
  }

  // optional uint64 mail_id = 4;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->mail_id(), output);
  }

  // required int32 mail_state = 5;
  if (has_mail_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mail_state(), output);
  }

  // optional uint64 send_time = 6;
  if (has_send_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->send_time(), output);
  }

  // optional bool is_take = 7;
  if (has_is_take()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_take(), output);
  }

  // optional string items = 8;
  if (has_items()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->items().data(), this->items().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->items(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2D_MailInfoData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // required uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // required int32 mail_type = 3;
  if (has_mail_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mail_type(), target);
  }

  // optional uint64 mail_id = 4;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->mail_id(), target);
  }

  // required int32 mail_state = 5;
  if (has_mail_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mail_state(), target);
  }

  // optional uint64 send_time = 6;
  if (has_send_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->send_time(), target);
  }

  // optional bool is_take = 7;
  if (has_is_take()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_take(), target);
  }

  // optional string items = 8;
  if (has_items()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->items().data(), this->items().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->items(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2D_MailInfoData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // required uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // required int32 mail_type = 3;
    if (has_mail_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail_type());
    }

    // optional uint64 mail_id = 4;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mail_id());
    }

    // required int32 mail_state = 5;
    if (has_mail_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail_state());
    }

    // optional uint64 send_time = 6;
    if (has_send_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->send_time());
    }

    // optional bool is_take = 7;
    if (has_is_take()) {
      total_size += 1 + 1;
    }

    // optional string items = 8;
    if (has_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->items());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2D_MailInfoData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2D_MailInfoData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2D_MailInfoData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2D_MailInfoData::MergeFrom(const SG2D_MailInfoData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mail_type()) {
      set_mail_type(from.mail_type());
    }
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_mail_state()) {
      set_mail_state(from.mail_state());
    }
    if (from.has_send_time()) {
      set_send_time(from.send_time());
    }
    if (from.has_is_take()) {
      set_is_take(from.is_take());
    }
    if (from.has_items()) {
      set_items(from.items());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2D_MailInfoData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2D_MailInfoData::CopyFrom(const SG2D_MailInfoData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2D_MailInfoData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  return true;
}

void SG2D_MailInfoData::Swap(SG2D_MailInfoData* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(id_, other->id_);
    std::swap(mail_type_, other->mail_type_);
    std::swap(mail_id_, other->mail_id_);
    std::swap(mail_state_, other->mail_state_);
    std::swap(send_time_, other->send_time_);
    std::swap(is_take_, other->is_take_);
    std::swap(items_, other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2D_MailInfoData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2D_MailInfoData_descriptor_;
  metadata.reflection = SG2D_MailInfoData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2D_MailsOperate::kOperateTypeFieldNumber;
const int SG2D_MailsOperate::kMailInfoDataFieldNumber;
#endif  // !_MSC_VER

SG2D_MailsOperate::SG2D_MailsOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2D_MailsOperate::InitAsDefaultInstance() {
}

SG2D_MailsOperate::SG2D_MailsOperate(const SG2D_MailsOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2D_MailsOperate::SharedCtor() {
  _cached_size_ = 0;
  operate_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2D_MailsOperate::~SG2D_MailsOperate() {
  SharedDtor();
}

void SG2D_MailsOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SG2D_MailsOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2D_MailsOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2D_MailsOperate_descriptor_;
}

const SG2D_MailsOperate& SG2D_MailsOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2D_MailsOperate* SG2D_MailsOperate::default_instance_ = NULL;

SG2D_MailsOperate* SG2D_MailsOperate::New() const {
  return new SG2D_MailsOperate;
}

void SG2D_MailsOperate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    operate_type_ = 0;
  }
  mail_info_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2D_MailsOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 operate_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_type_)));
          set_has_operate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mail_info_data;
        break;
      }

      // repeated .pb.SG2D_MailInfoData mail_info_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_info_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mail_info_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mail_info_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2D_MailsOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 operate_type = 1;
  if (has_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate_type(), output);
  }

  // repeated .pb.SG2D_MailInfoData mail_info_data = 2;
  for (int i = 0; i < this->mail_info_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mail_info_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2D_MailsOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 operate_type = 1;
  if (has_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate_type(), target);
  }

  // repeated .pb.SG2D_MailInfoData mail_info_data = 2;
  for (int i = 0; i < this->mail_info_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mail_info_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2D_MailsOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 operate_type = 1;
    if (has_operate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate_type());
    }

  }
  // repeated .pb.SG2D_MailInfoData mail_info_data = 2;
  total_size += 1 * this->mail_info_data_size();
  for (int i = 0; i < this->mail_info_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mail_info_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2D_MailsOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2D_MailsOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2D_MailsOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2D_MailsOperate::MergeFrom(const SG2D_MailsOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_info_data_.MergeFrom(from.mail_info_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate_type()) {
      set_operate_type(from.operate_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2D_MailsOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2D_MailsOperate::CopyFrom(const SG2D_MailsOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2D_MailsOperate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < mail_info_data_size(); i++) {
    if (!this->mail_info_data(i).IsInitialized()) return false;
  }
  return true;
}

void SG2D_MailsOperate::Swap(SG2D_MailsOperate* other) {
  if (other != this) {
    std::swap(operate_type_, other->operate_type_);
    mail_info_data_.Swap(&other->mail_info_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2D_MailsOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2D_MailsOperate_descriptor_;
  metadata.reflection = SG2D_MailsOperate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2D_Check_Mail_Recivers_Exist::kMailFieldNumber;
const int SG2D_Check_Mail_Recivers_Exist::kAlvFieldNumber;
const int SG2D_Check_Mail_Recivers_Exist::kBlvFieldNumber;
const int SG2D_Check_Mail_Recivers_Exist::kAvipFieldNumber;
const int SG2D_Check_Mail_Recivers_Exist::kBvipFieldNumber;
const int SG2D_Check_Mail_Recivers_Exist::kIsServerMailFieldNumber;
#endif  // !_MSC_VER

SG2D_Check_Mail_Recivers_Exist::SG2D_Check_Mail_Recivers_Exist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2D_Check_Mail_Recivers_Exist::InitAsDefaultInstance() {
  mail_ = const_cast< ::pb::SG2G_Mail_SendMail*>(&::pb::SG2G_Mail_SendMail::default_instance());
}

SG2D_Check_Mail_Recivers_Exist::SG2D_Check_Mail_Recivers_Exist(const SG2D_Check_Mail_Recivers_Exist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2D_Check_Mail_Recivers_Exist::SharedCtor() {
  _cached_size_ = 0;
  mail_ = NULL;
  alv_ = 0;
  blv_ = 0;
  avip_ = 0;
  bvip_ = 0;
  is_server_mail_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2D_Check_Mail_Recivers_Exist::~SG2D_Check_Mail_Recivers_Exist() {
  SharedDtor();
}

void SG2D_Check_Mail_Recivers_Exist::SharedDtor() {
  if (this != default_instance_) {
    delete mail_;
  }
}

void SG2D_Check_Mail_Recivers_Exist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2D_Check_Mail_Recivers_Exist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2D_Check_Mail_Recivers_Exist_descriptor_;
}

const SG2D_Check_Mail_Recivers_Exist& SG2D_Check_Mail_Recivers_Exist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2D_Check_Mail_Recivers_Exist* SG2D_Check_Mail_Recivers_Exist::default_instance_ = NULL;

SG2D_Check_Mail_Recivers_Exist* SG2D_Check_Mail_Recivers_Exist::New() const {
  return new SG2D_Check_Mail_Recivers_Exist;
}

void SG2D_Check_Mail_Recivers_Exist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mail()) {
      if (mail_ != NULL) mail_->::pb::SG2G_Mail_SendMail::Clear();
    }
    alv_ = 0;
    blv_ = 0;
    avip_ = 0;
    bvip_ = 0;
    is_server_mail_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2D_Check_Mail_Recivers_Exist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.SG2G_Mail_SendMail mail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_alv;
        break;
      }

      // optional int32 alv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alv_)));
          set_has_alv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_blv;
        break;
      }

      // optional int32 blv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blv_)));
          set_has_blv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_avip;
        break;
      }

      // optional int32 avip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avip_)));
          set_has_avip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bvip;
        break;
      }

      // optional int32 bvip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bvip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bvip_)));
          set_has_bvip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_server_mail;
        break;
      }

      // optional bool is_server_mail = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_server_mail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_server_mail_)));
          set_has_is_server_mail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2D_Check_Mail_Recivers_Exist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.SG2G_Mail_SendMail mail = 1;
  if (has_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mail(), output);
  }

  // optional int32 alv = 2;
  if (has_alv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->alv(), output);
  }

  // optional int32 blv = 3;
  if (has_blv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->blv(), output);
  }

  // optional int32 avip = 4;
  if (has_avip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->avip(), output);
  }

  // optional int32 bvip = 5;
  if (has_bvip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bvip(), output);
  }

  // optional bool is_server_mail = 6;
  if (has_is_server_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_server_mail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2D_Check_Mail_Recivers_Exist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.SG2G_Mail_SendMail mail = 1;
  if (has_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mail(), target);
  }

  // optional int32 alv = 2;
  if (has_alv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->alv(), target);
  }

  // optional int32 blv = 3;
  if (has_blv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->blv(), target);
  }

  // optional int32 avip = 4;
  if (has_avip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->avip(), target);
  }

  // optional int32 bvip = 5;
  if (has_bvip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bvip(), target);
  }

  // optional bool is_server_mail = 6;
  if (has_is_server_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_server_mail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2D_Check_Mail_Recivers_Exist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.SG2G_Mail_SendMail mail = 1;
    if (has_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mail());
    }

    // optional int32 alv = 2;
    if (has_alv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alv());
    }

    // optional int32 blv = 3;
    if (has_blv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blv());
    }

    // optional int32 avip = 4;
    if (has_avip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avip());
    }

    // optional int32 bvip = 5;
    if (has_bvip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bvip());
    }

    // optional bool is_server_mail = 6;
    if (has_is_server_mail()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2D_Check_Mail_Recivers_Exist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2D_Check_Mail_Recivers_Exist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2D_Check_Mail_Recivers_Exist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2D_Check_Mail_Recivers_Exist::MergeFrom(const SG2D_Check_Mail_Recivers_Exist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail()) {
      mutable_mail()->::pb::SG2G_Mail_SendMail::MergeFrom(from.mail());
    }
    if (from.has_alv()) {
      set_alv(from.alv());
    }
    if (from.has_blv()) {
      set_blv(from.blv());
    }
    if (from.has_avip()) {
      set_avip(from.avip());
    }
    if (from.has_bvip()) {
      set_bvip(from.bvip());
    }
    if (from.has_is_server_mail()) {
      set_is_server_mail(from.is_server_mail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2D_Check_Mail_Recivers_Exist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2D_Check_Mail_Recivers_Exist::CopyFrom(const SG2D_Check_Mail_Recivers_Exist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2D_Check_Mail_Recivers_Exist::IsInitialized() const {

  return true;
}

void SG2D_Check_Mail_Recivers_Exist::Swap(SG2D_Check_Mail_Recivers_Exist* other) {
  if (other != this) {
    std::swap(mail_, other->mail_);
    std::swap(alv_, other->alv_);
    std::swap(blv_, other->blv_);
    std::swap(avip_, other->avip_);
    std::swap(bvip_, other->bvip_);
    std::swap(is_server_mail_, other->is_server_mail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2D_Check_Mail_Recivers_Exist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2D_Check_Mail_Recivers_Exist_descriptor_;
  metadata.reflection = SG2D_Check_Mail_Recivers_Exist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SD2G_Check_Mail_Recivers_Exist_Rspone::kMailFieldNumber;
const int SD2G_Check_Mail_Recivers_Exist_Rspone::kIsCanSendFieldNumber;
const int SD2G_Check_Mail_Recivers_Exist_Rspone::kAlvFieldNumber;
const int SD2G_Check_Mail_Recivers_Exist_Rspone::kBlvFieldNumber;
const int SD2G_Check_Mail_Recivers_Exist_Rspone::kAvipFieldNumber;
const int SD2G_Check_Mail_Recivers_Exist_Rspone::kBvipFieldNumber;
const int SD2G_Check_Mail_Recivers_Exist_Rspone::kIsServerMailFieldNumber;
#endif  // !_MSC_VER

SD2G_Check_Mail_Recivers_Exist_Rspone::SD2G_Check_Mail_Recivers_Exist_Rspone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SD2G_Check_Mail_Recivers_Exist_Rspone::InitAsDefaultInstance() {
  mail_ = const_cast< ::pb::SG2G_Mail_SendMail*>(&::pb::SG2G_Mail_SendMail::default_instance());
}

SD2G_Check_Mail_Recivers_Exist_Rspone::SD2G_Check_Mail_Recivers_Exist_Rspone(const SD2G_Check_Mail_Recivers_Exist_Rspone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SD2G_Check_Mail_Recivers_Exist_Rspone::SharedCtor() {
  _cached_size_ = 0;
  mail_ = NULL;
  is_can_send_ = false;
  alv_ = 0;
  blv_ = 0;
  avip_ = 0;
  bvip_ = 0;
  is_server_mail_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SD2G_Check_Mail_Recivers_Exist_Rspone::~SD2G_Check_Mail_Recivers_Exist_Rspone() {
  SharedDtor();
}

void SD2G_Check_Mail_Recivers_Exist_Rspone::SharedDtor() {
  if (this != default_instance_) {
    delete mail_;
  }
}

void SD2G_Check_Mail_Recivers_Exist_Rspone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SD2G_Check_Mail_Recivers_Exist_Rspone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SD2G_Check_Mail_Recivers_Exist_Rspone_descriptor_;
}

const SD2G_Check_Mail_Recivers_Exist_Rspone& SD2G_Check_Mail_Recivers_Exist_Rspone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SD2G_Check_Mail_Recivers_Exist_Rspone* SD2G_Check_Mail_Recivers_Exist_Rspone::default_instance_ = NULL;

SD2G_Check_Mail_Recivers_Exist_Rspone* SD2G_Check_Mail_Recivers_Exist_Rspone::New() const {
  return new SD2G_Check_Mail_Recivers_Exist_Rspone;
}

void SD2G_Check_Mail_Recivers_Exist_Rspone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mail()) {
      if (mail_ != NULL) mail_->::pb::SG2G_Mail_SendMail::Clear();
    }
    is_can_send_ = false;
    alv_ = 0;
    blv_ = 0;
    avip_ = 0;
    bvip_ = 0;
    is_server_mail_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SD2G_Check_Mail_Recivers_Exist_Rspone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.SG2G_Mail_SendMail mail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_can_send;
        break;
      }

      // optional bool is_can_send = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_can_send:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_can_send_)));
          set_has_is_can_send();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_alv;
        break;
      }

      // optional int32 alv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alv_)));
          set_has_alv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_blv;
        break;
      }

      // optional int32 blv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blv_)));
          set_has_blv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_avip;
        break;
      }

      // optional int32 avip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avip_)));
          set_has_avip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bvip;
        break;
      }

      // optional int32 bvip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bvip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bvip_)));
          set_has_bvip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_server_mail;
        break;
      }

      // optional bool is_server_mail = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_server_mail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_server_mail_)));
          set_has_is_server_mail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SD2G_Check_Mail_Recivers_Exist_Rspone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.SG2G_Mail_SendMail mail = 1;
  if (has_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mail(), output);
  }

  // optional bool is_can_send = 2;
  if (has_is_can_send()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_can_send(), output);
  }

  // optional int32 alv = 3;
  if (has_alv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->alv(), output);
  }

  // optional int32 blv = 4;
  if (has_blv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->blv(), output);
  }

  // optional int32 avip = 5;
  if (has_avip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->avip(), output);
  }

  // optional int32 bvip = 6;
  if (has_bvip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bvip(), output);
  }

  // optional bool is_server_mail = 7;
  if (has_is_server_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_server_mail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SD2G_Check_Mail_Recivers_Exist_Rspone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.SG2G_Mail_SendMail mail = 1;
  if (has_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mail(), target);
  }

  // optional bool is_can_send = 2;
  if (has_is_can_send()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_can_send(), target);
  }

  // optional int32 alv = 3;
  if (has_alv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->alv(), target);
  }

  // optional int32 blv = 4;
  if (has_blv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->blv(), target);
  }

  // optional int32 avip = 5;
  if (has_avip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->avip(), target);
  }

  // optional int32 bvip = 6;
  if (has_bvip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bvip(), target);
  }

  // optional bool is_server_mail = 7;
  if (has_is_server_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_server_mail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SD2G_Check_Mail_Recivers_Exist_Rspone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.SG2G_Mail_SendMail mail = 1;
    if (has_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mail());
    }

    // optional bool is_can_send = 2;
    if (has_is_can_send()) {
      total_size += 1 + 1;
    }

    // optional int32 alv = 3;
    if (has_alv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alv());
    }

    // optional int32 blv = 4;
    if (has_blv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blv());
    }

    // optional int32 avip = 5;
    if (has_avip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avip());
    }

    // optional int32 bvip = 6;
    if (has_bvip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bvip());
    }

    // optional bool is_server_mail = 7;
    if (has_is_server_mail()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SD2G_Check_Mail_Recivers_Exist_Rspone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SD2G_Check_Mail_Recivers_Exist_Rspone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SD2G_Check_Mail_Recivers_Exist_Rspone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SD2G_Check_Mail_Recivers_Exist_Rspone::MergeFrom(const SD2G_Check_Mail_Recivers_Exist_Rspone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail()) {
      mutable_mail()->::pb::SG2G_Mail_SendMail::MergeFrom(from.mail());
    }
    if (from.has_is_can_send()) {
      set_is_can_send(from.is_can_send());
    }
    if (from.has_alv()) {
      set_alv(from.alv());
    }
    if (from.has_blv()) {
      set_blv(from.blv());
    }
    if (from.has_avip()) {
      set_avip(from.avip());
    }
    if (from.has_bvip()) {
      set_bvip(from.bvip());
    }
    if (from.has_is_server_mail()) {
      set_is_server_mail(from.is_server_mail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SD2G_Check_Mail_Recivers_Exist_Rspone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SD2G_Check_Mail_Recivers_Exist_Rspone::CopyFrom(const SD2G_Check_Mail_Recivers_Exist_Rspone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SD2G_Check_Mail_Recivers_Exist_Rspone::IsInitialized() const {

  return true;
}

void SD2G_Check_Mail_Recivers_Exist_Rspone::Swap(SD2G_Check_Mail_Recivers_Exist_Rspone* other) {
  if (other != this) {
    std::swap(mail_, other->mail_);
    std::swap(is_can_send_, other->is_can_send_);
    std::swap(alv_, other->alv_);
    std::swap(blv_, other->blv_);
    std::swap(avip_, other->avip_);
    std::swap(bvip_, other->bvip_);
    std::swap(is_server_mail_, other->is_server_mail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SD2G_Check_Mail_Recivers_Exist_Rspone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SD2G_Check_Mail_Recivers_Exist_Rspone_descriptor_;
  metadata.reflection = SD2G_Check_Mail_Recivers_Exist_Rspone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2D_Friend_Operate::kPlayeridFieldNumber;
const int SG2D_Friend_Operate::kFriendidFieldNumber;
const int SG2D_Friend_Operate::kListtypeFieldNumber;
const int SG2D_Friend_Operate::kOperateTypeFieldNumber;
const int SG2D_Friend_Operate::kIsSendApFieldNumber;
const int SG2D_Friend_Operate::kApValueFieldNumber;
#endif  // !_MSC_VER

SG2D_Friend_Operate::SG2D_Friend_Operate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2D_Friend_Operate::InitAsDefaultInstance() {
}

SG2D_Friend_Operate::SG2D_Friend_Operate(const SG2D_Friend_Operate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2D_Friend_Operate::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  friendid_ = GOOGLE_ULONGLONG(0);
  listtype_ = 0;
  operate_type_ = 0;
  is_send_ap_ = false;
  ap_value_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2D_Friend_Operate::~SG2D_Friend_Operate() {
  SharedDtor();
}

void SG2D_Friend_Operate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SG2D_Friend_Operate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2D_Friend_Operate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2D_Friend_Operate_descriptor_;
}

const SG2D_Friend_Operate& SG2D_Friend_Operate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2D_Friend_Operate* SG2D_Friend_Operate::default_instance_ = NULL;

SG2D_Friend_Operate* SG2D_Friend_Operate::New() const {
  return new SG2D_Friend_Operate;
}

void SG2D_Friend_Operate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    friendid_ = GOOGLE_ULONGLONG(0);
    listtype_ = 0;
    operate_type_ = 0;
    is_send_ap_ = false;
    ap_value_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2D_Friend_Operate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_friendid;
        break;
      }

      // required uint64 friendid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friendid_)));
          set_has_friendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_listtype;
        break;
      }

      // required int32 listtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_listtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &listtype_)));
          set_has_listtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_operate_type;
        break;
      }

      // required int32 operate_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_type_)));
          set_has_operate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_send_ap;
        break;
      }

      // optional bool is_send_ap = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_send_ap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_send_ap_)));
          set_has_is_send_ap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ap_value;
        break;
      }

      // optional bool ap_value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ap_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ap_value_)));
          set_has_ap_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2D_Friend_Operate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // required uint64 friendid = 2;
  if (has_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->friendid(), output);
  }

  // required int32 listtype = 3;
  if (has_listtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->listtype(), output);
  }

  // required int32 operate_type = 4;
  if (has_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->operate_type(), output);
  }

  // optional bool is_send_ap = 5;
  if (has_is_send_ap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_send_ap(), output);
  }

  // optional bool ap_value = 6;
  if (has_ap_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->ap_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2D_Friend_Operate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // required uint64 friendid = 2;
  if (has_friendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->friendid(), target);
  }

  // required int32 listtype = 3;
  if (has_listtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->listtype(), target);
  }

  // required int32 operate_type = 4;
  if (has_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->operate_type(), target);
  }

  // optional bool is_send_ap = 5;
  if (has_is_send_ap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_send_ap(), target);
  }

  // optional bool ap_value = 6;
  if (has_ap_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->ap_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2D_Friend_Operate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // required uint64 friendid = 2;
    if (has_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friendid());
    }

    // required int32 listtype = 3;
    if (has_listtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->listtype());
    }

    // required int32 operate_type = 4;
    if (has_operate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate_type());
    }

    // optional bool is_send_ap = 5;
    if (has_is_send_ap()) {
      total_size += 1 + 1;
    }

    // optional bool ap_value = 6;
    if (has_ap_value()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2D_Friend_Operate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2D_Friend_Operate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2D_Friend_Operate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2D_Friend_Operate::MergeFrom(const SG2D_Friend_Operate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_friendid()) {
      set_friendid(from.friendid());
    }
    if (from.has_listtype()) {
      set_listtype(from.listtype());
    }
    if (from.has_operate_type()) {
      set_operate_type(from.operate_type());
    }
    if (from.has_is_send_ap()) {
      set_is_send_ap(from.is_send_ap());
    }
    if (from.has_ap_value()) {
      set_ap_value(from.ap_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2D_Friend_Operate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2D_Friend_Operate::CopyFrom(const SG2D_Friend_Operate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2D_Friend_Operate::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SG2D_Friend_Operate::Swap(SG2D_Friend_Operate* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(friendid_, other->friendid_);
    std::swap(listtype_, other->listtype_);
    std::swap(operate_type_, other->operate_type_);
    std::swap(is_send_ap_, other->is_send_ap_);
    std::swap(ap_value_, other->ap_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2D_Friend_Operate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2D_Friend_Operate_descriptor_;
  metadata.reflection = SG2D_Friend_Operate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SD2G_Friend_Operate_Res::kOperateFieldNumber;
const int SD2G_Friend_Operate_Res::kResultFieldNumber;
#endif  // !_MSC_VER

SD2G_Friend_Operate_Res::SD2G_Friend_Operate_Res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SD2G_Friend_Operate_Res::InitAsDefaultInstance() {
  operate_ = const_cast< ::pb::SG2D_Friend_Operate*>(&::pb::SG2D_Friend_Operate::default_instance());
}

SD2G_Friend_Operate_Res::SD2G_Friend_Operate_Res(const SD2G_Friend_Operate_Res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SD2G_Friend_Operate_Res::SharedCtor() {
  _cached_size_ = 0;
  operate_ = NULL;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SD2G_Friend_Operate_Res::~SD2G_Friend_Operate_Res() {
  SharedDtor();
}

void SD2G_Friend_Operate_Res::SharedDtor() {
  if (this != default_instance_) {
    delete operate_;
  }
}

void SD2G_Friend_Operate_Res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SD2G_Friend_Operate_Res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SD2G_Friend_Operate_Res_descriptor_;
}

const SD2G_Friend_Operate_Res& SD2G_Friend_Operate_Res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SD2G_Friend_Operate_Res* SD2G_Friend_Operate_Res::default_instance_ = NULL;

SD2G_Friend_Operate_Res* SD2G_Friend_Operate_Res::New() const {
  return new SD2G_Friend_Operate_Res;
}

void SD2G_Friend_Operate_Res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_operate()) {
      if (operate_ != NULL) operate_->::pb::SG2D_Friend_Operate::Clear();
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SD2G_Friend_Operate_Res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.SG2D_Friend_Operate operate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SD2G_Friend_Operate_Res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.SG2D_Friend_Operate operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operate(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SD2G_Friend_Operate_Res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.SG2D_Friend_Operate operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->operate(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SD2G_Friend_Operate_Res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.SG2D_Friend_Operate operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operate());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SD2G_Friend_Operate_Res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SD2G_Friend_Operate_Res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SD2G_Friend_Operate_Res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SD2G_Friend_Operate_Res::MergeFrom(const SD2G_Friend_Operate_Res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      mutable_operate()->::pb::SG2D_Friend_Operate::MergeFrom(from.operate());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SD2G_Friend_Operate_Res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SD2G_Friend_Operate_Res::CopyFrom(const SD2G_Friend_Operate_Res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SD2G_Friend_Operate_Res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_operate()) {
    if (!this->operate().IsInitialized()) return false;
  }
  return true;
}

void SD2G_Friend_Operate_Res::Swap(SD2G_Friend_Operate_Res* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SD2G_Friend_Operate_Res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SD2G_Friend_Operate_Res_descriptor_;
  metadata.reflection = SD2G_Friend_Operate_Res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SG2D_Crusade_Stage::kRestResetFieldNumber;
const int SG2D_Crusade_Stage::kCurrFubenFieldNumber;
const int SG2D_Crusade_Stage::kCurrStageFieldNumber;
const int SG2D_Crusade_Stage::kIsDeadFieldNumber;
const int SG2D_Crusade_Stage::kAddCharTimesFieldNumber;
#endif  // !_MSC_VER

SG2D_Crusade_Stage::SG2D_Crusade_Stage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SG2D_Crusade_Stage::InitAsDefaultInstance() {
}

SG2D_Crusade_Stage::SG2D_Crusade_Stage(const SG2D_Crusade_Stage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SG2D_Crusade_Stage::SharedCtor() {
  _cached_size_ = 0;
  restreset_ = 0u;
  currfuben_ = GOOGLE_ULONGLONG(0);
  currstage_ = GOOGLE_ULONGLONG(0);
  isdead_ = 0u;
  addchartimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SG2D_Crusade_Stage::~SG2D_Crusade_Stage() {
  SharedDtor();
}

void SG2D_Crusade_Stage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SG2D_Crusade_Stage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SG2D_Crusade_Stage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SG2D_Crusade_Stage_descriptor_;
}

const SG2D_Crusade_Stage& SG2D_Crusade_Stage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SG2D_Crusade_Stage* SG2D_Crusade_Stage::default_instance_ = NULL;

SG2D_Crusade_Stage* SG2D_Crusade_Stage::New() const {
  return new SG2D_Crusade_Stage;
}

void SG2D_Crusade_Stage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    restreset_ = 0u;
    currfuben_ = GOOGLE_ULONGLONG(0);
    currstage_ = GOOGLE_ULONGLONG(0);
    isdead_ = 0u;
    addchartimes_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SG2D_Crusade_Stage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 restReset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &restreset_)));
          set_has_restreset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_currFuben;
        break;
      }

      // required uint64 currFuben = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currFuben:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &currfuben_)));
          set_has_currfuben();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_currStage;
        break;
      }

      // required uint64 currStage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currStage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &currstage_)));
          set_has_currstage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isDead;
        break;
      }

      // required uint32 isDead = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isdead_)));
          set_has_isdead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_addCharTimes;
        break;
      }

      // required uint32 addCharTimes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addCharTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addchartimes_)));
          set_has_addchartimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SG2D_Crusade_Stage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 restReset = 1;
  if (has_restreset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->restreset(), output);
  }

  // required uint64 currFuben = 2;
  if (has_currfuben()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->currfuben(), output);
  }

  // required uint64 currStage = 3;
  if (has_currstage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->currstage(), output);
  }

  // required uint32 isDead = 4;
  if (has_isdead()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->isdead(), output);
  }

  // required uint32 addCharTimes = 5;
  if (has_addchartimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->addchartimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SG2D_Crusade_Stage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 restReset = 1;
  if (has_restreset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->restreset(), target);
  }

  // required uint64 currFuben = 2;
  if (has_currfuben()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->currfuben(), target);
  }

  // required uint64 currStage = 3;
  if (has_currstage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->currstage(), target);
  }

  // required uint32 isDead = 4;
  if (has_isdead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->isdead(), target);
  }

  // required uint32 addCharTimes = 5;
  if (has_addchartimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->addchartimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SG2D_Crusade_Stage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 restReset = 1;
    if (has_restreset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->restreset());
    }

    // required uint64 currFuben = 2;
    if (has_currfuben()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->currfuben());
    }

    // required uint64 currStage = 3;
    if (has_currstage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->currstage());
    }

    // required uint32 isDead = 4;
    if (has_isdead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isdead());
    }

    // required uint32 addCharTimes = 5;
    if (has_addchartimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addchartimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SG2D_Crusade_Stage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SG2D_Crusade_Stage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SG2D_Crusade_Stage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SG2D_Crusade_Stage::MergeFrom(const SG2D_Crusade_Stage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_restreset()) {
      set_restreset(from.restreset());
    }
    if (from.has_currfuben()) {
      set_currfuben(from.currfuben());
    }
    if (from.has_currstage()) {
      set_currstage(from.currstage());
    }
    if (from.has_isdead()) {
      set_isdead(from.isdead());
    }
    if (from.has_addchartimes()) {
      set_addchartimes(from.addchartimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SG2D_Crusade_Stage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SG2D_Crusade_Stage::CopyFrom(const SG2D_Crusade_Stage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SG2D_Crusade_Stage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SG2D_Crusade_Stage::Swap(SG2D_Crusade_Stage* other) {
  if (other != this) {
    std::swap(restreset_, other->restreset_);
    std::swap(currfuben_, other->currfuben_);
    std::swap(currstage_, other->currstage_);
    std::swap(isdead_, other->isdead_);
    std::swap(addchartimes_, other->addchartimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SG2D_Crusade_Stage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SG2D_Crusade_Stage_descriptor_;
  metadata.reflection = SG2D_Crusade_Stage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Select_Country_Rsp::kCountryIdFieldNumber;
#endif  // !_MSC_VER

GS2C_Select_Country_Rsp::GS2C_Select_Country_Rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Select_Country_Rsp::InitAsDefaultInstance() {
}

GS2C_Select_Country_Rsp::GS2C_Select_Country_Rsp(const GS2C_Select_Country_Rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Select_Country_Rsp::SharedCtor() {
  _cached_size_ = 0;
  country_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Select_Country_Rsp::~GS2C_Select_Country_Rsp() {
  SharedDtor();
}

void GS2C_Select_Country_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Select_Country_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Select_Country_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Select_Country_Rsp_descriptor_;
}

const GS2C_Select_Country_Rsp& GS2C_Select_Country_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

GS2C_Select_Country_Rsp* GS2C_Select_Country_Rsp::default_instance_ = NULL;

GS2C_Select_Country_Rsp* GS2C_Select_Country_Rsp::New() const {
  return new GS2C_Select_Country_Rsp;
}

void GS2C_Select_Country_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    country_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Select_Country_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 country_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_id_)));
          set_has_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Select_Country_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 country_id = 1;
  if (has_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->country_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Select_Country_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 country_id = 1;
  if (has_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->country_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Select_Country_Rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 country_id = 1;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Select_Country_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Select_Country_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Select_Country_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Select_Country_Rsp::MergeFrom(const GS2C_Select_Country_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country_id()) {
      set_country_id(from.country_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Select_Country_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Select_Country_Rsp::CopyFrom(const GS2C_Select_Country_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Select_Country_Rsp::IsInitialized() const {

  return true;
}

void GS2C_Select_Country_Rsp::Swap(GS2C_Select_Country_Rsp* other) {
  if (other != this) {
    std::swap(country_id_, other->country_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Select_Country_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Select_Country_Rsp_descriptor_;
  metadata.reflection = GS2C_Select_Country_Rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SD2G_All_player_has_sync::kResultFieldNumber;
#endif  // !_MSC_VER

SD2G_All_player_has_sync::SD2G_All_player_has_sync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SD2G_All_player_has_sync::InitAsDefaultInstance() {
}

SD2G_All_player_has_sync::SD2G_All_player_has_sync(const SD2G_All_player_has_sync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SD2G_All_player_has_sync::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SD2G_All_player_has_sync::~SD2G_All_player_has_sync() {
  SharedDtor();
}

void SD2G_All_player_has_sync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SD2G_All_player_has_sync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SD2G_All_player_has_sync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SD2G_All_player_has_sync_descriptor_;
}

const SD2G_All_player_has_sync& SD2G_All_player_has_sync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SD2G_All_player_has_sync* SD2G_All_player_has_sync::default_instance_ = NULL;

SD2G_All_player_has_sync* SD2G_All_player_has_sync::New() const {
  return new SD2G_All_player_has_sync;
}

void SD2G_All_player_has_sync::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SD2G_All_player_has_sync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SD2G_All_player_has_sync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SD2G_All_player_has_sync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SD2G_All_player_has_sync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SD2G_All_player_has_sync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SD2G_All_player_has_sync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SD2G_All_player_has_sync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SD2G_All_player_has_sync::MergeFrom(const SD2G_All_player_has_sync& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SD2G_All_player_has_sync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SD2G_All_player_has_sync::CopyFrom(const SD2G_All_player_has_sync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SD2G_All_player_has_sync::IsInitialized() const {

  return true;
}

void SD2G_All_player_has_sync::Swap(SD2G_All_player_has_sync* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SD2G_All_player_has_sync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SD2G_All_player_has_sync_descriptor_;
  metadata.reflection = SD2G_All_player_has_sync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity_Occupy_City_Num::kCountryIdFieldNumber;
const int Activity_Occupy_City_Num::kCityNumFieldNumber;
const int Activity_Occupy_City_Num::kServerIdFieldNumber;
const int Activity_Occupy_City_Num::kRegionIdFieldNumber;
#endif  // !_MSC_VER

Activity_Occupy_City_Num::Activity_Occupy_City_Num()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity_Occupy_City_Num::InitAsDefaultInstance() {
}

Activity_Occupy_City_Num::Activity_Occupy_City_Num(const Activity_Occupy_City_Num& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity_Occupy_City_Num::SharedCtor() {
  _cached_size_ = 0;
  country_id_ = 0u;
  city_num_ = 0u;
  server_id_ = 0u;
  region_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity_Occupy_City_Num::~Activity_Occupy_City_Num() {
  SharedDtor();
}

void Activity_Occupy_City_Num::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity_Occupy_City_Num::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity_Occupy_City_Num::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_Occupy_City_Num_descriptor_;
}

const Activity_Occupy_City_Num& Activity_Occupy_City_Num::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

Activity_Occupy_City_Num* Activity_Occupy_City_Num::default_instance_ = NULL;

Activity_Occupy_City_Num* Activity_Occupy_City_Num::New() const {
  return new Activity_Occupy_City_Num;
}

void Activity_Occupy_City_Num::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    country_id_ = 0u;
    city_num_ = 0u;
    server_id_ = 0u;
    region_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity_Occupy_City_Num::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 country_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_id_)));
          set_has_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_city_num;
        break;
      }

      // optional uint32 city_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_num_)));
          set_has_city_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_id;
        break;
      }

      // optional uint32 server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_region_id;
        break;
      }

      // optional uint32 region_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_region_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity_Occupy_City_Num::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 country_id = 1;
  if (has_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->country_id(), output);
  }

  // optional uint32 city_num = 2;
  if (has_city_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->city_num(), output);
  }

  // optional uint32 server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_id(), output);
  }

  // optional uint32 region_id = 4;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->region_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity_Occupy_City_Num::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 country_id = 1;
  if (has_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->country_id(), target);
  }

  // optional uint32 city_num = 2;
  if (has_city_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->city_num(), target);
  }

  // optional uint32 server_id = 3;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_id(), target);
  }

  // optional uint32 region_id = 4;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->region_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity_Occupy_City_Num::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 country_id = 1;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_id());
    }

    // optional uint32 city_num = 2;
    if (has_city_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_num());
    }

    // optional uint32 server_id = 3;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // optional uint32 region_id = 4;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity_Occupy_City_Num::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity_Occupy_City_Num* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity_Occupy_City_Num*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity_Occupy_City_Num::MergeFrom(const Activity_Occupy_City_Num& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country_id()) {
      set_country_id(from.country_id());
    }
    if (from.has_city_num()) {
      set_city_num(from.city_num());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity_Occupy_City_Num::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity_Occupy_City_Num::CopyFrom(const Activity_Occupy_City_Num& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity_Occupy_City_Num::IsInitialized() const {

  return true;
}

void Activity_Occupy_City_Num::Swap(Activity_Occupy_City_Num* other) {
  if (other != this) {
    std::swap(country_id_, other->country_id_);
    std::swap(city_num_, other->city_num_);
    std::swap(server_id_, other->server_id_);
    std::swap(region_id_, other->region_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity_Occupy_City_Num::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_Occupy_City_Num_descriptor_;
  metadata.reflection = Activity_Occupy_City_Num_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SD2G_Activity_Occupy_City_Num::kInfoFieldNumber;
#endif  // !_MSC_VER

SD2G_Activity_Occupy_City_Num::SD2G_Activity_Occupy_City_Num()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SD2G_Activity_Occupy_City_Num::InitAsDefaultInstance() {
}

SD2G_Activity_Occupy_City_Num::SD2G_Activity_Occupy_City_Num(const SD2G_Activity_Occupy_City_Num& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SD2G_Activity_Occupy_City_Num::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SD2G_Activity_Occupy_City_Num::~SD2G_Activity_Occupy_City_Num() {
  SharedDtor();
}

void SD2G_Activity_Occupy_City_Num::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SD2G_Activity_Occupy_City_Num::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SD2G_Activity_Occupy_City_Num::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SD2G_Activity_Occupy_City_Num_descriptor_;
}

const SD2G_Activity_Occupy_City_Num& SD2G_Activity_Occupy_City_Num::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SD2G_Activity_Occupy_City_Num* SD2G_Activity_Occupy_City_Num::default_instance_ = NULL;

SD2G_Activity_Occupy_City_Num* SD2G_Activity_Occupy_City_Num::New() const {
  return new SD2G_Activity_Occupy_City_Num;
}

void SD2G_Activity_Occupy_City_Num::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SD2G_Activity_Occupy_City_Num::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Activity_Occupy_City_Num info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SD2G_Activity_Occupy_City_Num::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.Activity_Occupy_City_Num info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SD2G_Activity_Occupy_City_Num::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.Activity_Occupy_City_Num info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SD2G_Activity_Occupy_City_Num::ByteSize() const {
  int total_size = 0;

  // repeated .pb.Activity_Occupy_City_Num info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SD2G_Activity_Occupy_City_Num::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SD2G_Activity_Occupy_City_Num* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SD2G_Activity_Occupy_City_Num*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SD2G_Activity_Occupy_City_Num::MergeFrom(const SD2G_Activity_Occupy_City_Num& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SD2G_Activity_Occupy_City_Num::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SD2G_Activity_Occupy_City_Num::CopyFrom(const SD2G_Activity_Occupy_City_Num& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SD2G_Activity_Occupy_City_Num::IsInitialized() const {

  return true;
}

void SD2G_Activity_Occupy_City_Num::Swap(SD2G_Activity_Occupy_City_Num* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SD2G_Activity_Occupy_City_Num::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SD2G_Activity_Occupy_City_Num_descriptor_;
  metadata.reflection = SD2G_Activity_Occupy_City_Num_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SR2G_AwardTakePlayer::kPlayeridFieldNumber;
const int SR2G_AwardTakePlayer::kRewardsFieldNumber;
#endif  // !_MSC_VER

SR2G_AwardTakePlayer::SR2G_AwardTakePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SR2G_AwardTakePlayer::InitAsDefaultInstance() {
}

SR2G_AwardTakePlayer::SR2G_AwardTakePlayer(const SR2G_AwardTakePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SR2G_AwardTakePlayer::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SR2G_AwardTakePlayer::~SR2G_AwardTakePlayer() {
  SharedDtor();
}

void SR2G_AwardTakePlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SR2G_AwardTakePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SR2G_AwardTakePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SR2G_AwardTakePlayer_descriptor_;
}

const SR2G_AwardTakePlayer& SR2G_AwardTakePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterServer_2eproto();
  return *default_instance_;
}

SR2G_AwardTakePlayer* SR2G_AwardTakePlayer::default_instance_ = NULL;

SR2G_AwardTakePlayer* SR2G_AwardTakePlayer::New() const {
  return new SR2G_AwardTakePlayer;
}

void SR2G_AwardTakePlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SR2G_AwardTakePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rewards;
        break;
      }

      // repeated .pb.PairValue rewards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rewards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SR2G_AwardTakePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // repeated .pb.PairValue rewards = 2;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SR2G_AwardTakePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // repeated .pb.PairValue rewards = 2;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SR2G_AwardTakePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  // repeated .pb.PairValue rewards = 2;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SR2G_AwardTakePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SR2G_AwardTakePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SR2G_AwardTakePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SR2G_AwardTakePlayer::MergeFrom(const SR2G_AwardTakePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SR2G_AwardTakePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SR2G_AwardTakePlayer::CopyFrom(const SR2G_AwardTakePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SR2G_AwardTakePlayer::IsInitialized() const {

  return true;
}

void SR2G_AwardTakePlayer::Swap(SR2G_AwardTakePlayer* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SR2G_AwardTakePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SR2G_AwardTakePlayer_descriptor_;
  metadata.reflection = SR2G_AwardTakePlayer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
